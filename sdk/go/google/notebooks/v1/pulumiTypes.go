// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfig struct {
	// Count of cores of this accelerator.
	CoreCount *string `pulumi:"coreCount"`
	// Type of this accelerator.
	Type *string `pulumi:"type"`
}

// AcceleratorConfigInput is an input type that accepts AcceleratorConfigArgs and AcceleratorConfigOutput values.
// You can construct a concrete instance of `AcceleratorConfigInput` via:
//
//          AcceleratorConfigArgs{...}
type AcceleratorConfigInput interface {
	pulumi.Input

	ToAcceleratorConfigOutput() AcceleratorConfigOutput
	ToAcceleratorConfigOutputWithContext(context.Context) AcceleratorConfigOutput
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigArgs struct {
	// Count of cores of this accelerator.
	CoreCount pulumi.StringPtrInput `pulumi:"coreCount"`
	// Type of this accelerator.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return i.ToAcceleratorConfigOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput)
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return i.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput).ToAcceleratorConfigPtrOutputWithContext(ctx)
}

// AcceleratorConfigPtrInput is an input type that accepts AcceleratorConfigArgs, AcceleratorConfigPtr and AcceleratorConfigPtrOutput values.
// You can construct a concrete instance of `AcceleratorConfigPtrInput` via:
//
//          AcceleratorConfigArgs{...}
//
//  or:
//
//          nil
type AcceleratorConfigPtrInput interface {
	pulumi.Input

	ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput
	ToAcceleratorConfigPtrOutputWithContext(context.Context) AcceleratorConfigPtrOutput
}

type acceleratorConfigPtrType AcceleratorConfigArgs

func AcceleratorConfigPtr(v *AcceleratorConfigArgs) AcceleratorConfigPtrInput {
	return (*acceleratorConfigPtrType)(v)
}

func (*acceleratorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfig)(nil)).Elem()
}

func (i *acceleratorConfigPtrType) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return i.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i *acceleratorConfigPtrType) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigPtrOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return o.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *AcceleratorConfig {
		return &v
	}).(AcceleratorConfigPtrOutput)
}

// Count of cores of this accelerator.
func (o AcceleratorConfigOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.CoreCount }).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o AcceleratorConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AcceleratorConfigPtrOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigPtrOutput) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return o
}

func (o AcceleratorConfigPtrOutput) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return o
}

func (o AcceleratorConfigPtrOutput) Elem() AcceleratorConfigOutput {
	return o.ApplyT(func(v *AcceleratorConfig) AcceleratorConfig { return *v }).(AcceleratorConfigOutput)
}

// Count of cores of this accelerator.
func (o AcceleratorConfigPtrOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcceleratorConfig) *string {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o AcceleratorConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcceleratorConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigResponse struct {
	// Count of cores of this accelerator.
	CoreCount string `pulumi:"coreCount"`
	// Type of this accelerator.
	Type string `pulumi:"type"`
}

// AcceleratorConfigResponseInput is an input type that accepts AcceleratorConfigResponseArgs and AcceleratorConfigResponseOutput values.
// You can construct a concrete instance of `AcceleratorConfigResponseInput` via:
//
//          AcceleratorConfigResponseArgs{...}
type AcceleratorConfigResponseInput interface {
	pulumi.Input

	ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput
	ToAcceleratorConfigResponseOutputWithContext(context.Context) AcceleratorConfigResponseOutput
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigResponseArgs struct {
	// Count of cores of this accelerator.
	CoreCount pulumi.StringInput `pulumi:"coreCount"`
	// Type of this accelerator.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AcceleratorConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigResponse)(nil)).Elem()
}

func (i AcceleratorConfigResponseArgs) ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput {
	return i.ToAcceleratorConfigResponseOutputWithContext(context.Background())
}

func (i AcceleratorConfigResponseArgs) ToAcceleratorConfigResponseOutputWithContext(ctx context.Context) AcceleratorConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigResponseOutput)
}

func (i AcceleratorConfigResponseArgs) ToAcceleratorConfigResponsePtrOutput() AcceleratorConfigResponsePtrOutput {
	return i.ToAcceleratorConfigResponsePtrOutputWithContext(context.Background())
}

func (i AcceleratorConfigResponseArgs) ToAcceleratorConfigResponsePtrOutputWithContext(ctx context.Context) AcceleratorConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigResponseOutput).ToAcceleratorConfigResponsePtrOutputWithContext(ctx)
}

// AcceleratorConfigResponsePtrInput is an input type that accepts AcceleratorConfigResponseArgs, AcceleratorConfigResponsePtr and AcceleratorConfigResponsePtrOutput values.
// You can construct a concrete instance of `AcceleratorConfigResponsePtrInput` via:
//
//          AcceleratorConfigResponseArgs{...}
//
//  or:
//
//          nil
type AcceleratorConfigResponsePtrInput interface {
	pulumi.Input

	ToAcceleratorConfigResponsePtrOutput() AcceleratorConfigResponsePtrOutput
	ToAcceleratorConfigResponsePtrOutputWithContext(context.Context) AcceleratorConfigResponsePtrOutput
}

type acceleratorConfigResponsePtrType AcceleratorConfigResponseArgs

func AcceleratorConfigResponsePtr(v *AcceleratorConfigResponseArgs) AcceleratorConfigResponsePtrInput {
	return (*acceleratorConfigResponsePtrType)(v)
}

func (*acceleratorConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfigResponse)(nil)).Elem()
}

func (i *acceleratorConfigResponsePtrType) ToAcceleratorConfigResponsePtrOutput() AcceleratorConfigResponsePtrOutput {
	return i.ToAcceleratorConfigResponsePtrOutputWithContext(context.Background())
}

func (i *acceleratorConfigResponsePtrType) ToAcceleratorConfigResponsePtrOutputWithContext(ctx context.Context) AcceleratorConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigResponsePtrOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigResponseOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput {
	return o
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutputWithContext(ctx context.Context) AcceleratorConfigResponseOutput {
	return o
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponsePtrOutput() AcceleratorConfigResponsePtrOutput {
	return o.ToAcceleratorConfigResponsePtrOutputWithContext(context.Background())
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponsePtrOutputWithContext(ctx context.Context) AcceleratorConfigResponsePtrOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) *AcceleratorConfigResponse {
		return &v
	}).(AcceleratorConfigResponsePtrOutput)
}

// Count of cores of this accelerator.
func (o AcceleratorConfigResponseOutput) CoreCount() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.CoreCount }).(pulumi.StringOutput)
}

// Type of this accelerator.
func (o AcceleratorConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AcceleratorConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponsePtrOutput) ToAcceleratorConfigResponsePtrOutput() AcceleratorConfigResponsePtrOutput {
	return o
}

func (o AcceleratorConfigResponsePtrOutput) ToAcceleratorConfigResponsePtrOutputWithContext(ctx context.Context) AcceleratorConfigResponsePtrOutput {
	return o
}

func (o AcceleratorConfigResponsePtrOutput) Elem() AcceleratorConfigResponseOutput {
	return o.ApplyT(func(v *AcceleratorConfigResponse) AcceleratorConfigResponse { return *v }).(AcceleratorConfigResponseOutput)
}

// Count of cores of this accelerator.
func (o AcceleratorConfigResponsePtrOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcceleratorConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CoreCount
	}).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o AcceleratorConfigResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcceleratorConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members` with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// BindingResponseInput is an input type that accepts BindingResponseArgs and BindingResponseOutput values.
// You can construct a concrete instance of `BindingResponseInput` via:
//
//          BindingResponseArgs{...}
type BindingResponseInput interface {
	pulumi.Input

	ToBindingResponseOutput() BindingResponseOutput
	ToBindingResponseOutputWithContext(context.Context) BindingResponseOutput
}

// Associates `members` with a `role`.
type BindingResponseArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponseInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringInput `pulumi:"role"`
}

func (BindingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (i BindingResponseArgs) ToBindingResponseOutput() BindingResponseOutput {
	return i.ToBindingResponseOutputWithContext(context.Background())
}

func (i BindingResponseArgs) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseOutput)
}

// BindingResponseArrayInput is an input type that accepts BindingResponseArray and BindingResponseArrayOutput values.
// You can construct a concrete instance of `BindingResponseArrayInput` via:
//
//          BindingResponseArray{ BindingResponseArgs{...} }
type BindingResponseArrayInput interface {
	pulumi.Input

	ToBindingResponseArrayOutput() BindingResponseArrayOutput
	ToBindingResponseArrayOutputWithContext(context.Context) BindingResponseArrayOutput
}

type BindingResponseArray []BindingResponseInput

func (BindingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (i BindingResponseArray) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return i.ToBindingResponseArrayOutputWithContext(context.Background())
}

func (i BindingResponseArray) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseArrayOutput)
}

// Associates `members` with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImage struct {
	// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository *string `pulumi:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag *string `pulumi:"tag"`
}

// ContainerImageInput is an input type that accepts ContainerImageArgs and ContainerImageOutput values.
// You can construct a concrete instance of `ContainerImageInput` via:
//
//          ContainerImageArgs{...}
type ContainerImageInput interface {
	pulumi.Input

	ToContainerImageOutput() ContainerImageOutput
	ToContainerImageOutputWithContext(context.Context) ContainerImageOutput
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageArgs struct {
	// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ContainerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (i ContainerImageArgs) ToContainerImageOutput() ContainerImageOutput {
	return i.ToContainerImageOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput)
}

func (i ContainerImageArgs) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput).ToContainerImagePtrOutputWithContext(ctx)
}

// ContainerImagePtrInput is an input type that accepts ContainerImageArgs, ContainerImagePtr and ContainerImagePtrOutput values.
// You can construct a concrete instance of `ContainerImagePtrInput` via:
//
//          ContainerImageArgs{...}
//
//  or:
//
//          nil
type ContainerImagePtrInput interface {
	pulumi.Input

	ToContainerImagePtrOutput() ContainerImagePtrOutput
	ToContainerImagePtrOutputWithContext(context.Context) ContainerImagePtrOutput
}

type containerImagePtrType ContainerImageArgs

func ContainerImagePtr(v *ContainerImageArgs) ContainerImagePtrInput {
	return (*containerImagePtrType)(v)
}

func (*containerImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (i *containerImagePtrType) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i *containerImagePtrType) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImagePtrOutput)
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageOutput struct{ *pulumi.OutputState }

func (ContainerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (o ContainerImageOutput) ToContainerImageOutput() ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o.ToContainerImagePtrOutputWithContext(context.Background())
}

func (o ContainerImageOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o.ApplyT(func(v ContainerImage) *ContainerImage {
		return &v
	}).(ContainerImagePtrOutput)
}

// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImageOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImage) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ContainerImagePtrOutput struct{ *pulumi.OutputState }

func (ContainerImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) Elem() ContainerImageOutput {
	return o.ApplyT(func(v *ContainerImage) ContainerImage { return *v }).(ContainerImageOutput)
}

// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImagePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageResponse struct {
	// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository string `pulumi:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag string `pulumi:"tag"`
}

// ContainerImageResponseInput is an input type that accepts ContainerImageResponseArgs and ContainerImageResponseOutput values.
// You can construct a concrete instance of `ContainerImageResponseInput` via:
//
//          ContainerImageResponseArgs{...}
type ContainerImageResponseInput interface {
	pulumi.Input

	ToContainerImageResponseOutput() ContainerImageResponseOutput
	ToContainerImageResponseOutputWithContext(context.Context) ContainerImageResponseOutput
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageResponseArgs struct {
	// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository pulumi.StringInput `pulumi:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (ContainerImageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImageResponse)(nil)).Elem()
}

func (i ContainerImageResponseArgs) ToContainerImageResponseOutput() ContainerImageResponseOutput {
	return i.ToContainerImageResponseOutputWithContext(context.Background())
}

func (i ContainerImageResponseArgs) ToContainerImageResponseOutputWithContext(ctx context.Context) ContainerImageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageResponseOutput)
}

func (i ContainerImageResponseArgs) ToContainerImageResponsePtrOutput() ContainerImageResponsePtrOutput {
	return i.ToContainerImageResponsePtrOutputWithContext(context.Background())
}

func (i ContainerImageResponseArgs) ToContainerImageResponsePtrOutputWithContext(ctx context.Context) ContainerImageResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageResponseOutput).ToContainerImageResponsePtrOutputWithContext(ctx)
}

// ContainerImageResponsePtrInput is an input type that accepts ContainerImageResponseArgs, ContainerImageResponsePtr and ContainerImageResponsePtrOutput values.
// You can construct a concrete instance of `ContainerImageResponsePtrInput` via:
//
//          ContainerImageResponseArgs{...}
//
//  or:
//
//          nil
type ContainerImageResponsePtrInput interface {
	pulumi.Input

	ToContainerImageResponsePtrOutput() ContainerImageResponsePtrOutput
	ToContainerImageResponsePtrOutputWithContext(context.Context) ContainerImageResponsePtrOutput
}

type containerImageResponsePtrType ContainerImageResponseArgs

func ContainerImageResponsePtr(v *ContainerImageResponseArgs) ContainerImageResponsePtrInput {
	return (*containerImageResponsePtrType)(v)
}

func (*containerImageResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImageResponse)(nil)).Elem()
}

func (i *containerImageResponsePtrType) ToContainerImageResponsePtrOutput() ContainerImageResponsePtrOutput {
	return i.ToContainerImageResponsePtrOutputWithContext(context.Background())
}

func (i *containerImageResponsePtrType) ToContainerImageResponsePtrOutputWithContext(ctx context.Context) ContainerImageResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageResponsePtrOutput)
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageResponseOutput struct{ *pulumi.OutputState }

func (ContainerImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImageResponse)(nil)).Elem()
}

func (o ContainerImageResponseOutput) ToContainerImageResponseOutput() ContainerImageResponseOutput {
	return o
}

func (o ContainerImageResponseOutput) ToContainerImageResponseOutputWithContext(ctx context.Context) ContainerImageResponseOutput {
	return o
}

func (o ContainerImageResponseOutput) ToContainerImageResponsePtrOutput() ContainerImageResponsePtrOutput {
	return o.ToContainerImageResponsePtrOutputWithContext(context.Background())
}

func (o ContainerImageResponseOutput) ToContainerImageResponsePtrOutputWithContext(ctx context.Context) ContainerImageResponsePtrOutput {
	return o.ApplyT(func(v ContainerImageResponse) *ContainerImageResponse {
		return &v
	}).(ContainerImageResponsePtrOutput)
}

// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImageResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImageResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImageResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImageResponse) string { return v.Tag }).(pulumi.StringOutput)
}

type ContainerImageResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerImageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImageResponse)(nil)).Elem()
}

func (o ContainerImageResponsePtrOutput) ToContainerImageResponsePtrOutput() ContainerImageResponsePtrOutput {
	return o
}

func (o ContainerImageResponsePtrOutput) ToContainerImageResponsePtrOutputWithContext(ctx context.Context) ContainerImageResponsePtrOutput {
	return o
}

func (o ContainerImageResponsePtrOutput) Elem() ContainerImageResponseOutput {
	return o.ApplyT(func(v *ContainerImageResponse) ContainerImageResponse { return *v }).(ContainerImageResponseOutput)
}

// Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImageResponsePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImageResponsePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tag
	}).(pulumi.StringPtrOutput)
}

// An instance-attached disk resource.
type DiskResponse struct {
	// Indicates whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete bool `pulumi:"autoDelete"`
	// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
	Boot bool `pulumi:"boot"`
	// Indicates a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine.This field is only applicable for persistent disks.
	DeviceName string `pulumi:"deviceName"`
	// Indicates the size of the disk in base-2 GB.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures []GuestOsFeatureResponse `pulumi:"guestOsFeatures"`
	// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
	Index string `pulumi:"index"`
	// Indicates the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: NVME SCSI
	Interface string `pulumi:"interface"`
	// Type of the resource. Always compute#attachedDisk for attached disks.
	Kind string `pulumi:"kind"`
	// A list of publicly visible licenses. Reserved for Google's use. A License represents billing and aggregate usage data for public and marketplace images.
	Licenses []string `pulumi:"licenses"`
	// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. Valid values: READ_ONLY READ_WRITE
	Mode string `pulumi:"mode"`
	// Indicates a valid partial or full URL to an existing Persistent Disk resource.
	Source string `pulumi:"source"`
	// Indicates the type of the disk, either SCRATCH or PERSISTENT. Valid values: PERSISTENT SCRATCH
	Type string `pulumi:"type"`
}

// DiskResponseInput is an input type that accepts DiskResponseArgs and DiskResponseOutput values.
// You can construct a concrete instance of `DiskResponseInput` via:
//
//          DiskResponseArgs{...}
type DiskResponseInput interface {
	pulumi.Input

	ToDiskResponseOutput() DiskResponseOutput
	ToDiskResponseOutputWithContext(context.Context) DiskResponseOutput
}

// An instance-attached disk resource.
type DiskResponseArgs struct {
	// Indicates whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete pulumi.BoolInput `pulumi:"autoDelete"`
	// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
	Boot pulumi.BoolInput `pulumi:"boot"`
	// Indicates a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine.This field is only applicable for persistent disks.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// Indicates the size of the disk in base-2 GB.
	DiskSizeGb pulumi.StringInput `pulumi:"diskSizeGb"`
	// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures GuestOsFeatureResponseArrayInput `pulumi:"guestOsFeatures"`
	// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
	Index pulumi.StringInput `pulumi:"index"`
	// Indicates the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: NVME SCSI
	Interface pulumi.StringInput `pulumi:"interface"`
	// Type of the resource. Always compute#attachedDisk for attached disks.
	Kind pulumi.StringInput `pulumi:"kind"`
	// A list of publicly visible licenses. Reserved for Google's use. A License represents billing and aggregate usage data for public and marketplace images.
	Licenses pulumi.StringArrayInput `pulumi:"licenses"`
	// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. Valid values: READ_ONLY READ_WRITE
	Mode pulumi.StringInput `pulumi:"mode"`
	// Indicates a valid partial or full URL to an existing Persistent Disk resource.
	Source pulumi.StringInput `pulumi:"source"`
	// Indicates the type of the disk, either SCRATCH or PERSISTENT. Valid values: PERSISTENT SCRATCH
	Type pulumi.StringInput `pulumi:"type"`
}

func (DiskResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskResponse)(nil)).Elem()
}

func (i DiskResponseArgs) ToDiskResponseOutput() DiskResponseOutput {
	return i.ToDiskResponseOutputWithContext(context.Background())
}

func (i DiskResponseArgs) ToDiskResponseOutputWithContext(ctx context.Context) DiskResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskResponseOutput)
}

// DiskResponseArrayInput is an input type that accepts DiskResponseArray and DiskResponseArrayOutput values.
// You can construct a concrete instance of `DiskResponseArrayInput` via:
//
//          DiskResponseArray{ DiskResponseArgs{...} }
type DiskResponseArrayInput interface {
	pulumi.Input

	ToDiskResponseArrayOutput() DiskResponseArrayOutput
	ToDiskResponseArrayOutputWithContext(context.Context) DiskResponseArrayOutput
}

type DiskResponseArray []DiskResponseInput

func (DiskResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskResponse)(nil)).Elem()
}

func (i DiskResponseArray) ToDiskResponseArrayOutput() DiskResponseArrayOutput {
	return i.ToDiskResponseArrayOutputWithContext(context.Background())
}

func (i DiskResponseArray) ToDiskResponseArrayOutputWithContext(ctx context.Context) DiskResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskResponseArrayOutput)
}

// An instance-attached disk resource.
type DiskResponseOutput struct{ *pulumi.OutputState }

func (DiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskResponse)(nil)).Elem()
}

func (o DiskResponseOutput) ToDiskResponseOutput() DiskResponseOutput {
	return o
}

func (o DiskResponseOutput) ToDiskResponseOutputWithContext(ctx context.Context) DiskResponseOutput {
	return o
}

// Indicates whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
func (o DiskResponseOutput) AutoDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v DiskResponse) bool { return v.AutoDelete }).(pulumi.BoolOutput)
}

// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
func (o DiskResponseOutput) Boot() pulumi.BoolOutput {
	return o.ApplyT(func(v DiskResponse) bool { return v.Boot }).(pulumi.BoolOutput)
}

// Indicates a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine.This field is only applicable for persistent disks.
func (o DiskResponseOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.DeviceName }).(pulumi.StringOutput)
}

// Indicates the size of the disk in base-2 GB.
func (o DiskResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
func (o DiskResponseOutput) GuestOsFeatures() GuestOsFeatureResponseArrayOutput {
	return o.ApplyT(func(v DiskResponse) []GuestOsFeatureResponse { return v.GuestOsFeatures }).(GuestOsFeatureResponseArrayOutput)
}

// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
func (o DiskResponseOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Index }).(pulumi.StringOutput)
}

// Indicates the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: NVME SCSI
func (o DiskResponseOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Interface }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#attachedDisk for attached disks.
func (o DiskResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// A list of publicly visible licenses. Reserved for Google's use. A License represents billing and aggregate usage data for public and marketplace images.
func (o DiskResponseOutput) Licenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiskResponse) []string { return v.Licenses }).(pulumi.StringArrayOutput)
}

// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. Valid values: READ_ONLY READ_WRITE
func (o DiskResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Indicates a valid partial or full URL to an existing Persistent Disk resource.
func (o DiskResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Source }).(pulumi.StringOutput)
}

// Indicates the type of the disk, either SCRATCH or PERSISTENT. Valid values: PERSISTENT SCRATCH
func (o DiskResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskResponse)(nil)).Elem()
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutput() DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutputWithContext(ctx context.Context) DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) Index(i pulumi.IntInput) DiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskResponse {
		return vs[0].([]DiskResponse)[vs[1].(int)]
	}).(DiskResponseOutput)
}

// The definition of a single executed notebook.
type ExecutionResponse struct {
	// Time the Execution was instantiated.
	CreateTime string `pulumi:"createTime"`
	// A brief description of this execution.
	Description string `pulumi:"description"`
	// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
	DisplayName string `pulumi:"displayName"`
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate ExecutionTemplateResponse `pulumi:"executionTemplate"`
	// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/execution/{execution_id}
	Name string `pulumi:"name"`
	// Output notebook file generated by this execution
	OutputNotebookFile string `pulumi:"outputNotebookFile"`
	// State of the underlying AI Platform job.
	State string `pulumi:"state"`
	// Time the Execution was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

// ExecutionResponseInput is an input type that accepts ExecutionResponseArgs and ExecutionResponseOutput values.
// You can construct a concrete instance of `ExecutionResponseInput` via:
//
//          ExecutionResponseArgs{...}
type ExecutionResponseInput interface {
	pulumi.Input

	ToExecutionResponseOutput() ExecutionResponseOutput
	ToExecutionResponseOutputWithContext(context.Context) ExecutionResponseOutput
}

// The definition of a single executed notebook.
type ExecutionResponseArgs struct {
	// Time the Execution was instantiated.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// A brief description of this execution.
	Description pulumi.StringInput `pulumi:"description"`
	// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate ExecutionTemplateResponseInput `pulumi:"executionTemplate"`
	// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/execution/{execution_id}
	Name pulumi.StringInput `pulumi:"name"`
	// Output notebook file generated by this execution
	OutputNotebookFile pulumi.StringInput `pulumi:"outputNotebookFile"`
	// State of the underlying AI Platform job.
	State pulumi.StringInput `pulumi:"state"`
	// Time the Execution was last updated.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (ExecutionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionResponse)(nil)).Elem()
}

func (i ExecutionResponseArgs) ToExecutionResponseOutput() ExecutionResponseOutput {
	return i.ToExecutionResponseOutputWithContext(context.Background())
}

func (i ExecutionResponseArgs) ToExecutionResponseOutputWithContext(ctx context.Context) ExecutionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionResponseOutput)
}

// ExecutionResponseArrayInput is an input type that accepts ExecutionResponseArray and ExecutionResponseArrayOutput values.
// You can construct a concrete instance of `ExecutionResponseArrayInput` via:
//
//          ExecutionResponseArray{ ExecutionResponseArgs{...} }
type ExecutionResponseArrayInput interface {
	pulumi.Input

	ToExecutionResponseArrayOutput() ExecutionResponseArrayOutput
	ToExecutionResponseArrayOutputWithContext(context.Context) ExecutionResponseArrayOutput
}

type ExecutionResponseArray []ExecutionResponseInput

func (ExecutionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionResponse)(nil)).Elem()
}

func (i ExecutionResponseArray) ToExecutionResponseArrayOutput() ExecutionResponseArrayOutput {
	return i.ToExecutionResponseArrayOutputWithContext(context.Background())
}

func (i ExecutionResponseArray) ToExecutionResponseArrayOutputWithContext(ctx context.Context) ExecutionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionResponseArrayOutput)
}

// The definition of a single executed notebook.
type ExecutionResponseOutput struct{ *pulumi.OutputState }

func (ExecutionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionResponse)(nil)).Elem()
}

func (o ExecutionResponseOutput) ToExecutionResponseOutput() ExecutionResponseOutput {
	return o
}

func (o ExecutionResponseOutput) ToExecutionResponseOutputWithContext(ctx context.Context) ExecutionResponseOutput {
	return o
}

// Time the Execution was instantiated.
func (o ExecutionResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// A brief description of this execution.
func (o ExecutionResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
func (o ExecutionResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// execute metadata including name, hardware spec, region, labels, etc.
func (o ExecutionResponseOutput) ExecutionTemplate() ExecutionTemplateResponseOutput {
	return o.ApplyT(func(v ExecutionResponse) ExecutionTemplateResponse { return v.ExecutionTemplate }).(ExecutionTemplateResponseOutput)
}

// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/execution/{execution_id}
func (o ExecutionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Output notebook file generated by this execution
func (o ExecutionResponseOutput) OutputNotebookFile() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.OutputNotebookFile }).(pulumi.StringOutput)
}

// State of the underlying AI Platform job.
func (o ExecutionResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.State }).(pulumi.StringOutput)
}

// Time the Execution was last updated.
func (o ExecutionResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type ExecutionResponseArrayOutput struct{ *pulumi.OutputState }

func (ExecutionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionResponse)(nil)).Elem()
}

func (o ExecutionResponseArrayOutput) ToExecutionResponseArrayOutput() ExecutionResponseArrayOutput {
	return o
}

func (o ExecutionResponseArrayOutput) ToExecutionResponseArrayOutputWithContext(ctx context.Context) ExecutionResponseArrayOutput {
	return o
}

func (o ExecutionResponseArrayOutput) Index(i pulumi.IntInput) ExecutionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutionResponse {
		return vs[0].([]ExecutionResponse)[vs[1].(int)]
	}).(ExecutionResponseOutput)
}

// The description a notebook execution workload.
type ExecutionTemplate struct {
	// Configuration (count and accelerator type) for hardware running notebook execution.
	AcceleratorConfig *SchedulerAcceleratorConfig `pulumi:"acceleratorConfig"`
	// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
	ContainerImageUri *string `pulumi:"containerImageUri"`
	// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: gs://{project_id}/{folder}/{notebook_file_name} Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb
	InputNotebookFile *string `pulumi:"inputNotebookFile"`
	// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU.
	MasterType *string `pulumi:"masterType"`
	// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: gs://{project_id}/{folder} Ex: gs://notebook_user/scheduled_notebooks
	OutputNotebookFolder *string `pulumi:"outputNotebookFolder"`
	// Parameters used within the 'input_notebook_file' notebook.
	Parameters *string `pulumi:"parameters"`
	// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml
	ParamsYamlFile *string `pulumi:"paramsYamlFile"`
	// Required. Scale tier of the hardware used for notebook execution.
	ScaleTier *string `pulumi:"scaleTier"`
}

// ExecutionTemplateInput is an input type that accepts ExecutionTemplateArgs and ExecutionTemplateOutput values.
// You can construct a concrete instance of `ExecutionTemplateInput` via:
//
//          ExecutionTemplateArgs{...}
type ExecutionTemplateInput interface {
	pulumi.Input

	ToExecutionTemplateOutput() ExecutionTemplateOutput
	ToExecutionTemplateOutputWithContext(context.Context) ExecutionTemplateOutput
}

// The description a notebook execution workload.
type ExecutionTemplateArgs struct {
	// Configuration (count and accelerator type) for hardware running notebook execution.
	AcceleratorConfig SchedulerAcceleratorConfigPtrInput `pulumi:"acceleratorConfig"`
	// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
	ContainerImageUri pulumi.StringPtrInput `pulumi:"containerImageUri"`
	// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: gs://{project_id}/{folder}/{notebook_file_name} Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb
	InputNotebookFile pulumi.StringPtrInput `pulumi:"inputNotebookFile"`
	// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU.
	MasterType pulumi.StringPtrInput `pulumi:"masterType"`
	// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: gs://{project_id}/{folder} Ex: gs://notebook_user/scheduled_notebooks
	OutputNotebookFolder pulumi.StringPtrInput `pulumi:"outputNotebookFolder"`
	// Parameters used within the 'input_notebook_file' notebook.
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml
	ParamsYamlFile pulumi.StringPtrInput `pulumi:"paramsYamlFile"`
	// Required. Scale tier of the hardware used for notebook execution.
	ScaleTier pulumi.StringPtrInput `pulumi:"scaleTier"`
}

func (ExecutionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionTemplate)(nil)).Elem()
}

func (i ExecutionTemplateArgs) ToExecutionTemplateOutput() ExecutionTemplateOutput {
	return i.ToExecutionTemplateOutputWithContext(context.Background())
}

func (i ExecutionTemplateArgs) ToExecutionTemplateOutputWithContext(ctx context.Context) ExecutionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionTemplateOutput)
}

func (i ExecutionTemplateArgs) ToExecutionTemplatePtrOutput() ExecutionTemplatePtrOutput {
	return i.ToExecutionTemplatePtrOutputWithContext(context.Background())
}

func (i ExecutionTemplateArgs) ToExecutionTemplatePtrOutputWithContext(ctx context.Context) ExecutionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionTemplateOutput).ToExecutionTemplatePtrOutputWithContext(ctx)
}

// ExecutionTemplatePtrInput is an input type that accepts ExecutionTemplateArgs, ExecutionTemplatePtr and ExecutionTemplatePtrOutput values.
// You can construct a concrete instance of `ExecutionTemplatePtrInput` via:
//
//          ExecutionTemplateArgs{...}
//
//  or:
//
//          nil
type ExecutionTemplatePtrInput interface {
	pulumi.Input

	ToExecutionTemplatePtrOutput() ExecutionTemplatePtrOutput
	ToExecutionTemplatePtrOutputWithContext(context.Context) ExecutionTemplatePtrOutput
}

type executionTemplatePtrType ExecutionTemplateArgs

func ExecutionTemplatePtr(v *ExecutionTemplateArgs) ExecutionTemplatePtrInput {
	return (*executionTemplatePtrType)(v)
}

func (*executionTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionTemplate)(nil)).Elem()
}

func (i *executionTemplatePtrType) ToExecutionTemplatePtrOutput() ExecutionTemplatePtrOutput {
	return i.ToExecutionTemplatePtrOutputWithContext(context.Background())
}

func (i *executionTemplatePtrType) ToExecutionTemplatePtrOutputWithContext(ctx context.Context) ExecutionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionTemplatePtrOutput)
}

// The description a notebook execution workload.
type ExecutionTemplateOutput struct{ *pulumi.OutputState }

func (ExecutionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionTemplate)(nil)).Elem()
}

func (o ExecutionTemplateOutput) ToExecutionTemplateOutput() ExecutionTemplateOutput {
	return o
}

func (o ExecutionTemplateOutput) ToExecutionTemplateOutputWithContext(ctx context.Context) ExecutionTemplateOutput {
	return o
}

func (o ExecutionTemplateOutput) ToExecutionTemplatePtrOutput() ExecutionTemplatePtrOutput {
	return o.ToExecutionTemplatePtrOutputWithContext(context.Background())
}

func (o ExecutionTemplateOutput) ToExecutionTemplatePtrOutputWithContext(ctx context.Context) ExecutionTemplatePtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *ExecutionTemplate {
		return &v
	}).(ExecutionTemplatePtrOutput)
}

// Configuration (count and accelerator type) for hardware running notebook execution.
func (o ExecutionTemplateOutput) AcceleratorConfig() SchedulerAcceleratorConfigPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *SchedulerAcceleratorConfig { return v.AcceleratorConfig }).(SchedulerAcceleratorConfigPtrOutput)
}

// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
func (o ExecutionTemplateOutput) ContainerImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.ContainerImageUri }).(pulumi.StringPtrOutput)
}

// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: gs://{project_id}/{folder}/{notebook_file_name} Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb
func (o ExecutionTemplateOutput) InputNotebookFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.InputNotebookFile }).(pulumi.StringPtrOutput)
}

// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
func (o ExecutionTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExecutionTemplate) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU.
func (o ExecutionTemplateOutput) MasterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.MasterType }).(pulumi.StringPtrOutput)
}

// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: gs://{project_id}/{folder} Ex: gs://notebook_user/scheduled_notebooks
func (o ExecutionTemplateOutput) OutputNotebookFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.OutputNotebookFolder }).(pulumi.StringPtrOutput)
}

// Parameters used within the 'input_notebook_file' notebook.
func (o ExecutionTemplateOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml
func (o ExecutionTemplateOutput) ParamsYamlFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.ParamsYamlFile }).(pulumi.StringPtrOutput)
}

// Required. Scale tier of the hardware used for notebook execution.
func (o ExecutionTemplateOutput) ScaleTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.ScaleTier }).(pulumi.StringPtrOutput)
}

type ExecutionTemplatePtrOutput struct{ *pulumi.OutputState }

func (ExecutionTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionTemplate)(nil)).Elem()
}

func (o ExecutionTemplatePtrOutput) ToExecutionTemplatePtrOutput() ExecutionTemplatePtrOutput {
	return o
}

func (o ExecutionTemplatePtrOutput) ToExecutionTemplatePtrOutputWithContext(ctx context.Context) ExecutionTemplatePtrOutput {
	return o
}

func (o ExecutionTemplatePtrOutput) Elem() ExecutionTemplateOutput {
	return o.ApplyT(func(v *ExecutionTemplate) ExecutionTemplate { return *v }).(ExecutionTemplateOutput)
}

// Configuration (count and accelerator type) for hardware running notebook execution.
func (o ExecutionTemplatePtrOutput) AcceleratorConfig() SchedulerAcceleratorConfigPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *SchedulerAcceleratorConfig {
		if v == nil {
			return nil
		}
		return v.AcceleratorConfig
	}).(SchedulerAcceleratorConfigPtrOutput)
}

// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
func (o ExecutionTemplatePtrOutput) ContainerImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ContainerImageUri
	}).(pulumi.StringPtrOutput)
}

// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: gs://{project_id}/{folder}/{notebook_file_name} Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb
func (o ExecutionTemplatePtrOutput) InputNotebookFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.InputNotebookFile
	}).(pulumi.StringPtrOutput)
}

// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
func (o ExecutionTemplatePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExecutionTemplate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU.
func (o ExecutionTemplatePtrOutput) MasterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.MasterType
	}).(pulumi.StringPtrOutput)
}

// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: gs://{project_id}/{folder} Ex: gs://notebook_user/scheduled_notebooks
func (o ExecutionTemplatePtrOutput) OutputNotebookFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.OutputNotebookFolder
	}).(pulumi.StringPtrOutput)
}

// Parameters used within the 'input_notebook_file' notebook.
func (o ExecutionTemplatePtrOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringPtrOutput)
}

// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml
func (o ExecutionTemplatePtrOutput) ParamsYamlFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ParamsYamlFile
	}).(pulumi.StringPtrOutput)
}

// Required. Scale tier of the hardware used for notebook execution.
func (o ExecutionTemplatePtrOutput) ScaleTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ScaleTier
	}).(pulumi.StringPtrOutput)
}

// The description a notebook execution workload.
type ExecutionTemplateResponse struct {
	// Configuration (count and accelerator type) for hardware running notebook execution.
	AcceleratorConfig SchedulerAcceleratorConfigResponse `pulumi:"acceleratorConfig"`
	// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
	ContainerImageUri string `pulumi:"containerImageUri"`
	// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: gs://{project_id}/{folder}/{notebook_file_name} Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb
	InputNotebookFile string `pulumi:"inputNotebookFile"`
	// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU.
	MasterType string `pulumi:"masterType"`
	// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: gs://{project_id}/{folder} Ex: gs://notebook_user/scheduled_notebooks
	OutputNotebookFolder string `pulumi:"outputNotebookFolder"`
	// Parameters used within the 'input_notebook_file' notebook.
	Parameters string `pulumi:"parameters"`
	// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml
	ParamsYamlFile string `pulumi:"paramsYamlFile"`
	// Required. Scale tier of the hardware used for notebook execution.
	ScaleTier string `pulumi:"scaleTier"`
}

// ExecutionTemplateResponseInput is an input type that accepts ExecutionTemplateResponseArgs and ExecutionTemplateResponseOutput values.
// You can construct a concrete instance of `ExecutionTemplateResponseInput` via:
//
//          ExecutionTemplateResponseArgs{...}
type ExecutionTemplateResponseInput interface {
	pulumi.Input

	ToExecutionTemplateResponseOutput() ExecutionTemplateResponseOutput
	ToExecutionTemplateResponseOutputWithContext(context.Context) ExecutionTemplateResponseOutput
}

// The description a notebook execution workload.
type ExecutionTemplateResponseArgs struct {
	// Configuration (count and accelerator type) for hardware running notebook execution.
	AcceleratorConfig SchedulerAcceleratorConfigResponseInput `pulumi:"acceleratorConfig"`
	// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
	ContainerImageUri pulumi.StringInput `pulumi:"containerImageUri"`
	// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: gs://{project_id}/{folder}/{notebook_file_name} Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb
	InputNotebookFile pulumi.StringInput `pulumi:"inputNotebookFile"`
	// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU.
	MasterType pulumi.StringInput `pulumi:"masterType"`
	// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: gs://{project_id}/{folder} Ex: gs://notebook_user/scheduled_notebooks
	OutputNotebookFolder pulumi.StringInput `pulumi:"outputNotebookFolder"`
	// Parameters used within the 'input_notebook_file' notebook.
	Parameters pulumi.StringInput `pulumi:"parameters"`
	// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml
	ParamsYamlFile pulumi.StringInput `pulumi:"paramsYamlFile"`
	// Required. Scale tier of the hardware used for notebook execution.
	ScaleTier pulumi.StringInput `pulumi:"scaleTier"`
}

func (ExecutionTemplateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionTemplateResponse)(nil)).Elem()
}

func (i ExecutionTemplateResponseArgs) ToExecutionTemplateResponseOutput() ExecutionTemplateResponseOutput {
	return i.ToExecutionTemplateResponseOutputWithContext(context.Background())
}

func (i ExecutionTemplateResponseArgs) ToExecutionTemplateResponseOutputWithContext(ctx context.Context) ExecutionTemplateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionTemplateResponseOutput)
}

func (i ExecutionTemplateResponseArgs) ToExecutionTemplateResponsePtrOutput() ExecutionTemplateResponsePtrOutput {
	return i.ToExecutionTemplateResponsePtrOutputWithContext(context.Background())
}

func (i ExecutionTemplateResponseArgs) ToExecutionTemplateResponsePtrOutputWithContext(ctx context.Context) ExecutionTemplateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionTemplateResponseOutput).ToExecutionTemplateResponsePtrOutputWithContext(ctx)
}

// ExecutionTemplateResponsePtrInput is an input type that accepts ExecutionTemplateResponseArgs, ExecutionTemplateResponsePtr and ExecutionTemplateResponsePtrOutput values.
// You can construct a concrete instance of `ExecutionTemplateResponsePtrInput` via:
//
//          ExecutionTemplateResponseArgs{...}
//
//  or:
//
//          nil
type ExecutionTemplateResponsePtrInput interface {
	pulumi.Input

	ToExecutionTemplateResponsePtrOutput() ExecutionTemplateResponsePtrOutput
	ToExecutionTemplateResponsePtrOutputWithContext(context.Context) ExecutionTemplateResponsePtrOutput
}

type executionTemplateResponsePtrType ExecutionTemplateResponseArgs

func ExecutionTemplateResponsePtr(v *ExecutionTemplateResponseArgs) ExecutionTemplateResponsePtrInput {
	return (*executionTemplateResponsePtrType)(v)
}

func (*executionTemplateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionTemplateResponse)(nil)).Elem()
}

func (i *executionTemplateResponsePtrType) ToExecutionTemplateResponsePtrOutput() ExecutionTemplateResponsePtrOutput {
	return i.ToExecutionTemplateResponsePtrOutputWithContext(context.Background())
}

func (i *executionTemplateResponsePtrType) ToExecutionTemplateResponsePtrOutputWithContext(ctx context.Context) ExecutionTemplateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionTemplateResponsePtrOutput)
}

// The description a notebook execution workload.
type ExecutionTemplateResponseOutput struct{ *pulumi.OutputState }

func (ExecutionTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionTemplateResponse)(nil)).Elem()
}

func (o ExecutionTemplateResponseOutput) ToExecutionTemplateResponseOutput() ExecutionTemplateResponseOutput {
	return o
}

func (o ExecutionTemplateResponseOutput) ToExecutionTemplateResponseOutputWithContext(ctx context.Context) ExecutionTemplateResponseOutput {
	return o
}

func (o ExecutionTemplateResponseOutput) ToExecutionTemplateResponsePtrOutput() ExecutionTemplateResponsePtrOutput {
	return o.ToExecutionTemplateResponsePtrOutputWithContext(context.Background())
}

func (o ExecutionTemplateResponseOutput) ToExecutionTemplateResponsePtrOutputWithContext(ctx context.Context) ExecutionTemplateResponsePtrOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) *ExecutionTemplateResponse {
		return &v
	}).(ExecutionTemplateResponsePtrOutput)
}

// Configuration (count and accelerator type) for hardware running notebook execution.
func (o ExecutionTemplateResponseOutput) AcceleratorConfig() SchedulerAcceleratorConfigResponseOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) SchedulerAcceleratorConfigResponse { return v.AcceleratorConfig }).(SchedulerAcceleratorConfigResponseOutput)
}

// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
func (o ExecutionTemplateResponseOutput) ContainerImageUri() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.ContainerImageUri }).(pulumi.StringOutput)
}

// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: gs://{project_id}/{folder}/{notebook_file_name} Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb
func (o ExecutionTemplateResponseOutput) InputNotebookFile() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.InputNotebookFile }).(pulumi.StringOutput)
}

// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
func (o ExecutionTemplateResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU.
func (o ExecutionTemplateResponseOutput) MasterType() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.MasterType }).(pulumi.StringOutput)
}

// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: gs://{project_id}/{folder} Ex: gs://notebook_user/scheduled_notebooks
func (o ExecutionTemplateResponseOutput) OutputNotebookFolder() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.OutputNotebookFolder }).(pulumi.StringOutput)
}

// Parameters used within the 'input_notebook_file' notebook.
func (o ExecutionTemplateResponseOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.Parameters }).(pulumi.StringOutput)
}

// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml
func (o ExecutionTemplateResponseOutput) ParamsYamlFile() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.ParamsYamlFile }).(pulumi.StringOutput)
}

// Required. Scale tier of the hardware used for notebook execution.
func (o ExecutionTemplateResponseOutput) ScaleTier() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.ScaleTier }).(pulumi.StringOutput)
}

type ExecutionTemplateResponsePtrOutput struct{ *pulumi.OutputState }

func (ExecutionTemplateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionTemplateResponse)(nil)).Elem()
}

func (o ExecutionTemplateResponsePtrOutput) ToExecutionTemplateResponsePtrOutput() ExecutionTemplateResponsePtrOutput {
	return o
}

func (o ExecutionTemplateResponsePtrOutput) ToExecutionTemplateResponsePtrOutputWithContext(ctx context.Context) ExecutionTemplateResponsePtrOutput {
	return o
}

func (o ExecutionTemplateResponsePtrOutput) Elem() ExecutionTemplateResponseOutput {
	return o.ApplyT(func(v *ExecutionTemplateResponse) ExecutionTemplateResponse { return *v }).(ExecutionTemplateResponseOutput)
}

// Configuration (count and accelerator type) for hardware running notebook execution.
func (o ExecutionTemplateResponsePtrOutput) AcceleratorConfig() SchedulerAcceleratorConfigResponsePtrOutput {
	return o.ApplyT(func(v *ExecutionTemplateResponse) *SchedulerAcceleratorConfigResponse {
		if v == nil {
			return nil
		}
		return &v.AcceleratorConfig
	}).(SchedulerAcceleratorConfigResponsePtrOutput)
}

// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
func (o ExecutionTemplateResponsePtrOutput) ContainerImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContainerImageUri
	}).(pulumi.StringPtrOutput)
}

// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: gs://{project_id}/{folder}/{notebook_file_name} Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb
func (o ExecutionTemplateResponsePtrOutput) InputNotebookFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InputNotebookFile
	}).(pulumi.StringPtrOutput)
}

// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
func (o ExecutionTemplateResponsePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExecutionTemplateResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU.
func (o ExecutionTemplateResponsePtrOutput) MasterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MasterType
	}).(pulumi.StringPtrOutput)
}

// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: gs://{project_id}/{folder} Ex: gs://notebook_user/scheduled_notebooks
func (o ExecutionTemplateResponsePtrOutput) OutputNotebookFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OutputNotebookFolder
	}).(pulumi.StringPtrOutput)
}

// Parameters used within the 'input_notebook_file' notebook.
func (o ExecutionTemplateResponsePtrOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Parameters
	}).(pulumi.StringPtrOutput)
}

// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml
func (o ExecutionTemplateResponsePtrOutput) ParamsYamlFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ParamsYamlFile
	}).(pulumi.StringPtrOutput)
}

// Required. Scale tier of the hardware used for notebook execution.
func (o ExecutionTemplateResponsePtrOutput) ScaleTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleTier
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// ExprResponseInput is an input type that accepts ExprResponseArgs and ExprResponseOutput values.
// You can construct a concrete instance of `ExprResponseInput` via:
//
//          ExprResponseArgs{...}
type ExprResponseInput interface {
	pulumi.Input

	ToExprResponseOutput() ExprResponseOutput
	ToExprResponseOutputWithContext(context.Context) ExprResponseOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ExprResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (i ExprResponseArgs) ToExprResponseOutput() ExprResponseOutput {
	return i.ToExprResponseOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Guest OS features for boot disk.
type GuestOsFeatureResponse struct {
	// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options. Valid values: FEATURE_TYPE_UNSPECIFIED MULTI_IP_SUBNET SECURE_BOOT UEFI_COMPATIBLE VIRTIO_SCSI_MULTIQUEUE WINDOWS
	Type string `pulumi:"type"`
}

// GuestOsFeatureResponseInput is an input type that accepts GuestOsFeatureResponseArgs and GuestOsFeatureResponseOutput values.
// You can construct a concrete instance of `GuestOsFeatureResponseInput` via:
//
//          GuestOsFeatureResponseArgs{...}
type GuestOsFeatureResponseInput interface {
	pulumi.Input

	ToGuestOsFeatureResponseOutput() GuestOsFeatureResponseOutput
	ToGuestOsFeatureResponseOutputWithContext(context.Context) GuestOsFeatureResponseOutput
}

// Guest OS features for boot disk.
type GuestOsFeatureResponseArgs struct {
	// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options. Valid values: FEATURE_TYPE_UNSPECIFIED MULTI_IP_SUBNET SECURE_BOOT UEFI_COMPATIBLE VIRTIO_SCSI_MULTIQUEUE WINDOWS
	Type pulumi.StringInput `pulumi:"type"`
}

func (GuestOsFeatureResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestOsFeatureResponse)(nil)).Elem()
}

func (i GuestOsFeatureResponseArgs) ToGuestOsFeatureResponseOutput() GuestOsFeatureResponseOutput {
	return i.ToGuestOsFeatureResponseOutputWithContext(context.Background())
}

func (i GuestOsFeatureResponseArgs) ToGuestOsFeatureResponseOutputWithContext(ctx context.Context) GuestOsFeatureResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestOsFeatureResponseOutput)
}

// GuestOsFeatureResponseArrayInput is an input type that accepts GuestOsFeatureResponseArray and GuestOsFeatureResponseArrayOutput values.
// You can construct a concrete instance of `GuestOsFeatureResponseArrayInput` via:
//
//          GuestOsFeatureResponseArray{ GuestOsFeatureResponseArgs{...} }
type GuestOsFeatureResponseArrayInput interface {
	pulumi.Input

	ToGuestOsFeatureResponseArrayOutput() GuestOsFeatureResponseArrayOutput
	ToGuestOsFeatureResponseArrayOutputWithContext(context.Context) GuestOsFeatureResponseArrayOutput
}

type GuestOsFeatureResponseArray []GuestOsFeatureResponseInput

func (GuestOsFeatureResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GuestOsFeatureResponse)(nil)).Elem()
}

func (i GuestOsFeatureResponseArray) ToGuestOsFeatureResponseArrayOutput() GuestOsFeatureResponseArrayOutput {
	return i.ToGuestOsFeatureResponseArrayOutputWithContext(context.Background())
}

func (i GuestOsFeatureResponseArray) ToGuestOsFeatureResponseArrayOutputWithContext(ctx context.Context) GuestOsFeatureResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestOsFeatureResponseArrayOutput)
}

// Guest OS features for boot disk.
type GuestOsFeatureResponseOutput struct{ *pulumi.OutputState }

func (GuestOsFeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestOsFeatureResponse)(nil)).Elem()
}

func (o GuestOsFeatureResponseOutput) ToGuestOsFeatureResponseOutput() GuestOsFeatureResponseOutput {
	return o
}

func (o GuestOsFeatureResponseOutput) ToGuestOsFeatureResponseOutputWithContext(ctx context.Context) GuestOsFeatureResponseOutput {
	return o
}

// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options. Valid values: FEATURE_TYPE_UNSPECIFIED MULTI_IP_SUBNET SECURE_BOOT UEFI_COMPATIBLE VIRTIO_SCSI_MULTIQUEUE WINDOWS
func (o GuestOsFeatureResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GuestOsFeatureResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GuestOsFeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (GuestOsFeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GuestOsFeatureResponse)(nil)).Elem()
}

func (o GuestOsFeatureResponseArrayOutput) ToGuestOsFeatureResponseArrayOutput() GuestOsFeatureResponseArrayOutput {
	return o
}

func (o GuestOsFeatureResponseArrayOutput) ToGuestOsFeatureResponseArrayOutputWithContext(ctx context.Context) GuestOsFeatureResponseArrayOutput {
	return o
}

func (o GuestOsFeatureResponseArrayOutput) Index(i pulumi.IntInput) GuestOsFeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GuestOsFeatureResponse {
		return vs[0].([]GuestOsFeatureResponse)[vs[1].(int)]
	}).(GuestOsFeatureResponseOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check GPUs on Compute Engine to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfig struct {
	// Count of cores of this accelerator.
	CoreCount *string `pulumi:"coreCount"`
	// Type of this accelerator.
	Type *string `pulumi:"type"`
}

// SchedulerAcceleratorConfigInput is an input type that accepts SchedulerAcceleratorConfigArgs and SchedulerAcceleratorConfigOutput values.
// You can construct a concrete instance of `SchedulerAcceleratorConfigInput` via:
//
//          SchedulerAcceleratorConfigArgs{...}
type SchedulerAcceleratorConfigInput interface {
	pulumi.Input

	ToSchedulerAcceleratorConfigOutput() SchedulerAcceleratorConfigOutput
	ToSchedulerAcceleratorConfigOutputWithContext(context.Context) SchedulerAcceleratorConfigOutput
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check GPUs on Compute Engine to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfigArgs struct {
	// Count of cores of this accelerator.
	CoreCount pulumi.StringPtrInput `pulumi:"coreCount"`
	// Type of this accelerator.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SchedulerAcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulerAcceleratorConfig)(nil)).Elem()
}

func (i SchedulerAcceleratorConfigArgs) ToSchedulerAcceleratorConfigOutput() SchedulerAcceleratorConfigOutput {
	return i.ToSchedulerAcceleratorConfigOutputWithContext(context.Background())
}

func (i SchedulerAcceleratorConfigArgs) ToSchedulerAcceleratorConfigOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerAcceleratorConfigOutput)
}

func (i SchedulerAcceleratorConfigArgs) ToSchedulerAcceleratorConfigPtrOutput() SchedulerAcceleratorConfigPtrOutput {
	return i.ToSchedulerAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i SchedulerAcceleratorConfigArgs) ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerAcceleratorConfigOutput).ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx)
}

// SchedulerAcceleratorConfigPtrInput is an input type that accepts SchedulerAcceleratorConfigArgs, SchedulerAcceleratorConfigPtr and SchedulerAcceleratorConfigPtrOutput values.
// You can construct a concrete instance of `SchedulerAcceleratorConfigPtrInput` via:
//
//          SchedulerAcceleratorConfigArgs{...}
//
//  or:
//
//          nil
type SchedulerAcceleratorConfigPtrInput interface {
	pulumi.Input

	ToSchedulerAcceleratorConfigPtrOutput() SchedulerAcceleratorConfigPtrOutput
	ToSchedulerAcceleratorConfigPtrOutputWithContext(context.Context) SchedulerAcceleratorConfigPtrOutput
}

type schedulerAcceleratorConfigPtrType SchedulerAcceleratorConfigArgs

func SchedulerAcceleratorConfigPtr(v *SchedulerAcceleratorConfigArgs) SchedulerAcceleratorConfigPtrInput {
	return (*schedulerAcceleratorConfigPtrType)(v)
}

func (*schedulerAcceleratorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulerAcceleratorConfig)(nil)).Elem()
}

func (i *schedulerAcceleratorConfigPtrType) ToSchedulerAcceleratorConfigPtrOutput() SchedulerAcceleratorConfigPtrOutput {
	return i.ToSchedulerAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i *schedulerAcceleratorConfigPtrType) ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerAcceleratorConfigPtrOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check GPUs on Compute Engine to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfigOutput struct{ *pulumi.OutputState }

func (SchedulerAcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulerAcceleratorConfig)(nil)).Elem()
}

func (o SchedulerAcceleratorConfigOutput) ToSchedulerAcceleratorConfigOutput() SchedulerAcceleratorConfigOutput {
	return o
}

func (o SchedulerAcceleratorConfigOutput) ToSchedulerAcceleratorConfigOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigOutput {
	return o
}

func (o SchedulerAcceleratorConfigOutput) ToSchedulerAcceleratorConfigPtrOutput() SchedulerAcceleratorConfigPtrOutput {
	return o.ToSchedulerAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (o SchedulerAcceleratorConfigOutput) ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigPtrOutput {
	return o.ApplyT(func(v SchedulerAcceleratorConfig) *SchedulerAcceleratorConfig {
		return &v
	}).(SchedulerAcceleratorConfigPtrOutput)
}

// Count of cores of this accelerator.
func (o SchedulerAcceleratorConfigOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulerAcceleratorConfig) *string { return v.CoreCount }).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o SchedulerAcceleratorConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulerAcceleratorConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SchedulerAcceleratorConfigPtrOutput struct{ *pulumi.OutputState }

func (SchedulerAcceleratorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulerAcceleratorConfig)(nil)).Elem()
}

func (o SchedulerAcceleratorConfigPtrOutput) ToSchedulerAcceleratorConfigPtrOutput() SchedulerAcceleratorConfigPtrOutput {
	return o
}

func (o SchedulerAcceleratorConfigPtrOutput) ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigPtrOutput {
	return o
}

func (o SchedulerAcceleratorConfigPtrOutput) Elem() SchedulerAcceleratorConfigOutput {
	return o.ApplyT(func(v *SchedulerAcceleratorConfig) SchedulerAcceleratorConfig { return *v }).(SchedulerAcceleratorConfigOutput)
}

// Count of cores of this accelerator.
func (o SchedulerAcceleratorConfigPtrOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchedulerAcceleratorConfig) *string {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o SchedulerAcceleratorConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchedulerAcceleratorConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check GPUs on Compute Engine to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfigResponse struct {
	// Count of cores of this accelerator.
	CoreCount string `pulumi:"coreCount"`
	// Type of this accelerator.
	Type string `pulumi:"type"`
}

// SchedulerAcceleratorConfigResponseInput is an input type that accepts SchedulerAcceleratorConfigResponseArgs and SchedulerAcceleratorConfigResponseOutput values.
// You can construct a concrete instance of `SchedulerAcceleratorConfigResponseInput` via:
//
//          SchedulerAcceleratorConfigResponseArgs{...}
type SchedulerAcceleratorConfigResponseInput interface {
	pulumi.Input

	ToSchedulerAcceleratorConfigResponseOutput() SchedulerAcceleratorConfigResponseOutput
	ToSchedulerAcceleratorConfigResponseOutputWithContext(context.Context) SchedulerAcceleratorConfigResponseOutput
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check GPUs on Compute Engine to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfigResponseArgs struct {
	// Count of cores of this accelerator.
	CoreCount pulumi.StringInput `pulumi:"coreCount"`
	// Type of this accelerator.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SchedulerAcceleratorConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulerAcceleratorConfigResponse)(nil)).Elem()
}

func (i SchedulerAcceleratorConfigResponseArgs) ToSchedulerAcceleratorConfigResponseOutput() SchedulerAcceleratorConfigResponseOutput {
	return i.ToSchedulerAcceleratorConfigResponseOutputWithContext(context.Background())
}

func (i SchedulerAcceleratorConfigResponseArgs) ToSchedulerAcceleratorConfigResponseOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerAcceleratorConfigResponseOutput)
}

func (i SchedulerAcceleratorConfigResponseArgs) ToSchedulerAcceleratorConfigResponsePtrOutput() SchedulerAcceleratorConfigResponsePtrOutput {
	return i.ToSchedulerAcceleratorConfigResponsePtrOutputWithContext(context.Background())
}

func (i SchedulerAcceleratorConfigResponseArgs) ToSchedulerAcceleratorConfigResponsePtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerAcceleratorConfigResponseOutput).ToSchedulerAcceleratorConfigResponsePtrOutputWithContext(ctx)
}

// SchedulerAcceleratorConfigResponsePtrInput is an input type that accepts SchedulerAcceleratorConfigResponseArgs, SchedulerAcceleratorConfigResponsePtr and SchedulerAcceleratorConfigResponsePtrOutput values.
// You can construct a concrete instance of `SchedulerAcceleratorConfigResponsePtrInput` via:
//
//          SchedulerAcceleratorConfigResponseArgs{...}
//
//  or:
//
//          nil
type SchedulerAcceleratorConfigResponsePtrInput interface {
	pulumi.Input

	ToSchedulerAcceleratorConfigResponsePtrOutput() SchedulerAcceleratorConfigResponsePtrOutput
	ToSchedulerAcceleratorConfigResponsePtrOutputWithContext(context.Context) SchedulerAcceleratorConfigResponsePtrOutput
}

type schedulerAcceleratorConfigResponsePtrType SchedulerAcceleratorConfigResponseArgs

func SchedulerAcceleratorConfigResponsePtr(v *SchedulerAcceleratorConfigResponseArgs) SchedulerAcceleratorConfigResponsePtrInput {
	return (*schedulerAcceleratorConfigResponsePtrType)(v)
}

func (*schedulerAcceleratorConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulerAcceleratorConfigResponse)(nil)).Elem()
}

func (i *schedulerAcceleratorConfigResponsePtrType) ToSchedulerAcceleratorConfigResponsePtrOutput() SchedulerAcceleratorConfigResponsePtrOutput {
	return i.ToSchedulerAcceleratorConfigResponsePtrOutputWithContext(context.Background())
}

func (i *schedulerAcceleratorConfigResponsePtrType) ToSchedulerAcceleratorConfigResponsePtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerAcceleratorConfigResponsePtrOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check GPUs on Compute Engine to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfigResponseOutput struct{ *pulumi.OutputState }

func (SchedulerAcceleratorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulerAcceleratorConfigResponse)(nil)).Elem()
}

func (o SchedulerAcceleratorConfigResponseOutput) ToSchedulerAcceleratorConfigResponseOutput() SchedulerAcceleratorConfigResponseOutput {
	return o
}

func (o SchedulerAcceleratorConfigResponseOutput) ToSchedulerAcceleratorConfigResponseOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigResponseOutput {
	return o
}

func (o SchedulerAcceleratorConfigResponseOutput) ToSchedulerAcceleratorConfigResponsePtrOutput() SchedulerAcceleratorConfigResponsePtrOutput {
	return o.ToSchedulerAcceleratorConfigResponsePtrOutputWithContext(context.Background())
}

func (o SchedulerAcceleratorConfigResponseOutput) ToSchedulerAcceleratorConfigResponsePtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigResponsePtrOutput {
	return o.ApplyT(func(v SchedulerAcceleratorConfigResponse) *SchedulerAcceleratorConfigResponse {
		return &v
	}).(SchedulerAcceleratorConfigResponsePtrOutput)
}

// Count of cores of this accelerator.
func (o SchedulerAcceleratorConfigResponseOutput) CoreCount() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulerAcceleratorConfigResponse) string { return v.CoreCount }).(pulumi.StringOutput)
}

// Type of this accelerator.
func (o SchedulerAcceleratorConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulerAcceleratorConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

type SchedulerAcceleratorConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SchedulerAcceleratorConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulerAcceleratorConfigResponse)(nil)).Elem()
}

func (o SchedulerAcceleratorConfigResponsePtrOutput) ToSchedulerAcceleratorConfigResponsePtrOutput() SchedulerAcceleratorConfigResponsePtrOutput {
	return o
}

func (o SchedulerAcceleratorConfigResponsePtrOutput) ToSchedulerAcceleratorConfigResponsePtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigResponsePtrOutput {
	return o
}

func (o SchedulerAcceleratorConfigResponsePtrOutput) Elem() SchedulerAcceleratorConfigResponseOutput {
	return o.ApplyT(func(v *SchedulerAcceleratorConfigResponse) SchedulerAcceleratorConfigResponse { return *v }).(SchedulerAcceleratorConfigResponseOutput)
}

// Count of cores of this accelerator.
func (o SchedulerAcceleratorConfigResponsePtrOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchedulerAcceleratorConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CoreCount
	}).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o SchedulerAcceleratorConfigResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchedulerAcceleratorConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features] Not all combinations are valid.
type ShieldedInstanceConfig struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm *bool `pulumi:"enableVtpm"`
}

// ShieldedInstanceConfigInput is an input type that accepts ShieldedInstanceConfigArgs and ShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigInput` via:
//
//          ShieldedInstanceConfigArgs{...}
type ShieldedInstanceConfigInput interface {
	pulumi.Input

	ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput
	ToShieldedInstanceConfigOutputWithContext(context.Context) ShieldedInstanceConfigOutput
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features] Not all combinations are valid.
type ShieldedInstanceConfigArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (ShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return i.ToShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput)
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput).ToShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigPtrInput is an input type that accepts ShieldedInstanceConfigArgs, ShieldedInstanceConfigPtr and ShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigPtrInput` via:
//
//          ShieldedInstanceConfigArgs{...}
//
//  or:
//
//          nil
type ShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput
	ToShieldedInstanceConfigPtrOutputWithContext(context.Context) ShieldedInstanceConfigPtrOutput
}

type shieldedInstanceConfigPtrType ShieldedInstanceConfigArgs

func ShieldedInstanceConfigPtr(v *ShieldedInstanceConfigArgs) ShieldedInstanceConfigPtrInput {
	return (*shieldedInstanceConfigPtrType)(v)
}

func (*shieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigPtrOutput)
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features] Not all combinations are valid.
type ShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *ShieldedInstanceConfig {
		return &v
	}).(ShieldedInstanceConfigPtrOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
func (o ShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o ShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) Elem() ShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) ShieldedInstanceConfig { return *v }).(ShieldedInstanceConfigOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features] Not all combinations are valid.
type ShieldedInstanceConfigResponse struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm bool `pulumi:"enableVtpm"`
}

// ShieldedInstanceConfigResponseInput is an input type that accepts ShieldedInstanceConfigResponseArgs and ShieldedInstanceConfigResponseOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigResponseInput` via:
//
//          ShieldedInstanceConfigResponseArgs{...}
type ShieldedInstanceConfigResponseInput interface {
	pulumi.Input

	ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput
	ToShieldedInstanceConfigResponseOutputWithContext(context.Context) ShieldedInstanceConfigResponseOutput
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features] Not all combinations are valid.
type ShieldedInstanceConfigResponseArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
	EnableIntegrityMonitoring pulumi.BoolInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot pulumi.BoolInput `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm pulumi.BoolInput `pulumi:"enableVtpm"`
}

func (ShieldedInstanceConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return i.ToShieldedInstanceConfigResponseOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigResponseOutput)
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return i.ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigResponseOutput).ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigResponsePtrInput is an input type that accepts ShieldedInstanceConfigResponseArgs, ShieldedInstanceConfigResponsePtr and ShieldedInstanceConfigResponsePtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigResponsePtrInput` via:
//
//          ShieldedInstanceConfigResponseArgs{...}
//
//  or:
//
//          nil
type ShieldedInstanceConfigResponsePtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput
	ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Context) ShieldedInstanceConfigResponsePtrOutput
}

type shieldedInstanceConfigResponsePtrType ShieldedInstanceConfigResponseArgs

func ShieldedInstanceConfigResponsePtr(v *ShieldedInstanceConfigResponseArgs) ShieldedInstanceConfigResponsePtrInput {
	return (*shieldedInstanceConfigResponsePtrType)(v)
}

func (*shieldedInstanceConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (i *shieldedInstanceConfigResponsePtrType) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return i.ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigResponsePtrType) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigResponsePtrOutput)
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features] Not all combinations are valid.
type ShieldedInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return o.ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) *ShieldedInstanceConfigResponse {
		return &v
	}).(ShieldedInstanceConfigResponsePtrOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableVtpm() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableVtpm }).(pulumi.BoolOutput)
}

type ShieldedInstanceConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponsePtrOutput) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return o
}

func (o ShieldedInstanceConfigResponsePtrOutput) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return o
}

func (o ShieldedInstanceConfigResponsePtrOutput) Elem() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) ShieldedInstanceConfigResponse { return *v }).(ShieldedInstanceConfigResponseOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
func (o ShieldedInstanceConfigResponsePtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o ShieldedInstanceConfigResponsePtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigResponsePtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntry struct {
	// Action. Rolloback or Upgrade.
	Action *string `pulumi:"action"`
	// The container image before this instance upgrade.
	ContainerImage *string `pulumi:"containerImage"`
	// The time that this instance upgrade history entry is created.
	CreateTime *string `pulumi:"createTime"`
	// The framework of this notebook instance.
	Framework *string `pulumi:"framework"`
	// The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot *string `pulumi:"snapshot"`
	// The state of this instance upgrade history entry.
	State *string `pulumi:"state"`
	// Target VM Image. Format: ainotebooks-vm/project/image-name/name.
	TargetImage *string `pulumi:"targetImage"`
	// Target VM Version, like m63.
	TargetVersion *string `pulumi:"targetVersion"`
	// The version of the notebook instance before this upgrade.
	Version *string `pulumi:"version"`
	// The VM image before this instance upgrade.
	VmImage *string `pulumi:"vmImage"`
}

// UpgradeHistoryEntryInput is an input type that accepts UpgradeHistoryEntryArgs and UpgradeHistoryEntryOutput values.
// You can construct a concrete instance of `UpgradeHistoryEntryInput` via:
//
//          UpgradeHistoryEntryArgs{...}
type UpgradeHistoryEntryInput interface {
	pulumi.Input

	ToUpgradeHistoryEntryOutput() UpgradeHistoryEntryOutput
	ToUpgradeHistoryEntryOutputWithContext(context.Context) UpgradeHistoryEntryOutput
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryArgs struct {
	// Action. Rolloback or Upgrade.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The container image before this instance upgrade.
	ContainerImage pulumi.StringPtrInput `pulumi:"containerImage"`
	// The time that this instance upgrade history entry is created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// The framework of this notebook instance.
	Framework pulumi.StringPtrInput `pulumi:"framework"`
	// The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot pulumi.StringPtrInput `pulumi:"snapshot"`
	// The state of this instance upgrade history entry.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Target VM Image. Format: ainotebooks-vm/project/image-name/name.
	TargetImage pulumi.StringPtrInput `pulumi:"targetImage"`
	// Target VM Version, like m63.
	TargetVersion pulumi.StringPtrInput `pulumi:"targetVersion"`
	// The version of the notebook instance before this upgrade.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// The VM image before this instance upgrade.
	VmImage pulumi.StringPtrInput `pulumi:"vmImage"`
}

func (UpgradeHistoryEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeHistoryEntry)(nil)).Elem()
}

func (i UpgradeHistoryEntryArgs) ToUpgradeHistoryEntryOutput() UpgradeHistoryEntryOutput {
	return i.ToUpgradeHistoryEntryOutputWithContext(context.Background())
}

func (i UpgradeHistoryEntryArgs) ToUpgradeHistoryEntryOutputWithContext(ctx context.Context) UpgradeHistoryEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeHistoryEntryOutput)
}

// UpgradeHistoryEntryArrayInput is an input type that accepts UpgradeHistoryEntryArray and UpgradeHistoryEntryArrayOutput values.
// You can construct a concrete instance of `UpgradeHistoryEntryArrayInput` via:
//
//          UpgradeHistoryEntryArray{ UpgradeHistoryEntryArgs{...} }
type UpgradeHistoryEntryArrayInput interface {
	pulumi.Input

	ToUpgradeHistoryEntryArrayOutput() UpgradeHistoryEntryArrayOutput
	ToUpgradeHistoryEntryArrayOutputWithContext(context.Context) UpgradeHistoryEntryArrayOutput
}

type UpgradeHistoryEntryArray []UpgradeHistoryEntryInput

func (UpgradeHistoryEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeHistoryEntry)(nil)).Elem()
}

func (i UpgradeHistoryEntryArray) ToUpgradeHistoryEntryArrayOutput() UpgradeHistoryEntryArrayOutput {
	return i.ToUpgradeHistoryEntryArrayOutputWithContext(context.Background())
}

func (i UpgradeHistoryEntryArray) ToUpgradeHistoryEntryArrayOutputWithContext(ctx context.Context) UpgradeHistoryEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeHistoryEntryArrayOutput)
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeHistoryEntry)(nil)).Elem()
}

func (o UpgradeHistoryEntryOutput) ToUpgradeHistoryEntryOutput() UpgradeHistoryEntryOutput {
	return o
}

func (o UpgradeHistoryEntryOutput) ToUpgradeHistoryEntryOutputWithContext(ctx context.Context) UpgradeHistoryEntryOutput {
	return o
}

// Action. Rolloback or Upgrade.
func (o UpgradeHistoryEntryOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The container image before this instance upgrade.
func (o UpgradeHistoryEntryOutput) ContainerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.ContainerImage }).(pulumi.StringPtrOutput)
}

// The time that this instance upgrade history entry is created.
func (o UpgradeHistoryEntryOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// The framework of this notebook instance.
func (o UpgradeHistoryEntryOutput) Framework() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.Framework }).(pulumi.StringPtrOutput)
}

// The snapshot of the boot disk of this notebook instance before upgrade.
func (o UpgradeHistoryEntryOutput) Snapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.Snapshot }).(pulumi.StringPtrOutput)
}

// The state of this instance upgrade history entry.
func (o UpgradeHistoryEntryOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Target VM Image. Format: ainotebooks-vm/project/image-name/name.
func (o UpgradeHistoryEntryOutput) TargetImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.TargetImage }).(pulumi.StringPtrOutput)
}

// Target VM Version, like m63.
func (o UpgradeHistoryEntryOutput) TargetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.TargetVersion }).(pulumi.StringPtrOutput)
}

// The version of the notebook instance before this upgrade.
func (o UpgradeHistoryEntryOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// The VM image before this instance upgrade.
func (o UpgradeHistoryEntryOutput) VmImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.VmImage }).(pulumi.StringPtrOutput)
}

type UpgradeHistoryEntryArrayOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeHistoryEntry)(nil)).Elem()
}

func (o UpgradeHistoryEntryArrayOutput) ToUpgradeHistoryEntryArrayOutput() UpgradeHistoryEntryArrayOutput {
	return o
}

func (o UpgradeHistoryEntryArrayOutput) ToUpgradeHistoryEntryArrayOutputWithContext(ctx context.Context) UpgradeHistoryEntryArrayOutput {
	return o
}

func (o UpgradeHistoryEntryArrayOutput) Index(i pulumi.IntInput) UpgradeHistoryEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeHistoryEntry {
		return vs[0].([]UpgradeHistoryEntry)[vs[1].(int)]
	}).(UpgradeHistoryEntryOutput)
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryResponse struct {
	// Action. Rolloback or Upgrade.
	Action string `pulumi:"action"`
	// The container image before this instance upgrade.
	ContainerImage string `pulumi:"containerImage"`
	// The time that this instance upgrade history entry is created.
	CreateTime string `pulumi:"createTime"`
	// The framework of this notebook instance.
	Framework string `pulumi:"framework"`
	// The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot string `pulumi:"snapshot"`
	// The state of this instance upgrade history entry.
	State string `pulumi:"state"`
	// Target VM Image. Format: ainotebooks-vm/project/image-name/name.
	TargetImage string `pulumi:"targetImage"`
	// Target VM Version, like m63.
	TargetVersion string `pulumi:"targetVersion"`
	// The version of the notebook instance before this upgrade.
	Version string `pulumi:"version"`
	// The VM image before this instance upgrade.
	VmImage string `pulumi:"vmImage"`
}

// UpgradeHistoryEntryResponseInput is an input type that accepts UpgradeHistoryEntryResponseArgs and UpgradeHistoryEntryResponseOutput values.
// You can construct a concrete instance of `UpgradeHistoryEntryResponseInput` via:
//
//          UpgradeHistoryEntryResponseArgs{...}
type UpgradeHistoryEntryResponseInput interface {
	pulumi.Input

	ToUpgradeHistoryEntryResponseOutput() UpgradeHistoryEntryResponseOutput
	ToUpgradeHistoryEntryResponseOutputWithContext(context.Context) UpgradeHistoryEntryResponseOutput
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryResponseArgs struct {
	// Action. Rolloback or Upgrade.
	Action pulumi.StringInput `pulumi:"action"`
	// The container image before this instance upgrade.
	ContainerImage pulumi.StringInput `pulumi:"containerImage"`
	// The time that this instance upgrade history entry is created.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The framework of this notebook instance.
	Framework pulumi.StringInput `pulumi:"framework"`
	// The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot pulumi.StringInput `pulumi:"snapshot"`
	// The state of this instance upgrade history entry.
	State pulumi.StringInput `pulumi:"state"`
	// Target VM Image. Format: ainotebooks-vm/project/image-name/name.
	TargetImage pulumi.StringInput `pulumi:"targetImage"`
	// Target VM Version, like m63.
	TargetVersion pulumi.StringInput `pulumi:"targetVersion"`
	// The version of the notebook instance before this upgrade.
	Version pulumi.StringInput `pulumi:"version"`
	// The VM image before this instance upgrade.
	VmImage pulumi.StringInput `pulumi:"vmImage"`
}

func (UpgradeHistoryEntryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeHistoryEntryResponse)(nil)).Elem()
}

func (i UpgradeHistoryEntryResponseArgs) ToUpgradeHistoryEntryResponseOutput() UpgradeHistoryEntryResponseOutput {
	return i.ToUpgradeHistoryEntryResponseOutputWithContext(context.Background())
}

func (i UpgradeHistoryEntryResponseArgs) ToUpgradeHistoryEntryResponseOutputWithContext(ctx context.Context) UpgradeHistoryEntryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeHistoryEntryResponseOutput)
}

// UpgradeHistoryEntryResponseArrayInput is an input type that accepts UpgradeHistoryEntryResponseArray and UpgradeHistoryEntryResponseArrayOutput values.
// You can construct a concrete instance of `UpgradeHistoryEntryResponseArrayInput` via:
//
//          UpgradeHistoryEntryResponseArray{ UpgradeHistoryEntryResponseArgs{...} }
type UpgradeHistoryEntryResponseArrayInput interface {
	pulumi.Input

	ToUpgradeHistoryEntryResponseArrayOutput() UpgradeHistoryEntryResponseArrayOutput
	ToUpgradeHistoryEntryResponseArrayOutputWithContext(context.Context) UpgradeHistoryEntryResponseArrayOutput
}

type UpgradeHistoryEntryResponseArray []UpgradeHistoryEntryResponseInput

func (UpgradeHistoryEntryResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeHistoryEntryResponse)(nil)).Elem()
}

func (i UpgradeHistoryEntryResponseArray) ToUpgradeHistoryEntryResponseArrayOutput() UpgradeHistoryEntryResponseArrayOutput {
	return i.ToUpgradeHistoryEntryResponseArrayOutputWithContext(context.Background())
}

func (i UpgradeHistoryEntryResponseArray) ToUpgradeHistoryEntryResponseArrayOutputWithContext(ctx context.Context) UpgradeHistoryEntryResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeHistoryEntryResponseArrayOutput)
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryResponseOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeHistoryEntryResponse)(nil)).Elem()
}

func (o UpgradeHistoryEntryResponseOutput) ToUpgradeHistoryEntryResponseOutput() UpgradeHistoryEntryResponseOutput {
	return o
}

func (o UpgradeHistoryEntryResponseOutput) ToUpgradeHistoryEntryResponseOutputWithContext(ctx context.Context) UpgradeHistoryEntryResponseOutput {
	return o
}

// Action. Rolloback or Upgrade.
func (o UpgradeHistoryEntryResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Action }).(pulumi.StringOutput)
}

// The container image before this instance upgrade.
func (o UpgradeHistoryEntryResponseOutput) ContainerImage() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.ContainerImage }).(pulumi.StringOutput)
}

// The time that this instance upgrade history entry is created.
func (o UpgradeHistoryEntryResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The framework of this notebook instance.
func (o UpgradeHistoryEntryResponseOutput) Framework() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Framework }).(pulumi.StringOutput)
}

// The snapshot of the boot disk of this notebook instance before upgrade.
func (o UpgradeHistoryEntryResponseOutput) Snapshot() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Snapshot }).(pulumi.StringOutput)
}

// The state of this instance upgrade history entry.
func (o UpgradeHistoryEntryResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.State }).(pulumi.StringOutput)
}

// Target VM Image. Format: ainotebooks-vm/project/image-name/name.
func (o UpgradeHistoryEntryResponseOutput) TargetImage() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.TargetImage }).(pulumi.StringOutput)
}

// Target VM Version, like m63.
func (o UpgradeHistoryEntryResponseOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.TargetVersion }).(pulumi.StringOutput)
}

// The version of the notebook instance before this upgrade.
func (o UpgradeHistoryEntryResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Version }).(pulumi.StringOutput)
}

// The VM image before this instance upgrade.
func (o UpgradeHistoryEntryResponseOutput) VmImage() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.VmImage }).(pulumi.StringOutput)
}

type UpgradeHistoryEntryResponseArrayOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeHistoryEntryResponse)(nil)).Elem()
}

func (o UpgradeHistoryEntryResponseArrayOutput) ToUpgradeHistoryEntryResponseArrayOutput() UpgradeHistoryEntryResponseArrayOutput {
	return o
}

func (o UpgradeHistoryEntryResponseArrayOutput) ToUpgradeHistoryEntryResponseArrayOutputWithContext(ctx context.Context) UpgradeHistoryEntryResponseArrayOutput {
	return o
}

func (o UpgradeHistoryEntryResponseArrayOutput) Index(i pulumi.IntInput) UpgradeHistoryEntryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeHistoryEntryResponse {
		return vs[0].([]UpgradeHistoryEntryResponse)[vs[1].(int)]
	}).(UpgradeHistoryEntryResponseOutput)
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImage struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	ImageFamily *string `pulumi:"imageFamily"`
	// Use VM image name to find the image.
	ImageName *string `pulumi:"imageName"`
	// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
	Project *string `pulumi:"project"`
}

// VmImageInput is an input type that accepts VmImageArgs and VmImageOutput values.
// You can construct a concrete instance of `VmImageInput` via:
//
//          VmImageArgs{...}
type VmImageInput interface {
	pulumi.Input

	ToVmImageOutput() VmImageOutput
	ToVmImageOutputWithContext(context.Context) VmImageOutput
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageArgs struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	ImageFamily pulumi.StringPtrInput `pulumi:"imageFamily"`
	// Use VM image name to find the image.
	ImageName pulumi.StringPtrInput `pulumi:"imageName"`
	// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (VmImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImage)(nil)).Elem()
}

func (i VmImageArgs) ToVmImageOutput() VmImageOutput {
	return i.ToVmImageOutputWithContext(context.Background())
}

func (i VmImageArgs) ToVmImageOutputWithContext(ctx context.Context) VmImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageOutput)
}

func (i VmImageArgs) ToVmImagePtrOutput() VmImagePtrOutput {
	return i.ToVmImagePtrOutputWithContext(context.Background())
}

func (i VmImageArgs) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageOutput).ToVmImagePtrOutputWithContext(ctx)
}

// VmImagePtrInput is an input type that accepts VmImageArgs, VmImagePtr and VmImagePtrOutput values.
// You can construct a concrete instance of `VmImagePtrInput` via:
//
//          VmImageArgs{...}
//
//  or:
//
//          nil
type VmImagePtrInput interface {
	pulumi.Input

	ToVmImagePtrOutput() VmImagePtrOutput
	ToVmImagePtrOutputWithContext(context.Context) VmImagePtrOutput
}

type vmImagePtrType VmImageArgs

func VmImagePtr(v *VmImageArgs) VmImagePtrInput {
	return (*vmImagePtrType)(v)
}

func (*vmImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmImage)(nil)).Elem()
}

func (i *vmImagePtrType) ToVmImagePtrOutput() VmImagePtrOutput {
	return i.ToVmImagePtrOutputWithContext(context.Background())
}

func (i *vmImagePtrType) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImagePtrOutput)
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageOutput struct{ *pulumi.OutputState }

func (VmImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImage)(nil)).Elem()
}

func (o VmImageOutput) ToVmImageOutput() VmImageOutput {
	return o
}

func (o VmImageOutput) ToVmImageOutputWithContext(ctx context.Context) VmImageOutput {
	return o
}

func (o VmImageOutput) ToVmImagePtrOutput() VmImagePtrOutput {
	return o.ToVmImagePtrOutputWithContext(context.Background())
}

func (o VmImageOutput) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return o.ApplyT(func(v VmImage) *VmImage {
		return &v
	}).(VmImagePtrOutput)
}

// Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImageOutput) ImageFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmImage) *string { return v.ImageFamily }).(pulumi.StringPtrOutput)
}

// Use VM image name to find the image.
func (o VmImageOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmImage) *string { return v.ImageName }).(pulumi.StringPtrOutput)
}

// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
func (o VmImageOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmImage) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type VmImagePtrOutput struct{ *pulumi.OutputState }

func (VmImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmImage)(nil)).Elem()
}

func (o VmImagePtrOutput) ToVmImagePtrOutput() VmImagePtrOutput {
	return o
}

func (o VmImagePtrOutput) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return o
}

func (o VmImagePtrOutput) Elem() VmImageOutput {
	return o.ApplyT(func(v *VmImage) VmImage { return *v }).(VmImageOutput)
}

// Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImagePtrOutput) ImageFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return v.ImageFamily
	}).(pulumi.StringPtrOutput)
}

// Use VM image name to find the image.
func (o VmImagePtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return v.ImageName
	}).(pulumi.StringPtrOutput)
}

// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
func (o VmImagePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageResponse struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	ImageFamily string `pulumi:"imageFamily"`
	// Use VM image name to find the image.
	ImageName string `pulumi:"imageName"`
	// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
	Project string `pulumi:"project"`
}

// VmImageResponseInput is an input type that accepts VmImageResponseArgs and VmImageResponseOutput values.
// You can construct a concrete instance of `VmImageResponseInput` via:
//
//          VmImageResponseArgs{...}
type VmImageResponseInput interface {
	pulumi.Input

	ToVmImageResponseOutput() VmImageResponseOutput
	ToVmImageResponseOutputWithContext(context.Context) VmImageResponseOutput
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageResponseArgs struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	ImageFamily pulumi.StringInput `pulumi:"imageFamily"`
	// Use VM image name to find the image.
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
	Project pulumi.StringInput `pulumi:"project"`
}

func (VmImageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImageResponse)(nil)).Elem()
}

func (i VmImageResponseArgs) ToVmImageResponseOutput() VmImageResponseOutput {
	return i.ToVmImageResponseOutputWithContext(context.Background())
}

func (i VmImageResponseArgs) ToVmImageResponseOutputWithContext(ctx context.Context) VmImageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageResponseOutput)
}

func (i VmImageResponseArgs) ToVmImageResponsePtrOutput() VmImageResponsePtrOutput {
	return i.ToVmImageResponsePtrOutputWithContext(context.Background())
}

func (i VmImageResponseArgs) ToVmImageResponsePtrOutputWithContext(ctx context.Context) VmImageResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageResponseOutput).ToVmImageResponsePtrOutputWithContext(ctx)
}

// VmImageResponsePtrInput is an input type that accepts VmImageResponseArgs, VmImageResponsePtr and VmImageResponsePtrOutput values.
// You can construct a concrete instance of `VmImageResponsePtrInput` via:
//
//          VmImageResponseArgs{...}
//
//  or:
//
//          nil
type VmImageResponsePtrInput interface {
	pulumi.Input

	ToVmImageResponsePtrOutput() VmImageResponsePtrOutput
	ToVmImageResponsePtrOutputWithContext(context.Context) VmImageResponsePtrOutput
}

type vmImageResponsePtrType VmImageResponseArgs

func VmImageResponsePtr(v *VmImageResponseArgs) VmImageResponsePtrInput {
	return (*vmImageResponsePtrType)(v)
}

func (*vmImageResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmImageResponse)(nil)).Elem()
}

func (i *vmImageResponsePtrType) ToVmImageResponsePtrOutput() VmImageResponsePtrOutput {
	return i.ToVmImageResponsePtrOutputWithContext(context.Background())
}

func (i *vmImageResponsePtrType) ToVmImageResponsePtrOutputWithContext(ctx context.Context) VmImageResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageResponsePtrOutput)
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageResponseOutput struct{ *pulumi.OutputState }

func (VmImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImageResponse)(nil)).Elem()
}

func (o VmImageResponseOutput) ToVmImageResponseOutput() VmImageResponseOutput {
	return o
}

func (o VmImageResponseOutput) ToVmImageResponseOutputWithContext(ctx context.Context) VmImageResponseOutput {
	return o
}

func (o VmImageResponseOutput) ToVmImageResponsePtrOutput() VmImageResponsePtrOutput {
	return o.ToVmImageResponsePtrOutputWithContext(context.Background())
}

func (o VmImageResponseOutput) ToVmImageResponsePtrOutputWithContext(ctx context.Context) VmImageResponsePtrOutput {
	return o.ApplyT(func(v VmImageResponse) *VmImageResponse {
		return &v
	}).(VmImageResponsePtrOutput)
}

// Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImageResponseOutput) ImageFamily() pulumi.StringOutput {
	return o.ApplyT(func(v VmImageResponse) string { return v.ImageFamily }).(pulumi.StringOutput)
}

// Use VM image name to find the image.
func (o VmImageResponseOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v VmImageResponse) string { return v.ImageName }).(pulumi.StringOutput)
}

// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
func (o VmImageResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v VmImageResponse) string { return v.Project }).(pulumi.StringOutput)
}

type VmImageResponsePtrOutput struct{ *pulumi.OutputState }

func (VmImageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmImageResponse)(nil)).Elem()
}

func (o VmImageResponsePtrOutput) ToVmImageResponsePtrOutput() VmImageResponsePtrOutput {
	return o
}

func (o VmImageResponsePtrOutput) ToVmImageResponsePtrOutputWithContext(ctx context.Context) VmImageResponsePtrOutput {
	return o
}

func (o VmImageResponsePtrOutput) Elem() VmImageResponseOutput {
	return o.ApplyT(func(v *VmImageResponse) VmImageResponse { return *v }).(VmImageResponseOutput)
}

// Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImageResponsePtrOutput) ImageFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ImageFamily
	}).(pulumi.StringPtrOutput)
}

// Use VM image name to find the image.
func (o VmImageResponsePtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ImageName
	}).(pulumi.StringPtrOutput)
}

// Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`
func (o VmImageResponsePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AcceleratorConfigOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigPtrOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerImageOutput{})
	pulumi.RegisterOutputType(ContainerImagePtrOutput{})
	pulumi.RegisterOutputType(ContainerImageResponseOutput{})
	pulumi.RegisterOutputType(ContainerImageResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskResponseOutput{})
	pulumi.RegisterOutputType(DiskResponseArrayOutput{})
	pulumi.RegisterOutputType(ExecutionResponseOutput{})
	pulumi.RegisterOutputType(ExecutionResponseArrayOutput{})
	pulumi.RegisterOutputType(ExecutionTemplateOutput{})
	pulumi.RegisterOutputType(ExecutionTemplatePtrOutput{})
	pulumi.RegisterOutputType(ExecutionTemplateResponseOutput{})
	pulumi.RegisterOutputType(ExecutionTemplateResponsePtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GuestOsFeatureResponseOutput{})
	pulumi.RegisterOutputType(GuestOsFeatureResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(SchedulerAcceleratorConfigOutput{})
	pulumi.RegisterOutputType(SchedulerAcceleratorConfigPtrOutput{})
	pulumi.RegisterOutputType(SchedulerAcceleratorConfigResponseOutput{})
	pulumi.RegisterOutputType(SchedulerAcceleratorConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryArrayOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryResponseOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryResponseArrayOutput{})
	pulumi.RegisterOutputType(VmImageOutput{})
	pulumi.RegisterOutputType(VmImagePtrOutput{})
	pulumi.RegisterOutputType(VmImageResponseOutput{})
	pulumi.RegisterOutputType(VmImageResponsePtrOutput{})
}
