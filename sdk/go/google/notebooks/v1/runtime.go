// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Runtime in a given project and location.
// Auto-naming is currently not supported for this resource.
type Runtime struct {
	pulumi.CustomResourceState

	// The config settings for accessing runtime.
	AccessConfig RuntimeAccessConfigResponseOutput `pulumi:"accessConfig"`
	// Runtime creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Runtime health_state.
	HealthState pulumi.StringOutput `pulumi:"healthState"`
	// Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Contains Runtime daemon metrics such as Service status and JupyterLab stats.
	Metrics RuntimeMetricsResponseOutput `pulumi:"metrics"`
	// The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Idempotent request UUID.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Required. User-defined unique ID of this Runtime.
	RuntimeId pulumi.StringOutput `pulumi:"runtimeId"`
	// The config settings for software inside the runtime.
	SoftwareConfig RuntimeSoftwareConfigResponseOutput `pulumi:"softwareConfig"`
	// Runtime state.
	State pulumi.StringOutput `pulumi:"state"`
	// Runtime update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Use a Compute Engine VM image to start the managed notebook instance.
	VirtualMachine VirtualMachineResponseOutput `pulumi:"virtualMachine"`
}

// NewRuntime registers a new resource with the given unique name, arguments, and options.
func NewRuntime(ctx *pulumi.Context,
	name string, args *RuntimeArgs, opts ...pulumi.ResourceOption) (*Runtime, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuntimeId == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"runtimeId",
	})
	opts = append(opts, replaceOnChanges)
	var resource Runtime
	err := ctx.RegisterResource("google-native:notebooks/v1:Runtime", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuntime gets an existing Runtime resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuntime(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuntimeState, opts ...pulumi.ResourceOption) (*Runtime, error) {
	var resource Runtime
	err := ctx.ReadResource("google-native:notebooks/v1:Runtime", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Runtime resources.
type runtimeState struct {
}

type RuntimeState struct {
}

func (RuntimeState) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeState)(nil)).Elem()
}

type runtimeArgs struct {
	// The config settings for accessing runtime.
	AccessConfig *RuntimeAccessConfig `pulumi:"accessConfig"`
	// Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	Project  *string           `pulumi:"project"`
	// Idempotent request UUID.
	RequestId *string `pulumi:"requestId"`
	// Required. User-defined unique ID of this Runtime.
	RuntimeId string `pulumi:"runtimeId"`
	// The config settings for software inside the runtime.
	SoftwareConfig *RuntimeSoftwareConfig `pulumi:"softwareConfig"`
	// Use a Compute Engine VM image to start the managed notebook instance.
	VirtualMachine *VirtualMachine `pulumi:"virtualMachine"`
}

// The set of arguments for constructing a Runtime resource.
type RuntimeArgs struct {
	// The config settings for accessing runtime.
	AccessConfig RuntimeAccessConfigPtrInput
	// Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// Idempotent request UUID.
	RequestId pulumi.StringPtrInput
	// Required. User-defined unique ID of this Runtime.
	RuntimeId pulumi.StringInput
	// The config settings for software inside the runtime.
	SoftwareConfig RuntimeSoftwareConfigPtrInput
	// Use a Compute Engine VM image to start the managed notebook instance.
	VirtualMachine VirtualMachinePtrInput
}

func (RuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runtimeArgs)(nil)).Elem()
}

type RuntimeInput interface {
	pulumi.Input

	ToRuntimeOutput() RuntimeOutput
	ToRuntimeOutputWithContext(ctx context.Context) RuntimeOutput
}

func (*Runtime) ElementType() reflect.Type {
	return reflect.TypeOf((**Runtime)(nil)).Elem()
}

func (i *Runtime) ToRuntimeOutput() RuntimeOutput {
	return i.ToRuntimeOutputWithContext(context.Background())
}

func (i *Runtime) ToRuntimeOutputWithContext(ctx context.Context) RuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeOutput)
}

type RuntimeOutput struct{ *pulumi.OutputState }

func (RuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Runtime)(nil)).Elem()
}

func (o RuntimeOutput) ToRuntimeOutput() RuntimeOutput {
	return o
}

func (o RuntimeOutput) ToRuntimeOutputWithContext(ctx context.Context) RuntimeOutput {
	return o
}

// The config settings for accessing runtime.
func (o RuntimeOutput) AccessConfig() RuntimeAccessConfigResponseOutput {
	return o.ApplyT(func(v *Runtime) RuntimeAccessConfigResponseOutput { return v.AccessConfig }).(RuntimeAccessConfigResponseOutput)
}

// Runtime creation time.
func (o RuntimeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Runtime health_state.
func (o RuntimeOutput) HealthState() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.HealthState }).(pulumi.StringOutput)
}

// Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
func (o RuntimeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o RuntimeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Contains Runtime daemon metrics such as Service status and JupyterLab stats.
func (o RuntimeOutput) Metrics() RuntimeMetricsResponseOutput {
	return o.ApplyT(func(v *Runtime) RuntimeMetricsResponseOutput { return v.Metrics }).(RuntimeMetricsResponseOutput)
}

// The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`
func (o RuntimeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RuntimeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Idempotent request UUID.
func (o RuntimeOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Required. User-defined unique ID of this Runtime.
func (o RuntimeOutput) RuntimeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.RuntimeId }).(pulumi.StringOutput)
}

// The config settings for software inside the runtime.
func (o RuntimeOutput) SoftwareConfig() RuntimeSoftwareConfigResponseOutput {
	return o.ApplyT(func(v *Runtime) RuntimeSoftwareConfigResponseOutput { return v.SoftwareConfig }).(RuntimeSoftwareConfigResponseOutput)
}

// Runtime state.
func (o RuntimeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Runtime update time.
func (o RuntimeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Runtime) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Use a Compute Engine VM image to start the managed notebook instance.
func (o RuntimeOutput) VirtualMachine() VirtualMachineResponseOutput {
	return o.ApplyT(func(v *Runtime) VirtualMachineResponseOutput { return v.VirtualMachine }).(VirtualMachineResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeInput)(nil)).Elem(), &Runtime{})
	pulumi.RegisterOutputType(RuntimeOutput{})
}
