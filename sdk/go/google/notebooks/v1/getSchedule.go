// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of schedule
func LookupSchedule(ctx *pulumi.Context, args *LookupScheduleArgs, opts ...pulumi.InvokeOption) (*LookupScheduleResult, error) {
	var rv LookupScheduleResult
	err := ctx.Invoke("google-native:notebooks/v1:getSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScheduleArgs struct {
	Location   string  `pulumi:"location"`
	Project    *string `pulumi:"project"`
	ScheduleId string  `pulumi:"scheduleId"`
}

type LookupScheduleResult struct {
	// Time the schedule was created.
	CreateTime string `pulumi:"createTime"`
	// Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
	CronSchedule string `pulumi:"cronSchedule"`
	// A brief description of this environment.
	Description string `pulumi:"description"`
	// Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens '-', and underscores '_'.
	DisplayName string `pulumi:"displayName"`
	// Notebook Execution Template corresponding to this schedule.
	ExecutionTemplate ExecutionTemplateResponse `pulumi:"executionTemplate"`
	// The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
	Name string `pulumi:"name"`
	// The most recent execution names triggered from this schedule and their corresponding states.
	RecentExecutions []ExecutionResponse `pulumi:"recentExecutions"`
	State            string              `pulumi:"state"`
	// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
	TimeZone string `pulumi:"timeZone"`
	// Time the schedule was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupScheduleOutput(ctx *pulumi.Context, args LookupScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupScheduleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScheduleResult, error) {
			args := v.(LookupScheduleArgs)
			r, err := LookupSchedule(ctx, &args, opts...)
			return *r, err
		}).(LookupScheduleResultOutput)
}

type LookupScheduleOutputArgs struct {
	Location   pulumi.StringInput    `pulumi:"location"`
	Project    pulumi.StringPtrInput `pulumi:"project"`
	ScheduleId pulumi.StringInput    `pulumi:"scheduleId"`
}

func (LookupScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduleArgs)(nil)).Elem()
}

type LookupScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduleResult)(nil)).Elem()
}

func (o LookupScheduleResultOutput) ToLookupScheduleResultOutput() LookupScheduleResultOutput {
	return o
}

func (o LookupScheduleResultOutput) ToLookupScheduleResultOutputWithContext(ctx context.Context) LookupScheduleResultOutput {
	return o
}

// Time the schedule was created.
func (o LookupScheduleResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
func (o LookupScheduleResultOutput) CronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.CronSchedule }).(pulumi.StringOutput)
}

// A brief description of this environment.
func (o LookupScheduleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.Description }).(pulumi.StringOutput)
}

// Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens '-', and underscores '_'.
func (o LookupScheduleResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Notebook Execution Template corresponding to this schedule.
func (o LookupScheduleResultOutput) ExecutionTemplate() ExecutionTemplateResponseOutput {
	return o.ApplyT(func(v LookupScheduleResult) ExecutionTemplateResponse { return v.ExecutionTemplate }).(ExecutionTemplateResponseOutput)
}

// The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
func (o LookupScheduleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The most recent execution names triggered from this schedule and their corresponding states.
func (o LookupScheduleResultOutput) RecentExecutions() ExecutionResponseArrayOutput {
	return o.ApplyT(func(v LookupScheduleResult) []ExecutionResponse { return v.RecentExecutions }).(ExecutionResponseArrayOutput)
}

func (o LookupScheduleResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.State }).(pulumi.StringOutput)
}

// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
func (o LookupScheduleResultOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.TimeZone }).(pulumi.StringOutput)
}

// Time the schedule was last updated.
func (o LookupScheduleResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScheduleResultOutput{})
}
