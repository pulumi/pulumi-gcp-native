// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information from a specified AuthorizedView.
func LookupAuthorizedView(ctx *pulumi.Context, args *LookupAuthorizedViewArgs, opts ...pulumi.InvokeOption) (*LookupAuthorizedViewResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAuthorizedViewResult
	err := ctx.Invoke("google-native:bigtableadmin/v2:getAuthorizedView", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAuthorizedViewArgs struct {
	AuthorizedViewId string  `pulumi:"authorizedViewId"`
	InstanceId       string  `pulumi:"instanceId"`
	Project          *string `pulumi:"project"`
	TableId          string  `pulumi:"tableId"`
	View             *string `pulumi:"view"`
}

type LookupAuthorizedViewResult struct {
	// Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
	DeletionProtection bool `pulumi:"deletionProtection"`
	// The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
	Etag string `pulumi:"etag"`
	// Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
	Name string `pulumi:"name"`
	// An AuthorizedView permitting access to an explicit subset of a Table.
	SubsetView GoogleBigtableAdminV2AuthorizedViewSubsetViewResponse `pulumi:"subsetView"`
}

func LookupAuthorizedViewOutput(ctx *pulumi.Context, args LookupAuthorizedViewOutputArgs, opts ...pulumi.InvokeOption) LookupAuthorizedViewResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAuthorizedViewResult, error) {
			args := v.(LookupAuthorizedViewArgs)
			r, err := LookupAuthorizedView(ctx, &args, opts...)
			var s LookupAuthorizedViewResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAuthorizedViewResultOutput)
}

type LookupAuthorizedViewOutputArgs struct {
	AuthorizedViewId pulumi.StringInput    `pulumi:"authorizedViewId"`
	InstanceId       pulumi.StringInput    `pulumi:"instanceId"`
	Project          pulumi.StringPtrInput `pulumi:"project"`
	TableId          pulumi.StringInput    `pulumi:"tableId"`
	View             pulumi.StringPtrInput `pulumi:"view"`
}

func (LookupAuthorizedViewOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthorizedViewArgs)(nil)).Elem()
}

type LookupAuthorizedViewResultOutput struct{ *pulumi.OutputState }

func (LookupAuthorizedViewResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthorizedViewResult)(nil)).Elem()
}

func (o LookupAuthorizedViewResultOutput) ToLookupAuthorizedViewResultOutput() LookupAuthorizedViewResultOutput {
	return o
}

func (o LookupAuthorizedViewResultOutput) ToLookupAuthorizedViewResultOutputWithContext(ctx context.Context) LookupAuthorizedViewResultOutput {
	return o
}

// Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
func (o LookupAuthorizedViewResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAuthorizedViewResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
func (o LookupAuthorizedViewResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorizedViewResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
func (o LookupAuthorizedViewResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthorizedViewResult) string { return v.Name }).(pulumi.StringOutput)
}

// An AuthorizedView permitting access to an explicit subset of a Table.
func (o LookupAuthorizedViewResultOutput) SubsetView() GoogleBigtableAdminV2AuthorizedViewSubsetViewResponseOutput {
	return o.ApplyT(func(v LookupAuthorizedViewResult) GoogleBigtableAdminV2AuthorizedViewSubsetViewResponse {
		return v.SubsetView
	}).(GoogleBigtableAdminV2AuthorizedViewSubsetViewResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAuthorizedViewResultOutput{})
}
