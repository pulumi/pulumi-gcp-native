// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a cluster within an instance. Note that exactly one of Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config can be set. If serve_nodes is set to non-zero, then the cluster is manually scaled. If cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is enabled.
type Cluster struct {
	pulumi.CustomResourceState

	// Configuration for this cluster.
	ClusterConfig ClusterConfigResponseOutput `pulumi:"clusterConfig"`
	// Required. The ID to be used when referring to the new cluster within its instance, e.g., just `mycluster` rather than `projects/myproject/instances/myinstance/clusters/mycluster`.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
	DefaultStorageType pulumi.StringOutput `pulumi:"defaultStorageType"`
	// Immutable. The encryption configuration for CMEK-protected clusters.
	EncryptionConfig EncryptionConfigResponseOutput `pulumi:"encryptionConfig"`
	InstanceId       pulumi.StringOutput            `pulumi:"instanceId"`
	// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
	ServeNodes pulumi.IntOutput `pulumi:"serveNodes"`
	// The current state of the cluster.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clusterId",
		"instanceId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("google-native:bigtableadmin/v2:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("google-native:bigtableadmin/v2:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Configuration for this cluster.
	ClusterConfig *ClusterConfig `pulumi:"clusterConfig"`
	// Required. The ID to be used when referring to the new cluster within its instance, e.g., just `mycluster` rather than `projects/myproject/instances/myinstance/clusters/mycluster`.
	ClusterId string `pulumi:"clusterId"`
	// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
	DefaultStorageType *ClusterDefaultStorageType `pulumi:"defaultStorageType"`
	// Immutable. The encryption configuration for CMEK-protected clusters.
	EncryptionConfig *EncryptionConfig `pulumi:"encryptionConfig"`
	InstanceId       string            `pulumi:"instanceId"`
	// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
	Location *string `pulumi:"location"`
	// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
	ServeNodes *int `pulumi:"serveNodes"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Configuration for this cluster.
	ClusterConfig ClusterConfigPtrInput
	// Required. The ID to be used when referring to the new cluster within its instance, e.g., just `mycluster` rather than `projects/myproject/instances/myinstance/clusters/mycluster`.
	ClusterId pulumi.StringInput
	// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
	DefaultStorageType ClusterDefaultStorageTypePtrInput
	// Immutable. The encryption configuration for CMEK-protected clusters.
	EncryptionConfig EncryptionConfigPtrInput
	InstanceId       pulumi.StringInput
	// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
	Location pulumi.StringPtrInput
	// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
	ServeNodes pulumi.IntPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Configuration for this cluster.
func (o ClusterOutput) ClusterConfig() ClusterConfigResponseOutput {
	return o.ApplyT(func(v *Cluster) ClusterConfigResponseOutput { return v.ClusterConfig }).(ClusterConfigResponseOutput)
}

// Required. The ID to be used when referring to the new cluster within its instance, e.g., just `mycluster` rather than `projects/myproject/instances/myinstance/clusters/mycluster`.
func (o ClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
func (o ClusterOutput) DefaultStorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DefaultStorageType }).(pulumi.StringOutput)
}

// Immutable. The encryption configuration for CMEK-protected clusters.
func (o ClusterOutput) EncryptionConfig() EncryptionConfigResponseOutput {
	return o.ApplyT(func(v *Cluster) EncryptionConfigResponseOutput { return v.EncryptionConfig }).(EncryptionConfigResponseOutput)
}

func (o ClusterOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
func (o ClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
func (o ClusterOutput) ServeNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ServeNodes }).(pulumi.IntOutput)
}

// The current state of the cluster.
func (o ClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterOutputType(ClusterOutput{})
}
