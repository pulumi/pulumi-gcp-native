// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new AuthorizedView in a table.
type AuthorizedView struct {
	pulumi.CustomResourceState

	// Required. The id of the AuthorizedView to create. This AuthorizedView must not already exist. The `authorized_view_id` appended to `parent` forms the full AuthorizedView name of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedView/{authorized_view}`.
	AuthorizedViewId pulumi.StringOutput `pulumi:"authorizedViewId"`
	// Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
	DeletionProtection pulumi.BoolOutput `pulumi:"deletionProtection"`
	// The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
	Etag       pulumi.StringOutput `pulumi:"etag"`
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// An AuthorizedView permitting access to an explicit subset of a Table.
	SubsetView GoogleBigtableAdminV2AuthorizedViewSubsetViewResponseOutput `pulumi:"subsetView"`
	TableId    pulumi.StringOutput                                         `pulumi:"tableId"`
}

// NewAuthorizedView registers a new resource with the given unique name, arguments, and options.
func NewAuthorizedView(ctx *pulumi.Context,
	name string, args *AuthorizedViewArgs, opts ...pulumi.ResourceOption) (*AuthorizedView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizedViewId == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizedViewId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.TableId == nil {
		return nil, errors.New("invalid value for required argument 'TableId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"authorizedViewId",
		"instanceId",
		"project",
		"tableId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthorizedView
	err := ctx.RegisterResource("google-native:bigtableadmin/v2:AuthorizedView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizedView gets an existing AuthorizedView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizedView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizedViewState, opts ...pulumi.ResourceOption) (*AuthorizedView, error) {
	var resource AuthorizedView
	err := ctx.ReadResource("google-native:bigtableadmin/v2:AuthorizedView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizedView resources.
type authorizedViewState struct {
}

type AuthorizedViewState struct {
}

func (AuthorizedViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizedViewState)(nil)).Elem()
}

type authorizedViewArgs struct {
	// Required. The id of the AuthorizedView to create. This AuthorizedView must not already exist. The `authorized_view_id` appended to `parent` forms the full AuthorizedView name of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedView/{authorized_view}`.
	AuthorizedViewId string `pulumi:"authorizedViewId"`
	// Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
	Etag       *string `pulumi:"etag"`
	InstanceId string  `pulumi:"instanceId"`
	// Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// An AuthorizedView permitting access to an explicit subset of a Table.
	SubsetView *GoogleBigtableAdminV2AuthorizedViewSubsetView `pulumi:"subsetView"`
	TableId    string                                         `pulumi:"tableId"`
}

// The set of arguments for constructing a AuthorizedView resource.
type AuthorizedViewArgs struct {
	// Required. The id of the AuthorizedView to create. This AuthorizedView must not already exist. The `authorized_view_id` appended to `parent` forms the full AuthorizedView name of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedView/{authorized_view}`.
	AuthorizedViewId pulumi.StringInput
	// Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
	DeletionProtection pulumi.BoolPtrInput
	// The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
	Etag       pulumi.StringPtrInput
	InstanceId pulumi.StringInput
	// Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// An AuthorizedView permitting access to an explicit subset of a Table.
	SubsetView GoogleBigtableAdminV2AuthorizedViewSubsetViewPtrInput
	TableId    pulumi.StringInput
}

func (AuthorizedViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizedViewArgs)(nil)).Elem()
}

type AuthorizedViewInput interface {
	pulumi.Input

	ToAuthorizedViewOutput() AuthorizedViewOutput
	ToAuthorizedViewOutputWithContext(ctx context.Context) AuthorizedViewOutput
}

func (*AuthorizedView) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizedView)(nil)).Elem()
}

func (i *AuthorizedView) ToAuthorizedViewOutput() AuthorizedViewOutput {
	return i.ToAuthorizedViewOutputWithContext(context.Background())
}

func (i *AuthorizedView) ToAuthorizedViewOutputWithContext(ctx context.Context) AuthorizedViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizedViewOutput)
}

type AuthorizedViewOutput struct{ *pulumi.OutputState }

func (AuthorizedViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizedView)(nil)).Elem()
}

func (o AuthorizedViewOutput) ToAuthorizedViewOutput() AuthorizedViewOutput {
	return o
}

func (o AuthorizedViewOutput) ToAuthorizedViewOutputWithContext(ctx context.Context) AuthorizedViewOutput {
	return o
}

// Required. The id of the AuthorizedView to create. This AuthorizedView must not already exist. The `authorized_view_id` appended to `parent` forms the full AuthorizedView name of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedView/{authorized_view}`.
func (o AuthorizedViewOutput) AuthorizedViewId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizedView) pulumi.StringOutput { return v.AuthorizedViewId }).(pulumi.StringOutput)
}

// Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
func (o AuthorizedViewOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthorizedView) pulumi.BoolOutput { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
func (o AuthorizedViewOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizedView) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o AuthorizedViewOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizedView) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
func (o AuthorizedViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizedView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AuthorizedViewOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizedView) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An AuthorizedView permitting access to an explicit subset of a Table.
func (o AuthorizedViewOutput) SubsetView() GoogleBigtableAdminV2AuthorizedViewSubsetViewResponseOutput {
	return o.ApplyT(func(v *AuthorizedView) GoogleBigtableAdminV2AuthorizedViewSubsetViewResponseOutput {
		return v.SubsetView
	}).(GoogleBigtableAdminV2AuthorizedViewSubsetViewResponseOutput)
}

func (o AuthorizedViewOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizedView) pulumi.StringOutput { return v.TableId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizedViewInput)(nil)).Elem(), &AuthorizedView{})
	pulumi.RegisterOutputType(AuthorizedViewOutput{})
}
