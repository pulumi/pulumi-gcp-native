// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets metadata information about the specified table.
func LookupTable(ctx *pulumi.Context, args *LookupTableArgs, opts ...pulumi.InvokeOption) (*LookupTableResult, error) {
	var rv LookupTableResult
	err := ctx.Invoke("google-native:bigtableadmin/v2:getTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTableArgs struct {
	InstanceId string  `pulumi:"instanceId"`
	Project    *string `pulumi:"project"`
	TableId    string  `pulumi:"tableId"`
	View       *string `pulumi:"view"`
}

type LookupTableResult struct {
	// Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`
	ClusterStates map[string]string `pulumi:"clusterStates"`
	// The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `FULL`
	ColumnFamilies map[string]string `pulumi:"columnFamilies"`
	// Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.
	Granularity string `pulumi:"granularity"`
	// The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
	Name string `pulumi:"name"`
	// If this table was restored from another data source (e.g. a backup), this field will be populated with information about the restore.
	RestoreInfo RestoreInfoResponse `pulumi:"restoreInfo"`
}
