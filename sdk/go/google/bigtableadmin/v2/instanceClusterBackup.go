// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Starts creating a new Cloud Bigtable Backup. The returned backup long-running operation can be used to track creation of the backup. The metadata field type is CreateBackupMetadata. The response field type is Backup, if successful. Cancelling the returned operation will stop the creation and delete the backup.
type InstanceClusterBackup struct {
	pulumi.CustomResourceState
}

// NewInstanceClusterBackup registers a new resource with the given unique name, arguments, and options.
func NewInstanceClusterBackup(ctx *pulumi.Context,
	name string, args *InstanceClusterBackupArgs, opts ...pulumi.ResourceOption) (*InstanceClusterBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupsId == nil {
		return nil, errors.New("invalid value for required argument 'BackupsId'")
	}
	if args.ClustersId == nil {
		return nil, errors.New("invalid value for required argument 'ClustersId'")
	}
	if args.InstancesId == nil {
		return nil, errors.New("invalid value for required argument 'InstancesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource InstanceClusterBackup
	err := ctx.RegisterResource("google-cloud:bigtableadmin/v2:InstanceClusterBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceClusterBackup gets an existing InstanceClusterBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceClusterBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceClusterBackupState, opts ...pulumi.ResourceOption) (*InstanceClusterBackup, error) {
	var resource InstanceClusterBackup
	err := ctx.ReadResource("google-cloud:bigtableadmin/v2:InstanceClusterBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceClusterBackup resources.
type instanceClusterBackupState struct {
}

type InstanceClusterBackupState struct {
}

func (InstanceClusterBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceClusterBackupState)(nil)).Elem()
}

type instanceClusterBackupArgs struct {
	BackupsId  string `pulumi:"backupsId"`
	ClustersId string `pulumi:"clustersId"`
	// Output only. The encryption information for the backup.
	EncryptionInfo *EncryptionInfo `pulumi:"encryptionInfo"`
	// Output only. `end_time` is the time that the backup was finished. The row data in the backup will be no newer than this timestamp.
	EndTime *string `pulumi:"endTime"`
	// Required. The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 30 days from the time the request is received. Once the `expire_time` has passed, Cloud Bigtable will delete the backup and free the resources used by the backup.
	ExpireTime  *string `pulumi:"expireTime"`
	InstancesId string  `pulumi:"instancesId"`
	// A globally unique identifier for the backup which cannot be changed. Values are of the form `projects/{project}/instances/{instance}/clusters/{cluster}/ backups/_a-zA-Z0-9*` The final segment of the name must be between 1 and 50 characters in length. The backup is stored in the cluster identified by the prefix of the backup name of the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// Output only. Size of the backup in bytes.
	SizeBytes *string `pulumi:"sizeBytes"`
	// Required. Immutable. Name of the table from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects/{project}/instances/{instance}/tables/{source_table}`.
	SourceTable *string `pulumi:"sourceTable"`
	// Output only. `start_time` is the time that the backup was started (i.e. approximately the time the CreateBackup request is received). The row data in this backup will be no older than this timestamp.
	StartTime *string `pulumi:"startTime"`
	// Output only. The current state of the backup.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a InstanceClusterBackup resource.
type InstanceClusterBackupArgs struct {
	BackupsId  pulumi.StringInput
	ClustersId pulumi.StringInput
	// Output only. The encryption information for the backup.
	EncryptionInfo EncryptionInfoPtrInput
	// Output only. `end_time` is the time that the backup was finished. The row data in the backup will be no newer than this timestamp.
	EndTime pulumi.StringPtrInput
	// Required. The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 30 days from the time the request is received. Once the `expire_time` has passed, Cloud Bigtable will delete the backup and free the resources used by the backup.
	ExpireTime  pulumi.StringPtrInput
	InstancesId pulumi.StringInput
	// A globally unique identifier for the backup which cannot be changed. Values are of the form `projects/{project}/instances/{instance}/clusters/{cluster}/ backups/_a-zA-Z0-9*` The final segment of the name must be between 1 and 50 characters in length. The backup is stored in the cluster identified by the prefix of the backup name of the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// Output only. Size of the backup in bytes.
	SizeBytes pulumi.StringPtrInput
	// Required. Immutable. Name of the table from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects/{project}/instances/{instance}/tables/{source_table}`.
	SourceTable pulumi.StringPtrInput
	// Output only. `start_time` is the time that the backup was started (i.e. approximately the time the CreateBackup request is received). The row data in this backup will be no older than this timestamp.
	StartTime pulumi.StringPtrInput
	// Output only. The current state of the backup.
	State pulumi.StringPtrInput
}

func (InstanceClusterBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceClusterBackupArgs)(nil)).Elem()
}

type InstanceClusterBackupInput interface {
	pulumi.Input

	ToInstanceClusterBackupOutput() InstanceClusterBackupOutput
	ToInstanceClusterBackupOutputWithContext(ctx context.Context) InstanceClusterBackupOutput
}

func (*InstanceClusterBackup) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceClusterBackup)(nil))
}

func (i *InstanceClusterBackup) ToInstanceClusterBackupOutput() InstanceClusterBackupOutput {
	return i.ToInstanceClusterBackupOutputWithContext(context.Background())
}

func (i *InstanceClusterBackup) ToInstanceClusterBackupOutputWithContext(ctx context.Context) InstanceClusterBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterBackupOutput)
}

type InstanceClusterBackupOutput struct {
	*pulumi.OutputState
}

func (InstanceClusterBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceClusterBackup)(nil))
}

func (o InstanceClusterBackupOutput) ToInstanceClusterBackupOutput() InstanceClusterBackupOutput {
	return o
}

func (o InstanceClusterBackupOutput) ToInstanceClusterBackupOutputWithContext(ctx context.Context) InstanceClusterBackupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceClusterBackupOutput{})
}
