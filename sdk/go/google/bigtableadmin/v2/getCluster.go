// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about a cluster.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("google-native:bigtableadmin/v2:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClusterArgs struct {
	ClusterId  string  `pulumi:"clusterId"`
	InstanceId string  `pulumi:"instanceId"`
	Project    *string `pulumi:"project"`
}

type LookupClusterResult struct {
	// Configuration for this cluster.
	ClusterConfig ClusterConfigResponse `pulumi:"clusterConfig"`
	// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
	DefaultStorageType string `pulumi:"defaultStorageType"`
	// Immutable. The encryption configuration for CMEK-protected clusters.
	EncryptionConfig EncryptionConfigResponse `pulumi:"encryptionConfig"`
	// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
	Location string `pulumi:"location"`
	// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
	Name string `pulumi:"name"`
	// The number of nodes in the cluster. If no value is set, Cloud Bigtable automatically allocates nodes based on your data footprint and optimized for 50% storage utilization.
	ServeNodes int `pulumi:"serveNodes"`
	// The current state of the cluster.
	State string `pulumi:"state"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

type LookupClusterOutputArgs struct {
	ClusterId  pulumi.StringInput    `pulumi:"clusterId"`
	InstanceId pulumi.StringInput    `pulumi:"instanceId"`
	Project    pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// Configuration for this cluster.
func (o LookupClusterResultOutput) ClusterConfig() ClusterConfigResponseOutput {
	return o.ApplyT(func(v LookupClusterResult) ClusterConfigResponse { return v.ClusterConfig }).(ClusterConfigResponseOutput)
}

// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
func (o LookupClusterResultOutput) DefaultStorageType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.DefaultStorageType }).(pulumi.StringOutput)
}

// Immutable. The encryption configuration for CMEK-protected clusters.
func (o LookupClusterResultOutput) EncryptionConfig() EncryptionConfigResponseOutput {
	return o.ApplyT(func(v LookupClusterResult) EncryptionConfigResponse { return v.EncryptionConfig }).(EncryptionConfigResponseOutput)
}

// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
func (o LookupClusterResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Location }).(pulumi.StringOutput)
}

// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
func (o LookupClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of nodes in the cluster. If no value is set, Cloud Bigtable automatically allocates nodes based on your data footprint and optimized for 50% storage utilization.
func (o LookupClusterResultOutput) ServeNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClusterResult) int { return v.ServeNodes }).(pulumi.IntOutput)
}

// The current state of the cluster.
func (o LookupClusterResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
