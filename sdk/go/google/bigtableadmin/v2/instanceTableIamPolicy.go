// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on a Table resource. Replaces any existing policy.
type InstanceTableIamPolicy struct {
	pulumi.CustomResourceState
}

// NewInstanceTableIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewInstanceTableIamPolicy(ctx *pulumi.Context,
	name string, args *InstanceTableIamPolicyArgs, opts ...pulumi.ResourceOption) (*InstanceTableIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstancesId == nil {
		return nil, errors.New("invalid value for required argument 'InstancesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.TablesId == nil {
		return nil, errors.New("invalid value for required argument 'TablesId'")
	}
	var resource InstanceTableIamPolicy
	err := ctx.RegisterResource("google-cloud:bigtableadmin/v2:InstanceTableIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceTableIamPolicy gets an existing InstanceTableIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceTableIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceTableIamPolicyState, opts ...pulumi.ResourceOption) (*InstanceTableIamPolicy, error) {
	var resource InstanceTableIamPolicy
	err := ctx.ReadResource("google-cloud:bigtableadmin/v2:InstanceTableIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceTableIamPolicy resources.
type instanceTableIamPolicyState struct {
}

type InstanceTableIamPolicyState struct {
}

func (InstanceTableIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceTableIamPolicyState)(nil)).Elem()
}

type instanceTableIamPolicyArgs struct {
	InstancesId string `pulumi:"instancesId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	TablesId   string  `pulumi:"tablesId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a InstanceTableIamPolicy resource.
type InstanceTableIamPolicyArgs struct {
	InstancesId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	TablesId   pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (InstanceTableIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceTableIamPolicyArgs)(nil)).Elem()
}

type InstanceTableIamPolicyInput interface {
	pulumi.Input

	ToInstanceTableIamPolicyOutput() InstanceTableIamPolicyOutput
	ToInstanceTableIamPolicyOutputWithContext(ctx context.Context) InstanceTableIamPolicyOutput
}

func (*InstanceTableIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTableIamPolicy)(nil))
}

func (i *InstanceTableIamPolicy) ToInstanceTableIamPolicyOutput() InstanceTableIamPolicyOutput {
	return i.ToInstanceTableIamPolicyOutputWithContext(context.Background())
}

func (i *InstanceTableIamPolicy) ToInstanceTableIamPolicyOutputWithContext(ctx context.Context) InstanceTableIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTableIamPolicyOutput)
}

type InstanceTableIamPolicyOutput struct {
	*pulumi.OutputState
}

func (InstanceTableIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTableIamPolicy)(nil))
}

func (o InstanceTableIamPolicyOutput) ToInstanceTableIamPolicyOutput() InstanceTableIamPolicyOutput {
	return o
}

func (o InstanceTableIamPolicyOutput) ToInstanceTableIamPolicyOutputWithContext(ctx context.Context) InstanceTableIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceTableIamPolicyOutput{})
}
