// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an app profile within an instance.
type InstanceAppProfile struct {
	pulumi.CustomResourceState

	// Long form description of the use case for this AppProfile.
	Description pulumi.StringOutput `pulumi:"description"`
	// Strongly validated etag for optimistic concurrency control. Preserve the value returned from `GetAppProfile` when calling `UpdateAppProfile` to fail the request if there has been a modification in the mean time. The `update_mask` of the request need not include `etag` for this protection to apply. See [Wikipedia](https://en.wikipedia.org/wiki/HTTP_ETag) and [RFC 7232](https://tools.ietf.org/html/rfc7232#section-2.3) for more details.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Use a multi-cluster routing policy.
	MultiClusterRoutingUseAny MultiClusterRoutingUseAnyResponseOutput `pulumi:"multiClusterRoutingUseAny"`
	// The unique name of the app profile. Values are of the form `projects/{project}/instances/{instance}/appProfiles/_a-zA-Z0-9*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Use a single-cluster routing policy.
	SingleClusterRouting SingleClusterRoutingResponseOutput `pulumi:"singleClusterRouting"`
}

// NewInstanceAppProfile registers a new resource with the given unique name, arguments, and options.
func NewInstanceAppProfile(ctx *pulumi.Context,
	name string, args *InstanceAppProfileArgs, opts ...pulumi.ResourceOption) (*InstanceAppProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppProfileId == nil {
		return nil, errors.New("invalid value for required argument 'AppProfileId'")
	}
	if args.AppProfilesId == nil {
		return nil, errors.New("invalid value for required argument 'AppProfilesId'")
	}
	if args.InstancesId == nil {
		return nil, errors.New("invalid value for required argument 'InstancesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource InstanceAppProfile
	err := ctx.RegisterResource("google-native:bigtableadmin/v2:InstanceAppProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceAppProfile gets an existing InstanceAppProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceAppProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceAppProfileState, opts ...pulumi.ResourceOption) (*InstanceAppProfile, error) {
	var resource InstanceAppProfile
	err := ctx.ReadResource("google-native:bigtableadmin/v2:InstanceAppProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceAppProfile resources.
type instanceAppProfileState struct {
	// Long form description of the use case for this AppProfile.
	Description *string `pulumi:"description"`
	// Strongly validated etag for optimistic concurrency control. Preserve the value returned from `GetAppProfile` when calling `UpdateAppProfile` to fail the request if there has been a modification in the mean time. The `update_mask` of the request need not include `etag` for this protection to apply. See [Wikipedia](https://en.wikipedia.org/wiki/HTTP_ETag) and [RFC 7232](https://tools.ietf.org/html/rfc7232#section-2.3) for more details.
	Etag *string `pulumi:"etag"`
	// Use a multi-cluster routing policy.
	MultiClusterRoutingUseAny *MultiClusterRoutingUseAnyResponse `pulumi:"multiClusterRoutingUseAny"`
	// The unique name of the app profile. Values are of the form `projects/{project}/instances/{instance}/appProfiles/_a-zA-Z0-9*`.
	Name *string `pulumi:"name"`
	// Use a single-cluster routing policy.
	SingleClusterRouting *SingleClusterRoutingResponse `pulumi:"singleClusterRouting"`
}

type InstanceAppProfileState struct {
	// Long form description of the use case for this AppProfile.
	Description pulumi.StringPtrInput
	// Strongly validated etag for optimistic concurrency control. Preserve the value returned from `GetAppProfile` when calling `UpdateAppProfile` to fail the request if there has been a modification in the mean time. The `update_mask` of the request need not include `etag` for this protection to apply. See [Wikipedia](https://en.wikipedia.org/wiki/HTTP_ETag) and [RFC 7232](https://tools.ietf.org/html/rfc7232#section-2.3) for more details.
	Etag pulumi.StringPtrInput
	// Use a multi-cluster routing policy.
	MultiClusterRoutingUseAny MultiClusterRoutingUseAnyResponsePtrInput
	// The unique name of the app profile. Values are of the form `projects/{project}/instances/{instance}/appProfiles/_a-zA-Z0-9*`.
	Name pulumi.StringPtrInput
	// Use a single-cluster routing policy.
	SingleClusterRouting SingleClusterRoutingResponsePtrInput
}

func (InstanceAppProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceAppProfileState)(nil)).Elem()
}

type instanceAppProfileArgs struct {
	AppProfileId  string `pulumi:"appProfileId"`
	AppProfilesId string `pulumi:"appProfilesId"`
	// Long form description of the use case for this AppProfile.
	Description *string `pulumi:"description"`
	// Strongly validated etag for optimistic concurrency control. Preserve the value returned from `GetAppProfile` when calling `UpdateAppProfile` to fail the request if there has been a modification in the mean time. The `update_mask` of the request need not include `etag` for this protection to apply. See [Wikipedia](https://en.wikipedia.org/wiki/HTTP_ETag) and [RFC 7232](https://tools.ietf.org/html/rfc7232#section-2.3) for more details.
	Etag           *string `pulumi:"etag"`
	IgnoreWarnings *string `pulumi:"ignoreWarnings"`
	InstancesId    string  `pulumi:"instancesId"`
	// Use a multi-cluster routing policy.
	MultiClusterRoutingUseAny *MultiClusterRoutingUseAny `pulumi:"multiClusterRoutingUseAny"`
	// The unique name of the app profile. Values are of the form `projects/{project}/instances/{instance}/appProfiles/_a-zA-Z0-9*`.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// Use a single-cluster routing policy.
	SingleClusterRouting *SingleClusterRouting `pulumi:"singleClusterRouting"`
}

// The set of arguments for constructing a InstanceAppProfile resource.
type InstanceAppProfileArgs struct {
	AppProfileId  pulumi.StringInput
	AppProfilesId pulumi.StringInput
	// Long form description of the use case for this AppProfile.
	Description pulumi.StringPtrInput
	// Strongly validated etag for optimistic concurrency control. Preserve the value returned from `GetAppProfile` when calling `UpdateAppProfile` to fail the request if there has been a modification in the mean time. The `update_mask` of the request need not include `etag` for this protection to apply. See [Wikipedia](https://en.wikipedia.org/wiki/HTTP_ETag) and [RFC 7232](https://tools.ietf.org/html/rfc7232#section-2.3) for more details.
	Etag           pulumi.StringPtrInput
	IgnoreWarnings pulumi.StringPtrInput
	InstancesId    pulumi.StringInput
	// Use a multi-cluster routing policy.
	MultiClusterRoutingUseAny MultiClusterRoutingUseAnyPtrInput
	// The unique name of the app profile. Values are of the form `projects/{project}/instances/{instance}/appProfiles/_a-zA-Z0-9*`.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// Use a single-cluster routing policy.
	SingleClusterRouting SingleClusterRoutingPtrInput
}

func (InstanceAppProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceAppProfileArgs)(nil)).Elem()
}

type InstanceAppProfileInput interface {
	pulumi.Input

	ToInstanceAppProfileOutput() InstanceAppProfileOutput
	ToInstanceAppProfileOutputWithContext(ctx context.Context) InstanceAppProfileOutput
}

func (*InstanceAppProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAppProfile)(nil))
}

func (i *InstanceAppProfile) ToInstanceAppProfileOutput() InstanceAppProfileOutput {
	return i.ToInstanceAppProfileOutputWithContext(context.Background())
}

func (i *InstanceAppProfile) ToInstanceAppProfileOutputWithContext(ctx context.Context) InstanceAppProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAppProfileOutput)
}

type InstanceAppProfileOutput struct {
	*pulumi.OutputState
}

func (InstanceAppProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAppProfile)(nil))
}

func (o InstanceAppProfileOutput) ToInstanceAppProfileOutput() InstanceAppProfileOutput {
	return o
}

func (o InstanceAppProfileOutput) ToInstanceAppProfileOutputWithContext(ctx context.Context) InstanceAppProfileOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceAppProfileOutput{})
}
