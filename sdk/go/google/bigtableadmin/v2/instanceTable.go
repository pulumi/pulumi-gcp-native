// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new table in the specified instance. The table can be created with a full set of initial column families, specified in the request.
type InstanceTable struct {
	pulumi.CustomResourceState
}

// NewInstanceTable registers a new resource with the given unique name, arguments, and options.
func NewInstanceTable(ctx *pulumi.Context,
	name string, args *InstanceTableArgs, opts ...pulumi.ResourceOption) (*InstanceTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstancesId == nil {
		return nil, errors.New("invalid value for required argument 'InstancesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.TablesId == nil {
		return nil, errors.New("invalid value for required argument 'TablesId'")
	}
	var resource InstanceTable
	err := ctx.RegisterResource("google-cloud:bigtableadmin/v2:InstanceTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceTable gets an existing InstanceTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceTableState, opts ...pulumi.ResourceOption) (*InstanceTable, error) {
	var resource InstanceTable
	err := ctx.ReadResource("google-cloud:bigtableadmin/v2:InstanceTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceTable resources.
type instanceTableState struct {
}

type InstanceTableState struct {
}

func (InstanceTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceTableState)(nil)).Elem()
}

type instanceTableArgs struct {
	// The optional list of row keys that will be used to initially split the table into several tablets (tablets are similar to HBase regions). Given two split keys, `s1` and `s2`, three tablets will be created, spanning the key ranges: `[, s1), [s1, s2), [s2, )`. Example: * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",` `"other", "zz"]` * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]` * Key assignment: - Tablet 1 `[, apple) => {"a"}.` - Tablet 2 `[apple, customer_1) => {"apple", "custom"}.` - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.` - Tablet 4 `[customer_2, other) => {"customer_2"}.` - Tablet 5 `[other, ) => {"other", "zz"}.`
	InitialSplits []Split `pulumi:"initialSplits"`
	InstancesId   string  `pulumi:"instancesId"`
	ProjectsId    string  `pulumi:"projectsId"`
	// Required. The Table to create.
	Table *Table `pulumi:"table"`
	// Required. The name by which the new table should be referred to within the parent instance, e.g., `foobar` rather than `{parent}/tables/foobar`. Maximum 50 characters.
	TableId  *string `pulumi:"tableId"`
	TablesId string  `pulumi:"tablesId"`
}

// The set of arguments for constructing a InstanceTable resource.
type InstanceTableArgs struct {
	// The optional list of row keys that will be used to initially split the table into several tablets (tablets are similar to HBase regions). Given two split keys, `s1` and `s2`, three tablets will be created, spanning the key ranges: `[, s1), [s1, s2), [s2, )`. Example: * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",` `"other", "zz"]` * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]` * Key assignment: - Tablet 1 `[, apple) => {"a"}.` - Tablet 2 `[apple, customer_1) => {"apple", "custom"}.` - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.` - Tablet 4 `[customer_2, other) => {"customer_2"}.` - Tablet 5 `[other, ) => {"other", "zz"}.`
	InitialSplits SplitArrayInput
	InstancesId   pulumi.StringInput
	ProjectsId    pulumi.StringInput
	// Required. The Table to create.
	Table TablePtrInput
	// Required. The name by which the new table should be referred to within the parent instance, e.g., `foobar` rather than `{parent}/tables/foobar`. Maximum 50 characters.
	TableId  pulumi.StringPtrInput
	TablesId pulumi.StringInput
}

func (InstanceTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceTableArgs)(nil)).Elem()
}

type InstanceTableInput interface {
	pulumi.Input

	ToInstanceTableOutput() InstanceTableOutput
	ToInstanceTableOutputWithContext(ctx context.Context) InstanceTableOutput
}

func (*InstanceTable) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTable)(nil))
}

func (i *InstanceTable) ToInstanceTableOutput() InstanceTableOutput {
	return i.ToInstanceTableOutputWithContext(context.Background())
}

func (i *InstanceTable) ToInstanceTableOutputWithContext(ctx context.Context) InstanceTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTableOutput)
}

type InstanceTableOutput struct {
	*pulumi.OutputState
}

func (InstanceTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTable)(nil))
}

func (o InstanceTableOutput) ToInstanceTableOutput() InstanceTableOutput {
	return o
}

func (o InstanceTableOutput) ToInstanceTableOutputWithContext(ctx context.Context) InstanceTableOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceTableOutput{})
}
