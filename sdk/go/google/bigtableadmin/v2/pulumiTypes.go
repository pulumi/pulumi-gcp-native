// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

func (i AuditConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuditConfig] {
	return pulumix.Output[AuditConfig]{
		OutputState: i.ToAuditConfigOutputWithContext(ctx).OutputState,
	}
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

func (i AuditConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfig] {
	return pulumix.Output[[]AuditConfig]{
		OutputState: i.ToAuditConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuditConfig] {
	return pulumix.Output[AuditConfig]{
		OutputState: o.OutputState,
	}
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfig] {
	return pulumix.Output[[]AuditConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuditConfigResponse] {
	return pulumix.Output[AuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfigResponse] {
	return pulumix.Output[[]AuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

func (i AuditLogConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfig] {
	return pulumix.Output[AuditLogConfig]{
		OutputState: i.ToAuditLogConfigOutputWithContext(ctx).OutputState,
	}
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

func (i AuditLogConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfig] {
	return pulumix.Output[[]AuditLogConfig]{
		OutputState: i.ToAuditLogConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfig] {
	return pulumix.Output[AuditLogConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfig] {
	return pulumix.Output[[]AuditLogConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfigResponse] {
	return pulumix.Output[AuditLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfigResponse] {
	return pulumix.Output[[]AuditLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimits struct {
	// Maximum number of nodes to scale up to.
	MaxServeNodes int `pulumi:"maxServeNodes"`
	// Minimum number of nodes to scale down to.
	MinServeNodes int `pulumi:"minServeNodes"`
}

// AutoscalingLimitsInput is an input type that accepts AutoscalingLimitsArgs and AutoscalingLimitsOutput values.
// You can construct a concrete instance of `AutoscalingLimitsInput` via:
//
//	AutoscalingLimitsArgs{...}
type AutoscalingLimitsInput interface {
	pulumi.Input

	ToAutoscalingLimitsOutput() AutoscalingLimitsOutput
	ToAutoscalingLimitsOutputWithContext(context.Context) AutoscalingLimitsOutput
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimitsArgs struct {
	// Maximum number of nodes to scale up to.
	MaxServeNodes pulumi.IntInput `pulumi:"maxServeNodes"`
	// Minimum number of nodes to scale down to.
	MinServeNodes pulumi.IntInput `pulumi:"minServeNodes"`
}

func (AutoscalingLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingLimits)(nil)).Elem()
}

func (i AutoscalingLimitsArgs) ToAutoscalingLimitsOutput() AutoscalingLimitsOutput {
	return i.ToAutoscalingLimitsOutputWithContext(context.Background())
}

func (i AutoscalingLimitsArgs) ToAutoscalingLimitsOutputWithContext(ctx context.Context) AutoscalingLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingLimitsOutput)
}

func (i AutoscalingLimitsArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscalingLimits] {
	return pulumix.Output[AutoscalingLimits]{
		OutputState: i.ToAutoscalingLimitsOutputWithContext(ctx).OutputState,
	}
}

func (i AutoscalingLimitsArgs) ToAutoscalingLimitsPtrOutput() AutoscalingLimitsPtrOutput {
	return i.ToAutoscalingLimitsPtrOutputWithContext(context.Background())
}

func (i AutoscalingLimitsArgs) ToAutoscalingLimitsPtrOutputWithContext(ctx context.Context) AutoscalingLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingLimitsOutput).ToAutoscalingLimitsPtrOutputWithContext(ctx)
}

// AutoscalingLimitsPtrInput is an input type that accepts AutoscalingLimitsArgs, AutoscalingLimitsPtr and AutoscalingLimitsPtrOutput values.
// You can construct a concrete instance of `AutoscalingLimitsPtrInput` via:
//
//	        AutoscalingLimitsArgs{...}
//
//	or:
//
//	        nil
type AutoscalingLimitsPtrInput interface {
	pulumi.Input

	ToAutoscalingLimitsPtrOutput() AutoscalingLimitsPtrOutput
	ToAutoscalingLimitsPtrOutputWithContext(context.Context) AutoscalingLimitsPtrOutput
}

type autoscalingLimitsPtrType AutoscalingLimitsArgs

func AutoscalingLimitsPtr(v *AutoscalingLimitsArgs) AutoscalingLimitsPtrInput {
	return (*autoscalingLimitsPtrType)(v)
}

func (*autoscalingLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingLimits)(nil)).Elem()
}

func (i *autoscalingLimitsPtrType) ToAutoscalingLimitsPtrOutput() AutoscalingLimitsPtrOutput {
	return i.ToAutoscalingLimitsPtrOutputWithContext(context.Background())
}

func (i *autoscalingLimitsPtrType) ToAutoscalingLimitsPtrOutputWithContext(ctx context.Context) AutoscalingLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingLimitsPtrOutput)
}

func (i *autoscalingLimitsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AutoscalingLimits] {
	return pulumix.Output[*AutoscalingLimits]{
		OutputState: i.ToAutoscalingLimitsPtrOutputWithContext(ctx).OutputState,
	}
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimitsOutput struct{ *pulumi.OutputState }

func (AutoscalingLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingLimits)(nil)).Elem()
}

func (o AutoscalingLimitsOutput) ToAutoscalingLimitsOutput() AutoscalingLimitsOutput {
	return o
}

func (o AutoscalingLimitsOutput) ToAutoscalingLimitsOutputWithContext(ctx context.Context) AutoscalingLimitsOutput {
	return o
}

func (o AutoscalingLimitsOutput) ToAutoscalingLimitsPtrOutput() AutoscalingLimitsPtrOutput {
	return o.ToAutoscalingLimitsPtrOutputWithContext(context.Background())
}

func (o AutoscalingLimitsOutput) ToAutoscalingLimitsPtrOutputWithContext(ctx context.Context) AutoscalingLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingLimits) *AutoscalingLimits {
		return &v
	}).(AutoscalingLimitsPtrOutput)
}

func (o AutoscalingLimitsOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscalingLimits] {
	return pulumix.Output[AutoscalingLimits]{
		OutputState: o.OutputState,
	}
}

// Maximum number of nodes to scale up to.
func (o AutoscalingLimitsOutput) MaxServeNodes() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingLimits) int { return v.MaxServeNodes }).(pulumi.IntOutput)
}

// Minimum number of nodes to scale down to.
func (o AutoscalingLimitsOutput) MinServeNodes() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingLimits) int { return v.MinServeNodes }).(pulumi.IntOutput)
}

type AutoscalingLimitsPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingLimits)(nil)).Elem()
}

func (o AutoscalingLimitsPtrOutput) ToAutoscalingLimitsPtrOutput() AutoscalingLimitsPtrOutput {
	return o
}

func (o AutoscalingLimitsPtrOutput) ToAutoscalingLimitsPtrOutputWithContext(ctx context.Context) AutoscalingLimitsPtrOutput {
	return o
}

func (o AutoscalingLimitsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AutoscalingLimits] {
	return pulumix.Output[*AutoscalingLimits]{
		OutputState: o.OutputState,
	}
}

func (o AutoscalingLimitsPtrOutput) Elem() AutoscalingLimitsOutput {
	return o.ApplyT(func(v *AutoscalingLimits) AutoscalingLimits {
		if v != nil {
			return *v
		}
		var ret AutoscalingLimits
		return ret
	}).(AutoscalingLimitsOutput)
}

// Maximum number of nodes to scale up to.
func (o AutoscalingLimitsPtrOutput) MaxServeNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingLimits) *int {
		if v == nil {
			return nil
		}
		return &v.MaxServeNodes
	}).(pulumi.IntPtrOutput)
}

// Minimum number of nodes to scale down to.
func (o AutoscalingLimitsPtrOutput) MinServeNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingLimits) *int {
		if v == nil {
			return nil
		}
		return &v.MinServeNodes
	}).(pulumi.IntPtrOutput)
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimitsResponse struct {
	// Maximum number of nodes to scale up to.
	MaxServeNodes int `pulumi:"maxServeNodes"`
	// Minimum number of nodes to scale down to.
	MinServeNodes int `pulumi:"minServeNodes"`
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimitsResponseOutput struct{ *pulumi.OutputState }

func (AutoscalingLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingLimitsResponse)(nil)).Elem()
}

func (o AutoscalingLimitsResponseOutput) ToAutoscalingLimitsResponseOutput() AutoscalingLimitsResponseOutput {
	return o
}

func (o AutoscalingLimitsResponseOutput) ToAutoscalingLimitsResponseOutputWithContext(ctx context.Context) AutoscalingLimitsResponseOutput {
	return o
}

func (o AutoscalingLimitsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscalingLimitsResponse] {
	return pulumix.Output[AutoscalingLimitsResponse]{
		OutputState: o.OutputState,
	}
}

// Maximum number of nodes to scale up to.
func (o AutoscalingLimitsResponseOutput) MaxServeNodes() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingLimitsResponse) int { return v.MaxServeNodes }).(pulumi.IntOutput)
}

// Minimum number of nodes to scale down to.
func (o AutoscalingLimitsResponseOutput) MinServeNodes() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingLimitsResponse) int { return v.MinServeNodes }).(pulumi.IntOutput)
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargets struct {
	// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization), and is limited between 10 and 80, otherwise it will return INVALID_ARGUMENT error.
	CpuUtilizationPercent *int `pulumi:"cpuUtilizationPercent"`
	// The storage utilization that the Autoscaler should be trying to achieve. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16TiB) for an HDD cluster, otherwise it will return INVALID_ARGUMENT error. If this value is set to 0, it will be treated as if it were set to the default value: 2560 for SSD, 8192 for HDD.
	StorageUtilizationGibPerNode *int `pulumi:"storageUtilizationGibPerNode"`
}

// AutoscalingTargetsInput is an input type that accepts AutoscalingTargetsArgs and AutoscalingTargetsOutput values.
// You can construct a concrete instance of `AutoscalingTargetsInput` via:
//
//	AutoscalingTargetsArgs{...}
type AutoscalingTargetsInput interface {
	pulumi.Input

	ToAutoscalingTargetsOutput() AutoscalingTargetsOutput
	ToAutoscalingTargetsOutputWithContext(context.Context) AutoscalingTargetsOutput
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargetsArgs struct {
	// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization), and is limited between 10 and 80, otherwise it will return INVALID_ARGUMENT error.
	CpuUtilizationPercent pulumi.IntPtrInput `pulumi:"cpuUtilizationPercent"`
	// The storage utilization that the Autoscaler should be trying to achieve. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16TiB) for an HDD cluster, otherwise it will return INVALID_ARGUMENT error. If this value is set to 0, it will be treated as if it were set to the default value: 2560 for SSD, 8192 for HDD.
	StorageUtilizationGibPerNode pulumi.IntPtrInput `pulumi:"storageUtilizationGibPerNode"`
}

func (AutoscalingTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTargets)(nil)).Elem()
}

func (i AutoscalingTargetsArgs) ToAutoscalingTargetsOutput() AutoscalingTargetsOutput {
	return i.ToAutoscalingTargetsOutputWithContext(context.Background())
}

func (i AutoscalingTargetsArgs) ToAutoscalingTargetsOutputWithContext(ctx context.Context) AutoscalingTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTargetsOutput)
}

func (i AutoscalingTargetsArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscalingTargets] {
	return pulumix.Output[AutoscalingTargets]{
		OutputState: i.ToAutoscalingTargetsOutputWithContext(ctx).OutputState,
	}
}

func (i AutoscalingTargetsArgs) ToAutoscalingTargetsPtrOutput() AutoscalingTargetsPtrOutput {
	return i.ToAutoscalingTargetsPtrOutputWithContext(context.Background())
}

func (i AutoscalingTargetsArgs) ToAutoscalingTargetsPtrOutputWithContext(ctx context.Context) AutoscalingTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTargetsOutput).ToAutoscalingTargetsPtrOutputWithContext(ctx)
}

// AutoscalingTargetsPtrInput is an input type that accepts AutoscalingTargetsArgs, AutoscalingTargetsPtr and AutoscalingTargetsPtrOutput values.
// You can construct a concrete instance of `AutoscalingTargetsPtrInput` via:
//
//	        AutoscalingTargetsArgs{...}
//
//	or:
//
//	        nil
type AutoscalingTargetsPtrInput interface {
	pulumi.Input

	ToAutoscalingTargetsPtrOutput() AutoscalingTargetsPtrOutput
	ToAutoscalingTargetsPtrOutputWithContext(context.Context) AutoscalingTargetsPtrOutput
}

type autoscalingTargetsPtrType AutoscalingTargetsArgs

func AutoscalingTargetsPtr(v *AutoscalingTargetsArgs) AutoscalingTargetsPtrInput {
	return (*autoscalingTargetsPtrType)(v)
}

func (*autoscalingTargetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTargets)(nil)).Elem()
}

func (i *autoscalingTargetsPtrType) ToAutoscalingTargetsPtrOutput() AutoscalingTargetsPtrOutput {
	return i.ToAutoscalingTargetsPtrOutputWithContext(context.Background())
}

func (i *autoscalingTargetsPtrType) ToAutoscalingTargetsPtrOutputWithContext(ctx context.Context) AutoscalingTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTargetsPtrOutput)
}

func (i *autoscalingTargetsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AutoscalingTargets] {
	return pulumix.Output[*AutoscalingTargets]{
		OutputState: i.ToAutoscalingTargetsPtrOutputWithContext(ctx).OutputState,
	}
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargetsOutput struct{ *pulumi.OutputState }

func (AutoscalingTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTargets)(nil)).Elem()
}

func (o AutoscalingTargetsOutput) ToAutoscalingTargetsOutput() AutoscalingTargetsOutput {
	return o
}

func (o AutoscalingTargetsOutput) ToAutoscalingTargetsOutputWithContext(ctx context.Context) AutoscalingTargetsOutput {
	return o
}

func (o AutoscalingTargetsOutput) ToAutoscalingTargetsPtrOutput() AutoscalingTargetsPtrOutput {
	return o.ToAutoscalingTargetsPtrOutputWithContext(context.Background())
}

func (o AutoscalingTargetsOutput) ToAutoscalingTargetsPtrOutputWithContext(ctx context.Context) AutoscalingTargetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingTargets) *AutoscalingTargets {
		return &v
	}).(AutoscalingTargetsPtrOutput)
}

func (o AutoscalingTargetsOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscalingTargets] {
	return pulumix.Output[AutoscalingTargets]{
		OutputState: o.OutputState,
	}
}

// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization), and is limited between 10 and 80, otherwise it will return INVALID_ARGUMENT error.
func (o AutoscalingTargetsOutput) CpuUtilizationPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingTargets) *int { return v.CpuUtilizationPercent }).(pulumi.IntPtrOutput)
}

// The storage utilization that the Autoscaler should be trying to achieve. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16TiB) for an HDD cluster, otherwise it will return INVALID_ARGUMENT error. If this value is set to 0, it will be treated as if it were set to the default value: 2560 for SSD, 8192 for HDD.
func (o AutoscalingTargetsOutput) StorageUtilizationGibPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingTargets) *int { return v.StorageUtilizationGibPerNode }).(pulumi.IntPtrOutput)
}

type AutoscalingTargetsPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingTargetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTargets)(nil)).Elem()
}

func (o AutoscalingTargetsPtrOutput) ToAutoscalingTargetsPtrOutput() AutoscalingTargetsPtrOutput {
	return o
}

func (o AutoscalingTargetsPtrOutput) ToAutoscalingTargetsPtrOutputWithContext(ctx context.Context) AutoscalingTargetsPtrOutput {
	return o
}

func (o AutoscalingTargetsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AutoscalingTargets] {
	return pulumix.Output[*AutoscalingTargets]{
		OutputState: o.OutputState,
	}
}

func (o AutoscalingTargetsPtrOutput) Elem() AutoscalingTargetsOutput {
	return o.ApplyT(func(v *AutoscalingTargets) AutoscalingTargets {
		if v != nil {
			return *v
		}
		var ret AutoscalingTargets
		return ret
	}).(AutoscalingTargetsOutput)
}

// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization), and is limited between 10 and 80, otherwise it will return INVALID_ARGUMENT error.
func (o AutoscalingTargetsPtrOutput) CpuUtilizationPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingTargets) *int {
		if v == nil {
			return nil
		}
		return v.CpuUtilizationPercent
	}).(pulumi.IntPtrOutput)
}

// The storage utilization that the Autoscaler should be trying to achieve. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16TiB) for an HDD cluster, otherwise it will return INVALID_ARGUMENT error. If this value is set to 0, it will be treated as if it were set to the default value: 2560 for SSD, 8192 for HDD.
func (o AutoscalingTargetsPtrOutput) StorageUtilizationGibPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingTargets) *int {
		if v == nil {
			return nil
		}
		return v.StorageUtilizationGibPerNode
	}).(pulumi.IntPtrOutput)
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargetsResponse struct {
	// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization), and is limited between 10 and 80, otherwise it will return INVALID_ARGUMENT error.
	CpuUtilizationPercent int `pulumi:"cpuUtilizationPercent"`
	// The storage utilization that the Autoscaler should be trying to achieve. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16TiB) for an HDD cluster, otherwise it will return INVALID_ARGUMENT error. If this value is set to 0, it will be treated as if it were set to the default value: 2560 for SSD, 8192 for HDD.
	StorageUtilizationGibPerNode int `pulumi:"storageUtilizationGibPerNode"`
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargetsResponseOutput struct{ *pulumi.OutputState }

func (AutoscalingTargetsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTargetsResponse)(nil)).Elem()
}

func (o AutoscalingTargetsResponseOutput) ToAutoscalingTargetsResponseOutput() AutoscalingTargetsResponseOutput {
	return o
}

func (o AutoscalingTargetsResponseOutput) ToAutoscalingTargetsResponseOutputWithContext(ctx context.Context) AutoscalingTargetsResponseOutput {
	return o
}

func (o AutoscalingTargetsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscalingTargetsResponse] {
	return pulumix.Output[AutoscalingTargetsResponse]{
		OutputState: o.OutputState,
	}
}

// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization), and is limited between 10 and 80, otherwise it will return INVALID_ARGUMENT error.
func (o AutoscalingTargetsResponseOutput) CpuUtilizationPercent() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingTargetsResponse) int { return v.CpuUtilizationPercent }).(pulumi.IntOutput)
}

// The storage utilization that the Autoscaler should be trying to achieve. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16TiB) for an HDD cluster, otherwise it will return INVALID_ARGUMENT error. If this value is set to 0, it will be treated as if it were set to the default value: 2560 for SSD, 8192 for HDD.
func (o AutoscalingTargetsResponseOutput) StorageUtilizationGibPerNode() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingTargetsResponse) int { return v.StorageUtilizationGibPerNode }).(pulumi.IntOutput)
}

// Information about a backup.
type BackupInfoResponse struct {
	// Name of the backup.
	Backup string `pulumi:"backup"`
	// This time that the backup was finished. Row data in the backup will be no newer than this timestamp.
	EndTime string `pulumi:"endTime"`
	// Name of the backup from which this backup was copied. If a backup is not created by copying a backup, this field will be empty. Values are of the form: projects//instances//backups/.
	SourceBackup string `pulumi:"sourceBackup"`
	// Name of the table the backup was created from.
	SourceTable string `pulumi:"sourceTable"`
	// The time that the backup was started. Row data in the backup will be no older than this timestamp.
	StartTime string `pulumi:"startTime"`
}

// Information about a backup.
type BackupInfoResponseOutput struct{ *pulumi.OutputState }

func (BackupInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupInfoResponse)(nil)).Elem()
}

func (o BackupInfoResponseOutput) ToBackupInfoResponseOutput() BackupInfoResponseOutput {
	return o
}

func (o BackupInfoResponseOutput) ToBackupInfoResponseOutputWithContext(ctx context.Context) BackupInfoResponseOutput {
	return o
}

func (o BackupInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BackupInfoResponse] {
	return pulumix.Output[BackupInfoResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the backup.
func (o BackupInfoResponseOutput) Backup() pulumi.StringOutput {
	return o.ApplyT(func(v BackupInfoResponse) string { return v.Backup }).(pulumi.StringOutput)
}

// This time that the backup was finished. Row data in the backup will be no newer than this timestamp.
func (o BackupInfoResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupInfoResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Name of the backup from which this backup was copied. If a backup is not created by copying a backup, this field will be empty. Values are of the form: projects//instances//backups/.
func (o BackupInfoResponseOutput) SourceBackup() pulumi.StringOutput {
	return o.ApplyT(func(v BackupInfoResponse) string { return v.SourceBackup }).(pulumi.StringOutput)
}

// Name of the table the backup was created from.
func (o BackupInfoResponseOutput) SourceTable() pulumi.StringOutput {
	return o.ApplyT(func(v BackupInfoResponse) string { return v.SourceTable }).(pulumi.StringOutput)
}

// The time that the backup was started. Row data in the backup will be no older than this timestamp.
func (o BackupInfoResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupInfoResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

func (i BindingArgs) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: i.ToBindingOutputWithContext(ctx).OutputState,
	}
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

func (i BindingArray) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: i.ToBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

func (o BindingOutput) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: o.OutputState,
	}
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BindingResponse] {
	return pulumix.Output[BindingResponse]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BindingResponse] {
	return pulumix.Output[[]BindingResponse]{
		OutputState: o.OutputState,
	}
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Change stream configuration.
type ChangeStreamConfig struct {
	// How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity.
	RetentionPeriod *string `pulumi:"retentionPeriod"`
}

// ChangeStreamConfigInput is an input type that accepts ChangeStreamConfigArgs and ChangeStreamConfigOutput values.
// You can construct a concrete instance of `ChangeStreamConfigInput` via:
//
//	ChangeStreamConfigArgs{...}
type ChangeStreamConfigInput interface {
	pulumi.Input

	ToChangeStreamConfigOutput() ChangeStreamConfigOutput
	ToChangeStreamConfigOutputWithContext(context.Context) ChangeStreamConfigOutput
}

// Change stream configuration.
type ChangeStreamConfigArgs struct {
	// How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity.
	RetentionPeriod pulumi.StringPtrInput `pulumi:"retentionPeriod"`
}

func (ChangeStreamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChangeStreamConfig)(nil)).Elem()
}

func (i ChangeStreamConfigArgs) ToChangeStreamConfigOutput() ChangeStreamConfigOutput {
	return i.ToChangeStreamConfigOutputWithContext(context.Background())
}

func (i ChangeStreamConfigArgs) ToChangeStreamConfigOutputWithContext(ctx context.Context) ChangeStreamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeStreamConfigOutput)
}

func (i ChangeStreamConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ChangeStreamConfig] {
	return pulumix.Output[ChangeStreamConfig]{
		OutputState: i.ToChangeStreamConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ChangeStreamConfigArgs) ToChangeStreamConfigPtrOutput() ChangeStreamConfigPtrOutput {
	return i.ToChangeStreamConfigPtrOutputWithContext(context.Background())
}

func (i ChangeStreamConfigArgs) ToChangeStreamConfigPtrOutputWithContext(ctx context.Context) ChangeStreamConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeStreamConfigOutput).ToChangeStreamConfigPtrOutputWithContext(ctx)
}

// ChangeStreamConfigPtrInput is an input type that accepts ChangeStreamConfigArgs, ChangeStreamConfigPtr and ChangeStreamConfigPtrOutput values.
// You can construct a concrete instance of `ChangeStreamConfigPtrInput` via:
//
//	        ChangeStreamConfigArgs{...}
//
//	or:
//
//	        nil
type ChangeStreamConfigPtrInput interface {
	pulumi.Input

	ToChangeStreamConfigPtrOutput() ChangeStreamConfigPtrOutput
	ToChangeStreamConfigPtrOutputWithContext(context.Context) ChangeStreamConfigPtrOutput
}

type changeStreamConfigPtrType ChangeStreamConfigArgs

func ChangeStreamConfigPtr(v *ChangeStreamConfigArgs) ChangeStreamConfigPtrInput {
	return (*changeStreamConfigPtrType)(v)
}

func (*changeStreamConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeStreamConfig)(nil)).Elem()
}

func (i *changeStreamConfigPtrType) ToChangeStreamConfigPtrOutput() ChangeStreamConfigPtrOutput {
	return i.ToChangeStreamConfigPtrOutputWithContext(context.Background())
}

func (i *changeStreamConfigPtrType) ToChangeStreamConfigPtrOutputWithContext(ctx context.Context) ChangeStreamConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeStreamConfigPtrOutput)
}

func (i *changeStreamConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ChangeStreamConfig] {
	return pulumix.Output[*ChangeStreamConfig]{
		OutputState: i.ToChangeStreamConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Change stream configuration.
type ChangeStreamConfigOutput struct{ *pulumi.OutputState }

func (ChangeStreamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChangeStreamConfig)(nil)).Elem()
}

func (o ChangeStreamConfigOutput) ToChangeStreamConfigOutput() ChangeStreamConfigOutput {
	return o
}

func (o ChangeStreamConfigOutput) ToChangeStreamConfigOutputWithContext(ctx context.Context) ChangeStreamConfigOutput {
	return o
}

func (o ChangeStreamConfigOutput) ToChangeStreamConfigPtrOutput() ChangeStreamConfigPtrOutput {
	return o.ToChangeStreamConfigPtrOutputWithContext(context.Background())
}

func (o ChangeStreamConfigOutput) ToChangeStreamConfigPtrOutputWithContext(ctx context.Context) ChangeStreamConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChangeStreamConfig) *ChangeStreamConfig {
		return &v
	}).(ChangeStreamConfigPtrOutput)
}

func (o ChangeStreamConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ChangeStreamConfig] {
	return pulumix.Output[ChangeStreamConfig]{
		OutputState: o.OutputState,
	}
}

// How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity.
func (o ChangeStreamConfigOutput) RetentionPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChangeStreamConfig) *string { return v.RetentionPeriod }).(pulumi.StringPtrOutput)
}

type ChangeStreamConfigPtrOutput struct{ *pulumi.OutputState }

func (ChangeStreamConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeStreamConfig)(nil)).Elem()
}

func (o ChangeStreamConfigPtrOutput) ToChangeStreamConfigPtrOutput() ChangeStreamConfigPtrOutput {
	return o
}

func (o ChangeStreamConfigPtrOutput) ToChangeStreamConfigPtrOutputWithContext(ctx context.Context) ChangeStreamConfigPtrOutput {
	return o
}

func (o ChangeStreamConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ChangeStreamConfig] {
	return pulumix.Output[*ChangeStreamConfig]{
		OutputState: o.OutputState,
	}
}

func (o ChangeStreamConfigPtrOutput) Elem() ChangeStreamConfigOutput {
	return o.ApplyT(func(v *ChangeStreamConfig) ChangeStreamConfig {
		if v != nil {
			return *v
		}
		var ret ChangeStreamConfig
		return ret
	}).(ChangeStreamConfigOutput)
}

// How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity.
func (o ChangeStreamConfigPtrOutput) RetentionPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChangeStreamConfig) *string {
		if v == nil {
			return nil
		}
		return v.RetentionPeriod
	}).(pulumi.StringPtrOutput)
}

// Change stream configuration.
type ChangeStreamConfigResponse struct {
	// How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity.
	RetentionPeriod string `pulumi:"retentionPeriod"`
}

// Change stream configuration.
type ChangeStreamConfigResponseOutput struct{ *pulumi.OutputState }

func (ChangeStreamConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChangeStreamConfigResponse)(nil)).Elem()
}

func (o ChangeStreamConfigResponseOutput) ToChangeStreamConfigResponseOutput() ChangeStreamConfigResponseOutput {
	return o
}

func (o ChangeStreamConfigResponseOutput) ToChangeStreamConfigResponseOutputWithContext(ctx context.Context) ChangeStreamConfigResponseOutput {
	return o
}

func (o ChangeStreamConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ChangeStreamConfigResponse] {
	return pulumix.Output[ChangeStreamConfigResponse]{
		OutputState: o.OutputState,
	}
}

// How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity.
func (o ChangeStreamConfigResponseOutput) RetentionPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v ChangeStreamConfigResponse) string { return v.RetentionPeriod }).(pulumi.StringOutput)
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfig struct {
	// Autoscaling limits for this cluster.
	AutoscalingLimits AutoscalingLimits `pulumi:"autoscalingLimits"`
	// Autoscaling targets for this cluster.
	AutoscalingTargets AutoscalingTargets `pulumi:"autoscalingTargets"`
}

// ClusterAutoscalingConfigInput is an input type that accepts ClusterAutoscalingConfigArgs and ClusterAutoscalingConfigOutput values.
// You can construct a concrete instance of `ClusterAutoscalingConfigInput` via:
//
//	ClusterAutoscalingConfigArgs{...}
type ClusterAutoscalingConfigInput interface {
	pulumi.Input

	ToClusterAutoscalingConfigOutput() ClusterAutoscalingConfigOutput
	ToClusterAutoscalingConfigOutputWithContext(context.Context) ClusterAutoscalingConfigOutput
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfigArgs struct {
	// Autoscaling limits for this cluster.
	AutoscalingLimits AutoscalingLimitsInput `pulumi:"autoscalingLimits"`
	// Autoscaling targets for this cluster.
	AutoscalingTargets AutoscalingTargetsInput `pulumi:"autoscalingTargets"`
}

func (ClusterAutoscalingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscalingConfig)(nil)).Elem()
}

func (i ClusterAutoscalingConfigArgs) ToClusterAutoscalingConfigOutput() ClusterAutoscalingConfigOutput {
	return i.ToClusterAutoscalingConfigOutputWithContext(context.Background())
}

func (i ClusterAutoscalingConfigArgs) ToClusterAutoscalingConfigOutputWithContext(ctx context.Context) ClusterAutoscalingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingConfigOutput)
}

func (i ClusterAutoscalingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterAutoscalingConfig] {
	return pulumix.Output[ClusterAutoscalingConfig]{
		OutputState: i.ToClusterAutoscalingConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterAutoscalingConfigArgs) ToClusterAutoscalingConfigPtrOutput() ClusterAutoscalingConfigPtrOutput {
	return i.ToClusterAutoscalingConfigPtrOutputWithContext(context.Background())
}

func (i ClusterAutoscalingConfigArgs) ToClusterAutoscalingConfigPtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingConfigOutput).ToClusterAutoscalingConfigPtrOutputWithContext(ctx)
}

// ClusterAutoscalingConfigPtrInput is an input type that accepts ClusterAutoscalingConfigArgs, ClusterAutoscalingConfigPtr and ClusterAutoscalingConfigPtrOutput values.
// You can construct a concrete instance of `ClusterAutoscalingConfigPtrInput` via:
//
//	        ClusterAutoscalingConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterAutoscalingConfigPtrInput interface {
	pulumi.Input

	ToClusterAutoscalingConfigPtrOutput() ClusterAutoscalingConfigPtrOutput
	ToClusterAutoscalingConfigPtrOutputWithContext(context.Context) ClusterAutoscalingConfigPtrOutput
}

type clusterAutoscalingConfigPtrType ClusterAutoscalingConfigArgs

func ClusterAutoscalingConfigPtr(v *ClusterAutoscalingConfigArgs) ClusterAutoscalingConfigPtrInput {
	return (*clusterAutoscalingConfigPtrType)(v)
}

func (*clusterAutoscalingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscalingConfig)(nil)).Elem()
}

func (i *clusterAutoscalingConfigPtrType) ToClusterAutoscalingConfigPtrOutput() ClusterAutoscalingConfigPtrOutput {
	return i.ToClusterAutoscalingConfigPtrOutputWithContext(context.Background())
}

func (i *clusterAutoscalingConfigPtrType) ToClusterAutoscalingConfigPtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingConfigPtrOutput)
}

func (i *clusterAutoscalingConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterAutoscalingConfig] {
	return pulumix.Output[*ClusterAutoscalingConfig]{
		OutputState: i.ToClusterAutoscalingConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfigOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscalingConfig)(nil)).Elem()
}

func (o ClusterAutoscalingConfigOutput) ToClusterAutoscalingConfigOutput() ClusterAutoscalingConfigOutput {
	return o
}

func (o ClusterAutoscalingConfigOutput) ToClusterAutoscalingConfigOutputWithContext(ctx context.Context) ClusterAutoscalingConfigOutput {
	return o
}

func (o ClusterAutoscalingConfigOutput) ToClusterAutoscalingConfigPtrOutput() ClusterAutoscalingConfigPtrOutput {
	return o.ToClusterAutoscalingConfigPtrOutputWithContext(context.Background())
}

func (o ClusterAutoscalingConfigOutput) ToClusterAutoscalingConfigPtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterAutoscalingConfig) *ClusterAutoscalingConfig {
		return &v
	}).(ClusterAutoscalingConfigPtrOutput)
}

func (o ClusterAutoscalingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterAutoscalingConfig] {
	return pulumix.Output[ClusterAutoscalingConfig]{
		OutputState: o.OutputState,
	}
}

// Autoscaling limits for this cluster.
func (o ClusterAutoscalingConfigOutput) AutoscalingLimits() AutoscalingLimitsOutput {
	return o.ApplyT(func(v ClusterAutoscalingConfig) AutoscalingLimits { return v.AutoscalingLimits }).(AutoscalingLimitsOutput)
}

// Autoscaling targets for this cluster.
func (o ClusterAutoscalingConfigOutput) AutoscalingTargets() AutoscalingTargetsOutput {
	return o.ApplyT(func(v ClusterAutoscalingConfig) AutoscalingTargets { return v.AutoscalingTargets }).(AutoscalingTargetsOutput)
}

type ClusterAutoscalingConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscalingConfig)(nil)).Elem()
}

func (o ClusterAutoscalingConfigPtrOutput) ToClusterAutoscalingConfigPtrOutput() ClusterAutoscalingConfigPtrOutput {
	return o
}

func (o ClusterAutoscalingConfigPtrOutput) ToClusterAutoscalingConfigPtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigPtrOutput {
	return o
}

func (o ClusterAutoscalingConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterAutoscalingConfig] {
	return pulumix.Output[*ClusterAutoscalingConfig]{
		OutputState: o.OutputState,
	}
}

func (o ClusterAutoscalingConfigPtrOutput) Elem() ClusterAutoscalingConfigOutput {
	return o.ApplyT(func(v *ClusterAutoscalingConfig) ClusterAutoscalingConfig {
		if v != nil {
			return *v
		}
		var ret ClusterAutoscalingConfig
		return ret
	}).(ClusterAutoscalingConfigOutput)
}

// Autoscaling limits for this cluster.
func (o ClusterAutoscalingConfigPtrOutput) AutoscalingLimits() AutoscalingLimitsPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscalingConfig) *AutoscalingLimits {
		if v == nil {
			return nil
		}
		return &v.AutoscalingLimits
	}).(AutoscalingLimitsPtrOutput)
}

// Autoscaling targets for this cluster.
func (o ClusterAutoscalingConfigPtrOutput) AutoscalingTargets() AutoscalingTargetsPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscalingConfig) *AutoscalingTargets {
		if v == nil {
			return nil
		}
		return &v.AutoscalingTargets
	}).(AutoscalingTargetsPtrOutput)
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfigResponse struct {
	// Autoscaling limits for this cluster.
	AutoscalingLimits AutoscalingLimitsResponse `pulumi:"autoscalingLimits"`
	// Autoscaling targets for this cluster.
	AutoscalingTargets AutoscalingTargetsResponse `pulumi:"autoscalingTargets"`
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfigResponseOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscalingConfigResponse)(nil)).Elem()
}

func (o ClusterAutoscalingConfigResponseOutput) ToClusterAutoscalingConfigResponseOutput() ClusterAutoscalingConfigResponseOutput {
	return o
}

func (o ClusterAutoscalingConfigResponseOutput) ToClusterAutoscalingConfigResponseOutputWithContext(ctx context.Context) ClusterAutoscalingConfigResponseOutput {
	return o
}

func (o ClusterAutoscalingConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterAutoscalingConfigResponse] {
	return pulumix.Output[ClusterAutoscalingConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Autoscaling limits for this cluster.
func (o ClusterAutoscalingConfigResponseOutput) AutoscalingLimits() AutoscalingLimitsResponseOutput {
	return o.ApplyT(func(v ClusterAutoscalingConfigResponse) AutoscalingLimitsResponse { return v.AutoscalingLimits }).(AutoscalingLimitsResponseOutput)
}

// Autoscaling targets for this cluster.
func (o ClusterAutoscalingConfigResponseOutput) AutoscalingTargets() AutoscalingTargetsResponseOutput {
	return o.ApplyT(func(v ClusterAutoscalingConfigResponse) AutoscalingTargetsResponse { return v.AutoscalingTargets }).(AutoscalingTargetsResponseOutput)
}

// Configuration for a cluster.
type ClusterConfig struct {
	// Autoscaling configuration for this cluster.
	ClusterAutoscalingConfig *ClusterAutoscalingConfig `pulumi:"clusterAutoscalingConfig"`
}

// ClusterConfigInput is an input type that accepts ClusterConfigArgs and ClusterConfigOutput values.
// You can construct a concrete instance of `ClusterConfigInput` via:
//
//	ClusterConfigArgs{...}
type ClusterConfigInput interface {
	pulumi.Input

	ToClusterConfigOutput() ClusterConfigOutput
	ToClusterConfigOutputWithContext(context.Context) ClusterConfigOutput
}

// Configuration for a cluster.
type ClusterConfigArgs struct {
	// Autoscaling configuration for this cluster.
	ClusterAutoscalingConfig ClusterAutoscalingConfigPtrInput `pulumi:"clusterAutoscalingConfig"`
}

func (ClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfig)(nil)).Elem()
}

func (i ClusterConfigArgs) ToClusterConfigOutput() ClusterConfigOutput {
	return i.ToClusterConfigOutputWithContext(context.Background())
}

func (i ClusterConfigArgs) ToClusterConfigOutputWithContext(ctx context.Context) ClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigOutput)
}

func (i ClusterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ClusterConfig] {
	return pulumix.Output[ClusterConfig]{
		OutputState: i.ToClusterConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ClusterConfigArgs) ToClusterConfigPtrOutput() ClusterConfigPtrOutput {
	return i.ToClusterConfigPtrOutputWithContext(context.Background())
}

func (i ClusterConfigArgs) ToClusterConfigPtrOutputWithContext(ctx context.Context) ClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigOutput).ToClusterConfigPtrOutputWithContext(ctx)
}

// ClusterConfigPtrInput is an input type that accepts ClusterConfigArgs, ClusterConfigPtr and ClusterConfigPtrOutput values.
// You can construct a concrete instance of `ClusterConfigPtrInput` via:
//
//	        ClusterConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterConfigPtrInput interface {
	pulumi.Input

	ToClusterConfigPtrOutput() ClusterConfigPtrOutput
	ToClusterConfigPtrOutputWithContext(context.Context) ClusterConfigPtrOutput
}

type clusterConfigPtrType ClusterConfigArgs

func ClusterConfigPtr(v *ClusterConfigArgs) ClusterConfigPtrInput {
	return (*clusterConfigPtrType)(v)
}

func (*clusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfig)(nil)).Elem()
}

func (i *clusterConfigPtrType) ToClusterConfigPtrOutput() ClusterConfigPtrOutput {
	return i.ToClusterConfigPtrOutputWithContext(context.Background())
}

func (i *clusterConfigPtrType) ToClusterConfigPtrOutputWithContext(ctx context.Context) ClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigPtrOutput)
}

func (i *clusterConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClusterConfig] {
	return pulumix.Output[*ClusterConfig]{
		OutputState: i.ToClusterConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a cluster.
type ClusterConfigOutput struct{ *pulumi.OutputState }

func (ClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfig)(nil)).Elem()
}

func (o ClusterConfigOutput) ToClusterConfigOutput() ClusterConfigOutput {
	return o
}

func (o ClusterConfigOutput) ToClusterConfigOutputWithContext(ctx context.Context) ClusterConfigOutput {
	return o
}

func (o ClusterConfigOutput) ToClusterConfigPtrOutput() ClusterConfigPtrOutput {
	return o.ToClusterConfigPtrOutputWithContext(context.Background())
}

func (o ClusterConfigOutput) ToClusterConfigPtrOutputWithContext(ctx context.Context) ClusterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConfig) *ClusterConfig {
		return &v
	}).(ClusterConfigPtrOutput)
}

func (o ClusterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterConfig] {
	return pulumix.Output[ClusterConfig]{
		OutputState: o.OutputState,
	}
}

// Autoscaling configuration for this cluster.
func (o ClusterConfigOutput) ClusterAutoscalingConfig() ClusterAutoscalingConfigPtrOutput {
	return o.ApplyT(func(v ClusterConfig) *ClusterAutoscalingConfig { return v.ClusterAutoscalingConfig }).(ClusterAutoscalingConfigPtrOutput)
}

type ClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfig)(nil)).Elem()
}

func (o ClusterConfigPtrOutput) ToClusterConfigPtrOutput() ClusterConfigPtrOutput {
	return o
}

func (o ClusterConfigPtrOutput) ToClusterConfigPtrOutputWithContext(ctx context.Context) ClusterConfigPtrOutput {
	return o
}

func (o ClusterConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterConfig] {
	return pulumix.Output[*ClusterConfig]{
		OutputState: o.OutputState,
	}
}

func (o ClusterConfigPtrOutput) Elem() ClusterConfigOutput {
	return o.ApplyT(func(v *ClusterConfig) ClusterConfig {
		if v != nil {
			return *v
		}
		var ret ClusterConfig
		return ret
	}).(ClusterConfigOutput)
}

// Autoscaling configuration for this cluster.
func (o ClusterConfigPtrOutput) ClusterAutoscalingConfig() ClusterAutoscalingConfigPtrOutput {
	return o.ApplyT(func(v *ClusterConfig) *ClusterAutoscalingConfig {
		if v == nil {
			return nil
		}
		return v.ClusterAutoscalingConfig
	}).(ClusterAutoscalingConfigPtrOutput)
}

// Configuration for a cluster.
type ClusterConfigResponse struct {
	// Autoscaling configuration for this cluster.
	ClusterAutoscalingConfig ClusterAutoscalingConfigResponse `pulumi:"clusterAutoscalingConfig"`
}

// Configuration for a cluster.
type ClusterConfigResponseOutput struct{ *pulumi.OutputState }

func (ClusterConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigResponse)(nil)).Elem()
}

func (o ClusterConfigResponseOutput) ToClusterConfigResponseOutput() ClusterConfigResponseOutput {
	return o
}

func (o ClusterConfigResponseOutput) ToClusterConfigResponseOutputWithContext(ctx context.Context) ClusterConfigResponseOutput {
	return o
}

func (o ClusterConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterConfigResponse] {
	return pulumix.Output[ClusterConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Autoscaling configuration for this cluster.
func (o ClusterConfigResponseOutput) ClusterAutoscalingConfig() ClusterAutoscalingConfigResponseOutput {
	return o.ApplyT(func(v ClusterConfigResponse) ClusterAutoscalingConfigResponse { return v.ClusterAutoscalingConfig }).(ClusterAutoscalingConfigResponseOutput)
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfig struct {
	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigInput is an input type that accepts EncryptionConfigArgs and EncryptionConfigOutput values.
// You can construct a concrete instance of `EncryptionConfigInput` via:
//
//	EncryptionConfigArgs{...}
type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(context.Context) EncryptionConfigOutput
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigArgs struct {
	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i EncryptionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfig] {
	return pulumix.Output[EncryptionConfig]{
		OutputState: i.ToEncryptionConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput).ToEncryptionConfigPtrOutputWithContext(ctx)
}

// EncryptionConfigPtrInput is an input type that accepts EncryptionConfigArgs, EncryptionConfigPtr and EncryptionConfigPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigPtrInput` via:
//
//	        EncryptionConfigArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func EncryptionConfigPtr(v *EncryptionConfigArgs) EncryptionConfigPtrInput {
	return (*encryptionConfigPtrType)(v)
}

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

func (i *encryptionConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EncryptionConfig] {
	return pulumix.Output[*EncryptionConfig]{
		OutputState: i.ToEncryptionConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

func (o EncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfig] {
	return pulumix.Output[EncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
func (o EncryptionConfigOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionConfig] {
	return pulumix.Output[*EncryptionConfig]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig {
		if v != nil {
			return *v
		}
		var ret EncryptionConfig
		return ret
	}).(EncryptionConfigOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
func (o EncryptionConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigResponse struct {
	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigResponse)(nil)).Elem()
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutput() EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutputWithContext(ctx context.Context) EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfigResponse] {
	return pulumix.Output[EncryptionConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
func (o EncryptionConfigResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Encryption information for a given resource. If this resource is protected with customer managed encryption, the in-use Cloud Key Management Service (Cloud KMS) key version is specified along with its status.
type EncryptionInfoResponse struct {
	// The status of encrypt/decrypt calls on underlying data for this resource. Regardless of status, the existing data is always encrypted at rest.
	EncryptionStatus StatusResponse `pulumi:"encryptionStatus"`
	// The type of encryption used to protect this resource.
	EncryptionType string `pulumi:"encryptionType"`
	// The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.
	KmsKeyVersion string `pulumi:"kmsKeyVersion"`
}

// Encryption information for a given resource. If this resource is protected with customer managed encryption, the in-use Cloud Key Management Service (Cloud KMS) key version is specified along with its status.
type EncryptionInfoResponseOutput struct{ *pulumi.OutputState }

func (EncryptionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionInfoResponse)(nil)).Elem()
}

func (o EncryptionInfoResponseOutput) ToEncryptionInfoResponseOutput() EncryptionInfoResponseOutput {
	return o
}

func (o EncryptionInfoResponseOutput) ToEncryptionInfoResponseOutputWithContext(ctx context.Context) EncryptionInfoResponseOutput {
	return o
}

func (o EncryptionInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionInfoResponse] {
	return pulumix.Output[EncryptionInfoResponse]{
		OutputState: o.OutputState,
	}
}

// The status of encrypt/decrypt calls on underlying data for this resource. Regardless of status, the existing data is always encrypted at rest.
func (o EncryptionInfoResponseOutput) EncryptionStatus() StatusResponseOutput {
	return o.ApplyT(func(v EncryptionInfoResponse) StatusResponse { return v.EncryptionStatus }).(StatusResponseOutput)
}

// The type of encryption used to protect this resource.
func (o EncryptionInfoResponseOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionInfoResponse) string { return v.EncryptionType }).(pulumi.StringOutput)
}

// The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.
func (o EncryptionInfoResponseOutput) KmsKeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionInfoResponse) string { return v.KmsKeyVersion }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: i.ToExprOutputWithContext(ctx).OutputState,
	}
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

func (i *exprPtrType) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: i.ToExprPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

func (o ExprOutput) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: o.OutputState,
	}
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExprResponse] {
	return pulumix.Output[ExprResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAny struct {
	// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
	ClusterIds []string `pulumi:"clusterIds"`
}

// MultiClusterRoutingUseAnyInput is an input type that accepts MultiClusterRoutingUseAnyArgs and MultiClusterRoutingUseAnyOutput values.
// You can construct a concrete instance of `MultiClusterRoutingUseAnyInput` via:
//
//	MultiClusterRoutingUseAnyArgs{...}
type MultiClusterRoutingUseAnyInput interface {
	pulumi.Input

	ToMultiClusterRoutingUseAnyOutput() MultiClusterRoutingUseAnyOutput
	ToMultiClusterRoutingUseAnyOutputWithContext(context.Context) MultiClusterRoutingUseAnyOutput
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyArgs struct {
	// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
	ClusterIds pulumi.StringArrayInput `pulumi:"clusterIds"`
}

func (MultiClusterRoutingUseAnyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterRoutingUseAny)(nil)).Elem()
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyOutput() MultiClusterRoutingUseAnyOutput {
	return i.ToMultiClusterRoutingUseAnyOutputWithContext(context.Background())
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyOutput)
}

func (i MultiClusterRoutingUseAnyArgs) ToOutput(ctx context.Context) pulumix.Output[MultiClusterRoutingUseAny] {
	return pulumix.Output[MultiClusterRoutingUseAny]{
		OutputState: i.ToMultiClusterRoutingUseAnyOutputWithContext(ctx).OutputState,
	}
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return i.ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Background())
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyOutput).ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx)
}

// MultiClusterRoutingUseAnyPtrInput is an input type that accepts MultiClusterRoutingUseAnyArgs, MultiClusterRoutingUseAnyPtr and MultiClusterRoutingUseAnyPtrOutput values.
// You can construct a concrete instance of `MultiClusterRoutingUseAnyPtrInput` via:
//
//	        MultiClusterRoutingUseAnyArgs{...}
//
//	or:
//
//	        nil
type MultiClusterRoutingUseAnyPtrInput interface {
	pulumi.Input

	ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput
	ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Context) MultiClusterRoutingUseAnyPtrOutput
}

type multiClusterRoutingUseAnyPtrType MultiClusterRoutingUseAnyArgs

func MultiClusterRoutingUseAnyPtr(v *MultiClusterRoutingUseAnyArgs) MultiClusterRoutingUseAnyPtrInput {
	return (*multiClusterRoutingUseAnyPtrType)(v)
}

func (*multiClusterRoutingUseAnyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterRoutingUseAny)(nil)).Elem()
}

func (i *multiClusterRoutingUseAnyPtrType) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return i.ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Background())
}

func (i *multiClusterRoutingUseAnyPtrType) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyPtrOutput)
}

func (i *multiClusterRoutingUseAnyPtrType) ToOutput(ctx context.Context) pulumix.Output[*MultiClusterRoutingUseAny] {
	return pulumix.Output[*MultiClusterRoutingUseAny]{
		OutputState: i.ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx).OutputState,
	}
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyOutput struct{ *pulumi.OutputState }

func (MultiClusterRoutingUseAnyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterRoutingUseAny)(nil)).Elem()
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyOutput() MultiClusterRoutingUseAnyOutput {
	return o
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyOutput {
	return o
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return o.ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Background())
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiClusterRoutingUseAny) *MultiClusterRoutingUseAny {
		return &v
	}).(MultiClusterRoutingUseAnyPtrOutput)
}

func (o MultiClusterRoutingUseAnyOutput) ToOutput(ctx context.Context) pulumix.Output[MultiClusterRoutingUseAny] {
	return pulumix.Output[MultiClusterRoutingUseAny]{
		OutputState: o.OutputState,
	}
}

// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
func (o MultiClusterRoutingUseAnyOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MultiClusterRoutingUseAny) []string { return v.ClusterIds }).(pulumi.StringArrayOutput)
}

type MultiClusterRoutingUseAnyPtrOutput struct{ *pulumi.OutputState }

func (MultiClusterRoutingUseAnyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterRoutingUseAny)(nil)).Elem()
}

func (o MultiClusterRoutingUseAnyPtrOutput) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return o
}

func (o MultiClusterRoutingUseAnyPtrOutput) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return o
}

func (o MultiClusterRoutingUseAnyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MultiClusterRoutingUseAny] {
	return pulumix.Output[*MultiClusterRoutingUseAny]{
		OutputState: o.OutputState,
	}
}

func (o MultiClusterRoutingUseAnyPtrOutput) Elem() MultiClusterRoutingUseAnyOutput {
	return o.ApplyT(func(v *MultiClusterRoutingUseAny) MultiClusterRoutingUseAny {
		if v != nil {
			return *v
		}
		var ret MultiClusterRoutingUseAny
		return ret
	}).(MultiClusterRoutingUseAnyOutput)
}

// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
func (o MultiClusterRoutingUseAnyPtrOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MultiClusterRoutingUseAny) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIds
	}).(pulumi.StringArrayOutput)
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyResponse struct {
	// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
	ClusterIds []string `pulumi:"clusterIds"`
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyResponseOutput struct{ *pulumi.OutputState }

func (MultiClusterRoutingUseAnyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterRoutingUseAnyResponse)(nil)).Elem()
}

func (o MultiClusterRoutingUseAnyResponseOutput) ToMultiClusterRoutingUseAnyResponseOutput() MultiClusterRoutingUseAnyResponseOutput {
	return o
}

func (o MultiClusterRoutingUseAnyResponseOutput) ToMultiClusterRoutingUseAnyResponseOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyResponseOutput {
	return o
}

func (o MultiClusterRoutingUseAnyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MultiClusterRoutingUseAnyResponse] {
	return pulumix.Output[MultiClusterRoutingUseAnyResponse]{
		OutputState: o.OutputState,
	}
}

// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
func (o MultiClusterRoutingUseAnyResponseOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MultiClusterRoutingUseAnyResponse) []string { return v.ClusterIds }).(pulumi.StringArrayOutput)
}

// Information about a table restore.
type RestoreInfoResponse struct {
	// Information about the backup used to restore the table. The backup may no longer exist.
	BackupInfo BackupInfoResponse `pulumi:"backupInfo"`
	// The type of the restore source.
	SourceType string `pulumi:"sourceType"`
}

// Information about a table restore.
type RestoreInfoResponseOutput struct{ *pulumi.OutputState }

func (RestoreInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreInfoResponse)(nil)).Elem()
}

func (o RestoreInfoResponseOutput) ToRestoreInfoResponseOutput() RestoreInfoResponseOutput {
	return o
}

func (o RestoreInfoResponseOutput) ToRestoreInfoResponseOutputWithContext(ctx context.Context) RestoreInfoResponseOutput {
	return o
}

func (o RestoreInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RestoreInfoResponse] {
	return pulumix.Output[RestoreInfoResponse]{
		OutputState: o.OutputState,
	}
}

// Information about the backup used to restore the table. The backup may no longer exist.
func (o RestoreInfoResponseOutput) BackupInfo() BackupInfoResponseOutput {
	return o.ApplyT(func(v RestoreInfoResponse) BackupInfoResponse { return v.BackupInfo }).(BackupInfoResponseOutput)
}

// The type of the restore source.
func (o RestoreInfoResponseOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreInfoResponse) string { return v.SourceType }).(pulumi.StringOutput)
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRouting struct {
	// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites *bool `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId *string `pulumi:"clusterId"`
}

// SingleClusterRoutingInput is an input type that accepts SingleClusterRoutingArgs and SingleClusterRoutingOutput values.
// You can construct a concrete instance of `SingleClusterRoutingInput` via:
//
//	SingleClusterRoutingArgs{...}
type SingleClusterRoutingInput interface {
	pulumi.Input

	ToSingleClusterRoutingOutput() SingleClusterRoutingOutput
	ToSingleClusterRoutingOutputWithContext(context.Context) SingleClusterRoutingOutput
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingArgs struct {
	// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites pulumi.BoolPtrInput `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
}

func (SingleClusterRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleClusterRouting)(nil)).Elem()
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingOutput() SingleClusterRoutingOutput {
	return i.ToSingleClusterRoutingOutputWithContext(context.Background())
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingOutputWithContext(ctx context.Context) SingleClusterRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingOutput)
}

func (i SingleClusterRoutingArgs) ToOutput(ctx context.Context) pulumix.Output[SingleClusterRouting] {
	return pulumix.Output[SingleClusterRouting]{
		OutputState: i.ToSingleClusterRoutingOutputWithContext(ctx).OutputState,
	}
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return i.ToSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingOutput).ToSingleClusterRoutingPtrOutputWithContext(ctx)
}

// SingleClusterRoutingPtrInput is an input type that accepts SingleClusterRoutingArgs, SingleClusterRoutingPtr and SingleClusterRoutingPtrOutput values.
// You can construct a concrete instance of `SingleClusterRoutingPtrInput` via:
//
//	        SingleClusterRoutingArgs{...}
//
//	or:
//
//	        nil
type SingleClusterRoutingPtrInput interface {
	pulumi.Input

	ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput
	ToSingleClusterRoutingPtrOutputWithContext(context.Context) SingleClusterRoutingPtrOutput
}

type singleClusterRoutingPtrType SingleClusterRoutingArgs

func SingleClusterRoutingPtr(v *SingleClusterRoutingArgs) SingleClusterRoutingPtrInput {
	return (*singleClusterRoutingPtrType)(v)
}

func (*singleClusterRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleClusterRouting)(nil)).Elem()
}

func (i *singleClusterRoutingPtrType) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return i.ToSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i *singleClusterRoutingPtrType) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingPtrOutput)
}

func (i *singleClusterRoutingPtrType) ToOutput(ctx context.Context) pulumix.Output[*SingleClusterRouting] {
	return pulumix.Output[*SingleClusterRouting]{
		OutputState: i.ToSingleClusterRoutingPtrOutputWithContext(ctx).OutputState,
	}
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingOutput struct{ *pulumi.OutputState }

func (SingleClusterRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleClusterRouting)(nil)).Elem()
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingOutput() SingleClusterRoutingOutput {
	return o
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingOutputWithContext(ctx context.Context) SingleClusterRoutingOutput {
	return o
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return o.ToSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SingleClusterRouting) *SingleClusterRouting {
		return &v
	}).(SingleClusterRoutingPtrOutput)
}

func (o SingleClusterRoutingOutput) ToOutput(ctx context.Context) pulumix.Output[SingleClusterRouting] {
	return pulumix.Output[SingleClusterRouting]{
		OutputState: o.OutputState,
	}
}

// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o SingleClusterRoutingOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleClusterRouting) *bool { return v.AllowTransactionalWrites }).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o SingleClusterRoutingOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleClusterRouting) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

type SingleClusterRoutingPtrOutput struct{ *pulumi.OutputState }

func (SingleClusterRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleClusterRouting)(nil)).Elem()
}

func (o SingleClusterRoutingPtrOutput) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return o
}

func (o SingleClusterRoutingPtrOutput) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return o
}

func (o SingleClusterRoutingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SingleClusterRouting] {
	return pulumix.Output[*SingleClusterRouting]{
		OutputState: o.OutputState,
	}
}

func (o SingleClusterRoutingPtrOutput) Elem() SingleClusterRoutingOutput {
	return o.ApplyT(func(v *SingleClusterRouting) SingleClusterRouting {
		if v != nil {
			return *v
		}
		var ret SingleClusterRouting
		return ret
	}).(SingleClusterRoutingOutput)
}

// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o SingleClusterRoutingPtrOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SingleClusterRouting) *bool {
		if v == nil {
			return nil
		}
		return v.AllowTransactionalWrites
	}).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o SingleClusterRoutingPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleClusterRouting) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingResponse struct {
	// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites bool `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId string `pulumi:"clusterId"`
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingResponseOutput struct{ *pulumi.OutputState }

func (SingleClusterRoutingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleClusterRoutingResponse)(nil)).Elem()
}

func (o SingleClusterRoutingResponseOutput) ToSingleClusterRoutingResponseOutput() SingleClusterRoutingResponseOutput {
	return o
}

func (o SingleClusterRoutingResponseOutput) ToSingleClusterRoutingResponseOutputWithContext(ctx context.Context) SingleClusterRoutingResponseOutput {
	return o
}

func (o SingleClusterRoutingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SingleClusterRoutingResponse] {
	return pulumix.Output[SingleClusterRoutingResponse]{
		OutputState: o.OutputState,
	}
}

// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o SingleClusterRoutingResponseOutput) AllowTransactionalWrites() pulumi.BoolOutput {
	return o.ApplyT(func(v SingleClusterRoutingResponse) bool { return v.AllowTransactionalWrites }).(pulumi.BoolOutput)
}

// The cluster to which read/write requests should be routed.
func (o SingleClusterRoutingResponseOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v SingleClusterRoutingResponse) string { return v.ClusterId }).(pulumi.StringOutput)
}

// An initial split point for a newly created table.
type Split struct {
	// Row key to use as an initial tablet boundary.
	Key *string `pulumi:"key"`
}

// SplitInput is an input type that accepts SplitArgs and SplitOutput values.
// You can construct a concrete instance of `SplitInput` via:
//
//	SplitArgs{...}
type SplitInput interface {
	pulumi.Input

	ToSplitOutput() SplitOutput
	ToSplitOutputWithContext(context.Context) SplitOutput
}

// An initial split point for a newly created table.
type SplitArgs struct {
	// Row key to use as an initial tablet boundary.
	Key pulumi.StringPtrInput `pulumi:"key"`
}

func (SplitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Split)(nil)).Elem()
}

func (i SplitArgs) ToSplitOutput() SplitOutput {
	return i.ToSplitOutputWithContext(context.Background())
}

func (i SplitArgs) ToSplitOutputWithContext(ctx context.Context) SplitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SplitOutput)
}

func (i SplitArgs) ToOutput(ctx context.Context) pulumix.Output[Split] {
	return pulumix.Output[Split]{
		OutputState: i.ToSplitOutputWithContext(ctx).OutputState,
	}
}

// SplitArrayInput is an input type that accepts SplitArray and SplitArrayOutput values.
// You can construct a concrete instance of `SplitArrayInput` via:
//
//	SplitArray{ SplitArgs{...} }
type SplitArrayInput interface {
	pulumi.Input

	ToSplitArrayOutput() SplitArrayOutput
	ToSplitArrayOutputWithContext(context.Context) SplitArrayOutput
}

type SplitArray []SplitInput

func (SplitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Split)(nil)).Elem()
}

func (i SplitArray) ToSplitArrayOutput() SplitArrayOutput {
	return i.ToSplitArrayOutputWithContext(context.Background())
}

func (i SplitArray) ToSplitArrayOutputWithContext(ctx context.Context) SplitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SplitArrayOutput)
}

func (i SplitArray) ToOutput(ctx context.Context) pulumix.Output[[]Split] {
	return pulumix.Output[[]Split]{
		OutputState: i.ToSplitArrayOutputWithContext(ctx).OutputState,
	}
}

// An initial split point for a newly created table.
type SplitOutput struct{ *pulumi.OutputState }

func (SplitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Split)(nil)).Elem()
}

func (o SplitOutput) ToSplitOutput() SplitOutput {
	return o
}

func (o SplitOutput) ToSplitOutputWithContext(ctx context.Context) SplitOutput {
	return o
}

func (o SplitOutput) ToOutput(ctx context.Context) pulumix.Output[Split] {
	return pulumix.Output[Split]{
		OutputState: o.OutputState,
	}
}

// Row key to use as an initial tablet boundary.
func (o SplitOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Split) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type SplitArrayOutput struct{ *pulumi.OutputState }

func (SplitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Split)(nil)).Elem()
}

func (o SplitArrayOutput) ToSplitArrayOutput() SplitArrayOutput {
	return o
}

func (o SplitArrayOutput) ToSplitArrayOutputWithContext(ctx context.Context) SplitArrayOutput {
	return o
}

func (o SplitArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Split] {
	return pulumix.Output[[]Split]{
		OutputState: o.OutputState,
	}
}

func (o SplitArrayOutput) Index(i pulumi.IntInput) SplitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Split {
		return vs[0].([]Split)[vs[1].(int)]
	}).(SplitOutput)
}

// Standard options for isolating this app profile's traffic from other use cases.
type StandardIsolation struct {
	// The priority of requests sent using this app profile.
	Priority *StandardIsolationPriority `pulumi:"priority"`
}

// StandardIsolationInput is an input type that accepts StandardIsolationArgs and StandardIsolationOutput values.
// You can construct a concrete instance of `StandardIsolationInput` via:
//
//	StandardIsolationArgs{...}
type StandardIsolationInput interface {
	pulumi.Input

	ToStandardIsolationOutput() StandardIsolationOutput
	ToStandardIsolationOutputWithContext(context.Context) StandardIsolationOutput
}

// Standard options for isolating this app profile's traffic from other use cases.
type StandardIsolationArgs struct {
	// The priority of requests sent using this app profile.
	Priority StandardIsolationPriorityPtrInput `pulumi:"priority"`
}

func (StandardIsolationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardIsolation)(nil)).Elem()
}

func (i StandardIsolationArgs) ToStandardIsolationOutput() StandardIsolationOutput {
	return i.ToStandardIsolationOutputWithContext(context.Background())
}

func (i StandardIsolationArgs) ToStandardIsolationOutputWithContext(ctx context.Context) StandardIsolationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardIsolationOutput)
}

func (i StandardIsolationArgs) ToOutput(ctx context.Context) pulumix.Output[StandardIsolation] {
	return pulumix.Output[StandardIsolation]{
		OutputState: i.ToStandardIsolationOutputWithContext(ctx).OutputState,
	}
}

func (i StandardIsolationArgs) ToStandardIsolationPtrOutput() StandardIsolationPtrOutput {
	return i.ToStandardIsolationPtrOutputWithContext(context.Background())
}

func (i StandardIsolationArgs) ToStandardIsolationPtrOutputWithContext(ctx context.Context) StandardIsolationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardIsolationOutput).ToStandardIsolationPtrOutputWithContext(ctx)
}

// StandardIsolationPtrInput is an input type that accepts StandardIsolationArgs, StandardIsolationPtr and StandardIsolationPtrOutput values.
// You can construct a concrete instance of `StandardIsolationPtrInput` via:
//
//	        StandardIsolationArgs{...}
//
//	or:
//
//	        nil
type StandardIsolationPtrInput interface {
	pulumi.Input

	ToStandardIsolationPtrOutput() StandardIsolationPtrOutput
	ToStandardIsolationPtrOutputWithContext(context.Context) StandardIsolationPtrOutput
}

type standardIsolationPtrType StandardIsolationArgs

func StandardIsolationPtr(v *StandardIsolationArgs) StandardIsolationPtrInput {
	return (*standardIsolationPtrType)(v)
}

func (*standardIsolationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardIsolation)(nil)).Elem()
}

func (i *standardIsolationPtrType) ToStandardIsolationPtrOutput() StandardIsolationPtrOutput {
	return i.ToStandardIsolationPtrOutputWithContext(context.Background())
}

func (i *standardIsolationPtrType) ToStandardIsolationPtrOutputWithContext(ctx context.Context) StandardIsolationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardIsolationPtrOutput)
}

func (i *standardIsolationPtrType) ToOutput(ctx context.Context) pulumix.Output[*StandardIsolation] {
	return pulumix.Output[*StandardIsolation]{
		OutputState: i.ToStandardIsolationPtrOutputWithContext(ctx).OutputState,
	}
}

// Standard options for isolating this app profile's traffic from other use cases.
type StandardIsolationOutput struct{ *pulumi.OutputState }

func (StandardIsolationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardIsolation)(nil)).Elem()
}

func (o StandardIsolationOutput) ToStandardIsolationOutput() StandardIsolationOutput {
	return o
}

func (o StandardIsolationOutput) ToStandardIsolationOutputWithContext(ctx context.Context) StandardIsolationOutput {
	return o
}

func (o StandardIsolationOutput) ToStandardIsolationPtrOutput() StandardIsolationPtrOutput {
	return o.ToStandardIsolationPtrOutputWithContext(context.Background())
}

func (o StandardIsolationOutput) ToStandardIsolationPtrOutputWithContext(ctx context.Context) StandardIsolationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardIsolation) *StandardIsolation {
		return &v
	}).(StandardIsolationPtrOutput)
}

func (o StandardIsolationOutput) ToOutput(ctx context.Context) pulumix.Output[StandardIsolation] {
	return pulumix.Output[StandardIsolation]{
		OutputState: o.OutputState,
	}
}

// The priority of requests sent using this app profile.
func (o StandardIsolationOutput) Priority() StandardIsolationPriorityPtrOutput {
	return o.ApplyT(func(v StandardIsolation) *StandardIsolationPriority { return v.Priority }).(StandardIsolationPriorityPtrOutput)
}

type StandardIsolationPtrOutput struct{ *pulumi.OutputState }

func (StandardIsolationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardIsolation)(nil)).Elem()
}

func (o StandardIsolationPtrOutput) ToStandardIsolationPtrOutput() StandardIsolationPtrOutput {
	return o
}

func (o StandardIsolationPtrOutput) ToStandardIsolationPtrOutputWithContext(ctx context.Context) StandardIsolationPtrOutput {
	return o
}

func (o StandardIsolationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StandardIsolation] {
	return pulumix.Output[*StandardIsolation]{
		OutputState: o.OutputState,
	}
}

func (o StandardIsolationPtrOutput) Elem() StandardIsolationOutput {
	return o.ApplyT(func(v *StandardIsolation) StandardIsolation {
		if v != nil {
			return *v
		}
		var ret StandardIsolation
		return ret
	}).(StandardIsolationOutput)
}

// The priority of requests sent using this app profile.
func (o StandardIsolationPtrOutput) Priority() StandardIsolationPriorityPtrOutput {
	return o.ApplyT(func(v *StandardIsolation) *StandardIsolationPriority {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(StandardIsolationPriorityPtrOutput)
}

// Standard options for isolating this app profile's traffic from other use cases.
type StandardIsolationResponse struct {
	// The priority of requests sent using this app profile.
	Priority string `pulumi:"priority"`
}

// Standard options for isolating this app profile's traffic from other use cases.
type StandardIsolationResponseOutput struct{ *pulumi.OutputState }

func (StandardIsolationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardIsolationResponse)(nil)).Elem()
}

func (o StandardIsolationResponseOutput) ToStandardIsolationResponseOutput() StandardIsolationResponseOutput {
	return o
}

func (o StandardIsolationResponseOutput) ToStandardIsolationResponseOutputWithContext(ctx context.Context) StandardIsolationResponseOutput {
	return o
}

func (o StandardIsolationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[StandardIsolationResponse] {
	return pulumix.Output[StandardIsolationResponse]{
		OutputState: o.OutputState,
	}
}

// The priority of requests sent using this app profile.
func (o StandardIsolationResponseOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v StandardIsolationResponse) string { return v.Priority }).(pulumi.StringOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[StatusResponse] {
	return pulumix.Output[StatusResponse]{
		OutputState: o.OutputState,
	}
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Approximate statistics related to a table. These statistics are calculated infrequently, while simultaneously, data in the table can change rapidly. Thus the values reported here (e.g. row count) are very likely out-of date, even the instant they are received in this API. Thus, only treat these values as approximate. IMPORTANT: Everything below is approximate, unless otherwise specified.
type TableStatsResponse struct {
	// How many cells are present per column (column family, column qualifier) combinations, averaged over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in "family:col" and 1 cell in "other:col" (4 cells / 2 columns) * A row with 1 cell in "family:col", 7 cells in "family:other_col", and 7 cells in "other:data" (15 cells / 3 columns) would report (4 + 15)/(2 + 3) = 3.8 in this field.
	AverageCellsPerColumn float64 `pulumi:"averageCellsPerColumn"`
	// How many (column family, column qualifier) combinations are present per row in the table, averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in "family:col" and "other:col" (2 distinct columns) * A row with cells in "family:col", "family:other_col", and "other:data" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this field.
	AverageColumnsPerRow float64 `pulumi:"averageColumnsPerRow"`
	// This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all contents out).
	LogicalDataBytes string `pulumi:"logicalDataBytes"`
	// How many rows are in the table.
	RowCount string `pulumi:"rowCount"`
}

// Approximate statistics related to a table. These statistics are calculated infrequently, while simultaneously, data in the table can change rapidly. Thus the values reported here (e.g. row count) are very likely out-of date, even the instant they are received in this API. Thus, only treat these values as approximate. IMPORTANT: Everything below is approximate, unless otherwise specified.
type TableStatsResponseOutput struct{ *pulumi.OutputState }

func (TableStatsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableStatsResponse)(nil)).Elem()
}

func (o TableStatsResponseOutput) ToTableStatsResponseOutput() TableStatsResponseOutput {
	return o
}

func (o TableStatsResponseOutput) ToTableStatsResponseOutputWithContext(ctx context.Context) TableStatsResponseOutput {
	return o
}

func (o TableStatsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TableStatsResponse] {
	return pulumix.Output[TableStatsResponse]{
		OutputState: o.OutputState,
	}
}

// How many cells are present per column (column family, column qualifier) combinations, averaged over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in "family:col" and 1 cell in "other:col" (4 cells / 2 columns) * A row with 1 cell in "family:col", 7 cells in "family:other_col", and 7 cells in "other:data" (15 cells / 3 columns) would report (4 + 15)/(2 + 3) = 3.8 in this field.
func (o TableStatsResponseOutput) AverageCellsPerColumn() pulumi.Float64Output {
	return o.ApplyT(func(v TableStatsResponse) float64 { return v.AverageCellsPerColumn }).(pulumi.Float64Output)
}

// How many (column family, column qualifier) combinations are present per row in the table, averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in "family:col" and "other:col" (2 distinct columns) * A row with cells in "family:col", "family:other_col", and "other:data" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this field.
func (o TableStatsResponseOutput) AverageColumnsPerRow() pulumi.Float64Output {
	return o.ApplyT(func(v TableStatsResponse) float64 { return v.AverageColumnsPerRow }).(pulumi.Float64Output)
}

// This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all contents out).
func (o TableStatsResponseOutput) LogicalDataBytes() pulumi.StringOutput {
	return o.ApplyT(func(v TableStatsResponse) string { return v.LogicalDataBytes }).(pulumi.StringOutput)
}

// How many rows are in the table.
func (o TableStatsResponseOutput) RowCount() pulumi.StringOutput {
	return o.ApplyT(func(v TableStatsResponse) string { return v.RowCount }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingLimitsInput)(nil)).Elem(), AutoscalingLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingLimitsPtrInput)(nil)).Elem(), AutoscalingLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTargetsInput)(nil)).Elem(), AutoscalingTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTargetsPtrInput)(nil)).Elem(), AutoscalingTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChangeStreamConfigInput)(nil)).Elem(), ChangeStreamConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChangeStreamConfigPtrInput)(nil)).Elem(), ChangeStreamConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAutoscalingConfigInput)(nil)).Elem(), ClusterAutoscalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAutoscalingConfigPtrInput)(nil)).Elem(), ClusterAutoscalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigInput)(nil)).Elem(), ClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigPtrInput)(nil)).Elem(), ClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigPtrInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiClusterRoutingUseAnyInput)(nil)).Elem(), MultiClusterRoutingUseAnyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiClusterRoutingUseAnyPtrInput)(nil)).Elem(), MultiClusterRoutingUseAnyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleClusterRoutingInput)(nil)).Elem(), SingleClusterRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleClusterRoutingPtrInput)(nil)).Elem(), SingleClusterRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SplitInput)(nil)).Elem(), SplitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SplitArrayInput)(nil)).Elem(), SplitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardIsolationInput)(nil)).Elem(), StandardIsolationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardIsolationPtrInput)(nil)).Elem(), StandardIsolationArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoscalingLimitsOutput{})
	pulumi.RegisterOutputType(AutoscalingLimitsPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingLimitsResponseOutput{})
	pulumi.RegisterOutputType(AutoscalingTargetsOutput{})
	pulumi.RegisterOutputType(AutoscalingTargetsPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingTargetsResponseOutput{})
	pulumi.RegisterOutputType(BackupInfoResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ChangeStreamConfigOutput{})
	pulumi.RegisterOutputType(ChangeStreamConfigPtrOutput{})
	pulumi.RegisterOutputType(ChangeStreamConfigResponseOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingConfigOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingConfigResponseOutput{})
	pulumi.RegisterOutputType(ClusterConfigOutput{})
	pulumi.RegisterOutputType(ClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterConfigResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigResponseOutput{})
	pulumi.RegisterOutputType(EncryptionInfoResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(MultiClusterRoutingUseAnyOutput{})
	pulumi.RegisterOutputType(MultiClusterRoutingUseAnyPtrOutput{})
	pulumi.RegisterOutputType(MultiClusterRoutingUseAnyResponseOutput{})
	pulumi.RegisterOutputType(RestoreInfoResponseOutput{})
	pulumi.RegisterOutputType(SingleClusterRoutingOutput{})
	pulumi.RegisterOutputType(SingleClusterRoutingPtrOutput{})
	pulumi.RegisterOutputType(SingleClusterRoutingResponseOutput{})
	pulumi.RegisterOutputType(SplitOutput{})
	pulumi.RegisterOutputType(SplitArrayOutput{})
	pulumi.RegisterOutputType(StandardIsolationOutput{})
	pulumi.RegisterOutputType(StandardIsolationPtrOutput{})
	pulumi.RegisterOutputType(StandardIsolationResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(TableStatsResponseOutput{})
}
