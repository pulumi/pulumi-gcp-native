// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Information about a backup.
type BackupInfo struct {
	// Output only. Name of the backup.
	Backup *string `pulumi:"backup"`
	// Output only. This time that the backup was finished. Row data in the backup will be no newer than this timestamp.
	EndTime *string `pulumi:"endTime"`
	// Output only. Name of the table the backup was created from.
	SourceTable *string `pulumi:"sourceTable"`
	// Output only. The time that the backup was started. Row data in the backup will be no older than this timestamp.
	StartTime *string `pulumi:"startTime"`
}

// BackupInfoInput is an input type that accepts BackupInfoArgs and BackupInfoOutput values.
// You can construct a concrete instance of `BackupInfoInput` via:
//
//          BackupInfoArgs{...}
type BackupInfoInput interface {
	pulumi.Input

	ToBackupInfoOutput() BackupInfoOutput
	ToBackupInfoOutputWithContext(context.Context) BackupInfoOutput
}

// Information about a backup.
type BackupInfoArgs struct {
	// Output only. Name of the backup.
	Backup pulumi.StringPtrInput `pulumi:"backup"`
	// Output only. This time that the backup was finished. Row data in the backup will be no newer than this timestamp.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Output only. Name of the table the backup was created from.
	SourceTable pulumi.StringPtrInput `pulumi:"sourceTable"`
	// Output only. The time that the backup was started. Row data in the backup will be no older than this timestamp.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (BackupInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupInfo)(nil)).Elem()
}

func (i BackupInfoArgs) ToBackupInfoOutput() BackupInfoOutput {
	return i.ToBackupInfoOutputWithContext(context.Background())
}

func (i BackupInfoArgs) ToBackupInfoOutputWithContext(ctx context.Context) BackupInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInfoOutput)
}

func (i BackupInfoArgs) ToBackupInfoPtrOutput() BackupInfoPtrOutput {
	return i.ToBackupInfoPtrOutputWithContext(context.Background())
}

func (i BackupInfoArgs) ToBackupInfoPtrOutputWithContext(ctx context.Context) BackupInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInfoOutput).ToBackupInfoPtrOutputWithContext(ctx)
}

// BackupInfoPtrInput is an input type that accepts BackupInfoArgs, BackupInfoPtr and BackupInfoPtrOutput values.
// You can construct a concrete instance of `BackupInfoPtrInput` via:
//
//          BackupInfoArgs{...}
//
//  or:
//
//          nil
type BackupInfoPtrInput interface {
	pulumi.Input

	ToBackupInfoPtrOutput() BackupInfoPtrOutput
	ToBackupInfoPtrOutputWithContext(context.Context) BackupInfoPtrOutput
}

type backupInfoPtrType BackupInfoArgs

func BackupInfoPtr(v *BackupInfoArgs) BackupInfoPtrInput {
	return (*backupInfoPtrType)(v)
}

func (*backupInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupInfo)(nil)).Elem()
}

func (i *backupInfoPtrType) ToBackupInfoPtrOutput() BackupInfoPtrOutput {
	return i.ToBackupInfoPtrOutputWithContext(context.Background())
}

func (i *backupInfoPtrType) ToBackupInfoPtrOutputWithContext(ctx context.Context) BackupInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInfoPtrOutput)
}

// Information about a backup.
type BackupInfoOutput struct{ *pulumi.OutputState }

func (BackupInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupInfo)(nil)).Elem()
}

func (o BackupInfoOutput) ToBackupInfoOutput() BackupInfoOutput {
	return o
}

func (o BackupInfoOutput) ToBackupInfoOutputWithContext(ctx context.Context) BackupInfoOutput {
	return o
}

func (o BackupInfoOutput) ToBackupInfoPtrOutput() BackupInfoPtrOutput {
	return o.ToBackupInfoPtrOutputWithContext(context.Background())
}

func (o BackupInfoOutput) ToBackupInfoPtrOutputWithContext(ctx context.Context) BackupInfoPtrOutput {
	return o.ApplyT(func(v BackupInfo) *BackupInfo {
		return &v
	}).(BackupInfoPtrOutput)
}

// Output only. Name of the backup.
func (o BackupInfoOutput) Backup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupInfo) *string { return v.Backup }).(pulumi.StringPtrOutput)
}

// Output only. This time that the backup was finished. Row data in the backup will be no newer than this timestamp.
func (o BackupInfoOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupInfo) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Output only. Name of the table the backup was created from.
func (o BackupInfoOutput) SourceTable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupInfo) *string { return v.SourceTable }).(pulumi.StringPtrOutput)
}

// Output only. The time that the backup was started. Row data in the backup will be no older than this timestamp.
func (o BackupInfoOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupInfo) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type BackupInfoPtrOutput struct{ *pulumi.OutputState }

func (BackupInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupInfo)(nil)).Elem()
}

func (o BackupInfoPtrOutput) ToBackupInfoPtrOutput() BackupInfoPtrOutput {
	return o
}

func (o BackupInfoPtrOutput) ToBackupInfoPtrOutputWithContext(ctx context.Context) BackupInfoPtrOutput {
	return o
}

func (o BackupInfoPtrOutput) Elem() BackupInfoOutput {
	return o.ApplyT(func(v *BackupInfo) BackupInfo { return *v }).(BackupInfoOutput)
}

// Output only. Name of the backup.
func (o BackupInfoPtrOutput) Backup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupInfo) *string {
		if v == nil {
			return nil
		}
		return v.Backup
	}).(pulumi.StringPtrOutput)
}

// Output only. This time that the backup was finished. Row data in the backup will be no newer than this timestamp.
func (o BackupInfoPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupInfo) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Output only. Name of the table the backup was created from.
func (o BackupInfoPtrOutput) SourceTable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceTable
	}).(pulumi.StringPtrOutput)
}

// Output only. The time that the backup was started. Row data in the backup will be no older than this timestamp.
func (o BackupInfoPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupInfo) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfig struct {
	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigInput is an input type that accepts EncryptionConfigArgs and EncryptionConfigOutput values.
// You can construct a concrete instance of `EncryptionConfigInput` via:
//
//          EncryptionConfigArgs{...}
type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(context.Context) EncryptionConfigOutput
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigArgs struct {
	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput).ToEncryptionConfigPtrOutputWithContext(ctx)
}

// EncryptionConfigPtrInput is an input type that accepts EncryptionConfigArgs, EncryptionConfigPtr and EncryptionConfigPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigPtrInput` via:
//
//          EncryptionConfigArgs{...}
//
//  or:
//
//          nil
type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func EncryptionConfigPtr(v *EncryptionConfigArgs) EncryptionConfigPtrInput {
	return (*encryptionConfigPtrType)(v)
}

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
func (o EncryptionConfigOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig { return *v }).(EncryptionConfigOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
func (o EncryptionConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Encryption information for a given resource. If this resource is protected with customer managed encryption, the in-use Cloud Key Management Service (Cloud KMS) key version is specified along with its status.
type EncryptionInfo struct {
	// Output only. The status of encrypt/decrypt calls on underlying data for this resource. Regardless of status, the existing data is always encrypted at rest.
	EncryptionStatus *Status `pulumi:"encryptionStatus"`
	// Output only. The type of encryption used to protect this resource.
	EncryptionType *string `pulumi:"encryptionType"`
	// Output only. The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.
	KmsKeyVersion *string `pulumi:"kmsKeyVersion"`
}

// EncryptionInfoInput is an input type that accepts EncryptionInfoArgs and EncryptionInfoOutput values.
// You can construct a concrete instance of `EncryptionInfoInput` via:
//
//          EncryptionInfoArgs{...}
type EncryptionInfoInput interface {
	pulumi.Input

	ToEncryptionInfoOutput() EncryptionInfoOutput
	ToEncryptionInfoOutputWithContext(context.Context) EncryptionInfoOutput
}

// Encryption information for a given resource. If this resource is protected with customer managed encryption, the in-use Cloud Key Management Service (Cloud KMS) key version is specified along with its status.
type EncryptionInfoArgs struct {
	// Output only. The status of encrypt/decrypt calls on underlying data for this resource. Regardless of status, the existing data is always encrypted at rest.
	EncryptionStatus StatusPtrInput `pulumi:"encryptionStatus"`
	// Output only. The type of encryption used to protect this resource.
	EncryptionType pulumi.StringPtrInput `pulumi:"encryptionType"`
	// Output only. The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.
	KmsKeyVersion pulumi.StringPtrInput `pulumi:"kmsKeyVersion"`
}

func (EncryptionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionInfo)(nil)).Elem()
}

func (i EncryptionInfoArgs) ToEncryptionInfoOutput() EncryptionInfoOutput {
	return i.ToEncryptionInfoOutputWithContext(context.Background())
}

func (i EncryptionInfoArgs) ToEncryptionInfoOutputWithContext(ctx context.Context) EncryptionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionInfoOutput)
}

func (i EncryptionInfoArgs) ToEncryptionInfoPtrOutput() EncryptionInfoPtrOutput {
	return i.ToEncryptionInfoPtrOutputWithContext(context.Background())
}

func (i EncryptionInfoArgs) ToEncryptionInfoPtrOutputWithContext(ctx context.Context) EncryptionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionInfoOutput).ToEncryptionInfoPtrOutputWithContext(ctx)
}

// EncryptionInfoPtrInput is an input type that accepts EncryptionInfoArgs, EncryptionInfoPtr and EncryptionInfoPtrOutput values.
// You can construct a concrete instance of `EncryptionInfoPtrInput` via:
//
//          EncryptionInfoArgs{...}
//
//  or:
//
//          nil
type EncryptionInfoPtrInput interface {
	pulumi.Input

	ToEncryptionInfoPtrOutput() EncryptionInfoPtrOutput
	ToEncryptionInfoPtrOutputWithContext(context.Context) EncryptionInfoPtrOutput
}

type encryptionInfoPtrType EncryptionInfoArgs

func EncryptionInfoPtr(v *EncryptionInfoArgs) EncryptionInfoPtrInput {
	return (*encryptionInfoPtrType)(v)
}

func (*encryptionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionInfo)(nil)).Elem()
}

func (i *encryptionInfoPtrType) ToEncryptionInfoPtrOutput() EncryptionInfoPtrOutput {
	return i.ToEncryptionInfoPtrOutputWithContext(context.Background())
}

func (i *encryptionInfoPtrType) ToEncryptionInfoPtrOutputWithContext(ctx context.Context) EncryptionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionInfoPtrOutput)
}

// Encryption information for a given resource. If this resource is protected with customer managed encryption, the in-use Cloud Key Management Service (Cloud KMS) key version is specified along with its status.
type EncryptionInfoOutput struct{ *pulumi.OutputState }

func (EncryptionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionInfo)(nil)).Elem()
}

func (o EncryptionInfoOutput) ToEncryptionInfoOutput() EncryptionInfoOutput {
	return o
}

func (o EncryptionInfoOutput) ToEncryptionInfoOutputWithContext(ctx context.Context) EncryptionInfoOutput {
	return o
}

func (o EncryptionInfoOutput) ToEncryptionInfoPtrOutput() EncryptionInfoPtrOutput {
	return o.ToEncryptionInfoPtrOutputWithContext(context.Background())
}

func (o EncryptionInfoOutput) ToEncryptionInfoPtrOutputWithContext(ctx context.Context) EncryptionInfoPtrOutput {
	return o.ApplyT(func(v EncryptionInfo) *EncryptionInfo {
		return &v
	}).(EncryptionInfoPtrOutput)
}

// Output only. The status of encrypt/decrypt calls on underlying data for this resource. Regardless of status, the existing data is always encrypted at rest.
func (o EncryptionInfoOutput) EncryptionStatus() StatusPtrOutput {
	return o.ApplyT(func(v EncryptionInfo) *Status { return v.EncryptionStatus }).(StatusPtrOutput)
}

// Output only. The type of encryption used to protect this resource.
func (o EncryptionInfoOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionInfo) *string { return v.EncryptionType }).(pulumi.StringPtrOutput)
}

// Output only. The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.
func (o EncryptionInfoOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionInfo) *string { return v.KmsKeyVersion }).(pulumi.StringPtrOutput)
}

type EncryptionInfoPtrOutput struct{ *pulumi.OutputState }

func (EncryptionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionInfo)(nil)).Elem()
}

func (o EncryptionInfoPtrOutput) ToEncryptionInfoPtrOutput() EncryptionInfoPtrOutput {
	return o
}

func (o EncryptionInfoPtrOutput) ToEncryptionInfoPtrOutputWithContext(ctx context.Context) EncryptionInfoPtrOutput {
	return o
}

func (o EncryptionInfoPtrOutput) Elem() EncryptionInfoOutput {
	return o.ApplyT(func(v *EncryptionInfo) EncryptionInfo { return *v }).(EncryptionInfoOutput)
}

// Output only. The status of encrypt/decrypt calls on underlying data for this resource. Regardless of status, the existing data is always encrypted at rest.
func (o EncryptionInfoPtrOutput) EncryptionStatus() StatusPtrOutput {
	return o.ApplyT(func(v *EncryptionInfo) *Status {
		if v == nil {
			return nil
		}
		return v.EncryptionStatus
	}).(StatusPtrOutput)
}

// Output only. The type of encryption used to protect this resource.
func (o EncryptionInfoPtrOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionInfo) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionType
	}).(pulumi.StringPtrOutput)
}

// Output only. The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.
func (o EncryptionInfoPtrOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionInfo) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyVersion
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// A collection of Bigtable Tables and the resources that serve them. All tables in an instance are served from all Clusters in the instance.
type InstanceType struct {
	// Required. The descriptive name for this instance as it appears in UIs. Can be changed at any time, but should be kept globally unique to avoid confusion.
	DisplayName *string `pulumi:"displayName"`
	// Required. Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. They can be used to filter resources and aggregate metrics. * Label keys must be between 1 and 63 characters long and must conform to the regular expression: `\p{Ll}\p{Lo}{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`. * No more than 64 labels can be associated with a given resource. * Keys and values must both be under 128 bytes.
	Labels map[string]string `pulumi:"labels"`
	// The unique name of the instance. Values are of the form `projects/{project}/instances/a-z+[a-z0-9]`.
	Name *string `pulumi:"name"`
	// Output only. The current state of the instance.
	State *string `pulumi:"state"`
	// Required. The type of the instance. Defaults to `PRODUCTION`.
	Type *string `pulumi:"type"`
}

// InstanceTypeInput is an input type that accepts InstanceTypeArgs and InstanceTypeOutput values.
// You can construct a concrete instance of `InstanceTypeInput` via:
//
//          InstanceTypeArgs{...}
type InstanceTypeInput interface {
	pulumi.Input

	ToInstanceTypeOutput() InstanceTypeOutput
	ToInstanceTypeOutputWithContext(context.Context) InstanceTypeOutput
}

// A collection of Bigtable Tables and the resources that serve them. All tables in an instance are served from all Clusters in the instance.
type InstanceTypeArgs struct {
	// Required. The descriptive name for this instance as it appears in UIs. Can be changed at any time, but should be kept globally unique to avoid confusion.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Required. Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. They can be used to filter resources and aggregate metrics. * Label keys must be between 1 and 63 characters long and must conform to the regular expression: `\p{Ll}\p{Lo}{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`. * No more than 64 labels can be associated with a given resource. * Keys and values must both be under 128 bytes.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The unique name of the instance. Values are of the form `projects/{project}/instances/a-z+[a-z0-9]`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Output only. The current state of the instance.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Required. The type of the instance. Defaults to `PRODUCTION`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceType)(nil)).Elem()
}

func (i InstanceTypeArgs) ToInstanceTypeOutput() InstanceTypeOutput {
	return i.ToInstanceTypeOutputWithContext(context.Background())
}

func (i InstanceTypeArgs) ToInstanceTypeOutputWithContext(ctx context.Context) InstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeOutput)
}

func (i InstanceTypeArgs) ToInstanceTypePtrOutput() InstanceTypePtrOutput {
	return i.ToInstanceTypePtrOutputWithContext(context.Background())
}

func (i InstanceTypeArgs) ToInstanceTypePtrOutputWithContext(ctx context.Context) InstanceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeOutput).ToInstanceTypePtrOutputWithContext(ctx)
}

// InstanceTypePtrInput is an input type that accepts InstanceTypeArgs, InstanceTypePtr and InstanceTypePtrOutput values.
// You can construct a concrete instance of `InstanceTypePtrInput` via:
//
//          InstanceTypeArgs{...}
//
//  or:
//
//          nil
type InstanceTypePtrInput interface {
	pulumi.Input

	ToInstanceTypePtrOutput() InstanceTypePtrOutput
	ToInstanceTypePtrOutputWithContext(context.Context) InstanceTypePtrOutput
}

type instanceTypePtrType InstanceTypeArgs

func InstanceTypePtr(v *InstanceTypeArgs) InstanceTypePtrInput {
	return (*instanceTypePtrType)(v)
}

func (*instanceTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceType)(nil)).Elem()
}

func (i *instanceTypePtrType) ToInstanceTypePtrOutput() InstanceTypePtrOutput {
	return i.ToInstanceTypePtrOutputWithContext(context.Background())
}

func (i *instanceTypePtrType) ToInstanceTypePtrOutputWithContext(ctx context.Context) InstanceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypePtrOutput)
}

// A collection of Bigtable Tables and the resources that serve them. All tables in an instance are served from all Clusters in the instance.
type InstanceTypeOutput struct{ *pulumi.OutputState }

func (InstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceType)(nil)).Elem()
}

func (o InstanceTypeOutput) ToInstanceTypeOutput() InstanceTypeOutput {
	return o
}

func (o InstanceTypeOutput) ToInstanceTypeOutputWithContext(ctx context.Context) InstanceTypeOutput {
	return o
}

func (o InstanceTypeOutput) ToInstanceTypePtrOutput() InstanceTypePtrOutput {
	return o.ToInstanceTypePtrOutputWithContext(context.Background())
}

func (o InstanceTypeOutput) ToInstanceTypePtrOutputWithContext(ctx context.Context) InstanceTypePtrOutput {
	return o.ApplyT(func(v InstanceType) *InstanceType {
		return &v
	}).(InstanceTypePtrOutput)
}

// Required. The descriptive name for this instance as it appears in UIs. Can be changed at any time, but should be kept globally unique to avoid confusion.
func (o InstanceTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceType) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Required. Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. They can be used to filter resources and aggregate metrics. * Label keys must be between 1 and 63 characters long and must conform to the regular expression: `\p{Ll}\p{Lo}{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`. * No more than 64 labels can be associated with a given resource. * Keys and values must both be under 128 bytes.
func (o InstanceTypeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceType) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The unique name of the instance. Values are of the form `projects/{project}/instances/a-z+[a-z0-9]`.
func (o InstanceTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Output only. The current state of the instance.
func (o InstanceTypeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceType) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Required. The type of the instance. Defaults to `PRODUCTION`.
func (o InstanceTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InstanceTypePtrOutput struct{ *pulumi.OutputState }

func (InstanceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceType)(nil)).Elem()
}

func (o InstanceTypePtrOutput) ToInstanceTypePtrOutput() InstanceTypePtrOutput {
	return o
}

func (o InstanceTypePtrOutput) ToInstanceTypePtrOutputWithContext(ctx context.Context) InstanceTypePtrOutput {
	return o
}

func (o InstanceTypePtrOutput) Elem() InstanceTypeOutput {
	return o.ApplyT(func(v *InstanceType) InstanceType { return *v }).(InstanceTypeOutput)
}

// Required. The descriptive name for this instance as it appears in UIs. Can be changed at any time, but should be kept globally unique to avoid confusion.
func (o InstanceTypePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceType) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Required. Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. They can be used to filter resources and aggregate metrics. * Label keys must be between 1 and 63 characters long and must conform to the regular expression: `\p{Ll}\p{Lo}{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`. * No more than 64 labels can be associated with a given resource. * Keys and values must both be under 128 bytes.
func (o InstanceTypePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceType) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The unique name of the instance. Values are of the form `projects/{project}/instances/a-z+[a-z0-9]`.
func (o InstanceTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Output only. The current state of the instance.
func (o InstanceTypePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceType) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Required. The type of the instance. Defaults to `PRODUCTION`.
func (o InstanceTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceType) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAny struct {
}

// MultiClusterRoutingUseAnyInput is an input type that accepts MultiClusterRoutingUseAnyArgs and MultiClusterRoutingUseAnyOutput values.
// You can construct a concrete instance of `MultiClusterRoutingUseAnyInput` via:
//
//          MultiClusterRoutingUseAnyArgs{...}
type MultiClusterRoutingUseAnyInput interface {
	pulumi.Input

	ToMultiClusterRoutingUseAnyOutput() MultiClusterRoutingUseAnyOutput
	ToMultiClusterRoutingUseAnyOutputWithContext(context.Context) MultiClusterRoutingUseAnyOutput
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyArgs struct {
}

func (MultiClusterRoutingUseAnyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterRoutingUseAny)(nil)).Elem()
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyOutput() MultiClusterRoutingUseAnyOutput {
	return i.ToMultiClusterRoutingUseAnyOutputWithContext(context.Background())
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyOutput)
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return i.ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Background())
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyOutput).ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx)
}

// MultiClusterRoutingUseAnyPtrInput is an input type that accepts MultiClusterRoutingUseAnyArgs, MultiClusterRoutingUseAnyPtr and MultiClusterRoutingUseAnyPtrOutput values.
// You can construct a concrete instance of `MultiClusterRoutingUseAnyPtrInput` via:
//
//          MultiClusterRoutingUseAnyArgs{...}
//
//  or:
//
//          nil
type MultiClusterRoutingUseAnyPtrInput interface {
	pulumi.Input

	ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput
	ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Context) MultiClusterRoutingUseAnyPtrOutput
}

type multiClusterRoutingUseAnyPtrType MultiClusterRoutingUseAnyArgs

func MultiClusterRoutingUseAnyPtr(v *MultiClusterRoutingUseAnyArgs) MultiClusterRoutingUseAnyPtrInput {
	return (*multiClusterRoutingUseAnyPtrType)(v)
}

func (*multiClusterRoutingUseAnyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterRoutingUseAny)(nil)).Elem()
}

func (i *multiClusterRoutingUseAnyPtrType) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return i.ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Background())
}

func (i *multiClusterRoutingUseAnyPtrType) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyPtrOutput)
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyOutput struct{ *pulumi.OutputState }

func (MultiClusterRoutingUseAnyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterRoutingUseAny)(nil)).Elem()
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyOutput() MultiClusterRoutingUseAnyOutput {
	return o
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyOutput {
	return o
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return o.ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Background())
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return o.ApplyT(func(v MultiClusterRoutingUseAny) *MultiClusterRoutingUseAny {
		return &v
	}).(MultiClusterRoutingUseAnyPtrOutput)
}

type MultiClusterRoutingUseAnyPtrOutput struct{ *pulumi.OutputState }

func (MultiClusterRoutingUseAnyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterRoutingUseAny)(nil)).Elem()
}

func (o MultiClusterRoutingUseAnyPtrOutput) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return o
}

func (o MultiClusterRoutingUseAnyPtrOutput) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return o
}

func (o MultiClusterRoutingUseAnyPtrOutput) Elem() MultiClusterRoutingUseAnyOutput {
	return o.ApplyT(func(v *MultiClusterRoutingUseAny) MultiClusterRoutingUseAny { return *v }).(MultiClusterRoutingUseAnyOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []AuditConfig `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs AuditConfigArrayInput `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v Policy) []AuditConfig { return v.AuditConfigs }).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyPtrOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v *Policy) []AuditConfig {
		if v == nil {
			return nil
		}
		return v.AuditConfigs
	}).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// Information about a table restore.
type RestoreInfo struct {
	// Information about the backup used to restore the table. The backup may no longer exist.
	BackupInfo *BackupInfo `pulumi:"backupInfo"`
	// The type of the restore source.
	SourceType *string `pulumi:"sourceType"`
}

// RestoreInfoInput is an input type that accepts RestoreInfoArgs and RestoreInfoOutput values.
// You can construct a concrete instance of `RestoreInfoInput` via:
//
//          RestoreInfoArgs{...}
type RestoreInfoInput interface {
	pulumi.Input

	ToRestoreInfoOutput() RestoreInfoOutput
	ToRestoreInfoOutputWithContext(context.Context) RestoreInfoOutput
}

// Information about a table restore.
type RestoreInfoArgs struct {
	// Information about the backup used to restore the table. The backup may no longer exist.
	BackupInfo BackupInfoPtrInput `pulumi:"backupInfo"`
	// The type of the restore source.
	SourceType pulumi.StringPtrInput `pulumi:"sourceType"`
}

func (RestoreInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreInfo)(nil)).Elem()
}

func (i RestoreInfoArgs) ToRestoreInfoOutput() RestoreInfoOutput {
	return i.ToRestoreInfoOutputWithContext(context.Background())
}

func (i RestoreInfoArgs) ToRestoreInfoOutputWithContext(ctx context.Context) RestoreInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreInfoOutput)
}

func (i RestoreInfoArgs) ToRestoreInfoPtrOutput() RestoreInfoPtrOutput {
	return i.ToRestoreInfoPtrOutputWithContext(context.Background())
}

func (i RestoreInfoArgs) ToRestoreInfoPtrOutputWithContext(ctx context.Context) RestoreInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreInfoOutput).ToRestoreInfoPtrOutputWithContext(ctx)
}

// RestoreInfoPtrInput is an input type that accepts RestoreInfoArgs, RestoreInfoPtr and RestoreInfoPtrOutput values.
// You can construct a concrete instance of `RestoreInfoPtrInput` via:
//
//          RestoreInfoArgs{...}
//
//  or:
//
//          nil
type RestoreInfoPtrInput interface {
	pulumi.Input

	ToRestoreInfoPtrOutput() RestoreInfoPtrOutput
	ToRestoreInfoPtrOutputWithContext(context.Context) RestoreInfoPtrOutput
}

type restoreInfoPtrType RestoreInfoArgs

func RestoreInfoPtr(v *RestoreInfoArgs) RestoreInfoPtrInput {
	return (*restoreInfoPtrType)(v)
}

func (*restoreInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreInfo)(nil)).Elem()
}

func (i *restoreInfoPtrType) ToRestoreInfoPtrOutput() RestoreInfoPtrOutput {
	return i.ToRestoreInfoPtrOutputWithContext(context.Background())
}

func (i *restoreInfoPtrType) ToRestoreInfoPtrOutputWithContext(ctx context.Context) RestoreInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreInfoPtrOutput)
}

// Information about a table restore.
type RestoreInfoOutput struct{ *pulumi.OutputState }

func (RestoreInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreInfo)(nil)).Elem()
}

func (o RestoreInfoOutput) ToRestoreInfoOutput() RestoreInfoOutput {
	return o
}

func (o RestoreInfoOutput) ToRestoreInfoOutputWithContext(ctx context.Context) RestoreInfoOutput {
	return o
}

func (o RestoreInfoOutput) ToRestoreInfoPtrOutput() RestoreInfoPtrOutput {
	return o.ToRestoreInfoPtrOutputWithContext(context.Background())
}

func (o RestoreInfoOutput) ToRestoreInfoPtrOutputWithContext(ctx context.Context) RestoreInfoPtrOutput {
	return o.ApplyT(func(v RestoreInfo) *RestoreInfo {
		return &v
	}).(RestoreInfoPtrOutput)
}

// Information about the backup used to restore the table. The backup may no longer exist.
func (o RestoreInfoOutput) BackupInfo() BackupInfoPtrOutput {
	return o.ApplyT(func(v RestoreInfo) *BackupInfo { return v.BackupInfo }).(BackupInfoPtrOutput)
}

// The type of the restore source.
func (o RestoreInfoOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreInfo) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

type RestoreInfoPtrOutput struct{ *pulumi.OutputState }

func (RestoreInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreInfo)(nil)).Elem()
}

func (o RestoreInfoPtrOutput) ToRestoreInfoPtrOutput() RestoreInfoPtrOutput {
	return o
}

func (o RestoreInfoPtrOutput) ToRestoreInfoPtrOutputWithContext(ctx context.Context) RestoreInfoPtrOutput {
	return o
}

func (o RestoreInfoPtrOutput) Elem() RestoreInfoOutput {
	return o.ApplyT(func(v *RestoreInfo) RestoreInfo { return *v }).(RestoreInfoOutput)
}

// Information about the backup used to restore the table. The backup may no longer exist.
func (o RestoreInfoPtrOutput) BackupInfo() BackupInfoPtrOutput {
	return o.ApplyT(func(v *RestoreInfo) *BackupInfo {
		if v == nil {
			return nil
		}
		return v.BackupInfo
	}).(BackupInfoPtrOutput)
}

// The type of the restore source.
func (o RestoreInfoPtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestoreInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceType
	}).(pulumi.StringPtrOutput)
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRouting struct {
	// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites *bool `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId *string `pulumi:"clusterId"`
}

// SingleClusterRoutingInput is an input type that accepts SingleClusterRoutingArgs and SingleClusterRoutingOutput values.
// You can construct a concrete instance of `SingleClusterRoutingInput` via:
//
//          SingleClusterRoutingArgs{...}
type SingleClusterRoutingInput interface {
	pulumi.Input

	ToSingleClusterRoutingOutput() SingleClusterRoutingOutput
	ToSingleClusterRoutingOutputWithContext(context.Context) SingleClusterRoutingOutput
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingArgs struct {
	// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites pulumi.BoolPtrInput `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
}

func (SingleClusterRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleClusterRouting)(nil)).Elem()
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingOutput() SingleClusterRoutingOutput {
	return i.ToSingleClusterRoutingOutputWithContext(context.Background())
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingOutputWithContext(ctx context.Context) SingleClusterRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingOutput)
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return i.ToSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingOutput).ToSingleClusterRoutingPtrOutputWithContext(ctx)
}

// SingleClusterRoutingPtrInput is an input type that accepts SingleClusterRoutingArgs, SingleClusterRoutingPtr and SingleClusterRoutingPtrOutput values.
// You can construct a concrete instance of `SingleClusterRoutingPtrInput` via:
//
//          SingleClusterRoutingArgs{...}
//
//  or:
//
//          nil
type SingleClusterRoutingPtrInput interface {
	pulumi.Input

	ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput
	ToSingleClusterRoutingPtrOutputWithContext(context.Context) SingleClusterRoutingPtrOutput
}

type singleClusterRoutingPtrType SingleClusterRoutingArgs

func SingleClusterRoutingPtr(v *SingleClusterRoutingArgs) SingleClusterRoutingPtrInput {
	return (*singleClusterRoutingPtrType)(v)
}

func (*singleClusterRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleClusterRouting)(nil)).Elem()
}

func (i *singleClusterRoutingPtrType) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return i.ToSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i *singleClusterRoutingPtrType) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingPtrOutput)
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingOutput struct{ *pulumi.OutputState }

func (SingleClusterRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleClusterRouting)(nil)).Elem()
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingOutput() SingleClusterRoutingOutput {
	return o
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingOutputWithContext(ctx context.Context) SingleClusterRoutingOutput {
	return o
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return o.ToSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return o.ApplyT(func(v SingleClusterRouting) *SingleClusterRouting {
		return &v
	}).(SingleClusterRoutingPtrOutput)
}

// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o SingleClusterRoutingOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleClusterRouting) *bool { return v.AllowTransactionalWrites }).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o SingleClusterRoutingOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleClusterRouting) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

type SingleClusterRoutingPtrOutput struct{ *pulumi.OutputState }

func (SingleClusterRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleClusterRouting)(nil)).Elem()
}

func (o SingleClusterRoutingPtrOutput) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return o
}

func (o SingleClusterRoutingPtrOutput) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return o
}

func (o SingleClusterRoutingPtrOutput) Elem() SingleClusterRoutingOutput {
	return o.ApplyT(func(v *SingleClusterRouting) SingleClusterRouting { return *v }).(SingleClusterRoutingOutput)
}

// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o SingleClusterRoutingPtrOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SingleClusterRouting) *bool {
		if v == nil {
			return nil
		}
		return v.AllowTransactionalWrites
	}).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o SingleClusterRoutingPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleClusterRouting) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// An initial split point for a newly created table.
type Split struct {
	// Row key to use as an initial tablet boundary.
	Key *string `pulumi:"key"`
}

// SplitInput is an input type that accepts SplitArgs and SplitOutput values.
// You can construct a concrete instance of `SplitInput` via:
//
//          SplitArgs{...}
type SplitInput interface {
	pulumi.Input

	ToSplitOutput() SplitOutput
	ToSplitOutputWithContext(context.Context) SplitOutput
}

// An initial split point for a newly created table.
type SplitArgs struct {
	// Row key to use as an initial tablet boundary.
	Key pulumi.StringPtrInput `pulumi:"key"`
}

func (SplitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Split)(nil)).Elem()
}

func (i SplitArgs) ToSplitOutput() SplitOutput {
	return i.ToSplitOutputWithContext(context.Background())
}

func (i SplitArgs) ToSplitOutputWithContext(ctx context.Context) SplitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SplitOutput)
}

// SplitArrayInput is an input type that accepts SplitArray and SplitArrayOutput values.
// You can construct a concrete instance of `SplitArrayInput` via:
//
//          SplitArray{ SplitArgs{...} }
type SplitArrayInput interface {
	pulumi.Input

	ToSplitArrayOutput() SplitArrayOutput
	ToSplitArrayOutputWithContext(context.Context) SplitArrayOutput
}

type SplitArray []SplitInput

func (SplitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Split)(nil)).Elem()
}

func (i SplitArray) ToSplitArrayOutput() SplitArrayOutput {
	return i.ToSplitArrayOutputWithContext(context.Background())
}

func (i SplitArray) ToSplitArrayOutputWithContext(ctx context.Context) SplitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SplitArrayOutput)
}

// An initial split point for a newly created table.
type SplitOutput struct{ *pulumi.OutputState }

func (SplitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Split)(nil)).Elem()
}

func (o SplitOutput) ToSplitOutput() SplitOutput {
	return o
}

func (o SplitOutput) ToSplitOutputWithContext(ctx context.Context) SplitOutput {
	return o
}

// Row key to use as an initial tablet boundary.
func (o SplitOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Split) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type SplitArrayOutput struct{ *pulumi.OutputState }

func (SplitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Split)(nil)).Elem()
}

func (o SplitArrayOutput) ToSplitArrayOutput() SplitArrayOutput {
	return o
}

func (o SplitArrayOutput) ToSplitArrayOutputWithContext(ctx context.Context) SplitArrayOutput {
	return o
}

func (o SplitArrayOutput) Index(i pulumi.IntInput) SplitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Split {
		return vs[0].([]Split)[vs[1].(int)]
	}).(SplitOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//          StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

func (i StatusArgs) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput).ToStatusPtrOutputWithContext(ctx)
}

// StatusPtrInput is an input type that accepts StatusArgs, StatusPtr and StatusPtrOutput values.
// You can construct a concrete instance of `StatusPtrInput` via:
//
//          StatusArgs{...}
//
//  or:
//
//          nil
type StatusPtrInput interface {
	pulumi.Input

	ToStatusPtrOutput() StatusPtrOutput
	ToStatusPtrOutputWithContext(context.Context) StatusPtrOutput
}

type statusPtrType StatusArgs

func StatusPtr(v *StatusArgs) StatusPtrInput {
	return (*statusPtrType)(v)
}

func (*statusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (i *statusPtrType) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i *statusPtrType) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyT(func(v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v Status) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status { return *v }).(StatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Status) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusPtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *Status) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Status) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// A collection of user data indexed by row, column, and timestamp. Each table is served using the resources of its parent cluster.
type Table struct {
	// Output only. Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`
	ClusterStates map[string]string `pulumi:"clusterStates"`
	// The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `FULL`
	ColumnFamilies map[string]string `pulumi:"columnFamilies"`
	// Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.
	Granularity *string `pulumi:"granularity"`
	// The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
	Name *string `pulumi:"name"`
	// Output only. If this table was restored from another data source (e.g. a backup), this field will be populated with information about the restore.
	RestoreInfo *RestoreInfo `pulumi:"restoreInfo"`
}

// TableInput is an input type that accepts TableArgs and TableOutput values.
// You can construct a concrete instance of `TableInput` via:
//
//          TableArgs{...}
type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(context.Context) TableOutput
}

// A collection of user data indexed by row, column, and timestamp. Each table is served using the resources of its parent cluster.
type TableArgs struct {
	// Output only. Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`
	ClusterStates pulumi.StringMapInput `pulumi:"clusterStates"`
	// The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `FULL`
	ColumnFamilies pulumi.StringMapInput `pulumi:"columnFamilies"`
	// Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Output only. If this table was restored from another data source (e.g. a backup), this field will be populated with information about the restore.
	RestoreInfo RestoreInfoPtrInput `pulumi:"restoreInfo"`
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Table)(nil)).Elem()
}

func (i TableArgs) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i TableArgs) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

func (i TableArgs) ToTablePtrOutput() TablePtrOutput {
	return i.ToTablePtrOutputWithContext(context.Background())
}

func (i TableArgs) ToTablePtrOutputWithContext(ctx context.Context) TablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput).ToTablePtrOutputWithContext(ctx)
}

// TablePtrInput is an input type that accepts TableArgs, TablePtr and TablePtrOutput values.
// You can construct a concrete instance of `TablePtrInput` via:
//
//          TableArgs{...}
//
//  or:
//
//          nil
type TablePtrInput interface {
	pulumi.Input

	ToTablePtrOutput() TablePtrOutput
	ToTablePtrOutputWithContext(context.Context) TablePtrOutput
}

type tablePtrType TableArgs

func TablePtr(v *TableArgs) TablePtrInput {
	return (*tablePtrType)(v)
}

func (*tablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *tablePtrType) ToTablePtrOutput() TablePtrOutput {
	return i.ToTablePtrOutputWithContext(context.Background())
}

func (i *tablePtrType) ToTablePtrOutputWithContext(ctx context.Context) TablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePtrOutput)
}

// A collection of user data indexed by row, column, and timestamp. Each table is served using the resources of its parent cluster.
type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

func (o TableOutput) ToTablePtrOutput() TablePtrOutput {
	return o.ToTablePtrOutputWithContext(context.Background())
}

func (o TableOutput) ToTablePtrOutputWithContext(ctx context.Context) TablePtrOutput {
	return o.ApplyT(func(v Table) *Table {
		return &v
	}).(TablePtrOutput)
}

// Output only. Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`
func (o TableOutput) ClusterStates() pulumi.StringMapOutput {
	return o.ApplyT(func(v Table) map[string]string { return v.ClusterStates }).(pulumi.StringMapOutput)
}

// The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `FULL`
func (o TableOutput) ColumnFamilies() pulumi.StringMapOutput {
	return o.ApplyT(func(v Table) map[string]string { return v.ColumnFamilies }).(pulumi.StringMapOutput)
}

// Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.
func (o TableOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Table) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
func (o TableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Table) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Output only. If this table was restored from another data source (e.g. a backup), this field will be populated with information about the restore.
func (o TableOutput) RestoreInfo() RestoreInfoPtrOutput {
	return o.ApplyT(func(v Table) *RestoreInfo { return v.RestoreInfo }).(RestoreInfoPtrOutput)
}

type TablePtrOutput struct{ *pulumi.OutputState }

func (TablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TablePtrOutput) ToTablePtrOutput() TablePtrOutput {
	return o
}

func (o TablePtrOutput) ToTablePtrOutputWithContext(ctx context.Context) TablePtrOutput {
	return o
}

func (o TablePtrOutput) Elem() TableOutput {
	return o.ApplyT(func(v *Table) Table { return *v }).(TableOutput)
}

// Output only. Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`
func (o TablePtrOutput) ClusterStates() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Table) map[string]string {
		if v == nil {
			return nil
		}
		return v.ClusterStates
	}).(pulumi.StringMapOutput)
}

// The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `FULL`
func (o TablePtrOutput) ColumnFamilies() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Table) map[string]string {
		if v == nil {
			return nil
		}
		return v.ColumnFamilies
	}).(pulumi.StringMapOutput)
}

// Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.
func (o TablePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
func (o TablePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Output only. If this table was restored from another data source (e.g. a backup), this field will be populated with information about the restore.
func (o TablePtrOutput) RestoreInfo() RestoreInfoPtrOutput {
	return o.ApplyT(func(v *Table) *RestoreInfo {
		if v == nil {
			return nil
		}
		return v.RestoreInfo
	}).(RestoreInfoPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(BackupInfoOutput{})
	pulumi.RegisterOutputType(BackupInfoPtrOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionInfoOutput{})
	pulumi.RegisterOutputType(EncryptionInfoPtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(InstanceTypeOutput{})
	pulumi.RegisterOutputType(InstanceTypePtrOutput{})
	pulumi.RegisterOutputType(MultiClusterRoutingUseAnyOutput{})
	pulumi.RegisterOutputType(MultiClusterRoutingUseAnyPtrOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(RestoreInfoOutput{})
	pulumi.RegisterOutputType(RestoreInfoPtrOutput{})
	pulumi.RegisterOutputType(SingleClusterRoutingOutput{})
	pulumi.RegisterOutputType(SingleClusterRoutingPtrOutput{})
	pulumi.RegisterOutputType(SplitOutput{})
	pulumi.RegisterOutputType(SplitArrayOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
	pulumi.RegisterOutputType(TableOutput{})
	pulumi.RegisterOutputType(TablePtrOutput{})
}
