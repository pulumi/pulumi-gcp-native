// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// AuditConfigResponseInput is an input type that accepts AuditConfigResponseArgs and AuditConfigResponseOutput values.
// You can construct a concrete instance of `AuditConfigResponseInput` via:
//
//          AuditConfigResponseArgs{...}
type AuditConfigResponseInput interface {
	pulumi.Input

	ToAuditConfigResponseOutput() AuditConfigResponseOutput
	ToAuditConfigResponseOutputWithContext(context.Context) AuditConfigResponseOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigResponseArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringInput `pulumi:"service"`
}

func (AuditConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return i.ToAuditConfigResponseOutputWithContext(context.Background())
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseOutput)
}

// AuditConfigResponseArrayInput is an input type that accepts AuditConfigResponseArray and AuditConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditConfigResponseArrayInput` via:
//
//          AuditConfigResponseArray{ AuditConfigResponseArgs{...} }
type AuditConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput
	ToAuditConfigResponseArrayOutputWithContext(context.Context) AuditConfigResponseArrayOutput
}

type AuditConfigResponseArray []AuditConfigResponseInput

func (AuditConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return i.ToAuditConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// AuditLogConfigResponseInput is an input type that accepts AuditLogConfigResponseArgs and AuditLogConfigResponseOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseInput` via:
//
//          AuditLogConfigResponseArgs{...}
type AuditLogConfigResponseInput interface {
	pulumi.Input

	ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput
	ToAuditLogConfigResponseOutputWithContext(context.Context) AuditLogConfigResponseOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringInput `pulumi:"logType"`
}

func (AuditLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return i.ToAuditLogConfigResponseOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseOutput)
}

// AuditLogConfigResponseArrayInput is an input type that accepts AuditLogConfigResponseArray and AuditLogConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseArrayInput` via:
//
//          AuditLogConfigResponseArray{ AuditLogConfigResponseArgs{...} }
type AuditLogConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput
	ToAuditLogConfigResponseArrayOutputWithContext(context.Context) AuditLogConfigResponseArrayOutput
}

type AuditLogConfigResponseArray []AuditLogConfigResponseInput

func (AuditLogConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return i.ToAuditLogConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimits struct {
	// Maximum number of nodes to scale up to.
	MaxServeNodes int `pulumi:"maxServeNodes"`
	// Minimum number of nodes to scale down to.
	MinServeNodes int `pulumi:"minServeNodes"`
}

// AutoscalingLimitsInput is an input type that accepts AutoscalingLimitsArgs and AutoscalingLimitsOutput values.
// You can construct a concrete instance of `AutoscalingLimitsInput` via:
//
//          AutoscalingLimitsArgs{...}
type AutoscalingLimitsInput interface {
	pulumi.Input

	ToAutoscalingLimitsOutput() AutoscalingLimitsOutput
	ToAutoscalingLimitsOutputWithContext(context.Context) AutoscalingLimitsOutput
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimitsArgs struct {
	// Maximum number of nodes to scale up to.
	MaxServeNodes pulumi.IntInput `pulumi:"maxServeNodes"`
	// Minimum number of nodes to scale down to.
	MinServeNodes pulumi.IntInput `pulumi:"minServeNodes"`
}

func (AutoscalingLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingLimits)(nil)).Elem()
}

func (i AutoscalingLimitsArgs) ToAutoscalingLimitsOutput() AutoscalingLimitsOutput {
	return i.ToAutoscalingLimitsOutputWithContext(context.Background())
}

func (i AutoscalingLimitsArgs) ToAutoscalingLimitsOutputWithContext(ctx context.Context) AutoscalingLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingLimitsOutput)
}

func (i AutoscalingLimitsArgs) ToAutoscalingLimitsPtrOutput() AutoscalingLimitsPtrOutput {
	return i.ToAutoscalingLimitsPtrOutputWithContext(context.Background())
}

func (i AutoscalingLimitsArgs) ToAutoscalingLimitsPtrOutputWithContext(ctx context.Context) AutoscalingLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingLimitsOutput).ToAutoscalingLimitsPtrOutputWithContext(ctx)
}

// AutoscalingLimitsPtrInput is an input type that accepts AutoscalingLimitsArgs, AutoscalingLimitsPtr and AutoscalingLimitsPtrOutput values.
// You can construct a concrete instance of `AutoscalingLimitsPtrInput` via:
//
//          AutoscalingLimitsArgs{...}
//
//  or:
//
//          nil
type AutoscalingLimitsPtrInput interface {
	pulumi.Input

	ToAutoscalingLimitsPtrOutput() AutoscalingLimitsPtrOutput
	ToAutoscalingLimitsPtrOutputWithContext(context.Context) AutoscalingLimitsPtrOutput
}

type autoscalingLimitsPtrType AutoscalingLimitsArgs

func AutoscalingLimitsPtr(v *AutoscalingLimitsArgs) AutoscalingLimitsPtrInput {
	return (*autoscalingLimitsPtrType)(v)
}

func (*autoscalingLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingLimits)(nil)).Elem()
}

func (i *autoscalingLimitsPtrType) ToAutoscalingLimitsPtrOutput() AutoscalingLimitsPtrOutput {
	return i.ToAutoscalingLimitsPtrOutputWithContext(context.Background())
}

func (i *autoscalingLimitsPtrType) ToAutoscalingLimitsPtrOutputWithContext(ctx context.Context) AutoscalingLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingLimitsPtrOutput)
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimitsOutput struct{ *pulumi.OutputState }

func (AutoscalingLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingLimits)(nil)).Elem()
}

func (o AutoscalingLimitsOutput) ToAutoscalingLimitsOutput() AutoscalingLimitsOutput {
	return o
}

func (o AutoscalingLimitsOutput) ToAutoscalingLimitsOutputWithContext(ctx context.Context) AutoscalingLimitsOutput {
	return o
}

func (o AutoscalingLimitsOutput) ToAutoscalingLimitsPtrOutput() AutoscalingLimitsPtrOutput {
	return o.ToAutoscalingLimitsPtrOutputWithContext(context.Background())
}

func (o AutoscalingLimitsOutput) ToAutoscalingLimitsPtrOutputWithContext(ctx context.Context) AutoscalingLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingLimits) *AutoscalingLimits {
		return &v
	}).(AutoscalingLimitsPtrOutput)
}

// Maximum number of nodes to scale up to.
func (o AutoscalingLimitsOutput) MaxServeNodes() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingLimits) int { return v.MaxServeNodes }).(pulumi.IntOutput)
}

// Minimum number of nodes to scale down to.
func (o AutoscalingLimitsOutput) MinServeNodes() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingLimits) int { return v.MinServeNodes }).(pulumi.IntOutput)
}

type AutoscalingLimitsPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingLimits)(nil)).Elem()
}

func (o AutoscalingLimitsPtrOutput) ToAutoscalingLimitsPtrOutput() AutoscalingLimitsPtrOutput {
	return o
}

func (o AutoscalingLimitsPtrOutput) ToAutoscalingLimitsPtrOutputWithContext(ctx context.Context) AutoscalingLimitsPtrOutput {
	return o
}

func (o AutoscalingLimitsPtrOutput) Elem() AutoscalingLimitsOutput {
	return o.ApplyT(func(v *AutoscalingLimits) AutoscalingLimits {
		if v != nil {
			return *v
		}
		var ret AutoscalingLimits
		return ret
	}).(AutoscalingLimitsOutput)
}

// Maximum number of nodes to scale up to.
func (o AutoscalingLimitsPtrOutput) MaxServeNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingLimits) *int {
		if v == nil {
			return nil
		}
		return &v.MaxServeNodes
	}).(pulumi.IntPtrOutput)
}

// Minimum number of nodes to scale down to.
func (o AutoscalingLimitsPtrOutput) MinServeNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingLimits) *int {
		if v == nil {
			return nil
		}
		return &v.MinServeNodes
	}).(pulumi.IntPtrOutput)
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimitsResponse struct {
	// Maximum number of nodes to scale up to.
	MaxServeNodes int `pulumi:"maxServeNodes"`
	// Minimum number of nodes to scale down to.
	MinServeNodes int `pulumi:"minServeNodes"`
}

// AutoscalingLimitsResponseInput is an input type that accepts AutoscalingLimitsResponseArgs and AutoscalingLimitsResponseOutput values.
// You can construct a concrete instance of `AutoscalingLimitsResponseInput` via:
//
//          AutoscalingLimitsResponseArgs{...}
type AutoscalingLimitsResponseInput interface {
	pulumi.Input

	ToAutoscalingLimitsResponseOutput() AutoscalingLimitsResponseOutput
	ToAutoscalingLimitsResponseOutputWithContext(context.Context) AutoscalingLimitsResponseOutput
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimitsResponseArgs struct {
	// Maximum number of nodes to scale up to.
	MaxServeNodes pulumi.IntInput `pulumi:"maxServeNodes"`
	// Minimum number of nodes to scale down to.
	MinServeNodes pulumi.IntInput `pulumi:"minServeNodes"`
}

func (AutoscalingLimitsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingLimitsResponse)(nil)).Elem()
}

func (i AutoscalingLimitsResponseArgs) ToAutoscalingLimitsResponseOutput() AutoscalingLimitsResponseOutput {
	return i.ToAutoscalingLimitsResponseOutputWithContext(context.Background())
}

func (i AutoscalingLimitsResponseArgs) ToAutoscalingLimitsResponseOutputWithContext(ctx context.Context) AutoscalingLimitsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingLimitsResponseOutput)
}

func (i AutoscalingLimitsResponseArgs) ToAutoscalingLimitsResponsePtrOutput() AutoscalingLimitsResponsePtrOutput {
	return i.ToAutoscalingLimitsResponsePtrOutputWithContext(context.Background())
}

func (i AutoscalingLimitsResponseArgs) ToAutoscalingLimitsResponsePtrOutputWithContext(ctx context.Context) AutoscalingLimitsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingLimitsResponseOutput).ToAutoscalingLimitsResponsePtrOutputWithContext(ctx)
}

// AutoscalingLimitsResponsePtrInput is an input type that accepts AutoscalingLimitsResponseArgs, AutoscalingLimitsResponsePtr and AutoscalingLimitsResponsePtrOutput values.
// You can construct a concrete instance of `AutoscalingLimitsResponsePtrInput` via:
//
//          AutoscalingLimitsResponseArgs{...}
//
//  or:
//
//          nil
type AutoscalingLimitsResponsePtrInput interface {
	pulumi.Input

	ToAutoscalingLimitsResponsePtrOutput() AutoscalingLimitsResponsePtrOutput
	ToAutoscalingLimitsResponsePtrOutputWithContext(context.Context) AutoscalingLimitsResponsePtrOutput
}

type autoscalingLimitsResponsePtrType AutoscalingLimitsResponseArgs

func AutoscalingLimitsResponsePtr(v *AutoscalingLimitsResponseArgs) AutoscalingLimitsResponsePtrInput {
	return (*autoscalingLimitsResponsePtrType)(v)
}

func (*autoscalingLimitsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingLimitsResponse)(nil)).Elem()
}

func (i *autoscalingLimitsResponsePtrType) ToAutoscalingLimitsResponsePtrOutput() AutoscalingLimitsResponsePtrOutput {
	return i.ToAutoscalingLimitsResponsePtrOutputWithContext(context.Background())
}

func (i *autoscalingLimitsResponsePtrType) ToAutoscalingLimitsResponsePtrOutputWithContext(ctx context.Context) AutoscalingLimitsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingLimitsResponsePtrOutput)
}

// Limits for the number of nodes a Cluster can autoscale up/down to.
type AutoscalingLimitsResponseOutput struct{ *pulumi.OutputState }

func (AutoscalingLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingLimitsResponse)(nil)).Elem()
}

func (o AutoscalingLimitsResponseOutput) ToAutoscalingLimitsResponseOutput() AutoscalingLimitsResponseOutput {
	return o
}

func (o AutoscalingLimitsResponseOutput) ToAutoscalingLimitsResponseOutputWithContext(ctx context.Context) AutoscalingLimitsResponseOutput {
	return o
}

func (o AutoscalingLimitsResponseOutput) ToAutoscalingLimitsResponsePtrOutput() AutoscalingLimitsResponsePtrOutput {
	return o.ToAutoscalingLimitsResponsePtrOutputWithContext(context.Background())
}

func (o AutoscalingLimitsResponseOutput) ToAutoscalingLimitsResponsePtrOutputWithContext(ctx context.Context) AutoscalingLimitsResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingLimitsResponse) *AutoscalingLimitsResponse {
		return &v
	}).(AutoscalingLimitsResponsePtrOutput)
}

// Maximum number of nodes to scale up to.
func (o AutoscalingLimitsResponseOutput) MaxServeNodes() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingLimitsResponse) int { return v.MaxServeNodes }).(pulumi.IntOutput)
}

// Minimum number of nodes to scale down to.
func (o AutoscalingLimitsResponseOutput) MinServeNodes() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingLimitsResponse) int { return v.MinServeNodes }).(pulumi.IntOutput)
}

type AutoscalingLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscalingLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingLimitsResponse)(nil)).Elem()
}

func (o AutoscalingLimitsResponsePtrOutput) ToAutoscalingLimitsResponsePtrOutput() AutoscalingLimitsResponsePtrOutput {
	return o
}

func (o AutoscalingLimitsResponsePtrOutput) ToAutoscalingLimitsResponsePtrOutputWithContext(ctx context.Context) AutoscalingLimitsResponsePtrOutput {
	return o
}

func (o AutoscalingLimitsResponsePtrOutput) Elem() AutoscalingLimitsResponseOutput {
	return o.ApplyT(func(v *AutoscalingLimitsResponse) AutoscalingLimitsResponse {
		if v != nil {
			return *v
		}
		var ret AutoscalingLimitsResponse
		return ret
	}).(AutoscalingLimitsResponseOutput)
}

// Maximum number of nodes to scale up to.
func (o AutoscalingLimitsResponsePtrOutput) MaxServeNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingLimitsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxServeNodes
	}).(pulumi.IntPtrOutput)
}

// Minimum number of nodes to scale down to.
func (o AutoscalingLimitsResponsePtrOutput) MinServeNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingLimitsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinServeNodes
	}).(pulumi.IntPtrOutput)
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargets struct {
	// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization).
	CpuUtilizationPercent *int `pulumi:"cpuUtilizationPercent"`
}

// AutoscalingTargetsInput is an input type that accepts AutoscalingTargetsArgs and AutoscalingTargetsOutput values.
// You can construct a concrete instance of `AutoscalingTargetsInput` via:
//
//          AutoscalingTargetsArgs{...}
type AutoscalingTargetsInput interface {
	pulumi.Input

	ToAutoscalingTargetsOutput() AutoscalingTargetsOutput
	ToAutoscalingTargetsOutputWithContext(context.Context) AutoscalingTargetsOutput
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargetsArgs struct {
	// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization).
	CpuUtilizationPercent pulumi.IntPtrInput `pulumi:"cpuUtilizationPercent"`
}

func (AutoscalingTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTargets)(nil)).Elem()
}

func (i AutoscalingTargetsArgs) ToAutoscalingTargetsOutput() AutoscalingTargetsOutput {
	return i.ToAutoscalingTargetsOutputWithContext(context.Background())
}

func (i AutoscalingTargetsArgs) ToAutoscalingTargetsOutputWithContext(ctx context.Context) AutoscalingTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTargetsOutput)
}

func (i AutoscalingTargetsArgs) ToAutoscalingTargetsPtrOutput() AutoscalingTargetsPtrOutput {
	return i.ToAutoscalingTargetsPtrOutputWithContext(context.Background())
}

func (i AutoscalingTargetsArgs) ToAutoscalingTargetsPtrOutputWithContext(ctx context.Context) AutoscalingTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTargetsOutput).ToAutoscalingTargetsPtrOutputWithContext(ctx)
}

// AutoscalingTargetsPtrInput is an input type that accepts AutoscalingTargetsArgs, AutoscalingTargetsPtr and AutoscalingTargetsPtrOutput values.
// You can construct a concrete instance of `AutoscalingTargetsPtrInput` via:
//
//          AutoscalingTargetsArgs{...}
//
//  or:
//
//          nil
type AutoscalingTargetsPtrInput interface {
	pulumi.Input

	ToAutoscalingTargetsPtrOutput() AutoscalingTargetsPtrOutput
	ToAutoscalingTargetsPtrOutputWithContext(context.Context) AutoscalingTargetsPtrOutput
}

type autoscalingTargetsPtrType AutoscalingTargetsArgs

func AutoscalingTargetsPtr(v *AutoscalingTargetsArgs) AutoscalingTargetsPtrInput {
	return (*autoscalingTargetsPtrType)(v)
}

func (*autoscalingTargetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTargets)(nil)).Elem()
}

func (i *autoscalingTargetsPtrType) ToAutoscalingTargetsPtrOutput() AutoscalingTargetsPtrOutput {
	return i.ToAutoscalingTargetsPtrOutputWithContext(context.Background())
}

func (i *autoscalingTargetsPtrType) ToAutoscalingTargetsPtrOutputWithContext(ctx context.Context) AutoscalingTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTargetsPtrOutput)
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargetsOutput struct{ *pulumi.OutputState }

func (AutoscalingTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTargets)(nil)).Elem()
}

func (o AutoscalingTargetsOutput) ToAutoscalingTargetsOutput() AutoscalingTargetsOutput {
	return o
}

func (o AutoscalingTargetsOutput) ToAutoscalingTargetsOutputWithContext(ctx context.Context) AutoscalingTargetsOutput {
	return o
}

func (o AutoscalingTargetsOutput) ToAutoscalingTargetsPtrOutput() AutoscalingTargetsPtrOutput {
	return o.ToAutoscalingTargetsPtrOutputWithContext(context.Background())
}

func (o AutoscalingTargetsOutput) ToAutoscalingTargetsPtrOutputWithContext(ctx context.Context) AutoscalingTargetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingTargets) *AutoscalingTargets {
		return &v
	}).(AutoscalingTargetsPtrOutput)
}

// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization).
func (o AutoscalingTargetsOutput) CpuUtilizationPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingTargets) *int { return v.CpuUtilizationPercent }).(pulumi.IntPtrOutput)
}

type AutoscalingTargetsPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingTargetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTargets)(nil)).Elem()
}

func (o AutoscalingTargetsPtrOutput) ToAutoscalingTargetsPtrOutput() AutoscalingTargetsPtrOutput {
	return o
}

func (o AutoscalingTargetsPtrOutput) ToAutoscalingTargetsPtrOutputWithContext(ctx context.Context) AutoscalingTargetsPtrOutput {
	return o
}

func (o AutoscalingTargetsPtrOutput) Elem() AutoscalingTargetsOutput {
	return o.ApplyT(func(v *AutoscalingTargets) AutoscalingTargets {
		if v != nil {
			return *v
		}
		var ret AutoscalingTargets
		return ret
	}).(AutoscalingTargetsOutput)
}

// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization).
func (o AutoscalingTargetsPtrOutput) CpuUtilizationPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingTargets) *int {
		if v == nil {
			return nil
		}
		return v.CpuUtilizationPercent
	}).(pulumi.IntPtrOutput)
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargetsResponse struct {
	// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization).
	CpuUtilizationPercent int `pulumi:"cpuUtilizationPercent"`
}

// AutoscalingTargetsResponseInput is an input type that accepts AutoscalingTargetsResponseArgs and AutoscalingTargetsResponseOutput values.
// You can construct a concrete instance of `AutoscalingTargetsResponseInput` via:
//
//          AutoscalingTargetsResponseArgs{...}
type AutoscalingTargetsResponseInput interface {
	pulumi.Input

	ToAutoscalingTargetsResponseOutput() AutoscalingTargetsResponseOutput
	ToAutoscalingTargetsResponseOutputWithContext(context.Context) AutoscalingTargetsResponseOutput
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargetsResponseArgs struct {
	// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization).
	CpuUtilizationPercent pulumi.IntInput `pulumi:"cpuUtilizationPercent"`
}

func (AutoscalingTargetsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTargetsResponse)(nil)).Elem()
}

func (i AutoscalingTargetsResponseArgs) ToAutoscalingTargetsResponseOutput() AutoscalingTargetsResponseOutput {
	return i.ToAutoscalingTargetsResponseOutputWithContext(context.Background())
}

func (i AutoscalingTargetsResponseArgs) ToAutoscalingTargetsResponseOutputWithContext(ctx context.Context) AutoscalingTargetsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTargetsResponseOutput)
}

func (i AutoscalingTargetsResponseArgs) ToAutoscalingTargetsResponsePtrOutput() AutoscalingTargetsResponsePtrOutput {
	return i.ToAutoscalingTargetsResponsePtrOutputWithContext(context.Background())
}

func (i AutoscalingTargetsResponseArgs) ToAutoscalingTargetsResponsePtrOutputWithContext(ctx context.Context) AutoscalingTargetsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTargetsResponseOutput).ToAutoscalingTargetsResponsePtrOutputWithContext(ctx)
}

// AutoscalingTargetsResponsePtrInput is an input type that accepts AutoscalingTargetsResponseArgs, AutoscalingTargetsResponsePtr and AutoscalingTargetsResponsePtrOutput values.
// You can construct a concrete instance of `AutoscalingTargetsResponsePtrInput` via:
//
//          AutoscalingTargetsResponseArgs{...}
//
//  or:
//
//          nil
type AutoscalingTargetsResponsePtrInput interface {
	pulumi.Input

	ToAutoscalingTargetsResponsePtrOutput() AutoscalingTargetsResponsePtrOutput
	ToAutoscalingTargetsResponsePtrOutputWithContext(context.Context) AutoscalingTargetsResponsePtrOutput
}

type autoscalingTargetsResponsePtrType AutoscalingTargetsResponseArgs

func AutoscalingTargetsResponsePtr(v *AutoscalingTargetsResponseArgs) AutoscalingTargetsResponsePtrInput {
	return (*autoscalingTargetsResponsePtrType)(v)
}

func (*autoscalingTargetsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTargetsResponse)(nil)).Elem()
}

func (i *autoscalingTargetsResponsePtrType) ToAutoscalingTargetsResponsePtrOutput() AutoscalingTargetsResponsePtrOutput {
	return i.ToAutoscalingTargetsResponsePtrOutputWithContext(context.Background())
}

func (i *autoscalingTargetsResponsePtrType) ToAutoscalingTargetsResponsePtrOutputWithContext(ctx context.Context) AutoscalingTargetsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTargetsResponsePtrOutput)
}

// The Autoscaling targets for a Cluster. These determine the recommended nodes.
type AutoscalingTargetsResponseOutput struct{ *pulumi.OutputState }

func (AutoscalingTargetsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTargetsResponse)(nil)).Elem()
}

func (o AutoscalingTargetsResponseOutput) ToAutoscalingTargetsResponseOutput() AutoscalingTargetsResponseOutput {
	return o
}

func (o AutoscalingTargetsResponseOutput) ToAutoscalingTargetsResponseOutputWithContext(ctx context.Context) AutoscalingTargetsResponseOutput {
	return o
}

func (o AutoscalingTargetsResponseOutput) ToAutoscalingTargetsResponsePtrOutput() AutoscalingTargetsResponsePtrOutput {
	return o.ToAutoscalingTargetsResponsePtrOutputWithContext(context.Background())
}

func (o AutoscalingTargetsResponseOutput) ToAutoscalingTargetsResponsePtrOutputWithContext(ctx context.Context) AutoscalingTargetsResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingTargetsResponse) *AutoscalingTargetsResponse {
		return &v
	}).(AutoscalingTargetsResponsePtrOutput)
}

// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization).
func (o AutoscalingTargetsResponseOutput) CpuUtilizationPercent() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingTargetsResponse) int { return v.CpuUtilizationPercent }).(pulumi.IntOutput)
}

type AutoscalingTargetsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscalingTargetsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTargetsResponse)(nil)).Elem()
}

func (o AutoscalingTargetsResponsePtrOutput) ToAutoscalingTargetsResponsePtrOutput() AutoscalingTargetsResponsePtrOutput {
	return o
}

func (o AutoscalingTargetsResponsePtrOutput) ToAutoscalingTargetsResponsePtrOutputWithContext(ctx context.Context) AutoscalingTargetsResponsePtrOutput {
	return o
}

func (o AutoscalingTargetsResponsePtrOutput) Elem() AutoscalingTargetsResponseOutput {
	return o.ApplyT(func(v *AutoscalingTargetsResponse) AutoscalingTargetsResponse {
		if v != nil {
			return *v
		}
		var ret AutoscalingTargetsResponse
		return ret
	}).(AutoscalingTargetsResponseOutput)
}

// The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization).
func (o AutoscalingTargetsResponsePtrOutput) CpuUtilizationPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingTargetsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.CpuUtilizationPercent
	}).(pulumi.IntPtrOutput)
}

// Information about a backup.
type BackupInfoResponse struct {
	// Name of the backup.
	Backup string `pulumi:"backup"`
	// This time that the backup was finished. Row data in the backup will be no newer than this timestamp.
	EndTime string `pulumi:"endTime"`
	// Name of the table the backup was created from.
	SourceTable string `pulumi:"sourceTable"`
	// The time that the backup was started. Row data in the backup will be no older than this timestamp.
	StartTime string `pulumi:"startTime"`
}

// BackupInfoResponseInput is an input type that accepts BackupInfoResponseArgs and BackupInfoResponseOutput values.
// You can construct a concrete instance of `BackupInfoResponseInput` via:
//
//          BackupInfoResponseArgs{...}
type BackupInfoResponseInput interface {
	pulumi.Input

	ToBackupInfoResponseOutput() BackupInfoResponseOutput
	ToBackupInfoResponseOutputWithContext(context.Context) BackupInfoResponseOutput
}

// Information about a backup.
type BackupInfoResponseArgs struct {
	// Name of the backup.
	Backup pulumi.StringInput `pulumi:"backup"`
	// This time that the backup was finished. Row data in the backup will be no newer than this timestamp.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Name of the table the backup was created from.
	SourceTable pulumi.StringInput `pulumi:"sourceTable"`
	// The time that the backup was started. Row data in the backup will be no older than this timestamp.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (BackupInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupInfoResponse)(nil)).Elem()
}

func (i BackupInfoResponseArgs) ToBackupInfoResponseOutput() BackupInfoResponseOutput {
	return i.ToBackupInfoResponseOutputWithContext(context.Background())
}

func (i BackupInfoResponseArgs) ToBackupInfoResponseOutputWithContext(ctx context.Context) BackupInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInfoResponseOutput)
}

func (i BackupInfoResponseArgs) ToBackupInfoResponsePtrOutput() BackupInfoResponsePtrOutput {
	return i.ToBackupInfoResponsePtrOutputWithContext(context.Background())
}

func (i BackupInfoResponseArgs) ToBackupInfoResponsePtrOutputWithContext(ctx context.Context) BackupInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInfoResponseOutput).ToBackupInfoResponsePtrOutputWithContext(ctx)
}

// BackupInfoResponsePtrInput is an input type that accepts BackupInfoResponseArgs, BackupInfoResponsePtr and BackupInfoResponsePtrOutput values.
// You can construct a concrete instance of `BackupInfoResponsePtrInput` via:
//
//          BackupInfoResponseArgs{...}
//
//  or:
//
//          nil
type BackupInfoResponsePtrInput interface {
	pulumi.Input

	ToBackupInfoResponsePtrOutput() BackupInfoResponsePtrOutput
	ToBackupInfoResponsePtrOutputWithContext(context.Context) BackupInfoResponsePtrOutput
}

type backupInfoResponsePtrType BackupInfoResponseArgs

func BackupInfoResponsePtr(v *BackupInfoResponseArgs) BackupInfoResponsePtrInput {
	return (*backupInfoResponsePtrType)(v)
}

func (*backupInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupInfoResponse)(nil)).Elem()
}

func (i *backupInfoResponsePtrType) ToBackupInfoResponsePtrOutput() BackupInfoResponsePtrOutput {
	return i.ToBackupInfoResponsePtrOutputWithContext(context.Background())
}

func (i *backupInfoResponsePtrType) ToBackupInfoResponsePtrOutputWithContext(ctx context.Context) BackupInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInfoResponsePtrOutput)
}

// Information about a backup.
type BackupInfoResponseOutput struct{ *pulumi.OutputState }

func (BackupInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupInfoResponse)(nil)).Elem()
}

func (o BackupInfoResponseOutput) ToBackupInfoResponseOutput() BackupInfoResponseOutput {
	return o
}

func (o BackupInfoResponseOutput) ToBackupInfoResponseOutputWithContext(ctx context.Context) BackupInfoResponseOutput {
	return o
}

func (o BackupInfoResponseOutput) ToBackupInfoResponsePtrOutput() BackupInfoResponsePtrOutput {
	return o.ToBackupInfoResponsePtrOutputWithContext(context.Background())
}

func (o BackupInfoResponseOutput) ToBackupInfoResponsePtrOutputWithContext(ctx context.Context) BackupInfoResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupInfoResponse) *BackupInfoResponse {
		return &v
	}).(BackupInfoResponsePtrOutput)
}

// Name of the backup.
func (o BackupInfoResponseOutput) Backup() pulumi.StringOutput {
	return o.ApplyT(func(v BackupInfoResponse) string { return v.Backup }).(pulumi.StringOutput)
}

// This time that the backup was finished. Row data in the backup will be no newer than this timestamp.
func (o BackupInfoResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupInfoResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Name of the table the backup was created from.
func (o BackupInfoResponseOutput) SourceTable() pulumi.StringOutput {
	return o.ApplyT(func(v BackupInfoResponse) string { return v.SourceTable }).(pulumi.StringOutput)
}

// The time that the backup was started. Row data in the backup will be no older than this timestamp.
func (o BackupInfoResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupInfoResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type BackupInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (BackupInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupInfoResponse)(nil)).Elem()
}

func (o BackupInfoResponsePtrOutput) ToBackupInfoResponsePtrOutput() BackupInfoResponsePtrOutput {
	return o
}

func (o BackupInfoResponsePtrOutput) ToBackupInfoResponsePtrOutputWithContext(ctx context.Context) BackupInfoResponsePtrOutput {
	return o
}

func (o BackupInfoResponsePtrOutput) Elem() BackupInfoResponseOutput {
	return o.ApplyT(func(v *BackupInfoResponse) BackupInfoResponse {
		if v != nil {
			return *v
		}
		var ret BackupInfoResponse
		return ret
	}).(BackupInfoResponseOutput)
}

// Name of the backup.
func (o BackupInfoResponsePtrOutput) Backup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Backup
	}).(pulumi.StringPtrOutput)
}

// This time that the backup was finished. Row data in the backup will be no newer than this timestamp.
func (o BackupInfoResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Name of the table the backup was created from.
func (o BackupInfoResponsePtrOutput) SourceTable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceTable
	}).(pulumi.StringPtrOutput)
}

// The time that the backup was started. Row data in the backup will be no older than this timestamp.
func (o BackupInfoResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// BindingResponseInput is an input type that accepts BindingResponseArgs and BindingResponseOutput values.
// You can construct a concrete instance of `BindingResponseInput` via:
//
//          BindingResponseArgs{...}
type BindingResponseInput interface {
	pulumi.Input

	ToBindingResponseOutput() BindingResponseOutput
	ToBindingResponseOutputWithContext(context.Context) BindingResponseOutput
}

// Associates `members`, or principals, with a `role`.
type BindingResponseArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponseInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringInput `pulumi:"role"`
}

func (BindingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (i BindingResponseArgs) ToBindingResponseOutput() BindingResponseOutput {
	return i.ToBindingResponseOutputWithContext(context.Background())
}

func (i BindingResponseArgs) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseOutput)
}

// BindingResponseArrayInput is an input type that accepts BindingResponseArray and BindingResponseArrayOutput values.
// You can construct a concrete instance of `BindingResponseArrayInput` via:
//
//          BindingResponseArray{ BindingResponseArgs{...} }
type BindingResponseArrayInput interface {
	pulumi.Input

	ToBindingResponseArrayOutput() BindingResponseArrayOutput
	ToBindingResponseArrayOutputWithContext(context.Context) BindingResponseArrayOutput
}

type BindingResponseArray []BindingResponseInput

func (BindingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (i BindingResponseArray) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return i.ToBindingResponseArrayOutputWithContext(context.Background())
}

func (i BindingResponseArray) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfig struct {
	// Autoscaling limits for this cluster.
	AutoscalingLimits AutoscalingLimits `pulumi:"autoscalingLimits"`
	// Autoscaling targets for this cluster.
	AutoscalingTargets AutoscalingTargets `pulumi:"autoscalingTargets"`
}

// ClusterAutoscalingConfigInput is an input type that accepts ClusterAutoscalingConfigArgs and ClusterAutoscalingConfigOutput values.
// You can construct a concrete instance of `ClusterAutoscalingConfigInput` via:
//
//          ClusterAutoscalingConfigArgs{...}
type ClusterAutoscalingConfigInput interface {
	pulumi.Input

	ToClusterAutoscalingConfigOutput() ClusterAutoscalingConfigOutput
	ToClusterAutoscalingConfigOutputWithContext(context.Context) ClusterAutoscalingConfigOutput
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfigArgs struct {
	// Autoscaling limits for this cluster.
	AutoscalingLimits AutoscalingLimitsInput `pulumi:"autoscalingLimits"`
	// Autoscaling targets for this cluster.
	AutoscalingTargets AutoscalingTargetsInput `pulumi:"autoscalingTargets"`
}

func (ClusterAutoscalingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscalingConfig)(nil)).Elem()
}

func (i ClusterAutoscalingConfigArgs) ToClusterAutoscalingConfigOutput() ClusterAutoscalingConfigOutput {
	return i.ToClusterAutoscalingConfigOutputWithContext(context.Background())
}

func (i ClusterAutoscalingConfigArgs) ToClusterAutoscalingConfigOutputWithContext(ctx context.Context) ClusterAutoscalingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingConfigOutput)
}

func (i ClusterAutoscalingConfigArgs) ToClusterAutoscalingConfigPtrOutput() ClusterAutoscalingConfigPtrOutput {
	return i.ToClusterAutoscalingConfigPtrOutputWithContext(context.Background())
}

func (i ClusterAutoscalingConfigArgs) ToClusterAutoscalingConfigPtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingConfigOutput).ToClusterAutoscalingConfigPtrOutputWithContext(ctx)
}

// ClusterAutoscalingConfigPtrInput is an input type that accepts ClusterAutoscalingConfigArgs, ClusterAutoscalingConfigPtr and ClusterAutoscalingConfigPtrOutput values.
// You can construct a concrete instance of `ClusterAutoscalingConfigPtrInput` via:
//
//          ClusterAutoscalingConfigArgs{...}
//
//  or:
//
//          nil
type ClusterAutoscalingConfigPtrInput interface {
	pulumi.Input

	ToClusterAutoscalingConfigPtrOutput() ClusterAutoscalingConfigPtrOutput
	ToClusterAutoscalingConfigPtrOutputWithContext(context.Context) ClusterAutoscalingConfigPtrOutput
}

type clusterAutoscalingConfigPtrType ClusterAutoscalingConfigArgs

func ClusterAutoscalingConfigPtr(v *ClusterAutoscalingConfigArgs) ClusterAutoscalingConfigPtrInput {
	return (*clusterAutoscalingConfigPtrType)(v)
}

func (*clusterAutoscalingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscalingConfig)(nil)).Elem()
}

func (i *clusterAutoscalingConfigPtrType) ToClusterAutoscalingConfigPtrOutput() ClusterAutoscalingConfigPtrOutput {
	return i.ToClusterAutoscalingConfigPtrOutputWithContext(context.Background())
}

func (i *clusterAutoscalingConfigPtrType) ToClusterAutoscalingConfigPtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingConfigPtrOutput)
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfigOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscalingConfig)(nil)).Elem()
}

func (o ClusterAutoscalingConfigOutput) ToClusterAutoscalingConfigOutput() ClusterAutoscalingConfigOutput {
	return o
}

func (o ClusterAutoscalingConfigOutput) ToClusterAutoscalingConfigOutputWithContext(ctx context.Context) ClusterAutoscalingConfigOutput {
	return o
}

func (o ClusterAutoscalingConfigOutput) ToClusterAutoscalingConfigPtrOutput() ClusterAutoscalingConfigPtrOutput {
	return o.ToClusterAutoscalingConfigPtrOutputWithContext(context.Background())
}

func (o ClusterAutoscalingConfigOutput) ToClusterAutoscalingConfigPtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterAutoscalingConfig) *ClusterAutoscalingConfig {
		return &v
	}).(ClusterAutoscalingConfigPtrOutput)
}

// Autoscaling limits for this cluster.
func (o ClusterAutoscalingConfigOutput) AutoscalingLimits() AutoscalingLimitsOutput {
	return o.ApplyT(func(v ClusterAutoscalingConfig) AutoscalingLimits { return v.AutoscalingLimits }).(AutoscalingLimitsOutput)
}

// Autoscaling targets for this cluster.
func (o ClusterAutoscalingConfigOutput) AutoscalingTargets() AutoscalingTargetsOutput {
	return o.ApplyT(func(v ClusterAutoscalingConfig) AutoscalingTargets { return v.AutoscalingTargets }).(AutoscalingTargetsOutput)
}

type ClusterAutoscalingConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscalingConfig)(nil)).Elem()
}

func (o ClusterAutoscalingConfigPtrOutput) ToClusterAutoscalingConfigPtrOutput() ClusterAutoscalingConfigPtrOutput {
	return o
}

func (o ClusterAutoscalingConfigPtrOutput) ToClusterAutoscalingConfigPtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigPtrOutput {
	return o
}

func (o ClusterAutoscalingConfigPtrOutput) Elem() ClusterAutoscalingConfigOutput {
	return o.ApplyT(func(v *ClusterAutoscalingConfig) ClusterAutoscalingConfig {
		if v != nil {
			return *v
		}
		var ret ClusterAutoscalingConfig
		return ret
	}).(ClusterAutoscalingConfigOutput)
}

// Autoscaling limits for this cluster.
func (o ClusterAutoscalingConfigPtrOutput) AutoscalingLimits() AutoscalingLimitsPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscalingConfig) *AutoscalingLimits {
		if v == nil {
			return nil
		}
		return &v.AutoscalingLimits
	}).(AutoscalingLimitsPtrOutput)
}

// Autoscaling targets for this cluster.
func (o ClusterAutoscalingConfigPtrOutput) AutoscalingTargets() AutoscalingTargetsPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscalingConfig) *AutoscalingTargets {
		if v == nil {
			return nil
		}
		return &v.AutoscalingTargets
	}).(AutoscalingTargetsPtrOutput)
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfigResponse struct {
	// Autoscaling limits for this cluster.
	AutoscalingLimits AutoscalingLimitsResponse `pulumi:"autoscalingLimits"`
	// Autoscaling targets for this cluster.
	AutoscalingTargets AutoscalingTargetsResponse `pulumi:"autoscalingTargets"`
}

// ClusterAutoscalingConfigResponseInput is an input type that accepts ClusterAutoscalingConfigResponseArgs and ClusterAutoscalingConfigResponseOutput values.
// You can construct a concrete instance of `ClusterAutoscalingConfigResponseInput` via:
//
//          ClusterAutoscalingConfigResponseArgs{...}
type ClusterAutoscalingConfigResponseInput interface {
	pulumi.Input

	ToClusterAutoscalingConfigResponseOutput() ClusterAutoscalingConfigResponseOutput
	ToClusterAutoscalingConfigResponseOutputWithContext(context.Context) ClusterAutoscalingConfigResponseOutput
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfigResponseArgs struct {
	// Autoscaling limits for this cluster.
	AutoscalingLimits AutoscalingLimitsResponseInput `pulumi:"autoscalingLimits"`
	// Autoscaling targets for this cluster.
	AutoscalingTargets AutoscalingTargetsResponseInput `pulumi:"autoscalingTargets"`
}

func (ClusterAutoscalingConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscalingConfigResponse)(nil)).Elem()
}

func (i ClusterAutoscalingConfigResponseArgs) ToClusterAutoscalingConfigResponseOutput() ClusterAutoscalingConfigResponseOutput {
	return i.ToClusterAutoscalingConfigResponseOutputWithContext(context.Background())
}

func (i ClusterAutoscalingConfigResponseArgs) ToClusterAutoscalingConfigResponseOutputWithContext(ctx context.Context) ClusterAutoscalingConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingConfigResponseOutput)
}

func (i ClusterAutoscalingConfigResponseArgs) ToClusterAutoscalingConfigResponsePtrOutput() ClusterAutoscalingConfigResponsePtrOutput {
	return i.ToClusterAutoscalingConfigResponsePtrOutputWithContext(context.Background())
}

func (i ClusterAutoscalingConfigResponseArgs) ToClusterAutoscalingConfigResponsePtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingConfigResponseOutput).ToClusterAutoscalingConfigResponsePtrOutputWithContext(ctx)
}

// ClusterAutoscalingConfigResponsePtrInput is an input type that accepts ClusterAutoscalingConfigResponseArgs, ClusterAutoscalingConfigResponsePtr and ClusterAutoscalingConfigResponsePtrOutput values.
// You can construct a concrete instance of `ClusterAutoscalingConfigResponsePtrInput` via:
//
//          ClusterAutoscalingConfigResponseArgs{...}
//
//  or:
//
//          nil
type ClusterAutoscalingConfigResponsePtrInput interface {
	pulumi.Input

	ToClusterAutoscalingConfigResponsePtrOutput() ClusterAutoscalingConfigResponsePtrOutput
	ToClusterAutoscalingConfigResponsePtrOutputWithContext(context.Context) ClusterAutoscalingConfigResponsePtrOutput
}

type clusterAutoscalingConfigResponsePtrType ClusterAutoscalingConfigResponseArgs

func ClusterAutoscalingConfigResponsePtr(v *ClusterAutoscalingConfigResponseArgs) ClusterAutoscalingConfigResponsePtrInput {
	return (*clusterAutoscalingConfigResponsePtrType)(v)
}

func (*clusterAutoscalingConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscalingConfigResponse)(nil)).Elem()
}

func (i *clusterAutoscalingConfigResponsePtrType) ToClusterAutoscalingConfigResponsePtrOutput() ClusterAutoscalingConfigResponsePtrOutput {
	return i.ToClusterAutoscalingConfigResponsePtrOutputWithContext(context.Background())
}

func (i *clusterAutoscalingConfigResponsePtrType) ToClusterAutoscalingConfigResponsePtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingConfigResponsePtrOutput)
}

// Autoscaling config for a cluster.
type ClusterAutoscalingConfigResponseOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscalingConfigResponse)(nil)).Elem()
}

func (o ClusterAutoscalingConfigResponseOutput) ToClusterAutoscalingConfigResponseOutput() ClusterAutoscalingConfigResponseOutput {
	return o
}

func (o ClusterAutoscalingConfigResponseOutput) ToClusterAutoscalingConfigResponseOutputWithContext(ctx context.Context) ClusterAutoscalingConfigResponseOutput {
	return o
}

func (o ClusterAutoscalingConfigResponseOutput) ToClusterAutoscalingConfigResponsePtrOutput() ClusterAutoscalingConfigResponsePtrOutput {
	return o.ToClusterAutoscalingConfigResponsePtrOutputWithContext(context.Background())
}

func (o ClusterAutoscalingConfigResponseOutput) ToClusterAutoscalingConfigResponsePtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterAutoscalingConfigResponse) *ClusterAutoscalingConfigResponse {
		return &v
	}).(ClusterAutoscalingConfigResponsePtrOutput)
}

// Autoscaling limits for this cluster.
func (o ClusterAutoscalingConfigResponseOutput) AutoscalingLimits() AutoscalingLimitsResponseOutput {
	return o.ApplyT(func(v ClusterAutoscalingConfigResponse) AutoscalingLimitsResponse { return v.AutoscalingLimits }).(AutoscalingLimitsResponseOutput)
}

// Autoscaling targets for this cluster.
func (o ClusterAutoscalingConfigResponseOutput) AutoscalingTargets() AutoscalingTargetsResponseOutput {
	return o.ApplyT(func(v ClusterAutoscalingConfigResponse) AutoscalingTargetsResponse { return v.AutoscalingTargets }).(AutoscalingTargetsResponseOutput)
}

type ClusterAutoscalingConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscalingConfigResponse)(nil)).Elem()
}

func (o ClusterAutoscalingConfigResponsePtrOutput) ToClusterAutoscalingConfigResponsePtrOutput() ClusterAutoscalingConfigResponsePtrOutput {
	return o
}

func (o ClusterAutoscalingConfigResponsePtrOutput) ToClusterAutoscalingConfigResponsePtrOutputWithContext(ctx context.Context) ClusterAutoscalingConfigResponsePtrOutput {
	return o
}

func (o ClusterAutoscalingConfigResponsePtrOutput) Elem() ClusterAutoscalingConfigResponseOutput {
	return o.ApplyT(func(v *ClusterAutoscalingConfigResponse) ClusterAutoscalingConfigResponse {
		if v != nil {
			return *v
		}
		var ret ClusterAutoscalingConfigResponse
		return ret
	}).(ClusterAutoscalingConfigResponseOutput)
}

// Autoscaling limits for this cluster.
func (o ClusterAutoscalingConfigResponsePtrOutput) AutoscalingLimits() AutoscalingLimitsResponsePtrOutput {
	return o.ApplyT(func(v *ClusterAutoscalingConfigResponse) *AutoscalingLimitsResponse {
		if v == nil {
			return nil
		}
		return &v.AutoscalingLimits
	}).(AutoscalingLimitsResponsePtrOutput)
}

// Autoscaling targets for this cluster.
func (o ClusterAutoscalingConfigResponsePtrOutput) AutoscalingTargets() AutoscalingTargetsResponsePtrOutput {
	return o.ApplyT(func(v *ClusterAutoscalingConfigResponse) *AutoscalingTargetsResponse {
		if v == nil {
			return nil
		}
		return &v.AutoscalingTargets
	}).(AutoscalingTargetsResponsePtrOutput)
}

// Configuration for a cluster.
type ClusterConfig struct {
	// Autoscaling configuration for this cluster. Note that when creating or updating a cluster, exactly one of serve_nodes or cluster_autoscaling_config must be set. If serve_nodes is set, then serve_nodes is fixed and autoscaling is turned off. If cluster_autoscaling_config is set, then serve_nodes will be autoscaled.
	ClusterAutoscalingConfig *ClusterAutoscalingConfig `pulumi:"clusterAutoscalingConfig"`
}

// ClusterConfigInput is an input type that accepts ClusterConfigArgs and ClusterConfigOutput values.
// You can construct a concrete instance of `ClusterConfigInput` via:
//
//          ClusterConfigArgs{...}
type ClusterConfigInput interface {
	pulumi.Input

	ToClusterConfigOutput() ClusterConfigOutput
	ToClusterConfigOutputWithContext(context.Context) ClusterConfigOutput
}

// Configuration for a cluster.
type ClusterConfigArgs struct {
	// Autoscaling configuration for this cluster. Note that when creating or updating a cluster, exactly one of serve_nodes or cluster_autoscaling_config must be set. If serve_nodes is set, then serve_nodes is fixed and autoscaling is turned off. If cluster_autoscaling_config is set, then serve_nodes will be autoscaled.
	ClusterAutoscalingConfig ClusterAutoscalingConfigPtrInput `pulumi:"clusterAutoscalingConfig"`
}

func (ClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfig)(nil)).Elem()
}

func (i ClusterConfigArgs) ToClusterConfigOutput() ClusterConfigOutput {
	return i.ToClusterConfigOutputWithContext(context.Background())
}

func (i ClusterConfigArgs) ToClusterConfigOutputWithContext(ctx context.Context) ClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigOutput)
}

func (i ClusterConfigArgs) ToClusterConfigPtrOutput() ClusterConfigPtrOutput {
	return i.ToClusterConfigPtrOutputWithContext(context.Background())
}

func (i ClusterConfigArgs) ToClusterConfigPtrOutputWithContext(ctx context.Context) ClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigOutput).ToClusterConfigPtrOutputWithContext(ctx)
}

// ClusterConfigPtrInput is an input type that accepts ClusterConfigArgs, ClusterConfigPtr and ClusterConfigPtrOutput values.
// You can construct a concrete instance of `ClusterConfigPtrInput` via:
//
//          ClusterConfigArgs{...}
//
//  or:
//
//          nil
type ClusterConfigPtrInput interface {
	pulumi.Input

	ToClusterConfigPtrOutput() ClusterConfigPtrOutput
	ToClusterConfigPtrOutputWithContext(context.Context) ClusterConfigPtrOutput
}

type clusterConfigPtrType ClusterConfigArgs

func ClusterConfigPtr(v *ClusterConfigArgs) ClusterConfigPtrInput {
	return (*clusterConfigPtrType)(v)
}

func (*clusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfig)(nil)).Elem()
}

func (i *clusterConfigPtrType) ToClusterConfigPtrOutput() ClusterConfigPtrOutput {
	return i.ToClusterConfigPtrOutputWithContext(context.Background())
}

func (i *clusterConfigPtrType) ToClusterConfigPtrOutputWithContext(ctx context.Context) ClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigPtrOutput)
}

// Configuration for a cluster.
type ClusterConfigOutput struct{ *pulumi.OutputState }

func (ClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfig)(nil)).Elem()
}

func (o ClusterConfigOutput) ToClusterConfigOutput() ClusterConfigOutput {
	return o
}

func (o ClusterConfigOutput) ToClusterConfigOutputWithContext(ctx context.Context) ClusterConfigOutput {
	return o
}

func (o ClusterConfigOutput) ToClusterConfigPtrOutput() ClusterConfigPtrOutput {
	return o.ToClusterConfigPtrOutputWithContext(context.Background())
}

func (o ClusterConfigOutput) ToClusterConfigPtrOutputWithContext(ctx context.Context) ClusterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConfig) *ClusterConfig {
		return &v
	}).(ClusterConfigPtrOutput)
}

// Autoscaling configuration for this cluster. Note that when creating or updating a cluster, exactly one of serve_nodes or cluster_autoscaling_config must be set. If serve_nodes is set, then serve_nodes is fixed and autoscaling is turned off. If cluster_autoscaling_config is set, then serve_nodes will be autoscaled.
func (o ClusterConfigOutput) ClusterAutoscalingConfig() ClusterAutoscalingConfigPtrOutput {
	return o.ApplyT(func(v ClusterConfig) *ClusterAutoscalingConfig { return v.ClusterAutoscalingConfig }).(ClusterAutoscalingConfigPtrOutput)
}

type ClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfig)(nil)).Elem()
}

func (o ClusterConfigPtrOutput) ToClusterConfigPtrOutput() ClusterConfigPtrOutput {
	return o
}

func (o ClusterConfigPtrOutput) ToClusterConfigPtrOutputWithContext(ctx context.Context) ClusterConfigPtrOutput {
	return o
}

func (o ClusterConfigPtrOutput) Elem() ClusterConfigOutput {
	return o.ApplyT(func(v *ClusterConfig) ClusterConfig {
		if v != nil {
			return *v
		}
		var ret ClusterConfig
		return ret
	}).(ClusterConfigOutput)
}

// Autoscaling configuration for this cluster. Note that when creating or updating a cluster, exactly one of serve_nodes or cluster_autoscaling_config must be set. If serve_nodes is set, then serve_nodes is fixed and autoscaling is turned off. If cluster_autoscaling_config is set, then serve_nodes will be autoscaled.
func (o ClusterConfigPtrOutput) ClusterAutoscalingConfig() ClusterAutoscalingConfigPtrOutput {
	return o.ApplyT(func(v *ClusterConfig) *ClusterAutoscalingConfig {
		if v == nil {
			return nil
		}
		return v.ClusterAutoscalingConfig
	}).(ClusterAutoscalingConfigPtrOutput)
}

// Configuration for a cluster.
type ClusterConfigResponse struct {
	// Autoscaling configuration for this cluster. Note that when creating or updating a cluster, exactly one of serve_nodes or cluster_autoscaling_config must be set. If serve_nodes is set, then serve_nodes is fixed and autoscaling is turned off. If cluster_autoscaling_config is set, then serve_nodes will be autoscaled.
	ClusterAutoscalingConfig ClusterAutoscalingConfigResponse `pulumi:"clusterAutoscalingConfig"`
}

// ClusterConfigResponseInput is an input type that accepts ClusterConfigResponseArgs and ClusterConfigResponseOutput values.
// You can construct a concrete instance of `ClusterConfigResponseInput` via:
//
//          ClusterConfigResponseArgs{...}
type ClusterConfigResponseInput interface {
	pulumi.Input

	ToClusterConfigResponseOutput() ClusterConfigResponseOutput
	ToClusterConfigResponseOutputWithContext(context.Context) ClusterConfigResponseOutput
}

// Configuration for a cluster.
type ClusterConfigResponseArgs struct {
	// Autoscaling configuration for this cluster. Note that when creating or updating a cluster, exactly one of serve_nodes or cluster_autoscaling_config must be set. If serve_nodes is set, then serve_nodes is fixed and autoscaling is turned off. If cluster_autoscaling_config is set, then serve_nodes will be autoscaled.
	ClusterAutoscalingConfig ClusterAutoscalingConfigResponseInput `pulumi:"clusterAutoscalingConfig"`
}

func (ClusterConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigResponse)(nil)).Elem()
}

func (i ClusterConfigResponseArgs) ToClusterConfigResponseOutput() ClusterConfigResponseOutput {
	return i.ToClusterConfigResponseOutputWithContext(context.Background())
}

func (i ClusterConfigResponseArgs) ToClusterConfigResponseOutputWithContext(ctx context.Context) ClusterConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigResponseOutput)
}

func (i ClusterConfigResponseArgs) ToClusterConfigResponsePtrOutput() ClusterConfigResponsePtrOutput {
	return i.ToClusterConfigResponsePtrOutputWithContext(context.Background())
}

func (i ClusterConfigResponseArgs) ToClusterConfigResponsePtrOutputWithContext(ctx context.Context) ClusterConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigResponseOutput).ToClusterConfigResponsePtrOutputWithContext(ctx)
}

// ClusterConfigResponsePtrInput is an input type that accepts ClusterConfigResponseArgs, ClusterConfigResponsePtr and ClusterConfigResponsePtrOutput values.
// You can construct a concrete instance of `ClusterConfigResponsePtrInput` via:
//
//          ClusterConfigResponseArgs{...}
//
//  or:
//
//          nil
type ClusterConfigResponsePtrInput interface {
	pulumi.Input

	ToClusterConfigResponsePtrOutput() ClusterConfigResponsePtrOutput
	ToClusterConfigResponsePtrOutputWithContext(context.Context) ClusterConfigResponsePtrOutput
}

type clusterConfigResponsePtrType ClusterConfigResponseArgs

func ClusterConfigResponsePtr(v *ClusterConfigResponseArgs) ClusterConfigResponsePtrInput {
	return (*clusterConfigResponsePtrType)(v)
}

func (*clusterConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfigResponse)(nil)).Elem()
}

func (i *clusterConfigResponsePtrType) ToClusterConfigResponsePtrOutput() ClusterConfigResponsePtrOutput {
	return i.ToClusterConfigResponsePtrOutputWithContext(context.Background())
}

func (i *clusterConfigResponsePtrType) ToClusterConfigResponsePtrOutputWithContext(ctx context.Context) ClusterConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigResponsePtrOutput)
}

// Configuration for a cluster.
type ClusterConfigResponseOutput struct{ *pulumi.OutputState }

func (ClusterConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigResponse)(nil)).Elem()
}

func (o ClusterConfigResponseOutput) ToClusterConfigResponseOutput() ClusterConfigResponseOutput {
	return o
}

func (o ClusterConfigResponseOutput) ToClusterConfigResponseOutputWithContext(ctx context.Context) ClusterConfigResponseOutput {
	return o
}

func (o ClusterConfigResponseOutput) ToClusterConfigResponsePtrOutput() ClusterConfigResponsePtrOutput {
	return o.ToClusterConfigResponsePtrOutputWithContext(context.Background())
}

func (o ClusterConfigResponseOutput) ToClusterConfigResponsePtrOutputWithContext(ctx context.Context) ClusterConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConfigResponse) *ClusterConfigResponse {
		return &v
	}).(ClusterConfigResponsePtrOutput)
}

// Autoscaling configuration for this cluster. Note that when creating or updating a cluster, exactly one of serve_nodes or cluster_autoscaling_config must be set. If serve_nodes is set, then serve_nodes is fixed and autoscaling is turned off. If cluster_autoscaling_config is set, then serve_nodes will be autoscaled.
func (o ClusterConfigResponseOutput) ClusterAutoscalingConfig() ClusterAutoscalingConfigResponseOutput {
	return o.ApplyT(func(v ClusterConfigResponse) ClusterAutoscalingConfigResponse { return v.ClusterAutoscalingConfig }).(ClusterAutoscalingConfigResponseOutput)
}

type ClusterConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfigResponse)(nil)).Elem()
}

func (o ClusterConfigResponsePtrOutput) ToClusterConfigResponsePtrOutput() ClusterConfigResponsePtrOutput {
	return o
}

func (o ClusterConfigResponsePtrOutput) ToClusterConfigResponsePtrOutputWithContext(ctx context.Context) ClusterConfigResponsePtrOutput {
	return o
}

func (o ClusterConfigResponsePtrOutput) Elem() ClusterConfigResponseOutput {
	return o.ApplyT(func(v *ClusterConfigResponse) ClusterConfigResponse {
		if v != nil {
			return *v
		}
		var ret ClusterConfigResponse
		return ret
	}).(ClusterConfigResponseOutput)
}

// Autoscaling configuration for this cluster. Note that when creating or updating a cluster, exactly one of serve_nodes or cluster_autoscaling_config must be set. If serve_nodes is set, then serve_nodes is fixed and autoscaling is turned off. If cluster_autoscaling_config is set, then serve_nodes will be autoscaled.
func (o ClusterConfigResponsePtrOutput) ClusterAutoscalingConfig() ClusterAutoscalingConfigResponsePtrOutput {
	return o.ApplyT(func(v *ClusterConfigResponse) *ClusterAutoscalingConfigResponse {
		if v == nil {
			return nil
		}
		return &v.ClusterAutoscalingConfig
	}).(ClusterAutoscalingConfigResponsePtrOutput)
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfig struct {
	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigInput is an input type that accepts EncryptionConfigArgs and EncryptionConfigOutput values.
// You can construct a concrete instance of `EncryptionConfigInput` via:
//
//          EncryptionConfigArgs{...}
type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(context.Context) EncryptionConfigOutput
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigArgs struct {
	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput).ToEncryptionConfigPtrOutputWithContext(ctx)
}

// EncryptionConfigPtrInput is an input type that accepts EncryptionConfigArgs, EncryptionConfigPtr and EncryptionConfigPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigPtrInput` via:
//
//          EncryptionConfigArgs{...}
//
//  or:
//
//          nil
type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func EncryptionConfigPtr(v *EncryptionConfigArgs) EncryptionConfigPtrInput {
	return (*encryptionConfigPtrType)(v)
}

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
func (o EncryptionConfigOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig {
		if v != nil {
			return *v
		}
		var ret EncryptionConfig
		return ret
	}).(EncryptionConfigOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
func (o EncryptionConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigResponse struct {
	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// EncryptionConfigResponseInput is an input type that accepts EncryptionConfigResponseArgs and EncryptionConfigResponseOutput values.
// You can construct a concrete instance of `EncryptionConfigResponseInput` via:
//
//          EncryptionConfigResponseArgs{...}
type EncryptionConfigResponseInput interface {
	pulumi.Input

	ToEncryptionConfigResponseOutput() EncryptionConfigResponseOutput
	ToEncryptionConfigResponseOutputWithContext(context.Context) EncryptionConfigResponseOutput
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigResponseArgs struct {
	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigResponse)(nil)).Elem()
}

func (i EncryptionConfigResponseArgs) ToEncryptionConfigResponseOutput() EncryptionConfigResponseOutput {
	return i.ToEncryptionConfigResponseOutputWithContext(context.Background())
}

func (i EncryptionConfigResponseArgs) ToEncryptionConfigResponseOutputWithContext(ctx context.Context) EncryptionConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigResponseOutput)
}

func (i EncryptionConfigResponseArgs) ToEncryptionConfigResponsePtrOutput() EncryptionConfigResponsePtrOutput {
	return i.ToEncryptionConfigResponsePtrOutputWithContext(context.Background())
}

func (i EncryptionConfigResponseArgs) ToEncryptionConfigResponsePtrOutputWithContext(ctx context.Context) EncryptionConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigResponseOutput).ToEncryptionConfigResponsePtrOutputWithContext(ctx)
}

// EncryptionConfigResponsePtrInput is an input type that accepts EncryptionConfigResponseArgs, EncryptionConfigResponsePtr and EncryptionConfigResponsePtrOutput values.
// You can construct a concrete instance of `EncryptionConfigResponsePtrInput` via:
//
//          EncryptionConfigResponseArgs{...}
//
//  or:
//
//          nil
type EncryptionConfigResponsePtrInput interface {
	pulumi.Input

	ToEncryptionConfigResponsePtrOutput() EncryptionConfigResponsePtrOutput
	ToEncryptionConfigResponsePtrOutputWithContext(context.Context) EncryptionConfigResponsePtrOutput
}

type encryptionConfigResponsePtrType EncryptionConfigResponseArgs

func EncryptionConfigResponsePtr(v *EncryptionConfigResponseArgs) EncryptionConfigResponsePtrInput {
	return (*encryptionConfigResponsePtrType)(v)
}

func (*encryptionConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfigResponse)(nil)).Elem()
}

func (i *encryptionConfigResponsePtrType) ToEncryptionConfigResponsePtrOutput() EncryptionConfigResponsePtrOutput {
	return i.ToEncryptionConfigResponsePtrOutputWithContext(context.Background())
}

func (i *encryptionConfigResponsePtrType) ToEncryptionConfigResponsePtrOutputWithContext(ctx context.Context) EncryptionConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigResponsePtrOutput)
}

// Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.
type EncryptionConfigResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigResponse)(nil)).Elem()
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutput() EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutputWithContext(ctx context.Context) EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponsePtrOutput() EncryptionConfigResponsePtrOutput {
	return o.ToEncryptionConfigResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponsePtrOutputWithContext(ctx context.Context) EncryptionConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfigResponse) *EncryptionConfigResponse {
		return &v
	}).(EncryptionConfigResponsePtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
func (o EncryptionConfigResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type EncryptionConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfigResponse)(nil)).Elem()
}

func (o EncryptionConfigResponsePtrOutput) ToEncryptionConfigResponsePtrOutput() EncryptionConfigResponsePtrOutput {
	return o
}

func (o EncryptionConfigResponsePtrOutput) ToEncryptionConfigResponsePtrOutputWithContext(ctx context.Context) EncryptionConfigResponsePtrOutput {
	return o
}

func (o EncryptionConfigResponsePtrOutput) Elem() EncryptionConfigResponseOutput {
	return o.ApplyT(func(v *EncryptionConfigResponse) EncryptionConfigResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionConfigResponse
		return ret
	}).(EncryptionConfigResponseOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. 3) All clusters within an instance must use the same CMEK key. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`
func (o EncryptionConfigResponsePtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Encryption information for a given resource. If this resource is protected with customer managed encryption, the in-use Cloud Key Management Service (Cloud KMS) key version is specified along with its status.
type EncryptionInfoResponse struct {
	// The status of encrypt/decrypt calls on underlying data for this resource. Regardless of status, the existing data is always encrypted at rest.
	EncryptionStatus StatusResponse `pulumi:"encryptionStatus"`
	// The type of encryption used to protect this resource.
	EncryptionType string `pulumi:"encryptionType"`
	// The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.
	KmsKeyVersion string `pulumi:"kmsKeyVersion"`
}

// EncryptionInfoResponseInput is an input type that accepts EncryptionInfoResponseArgs and EncryptionInfoResponseOutput values.
// You can construct a concrete instance of `EncryptionInfoResponseInput` via:
//
//          EncryptionInfoResponseArgs{...}
type EncryptionInfoResponseInput interface {
	pulumi.Input

	ToEncryptionInfoResponseOutput() EncryptionInfoResponseOutput
	ToEncryptionInfoResponseOutputWithContext(context.Context) EncryptionInfoResponseOutput
}

// Encryption information for a given resource. If this resource is protected with customer managed encryption, the in-use Cloud Key Management Service (Cloud KMS) key version is specified along with its status.
type EncryptionInfoResponseArgs struct {
	// The status of encrypt/decrypt calls on underlying data for this resource. Regardless of status, the existing data is always encrypted at rest.
	EncryptionStatus StatusResponseInput `pulumi:"encryptionStatus"`
	// The type of encryption used to protect this resource.
	EncryptionType pulumi.StringInput `pulumi:"encryptionType"`
	// The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.
	KmsKeyVersion pulumi.StringInput `pulumi:"kmsKeyVersion"`
}

func (EncryptionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionInfoResponse)(nil)).Elem()
}

func (i EncryptionInfoResponseArgs) ToEncryptionInfoResponseOutput() EncryptionInfoResponseOutput {
	return i.ToEncryptionInfoResponseOutputWithContext(context.Background())
}

func (i EncryptionInfoResponseArgs) ToEncryptionInfoResponseOutputWithContext(ctx context.Context) EncryptionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionInfoResponseOutput)
}

func (i EncryptionInfoResponseArgs) ToEncryptionInfoResponsePtrOutput() EncryptionInfoResponsePtrOutput {
	return i.ToEncryptionInfoResponsePtrOutputWithContext(context.Background())
}

func (i EncryptionInfoResponseArgs) ToEncryptionInfoResponsePtrOutputWithContext(ctx context.Context) EncryptionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionInfoResponseOutput).ToEncryptionInfoResponsePtrOutputWithContext(ctx)
}

// EncryptionInfoResponsePtrInput is an input type that accepts EncryptionInfoResponseArgs, EncryptionInfoResponsePtr and EncryptionInfoResponsePtrOutput values.
// You can construct a concrete instance of `EncryptionInfoResponsePtrInput` via:
//
//          EncryptionInfoResponseArgs{...}
//
//  or:
//
//          nil
type EncryptionInfoResponsePtrInput interface {
	pulumi.Input

	ToEncryptionInfoResponsePtrOutput() EncryptionInfoResponsePtrOutput
	ToEncryptionInfoResponsePtrOutputWithContext(context.Context) EncryptionInfoResponsePtrOutput
}

type encryptionInfoResponsePtrType EncryptionInfoResponseArgs

func EncryptionInfoResponsePtr(v *EncryptionInfoResponseArgs) EncryptionInfoResponsePtrInput {
	return (*encryptionInfoResponsePtrType)(v)
}

func (*encryptionInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionInfoResponse)(nil)).Elem()
}

func (i *encryptionInfoResponsePtrType) ToEncryptionInfoResponsePtrOutput() EncryptionInfoResponsePtrOutput {
	return i.ToEncryptionInfoResponsePtrOutputWithContext(context.Background())
}

func (i *encryptionInfoResponsePtrType) ToEncryptionInfoResponsePtrOutputWithContext(ctx context.Context) EncryptionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionInfoResponsePtrOutput)
}

// Encryption information for a given resource. If this resource is protected with customer managed encryption, the in-use Cloud Key Management Service (Cloud KMS) key version is specified along with its status.
type EncryptionInfoResponseOutput struct{ *pulumi.OutputState }

func (EncryptionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionInfoResponse)(nil)).Elem()
}

func (o EncryptionInfoResponseOutput) ToEncryptionInfoResponseOutput() EncryptionInfoResponseOutput {
	return o
}

func (o EncryptionInfoResponseOutput) ToEncryptionInfoResponseOutputWithContext(ctx context.Context) EncryptionInfoResponseOutput {
	return o
}

func (o EncryptionInfoResponseOutput) ToEncryptionInfoResponsePtrOutput() EncryptionInfoResponsePtrOutput {
	return o.ToEncryptionInfoResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionInfoResponseOutput) ToEncryptionInfoResponsePtrOutputWithContext(ctx context.Context) EncryptionInfoResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionInfoResponse) *EncryptionInfoResponse {
		return &v
	}).(EncryptionInfoResponsePtrOutput)
}

// The status of encrypt/decrypt calls on underlying data for this resource. Regardless of status, the existing data is always encrypted at rest.
func (o EncryptionInfoResponseOutput) EncryptionStatus() StatusResponseOutput {
	return o.ApplyT(func(v EncryptionInfoResponse) StatusResponse { return v.EncryptionStatus }).(StatusResponseOutput)
}

// The type of encryption used to protect this resource.
func (o EncryptionInfoResponseOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionInfoResponse) string { return v.EncryptionType }).(pulumi.StringOutput)
}

// The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.
func (o EncryptionInfoResponseOutput) KmsKeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionInfoResponse) string { return v.KmsKeyVersion }).(pulumi.StringOutput)
}

type EncryptionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionInfoResponse)(nil)).Elem()
}

func (o EncryptionInfoResponsePtrOutput) ToEncryptionInfoResponsePtrOutput() EncryptionInfoResponsePtrOutput {
	return o
}

func (o EncryptionInfoResponsePtrOutput) ToEncryptionInfoResponsePtrOutputWithContext(ctx context.Context) EncryptionInfoResponsePtrOutput {
	return o
}

func (o EncryptionInfoResponsePtrOutput) Elem() EncryptionInfoResponseOutput {
	return o.ApplyT(func(v *EncryptionInfoResponse) EncryptionInfoResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionInfoResponse
		return ret
	}).(EncryptionInfoResponseOutput)
}

// The status of encrypt/decrypt calls on underlying data for this resource. Regardless of status, the existing data is always encrypted at rest.
func (o EncryptionInfoResponsePtrOutput) EncryptionStatus() StatusResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionInfoResponse) *StatusResponse {
		if v == nil {
			return nil
		}
		return &v.EncryptionStatus
	}).(StatusResponsePtrOutput)
}

// The type of encryption used to protect this resource.
func (o EncryptionInfoResponsePtrOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EncryptionType
	}).(pulumi.StringPtrOutput)
}

// The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.
func (o EncryptionInfoResponsePtrOutput) KmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyVersion
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// ExprResponseInput is an input type that accepts ExprResponseArgs and ExprResponseOutput values.
// You can construct a concrete instance of `ExprResponseInput` via:
//
//          ExprResponseArgs{...}
type ExprResponseInput interface {
	pulumi.Input

	ToExprResponseOutput() ExprResponseOutput
	ToExprResponseOutputWithContext(context.Context) ExprResponseOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ExprResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (i ExprResponseArgs) ToExprResponseOutput() ExprResponseOutput {
	return i.ToExprResponseOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAny struct {
	// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
	ClusterIds []string `pulumi:"clusterIds"`
}

// MultiClusterRoutingUseAnyInput is an input type that accepts MultiClusterRoutingUseAnyArgs and MultiClusterRoutingUseAnyOutput values.
// You can construct a concrete instance of `MultiClusterRoutingUseAnyInput` via:
//
//          MultiClusterRoutingUseAnyArgs{...}
type MultiClusterRoutingUseAnyInput interface {
	pulumi.Input

	ToMultiClusterRoutingUseAnyOutput() MultiClusterRoutingUseAnyOutput
	ToMultiClusterRoutingUseAnyOutputWithContext(context.Context) MultiClusterRoutingUseAnyOutput
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyArgs struct {
	// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
	ClusterIds pulumi.StringArrayInput `pulumi:"clusterIds"`
}

func (MultiClusterRoutingUseAnyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterRoutingUseAny)(nil)).Elem()
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyOutput() MultiClusterRoutingUseAnyOutput {
	return i.ToMultiClusterRoutingUseAnyOutputWithContext(context.Background())
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyOutput)
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return i.ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Background())
}

func (i MultiClusterRoutingUseAnyArgs) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyOutput).ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx)
}

// MultiClusterRoutingUseAnyPtrInput is an input type that accepts MultiClusterRoutingUseAnyArgs, MultiClusterRoutingUseAnyPtr and MultiClusterRoutingUseAnyPtrOutput values.
// You can construct a concrete instance of `MultiClusterRoutingUseAnyPtrInput` via:
//
//          MultiClusterRoutingUseAnyArgs{...}
//
//  or:
//
//          nil
type MultiClusterRoutingUseAnyPtrInput interface {
	pulumi.Input

	ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput
	ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Context) MultiClusterRoutingUseAnyPtrOutput
}

type multiClusterRoutingUseAnyPtrType MultiClusterRoutingUseAnyArgs

func MultiClusterRoutingUseAnyPtr(v *MultiClusterRoutingUseAnyArgs) MultiClusterRoutingUseAnyPtrInput {
	return (*multiClusterRoutingUseAnyPtrType)(v)
}

func (*multiClusterRoutingUseAnyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterRoutingUseAny)(nil)).Elem()
}

func (i *multiClusterRoutingUseAnyPtrType) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return i.ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Background())
}

func (i *multiClusterRoutingUseAnyPtrType) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyPtrOutput)
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyOutput struct{ *pulumi.OutputState }

func (MultiClusterRoutingUseAnyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterRoutingUseAny)(nil)).Elem()
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyOutput() MultiClusterRoutingUseAnyOutput {
	return o
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyOutput {
	return o
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return o.ToMultiClusterRoutingUseAnyPtrOutputWithContext(context.Background())
}

func (o MultiClusterRoutingUseAnyOutput) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiClusterRoutingUseAny) *MultiClusterRoutingUseAny {
		return &v
	}).(MultiClusterRoutingUseAnyPtrOutput)
}

// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
func (o MultiClusterRoutingUseAnyOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MultiClusterRoutingUseAny) []string { return v.ClusterIds }).(pulumi.StringArrayOutput)
}

type MultiClusterRoutingUseAnyPtrOutput struct{ *pulumi.OutputState }

func (MultiClusterRoutingUseAnyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterRoutingUseAny)(nil)).Elem()
}

func (o MultiClusterRoutingUseAnyPtrOutput) ToMultiClusterRoutingUseAnyPtrOutput() MultiClusterRoutingUseAnyPtrOutput {
	return o
}

func (o MultiClusterRoutingUseAnyPtrOutput) ToMultiClusterRoutingUseAnyPtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyPtrOutput {
	return o
}

func (o MultiClusterRoutingUseAnyPtrOutput) Elem() MultiClusterRoutingUseAnyOutput {
	return o.ApplyT(func(v *MultiClusterRoutingUseAny) MultiClusterRoutingUseAny {
		if v != nil {
			return *v
		}
		var ret MultiClusterRoutingUseAny
		return ret
	}).(MultiClusterRoutingUseAnyOutput)
}

// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
func (o MultiClusterRoutingUseAnyPtrOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MultiClusterRoutingUseAny) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIds
	}).(pulumi.StringArrayOutput)
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyResponse struct {
	// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
	ClusterIds []string `pulumi:"clusterIds"`
}

// MultiClusterRoutingUseAnyResponseInput is an input type that accepts MultiClusterRoutingUseAnyResponseArgs and MultiClusterRoutingUseAnyResponseOutput values.
// You can construct a concrete instance of `MultiClusterRoutingUseAnyResponseInput` via:
//
//          MultiClusterRoutingUseAnyResponseArgs{...}
type MultiClusterRoutingUseAnyResponseInput interface {
	pulumi.Input

	ToMultiClusterRoutingUseAnyResponseOutput() MultiClusterRoutingUseAnyResponseOutput
	ToMultiClusterRoutingUseAnyResponseOutputWithContext(context.Context) MultiClusterRoutingUseAnyResponseOutput
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyResponseArgs struct {
	// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
	ClusterIds pulumi.StringArrayInput `pulumi:"clusterIds"`
}

func (MultiClusterRoutingUseAnyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterRoutingUseAnyResponse)(nil)).Elem()
}

func (i MultiClusterRoutingUseAnyResponseArgs) ToMultiClusterRoutingUseAnyResponseOutput() MultiClusterRoutingUseAnyResponseOutput {
	return i.ToMultiClusterRoutingUseAnyResponseOutputWithContext(context.Background())
}

func (i MultiClusterRoutingUseAnyResponseArgs) ToMultiClusterRoutingUseAnyResponseOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyResponseOutput)
}

func (i MultiClusterRoutingUseAnyResponseArgs) ToMultiClusterRoutingUseAnyResponsePtrOutput() MultiClusterRoutingUseAnyResponsePtrOutput {
	return i.ToMultiClusterRoutingUseAnyResponsePtrOutputWithContext(context.Background())
}

func (i MultiClusterRoutingUseAnyResponseArgs) ToMultiClusterRoutingUseAnyResponsePtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyResponseOutput).ToMultiClusterRoutingUseAnyResponsePtrOutputWithContext(ctx)
}

// MultiClusterRoutingUseAnyResponsePtrInput is an input type that accepts MultiClusterRoutingUseAnyResponseArgs, MultiClusterRoutingUseAnyResponsePtr and MultiClusterRoutingUseAnyResponsePtrOutput values.
// You can construct a concrete instance of `MultiClusterRoutingUseAnyResponsePtrInput` via:
//
//          MultiClusterRoutingUseAnyResponseArgs{...}
//
//  or:
//
//          nil
type MultiClusterRoutingUseAnyResponsePtrInput interface {
	pulumi.Input

	ToMultiClusterRoutingUseAnyResponsePtrOutput() MultiClusterRoutingUseAnyResponsePtrOutput
	ToMultiClusterRoutingUseAnyResponsePtrOutputWithContext(context.Context) MultiClusterRoutingUseAnyResponsePtrOutput
}

type multiClusterRoutingUseAnyResponsePtrType MultiClusterRoutingUseAnyResponseArgs

func MultiClusterRoutingUseAnyResponsePtr(v *MultiClusterRoutingUseAnyResponseArgs) MultiClusterRoutingUseAnyResponsePtrInput {
	return (*multiClusterRoutingUseAnyResponsePtrType)(v)
}

func (*multiClusterRoutingUseAnyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterRoutingUseAnyResponse)(nil)).Elem()
}

func (i *multiClusterRoutingUseAnyResponsePtrType) ToMultiClusterRoutingUseAnyResponsePtrOutput() MultiClusterRoutingUseAnyResponsePtrOutput {
	return i.ToMultiClusterRoutingUseAnyResponsePtrOutputWithContext(context.Background())
}

func (i *multiClusterRoutingUseAnyResponsePtrType) ToMultiClusterRoutingUseAnyResponsePtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterRoutingUseAnyResponsePtrOutput)
}

// Read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes consistency to improve availability.
type MultiClusterRoutingUseAnyResponseOutput struct{ *pulumi.OutputState }

func (MultiClusterRoutingUseAnyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterRoutingUseAnyResponse)(nil)).Elem()
}

func (o MultiClusterRoutingUseAnyResponseOutput) ToMultiClusterRoutingUseAnyResponseOutput() MultiClusterRoutingUseAnyResponseOutput {
	return o
}

func (o MultiClusterRoutingUseAnyResponseOutput) ToMultiClusterRoutingUseAnyResponseOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyResponseOutput {
	return o
}

func (o MultiClusterRoutingUseAnyResponseOutput) ToMultiClusterRoutingUseAnyResponsePtrOutput() MultiClusterRoutingUseAnyResponsePtrOutput {
	return o.ToMultiClusterRoutingUseAnyResponsePtrOutputWithContext(context.Background())
}

func (o MultiClusterRoutingUseAnyResponseOutput) ToMultiClusterRoutingUseAnyResponsePtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiClusterRoutingUseAnyResponse) *MultiClusterRoutingUseAnyResponse {
		return &v
	}).(MultiClusterRoutingUseAnyResponsePtrOutput)
}

// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
func (o MultiClusterRoutingUseAnyResponseOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MultiClusterRoutingUseAnyResponse) []string { return v.ClusterIds }).(pulumi.StringArrayOutput)
}

type MultiClusterRoutingUseAnyResponsePtrOutput struct{ *pulumi.OutputState }

func (MultiClusterRoutingUseAnyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterRoutingUseAnyResponse)(nil)).Elem()
}

func (o MultiClusterRoutingUseAnyResponsePtrOutput) ToMultiClusterRoutingUseAnyResponsePtrOutput() MultiClusterRoutingUseAnyResponsePtrOutput {
	return o
}

func (o MultiClusterRoutingUseAnyResponsePtrOutput) ToMultiClusterRoutingUseAnyResponsePtrOutputWithContext(ctx context.Context) MultiClusterRoutingUseAnyResponsePtrOutput {
	return o
}

func (o MultiClusterRoutingUseAnyResponsePtrOutput) Elem() MultiClusterRoutingUseAnyResponseOutput {
	return o.ApplyT(func(v *MultiClusterRoutingUseAnyResponse) MultiClusterRoutingUseAnyResponse {
		if v != nil {
			return *v
		}
		var ret MultiClusterRoutingUseAnyResponse
		return ret
	}).(MultiClusterRoutingUseAnyResponseOutput)
}

// The set of clusters to route to. The order is ignored; clusters will be tried in order of distance. If left empty, all clusters are eligible.
func (o MultiClusterRoutingUseAnyResponsePtrOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MultiClusterRoutingUseAnyResponse) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIds
	}).(pulumi.StringArrayOutput)
}

// Information about a table restore.
type RestoreInfoResponse struct {
	// Information about the backup used to restore the table. The backup may no longer exist.
	BackupInfo BackupInfoResponse `pulumi:"backupInfo"`
	// The type of the restore source.
	SourceType string `pulumi:"sourceType"`
}

// RestoreInfoResponseInput is an input type that accepts RestoreInfoResponseArgs and RestoreInfoResponseOutput values.
// You can construct a concrete instance of `RestoreInfoResponseInput` via:
//
//          RestoreInfoResponseArgs{...}
type RestoreInfoResponseInput interface {
	pulumi.Input

	ToRestoreInfoResponseOutput() RestoreInfoResponseOutput
	ToRestoreInfoResponseOutputWithContext(context.Context) RestoreInfoResponseOutput
}

// Information about a table restore.
type RestoreInfoResponseArgs struct {
	// Information about the backup used to restore the table. The backup may no longer exist.
	BackupInfo BackupInfoResponseInput `pulumi:"backupInfo"`
	// The type of the restore source.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
}

func (RestoreInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreInfoResponse)(nil)).Elem()
}

func (i RestoreInfoResponseArgs) ToRestoreInfoResponseOutput() RestoreInfoResponseOutput {
	return i.ToRestoreInfoResponseOutputWithContext(context.Background())
}

func (i RestoreInfoResponseArgs) ToRestoreInfoResponseOutputWithContext(ctx context.Context) RestoreInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreInfoResponseOutput)
}

func (i RestoreInfoResponseArgs) ToRestoreInfoResponsePtrOutput() RestoreInfoResponsePtrOutput {
	return i.ToRestoreInfoResponsePtrOutputWithContext(context.Background())
}

func (i RestoreInfoResponseArgs) ToRestoreInfoResponsePtrOutputWithContext(ctx context.Context) RestoreInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreInfoResponseOutput).ToRestoreInfoResponsePtrOutputWithContext(ctx)
}

// RestoreInfoResponsePtrInput is an input type that accepts RestoreInfoResponseArgs, RestoreInfoResponsePtr and RestoreInfoResponsePtrOutput values.
// You can construct a concrete instance of `RestoreInfoResponsePtrInput` via:
//
//          RestoreInfoResponseArgs{...}
//
//  or:
//
//          nil
type RestoreInfoResponsePtrInput interface {
	pulumi.Input

	ToRestoreInfoResponsePtrOutput() RestoreInfoResponsePtrOutput
	ToRestoreInfoResponsePtrOutputWithContext(context.Context) RestoreInfoResponsePtrOutput
}

type restoreInfoResponsePtrType RestoreInfoResponseArgs

func RestoreInfoResponsePtr(v *RestoreInfoResponseArgs) RestoreInfoResponsePtrInput {
	return (*restoreInfoResponsePtrType)(v)
}

func (*restoreInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreInfoResponse)(nil)).Elem()
}

func (i *restoreInfoResponsePtrType) ToRestoreInfoResponsePtrOutput() RestoreInfoResponsePtrOutput {
	return i.ToRestoreInfoResponsePtrOutputWithContext(context.Background())
}

func (i *restoreInfoResponsePtrType) ToRestoreInfoResponsePtrOutputWithContext(ctx context.Context) RestoreInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreInfoResponsePtrOutput)
}

// Information about a table restore.
type RestoreInfoResponseOutput struct{ *pulumi.OutputState }

func (RestoreInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreInfoResponse)(nil)).Elem()
}

func (o RestoreInfoResponseOutput) ToRestoreInfoResponseOutput() RestoreInfoResponseOutput {
	return o
}

func (o RestoreInfoResponseOutput) ToRestoreInfoResponseOutputWithContext(ctx context.Context) RestoreInfoResponseOutput {
	return o
}

func (o RestoreInfoResponseOutput) ToRestoreInfoResponsePtrOutput() RestoreInfoResponsePtrOutput {
	return o.ToRestoreInfoResponsePtrOutputWithContext(context.Background())
}

func (o RestoreInfoResponseOutput) ToRestoreInfoResponsePtrOutputWithContext(ctx context.Context) RestoreInfoResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestoreInfoResponse) *RestoreInfoResponse {
		return &v
	}).(RestoreInfoResponsePtrOutput)
}

// Information about the backup used to restore the table. The backup may no longer exist.
func (o RestoreInfoResponseOutput) BackupInfo() BackupInfoResponseOutput {
	return o.ApplyT(func(v RestoreInfoResponse) BackupInfoResponse { return v.BackupInfo }).(BackupInfoResponseOutput)
}

// The type of the restore source.
func (o RestoreInfoResponseOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreInfoResponse) string { return v.SourceType }).(pulumi.StringOutput)
}

type RestoreInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (RestoreInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreInfoResponse)(nil)).Elem()
}

func (o RestoreInfoResponsePtrOutput) ToRestoreInfoResponsePtrOutput() RestoreInfoResponsePtrOutput {
	return o
}

func (o RestoreInfoResponsePtrOutput) ToRestoreInfoResponsePtrOutputWithContext(ctx context.Context) RestoreInfoResponsePtrOutput {
	return o
}

func (o RestoreInfoResponsePtrOutput) Elem() RestoreInfoResponseOutput {
	return o.ApplyT(func(v *RestoreInfoResponse) RestoreInfoResponse {
		if v != nil {
			return *v
		}
		var ret RestoreInfoResponse
		return ret
	}).(RestoreInfoResponseOutput)
}

// Information about the backup used to restore the table. The backup may no longer exist.
func (o RestoreInfoResponsePtrOutput) BackupInfo() BackupInfoResponsePtrOutput {
	return o.ApplyT(func(v *RestoreInfoResponse) *BackupInfoResponse {
		if v == nil {
			return nil
		}
		return &v.BackupInfo
	}).(BackupInfoResponsePtrOutput)
}

// The type of the restore source.
func (o RestoreInfoResponsePtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestoreInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.StringPtrOutput)
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRouting struct {
	// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites *bool `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId *string `pulumi:"clusterId"`
}

// SingleClusterRoutingInput is an input type that accepts SingleClusterRoutingArgs and SingleClusterRoutingOutput values.
// You can construct a concrete instance of `SingleClusterRoutingInput` via:
//
//          SingleClusterRoutingArgs{...}
type SingleClusterRoutingInput interface {
	pulumi.Input

	ToSingleClusterRoutingOutput() SingleClusterRoutingOutput
	ToSingleClusterRoutingOutputWithContext(context.Context) SingleClusterRoutingOutput
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingArgs struct {
	// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites pulumi.BoolPtrInput `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
}

func (SingleClusterRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleClusterRouting)(nil)).Elem()
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingOutput() SingleClusterRoutingOutput {
	return i.ToSingleClusterRoutingOutputWithContext(context.Background())
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingOutputWithContext(ctx context.Context) SingleClusterRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingOutput)
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return i.ToSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i SingleClusterRoutingArgs) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingOutput).ToSingleClusterRoutingPtrOutputWithContext(ctx)
}

// SingleClusterRoutingPtrInput is an input type that accepts SingleClusterRoutingArgs, SingleClusterRoutingPtr and SingleClusterRoutingPtrOutput values.
// You can construct a concrete instance of `SingleClusterRoutingPtrInput` via:
//
//          SingleClusterRoutingArgs{...}
//
//  or:
//
//          nil
type SingleClusterRoutingPtrInput interface {
	pulumi.Input

	ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput
	ToSingleClusterRoutingPtrOutputWithContext(context.Context) SingleClusterRoutingPtrOutput
}

type singleClusterRoutingPtrType SingleClusterRoutingArgs

func SingleClusterRoutingPtr(v *SingleClusterRoutingArgs) SingleClusterRoutingPtrInput {
	return (*singleClusterRoutingPtrType)(v)
}

func (*singleClusterRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleClusterRouting)(nil)).Elem()
}

func (i *singleClusterRoutingPtrType) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return i.ToSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (i *singleClusterRoutingPtrType) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingPtrOutput)
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingOutput struct{ *pulumi.OutputState }

func (SingleClusterRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleClusterRouting)(nil)).Elem()
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingOutput() SingleClusterRoutingOutput {
	return o
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingOutputWithContext(ctx context.Context) SingleClusterRoutingOutput {
	return o
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return o.ToSingleClusterRoutingPtrOutputWithContext(context.Background())
}

func (o SingleClusterRoutingOutput) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SingleClusterRouting) *SingleClusterRouting {
		return &v
	}).(SingleClusterRoutingPtrOutput)
}

// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o SingleClusterRoutingOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SingleClusterRouting) *bool { return v.AllowTransactionalWrites }).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o SingleClusterRoutingOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleClusterRouting) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

type SingleClusterRoutingPtrOutput struct{ *pulumi.OutputState }

func (SingleClusterRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleClusterRouting)(nil)).Elem()
}

func (o SingleClusterRoutingPtrOutput) ToSingleClusterRoutingPtrOutput() SingleClusterRoutingPtrOutput {
	return o
}

func (o SingleClusterRoutingPtrOutput) ToSingleClusterRoutingPtrOutputWithContext(ctx context.Context) SingleClusterRoutingPtrOutput {
	return o
}

func (o SingleClusterRoutingPtrOutput) Elem() SingleClusterRoutingOutput {
	return o.ApplyT(func(v *SingleClusterRouting) SingleClusterRouting {
		if v != nil {
			return *v
		}
		var ret SingleClusterRouting
		return ret
	}).(SingleClusterRoutingOutput)
}

// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o SingleClusterRoutingPtrOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SingleClusterRouting) *bool {
		if v == nil {
			return nil
		}
		return v.AllowTransactionalWrites
	}).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o SingleClusterRoutingPtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleClusterRouting) *string {
		if v == nil {
			return nil
		}
		return v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingResponse struct {
	// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites bool `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId string `pulumi:"clusterId"`
}

// SingleClusterRoutingResponseInput is an input type that accepts SingleClusterRoutingResponseArgs and SingleClusterRoutingResponseOutput values.
// You can construct a concrete instance of `SingleClusterRoutingResponseInput` via:
//
//          SingleClusterRoutingResponseArgs{...}
type SingleClusterRoutingResponseInput interface {
	pulumi.Input

	ToSingleClusterRoutingResponseOutput() SingleClusterRoutingResponseOutput
	ToSingleClusterRoutingResponseOutputWithContext(context.Context) SingleClusterRoutingResponseOutput
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingResponseArgs struct {
	// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
	AllowTransactionalWrites pulumi.BoolInput `pulumi:"allowTransactionalWrites"`
	// The cluster to which read/write requests should be routed.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
}

func (SingleClusterRoutingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleClusterRoutingResponse)(nil)).Elem()
}

func (i SingleClusterRoutingResponseArgs) ToSingleClusterRoutingResponseOutput() SingleClusterRoutingResponseOutput {
	return i.ToSingleClusterRoutingResponseOutputWithContext(context.Background())
}

func (i SingleClusterRoutingResponseArgs) ToSingleClusterRoutingResponseOutputWithContext(ctx context.Context) SingleClusterRoutingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingResponseOutput)
}

func (i SingleClusterRoutingResponseArgs) ToSingleClusterRoutingResponsePtrOutput() SingleClusterRoutingResponsePtrOutput {
	return i.ToSingleClusterRoutingResponsePtrOutputWithContext(context.Background())
}

func (i SingleClusterRoutingResponseArgs) ToSingleClusterRoutingResponsePtrOutputWithContext(ctx context.Context) SingleClusterRoutingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingResponseOutput).ToSingleClusterRoutingResponsePtrOutputWithContext(ctx)
}

// SingleClusterRoutingResponsePtrInput is an input type that accepts SingleClusterRoutingResponseArgs, SingleClusterRoutingResponsePtr and SingleClusterRoutingResponsePtrOutput values.
// You can construct a concrete instance of `SingleClusterRoutingResponsePtrInput` via:
//
//          SingleClusterRoutingResponseArgs{...}
//
//  or:
//
//          nil
type SingleClusterRoutingResponsePtrInput interface {
	pulumi.Input

	ToSingleClusterRoutingResponsePtrOutput() SingleClusterRoutingResponsePtrOutput
	ToSingleClusterRoutingResponsePtrOutputWithContext(context.Context) SingleClusterRoutingResponsePtrOutput
}

type singleClusterRoutingResponsePtrType SingleClusterRoutingResponseArgs

func SingleClusterRoutingResponsePtr(v *SingleClusterRoutingResponseArgs) SingleClusterRoutingResponsePtrInput {
	return (*singleClusterRoutingResponsePtrType)(v)
}

func (*singleClusterRoutingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleClusterRoutingResponse)(nil)).Elem()
}

func (i *singleClusterRoutingResponsePtrType) ToSingleClusterRoutingResponsePtrOutput() SingleClusterRoutingResponsePtrOutput {
	return i.ToSingleClusterRoutingResponsePtrOutputWithContext(context.Background())
}

func (i *singleClusterRoutingResponsePtrType) ToSingleClusterRoutingResponsePtrOutputWithContext(ctx context.Context) SingleClusterRoutingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleClusterRoutingResponsePtrOutput)
}

// Unconditionally routes all read/write requests to a specific cluster. This option preserves read-your-writes consistency but does not improve availability.
type SingleClusterRoutingResponseOutput struct{ *pulumi.OutputState }

func (SingleClusterRoutingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleClusterRoutingResponse)(nil)).Elem()
}

func (o SingleClusterRoutingResponseOutput) ToSingleClusterRoutingResponseOutput() SingleClusterRoutingResponseOutput {
	return o
}

func (o SingleClusterRoutingResponseOutput) ToSingleClusterRoutingResponseOutputWithContext(ctx context.Context) SingleClusterRoutingResponseOutput {
	return o
}

func (o SingleClusterRoutingResponseOutput) ToSingleClusterRoutingResponsePtrOutput() SingleClusterRoutingResponsePtrOutput {
	return o.ToSingleClusterRoutingResponsePtrOutputWithContext(context.Background())
}

func (o SingleClusterRoutingResponseOutput) ToSingleClusterRoutingResponsePtrOutputWithContext(ctx context.Context) SingleClusterRoutingResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SingleClusterRoutingResponse) *SingleClusterRoutingResponse {
		return &v
	}).(SingleClusterRoutingResponsePtrOutput)
}

// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o SingleClusterRoutingResponseOutput) AllowTransactionalWrites() pulumi.BoolOutput {
	return o.ApplyT(func(v SingleClusterRoutingResponse) bool { return v.AllowTransactionalWrites }).(pulumi.BoolOutput)
}

// The cluster to which read/write requests should be routed.
func (o SingleClusterRoutingResponseOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v SingleClusterRoutingResponse) string { return v.ClusterId }).(pulumi.StringOutput)
}

type SingleClusterRoutingResponsePtrOutput struct{ *pulumi.OutputState }

func (SingleClusterRoutingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleClusterRoutingResponse)(nil)).Elem()
}

func (o SingleClusterRoutingResponsePtrOutput) ToSingleClusterRoutingResponsePtrOutput() SingleClusterRoutingResponsePtrOutput {
	return o
}

func (o SingleClusterRoutingResponsePtrOutput) ToSingleClusterRoutingResponsePtrOutputWithContext(ctx context.Context) SingleClusterRoutingResponsePtrOutput {
	return o
}

func (o SingleClusterRoutingResponsePtrOutput) Elem() SingleClusterRoutingResponseOutput {
	return o.ApplyT(func(v *SingleClusterRoutingResponse) SingleClusterRoutingResponse {
		if v != nil {
			return *v
		}
		var ret SingleClusterRoutingResponse
		return ret
	}).(SingleClusterRoutingResponseOutput)
}

// Whether or not `CheckAndMutateRow` and `ReadModifyWriteRow` requests are allowed by this app profile. It is unsafe to send these requests to the same table/row/column in multiple clusters.
func (o SingleClusterRoutingResponsePtrOutput) AllowTransactionalWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SingleClusterRoutingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowTransactionalWrites
	}).(pulumi.BoolPtrOutput)
}

// The cluster to which read/write requests should be routed.
func (o SingleClusterRoutingResponsePtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleClusterRoutingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// An initial split point for a newly created table.
type Split struct {
	// Row key to use as an initial tablet boundary.
	Key *string `pulumi:"key"`
}

// SplitInput is an input type that accepts SplitArgs and SplitOutput values.
// You can construct a concrete instance of `SplitInput` via:
//
//          SplitArgs{...}
type SplitInput interface {
	pulumi.Input

	ToSplitOutput() SplitOutput
	ToSplitOutputWithContext(context.Context) SplitOutput
}

// An initial split point for a newly created table.
type SplitArgs struct {
	// Row key to use as an initial tablet boundary.
	Key pulumi.StringPtrInput `pulumi:"key"`
}

func (SplitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Split)(nil)).Elem()
}

func (i SplitArgs) ToSplitOutput() SplitOutput {
	return i.ToSplitOutputWithContext(context.Background())
}

func (i SplitArgs) ToSplitOutputWithContext(ctx context.Context) SplitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SplitOutput)
}

// SplitArrayInput is an input type that accepts SplitArray and SplitArrayOutput values.
// You can construct a concrete instance of `SplitArrayInput` via:
//
//          SplitArray{ SplitArgs{...} }
type SplitArrayInput interface {
	pulumi.Input

	ToSplitArrayOutput() SplitArrayOutput
	ToSplitArrayOutputWithContext(context.Context) SplitArrayOutput
}

type SplitArray []SplitInput

func (SplitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Split)(nil)).Elem()
}

func (i SplitArray) ToSplitArrayOutput() SplitArrayOutput {
	return i.ToSplitArrayOutputWithContext(context.Background())
}

func (i SplitArray) ToSplitArrayOutputWithContext(ctx context.Context) SplitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SplitArrayOutput)
}

// An initial split point for a newly created table.
type SplitOutput struct{ *pulumi.OutputState }

func (SplitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Split)(nil)).Elem()
}

func (o SplitOutput) ToSplitOutput() SplitOutput {
	return o
}

func (o SplitOutput) ToSplitOutputWithContext(ctx context.Context) SplitOutput {
	return o
}

// Row key to use as an initial tablet boundary.
func (o SplitOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Split) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type SplitArrayOutput struct{ *pulumi.OutputState }

func (SplitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Split)(nil)).Elem()
}

func (o SplitArrayOutput) ToSplitArrayOutput() SplitArrayOutput {
	return o
}

func (o SplitArrayOutput) ToSplitArrayOutputWithContext(ctx context.Context) SplitArrayOutput {
	return o
}

func (o SplitArrayOutput) Index(i pulumi.IntInput) SplitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Split {
		return vs[0].([]Split)[vs[1].(int)]
	}).(SplitOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// StatusResponseInput is an input type that accepts StatusResponseArgs and StatusResponseOutput values.
// You can construct a concrete instance of `StatusResponseInput` via:
//
//          StatusResponseArgs{...}
type StatusResponseInput interface {
	pulumi.Input

	ToStatusResponseOutput() StatusResponseOutput
	ToStatusResponseOutputWithContext(context.Context) StatusResponseOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringInput `pulumi:"message"`
}

func (StatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (i StatusResponseArgs) ToStatusResponseOutput() StatusResponseOutput {
	return i.ToStatusResponseOutputWithContext(context.Background())
}

func (i StatusResponseArgs) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponseOutput)
}

func (i StatusResponseArgs) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return i.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (i StatusResponseArgs) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponseOutput).ToStatusResponsePtrOutputWithContext(ctx)
}

// StatusResponsePtrInput is an input type that accepts StatusResponseArgs, StatusResponsePtr and StatusResponsePtrOutput values.
// You can construct a concrete instance of `StatusResponsePtrInput` via:
//
//          StatusResponseArgs{...}
//
//  or:
//
//          nil
type StatusResponsePtrInput interface {
	pulumi.Input

	ToStatusResponsePtrOutput() StatusResponsePtrOutput
	ToStatusResponsePtrOutputWithContext(context.Context) StatusResponsePtrOutput
}

type statusResponsePtrType StatusResponseArgs

func StatusResponsePtr(v *StatusResponseArgs) StatusResponsePtrInput {
	return (*statusResponsePtrType)(v)
}

func (*statusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusResponse)(nil)).Elem()
}

func (i *statusResponsePtrType) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return i.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (i *statusResponsePtrType) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponsePtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return o.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (o StatusResponseOutput) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatusResponse) *StatusResponse {
		return &v
	}).(StatusResponsePtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusResponsePtrOutput struct{ *pulumi.OutputState }

func (StatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusResponse)(nil)).Elem()
}

func (o StatusResponsePtrOutput) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return o
}

func (o StatusResponsePtrOutput) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return o
}

func (o StatusResponsePtrOutput) Elem() StatusResponseOutput {
	return o.ApplyT(func(v *StatusResponse) StatusResponse {
		if v != nil {
			return *v
		}
		var ret StatusResponse
		return ret
	}).(StatusResponseOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponsePtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatusResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponsePtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *StatusResponse) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigResponseInput)(nil)).Elem(), AuditConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigResponseArrayInput)(nil)).Elem(), AuditConfigResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigResponseInput)(nil)).Elem(), AuditLogConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigResponseArrayInput)(nil)).Elem(), AuditLogConfigResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingLimitsInput)(nil)).Elem(), AutoscalingLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingLimitsPtrInput)(nil)).Elem(), AutoscalingLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingLimitsResponseInput)(nil)).Elem(), AutoscalingLimitsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingLimitsResponsePtrInput)(nil)).Elem(), AutoscalingLimitsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTargetsInput)(nil)).Elem(), AutoscalingTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTargetsPtrInput)(nil)).Elem(), AutoscalingTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTargetsResponseInput)(nil)).Elem(), AutoscalingTargetsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTargetsResponsePtrInput)(nil)).Elem(), AutoscalingTargetsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInfoResponseInput)(nil)).Elem(), BackupInfoResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInfoResponsePtrInput)(nil)).Elem(), BackupInfoResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingResponseInput)(nil)).Elem(), BindingResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingResponseArrayInput)(nil)).Elem(), BindingResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAutoscalingConfigInput)(nil)).Elem(), ClusterAutoscalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAutoscalingConfigPtrInput)(nil)).Elem(), ClusterAutoscalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAutoscalingConfigResponseInput)(nil)).Elem(), ClusterAutoscalingConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAutoscalingConfigResponsePtrInput)(nil)).Elem(), ClusterAutoscalingConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigInput)(nil)).Elem(), ClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigPtrInput)(nil)).Elem(), ClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigResponseInput)(nil)).Elem(), ClusterConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigResponsePtrInput)(nil)).Elem(), ClusterConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigPtrInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigResponseInput)(nil)).Elem(), EncryptionConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigResponsePtrInput)(nil)).Elem(), EncryptionConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionInfoResponseInput)(nil)).Elem(), EncryptionInfoResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionInfoResponsePtrInput)(nil)).Elem(), EncryptionInfoResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprResponseInput)(nil)).Elem(), ExprResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiClusterRoutingUseAnyInput)(nil)).Elem(), MultiClusterRoutingUseAnyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiClusterRoutingUseAnyPtrInput)(nil)).Elem(), MultiClusterRoutingUseAnyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiClusterRoutingUseAnyResponseInput)(nil)).Elem(), MultiClusterRoutingUseAnyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiClusterRoutingUseAnyResponsePtrInput)(nil)).Elem(), MultiClusterRoutingUseAnyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestoreInfoResponseInput)(nil)).Elem(), RestoreInfoResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestoreInfoResponsePtrInput)(nil)).Elem(), RestoreInfoResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleClusterRoutingInput)(nil)).Elem(), SingleClusterRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleClusterRoutingPtrInput)(nil)).Elem(), SingleClusterRoutingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleClusterRoutingResponseInput)(nil)).Elem(), SingleClusterRoutingResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleClusterRoutingResponsePtrInput)(nil)).Elem(), SingleClusterRoutingResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SplitInput)(nil)).Elem(), SplitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SplitArrayInput)(nil)).Elem(), SplitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusResponseInput)(nil)).Elem(), StatusResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusResponsePtrInput)(nil)).Elem(), StatusResponseArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoscalingLimitsOutput{})
	pulumi.RegisterOutputType(AutoscalingLimitsPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingLimitsResponseOutput{})
	pulumi.RegisterOutputType(AutoscalingLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoscalingTargetsOutput{})
	pulumi.RegisterOutputType(AutoscalingTargetsPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingTargetsResponseOutput{})
	pulumi.RegisterOutputType(AutoscalingTargetsResponsePtrOutput{})
	pulumi.RegisterOutputType(BackupInfoResponseOutput{})
	pulumi.RegisterOutputType(BackupInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingConfigOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingConfigResponseOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterConfigOutput{})
	pulumi.RegisterOutputType(ClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterConfigResponseOutput{})
	pulumi.RegisterOutputType(ClusterConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionInfoResponseOutput{})
	pulumi.RegisterOutputType(EncryptionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(MultiClusterRoutingUseAnyOutput{})
	pulumi.RegisterOutputType(MultiClusterRoutingUseAnyPtrOutput{})
	pulumi.RegisterOutputType(MultiClusterRoutingUseAnyResponseOutput{})
	pulumi.RegisterOutputType(MultiClusterRoutingUseAnyResponsePtrOutput{})
	pulumi.RegisterOutputType(RestoreInfoResponseOutput{})
	pulumi.RegisterOutputType(RestoreInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SingleClusterRoutingOutput{})
	pulumi.RegisterOutputType(SingleClusterRoutingPtrOutput{})
	pulumi.RegisterOutputType(SingleClusterRoutingResponseOutput{})
	pulumi.RegisterOutputType(SingleClusterRoutingResponsePtrOutput{})
	pulumi.RegisterOutputType(SplitOutput{})
	pulumi.RegisterOutputType(SplitArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StatusResponsePtrOutput{})
}
