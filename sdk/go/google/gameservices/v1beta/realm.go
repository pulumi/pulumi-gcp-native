// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new realm in a given project and location.
type Realm struct {
	pulumi.CustomResourceState

	// The creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Human readable description of the realm.
	Description pulumi.StringOutput `pulumi:"description"`
	// ETag of the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The labels associated with this realm. Each label is a key-value pair.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name of the realm, in the following form: `projects/{project}/locations/{location}/realms/{realm}`. For example, `projects/my-project/locations/{location}/realms/my-realm`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. Time zone where all policies targeting this realm are evaluated. The value of this field must be from the IANA time zone database: https://www.iana.org/time-zones.
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
	// The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRealm registers a new resource with the given unique name, arguments, and options.
func NewRealm(ctx *pulumi.Context,
	name string, args *RealmArgs, opts ...pulumi.ResourceOption) (*Realm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	if args.RealmsId == nil {
		return nil, errors.New("invalid value for required argument 'RealmsId'")
	}
	var resource Realm
	err := ctx.RegisterResource("google-native:gameservices/v1beta:Realm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealm gets an existing Realm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealmState, opts ...pulumi.ResourceOption) (*Realm, error) {
	var resource Realm
	err := ctx.ReadResource("google-native:gameservices/v1beta:Realm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Realm resources.
type realmState struct {
	// The creation time.
	CreateTime *string `pulumi:"createTime"`
	// Human readable description of the realm.
	Description *string `pulumi:"description"`
	// ETag of the resource.
	Etag *string `pulumi:"etag"`
	// The labels associated with this realm. Each label is a key-value pair.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the realm, in the following form: `projects/{project}/locations/{location}/realms/{realm}`. For example, `projects/my-project/locations/{location}/realms/my-realm`.
	Name *string `pulumi:"name"`
	// Required. Time zone where all policies targeting this realm are evaluated. The value of this field must be from the IANA time zone database: https://www.iana.org/time-zones.
	TimeZone *string `pulumi:"timeZone"`
	// The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

type RealmState struct {
	// The creation time.
	CreateTime pulumi.StringPtrInput
	// Human readable description of the realm.
	Description pulumi.StringPtrInput
	// ETag of the resource.
	Etag pulumi.StringPtrInput
	// The labels associated with this realm. Each label is a key-value pair.
	Labels pulumi.StringMapInput
	// The resource name of the realm, in the following form: `projects/{project}/locations/{location}/realms/{realm}`. For example, `projects/my-project/locations/{location}/realms/my-realm`.
	Name pulumi.StringPtrInput
	// Required. Time zone where all policies targeting this realm are evaluated. The value of this field must be from the IANA time zone database: https://www.iana.org/time-zones.
	TimeZone pulumi.StringPtrInput
	// The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (RealmState) ElementType() reflect.Type {
	return reflect.TypeOf((*realmState)(nil)).Elem()
}

type realmArgs struct {
	// Human readable description of the realm.
	Description *string `pulumi:"description"`
	// ETag of the resource.
	Etag *string `pulumi:"etag"`
	// The labels associated with this realm. Each label is a key-value pair.
	Labels      map[string]string `pulumi:"labels"`
	LocationsId string            `pulumi:"locationsId"`
	// The resource name of the realm, in the following form: `projects/{project}/locations/{location}/realms/{realm}`. For example, `projects/my-project/locations/{location}/realms/my-realm`.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	RealmId    string  `pulumi:"realmId"`
	RealmsId   string  `pulumi:"realmsId"`
	// Required. Time zone where all policies targeting this realm are evaluated. The value of this field must be from the IANA time zone database: https://www.iana.org/time-zones.
	TimeZone *string `pulumi:"timeZone"`
}

// The set of arguments for constructing a Realm resource.
type RealmArgs struct {
	// Human readable description of the realm.
	Description pulumi.StringPtrInput
	// ETag of the resource.
	Etag pulumi.StringPtrInput
	// The labels associated with this realm. Each label is a key-value pair.
	Labels      pulumi.StringMapInput
	LocationsId pulumi.StringInput
	// The resource name of the realm, in the following form: `projects/{project}/locations/{location}/realms/{realm}`. For example, `projects/my-project/locations/{location}/realms/my-realm`.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	RealmId    pulumi.StringInput
	RealmsId   pulumi.StringInput
	// Required. Time zone where all policies targeting this realm are evaluated. The value of this field must be from the IANA time zone database: https://www.iana.org/time-zones.
	TimeZone pulumi.StringPtrInput
}

func (RealmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realmArgs)(nil)).Elem()
}

type RealmInput interface {
	pulumi.Input

	ToRealmOutput() RealmOutput
	ToRealmOutputWithContext(ctx context.Context) RealmOutput
}

func (*Realm) ElementType() reflect.Type {
	return reflect.TypeOf((*Realm)(nil))
}

func (i *Realm) ToRealmOutput() RealmOutput {
	return i.ToRealmOutputWithContext(context.Background())
}

func (i *Realm) ToRealmOutputWithContext(ctx context.Context) RealmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmOutput)
}

type RealmOutput struct {
	*pulumi.OutputState
}

func (RealmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Realm)(nil))
}

func (o RealmOutput) ToRealmOutput() RealmOutput {
	return o
}

func (o RealmOutput) ToRealmOutputWithContext(ctx context.Context) RealmOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RealmOutput{})
}
