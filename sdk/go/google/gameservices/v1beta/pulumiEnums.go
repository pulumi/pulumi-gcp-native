// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The log type that this config enables.
type AuditLogConfigLogType string

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return pulumi.ToOutput(e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return e.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return AuditLogConfigLogType(e).ToAuditLogConfigLogTypeOutputWithContext(ctx).ToAuditLogConfigLogTypePtrOutputWithContext(ctx)
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuditLogConfigLogTypeOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuditLogConfigLogType) *AuditLogConfigLogType {
		return &v
	}).(AuditLogConfigLogTypePtrOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuditLogConfigLogTypePtrOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) Elem() AuditLogConfigLogTypeOutput {
	return o.ApplyT(func(v *AuditLogConfigLogType) AuditLogConfigLogType {
		if v != nil {
			return *v
		}
		var ret AuditLogConfigLogType
		return ret
	}).(AuditLogConfigLogTypeOutput)
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuditLogConfigLogType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuditLogConfigLogTypeInput is an input type that accepts values of the AuditLogConfigLogType enum
// A concrete instance of `AuditLogConfigLogTypeInput` can be one of the following:
//
//	AuditLogConfigLogTypeLogTypeUnspecified
//	AuditLogConfigLogTypeAdminRead
//	AuditLogConfigLogTypeDataWrite
//	AuditLogConfigLogTypeDataRead
type AuditLogConfigLogTypeInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput
	ToAuditLogConfigLogTypeOutputWithContext(context.Context) AuditLogConfigLogTypeOutput
}

var auditLogConfigLogTypePtrType = reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()

type AuditLogConfigLogTypePtrInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput
	ToAuditLogConfigLogTypePtrOutputWithContext(context.Context) AuditLogConfigLogTypePtrOutput
}

type auditLogConfigLogTypePtr string

func AuditLogConfigLogTypePtr(v string) AuditLogConfigLogTypePtrInput {
	return (*auditLogConfigLogTypePtr)(&v)
}

func (*auditLogConfigLogTypePtr) ElementType() reflect.Type {
	return auditLogConfigLogTypePtrType
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutput(in).(AuditLogConfigLogTypePtrOutput)
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuditLogConfigLogTypePtrOutput)
}

// The type of the permission that was checked.
type AuthorizationLoggingOptionsPermissionType string

const (
	// Default. Should not be used.
	AuthorizationLoggingOptionsPermissionTypePermissionTypeUnspecified = AuthorizationLoggingOptionsPermissionType("PERMISSION_TYPE_UNSPECIFIED")
	// A read of admin (meta) data.
	AuthorizationLoggingOptionsPermissionTypeAdminRead = AuthorizationLoggingOptionsPermissionType("ADMIN_READ")
	// A write of admin (meta) data.
	AuthorizationLoggingOptionsPermissionTypeAdminWrite = AuthorizationLoggingOptionsPermissionType("ADMIN_WRITE")
	// A read of standard data.
	AuthorizationLoggingOptionsPermissionTypeDataRead = AuthorizationLoggingOptionsPermissionType("DATA_READ")
	// A write of standard data.
	AuthorizationLoggingOptionsPermissionTypeDataWrite = AuthorizationLoggingOptionsPermissionType("DATA_WRITE")
)

func (AuthorizationLoggingOptionsPermissionType) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationLoggingOptionsPermissionType)(nil)).Elem()
}

func (e AuthorizationLoggingOptionsPermissionType) ToAuthorizationLoggingOptionsPermissionTypeOutput() AuthorizationLoggingOptionsPermissionTypeOutput {
	return pulumi.ToOutput(e).(AuthorizationLoggingOptionsPermissionTypeOutput)
}

func (e AuthorizationLoggingOptionsPermissionType) ToAuthorizationLoggingOptionsPermissionTypeOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPermissionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuthorizationLoggingOptionsPermissionTypeOutput)
}

func (e AuthorizationLoggingOptionsPermissionType) ToAuthorizationLoggingOptionsPermissionTypePtrOutput() AuthorizationLoggingOptionsPermissionTypePtrOutput {
	return e.ToAuthorizationLoggingOptionsPermissionTypePtrOutputWithContext(context.Background())
}

func (e AuthorizationLoggingOptionsPermissionType) ToAuthorizationLoggingOptionsPermissionTypePtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPermissionTypePtrOutput {
	return AuthorizationLoggingOptionsPermissionType(e).ToAuthorizationLoggingOptionsPermissionTypeOutputWithContext(ctx).ToAuthorizationLoggingOptionsPermissionTypePtrOutputWithContext(ctx)
}

func (e AuthorizationLoggingOptionsPermissionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthorizationLoggingOptionsPermissionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthorizationLoggingOptionsPermissionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuthorizationLoggingOptionsPermissionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuthorizationLoggingOptionsPermissionTypeOutput struct{ *pulumi.OutputState }

func (AuthorizationLoggingOptionsPermissionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationLoggingOptionsPermissionType)(nil)).Elem()
}

func (o AuthorizationLoggingOptionsPermissionTypeOutput) ToAuthorizationLoggingOptionsPermissionTypeOutput() AuthorizationLoggingOptionsPermissionTypeOutput {
	return o
}

func (o AuthorizationLoggingOptionsPermissionTypeOutput) ToAuthorizationLoggingOptionsPermissionTypeOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPermissionTypeOutput {
	return o
}

func (o AuthorizationLoggingOptionsPermissionTypeOutput) ToAuthorizationLoggingOptionsPermissionTypePtrOutput() AuthorizationLoggingOptionsPermissionTypePtrOutput {
	return o.ToAuthorizationLoggingOptionsPermissionTypePtrOutputWithContext(context.Background())
}

func (o AuthorizationLoggingOptionsPermissionTypeOutput) ToAuthorizationLoggingOptionsPermissionTypePtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPermissionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthorizationLoggingOptionsPermissionType) *AuthorizationLoggingOptionsPermissionType {
		return &v
	}).(AuthorizationLoggingOptionsPermissionTypePtrOutput)
}

func (o AuthorizationLoggingOptionsPermissionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuthorizationLoggingOptionsPermissionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuthorizationLoggingOptionsPermissionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuthorizationLoggingOptionsPermissionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuthorizationLoggingOptionsPermissionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuthorizationLoggingOptionsPermissionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuthorizationLoggingOptionsPermissionTypePtrOutput struct{ *pulumi.OutputState }

func (AuthorizationLoggingOptionsPermissionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationLoggingOptionsPermissionType)(nil)).Elem()
}

func (o AuthorizationLoggingOptionsPermissionTypePtrOutput) ToAuthorizationLoggingOptionsPermissionTypePtrOutput() AuthorizationLoggingOptionsPermissionTypePtrOutput {
	return o
}

func (o AuthorizationLoggingOptionsPermissionTypePtrOutput) ToAuthorizationLoggingOptionsPermissionTypePtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPermissionTypePtrOutput {
	return o
}

func (o AuthorizationLoggingOptionsPermissionTypePtrOutput) Elem() AuthorizationLoggingOptionsPermissionTypeOutput {
	return o.ApplyT(func(v *AuthorizationLoggingOptionsPermissionType) AuthorizationLoggingOptionsPermissionType {
		if v != nil {
			return *v
		}
		var ret AuthorizationLoggingOptionsPermissionType
		return ret
	}).(AuthorizationLoggingOptionsPermissionTypeOutput)
}

func (o AuthorizationLoggingOptionsPermissionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuthorizationLoggingOptionsPermissionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuthorizationLoggingOptionsPermissionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuthorizationLoggingOptionsPermissionTypeInput is an input type that accepts values of the AuthorizationLoggingOptionsPermissionType enum
// A concrete instance of `AuthorizationLoggingOptionsPermissionTypeInput` can be one of the following:
//
//	AuthorizationLoggingOptionsPermissionTypePermissionTypeUnspecified
//	AuthorizationLoggingOptionsPermissionTypeAdminRead
//	AuthorizationLoggingOptionsPermissionTypeAdminWrite
//	AuthorizationLoggingOptionsPermissionTypeDataRead
//	AuthorizationLoggingOptionsPermissionTypeDataWrite
type AuthorizationLoggingOptionsPermissionTypeInput interface {
	pulumi.Input

	ToAuthorizationLoggingOptionsPermissionTypeOutput() AuthorizationLoggingOptionsPermissionTypeOutput
	ToAuthorizationLoggingOptionsPermissionTypeOutputWithContext(context.Context) AuthorizationLoggingOptionsPermissionTypeOutput
}

var authorizationLoggingOptionsPermissionTypePtrType = reflect.TypeOf((**AuthorizationLoggingOptionsPermissionType)(nil)).Elem()

type AuthorizationLoggingOptionsPermissionTypePtrInput interface {
	pulumi.Input

	ToAuthorizationLoggingOptionsPermissionTypePtrOutput() AuthorizationLoggingOptionsPermissionTypePtrOutput
	ToAuthorizationLoggingOptionsPermissionTypePtrOutputWithContext(context.Context) AuthorizationLoggingOptionsPermissionTypePtrOutput
}

type authorizationLoggingOptionsPermissionTypePtr string

func AuthorizationLoggingOptionsPermissionTypePtr(v string) AuthorizationLoggingOptionsPermissionTypePtrInput {
	return (*authorizationLoggingOptionsPermissionTypePtr)(&v)
}

func (*authorizationLoggingOptionsPermissionTypePtr) ElementType() reflect.Type {
	return authorizationLoggingOptionsPermissionTypePtrType
}

func (in *authorizationLoggingOptionsPermissionTypePtr) ToAuthorizationLoggingOptionsPermissionTypePtrOutput() AuthorizationLoggingOptionsPermissionTypePtrOutput {
	return pulumi.ToOutput(in).(AuthorizationLoggingOptionsPermissionTypePtrOutput)
}

func (in *authorizationLoggingOptionsPermissionTypePtr) ToAuthorizationLoggingOptionsPermissionTypePtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPermissionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuthorizationLoggingOptionsPermissionTypePtrOutput)
}

// The log_name to populate in the Cloud Audit Record.
type CloudAuditOptionsLogName string

const (
	// Default. Should not be used.
	CloudAuditOptionsLogNameUnspecifiedLogName = CloudAuditOptionsLogName("UNSPECIFIED_LOG_NAME")
	// Corresponds to "cloudaudit.googleapis.com/activity"
	CloudAuditOptionsLogNameAdminActivity = CloudAuditOptionsLogName("ADMIN_ACTIVITY")
	// Corresponds to "cloudaudit.googleapis.com/data_access"
	CloudAuditOptionsLogNameDataAccess = CloudAuditOptionsLogName("DATA_ACCESS")
)

func (CloudAuditOptionsLogName) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditOptionsLogName)(nil)).Elem()
}

func (e CloudAuditOptionsLogName) ToCloudAuditOptionsLogNameOutput() CloudAuditOptionsLogNameOutput {
	return pulumi.ToOutput(e).(CloudAuditOptionsLogNameOutput)
}

func (e CloudAuditOptionsLogName) ToCloudAuditOptionsLogNameOutputWithContext(ctx context.Context) CloudAuditOptionsLogNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CloudAuditOptionsLogNameOutput)
}

func (e CloudAuditOptionsLogName) ToCloudAuditOptionsLogNamePtrOutput() CloudAuditOptionsLogNamePtrOutput {
	return e.ToCloudAuditOptionsLogNamePtrOutputWithContext(context.Background())
}

func (e CloudAuditOptionsLogName) ToCloudAuditOptionsLogNamePtrOutputWithContext(ctx context.Context) CloudAuditOptionsLogNamePtrOutput {
	return CloudAuditOptionsLogName(e).ToCloudAuditOptionsLogNameOutputWithContext(ctx).ToCloudAuditOptionsLogNamePtrOutputWithContext(ctx)
}

func (e CloudAuditOptionsLogName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CloudAuditOptionsLogName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CloudAuditOptionsLogName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CloudAuditOptionsLogName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CloudAuditOptionsLogNameOutput struct{ *pulumi.OutputState }

func (CloudAuditOptionsLogNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditOptionsLogName)(nil)).Elem()
}

func (o CloudAuditOptionsLogNameOutput) ToCloudAuditOptionsLogNameOutput() CloudAuditOptionsLogNameOutput {
	return o
}

func (o CloudAuditOptionsLogNameOutput) ToCloudAuditOptionsLogNameOutputWithContext(ctx context.Context) CloudAuditOptionsLogNameOutput {
	return o
}

func (o CloudAuditOptionsLogNameOutput) ToCloudAuditOptionsLogNamePtrOutput() CloudAuditOptionsLogNamePtrOutput {
	return o.ToCloudAuditOptionsLogNamePtrOutputWithContext(context.Background())
}

func (o CloudAuditOptionsLogNameOutput) ToCloudAuditOptionsLogNamePtrOutputWithContext(ctx context.Context) CloudAuditOptionsLogNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudAuditOptionsLogName) *CloudAuditOptionsLogName {
		return &v
	}).(CloudAuditOptionsLogNamePtrOutput)
}

func (o CloudAuditOptionsLogNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CloudAuditOptionsLogNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CloudAuditOptionsLogName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CloudAuditOptionsLogNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CloudAuditOptionsLogNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CloudAuditOptionsLogName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CloudAuditOptionsLogNamePtrOutput struct{ *pulumi.OutputState }

func (CloudAuditOptionsLogNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAuditOptionsLogName)(nil)).Elem()
}

func (o CloudAuditOptionsLogNamePtrOutput) ToCloudAuditOptionsLogNamePtrOutput() CloudAuditOptionsLogNamePtrOutput {
	return o
}

func (o CloudAuditOptionsLogNamePtrOutput) ToCloudAuditOptionsLogNamePtrOutputWithContext(ctx context.Context) CloudAuditOptionsLogNamePtrOutput {
	return o
}

func (o CloudAuditOptionsLogNamePtrOutput) Elem() CloudAuditOptionsLogNameOutput {
	return o.ApplyT(func(v *CloudAuditOptionsLogName) CloudAuditOptionsLogName {
		if v != nil {
			return *v
		}
		var ret CloudAuditOptionsLogName
		return ret
	}).(CloudAuditOptionsLogNameOutput)
}

func (o CloudAuditOptionsLogNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CloudAuditOptionsLogNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CloudAuditOptionsLogName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CloudAuditOptionsLogNameInput is an input type that accepts values of the CloudAuditOptionsLogName enum
// A concrete instance of `CloudAuditOptionsLogNameInput` can be one of the following:
//
//	CloudAuditOptionsLogNameUnspecifiedLogName
//	CloudAuditOptionsLogNameAdminActivity
//	CloudAuditOptionsLogNameDataAccess
type CloudAuditOptionsLogNameInput interface {
	pulumi.Input

	ToCloudAuditOptionsLogNameOutput() CloudAuditOptionsLogNameOutput
	ToCloudAuditOptionsLogNameOutputWithContext(context.Context) CloudAuditOptionsLogNameOutput
}

var cloudAuditOptionsLogNamePtrType = reflect.TypeOf((**CloudAuditOptionsLogName)(nil)).Elem()

type CloudAuditOptionsLogNamePtrInput interface {
	pulumi.Input

	ToCloudAuditOptionsLogNamePtrOutput() CloudAuditOptionsLogNamePtrOutput
	ToCloudAuditOptionsLogNamePtrOutputWithContext(context.Context) CloudAuditOptionsLogNamePtrOutput
}

type cloudAuditOptionsLogNamePtr string

func CloudAuditOptionsLogNamePtr(v string) CloudAuditOptionsLogNamePtrInput {
	return (*cloudAuditOptionsLogNamePtr)(&v)
}

func (*cloudAuditOptionsLogNamePtr) ElementType() reflect.Type {
	return cloudAuditOptionsLogNamePtrType
}

func (in *cloudAuditOptionsLogNamePtr) ToCloudAuditOptionsLogNamePtrOutput() CloudAuditOptionsLogNamePtrOutput {
	return pulumi.ToOutput(in).(CloudAuditOptionsLogNamePtrOutput)
}

func (in *cloudAuditOptionsLogNamePtr) ToCloudAuditOptionsLogNamePtrOutputWithContext(ctx context.Context) CloudAuditOptionsLogNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CloudAuditOptionsLogNamePtrOutput)
}

// Trusted attributes supplied by the IAM system.
type ConditionIam string

const (
	// Default non-attribute.
	ConditionIamNoAttr = ConditionIam("NO_ATTR")
	// Either principal or (if present) authority selector.
	ConditionIamAuthority = ConditionIam("AUTHORITY")
	// The principal (even if an authority selector is present), which must only be used for attribution, not authorization.
	ConditionIamAttribution = ConditionIam("ATTRIBUTION")
	// Any of the security realms in the IAMContext (go/security-realms). When used with IN, the condition indicates "any of the request's realms match one of the given values; with NOT_IN, "none of the realms match any of the given values". Note that a value can be: - 'self:campus' (i.e., clients that are in the same campus) - 'self:metro' (i.e., clients that are in the same metro) - 'self:cloud-region' (i.e., allow connections from clients that are in the same cloud region) - 'self:prod-region' (i.e., allow connections from clients that are in the same prod region) - 'guardians' (i.e., allow connections from its guardian realms. See go/security-realms-glossary#guardian for more information.) - 'self' [DEPRECATED] (i.e., allow connections from clients that are in the same security realm, which is currently but not guaranteed to be campus-sized) - a realm (e.g., 'campus-abc') - a realm group (e.g., 'realms-for-borg-cell-xx', see: go/realm-groups) A match is determined by a realm group membership check performed by a RealmAclRep object (go/realm-acl-howto). It is not permitted to grant access based on the *absence* of a realm, so realm conditions can only be used in a "positive" context (e.g., ALLOW/IN or DENY/NOT_IN).
	ConditionIamSecurityRealm = ConditionIam("SECURITY_REALM")
	// An approver (distinct from the requester) that has authorized this request. When used with IN, the condition indicates that one of the approvers associated with the request matches the specified principal, or is a member of the specified group. Approvers can only grant additional access, and are thus only used in a strictly positive context (e.g. ALLOW/IN or DENY/NOT_IN).
	ConditionIamApprover = ConditionIam("APPROVER")
	// What types of justifications have been supplied with this request. String values should match enum names from security.credentials.JustificationType, e.g. "MANUAL_STRING". It is not permitted to grant access based on the *absence* of a justification, so justification conditions can only be used in a "positive" context (e.g., ALLOW/IN or DENY/NOT_IN). Multiple justifications, e.g., a Buganizer ID and a manually-entered reason, are normal and supported.
	ConditionIamJustificationType = ConditionIam("JUSTIFICATION_TYPE")
	// What type of credentials have been supplied with this request. String values should match enum names from security_loas_l2.CredentialsType - currently, only CREDS_TYPE_EMERGENCY is supported. It is not permitted to grant access based on the *absence* of a credentials type, so the conditions can only be used in a "positive" context (e.g., ALLOW/IN or DENY/NOT_IN).
	ConditionIamCredentialsType = ConditionIam("CREDENTIALS_TYPE")
	// EXPERIMENTAL -- DO NOT USE. The conditions can only be used in a "positive" context (e.g., ALLOW/IN or DENY/NOT_IN).
	ConditionIamCredsAssertion = ConditionIam("CREDS_ASSERTION")
)

func (ConditionIam) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionIam)(nil)).Elem()
}

func (e ConditionIam) ToConditionIamOutput() ConditionIamOutput {
	return pulumi.ToOutput(e).(ConditionIamOutput)
}

func (e ConditionIam) ToConditionIamOutputWithContext(ctx context.Context) ConditionIamOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConditionIamOutput)
}

func (e ConditionIam) ToConditionIamPtrOutput() ConditionIamPtrOutput {
	return e.ToConditionIamPtrOutputWithContext(context.Background())
}

func (e ConditionIam) ToConditionIamPtrOutputWithContext(ctx context.Context) ConditionIamPtrOutput {
	return ConditionIam(e).ToConditionIamOutputWithContext(ctx).ToConditionIamPtrOutputWithContext(ctx)
}

func (e ConditionIam) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionIam) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionIam) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConditionIam) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConditionIamOutput struct{ *pulumi.OutputState }

func (ConditionIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionIam)(nil)).Elem()
}

func (o ConditionIamOutput) ToConditionIamOutput() ConditionIamOutput {
	return o
}

func (o ConditionIamOutput) ToConditionIamOutputWithContext(ctx context.Context) ConditionIamOutput {
	return o
}

func (o ConditionIamOutput) ToConditionIamPtrOutput() ConditionIamPtrOutput {
	return o.ToConditionIamPtrOutputWithContext(context.Background())
}

func (o ConditionIamOutput) ToConditionIamPtrOutputWithContext(ctx context.Context) ConditionIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConditionIam) *ConditionIam {
		return &v
	}).(ConditionIamPtrOutput)
}

func (o ConditionIamOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConditionIamOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConditionIam) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConditionIamOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConditionIamOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConditionIam) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConditionIamPtrOutput struct{ *pulumi.OutputState }

func (ConditionIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionIam)(nil)).Elem()
}

func (o ConditionIamPtrOutput) ToConditionIamPtrOutput() ConditionIamPtrOutput {
	return o
}

func (o ConditionIamPtrOutput) ToConditionIamPtrOutputWithContext(ctx context.Context) ConditionIamPtrOutput {
	return o
}

func (o ConditionIamPtrOutput) Elem() ConditionIamOutput {
	return o.ApplyT(func(v *ConditionIam) ConditionIam {
		if v != nil {
			return *v
		}
		var ret ConditionIam
		return ret
	}).(ConditionIamOutput)
}

func (o ConditionIamPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConditionIamPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConditionIam) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConditionIamInput is an input type that accepts values of the ConditionIam enum
// A concrete instance of `ConditionIamInput` can be one of the following:
//
//	ConditionIamNoAttr
//	ConditionIamAuthority
//	ConditionIamAttribution
//	ConditionIamSecurityRealm
//	ConditionIamApprover
//	ConditionIamJustificationType
//	ConditionIamCredentialsType
//	ConditionIamCredsAssertion
type ConditionIamInput interface {
	pulumi.Input

	ToConditionIamOutput() ConditionIamOutput
	ToConditionIamOutputWithContext(context.Context) ConditionIamOutput
}

var conditionIamPtrType = reflect.TypeOf((**ConditionIam)(nil)).Elem()

type ConditionIamPtrInput interface {
	pulumi.Input

	ToConditionIamPtrOutput() ConditionIamPtrOutput
	ToConditionIamPtrOutputWithContext(context.Context) ConditionIamPtrOutput
}

type conditionIamPtr string

func ConditionIamPtr(v string) ConditionIamPtrInput {
	return (*conditionIamPtr)(&v)
}

func (*conditionIamPtr) ElementType() reflect.Type {
	return conditionIamPtrType
}

func (in *conditionIamPtr) ToConditionIamPtrOutput() ConditionIamPtrOutput {
	return pulumi.ToOutput(in).(ConditionIamPtrOutput)
}

func (in *conditionIamPtr) ToConditionIamPtrOutputWithContext(ctx context.Context) ConditionIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConditionIamPtrOutput)
}

// An operator to apply the subject with.
type ConditionOp string

const (
	// Default no-op.
	ConditionOpNoOp = ConditionOp("NO_OP")
	// DEPRECATED. Use IN instead.
	ConditionOpEquals = ConditionOp("EQUALS")
	// DEPRECATED. Use NOT_IN instead.
	ConditionOpNotEquals = ConditionOp("NOT_EQUALS")
	// The condition is true if the subject (or any element of it if it is a set) matches any of the supplied values.
	ConditionOpIn = ConditionOp("IN")
	// The condition is true if the subject (or every element of it if it is a set) matches none of the supplied values.
	ConditionOpNotIn = ConditionOp("NOT_IN")
	// Subject is discharged
	ConditionOpDischarged = ConditionOp("DISCHARGED")
)

func (ConditionOp) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionOp)(nil)).Elem()
}

func (e ConditionOp) ToConditionOpOutput() ConditionOpOutput {
	return pulumi.ToOutput(e).(ConditionOpOutput)
}

func (e ConditionOp) ToConditionOpOutputWithContext(ctx context.Context) ConditionOpOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConditionOpOutput)
}

func (e ConditionOp) ToConditionOpPtrOutput() ConditionOpPtrOutput {
	return e.ToConditionOpPtrOutputWithContext(context.Background())
}

func (e ConditionOp) ToConditionOpPtrOutputWithContext(ctx context.Context) ConditionOpPtrOutput {
	return ConditionOp(e).ToConditionOpOutputWithContext(ctx).ToConditionOpPtrOutputWithContext(ctx)
}

func (e ConditionOp) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionOp) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionOp) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConditionOp) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConditionOpOutput struct{ *pulumi.OutputState }

func (ConditionOpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionOp)(nil)).Elem()
}

func (o ConditionOpOutput) ToConditionOpOutput() ConditionOpOutput {
	return o
}

func (o ConditionOpOutput) ToConditionOpOutputWithContext(ctx context.Context) ConditionOpOutput {
	return o
}

func (o ConditionOpOutput) ToConditionOpPtrOutput() ConditionOpPtrOutput {
	return o.ToConditionOpPtrOutputWithContext(context.Background())
}

func (o ConditionOpOutput) ToConditionOpPtrOutputWithContext(ctx context.Context) ConditionOpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConditionOp) *ConditionOp {
		return &v
	}).(ConditionOpPtrOutput)
}

func (o ConditionOpOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConditionOpOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConditionOp) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConditionOpOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConditionOpOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConditionOp) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConditionOpPtrOutput struct{ *pulumi.OutputState }

func (ConditionOpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionOp)(nil)).Elem()
}

func (o ConditionOpPtrOutput) ToConditionOpPtrOutput() ConditionOpPtrOutput {
	return o
}

func (o ConditionOpPtrOutput) ToConditionOpPtrOutputWithContext(ctx context.Context) ConditionOpPtrOutput {
	return o
}

func (o ConditionOpPtrOutput) Elem() ConditionOpOutput {
	return o.ApplyT(func(v *ConditionOp) ConditionOp {
		if v != nil {
			return *v
		}
		var ret ConditionOp
		return ret
	}).(ConditionOpOutput)
}

func (o ConditionOpPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConditionOpPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConditionOp) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConditionOpInput is an input type that accepts values of the ConditionOp enum
// A concrete instance of `ConditionOpInput` can be one of the following:
//
//	ConditionOpNoOp
//	ConditionOpEquals
//	ConditionOpNotEquals
//	ConditionOpIn
//	ConditionOpNotIn
//	ConditionOpDischarged
type ConditionOpInput interface {
	pulumi.Input

	ToConditionOpOutput() ConditionOpOutput
	ToConditionOpOutputWithContext(context.Context) ConditionOpOutput
}

var conditionOpPtrType = reflect.TypeOf((**ConditionOp)(nil)).Elem()

type ConditionOpPtrInput interface {
	pulumi.Input

	ToConditionOpPtrOutput() ConditionOpPtrOutput
	ToConditionOpPtrOutputWithContext(context.Context) ConditionOpPtrOutput
}

type conditionOpPtr string

func ConditionOpPtr(v string) ConditionOpPtrInput {
	return (*conditionOpPtr)(&v)
}

func (*conditionOpPtr) ElementType() reflect.Type {
	return conditionOpPtrType
}

func (in *conditionOpPtr) ToConditionOpPtrOutput() ConditionOpPtrOutput {
	return pulumi.ToOutput(in).(ConditionOpPtrOutput)
}

func (in *conditionOpPtr) ToConditionOpPtrOutputWithContext(ctx context.Context) ConditionOpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConditionOpPtrOutput)
}

// Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
type ConditionSys string

const (
	// Default non-attribute type
	ConditionSysNoAttr = ConditionSys("NO_ATTR")
	// Region of the resource
	ConditionSysRegion = ConditionSys("REGION")
	// Service name
	ConditionSysService = ConditionSys("SERVICE")
	// Resource name
	ConditionSysName = ConditionSys("NAME")
	// IP address of the caller
	ConditionSysIp = ConditionSys("IP")
)

func (ConditionSys) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionSys)(nil)).Elem()
}

func (e ConditionSys) ToConditionSysOutput() ConditionSysOutput {
	return pulumi.ToOutput(e).(ConditionSysOutput)
}

func (e ConditionSys) ToConditionSysOutputWithContext(ctx context.Context) ConditionSysOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConditionSysOutput)
}

func (e ConditionSys) ToConditionSysPtrOutput() ConditionSysPtrOutput {
	return e.ToConditionSysPtrOutputWithContext(context.Background())
}

func (e ConditionSys) ToConditionSysPtrOutputWithContext(ctx context.Context) ConditionSysPtrOutput {
	return ConditionSys(e).ToConditionSysOutputWithContext(ctx).ToConditionSysPtrOutputWithContext(ctx)
}

func (e ConditionSys) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionSys) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionSys) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConditionSys) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConditionSysOutput struct{ *pulumi.OutputState }

func (ConditionSysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionSys)(nil)).Elem()
}

func (o ConditionSysOutput) ToConditionSysOutput() ConditionSysOutput {
	return o
}

func (o ConditionSysOutput) ToConditionSysOutputWithContext(ctx context.Context) ConditionSysOutput {
	return o
}

func (o ConditionSysOutput) ToConditionSysPtrOutput() ConditionSysPtrOutput {
	return o.ToConditionSysPtrOutputWithContext(context.Background())
}

func (o ConditionSysOutput) ToConditionSysPtrOutputWithContext(ctx context.Context) ConditionSysPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConditionSys) *ConditionSys {
		return &v
	}).(ConditionSysPtrOutput)
}

func (o ConditionSysOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConditionSysOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConditionSys) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConditionSysOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConditionSysOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConditionSys) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConditionSysPtrOutput struct{ *pulumi.OutputState }

func (ConditionSysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionSys)(nil)).Elem()
}

func (o ConditionSysPtrOutput) ToConditionSysPtrOutput() ConditionSysPtrOutput {
	return o
}

func (o ConditionSysPtrOutput) ToConditionSysPtrOutputWithContext(ctx context.Context) ConditionSysPtrOutput {
	return o
}

func (o ConditionSysPtrOutput) Elem() ConditionSysOutput {
	return o.ApplyT(func(v *ConditionSys) ConditionSys {
		if v != nil {
			return *v
		}
		var ret ConditionSys
		return ret
	}).(ConditionSysOutput)
}

func (o ConditionSysPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConditionSysPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConditionSys) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConditionSysInput is an input type that accepts values of the ConditionSys enum
// A concrete instance of `ConditionSysInput` can be one of the following:
//
//	ConditionSysNoAttr
//	ConditionSysRegion
//	ConditionSysService
//	ConditionSysName
//	ConditionSysIp
type ConditionSysInput interface {
	pulumi.Input

	ToConditionSysOutput() ConditionSysOutput
	ToConditionSysOutputWithContext(context.Context) ConditionSysOutput
}

var conditionSysPtrType = reflect.TypeOf((**ConditionSys)(nil)).Elem()

type ConditionSysPtrInput interface {
	pulumi.Input

	ToConditionSysPtrOutput() ConditionSysPtrOutput
	ToConditionSysPtrOutputWithContext(context.Context) ConditionSysPtrOutput
}

type conditionSysPtr string

func ConditionSysPtr(v string) ConditionSysPtrInput {
	return (*conditionSysPtr)(&v)
}

func (*conditionSysPtr) ElementType() reflect.Type {
	return conditionSysPtrType
}

func (in *conditionSysPtr) ToConditionSysPtrOutput() ConditionSysPtrOutput {
	return pulumi.ToOutput(in).(ConditionSysPtrOutput)
}

func (in *conditionSysPtr) ToConditionSysPtrOutputWithContext(ctx context.Context) ConditionSysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConditionSysPtrOutput)
}

type DataAccessOptionsLogMode string

const (
	// Client is not required to write a partial Gin log immediately after the authorization check. If client chooses to write one and it fails, client may either fail open (allow the operation to continue) or fail closed (handle as a DENY outcome).
	DataAccessOptionsLogModeLogModeUnspecified = DataAccessOptionsLogMode("LOG_MODE_UNSPECIFIED")
	// The application's operation in the context of which this authorization check is being made may only be performed if it is successfully logged to Gin. For instance, the authorization library may satisfy this obligation by emitting a partial log entry at authorization check time and only returning ALLOW to the application if it succeeds. If a matching Rule has this directive, but the client has not indicated that it will honor such requirements, then the IAM check will result in authorization failure by setting CheckPolicyResponse.success=false.
	DataAccessOptionsLogModeLogFailClosed = DataAccessOptionsLogMode("LOG_FAIL_CLOSED")
)

func (DataAccessOptionsLogMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DataAccessOptionsLogMode)(nil)).Elem()
}

func (e DataAccessOptionsLogMode) ToDataAccessOptionsLogModeOutput() DataAccessOptionsLogModeOutput {
	return pulumi.ToOutput(e).(DataAccessOptionsLogModeOutput)
}

func (e DataAccessOptionsLogMode) ToDataAccessOptionsLogModeOutputWithContext(ctx context.Context) DataAccessOptionsLogModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataAccessOptionsLogModeOutput)
}

func (e DataAccessOptionsLogMode) ToDataAccessOptionsLogModePtrOutput() DataAccessOptionsLogModePtrOutput {
	return e.ToDataAccessOptionsLogModePtrOutputWithContext(context.Background())
}

func (e DataAccessOptionsLogMode) ToDataAccessOptionsLogModePtrOutputWithContext(ctx context.Context) DataAccessOptionsLogModePtrOutput {
	return DataAccessOptionsLogMode(e).ToDataAccessOptionsLogModeOutputWithContext(ctx).ToDataAccessOptionsLogModePtrOutputWithContext(ctx)
}

func (e DataAccessOptionsLogMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataAccessOptionsLogMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataAccessOptionsLogMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataAccessOptionsLogMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataAccessOptionsLogModeOutput struct{ *pulumi.OutputState }

func (DataAccessOptionsLogModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataAccessOptionsLogMode)(nil)).Elem()
}

func (o DataAccessOptionsLogModeOutput) ToDataAccessOptionsLogModeOutput() DataAccessOptionsLogModeOutput {
	return o
}

func (o DataAccessOptionsLogModeOutput) ToDataAccessOptionsLogModeOutputWithContext(ctx context.Context) DataAccessOptionsLogModeOutput {
	return o
}

func (o DataAccessOptionsLogModeOutput) ToDataAccessOptionsLogModePtrOutput() DataAccessOptionsLogModePtrOutput {
	return o.ToDataAccessOptionsLogModePtrOutputWithContext(context.Background())
}

func (o DataAccessOptionsLogModeOutput) ToDataAccessOptionsLogModePtrOutputWithContext(ctx context.Context) DataAccessOptionsLogModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataAccessOptionsLogMode) *DataAccessOptionsLogMode {
		return &v
	}).(DataAccessOptionsLogModePtrOutput)
}

func (o DataAccessOptionsLogModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataAccessOptionsLogModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataAccessOptionsLogMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataAccessOptionsLogModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataAccessOptionsLogModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataAccessOptionsLogMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataAccessOptionsLogModePtrOutput struct{ *pulumi.OutputState }

func (DataAccessOptionsLogModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataAccessOptionsLogMode)(nil)).Elem()
}

func (o DataAccessOptionsLogModePtrOutput) ToDataAccessOptionsLogModePtrOutput() DataAccessOptionsLogModePtrOutput {
	return o
}

func (o DataAccessOptionsLogModePtrOutput) ToDataAccessOptionsLogModePtrOutputWithContext(ctx context.Context) DataAccessOptionsLogModePtrOutput {
	return o
}

func (o DataAccessOptionsLogModePtrOutput) Elem() DataAccessOptionsLogModeOutput {
	return o.ApplyT(func(v *DataAccessOptionsLogMode) DataAccessOptionsLogMode {
		if v != nil {
			return *v
		}
		var ret DataAccessOptionsLogMode
		return ret
	}).(DataAccessOptionsLogModeOutput)
}

func (o DataAccessOptionsLogModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataAccessOptionsLogModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataAccessOptionsLogMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataAccessOptionsLogModeInput is an input type that accepts values of the DataAccessOptionsLogMode enum
// A concrete instance of `DataAccessOptionsLogModeInput` can be one of the following:
//
//	DataAccessOptionsLogModeLogModeUnspecified
//	DataAccessOptionsLogModeLogFailClosed
type DataAccessOptionsLogModeInput interface {
	pulumi.Input

	ToDataAccessOptionsLogModeOutput() DataAccessOptionsLogModeOutput
	ToDataAccessOptionsLogModeOutputWithContext(context.Context) DataAccessOptionsLogModeOutput
}

var dataAccessOptionsLogModePtrType = reflect.TypeOf((**DataAccessOptionsLogMode)(nil)).Elem()

type DataAccessOptionsLogModePtrInput interface {
	pulumi.Input

	ToDataAccessOptionsLogModePtrOutput() DataAccessOptionsLogModePtrOutput
	ToDataAccessOptionsLogModePtrOutputWithContext(context.Context) DataAccessOptionsLogModePtrOutput
}

type dataAccessOptionsLogModePtr string

func DataAccessOptionsLogModePtr(v string) DataAccessOptionsLogModePtrInput {
	return (*dataAccessOptionsLogModePtr)(&v)
}

func (*dataAccessOptionsLogModePtr) ElementType() reflect.Type {
	return dataAccessOptionsLogModePtrType
}

func (in *dataAccessOptionsLogModePtr) ToDataAccessOptionsLogModePtrOutput() DataAccessOptionsLogModePtrOutput {
	return pulumi.ToOutput(in).(DataAccessOptionsLogModePtrOutput)
}

func (in *dataAccessOptionsLogModePtr) ToDataAccessOptionsLogModePtrOutputWithContext(ctx context.Context) DataAccessOptionsLogModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataAccessOptionsLogModePtrOutput)
}

// Required
type RuleAction string

const (
	// Default no action.
	RuleActionNoAction = RuleAction("NO_ACTION")
	// Matching 'Entries' grant access.
	RuleActionAllow = RuleAction("ALLOW")
	// Matching 'Entries' grant access and the caller promises to log the request per the returned log_configs.
	RuleActionAllowWithLog = RuleAction("ALLOW_WITH_LOG")
	// Matching 'Entries' deny access.
	RuleActionDeny = RuleAction("DENY")
	// Matching 'Entries' deny access and the caller promises to log the request per the returned log_configs.
	RuleActionDenyWithLog = RuleAction("DENY_WITH_LOG")
	// Matching 'Entries' tell IAM.Check callers to generate logs.
	RuleActionLog = RuleAction("LOG")
)

func (RuleAction) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAction)(nil)).Elem()
}

func (e RuleAction) ToRuleActionOutput() RuleActionOutput {
	return pulumi.ToOutput(e).(RuleActionOutput)
}

func (e RuleAction) ToRuleActionOutputWithContext(ctx context.Context) RuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RuleActionOutput)
}

func (e RuleAction) ToRuleActionPtrOutput() RuleActionPtrOutput {
	return e.ToRuleActionPtrOutputWithContext(context.Background())
}

func (e RuleAction) ToRuleActionPtrOutputWithContext(ctx context.Context) RuleActionPtrOutput {
	return RuleAction(e).ToRuleActionOutputWithContext(ctx).ToRuleActionPtrOutputWithContext(ctx)
}

func (e RuleAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuleAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuleAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RuleAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RuleActionOutput struct{ *pulumi.OutputState }

func (RuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAction)(nil)).Elem()
}

func (o RuleActionOutput) ToRuleActionOutput() RuleActionOutput {
	return o
}

func (o RuleActionOutput) ToRuleActionOutputWithContext(ctx context.Context) RuleActionOutput {
	return o
}

func (o RuleActionOutput) ToRuleActionPtrOutput() RuleActionPtrOutput {
	return o.ToRuleActionPtrOutputWithContext(context.Background())
}

func (o RuleActionOutput) ToRuleActionPtrOutputWithContext(ctx context.Context) RuleActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleAction) *RuleAction {
		return &v
	}).(RuleActionPtrOutput)
}

func (o RuleActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RuleActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RuleAction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RuleActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RuleActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RuleAction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RuleActionPtrOutput struct{ *pulumi.OutputState }

func (RuleActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleAction)(nil)).Elem()
}

func (o RuleActionPtrOutput) ToRuleActionPtrOutput() RuleActionPtrOutput {
	return o
}

func (o RuleActionPtrOutput) ToRuleActionPtrOutputWithContext(ctx context.Context) RuleActionPtrOutput {
	return o
}

func (o RuleActionPtrOutput) Elem() RuleActionOutput {
	return o.ApplyT(func(v *RuleAction) RuleAction {
		if v != nil {
			return *v
		}
		var ret RuleAction
		return ret
	}).(RuleActionOutput)
}

func (o RuleActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RuleActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RuleAction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RuleActionInput is an input type that accepts values of the RuleAction enum
// A concrete instance of `RuleActionInput` can be one of the following:
//
//	RuleActionNoAction
//	RuleActionAllow
//	RuleActionAllowWithLog
//	RuleActionDeny
//	RuleActionDenyWithLog
//	RuleActionLog
type RuleActionInput interface {
	pulumi.Input

	ToRuleActionOutput() RuleActionOutput
	ToRuleActionOutputWithContext(context.Context) RuleActionOutput
}

var ruleActionPtrType = reflect.TypeOf((**RuleAction)(nil)).Elem()

type RuleActionPtrInput interface {
	pulumi.Input

	ToRuleActionPtrOutput() RuleActionPtrOutput
	ToRuleActionPtrOutputWithContext(context.Context) RuleActionPtrOutput
}

type ruleActionPtr string

func RuleActionPtr(v string) RuleActionPtrInput {
	return (*ruleActionPtr)(&v)
}

func (*ruleActionPtr) ElementType() reflect.Type {
	return ruleActionPtrType
}

func (in *ruleActionPtr) ToRuleActionPtrOutput() RuleActionPtrOutput {
	return pulumi.ToOutput(in).(RuleActionPtrOutput)
}

func (in *ruleActionPtr) ToRuleActionPtrOutputWithContext(ctx context.Context) RuleActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RuleActionPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypeInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypePtrInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationLoggingOptionsPermissionTypeInput)(nil)).Elem(), AuthorizationLoggingOptionsPermissionType("PERMISSION_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationLoggingOptionsPermissionTypePtrInput)(nil)).Elem(), AuthorizationLoggingOptionsPermissionType("PERMISSION_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAuditOptionsLogNameInput)(nil)).Elem(), CloudAuditOptionsLogName("UNSPECIFIED_LOG_NAME"))
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAuditOptionsLogNamePtrInput)(nil)).Elem(), CloudAuditOptionsLogName("UNSPECIFIED_LOG_NAME"))
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionIamInput)(nil)).Elem(), ConditionIam("NO_ATTR"))
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionIamPtrInput)(nil)).Elem(), ConditionIam("NO_ATTR"))
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionOpInput)(nil)).Elem(), ConditionOp("NO_OP"))
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionOpPtrInput)(nil)).Elem(), ConditionOp("NO_OP"))
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionSysInput)(nil)).Elem(), ConditionSys("NO_ATTR"))
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionSysPtrInput)(nil)).Elem(), ConditionSys("NO_ATTR"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataAccessOptionsLogModeInput)(nil)).Elem(), DataAccessOptionsLogMode("LOG_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataAccessOptionsLogModePtrInput)(nil)).Elem(), DataAccessOptionsLogMode("LOG_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RuleActionInput)(nil)).Elem(), RuleAction("NO_ACTION"))
	pulumi.RegisterInputType(reflect.TypeOf((*RuleActionPtrInput)(nil)).Elem(), RuleAction("NO_ACTION"))
	pulumi.RegisterOutputType(AuditLogConfigLogTypeOutput{})
	pulumi.RegisterOutputType(AuditLogConfigLogTypePtrOutput{})
	pulumi.RegisterOutputType(AuthorizationLoggingOptionsPermissionTypeOutput{})
	pulumi.RegisterOutputType(AuthorizationLoggingOptionsPermissionTypePtrOutput{})
	pulumi.RegisterOutputType(CloudAuditOptionsLogNameOutput{})
	pulumi.RegisterOutputType(CloudAuditOptionsLogNamePtrOutput{})
	pulumi.RegisterOutputType(ConditionIamOutput{})
	pulumi.RegisterOutputType(ConditionIamPtrOutput{})
	pulumi.RegisterOutputType(ConditionOpOutput{})
	pulumi.RegisterOutputType(ConditionOpPtrOutput{})
	pulumi.RegisterOutputType(ConditionSysOutput{})
	pulumi.RegisterOutputType(ConditionSysPtrOutput{})
	pulumi.RegisterOutputType(DataAccessOptionsLogModeOutput{})
	pulumi.RegisterOutputType(DataAccessOptionsLogModePtrOutput{})
	pulumi.RegisterOutputType(RuleActionOutput{})
	pulumi.RegisterOutputType(RuleActionPtrOutput{})
}
