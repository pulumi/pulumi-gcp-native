// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new game server cluster in a given project and location.
type RealmGameServerCluster struct {
	pulumi.CustomResourceState

	// Optional. The allocation priority assigned to the game server cluster. Game server clusters receive new game server allocations based on the relative allocation priorites set for each cluster, if the realm is configured for multicluster allocation.
	AllocationPriority pulumi.StringOutput `pulumi:"allocationPriority"`
	// The game server cluster connection information. This information is used to manage game server clusters.
	ConnectionInfo GameServerClusterConnectionInfoResponseOutput `pulumi:"connectionInfo"`
	// The creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Human readable description of the cluster.
	Description pulumi.StringOutput `pulumi:"description"`
	// ETag of the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The labels associated with this game server cluster. Each label is a key-value pair.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Required. The resource name of the game server cluster, in the following form: `projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}`. For example, `projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRealmGameServerCluster registers a new resource with the given unique name, arguments, and options.
func NewRealmGameServerCluster(ctx *pulumi.Context,
	name string, args *RealmGameServerClusterArgs, opts ...pulumi.ResourceOption) (*RealmGameServerCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GameServerClusterId == nil {
		return nil, errors.New("invalid value for required argument 'GameServerClusterId'")
	}
	if args.GameServerClustersId == nil {
		return nil, errors.New("invalid value for required argument 'GameServerClustersId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.RealmsId == nil {
		return nil, errors.New("invalid value for required argument 'RealmsId'")
	}
	var resource RealmGameServerCluster
	err := ctx.RegisterResource("google-native:gameservices/v1beta:RealmGameServerCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealmGameServerCluster gets an existing RealmGameServerCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealmGameServerCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealmGameServerClusterState, opts ...pulumi.ResourceOption) (*RealmGameServerCluster, error) {
	var resource RealmGameServerCluster
	err := ctx.ReadResource("google-native:gameservices/v1beta:RealmGameServerCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RealmGameServerCluster resources.
type realmGameServerClusterState struct {
	// Optional. The allocation priority assigned to the game server cluster. Game server clusters receive new game server allocations based on the relative allocation priorites set for each cluster, if the realm is configured for multicluster allocation.
	AllocationPriority *string `pulumi:"allocationPriority"`
	// The game server cluster connection information. This information is used to manage game server clusters.
	ConnectionInfo *GameServerClusterConnectionInfoResponse `pulumi:"connectionInfo"`
	// The creation time.
	CreateTime *string `pulumi:"createTime"`
	// Human readable description of the cluster.
	Description *string `pulumi:"description"`
	// ETag of the resource.
	Etag *string `pulumi:"etag"`
	// The labels associated with this game server cluster. Each label is a key-value pair.
	Labels map[string]string `pulumi:"labels"`
	// Required. The resource name of the game server cluster, in the following form: `projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}`. For example, `projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster`.
	Name *string `pulumi:"name"`
	// The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

type RealmGameServerClusterState struct {
	// Optional. The allocation priority assigned to the game server cluster. Game server clusters receive new game server allocations based on the relative allocation priorites set for each cluster, if the realm is configured for multicluster allocation.
	AllocationPriority pulumi.StringPtrInput
	// The game server cluster connection information. This information is used to manage game server clusters.
	ConnectionInfo GameServerClusterConnectionInfoResponsePtrInput
	// The creation time.
	CreateTime pulumi.StringPtrInput
	// Human readable description of the cluster.
	Description pulumi.StringPtrInput
	// ETag of the resource.
	Etag pulumi.StringPtrInput
	// The labels associated with this game server cluster. Each label is a key-value pair.
	Labels pulumi.StringMapInput
	// Required. The resource name of the game server cluster, in the following form: `projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}`. For example, `projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster`.
	Name pulumi.StringPtrInput
	// The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (RealmGameServerClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*realmGameServerClusterState)(nil)).Elem()
}

type realmGameServerClusterArgs struct {
	// Optional. The allocation priority assigned to the game server cluster. Game server clusters receive new game server allocations based on the relative allocation priorites set for each cluster, if the realm is configured for multicluster allocation.
	AllocationPriority *string `pulumi:"allocationPriority"`
	// The game server cluster connection information. This information is used to manage game server clusters.
	ConnectionInfo *GameServerClusterConnectionInfo `pulumi:"connectionInfo"`
	// Human readable description of the cluster.
	Description *string `pulumi:"description"`
	// ETag of the resource.
	Etag                 *string `pulumi:"etag"`
	GameServerClusterId  string  `pulumi:"gameServerClusterId"`
	GameServerClustersId string  `pulumi:"gameServerClustersId"`
	// The labels associated with this game server cluster. Each label is a key-value pair.
	Labels      map[string]string `pulumi:"labels"`
	LocationsId string            `pulumi:"locationsId"`
	// Required. The resource name of the game server cluster, in the following form: `projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}`. For example, `projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster`.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	RealmsId   string  `pulumi:"realmsId"`
}

// The set of arguments for constructing a RealmGameServerCluster resource.
type RealmGameServerClusterArgs struct {
	// Optional. The allocation priority assigned to the game server cluster. Game server clusters receive new game server allocations based on the relative allocation priorites set for each cluster, if the realm is configured for multicluster allocation.
	AllocationPriority pulumi.StringPtrInput
	// The game server cluster connection information. This information is used to manage game server clusters.
	ConnectionInfo GameServerClusterConnectionInfoPtrInput
	// Human readable description of the cluster.
	Description pulumi.StringPtrInput
	// ETag of the resource.
	Etag                 pulumi.StringPtrInput
	GameServerClusterId  pulumi.StringInput
	GameServerClustersId pulumi.StringInput
	// The labels associated with this game server cluster. Each label is a key-value pair.
	Labels      pulumi.StringMapInput
	LocationsId pulumi.StringInput
	// Required. The resource name of the game server cluster, in the following form: `projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}`. For example, `projects/my-project/locations/{location}/realms/zanzibar/gameServerClusters/my-onprem-cluster`.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	RealmsId   pulumi.StringInput
}

func (RealmGameServerClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realmGameServerClusterArgs)(nil)).Elem()
}

type RealmGameServerClusterInput interface {
	pulumi.Input

	ToRealmGameServerClusterOutput() RealmGameServerClusterOutput
	ToRealmGameServerClusterOutputWithContext(ctx context.Context) RealmGameServerClusterOutput
}

func (*RealmGameServerCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmGameServerCluster)(nil))
}

func (i *RealmGameServerCluster) ToRealmGameServerClusterOutput() RealmGameServerClusterOutput {
	return i.ToRealmGameServerClusterOutputWithContext(context.Background())
}

func (i *RealmGameServerCluster) ToRealmGameServerClusterOutputWithContext(ctx context.Context) RealmGameServerClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmGameServerClusterOutput)
}

type RealmGameServerClusterOutput struct {
	*pulumi.OutputState
}

func (RealmGameServerClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmGameServerCluster)(nil))
}

func (o RealmGameServerClusterOutput) ToRealmGameServerClusterOutput() RealmGameServerClusterOutput {
	return o
}

func (o RealmGameServerClusterOutput) ToRealmGameServerClusterOutputWithContext(ctx context.Context) RealmGameServerClusterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RealmGameServerClusterOutput{})
}
