// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single game server cluster.
func LookupGameServerCluster(ctx *pulumi.Context, args *LookupGameServerClusterArgs, opts ...pulumi.InvokeOption) (*LookupGameServerClusterResult, error) {
	var rv LookupGameServerClusterResult
	err := ctx.Invoke("google-native:gameservices/v1beta:getGameServerCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGameServerClusterArgs struct {
	GameServerClusterId string  `pulumi:"gameServerClusterId"`
	Location            string  `pulumi:"location"`
	Project             *string `pulumi:"project"`
	RealmId             string  `pulumi:"realmId"`
	View                *string `pulumi:"view"`
}

type LookupGameServerClusterResult struct {
	// The state of the Kubernetes cluster in preview. This will be available if view is set to FULL in the relevant list/get/preview request.
	ClusterState KubernetesClusterStateResponse `pulumi:"clusterState"`
	// The game server cluster connection information. This information is used to manage game server clusters.
	ConnectionInfo GameServerClusterConnectionInfoResponse `pulumi:"connectionInfo"`
	// The creation time.
	CreateTime string `pulumi:"createTime"`
	// Human readable description of the cluster.
	Description string `pulumi:"description"`
	// Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
	Etag string `pulumi:"etag"`
	// The labels associated with this game server cluster. Each label is a key-value pair.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the game server cluster, in the following form: `projects/{project}/locations/{locationId}/realms/{realmId}/gameServerClusters/{gameServerClusterId}`. For example, `projects/my-project/locations/global/realms/zanzibar/gameServerClusters/my-gke-cluster`.
	Name string `pulumi:"name"`
	// The last-modified time.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupGameServerClusterOutput(ctx *pulumi.Context, args LookupGameServerClusterOutputArgs, opts ...pulumi.InvokeOption) LookupGameServerClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGameServerClusterResult, error) {
			args := v.(LookupGameServerClusterArgs)
			r, err := LookupGameServerCluster(ctx, &args, opts...)
			return *r, err
		}).(LookupGameServerClusterResultOutput)
}

type LookupGameServerClusterOutputArgs struct {
	GameServerClusterId pulumi.StringInput    `pulumi:"gameServerClusterId"`
	Location            pulumi.StringInput    `pulumi:"location"`
	Project             pulumi.StringPtrInput `pulumi:"project"`
	RealmId             pulumi.StringInput    `pulumi:"realmId"`
	View                pulumi.StringPtrInput `pulumi:"view"`
}

func (LookupGameServerClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGameServerClusterArgs)(nil)).Elem()
}

type LookupGameServerClusterResultOutput struct{ *pulumi.OutputState }

func (LookupGameServerClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGameServerClusterResult)(nil)).Elem()
}

func (o LookupGameServerClusterResultOutput) ToLookupGameServerClusterResultOutput() LookupGameServerClusterResultOutput {
	return o
}

func (o LookupGameServerClusterResultOutput) ToLookupGameServerClusterResultOutputWithContext(ctx context.Context) LookupGameServerClusterResultOutput {
	return o
}

// The state of the Kubernetes cluster in preview. This will be available if view is set to FULL in the relevant list/get/preview request.
func (o LookupGameServerClusterResultOutput) ClusterState() KubernetesClusterStateResponseOutput {
	return o.ApplyT(func(v LookupGameServerClusterResult) KubernetesClusterStateResponse { return v.ClusterState }).(KubernetesClusterStateResponseOutput)
}

// The game server cluster connection information. This information is used to manage game server clusters.
func (o LookupGameServerClusterResultOutput) ConnectionInfo() GameServerClusterConnectionInfoResponseOutput {
	return o.ApplyT(func(v LookupGameServerClusterResult) GameServerClusterConnectionInfoResponse { return v.ConnectionInfo }).(GameServerClusterConnectionInfoResponseOutput)
}

// The creation time.
func (o LookupGameServerClusterResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGameServerClusterResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Human readable description of the cluster.
func (o LookupGameServerClusterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGameServerClusterResult) string { return v.Description }).(pulumi.StringOutput)
}

// Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
func (o LookupGameServerClusterResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGameServerClusterResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The labels associated with this game server cluster. Each label is a key-value pair.
func (o LookupGameServerClusterResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupGameServerClusterResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name of the game server cluster, in the following form: `projects/{project}/locations/{locationId}/realms/{realmId}/gameServerClusters/{gameServerClusterId}`. For example, `projects/my-project/locations/global/realms/zanzibar/gameServerClusters/my-gke-cluster`.
func (o LookupGameServerClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGameServerClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The last-modified time.
func (o LookupGameServerClusterResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGameServerClusterResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGameServerClusterResultOutput{})
}
