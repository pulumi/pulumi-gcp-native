// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new game server config in a given project, location, and game server deployment. Game server configs are immutable, and are not applied until referenced in the game server deployment rollout resource.
type GameServerDeploymentConfig struct {
	pulumi.CustomResourceState
}

// NewGameServerDeploymentConfig registers a new resource with the given unique name, arguments, and options.
func NewGameServerDeploymentConfig(ctx *pulumi.Context,
	name string, args *GameServerDeploymentConfigArgs, opts ...pulumi.ResourceOption) (*GameServerDeploymentConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigsId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigsId'")
	}
	if args.GameServerDeploymentsId == nil {
		return nil, errors.New("invalid value for required argument 'GameServerDeploymentsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource GameServerDeploymentConfig
	err := ctx.RegisterResource("google-cloud:gameservices/v1beta:GameServerDeploymentConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameServerDeploymentConfig gets an existing GameServerDeploymentConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameServerDeploymentConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GameServerDeploymentConfigState, opts ...pulumi.ResourceOption) (*GameServerDeploymentConfig, error) {
	var resource GameServerDeploymentConfig
	err := ctx.ReadResource("google-cloud:gameservices/v1beta:GameServerDeploymentConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GameServerDeploymentConfig resources.
type gameServerDeploymentConfigState struct {
}

type GameServerDeploymentConfigState struct {
}

func (GameServerDeploymentConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerDeploymentConfigState)(nil)).Elem()
}

type gameServerDeploymentConfigArgs struct {
	ConfigsId string `pulumi:"configsId"`
	// Output only. The creation time.
	CreateTime *string `pulumi:"createTime"`
	// The description of the game server config.
	Description *string `pulumi:"description"`
	// FleetConfig contains a list of Agones fleet specs. Only one FleetConfig is allowed.
	FleetConfigs            []FleetConfig `pulumi:"fleetConfigs"`
	GameServerDeploymentsId string        `pulumi:"gameServerDeploymentsId"`
	// The labels associated with this game server config. Each label is a key-value pair.
	Labels      map[string]string `pulumi:"labels"`
	LocationsId string            `pulumi:"locationsId"`
	// The resource name of the game server config, in the following form: `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`. For example, `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// The autoscaling settings.
	ScalingConfigs []ScalingConfig `pulumi:"scalingConfigs"`
	// Output only. The last-modified time.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a GameServerDeploymentConfig resource.
type GameServerDeploymentConfigArgs struct {
	ConfigsId pulumi.StringInput
	// Output only. The creation time.
	CreateTime pulumi.StringPtrInput
	// The description of the game server config.
	Description pulumi.StringPtrInput
	// FleetConfig contains a list of Agones fleet specs. Only one FleetConfig is allowed.
	FleetConfigs            FleetConfigArrayInput
	GameServerDeploymentsId pulumi.StringInput
	// The labels associated with this game server config. Each label is a key-value pair.
	Labels      pulumi.StringMapInput
	LocationsId pulumi.StringInput
	// The resource name of the game server config, in the following form: `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`. For example, `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// The autoscaling settings.
	ScalingConfigs ScalingConfigArrayInput
	// Output only. The last-modified time.
	UpdateTime pulumi.StringPtrInput
}

func (GameServerDeploymentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerDeploymentConfigArgs)(nil)).Elem()
}

type GameServerDeploymentConfigInput interface {
	pulumi.Input

	ToGameServerDeploymentConfigOutput() GameServerDeploymentConfigOutput
	ToGameServerDeploymentConfigOutputWithContext(ctx context.Context) GameServerDeploymentConfigOutput
}

func (*GameServerDeploymentConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*GameServerDeploymentConfig)(nil))
}

func (i *GameServerDeploymentConfig) ToGameServerDeploymentConfigOutput() GameServerDeploymentConfigOutput {
	return i.ToGameServerDeploymentConfigOutputWithContext(context.Background())
}

func (i *GameServerDeploymentConfig) ToGameServerDeploymentConfigOutputWithContext(ctx context.Context) GameServerDeploymentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerDeploymentConfigOutput)
}

type GameServerDeploymentConfigOutput struct {
	*pulumi.OutputState
}

func (GameServerDeploymentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GameServerDeploymentConfig)(nil))
}

func (o GameServerDeploymentConfigOutput) ToGameServerDeploymentConfigOutput() GameServerDeploymentConfigOutput {
	return o
}

func (o GameServerDeploymentConfigOutput) ToGameServerDeploymentConfigOutputWithContext(ctx context.Context) GameServerDeploymentConfigOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GameServerDeploymentConfigOutput{})
}
