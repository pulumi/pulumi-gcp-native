// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers       []string `pulumi:"exemptedMembers"`
	IgnoreChildExemptions *bool    `pulumi:"ignoreChildExemptions"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers       pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	IgnoreChildExemptions pulumi.BoolPtrInput     `pulumi:"ignoreChildExemptions"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

func (o AuditLogConfigOutput) IgnoreChildExemptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *bool { return v.IgnoreChildExemptions }).(pulumi.BoolPtrOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers       []string `pulumi:"exemptedMembers"`
	IgnoreChildExemptions bool     `pulumi:"ignoreChildExemptions"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

func (o AuditLogConfigResponseOutput) IgnoreChildExemptions() pulumi.BoolOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) bool { return v.IgnoreChildExemptions }).(pulumi.BoolOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Authorization-related information used by Cloud Audit Logging.
type AuthorizationLoggingOptions struct {
	// The type of the permission that was checked.
	PermissionType *AuthorizationLoggingOptionsPermissionType `pulumi:"permissionType"`
}

// AuthorizationLoggingOptionsInput is an input type that accepts AuthorizationLoggingOptionsArgs and AuthorizationLoggingOptionsOutput values.
// You can construct a concrete instance of `AuthorizationLoggingOptionsInput` via:
//
//	AuthorizationLoggingOptionsArgs{...}
type AuthorizationLoggingOptionsInput interface {
	pulumi.Input

	ToAuthorizationLoggingOptionsOutput() AuthorizationLoggingOptionsOutput
	ToAuthorizationLoggingOptionsOutputWithContext(context.Context) AuthorizationLoggingOptionsOutput
}

// Authorization-related information used by Cloud Audit Logging.
type AuthorizationLoggingOptionsArgs struct {
	// The type of the permission that was checked.
	PermissionType AuthorizationLoggingOptionsPermissionTypePtrInput `pulumi:"permissionType"`
}

func (AuthorizationLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationLoggingOptions)(nil)).Elem()
}

func (i AuthorizationLoggingOptionsArgs) ToAuthorizationLoggingOptionsOutput() AuthorizationLoggingOptionsOutput {
	return i.ToAuthorizationLoggingOptionsOutputWithContext(context.Background())
}

func (i AuthorizationLoggingOptionsArgs) ToAuthorizationLoggingOptionsOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationLoggingOptionsOutput)
}

func (i AuthorizationLoggingOptionsArgs) ToAuthorizationLoggingOptionsPtrOutput() AuthorizationLoggingOptionsPtrOutput {
	return i.ToAuthorizationLoggingOptionsPtrOutputWithContext(context.Background())
}

func (i AuthorizationLoggingOptionsArgs) ToAuthorizationLoggingOptionsPtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationLoggingOptionsOutput).ToAuthorizationLoggingOptionsPtrOutputWithContext(ctx)
}

// AuthorizationLoggingOptionsPtrInput is an input type that accepts AuthorizationLoggingOptionsArgs, AuthorizationLoggingOptionsPtr and AuthorizationLoggingOptionsPtrOutput values.
// You can construct a concrete instance of `AuthorizationLoggingOptionsPtrInput` via:
//
//	        AuthorizationLoggingOptionsArgs{...}
//
//	or:
//
//	        nil
type AuthorizationLoggingOptionsPtrInput interface {
	pulumi.Input

	ToAuthorizationLoggingOptionsPtrOutput() AuthorizationLoggingOptionsPtrOutput
	ToAuthorizationLoggingOptionsPtrOutputWithContext(context.Context) AuthorizationLoggingOptionsPtrOutput
}

type authorizationLoggingOptionsPtrType AuthorizationLoggingOptionsArgs

func AuthorizationLoggingOptionsPtr(v *AuthorizationLoggingOptionsArgs) AuthorizationLoggingOptionsPtrInput {
	return (*authorizationLoggingOptionsPtrType)(v)
}

func (*authorizationLoggingOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationLoggingOptions)(nil)).Elem()
}

func (i *authorizationLoggingOptionsPtrType) ToAuthorizationLoggingOptionsPtrOutput() AuthorizationLoggingOptionsPtrOutput {
	return i.ToAuthorizationLoggingOptionsPtrOutputWithContext(context.Background())
}

func (i *authorizationLoggingOptionsPtrType) ToAuthorizationLoggingOptionsPtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationLoggingOptionsPtrOutput)
}

// Authorization-related information used by Cloud Audit Logging.
type AuthorizationLoggingOptionsOutput struct{ *pulumi.OutputState }

func (AuthorizationLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationLoggingOptions)(nil)).Elem()
}

func (o AuthorizationLoggingOptionsOutput) ToAuthorizationLoggingOptionsOutput() AuthorizationLoggingOptionsOutput {
	return o
}

func (o AuthorizationLoggingOptionsOutput) ToAuthorizationLoggingOptionsOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsOutput {
	return o
}

func (o AuthorizationLoggingOptionsOutput) ToAuthorizationLoggingOptionsPtrOutput() AuthorizationLoggingOptionsPtrOutput {
	return o.ToAuthorizationLoggingOptionsPtrOutputWithContext(context.Background())
}

func (o AuthorizationLoggingOptionsOutput) ToAuthorizationLoggingOptionsPtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthorizationLoggingOptions) *AuthorizationLoggingOptions {
		return &v
	}).(AuthorizationLoggingOptionsPtrOutput)
}

// The type of the permission that was checked.
func (o AuthorizationLoggingOptionsOutput) PermissionType() AuthorizationLoggingOptionsPermissionTypePtrOutput {
	return o.ApplyT(func(v AuthorizationLoggingOptions) *AuthorizationLoggingOptionsPermissionType {
		return v.PermissionType
	}).(AuthorizationLoggingOptionsPermissionTypePtrOutput)
}

type AuthorizationLoggingOptionsPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationLoggingOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationLoggingOptions)(nil)).Elem()
}

func (o AuthorizationLoggingOptionsPtrOutput) ToAuthorizationLoggingOptionsPtrOutput() AuthorizationLoggingOptionsPtrOutput {
	return o
}

func (o AuthorizationLoggingOptionsPtrOutput) ToAuthorizationLoggingOptionsPtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPtrOutput {
	return o
}

func (o AuthorizationLoggingOptionsPtrOutput) Elem() AuthorizationLoggingOptionsOutput {
	return o.ApplyT(func(v *AuthorizationLoggingOptions) AuthorizationLoggingOptions {
		if v != nil {
			return *v
		}
		var ret AuthorizationLoggingOptions
		return ret
	}).(AuthorizationLoggingOptionsOutput)
}

// The type of the permission that was checked.
func (o AuthorizationLoggingOptionsPtrOutput) PermissionType() AuthorizationLoggingOptionsPermissionTypePtrOutput {
	return o.ApplyT(func(v *AuthorizationLoggingOptions) *AuthorizationLoggingOptionsPermissionType {
		if v == nil {
			return nil
		}
		return v.PermissionType
	}).(AuthorizationLoggingOptionsPermissionTypePtrOutput)
}

// Authorization-related information used by Cloud Audit Logging.
type AuthorizationLoggingOptionsResponse struct {
	// The type of the permission that was checked.
	PermissionType string `pulumi:"permissionType"`
}

// Authorization-related information used by Cloud Audit Logging.
type AuthorizationLoggingOptionsResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationLoggingOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationLoggingOptionsResponse)(nil)).Elem()
}

func (o AuthorizationLoggingOptionsResponseOutput) ToAuthorizationLoggingOptionsResponseOutput() AuthorizationLoggingOptionsResponseOutput {
	return o
}

func (o AuthorizationLoggingOptionsResponseOutput) ToAuthorizationLoggingOptionsResponseOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsResponseOutput {
	return o
}

// The type of the permission that was checked.
func (o AuthorizationLoggingOptionsResponseOutput) PermissionType() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationLoggingOptionsResponse) string { return v.PermissionType }).(pulumi.StringOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	BindingId *string `pulumi:"bindingId"`
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	BindingId pulumi.StringPtrInput `pulumi:"bindingId"`
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

func (o BindingOutput) BindingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.BindingId }).(pulumi.StringPtrOutput)
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	BindingId string `pulumi:"bindingId"`
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) BindingId() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.BindingId }).(pulumi.StringOutput)
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Write a Cloud Audit log
type CloudAuditOptions struct {
	// Information used by the Cloud Audit Logging pipeline.
	AuthorizationLoggingOptions *AuthorizationLoggingOptions `pulumi:"authorizationLoggingOptions"`
	// The log_name to populate in the Cloud Audit Record.
	LogName *CloudAuditOptionsLogName `pulumi:"logName"`
}

// CloudAuditOptionsInput is an input type that accepts CloudAuditOptionsArgs and CloudAuditOptionsOutput values.
// You can construct a concrete instance of `CloudAuditOptionsInput` via:
//
//	CloudAuditOptionsArgs{...}
type CloudAuditOptionsInput interface {
	pulumi.Input

	ToCloudAuditOptionsOutput() CloudAuditOptionsOutput
	ToCloudAuditOptionsOutputWithContext(context.Context) CloudAuditOptionsOutput
}

// Write a Cloud Audit log
type CloudAuditOptionsArgs struct {
	// Information used by the Cloud Audit Logging pipeline.
	AuthorizationLoggingOptions AuthorizationLoggingOptionsPtrInput `pulumi:"authorizationLoggingOptions"`
	// The log_name to populate in the Cloud Audit Record.
	LogName CloudAuditOptionsLogNamePtrInput `pulumi:"logName"`
}

func (CloudAuditOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditOptions)(nil)).Elem()
}

func (i CloudAuditOptionsArgs) ToCloudAuditOptionsOutput() CloudAuditOptionsOutput {
	return i.ToCloudAuditOptionsOutputWithContext(context.Background())
}

func (i CloudAuditOptionsArgs) ToCloudAuditOptionsOutputWithContext(ctx context.Context) CloudAuditOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditOptionsOutput)
}

func (i CloudAuditOptionsArgs) ToCloudAuditOptionsPtrOutput() CloudAuditOptionsPtrOutput {
	return i.ToCloudAuditOptionsPtrOutputWithContext(context.Background())
}

func (i CloudAuditOptionsArgs) ToCloudAuditOptionsPtrOutputWithContext(ctx context.Context) CloudAuditOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditOptionsOutput).ToCloudAuditOptionsPtrOutputWithContext(ctx)
}

// CloudAuditOptionsPtrInput is an input type that accepts CloudAuditOptionsArgs, CloudAuditOptionsPtr and CloudAuditOptionsPtrOutput values.
// You can construct a concrete instance of `CloudAuditOptionsPtrInput` via:
//
//	        CloudAuditOptionsArgs{...}
//
//	or:
//
//	        nil
type CloudAuditOptionsPtrInput interface {
	pulumi.Input

	ToCloudAuditOptionsPtrOutput() CloudAuditOptionsPtrOutput
	ToCloudAuditOptionsPtrOutputWithContext(context.Context) CloudAuditOptionsPtrOutput
}

type cloudAuditOptionsPtrType CloudAuditOptionsArgs

func CloudAuditOptionsPtr(v *CloudAuditOptionsArgs) CloudAuditOptionsPtrInput {
	return (*cloudAuditOptionsPtrType)(v)
}

func (*cloudAuditOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAuditOptions)(nil)).Elem()
}

func (i *cloudAuditOptionsPtrType) ToCloudAuditOptionsPtrOutput() CloudAuditOptionsPtrOutput {
	return i.ToCloudAuditOptionsPtrOutputWithContext(context.Background())
}

func (i *cloudAuditOptionsPtrType) ToCloudAuditOptionsPtrOutputWithContext(ctx context.Context) CloudAuditOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditOptionsPtrOutput)
}

// Write a Cloud Audit log
type CloudAuditOptionsOutput struct{ *pulumi.OutputState }

func (CloudAuditOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditOptions)(nil)).Elem()
}

func (o CloudAuditOptionsOutput) ToCloudAuditOptionsOutput() CloudAuditOptionsOutput {
	return o
}

func (o CloudAuditOptionsOutput) ToCloudAuditOptionsOutputWithContext(ctx context.Context) CloudAuditOptionsOutput {
	return o
}

func (o CloudAuditOptionsOutput) ToCloudAuditOptionsPtrOutput() CloudAuditOptionsPtrOutput {
	return o.ToCloudAuditOptionsPtrOutputWithContext(context.Background())
}

func (o CloudAuditOptionsOutput) ToCloudAuditOptionsPtrOutputWithContext(ctx context.Context) CloudAuditOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudAuditOptions) *CloudAuditOptions {
		return &v
	}).(CloudAuditOptionsPtrOutput)
}

// Information used by the Cloud Audit Logging pipeline.
func (o CloudAuditOptionsOutput) AuthorizationLoggingOptions() AuthorizationLoggingOptionsPtrOutput {
	return o.ApplyT(func(v CloudAuditOptions) *AuthorizationLoggingOptions { return v.AuthorizationLoggingOptions }).(AuthorizationLoggingOptionsPtrOutput)
}

// The log_name to populate in the Cloud Audit Record.
func (o CloudAuditOptionsOutput) LogName() CloudAuditOptionsLogNamePtrOutput {
	return o.ApplyT(func(v CloudAuditOptions) *CloudAuditOptionsLogName { return v.LogName }).(CloudAuditOptionsLogNamePtrOutput)
}

type CloudAuditOptionsPtrOutput struct{ *pulumi.OutputState }

func (CloudAuditOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAuditOptions)(nil)).Elem()
}

func (o CloudAuditOptionsPtrOutput) ToCloudAuditOptionsPtrOutput() CloudAuditOptionsPtrOutput {
	return o
}

func (o CloudAuditOptionsPtrOutput) ToCloudAuditOptionsPtrOutputWithContext(ctx context.Context) CloudAuditOptionsPtrOutput {
	return o
}

func (o CloudAuditOptionsPtrOutput) Elem() CloudAuditOptionsOutput {
	return o.ApplyT(func(v *CloudAuditOptions) CloudAuditOptions {
		if v != nil {
			return *v
		}
		var ret CloudAuditOptions
		return ret
	}).(CloudAuditOptionsOutput)
}

// Information used by the Cloud Audit Logging pipeline.
func (o CloudAuditOptionsPtrOutput) AuthorizationLoggingOptions() AuthorizationLoggingOptionsPtrOutput {
	return o.ApplyT(func(v *CloudAuditOptions) *AuthorizationLoggingOptions {
		if v == nil {
			return nil
		}
		return v.AuthorizationLoggingOptions
	}).(AuthorizationLoggingOptionsPtrOutput)
}

// The log_name to populate in the Cloud Audit Record.
func (o CloudAuditOptionsPtrOutput) LogName() CloudAuditOptionsLogNamePtrOutput {
	return o.ApplyT(func(v *CloudAuditOptions) *CloudAuditOptionsLogName {
		if v == nil {
			return nil
		}
		return v.LogName
	}).(CloudAuditOptionsLogNamePtrOutput)
}

// Write a Cloud Audit log
type CloudAuditOptionsResponse struct {
	// Information used by the Cloud Audit Logging pipeline.
	AuthorizationLoggingOptions AuthorizationLoggingOptionsResponse `pulumi:"authorizationLoggingOptions"`
	// The log_name to populate in the Cloud Audit Record.
	LogName string `pulumi:"logName"`
}

// Write a Cloud Audit log
type CloudAuditOptionsResponseOutput struct{ *pulumi.OutputState }

func (CloudAuditOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditOptionsResponse)(nil)).Elem()
}

func (o CloudAuditOptionsResponseOutput) ToCloudAuditOptionsResponseOutput() CloudAuditOptionsResponseOutput {
	return o
}

func (o CloudAuditOptionsResponseOutput) ToCloudAuditOptionsResponseOutputWithContext(ctx context.Context) CloudAuditOptionsResponseOutput {
	return o
}

// Information used by the Cloud Audit Logging pipeline.
func (o CloudAuditOptionsResponseOutput) AuthorizationLoggingOptions() AuthorizationLoggingOptionsResponseOutput {
	return o.ApplyT(func(v CloudAuditOptionsResponse) AuthorizationLoggingOptionsResponse {
		return v.AuthorizationLoggingOptions
	}).(AuthorizationLoggingOptionsResponseOutput)
}

// The log_name to populate in the Cloud Audit Record.
func (o CloudAuditOptionsResponseOutput) LogName() pulumi.StringOutput {
	return o.ApplyT(func(v CloudAuditOptionsResponse) string { return v.LogName }).(pulumi.StringOutput)
}

// A condition to be met.
type Condition struct {
	// Trusted attributes supplied by the IAM system.
	Iam *ConditionIam `pulumi:"iam"`
	// An operator to apply the subject with.
	Op *ConditionOp `pulumi:"op"`
	// Trusted attributes discharged by the service.
	Svc *string `pulumi:"svc"`
	// Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
	Sys *ConditionSys `pulumi:"sys"`
	// The objects of the condition.
	Values []string `pulumi:"values"`
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//	ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// A condition to be met.
type ConditionArgs struct {
	// Trusted attributes supplied by the IAM system.
	Iam ConditionIamPtrInput `pulumi:"iam"`
	// An operator to apply the subject with.
	Op ConditionOpPtrInput `pulumi:"op"`
	// Trusted attributes discharged by the service.
	Svc pulumi.StringPtrInput `pulumi:"svc"`
	// Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
	Sys ConditionSysPtrInput `pulumi:"sys"`
	// The objects of the condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

// ConditionArrayInput is an input type that accepts ConditionArray and ConditionArrayOutput values.
// You can construct a concrete instance of `ConditionArrayInput` via:
//
//	ConditionArray{ ConditionArgs{...} }
type ConditionArrayInput interface {
	pulumi.Input

	ToConditionArrayOutput() ConditionArrayOutput
	ToConditionArrayOutputWithContext(context.Context) ConditionArrayOutput
}

type ConditionArray []ConditionInput

func (ConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Condition)(nil)).Elem()
}

func (i ConditionArray) ToConditionArrayOutput() ConditionArrayOutput {
	return i.ToConditionArrayOutputWithContext(context.Background())
}

func (i ConditionArray) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionArrayOutput)
}

// A condition to be met.
type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

// Trusted attributes supplied by the IAM system.
func (o ConditionOutput) Iam() ConditionIamPtrOutput {
	return o.ApplyT(func(v Condition) *ConditionIam { return v.Iam }).(ConditionIamPtrOutput)
}

// An operator to apply the subject with.
func (o ConditionOutput) Op() ConditionOpPtrOutput {
	return o.ApplyT(func(v Condition) *ConditionOp { return v.Op }).(ConditionOpPtrOutput)
}

// Trusted attributes discharged by the service.
func (o ConditionOutput) Svc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Svc }).(pulumi.StringPtrOutput)
}

// Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
func (o ConditionOutput) Sys() ConditionSysPtrOutput {
	return o.ApplyT(func(v Condition) *ConditionSys { return v.Sys }).(ConditionSysPtrOutput)
}

// The objects of the condition.
func (o ConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Condition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionArrayOutput struct{ *pulumi.OutputState }

func (ConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Condition)(nil)).Elem()
}

func (o ConditionArrayOutput) ToConditionArrayOutput() ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) Index(i pulumi.IntInput) ConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Condition {
		return vs[0].([]Condition)[vs[1].(int)]
	}).(ConditionOutput)
}

// A condition to be met.
type ConditionResponse struct {
	// Trusted attributes supplied by the IAM system.
	Iam string `pulumi:"iam"`
	// An operator to apply the subject with.
	Op string `pulumi:"op"`
	// Trusted attributes discharged by the service.
	Svc string `pulumi:"svc"`
	// Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
	Sys string `pulumi:"sys"`
	// The objects of the condition.
	Values []string `pulumi:"values"`
}

// A condition to be met.
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

// Trusted attributes supplied by the IAM system.
func (o ConditionResponseOutput) Iam() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionResponse) string { return v.Iam }).(pulumi.StringOutput)
}

// An operator to apply the subject with.
func (o ConditionResponseOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionResponse) string { return v.Op }).(pulumi.StringOutput)
}

// Trusted attributes discharged by the service.
func (o ConditionResponseOutput) Svc() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionResponse) string { return v.Svc }).(pulumi.StringOutput)
}

// Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
func (o ConditionResponseOutput) Sys() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionResponse) string { return v.Sys }).(pulumi.StringOutput)
}

// The objects of the condition.
func (o ConditionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConditionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (ConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutput() ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutputWithContext(ctx context.Context) ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) Index(i pulumi.IntInput) ConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConditionResponse {
		return vs[0].([]ConditionResponse)[vs[1].(int)]
	}).(ConditionResponseOutput)
}

// Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields. Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
type CounterOptions struct {
	// Custom fields.
	CustomFields []CustomField `pulumi:"customFields"`
	// The field value to attribute.
	Field *string `pulumi:"field"`
	// The metric to update.
	Metric *string `pulumi:"metric"`
}

// CounterOptionsInput is an input type that accepts CounterOptionsArgs and CounterOptionsOutput values.
// You can construct a concrete instance of `CounterOptionsInput` via:
//
//	CounterOptionsArgs{...}
type CounterOptionsInput interface {
	pulumi.Input

	ToCounterOptionsOutput() CounterOptionsOutput
	ToCounterOptionsOutputWithContext(context.Context) CounterOptionsOutput
}

// Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields. Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
type CounterOptionsArgs struct {
	// Custom fields.
	CustomFields CustomFieldArrayInput `pulumi:"customFields"`
	// The field value to attribute.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The metric to update.
	Metric pulumi.StringPtrInput `pulumi:"metric"`
}

func (CounterOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CounterOptions)(nil)).Elem()
}

func (i CounterOptionsArgs) ToCounterOptionsOutput() CounterOptionsOutput {
	return i.ToCounterOptionsOutputWithContext(context.Background())
}

func (i CounterOptionsArgs) ToCounterOptionsOutputWithContext(ctx context.Context) CounterOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CounterOptionsOutput)
}

func (i CounterOptionsArgs) ToCounterOptionsPtrOutput() CounterOptionsPtrOutput {
	return i.ToCounterOptionsPtrOutputWithContext(context.Background())
}

func (i CounterOptionsArgs) ToCounterOptionsPtrOutputWithContext(ctx context.Context) CounterOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CounterOptionsOutput).ToCounterOptionsPtrOutputWithContext(ctx)
}

// CounterOptionsPtrInput is an input type that accepts CounterOptionsArgs, CounterOptionsPtr and CounterOptionsPtrOutput values.
// You can construct a concrete instance of `CounterOptionsPtrInput` via:
//
//	        CounterOptionsArgs{...}
//
//	or:
//
//	        nil
type CounterOptionsPtrInput interface {
	pulumi.Input

	ToCounterOptionsPtrOutput() CounterOptionsPtrOutput
	ToCounterOptionsPtrOutputWithContext(context.Context) CounterOptionsPtrOutput
}

type counterOptionsPtrType CounterOptionsArgs

func CounterOptionsPtr(v *CounterOptionsArgs) CounterOptionsPtrInput {
	return (*counterOptionsPtrType)(v)
}

func (*counterOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CounterOptions)(nil)).Elem()
}

func (i *counterOptionsPtrType) ToCounterOptionsPtrOutput() CounterOptionsPtrOutput {
	return i.ToCounterOptionsPtrOutputWithContext(context.Background())
}

func (i *counterOptionsPtrType) ToCounterOptionsPtrOutputWithContext(ctx context.Context) CounterOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CounterOptionsPtrOutput)
}

// Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields. Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
type CounterOptionsOutput struct{ *pulumi.OutputState }

func (CounterOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CounterOptions)(nil)).Elem()
}

func (o CounterOptionsOutput) ToCounterOptionsOutput() CounterOptionsOutput {
	return o
}

func (o CounterOptionsOutput) ToCounterOptionsOutputWithContext(ctx context.Context) CounterOptionsOutput {
	return o
}

func (o CounterOptionsOutput) ToCounterOptionsPtrOutput() CounterOptionsPtrOutput {
	return o.ToCounterOptionsPtrOutputWithContext(context.Background())
}

func (o CounterOptionsOutput) ToCounterOptionsPtrOutputWithContext(ctx context.Context) CounterOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CounterOptions) *CounterOptions {
		return &v
	}).(CounterOptionsPtrOutput)
}

// Custom fields.
func (o CounterOptionsOutput) CustomFields() CustomFieldArrayOutput {
	return o.ApplyT(func(v CounterOptions) []CustomField { return v.CustomFields }).(CustomFieldArrayOutput)
}

// The field value to attribute.
func (o CounterOptionsOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CounterOptions) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The metric to update.
func (o CounterOptionsOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CounterOptions) *string { return v.Metric }).(pulumi.StringPtrOutput)
}

type CounterOptionsPtrOutput struct{ *pulumi.OutputState }

func (CounterOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CounterOptions)(nil)).Elem()
}

func (o CounterOptionsPtrOutput) ToCounterOptionsPtrOutput() CounterOptionsPtrOutput {
	return o
}

func (o CounterOptionsPtrOutput) ToCounterOptionsPtrOutputWithContext(ctx context.Context) CounterOptionsPtrOutput {
	return o
}

func (o CounterOptionsPtrOutput) Elem() CounterOptionsOutput {
	return o.ApplyT(func(v *CounterOptions) CounterOptions {
		if v != nil {
			return *v
		}
		var ret CounterOptions
		return ret
	}).(CounterOptionsOutput)
}

// Custom fields.
func (o CounterOptionsPtrOutput) CustomFields() CustomFieldArrayOutput {
	return o.ApplyT(func(v *CounterOptions) []CustomField {
		if v == nil {
			return nil
		}
		return v.CustomFields
	}).(CustomFieldArrayOutput)
}

// The field value to attribute.
func (o CounterOptionsPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CounterOptions) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// The metric to update.
func (o CounterOptionsPtrOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CounterOptions) *string {
		if v == nil {
			return nil
		}
		return v.Metric
	}).(pulumi.StringPtrOutput)
}

// Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields. Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
type CounterOptionsResponse struct {
	// Custom fields.
	CustomFields []CustomFieldResponse `pulumi:"customFields"`
	// The field value to attribute.
	Field string `pulumi:"field"`
	// The metric to update.
	Metric string `pulumi:"metric"`
}

// Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields. Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
type CounterOptionsResponseOutput struct{ *pulumi.OutputState }

func (CounterOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CounterOptionsResponse)(nil)).Elem()
}

func (o CounterOptionsResponseOutput) ToCounterOptionsResponseOutput() CounterOptionsResponseOutput {
	return o
}

func (o CounterOptionsResponseOutput) ToCounterOptionsResponseOutputWithContext(ctx context.Context) CounterOptionsResponseOutput {
	return o
}

// Custom fields.
func (o CounterOptionsResponseOutput) CustomFields() CustomFieldResponseArrayOutput {
	return o.ApplyT(func(v CounterOptionsResponse) []CustomFieldResponse { return v.CustomFields }).(CustomFieldResponseArrayOutput)
}

// The field value to attribute.
func (o CounterOptionsResponseOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v CounterOptionsResponse) string { return v.Field }).(pulumi.StringOutput)
}

// The metric to update.
func (o CounterOptionsResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v CounterOptionsResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// Custom fields. These can be used to create a counter with arbitrary field/value pairs. See: go/rpcsp-custom-fields.
type CustomField struct {
	// Name is the field name.
	Name *string `pulumi:"name"`
	// Value is the field value. It is important that in contrast to the CounterOptions.field, the value here is a constant that is not derived from the IAMContext.
	Value *string `pulumi:"value"`
}

// CustomFieldInput is an input type that accepts CustomFieldArgs and CustomFieldOutput values.
// You can construct a concrete instance of `CustomFieldInput` via:
//
//	CustomFieldArgs{...}
type CustomFieldInput interface {
	pulumi.Input

	ToCustomFieldOutput() CustomFieldOutput
	ToCustomFieldOutputWithContext(context.Context) CustomFieldOutput
}

// Custom fields. These can be used to create a counter with arbitrary field/value pairs. See: go/rpcsp-custom-fields.
type CustomFieldArgs struct {
	// Name is the field name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the field value. It is important that in contrast to the CounterOptions.field, the value here is a constant that is not derived from the IAMContext.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CustomFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomField)(nil)).Elem()
}

func (i CustomFieldArgs) ToCustomFieldOutput() CustomFieldOutput {
	return i.ToCustomFieldOutputWithContext(context.Background())
}

func (i CustomFieldArgs) ToCustomFieldOutputWithContext(ctx context.Context) CustomFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomFieldOutput)
}

// CustomFieldArrayInput is an input type that accepts CustomFieldArray and CustomFieldArrayOutput values.
// You can construct a concrete instance of `CustomFieldArrayInput` via:
//
//	CustomFieldArray{ CustomFieldArgs{...} }
type CustomFieldArrayInput interface {
	pulumi.Input

	ToCustomFieldArrayOutput() CustomFieldArrayOutput
	ToCustomFieldArrayOutputWithContext(context.Context) CustomFieldArrayOutput
}

type CustomFieldArray []CustomFieldInput

func (CustomFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomField)(nil)).Elem()
}

func (i CustomFieldArray) ToCustomFieldArrayOutput() CustomFieldArrayOutput {
	return i.ToCustomFieldArrayOutputWithContext(context.Background())
}

func (i CustomFieldArray) ToCustomFieldArrayOutputWithContext(ctx context.Context) CustomFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomFieldArrayOutput)
}

// Custom fields. These can be used to create a counter with arbitrary field/value pairs. See: go/rpcsp-custom-fields.
type CustomFieldOutput struct{ *pulumi.OutputState }

func (CustomFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomField)(nil)).Elem()
}

func (o CustomFieldOutput) ToCustomFieldOutput() CustomFieldOutput {
	return o
}

func (o CustomFieldOutput) ToCustomFieldOutputWithContext(ctx context.Context) CustomFieldOutput {
	return o
}

// Name is the field name.
func (o CustomFieldOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomField) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the field value. It is important that in contrast to the CounterOptions.field, the value here is a constant that is not derived from the IAMContext.
func (o CustomFieldOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomField) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CustomFieldArrayOutput struct{ *pulumi.OutputState }

func (CustomFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomField)(nil)).Elem()
}

func (o CustomFieldArrayOutput) ToCustomFieldArrayOutput() CustomFieldArrayOutput {
	return o
}

func (o CustomFieldArrayOutput) ToCustomFieldArrayOutputWithContext(ctx context.Context) CustomFieldArrayOutput {
	return o
}

func (o CustomFieldArrayOutput) Index(i pulumi.IntInput) CustomFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomField {
		return vs[0].([]CustomField)[vs[1].(int)]
	}).(CustomFieldOutput)
}

// Custom fields. These can be used to create a counter with arbitrary field/value pairs. See: go/rpcsp-custom-fields.
type CustomFieldResponse struct {
	// Name is the field name.
	Name string `pulumi:"name"`
	// Value is the field value. It is important that in contrast to the CounterOptions.field, the value here is a constant that is not derived from the IAMContext.
	Value string `pulumi:"value"`
}

// Custom fields. These can be used to create a counter with arbitrary field/value pairs. See: go/rpcsp-custom-fields.
type CustomFieldResponseOutput struct{ *pulumi.OutputState }

func (CustomFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomFieldResponse)(nil)).Elem()
}

func (o CustomFieldResponseOutput) ToCustomFieldResponseOutput() CustomFieldResponseOutput {
	return o
}

func (o CustomFieldResponseOutput) ToCustomFieldResponseOutputWithContext(ctx context.Context) CustomFieldResponseOutput {
	return o
}

// Name is the field name.
func (o CustomFieldResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CustomFieldResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Value is the field value. It is important that in contrast to the CounterOptions.field, the value here is a constant that is not derived from the IAMContext.
func (o CustomFieldResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CustomFieldResponse) string { return v.Value }).(pulumi.StringOutput)
}

type CustomFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (CustomFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomFieldResponse)(nil)).Elem()
}

func (o CustomFieldResponseArrayOutput) ToCustomFieldResponseArrayOutput() CustomFieldResponseArrayOutput {
	return o
}

func (o CustomFieldResponseArrayOutput) ToCustomFieldResponseArrayOutputWithContext(ctx context.Context) CustomFieldResponseArrayOutput {
	return o
}

func (o CustomFieldResponseArrayOutput) Index(i pulumi.IntInput) CustomFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomFieldResponse {
		return vs[0].([]CustomFieldResponse)[vs[1].(int)]
	}).(CustomFieldResponseOutput)
}

// Write a Data Access (Gin) log
type DataAccessOptions struct {
	LogMode *DataAccessOptionsLogMode `pulumi:"logMode"`
}

// DataAccessOptionsInput is an input type that accepts DataAccessOptionsArgs and DataAccessOptionsOutput values.
// You can construct a concrete instance of `DataAccessOptionsInput` via:
//
//	DataAccessOptionsArgs{...}
type DataAccessOptionsInput interface {
	pulumi.Input

	ToDataAccessOptionsOutput() DataAccessOptionsOutput
	ToDataAccessOptionsOutputWithContext(context.Context) DataAccessOptionsOutput
}

// Write a Data Access (Gin) log
type DataAccessOptionsArgs struct {
	LogMode DataAccessOptionsLogModePtrInput `pulumi:"logMode"`
}

func (DataAccessOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataAccessOptions)(nil)).Elem()
}

func (i DataAccessOptionsArgs) ToDataAccessOptionsOutput() DataAccessOptionsOutput {
	return i.ToDataAccessOptionsOutputWithContext(context.Background())
}

func (i DataAccessOptionsArgs) ToDataAccessOptionsOutputWithContext(ctx context.Context) DataAccessOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataAccessOptionsOutput)
}

func (i DataAccessOptionsArgs) ToDataAccessOptionsPtrOutput() DataAccessOptionsPtrOutput {
	return i.ToDataAccessOptionsPtrOutputWithContext(context.Background())
}

func (i DataAccessOptionsArgs) ToDataAccessOptionsPtrOutputWithContext(ctx context.Context) DataAccessOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataAccessOptionsOutput).ToDataAccessOptionsPtrOutputWithContext(ctx)
}

// DataAccessOptionsPtrInput is an input type that accepts DataAccessOptionsArgs, DataAccessOptionsPtr and DataAccessOptionsPtrOutput values.
// You can construct a concrete instance of `DataAccessOptionsPtrInput` via:
//
//	        DataAccessOptionsArgs{...}
//
//	or:
//
//	        nil
type DataAccessOptionsPtrInput interface {
	pulumi.Input

	ToDataAccessOptionsPtrOutput() DataAccessOptionsPtrOutput
	ToDataAccessOptionsPtrOutputWithContext(context.Context) DataAccessOptionsPtrOutput
}

type dataAccessOptionsPtrType DataAccessOptionsArgs

func DataAccessOptionsPtr(v *DataAccessOptionsArgs) DataAccessOptionsPtrInput {
	return (*dataAccessOptionsPtrType)(v)
}

func (*dataAccessOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataAccessOptions)(nil)).Elem()
}

func (i *dataAccessOptionsPtrType) ToDataAccessOptionsPtrOutput() DataAccessOptionsPtrOutput {
	return i.ToDataAccessOptionsPtrOutputWithContext(context.Background())
}

func (i *dataAccessOptionsPtrType) ToDataAccessOptionsPtrOutputWithContext(ctx context.Context) DataAccessOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataAccessOptionsPtrOutput)
}

// Write a Data Access (Gin) log
type DataAccessOptionsOutput struct{ *pulumi.OutputState }

func (DataAccessOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataAccessOptions)(nil)).Elem()
}

func (o DataAccessOptionsOutput) ToDataAccessOptionsOutput() DataAccessOptionsOutput {
	return o
}

func (o DataAccessOptionsOutput) ToDataAccessOptionsOutputWithContext(ctx context.Context) DataAccessOptionsOutput {
	return o
}

func (o DataAccessOptionsOutput) ToDataAccessOptionsPtrOutput() DataAccessOptionsPtrOutput {
	return o.ToDataAccessOptionsPtrOutputWithContext(context.Background())
}

func (o DataAccessOptionsOutput) ToDataAccessOptionsPtrOutputWithContext(ctx context.Context) DataAccessOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataAccessOptions) *DataAccessOptions {
		return &v
	}).(DataAccessOptionsPtrOutput)
}

func (o DataAccessOptionsOutput) LogMode() DataAccessOptionsLogModePtrOutput {
	return o.ApplyT(func(v DataAccessOptions) *DataAccessOptionsLogMode { return v.LogMode }).(DataAccessOptionsLogModePtrOutput)
}

type DataAccessOptionsPtrOutput struct{ *pulumi.OutputState }

func (DataAccessOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataAccessOptions)(nil)).Elem()
}

func (o DataAccessOptionsPtrOutput) ToDataAccessOptionsPtrOutput() DataAccessOptionsPtrOutput {
	return o
}

func (o DataAccessOptionsPtrOutput) ToDataAccessOptionsPtrOutputWithContext(ctx context.Context) DataAccessOptionsPtrOutput {
	return o
}

func (o DataAccessOptionsPtrOutput) Elem() DataAccessOptionsOutput {
	return o.ApplyT(func(v *DataAccessOptions) DataAccessOptions {
		if v != nil {
			return *v
		}
		var ret DataAccessOptions
		return ret
	}).(DataAccessOptionsOutput)
}

func (o DataAccessOptionsPtrOutput) LogMode() DataAccessOptionsLogModePtrOutput {
	return o.ApplyT(func(v *DataAccessOptions) *DataAccessOptionsLogMode {
		if v == nil {
			return nil
		}
		return v.LogMode
	}).(DataAccessOptionsLogModePtrOutput)
}

// Write a Data Access (Gin) log
type DataAccessOptionsResponse struct {
	LogMode string `pulumi:"logMode"`
}

// Write a Data Access (Gin) log
type DataAccessOptionsResponseOutput struct{ *pulumi.OutputState }

func (DataAccessOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataAccessOptionsResponse)(nil)).Elem()
}

func (o DataAccessOptionsResponseOutput) ToDataAccessOptionsResponseOutput() DataAccessOptionsResponseOutput {
	return o
}

func (o DataAccessOptionsResponseOutput) ToDataAccessOptionsResponseOutputWithContext(ctx context.Context) DataAccessOptionsResponseOutput {
	return o
}

func (o DataAccessOptionsResponseOutput) LogMode() pulumi.StringOutput {
	return o.ApplyT(func(v DataAccessOptionsResponse) string { return v.LogMode }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Specifies what kind of log the caller must write
type LogConfig struct {
	// Cloud audit options.
	CloudAudit *CloudAuditOptions `pulumi:"cloudAudit"`
	// Counter options.
	Counter *CounterOptions `pulumi:"counter"`
	// Data access options.
	DataAccess *DataAccessOptions `pulumi:"dataAccess"`
}

// LogConfigInput is an input type that accepts LogConfigArgs and LogConfigOutput values.
// You can construct a concrete instance of `LogConfigInput` via:
//
//	LogConfigArgs{...}
type LogConfigInput interface {
	pulumi.Input

	ToLogConfigOutput() LogConfigOutput
	ToLogConfigOutputWithContext(context.Context) LogConfigOutput
}

// Specifies what kind of log the caller must write
type LogConfigArgs struct {
	// Cloud audit options.
	CloudAudit CloudAuditOptionsPtrInput `pulumi:"cloudAudit"`
	// Counter options.
	Counter CounterOptionsPtrInput `pulumi:"counter"`
	// Data access options.
	DataAccess DataAccessOptionsPtrInput `pulumi:"dataAccess"`
}

func (LogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfig)(nil)).Elem()
}

func (i LogConfigArgs) ToLogConfigOutput() LogConfigOutput {
	return i.ToLogConfigOutputWithContext(context.Background())
}

func (i LogConfigArgs) ToLogConfigOutputWithContext(ctx context.Context) LogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigOutput)
}

// LogConfigArrayInput is an input type that accepts LogConfigArray and LogConfigArrayOutput values.
// You can construct a concrete instance of `LogConfigArrayInput` via:
//
//	LogConfigArray{ LogConfigArgs{...} }
type LogConfigArrayInput interface {
	pulumi.Input

	ToLogConfigArrayOutput() LogConfigArrayOutput
	ToLogConfigArrayOutputWithContext(context.Context) LogConfigArrayOutput
}

type LogConfigArray []LogConfigInput

func (LogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfig)(nil)).Elem()
}

func (i LogConfigArray) ToLogConfigArrayOutput() LogConfigArrayOutput {
	return i.ToLogConfigArrayOutputWithContext(context.Background())
}

func (i LogConfigArray) ToLogConfigArrayOutputWithContext(ctx context.Context) LogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigArrayOutput)
}

// Specifies what kind of log the caller must write
type LogConfigOutput struct{ *pulumi.OutputState }

func (LogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfig)(nil)).Elem()
}

func (o LogConfigOutput) ToLogConfigOutput() LogConfigOutput {
	return o
}

func (o LogConfigOutput) ToLogConfigOutputWithContext(ctx context.Context) LogConfigOutput {
	return o
}

// Cloud audit options.
func (o LogConfigOutput) CloudAudit() CloudAuditOptionsPtrOutput {
	return o.ApplyT(func(v LogConfig) *CloudAuditOptions { return v.CloudAudit }).(CloudAuditOptionsPtrOutput)
}

// Counter options.
func (o LogConfigOutput) Counter() CounterOptionsPtrOutput {
	return o.ApplyT(func(v LogConfig) *CounterOptions { return v.Counter }).(CounterOptionsPtrOutput)
}

// Data access options.
func (o LogConfigOutput) DataAccess() DataAccessOptionsPtrOutput {
	return o.ApplyT(func(v LogConfig) *DataAccessOptions { return v.DataAccess }).(DataAccessOptionsPtrOutput)
}

type LogConfigArrayOutput struct{ *pulumi.OutputState }

func (LogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfig)(nil)).Elem()
}

func (o LogConfigArrayOutput) ToLogConfigArrayOutput() LogConfigArrayOutput {
	return o
}

func (o LogConfigArrayOutput) ToLogConfigArrayOutputWithContext(ctx context.Context) LogConfigArrayOutput {
	return o
}

func (o LogConfigArrayOutput) Index(i pulumi.IntInput) LogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogConfig {
		return vs[0].([]LogConfig)[vs[1].(int)]
	}).(LogConfigOutput)
}

// Specifies what kind of log the caller must write
type LogConfigResponse struct {
	// Cloud audit options.
	CloudAudit CloudAuditOptionsResponse `pulumi:"cloudAudit"`
	// Counter options.
	Counter CounterOptionsResponse `pulumi:"counter"`
	// Data access options.
	DataAccess DataAccessOptionsResponse `pulumi:"dataAccess"`
}

// Specifies what kind of log the caller must write
type LogConfigResponseOutput struct{ *pulumi.OutputState }

func (LogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigResponse)(nil)).Elem()
}

func (o LogConfigResponseOutput) ToLogConfigResponseOutput() LogConfigResponseOutput {
	return o
}

func (o LogConfigResponseOutput) ToLogConfigResponseOutputWithContext(ctx context.Context) LogConfigResponseOutput {
	return o
}

// Cloud audit options.
func (o LogConfigResponseOutput) CloudAudit() CloudAuditOptionsResponseOutput {
	return o.ApplyT(func(v LogConfigResponse) CloudAuditOptionsResponse { return v.CloudAudit }).(CloudAuditOptionsResponseOutput)
}

// Counter options.
func (o LogConfigResponseOutput) Counter() CounterOptionsResponseOutput {
	return o.ApplyT(func(v LogConfigResponse) CounterOptionsResponse { return v.Counter }).(CounterOptionsResponseOutput)
}

// Data access options.
func (o LogConfigResponseOutput) DataAccess() DataAccessOptionsResponseOutput {
	return o.ApplyT(func(v LogConfigResponse) DataAccessOptionsResponse { return v.DataAccess }).(DataAccessOptionsResponseOutput)
}

type LogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (LogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfigResponse)(nil)).Elem()
}

func (o LogConfigResponseArrayOutput) ToLogConfigResponseArrayOutput() LogConfigResponseArrayOutput {
	return o
}

func (o LogConfigResponseArrayOutput) ToLogConfigResponseArrayOutputWithContext(ctx context.Context) LogConfigResponseArrayOutput {
	return o
}

func (o LogConfigResponseArrayOutput) Index(i pulumi.IntInput) LogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogConfigResponse {
		return vs[0].([]LogConfigResponse)[vs[1].(int)]
	}).(LogConfigResponseOutput)
}

// A rule to be applied in a Policy.
type Rule struct {
	// Required
	Action *RuleAction `pulumi:"action"`
	// Additional restrictions that must be met. All conditions must pass for the rule to match.
	Conditions []Condition `pulumi:"conditions"`
	// Human-readable description of the rule.
	Description *string `pulumi:"description"`
	// If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
	In []string `pulumi:"in"`
	// The config returned to callers of CheckPolicy for any entries that match the LOG action.
	LogConfig []LogConfig `pulumi:"logConfig"`
	// If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
	NotIn []string `pulumi:"notIn"`
	// A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
	Permissions []string `pulumi:"permissions"`
}

// RuleInput is an input type that accepts RuleArgs and RuleOutput values.
// You can construct a concrete instance of `RuleInput` via:
//
//	RuleArgs{...}
type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(context.Context) RuleOutput
}

// A rule to be applied in a Policy.
type RuleArgs struct {
	// Required
	Action RuleActionPtrInput `pulumi:"action"`
	// Additional restrictions that must be met. All conditions must pass for the rule to match.
	Conditions ConditionArrayInput `pulumi:"conditions"`
	// Human-readable description of the rule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
	In pulumi.StringArrayInput `pulumi:"in"`
	// The config returned to callers of CheckPolicy for any entries that match the LOG action.
	LogConfig LogConfigArrayInput `pulumi:"logConfig"`
	// If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
	NotIn pulumi.StringArrayInput `pulumi:"notIn"`
	// A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Rule)(nil)).Elem()
}

func (i RuleArgs) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i RuleArgs) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

// RuleArrayInput is an input type that accepts RuleArray and RuleArrayOutput values.
// You can construct a concrete instance of `RuleArrayInput` via:
//
//	RuleArray{ RuleArgs{...} }
type RuleArrayInput interface {
	pulumi.Input

	ToRuleArrayOutput() RuleArrayOutput
	ToRuleArrayOutputWithContext(context.Context) RuleArrayOutput
}

type RuleArray []RuleInput

func (RuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Rule)(nil)).Elem()
}

func (i RuleArray) ToRuleArrayOutput() RuleArrayOutput {
	return i.ToRuleArrayOutputWithContext(context.Background())
}

func (i RuleArray) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleArrayOutput)
}

// A rule to be applied in a Policy.
type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

// Required
func (o RuleOutput) Action() RuleActionPtrOutput {
	return o.ApplyT(func(v Rule) *RuleAction { return v.Action }).(RuleActionPtrOutput)
}

// Additional restrictions that must be met. All conditions must pass for the rule to match.
func (o RuleOutput) Conditions() ConditionArrayOutput {
	return o.ApplyT(func(v Rule) []Condition { return v.Conditions }).(ConditionArrayOutput)
}

// Human-readable description of the rule.
func (o RuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
func (o RuleOutput) In() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Rule) []string { return v.In }).(pulumi.StringArrayOutput)
}

// The config returned to callers of CheckPolicy for any entries that match the LOG action.
func (o RuleOutput) LogConfig() LogConfigArrayOutput {
	return o.ApplyT(func(v Rule) []LogConfig { return v.LogConfig }).(LogConfigArrayOutput)
}

// If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
func (o RuleOutput) NotIn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Rule) []string { return v.NotIn }).(pulumi.StringArrayOutput)
}

// A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
func (o RuleOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Rule) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type RuleArrayOutput struct{ *pulumi.OutputState }

func (RuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Rule)(nil)).Elem()
}

func (o RuleArrayOutput) ToRuleArrayOutput() RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) Index(i pulumi.IntInput) RuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Rule {
		return vs[0].([]Rule)[vs[1].(int)]
	}).(RuleOutput)
}

// A rule to be applied in a Policy.
type RuleResponse struct {
	// Required
	Action string `pulumi:"action"`
	// Additional restrictions that must be met. All conditions must pass for the rule to match.
	Conditions []ConditionResponse `pulumi:"conditions"`
	// Human-readable description of the rule.
	Description string `pulumi:"description"`
	// If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
	In []string `pulumi:"in"`
	// The config returned to callers of CheckPolicy for any entries that match the LOG action.
	LogConfig []LogConfigResponse `pulumi:"logConfig"`
	// If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
	NotIn []string `pulumi:"notIn"`
	// A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
	Permissions []string `pulumi:"permissions"`
}

// A rule to be applied in a Policy.
type RuleResponseOutput struct{ *pulumi.OutputState }

func (RuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResponse)(nil)).Elem()
}

func (o RuleResponseOutput) ToRuleResponseOutput() RuleResponseOutput {
	return o
}

func (o RuleResponseOutput) ToRuleResponseOutputWithContext(ctx context.Context) RuleResponseOutput {
	return o
}

// Required
func (o RuleResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RuleResponse) string { return v.Action }).(pulumi.StringOutput)
}

// Additional restrictions that must be met. All conditions must pass for the rule to match.
func (o RuleResponseOutput) Conditions() ConditionResponseArrayOutput {
	return o.ApplyT(func(v RuleResponse) []ConditionResponse { return v.Conditions }).(ConditionResponseArrayOutput)
}

// Human-readable description of the rule.
func (o RuleResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RuleResponse) string { return v.Description }).(pulumi.StringOutput)
}

// If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
func (o RuleResponseOutput) In() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleResponse) []string { return v.In }).(pulumi.StringArrayOutput)
}

// The config returned to callers of CheckPolicy for any entries that match the LOG action.
func (o RuleResponseOutput) LogConfig() LogConfigResponseArrayOutput {
	return o.ApplyT(func(v RuleResponse) []LogConfigResponse { return v.LogConfig }).(LogConfigResponseArrayOutput)
}

// If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
func (o RuleResponseOutput) NotIn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleResponse) []string { return v.NotIn }).(pulumi.StringArrayOutput)
}

// A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
func (o RuleResponseOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleResponse) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type RuleResponseArrayOutput struct{ *pulumi.OutputState }

func (RuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleResponse)(nil)).Elem()
}

func (o RuleResponseArrayOutput) ToRuleResponseArrayOutput() RuleResponseArrayOutput {
	return o
}

func (o RuleResponseArrayOutput) ToRuleResponseArrayOutputWithContext(ctx context.Context) RuleResponseArrayOutput {
	return o
}

func (o RuleResponseArrayOutput) Index(i pulumi.IntInput) RuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleResponse {
		return vs[0].([]RuleResponse)[vs[1].(int)]
	}).(RuleResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationLoggingOptionsInput)(nil)).Elem(), AuthorizationLoggingOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationLoggingOptionsPtrInput)(nil)).Elem(), AuthorizationLoggingOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAuditOptionsInput)(nil)).Elem(), CloudAuditOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAuditOptionsPtrInput)(nil)).Elem(), CloudAuditOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionInput)(nil)).Elem(), ConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionArrayInput)(nil)).Elem(), ConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CounterOptionsInput)(nil)).Elem(), CounterOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CounterOptionsPtrInput)(nil)).Elem(), CounterOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomFieldInput)(nil)).Elem(), CustomFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomFieldArrayInput)(nil)).Elem(), CustomFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataAccessOptionsInput)(nil)).Elem(), DataAccessOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataAccessOptionsPtrInput)(nil)).Elem(), DataAccessOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigInput)(nil)).Elem(), LogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigArrayInput)(nil)).Elem(), LogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), RuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleArrayInput)(nil)).Elem(), RuleArray{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationLoggingOptionsOutput{})
	pulumi.RegisterOutputType(AuthorizationLoggingOptionsPtrOutput{})
	pulumi.RegisterOutputType(AuthorizationLoggingOptionsResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudAuditOptionsOutput{})
	pulumi.RegisterOutputType(CloudAuditOptionsPtrOutput{})
	pulumi.RegisterOutputType(CloudAuditOptionsResponseOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionArrayOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(CounterOptionsOutput{})
	pulumi.RegisterOutputType(CounterOptionsPtrOutput{})
	pulumi.RegisterOutputType(CounterOptionsResponseOutput{})
	pulumi.RegisterOutputType(CustomFieldOutput{})
	pulumi.RegisterOutputType(CustomFieldArrayOutput{})
	pulumi.RegisterOutputType(CustomFieldResponseOutput{})
	pulumi.RegisterOutputType(CustomFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(DataAccessOptionsOutput{})
	pulumi.RegisterOutputType(DataAccessOptionsPtrOutput{})
	pulumi.RegisterOutputType(DataAccessOptionsResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(LogConfigOutput{})
	pulumi.RegisterOutputType(LogConfigArrayOutput{})
	pulumi.RegisterOutputType(LogConfigResponseOutput{})
	pulumi.RegisterOutputType(LogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(RuleOutput{})
	pulumi.RegisterOutputType(RuleArrayOutput{})
	pulumi.RegisterOutputType(RuleResponseOutput{})
	pulumi.RegisterOutputType(RuleResponseArrayOutput{})
}
