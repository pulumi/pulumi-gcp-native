// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type GameServerDeploymentIamPolicy struct {
	pulumi.CustomResourceState
}

// NewGameServerDeploymentIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewGameServerDeploymentIamPolicy(ctx *pulumi.Context,
	name string, args *GameServerDeploymentIamPolicyArgs, opts ...pulumi.ResourceOption) (*GameServerDeploymentIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GameServerDeploymentsId == nil {
		return nil, errors.New("invalid value for required argument 'GameServerDeploymentsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource GameServerDeploymentIamPolicy
	err := ctx.RegisterResource("google-cloud:gameservices/v1:GameServerDeploymentIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameServerDeploymentIamPolicy gets an existing GameServerDeploymentIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameServerDeploymentIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GameServerDeploymentIamPolicyState, opts ...pulumi.ResourceOption) (*GameServerDeploymentIamPolicy, error) {
	var resource GameServerDeploymentIamPolicy
	err := ctx.ReadResource("google-cloud:gameservices/v1:GameServerDeploymentIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GameServerDeploymentIamPolicy resources.
type gameServerDeploymentIamPolicyState struct {
}

type GameServerDeploymentIamPolicyState struct {
}

func (GameServerDeploymentIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerDeploymentIamPolicyState)(nil)).Elem()
}

type gameServerDeploymentIamPolicyArgs struct {
	GameServerDeploymentsId string `pulumi:"gameServerDeploymentsId"`
	LocationsId             string `pulumi:"locationsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a GameServerDeploymentIamPolicy resource.
type GameServerDeploymentIamPolicyArgs struct {
	GameServerDeploymentsId pulumi.StringInput
	LocationsId             pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (GameServerDeploymentIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gameServerDeploymentIamPolicyArgs)(nil)).Elem()
}

type GameServerDeploymentIamPolicyInput interface {
	pulumi.Input

	ToGameServerDeploymentIamPolicyOutput() GameServerDeploymentIamPolicyOutput
	ToGameServerDeploymentIamPolicyOutputWithContext(ctx context.Context) GameServerDeploymentIamPolicyOutput
}

func (*GameServerDeploymentIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*GameServerDeploymentIamPolicy)(nil))
}

func (i *GameServerDeploymentIamPolicy) ToGameServerDeploymentIamPolicyOutput() GameServerDeploymentIamPolicyOutput {
	return i.ToGameServerDeploymentIamPolicyOutputWithContext(context.Background())
}

func (i *GameServerDeploymentIamPolicy) ToGameServerDeploymentIamPolicyOutputWithContext(ctx context.Context) GameServerDeploymentIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GameServerDeploymentIamPolicyOutput)
}

type GameServerDeploymentIamPolicyOutput struct {
	*pulumi.OutputState
}

func (GameServerDeploymentIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GameServerDeploymentIamPolicy)(nil))
}

func (o GameServerDeploymentIamPolicyOutput) ToGameServerDeploymentIamPolicyOutput() GameServerDeploymentIamPolicyOutput {
	return o
}

func (o GameServerDeploymentIamPolicyOutput) ToGameServerDeploymentIamPolicyOutputWithContext(ctx context.Context) GameServerDeploymentIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GameServerDeploymentIamPolicyOutput{})
}
