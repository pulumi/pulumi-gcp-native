// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a document.
type Document struct {
	pulumi.CustomResourceState

	// Document AI format to save the structured content, including OCR.
	CloudAiDocument GoogleCloudDocumentaiV1DocumentResponseOutput `pulumi:"cloudAiDocument"`
	// Indicates the category (image, audio, video etc.) of the original content.
	ContentCategory pulumi.StringOutput `pulumi:"contentCategory"`
	// The time when the document is created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The user who creates the document.
	Creator pulumi.StringOutput `pulumi:"creator"`
	// Display name of the document given by the user. This name will be displayed in the UI. Customer can populate this field with the name of the document. This differs from the 'title' field as 'title' is optional and stores the top heading in the document.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Uri to display the document, for example, in the UI.
	DisplayUri pulumi.StringOutput `pulumi:"displayUri"`
	// The Document schema name. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
	DocumentSchemaName pulumi.StringOutput `pulumi:"documentSchemaName"`
	// Raw document content.
	InlineRawDocument pulumi.StringOutput `pulumi:"inlineRawDocument"`
	Location          pulumi.StringOutput `pulumi:"location"`
	// The resource name of the document. Format: projects/{project_number}/locations/{location}/documents/{document_id}. The name is ignored when creating a document.
	Name pulumi.StringOutput `pulumi:"name"`
	// Other document format, such as PPTX, XLXS
	PlainText pulumi.StringOutput `pulumi:"plainText"`
	Project   pulumi.StringOutput `pulumi:"project"`
	// List of values that are user supplied metadata.
	Properties GoogleCloudContentwarehouseV1PropertyResponseArrayOutput `pulumi:"properties"`
	// This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.
	RawDocumentFileType pulumi.StringOutput `pulumi:"rawDocumentFileType"`
	// Raw document file in Cloud Storage path.
	RawDocumentPath pulumi.StringOutput `pulumi:"rawDocumentPath"`
	// The reference ID set by customers. Must be unique per project and location.
	ReferenceId pulumi.StringOutput `pulumi:"referenceId"`
	// If true, text extraction will not be performed.
	TextExtractionDisabled pulumi.BoolOutput `pulumi:"textExtractionDisabled"`
	// If true, text extraction will be performed.
	TextExtractionEnabled pulumi.BoolOutput `pulumi:"textExtractionEnabled"`
	// Title that describes the document. This can be the top heading or text that describes the document.
	Title pulumi.StringOutput `pulumi:"title"`
	// The time when the document is last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The user who lastly updates the document.
	Updater pulumi.StringOutput `pulumi:"updater"`
}

// NewDocument registers a new resource with the given unique name, arguments, and options.
func NewDocument(ctx *pulumi.Context,
	name string, args *DocumentArgs, opts ...pulumi.ResourceOption) (*Document, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource Document
	err := ctx.RegisterResource("google-native:contentwarehouse/v1:Document", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocument gets an existing Document resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocument(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentState, opts ...pulumi.ResourceOption) (*Document, error) {
	var resource Document
	err := ctx.ReadResource("google-native:contentwarehouse/v1:Document", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Document resources.
type documentState struct {
}

type DocumentState struct {
}

func (DocumentState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentState)(nil)).Elem()
}

type documentArgs struct {
	// Document AI format to save the structured content, including OCR.
	CloudAiDocument *GoogleCloudDocumentaiV1Document `pulumi:"cloudAiDocument"`
	// Request Option for processing Cloud AI Document in Document Warehouse. This field offers limited support for mapping entities from Cloud AI Document to Warehouse Document. Please consult with product team before using this field and other available options.
	CloudAiDocumentOption *GoogleCloudContentwarehouseV1CloudAIDocumentOption `pulumi:"cloudAiDocumentOption"`
	// Indicates the category (image, audio, video etc.) of the original content.
	ContentCategory *DocumentContentCategory `pulumi:"contentCategory"`
	// Field mask for creating Document fields. If mask path is empty, it means all fields are masked. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
	CreateMask *string `pulumi:"createMask"`
	// The user who creates the document.
	Creator *string `pulumi:"creator"`
	// Display name of the document given by the user. This name will be displayed in the UI. Customer can populate this field with the name of the document. This differs from the 'title' field as 'title' is optional and stores the top heading in the document.
	DisplayName string `pulumi:"displayName"`
	// Uri to display the document, for example, in the UI.
	DisplayUri *string `pulumi:"displayUri"`
	// The Document schema name. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
	DocumentSchemaName *string `pulumi:"documentSchemaName"`
	// Raw document content.
	InlineRawDocument *string `pulumi:"inlineRawDocument"`
	Location          *string `pulumi:"location"`
	// The resource name of the document. Format: projects/{project_number}/locations/{location}/documents/{document_id}. The name is ignored when creating a document.
	Name *string `pulumi:"name"`
	// Other document format, such as PPTX, XLXS
	PlainText *string `pulumi:"plainText"`
	// Default document policy during creation. This refers to an Identity and Access (IAM) policy, which specifies access controls for the Document. Conditions defined in the policy will be ignored.
	Policy  *GoogleIamV1Policy `pulumi:"policy"`
	Project *string            `pulumi:"project"`
	// List of values that are user supplied metadata.
	Properties []GoogleCloudContentwarehouseV1Property `pulumi:"properties"`
	// This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.
	RawDocumentFileType *DocumentRawDocumentFileType `pulumi:"rawDocumentFileType"`
	// Raw document file in Cloud Storage path.
	RawDocumentPath *string `pulumi:"rawDocumentPath"`
	// The reference ID set by customers. Must be unique per project and location.
	ReferenceId *string `pulumi:"referenceId"`
	// The meta information collected about the end user, used to enforce access control for the service.
	RequestMetadata *GoogleCloudContentwarehouseV1RequestMetadata `pulumi:"requestMetadata"`
	// If true, text extraction will not be performed.
	TextExtractionDisabled *bool `pulumi:"textExtractionDisabled"`
	// If true, text extraction will be performed.
	TextExtractionEnabled *bool `pulumi:"textExtractionEnabled"`
	// Title that describes the document. This can be the top heading or text that describes the document.
	Title *string `pulumi:"title"`
	// The user who lastly updates the document.
	Updater *string `pulumi:"updater"`
}

// The set of arguments for constructing a Document resource.
type DocumentArgs struct {
	// Document AI format to save the structured content, including OCR.
	CloudAiDocument GoogleCloudDocumentaiV1DocumentPtrInput
	// Request Option for processing Cloud AI Document in Document Warehouse. This field offers limited support for mapping entities from Cloud AI Document to Warehouse Document. Please consult with product team before using this field and other available options.
	CloudAiDocumentOption GoogleCloudContentwarehouseV1CloudAIDocumentOptionPtrInput
	// Indicates the category (image, audio, video etc.) of the original content.
	ContentCategory DocumentContentCategoryPtrInput
	// Field mask for creating Document fields. If mask path is empty, it means all fields are masked. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
	CreateMask pulumi.StringPtrInput
	// The user who creates the document.
	Creator pulumi.StringPtrInput
	// Display name of the document given by the user. This name will be displayed in the UI. Customer can populate this field with the name of the document. This differs from the 'title' field as 'title' is optional and stores the top heading in the document.
	DisplayName pulumi.StringInput
	// Uri to display the document, for example, in the UI.
	DisplayUri pulumi.StringPtrInput
	// The Document schema name. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
	DocumentSchemaName pulumi.StringPtrInput
	// Raw document content.
	InlineRawDocument pulumi.StringPtrInput
	Location          pulumi.StringPtrInput
	// The resource name of the document. Format: projects/{project_number}/locations/{location}/documents/{document_id}. The name is ignored when creating a document.
	Name pulumi.StringPtrInput
	// Other document format, such as PPTX, XLXS
	PlainText pulumi.StringPtrInput
	// Default document policy during creation. This refers to an Identity and Access (IAM) policy, which specifies access controls for the Document. Conditions defined in the policy will be ignored.
	Policy  GoogleIamV1PolicyPtrInput
	Project pulumi.StringPtrInput
	// List of values that are user supplied metadata.
	Properties GoogleCloudContentwarehouseV1PropertyArrayInput
	// This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.
	RawDocumentFileType DocumentRawDocumentFileTypePtrInput
	// Raw document file in Cloud Storage path.
	RawDocumentPath pulumi.StringPtrInput
	// The reference ID set by customers. Must be unique per project and location.
	ReferenceId pulumi.StringPtrInput
	// The meta information collected about the end user, used to enforce access control for the service.
	RequestMetadata GoogleCloudContentwarehouseV1RequestMetadataPtrInput
	// If true, text extraction will not be performed.
	TextExtractionDisabled pulumi.BoolPtrInput
	// If true, text extraction will be performed.
	TextExtractionEnabled pulumi.BoolPtrInput
	// Title that describes the document. This can be the top heading or text that describes the document.
	Title pulumi.StringPtrInput
	// The user who lastly updates the document.
	Updater pulumi.StringPtrInput
}

func (DocumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentArgs)(nil)).Elem()
}

type DocumentInput interface {
	pulumi.Input

	ToDocumentOutput() DocumentOutput
	ToDocumentOutputWithContext(ctx context.Context) DocumentOutput
}

func (*Document) ElementType() reflect.Type {
	return reflect.TypeOf((**Document)(nil)).Elem()
}

func (i *Document) ToDocumentOutput() DocumentOutput {
	return i.ToDocumentOutputWithContext(context.Background())
}

func (i *Document) ToDocumentOutputWithContext(ctx context.Context) DocumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentOutput)
}

type DocumentOutput struct{ *pulumi.OutputState }

func (DocumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Document)(nil)).Elem()
}

func (o DocumentOutput) ToDocumentOutput() DocumentOutput {
	return o
}

func (o DocumentOutput) ToDocumentOutputWithContext(ctx context.Context) DocumentOutput {
	return o
}

// Document AI format to save the structured content, including OCR.
func (o DocumentOutput) CloudAiDocument() GoogleCloudDocumentaiV1DocumentResponseOutput {
	return o.ApplyT(func(v *Document) GoogleCloudDocumentaiV1DocumentResponseOutput { return v.CloudAiDocument }).(GoogleCloudDocumentaiV1DocumentResponseOutput)
}

// Indicates the category (image, audio, video etc.) of the original content.
func (o DocumentOutput) ContentCategory() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.ContentCategory }).(pulumi.StringOutput)
}

// The time when the document is created.
func (o DocumentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The user who creates the document.
func (o DocumentOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// Display name of the document given by the user. This name will be displayed in the UI. Customer can populate this field with the name of the document. This differs from the 'title' field as 'title' is optional and stores the top heading in the document.
func (o DocumentOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Uri to display the document, for example, in the UI.
func (o DocumentOutput) DisplayUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.DisplayUri }).(pulumi.StringOutput)
}

// The Document schema name. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
func (o DocumentOutput) DocumentSchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.DocumentSchemaName }).(pulumi.StringOutput)
}

// Raw document content.
func (o DocumentOutput) InlineRawDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.InlineRawDocument }).(pulumi.StringOutput)
}

func (o DocumentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the document. Format: projects/{project_number}/locations/{location}/documents/{document_id}. The name is ignored when creating a document.
func (o DocumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Other document format, such as PPTX, XLXS
func (o DocumentOutput) PlainText() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.PlainText }).(pulumi.StringOutput)
}

func (o DocumentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// List of values that are user supplied metadata.
func (o DocumentOutput) Properties() GoogleCloudContentwarehouseV1PropertyResponseArrayOutput {
	return o.ApplyT(func(v *Document) GoogleCloudContentwarehouseV1PropertyResponseArrayOutput { return v.Properties }).(GoogleCloudContentwarehouseV1PropertyResponseArrayOutput)
}

// This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.
func (o DocumentOutput) RawDocumentFileType() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.RawDocumentFileType }).(pulumi.StringOutput)
}

// Raw document file in Cloud Storage path.
func (o DocumentOutput) RawDocumentPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.RawDocumentPath }).(pulumi.StringOutput)
}

// The reference ID set by customers. Must be unique per project and location.
func (o DocumentOutput) ReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.ReferenceId }).(pulumi.StringOutput)
}

// If true, text extraction will not be performed.
func (o DocumentOutput) TextExtractionDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Document) pulumi.BoolOutput { return v.TextExtractionDisabled }).(pulumi.BoolOutput)
}

// If true, text extraction will be performed.
func (o DocumentOutput) TextExtractionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Document) pulumi.BoolOutput { return v.TextExtractionEnabled }).(pulumi.BoolOutput)
}

// Title that describes the document. This can be the top heading or text that describes the document.
func (o DocumentOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The time when the document is last updated.
func (o DocumentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The user who lastly updates the document.
func (o DocumentOutput) Updater() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Updater }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentInput)(nil)).Elem(), &Document{})
	pulumi.RegisterOutputType(DocumentOutput{})
}
