// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a ruleset.
type RuleSet struct {
	pulumi.CustomResourceState

	// Short description of the rule-set.
	Description pulumi.StringOutput `pulumi:"description"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// The resource name of the rule set. Managed internally. Format: projects/{project_number}/locations/{location}/ruleSet/{rule_set_id}. The name is ignored when creating a rule set.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// List of rules given by the customer.
	Rules GoogleCloudContentwarehouseV1RuleResponseArrayOutput `pulumi:"rules"`
	// Source of the rules i.e., customer name.
	Source pulumi.StringOutput `pulumi:"source"`
}

// NewRuleSet registers a new resource with the given unique name, arguments, and options.
func NewRuleSet(ctx *pulumi.Context,
	name string, args *RuleSetArgs, opts ...pulumi.ResourceOption) (*RuleSet, error) {
	if args == nil {
		args = &RuleSetArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleSet
	err := ctx.RegisterResource("google-native:contentwarehouse/v1:RuleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleSet gets an existing RuleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleSetState, opts ...pulumi.ResourceOption) (*RuleSet, error) {
	var resource RuleSet
	err := ctx.ReadResource("google-native:contentwarehouse/v1:RuleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleSet resources.
type ruleSetState struct {
}

type RuleSetState struct {
}

func (RuleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleSetState)(nil)).Elem()
}

type ruleSetArgs struct {
	// Short description of the rule-set.
	Description *string `pulumi:"description"`
	Location    *string `pulumi:"location"`
	// The resource name of the rule set. Managed internally. Format: projects/{project_number}/locations/{location}/ruleSet/{rule_set_id}. The name is ignored when creating a rule set.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// List of rules given by the customer.
	Rules []GoogleCloudContentwarehouseV1Rule `pulumi:"rules"`
	// Source of the rules i.e., customer name.
	Source *string `pulumi:"source"`
}

// The set of arguments for constructing a RuleSet resource.
type RuleSetArgs struct {
	// Short description of the rule-set.
	Description pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// The resource name of the rule set. Managed internally. Format: projects/{project_number}/locations/{location}/ruleSet/{rule_set_id}. The name is ignored when creating a rule set.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// List of rules given by the customer.
	Rules GoogleCloudContentwarehouseV1RuleArrayInput
	// Source of the rules i.e., customer name.
	Source pulumi.StringPtrInput
}

func (RuleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleSetArgs)(nil)).Elem()
}

type RuleSetInput interface {
	pulumi.Input

	ToRuleSetOutput() RuleSetOutput
	ToRuleSetOutputWithContext(ctx context.Context) RuleSetOutput
}

func (*RuleSet) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSet)(nil)).Elem()
}

func (i *RuleSet) ToRuleSetOutput() RuleSetOutput {
	return i.ToRuleSetOutputWithContext(context.Background())
}

func (i *RuleSet) ToRuleSetOutputWithContext(ctx context.Context) RuleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSetOutput)
}

type RuleSetOutput struct{ *pulumi.OutputState }

func (RuleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSet)(nil)).Elem()
}

func (o RuleSetOutput) ToRuleSetOutput() RuleSetOutput {
	return o
}

func (o RuleSetOutput) ToRuleSetOutputWithContext(ctx context.Context) RuleSetOutput {
	return o
}

// Short description of the rule-set.
func (o RuleSetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleSet) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o RuleSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the rule set. Managed internally. Format: projects/{project_number}/locations/{location}/ruleSet/{rule_set_id}. The name is ignored when creating a rule set.
func (o RuleSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RuleSetOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleSet) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// List of rules given by the customer.
func (o RuleSetOutput) Rules() GoogleCloudContentwarehouseV1RuleResponseArrayOutput {
	return o.ApplyT(func(v *RuleSet) GoogleCloudContentwarehouseV1RuleResponseArrayOutput { return v.Rules }).(GoogleCloudContentwarehouseV1RuleResponseArrayOutput)
}

// Source of the rules i.e., customer name.
func (o RuleSetOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleSet) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSetInput)(nil)).Elem(), &RuleSet{})
	pulumi.RegisterOutputType(RuleSetOutput{})
}
