// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a document schema.
type DocumentSchema struct {
	pulumi.CustomResourceState

	// The time when the document schema is created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Schema description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Name of the schema given by the user. Must be unique per project.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Document Type, true refers the document is a folder, otherwise it is a typical document.
	DocumentIsFolder pulumi.BoolOutput   `pulumi:"documentIsFolder"`
	Location         pulumi.StringOutput `pulumi:"location"`
	// The resource name of the document schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}. The name is ignored when creating a document schema.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Document details.
	PropertyDefinitions GoogleCloudContentwarehouseV1PropertyDefinitionResponseArrayOutput `pulumi:"propertyDefinitions"`
	// The time when the document schema is last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDocumentSchema registers a new resource with the given unique name, arguments, and options.
func NewDocumentSchema(ctx *pulumi.Context,
	name string, args *DocumentSchemaArgs, opts ...pulumi.ResourceOption) (*DocumentSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource DocumentSchema
	err := ctx.RegisterResource("google-native:contentwarehouse/v1:DocumentSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocumentSchema gets an existing DocumentSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocumentSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentSchemaState, opts ...pulumi.ResourceOption) (*DocumentSchema, error) {
	var resource DocumentSchema
	err := ctx.ReadResource("google-native:contentwarehouse/v1:DocumentSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DocumentSchema resources.
type documentSchemaState struct {
}

type DocumentSchemaState struct {
}

func (DocumentSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentSchemaState)(nil)).Elem()
}

type documentSchemaArgs struct {
	// Schema description.
	Description *string `pulumi:"description"`
	// Name of the schema given by the user. Must be unique per project.
	DisplayName string `pulumi:"displayName"`
	// Document Type, true refers the document is a folder, otherwise it is a typical document.
	DocumentIsFolder *bool   `pulumi:"documentIsFolder"`
	Location         *string `pulumi:"location"`
	// The resource name of the document schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}. The name is ignored when creating a document schema.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Document details.
	PropertyDefinitions []GoogleCloudContentwarehouseV1PropertyDefinition `pulumi:"propertyDefinitions"`
}

// The set of arguments for constructing a DocumentSchema resource.
type DocumentSchemaArgs struct {
	// Schema description.
	Description pulumi.StringPtrInput
	// Name of the schema given by the user. Must be unique per project.
	DisplayName pulumi.StringInput
	// Document Type, true refers the document is a folder, otherwise it is a typical document.
	DocumentIsFolder pulumi.BoolPtrInput
	Location         pulumi.StringPtrInput
	// The resource name of the document schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}. The name is ignored when creating a document schema.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Document details.
	PropertyDefinitions GoogleCloudContentwarehouseV1PropertyDefinitionArrayInput
}

func (DocumentSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentSchemaArgs)(nil)).Elem()
}

type DocumentSchemaInput interface {
	pulumi.Input

	ToDocumentSchemaOutput() DocumentSchemaOutput
	ToDocumentSchemaOutputWithContext(ctx context.Context) DocumentSchemaOutput
}

func (*DocumentSchema) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentSchema)(nil)).Elem()
}

func (i *DocumentSchema) ToDocumentSchemaOutput() DocumentSchemaOutput {
	return i.ToDocumentSchemaOutputWithContext(context.Background())
}

func (i *DocumentSchema) ToDocumentSchemaOutputWithContext(ctx context.Context) DocumentSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentSchemaOutput)
}

type DocumentSchemaOutput struct{ *pulumi.OutputState }

func (DocumentSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentSchema)(nil)).Elem()
}

func (o DocumentSchemaOutput) ToDocumentSchemaOutput() DocumentSchemaOutput {
	return o
}

func (o DocumentSchemaOutput) ToDocumentSchemaOutputWithContext(ctx context.Context) DocumentSchemaOutput {
	return o
}

// The time when the document schema is created.
func (o DocumentSchemaOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Schema description.
func (o DocumentSchemaOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Name of the schema given by the user. Must be unique per project.
func (o DocumentSchemaOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Document Type, true refers the document is a folder, otherwise it is a typical document.
func (o DocumentSchemaOutput) DocumentIsFolder() pulumi.BoolOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.BoolOutput { return v.DocumentIsFolder }).(pulumi.BoolOutput)
}

func (o DocumentSchemaOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the document schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}. The name is ignored when creating a document schema.
func (o DocumentSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DocumentSchemaOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Document details.
func (o DocumentSchemaOutput) PropertyDefinitions() GoogleCloudContentwarehouseV1PropertyDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *DocumentSchema) GoogleCloudContentwarehouseV1PropertyDefinitionResponseArrayOutput {
		return v.PropertyDefinitions
	}).(GoogleCloudContentwarehouseV1PropertyDefinitionResponseArrayOutput)
}

// The time when the document schema is last updated.
func (o DocumentSchemaOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DocumentSchema) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentSchemaInput)(nil)).Elem(), &DocumentSchema{})
	pulumi.RegisterOutputType(DocumentSchemaOutput{})
}
