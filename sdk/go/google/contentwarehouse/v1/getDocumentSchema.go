// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets a document schema. Returns NOT_FOUND if the document schema does not exist.
func LookupDocumentSchema(ctx *pulumi.Context, args *LookupDocumentSchemaArgs, opts ...pulumi.InvokeOption) (*LookupDocumentSchemaResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDocumentSchemaResult
	err := ctx.Invoke("google-native:contentwarehouse/v1:getDocumentSchema", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDocumentSchemaArgs struct {
	DocumentSchemaId string  `pulumi:"documentSchemaId"`
	Location         string  `pulumi:"location"`
	Project          *string `pulumi:"project"`
}

type LookupDocumentSchemaResult struct {
	// The time when the document schema is created.
	CreateTime string `pulumi:"createTime"`
	// Schema description.
	Description string `pulumi:"description"`
	// Name of the schema given by the user. Must be unique per project.
	DisplayName string `pulumi:"displayName"`
	// Document Type, true refers the document is a folder, otherwise it is a typical document.
	DocumentIsFolder bool `pulumi:"documentIsFolder"`
	// The resource name of the document schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}. The name is ignored when creating a document schema.
	Name string `pulumi:"name"`
	// Document details.
	PropertyDefinitions []GoogleCloudContentwarehouseV1PropertyDefinitionResponse `pulumi:"propertyDefinitions"`
	// The time when the document schema is last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupDocumentSchemaOutput(ctx *pulumi.Context, args LookupDocumentSchemaOutputArgs, opts ...pulumi.InvokeOption) LookupDocumentSchemaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDocumentSchemaResult, error) {
			args := v.(LookupDocumentSchemaArgs)
			r, err := LookupDocumentSchema(ctx, &args, opts...)
			var s LookupDocumentSchemaResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDocumentSchemaResultOutput)
}

type LookupDocumentSchemaOutputArgs struct {
	DocumentSchemaId pulumi.StringInput    `pulumi:"documentSchemaId"`
	Location         pulumi.StringInput    `pulumi:"location"`
	Project          pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupDocumentSchemaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDocumentSchemaArgs)(nil)).Elem()
}

type LookupDocumentSchemaResultOutput struct{ *pulumi.OutputState }

func (LookupDocumentSchemaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDocumentSchemaResult)(nil)).Elem()
}

func (o LookupDocumentSchemaResultOutput) ToLookupDocumentSchemaResultOutput() LookupDocumentSchemaResultOutput {
	return o
}

func (o LookupDocumentSchemaResultOutput) ToLookupDocumentSchemaResultOutputWithContext(ctx context.Context) LookupDocumentSchemaResultOutput {
	return o
}

func (o LookupDocumentSchemaResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDocumentSchemaResult] {
	return pulumix.Output[LookupDocumentSchemaResult]{
		OutputState: o.OutputState,
	}
}

// The time when the document schema is created.
func (o LookupDocumentSchemaResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentSchemaResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Schema description.
func (o LookupDocumentSchemaResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentSchemaResult) string { return v.Description }).(pulumi.StringOutput)
}

// Name of the schema given by the user. Must be unique per project.
func (o LookupDocumentSchemaResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentSchemaResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Document Type, true refers the document is a folder, otherwise it is a typical document.
func (o LookupDocumentSchemaResultOutput) DocumentIsFolder() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDocumentSchemaResult) bool { return v.DocumentIsFolder }).(pulumi.BoolOutput)
}

// The resource name of the document schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}. The name is ignored when creating a document schema.
func (o LookupDocumentSchemaResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentSchemaResult) string { return v.Name }).(pulumi.StringOutput)
}

// Document details.
func (o LookupDocumentSchemaResultOutput) PropertyDefinitions() GoogleCloudContentwarehouseV1PropertyDefinitionResponseArrayOutput {
	return o.ApplyT(func(v LookupDocumentSchemaResult) []GoogleCloudContentwarehouseV1PropertyDefinitionResponse {
		return v.PropertyDefinitions
	}).(GoogleCloudContentwarehouseV1PropertyDefinitionResponseArrayOutput)
}

// The time when the document schema is last updated.
func (o LookupDocumentSchemaResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDocumentSchemaResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDocumentSchemaResultOutput{})
}
