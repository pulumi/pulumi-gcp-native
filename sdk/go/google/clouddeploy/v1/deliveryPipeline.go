// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new DeliveryPipeline in a given project and location.
type DeliveryPipeline struct {
	pulumi.CustomResourceState

	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Information around the state of the Delivery Pipeline.
	Condition PipelineConditionResponseOutput `pulumi:"condition"`
	// Time at which the pipeline was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. ID of the `DeliveryPipeline`.
	DeliveryPipelineId pulumi.StringOutput `pulumi:"deliveryPipelineId"`
	// Description of the `DeliveryPipeline`. Max length is 255 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Optional. Name of the `DeliveryPipeline`. Format is `projects/{project}/locations/{location}/deliveryPipelines/a-z{0,62}`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
	SerialPipeline SerialPipelineResponseOutput `pulumi:"serialPipeline"`
	// When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
	Suspended pulumi.BoolOutput `pulumi:"suspended"`
	// Unique identifier of the `DeliveryPipeline`.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Most recent time at which the pipeline was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDeliveryPipeline registers a new resource with the given unique name, arguments, and options.
func NewDeliveryPipeline(ctx *pulumi.Context,
	name string, args *DeliveryPipelineArgs, opts ...pulumi.ResourceOption) (*DeliveryPipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeliveryPipelineId == nil {
		return nil, errors.New("invalid value for required argument 'DeliveryPipelineId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"deliveryPipelineId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeliveryPipeline
	err := ctx.RegisterResource("google-native:clouddeploy/v1:DeliveryPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeliveryPipeline gets an existing DeliveryPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeliveryPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeliveryPipelineState, opts ...pulumi.ResourceOption) (*DeliveryPipeline, error) {
	var resource DeliveryPipeline
	err := ctx.ReadResource("google-native:clouddeploy/v1:DeliveryPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeliveryPipeline resources.
type deliveryPipelineState struct {
}

type DeliveryPipelineState struct {
}

func (DeliveryPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*deliveryPipelineState)(nil)).Elem()
}

type deliveryPipelineArgs struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy.
	Annotations map[string]string `pulumi:"annotations"`
	// Required. ID of the `DeliveryPipeline`.
	DeliveryPipelineId string `pulumi:"deliveryPipelineId"`
	// Description of the `DeliveryPipeline`. Max length is 255 characters.
	Description *string `pulumi:"description"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Optional. Name of the `DeliveryPipeline`. Format is `projects/{project}/locations/{location}/deliveryPipelines/a-z{0,62}`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
	SerialPipeline *SerialPipeline `pulumi:"serialPipeline"`
	// When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
	Suspended *bool `pulumi:"suspended"`
}

// The set of arguments for constructing a DeliveryPipeline resource.
type DeliveryPipelineArgs struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy.
	Annotations pulumi.StringMapInput
	// Required. ID of the `DeliveryPipeline`.
	DeliveryPipelineId pulumi.StringInput
	// Description of the `DeliveryPipeline`. Max length is 255 characters.
	Description pulumi.StringPtrInput
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Optional. Name of the `DeliveryPipeline`. Format is `projects/{project}/locations/{location}/deliveryPipelines/a-z{0,62}`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
	SerialPipeline SerialPipelinePtrInput
	// When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
	Suspended pulumi.BoolPtrInput
}

func (DeliveryPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deliveryPipelineArgs)(nil)).Elem()
}

type DeliveryPipelineInput interface {
	pulumi.Input

	ToDeliveryPipelineOutput() DeliveryPipelineOutput
	ToDeliveryPipelineOutputWithContext(ctx context.Context) DeliveryPipelineOutput
}

func (*DeliveryPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliveryPipeline)(nil)).Elem()
}

func (i *DeliveryPipeline) ToDeliveryPipelineOutput() DeliveryPipelineOutput {
	return i.ToDeliveryPipelineOutputWithContext(context.Background())
}

func (i *DeliveryPipeline) ToDeliveryPipelineOutputWithContext(ctx context.Context) DeliveryPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryPipelineOutput)
}

func (i *DeliveryPipeline) ToOutput(ctx context.Context) pulumix.Output[*DeliveryPipeline] {
	return pulumix.Output[*DeliveryPipeline]{
		OutputState: i.ToDeliveryPipelineOutputWithContext(ctx).OutputState,
	}
}

type DeliveryPipelineOutput struct{ *pulumi.OutputState }

func (DeliveryPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliveryPipeline)(nil)).Elem()
}

func (o DeliveryPipelineOutput) ToDeliveryPipelineOutput() DeliveryPipelineOutput {
	return o
}

func (o DeliveryPipelineOutput) ToDeliveryPipelineOutputWithContext(ctx context.Context) DeliveryPipelineOutput {
	return o
}

func (o DeliveryPipelineOutput) ToOutput(ctx context.Context) pulumix.Output[*DeliveryPipeline] {
	return pulumix.Output[*DeliveryPipeline]{
		OutputState: o.OutputState,
	}
}

// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy.
func (o DeliveryPipelineOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Information around the state of the Delivery Pipeline.
func (o DeliveryPipelineOutput) Condition() PipelineConditionResponseOutput {
	return o.ApplyT(func(v *DeliveryPipeline) PipelineConditionResponseOutput { return v.Condition }).(PipelineConditionResponseOutput)
}

// Time at which the pipeline was created.
func (o DeliveryPipelineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. ID of the `DeliveryPipeline`.
func (o DeliveryPipelineOutput) DeliveryPipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringOutput { return v.DeliveryPipelineId }).(pulumi.StringOutput)
}

// Description of the `DeliveryPipeline`. Max length is 255 characters.
func (o DeliveryPipelineOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o DeliveryPipelineOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
func (o DeliveryPipelineOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o DeliveryPipelineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. Name of the `DeliveryPipeline`. Format is `projects/{project}/locations/{location}/deliveryPipelines/a-z{0,62}`.
func (o DeliveryPipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DeliveryPipelineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o DeliveryPipelineOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
func (o DeliveryPipelineOutput) SerialPipeline() SerialPipelineResponseOutput {
	return o.ApplyT(func(v *DeliveryPipeline) SerialPipelineResponseOutput { return v.SerialPipeline }).(SerialPipelineResponseOutput)
}

// When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
func (o DeliveryPipelineOutput) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.BoolOutput { return v.Suspended }).(pulumi.BoolOutput)
}

// Unique identifier of the `DeliveryPipeline`.
func (o DeliveryPipelineOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Most recent time at which the pipeline was updated.
func (o DeliveryPipelineOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliveryPipeline) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeliveryPipelineInput)(nil)).Elem(), &DeliveryPipeline{})
	pulumi.RegisterOutputType(DeliveryPipelineOutput{})
}
