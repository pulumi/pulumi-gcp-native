// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single Release.
func LookupRelease(ctx *pulumi.Context, args *LookupReleaseArgs, opts ...pulumi.InvokeOption) (*LookupReleaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupReleaseResult
	err := ctx.Invoke("google-native:clouddeploy/v1:getRelease", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupReleaseArgs struct {
	DeliveryPipelineId string  `pulumi:"deliveryPipelineId"`
	Location           string  `pulumi:"location"`
	Project            *string `pulumi:"project"`
	ReleaseId          string  `pulumi:"releaseId"`
}

type LookupReleaseResult struct {
	// Indicates whether this is an abandoned release.
	Abandoned bool `pulumi:"abandoned"`
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	Annotations map[string]string `pulumi:"annotations"`
	// List of artifacts to pass through to Skaffold command.
	BuildArtifacts []BuildArtifactResponse `pulumi:"buildArtifacts"`
	// Information around the state of the Release.
	Condition ReleaseConditionResponse `pulumi:"condition"`
	// Time at which the `Release` was created.
	CreateTime string `pulumi:"createTime"`
	// Snapshot of the parent pipeline taken at release creation time.
	DeliveryPipelineSnapshot DeliveryPipelineResponse `pulumi:"deliveryPipelineSnapshot"`
	// Optional. The deploy parameters to use for all targets in this release.
	DeployParameters map[string]string `pulumi:"deployParameters"`
	// Description of the `Release`. Max length is 255 characters.
	Description string `pulumi:"description"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag string `pulumi:"etag"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Name of the `Release`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}`.
	Name string `pulumi:"name"`
	// Time at which the render completed.
	RenderEndTime string `pulumi:"renderEndTime"`
	// Time at which the render began.
	RenderStartTime string `pulumi:"renderStartTime"`
	// Current state of the render operation.
	RenderState string `pulumi:"renderState"`
	// Filepath of the Skaffold config inside of the config URI.
	SkaffoldConfigPath string `pulumi:"skaffoldConfigPath"`
	// Cloud Storage URI of tar.gz archive containing Skaffold configuration.
	SkaffoldConfigUri string `pulumi:"skaffoldConfigUri"`
	// The Skaffold version to use when operating on this release, such as "1.20.0". Not all versions are valid; Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.
	SkaffoldVersion string `pulumi:"skaffoldVersion"`
	// Map from target ID to the target artifacts created during the render operation.
	TargetArtifacts map[string]TargetArtifactResponse `pulumi:"targetArtifacts"`
	// Map from target ID to details of the render operation for that target.
	TargetRenders map[string]TargetRenderResponse `pulumi:"targetRenders"`
	// Snapshot of the targets taken at release creation time.
	TargetSnapshots []TargetResponse `pulumi:"targetSnapshots"`
	// Unique identifier of the `Release`.
	Uid string `pulumi:"uid"`
}

func LookupReleaseOutput(ctx *pulumi.Context, args LookupReleaseOutputArgs, opts ...pulumi.InvokeOption) LookupReleaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupReleaseResult, error) {
			args := v.(LookupReleaseArgs)
			r, err := LookupRelease(ctx, &args, opts...)
			var s LookupReleaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupReleaseResultOutput)
}

type LookupReleaseOutputArgs struct {
	DeliveryPipelineId pulumi.StringInput    `pulumi:"deliveryPipelineId"`
	Location           pulumi.StringInput    `pulumi:"location"`
	Project            pulumi.StringPtrInput `pulumi:"project"`
	ReleaseId          pulumi.StringInput    `pulumi:"releaseId"`
}

func (LookupReleaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReleaseArgs)(nil)).Elem()
}

type LookupReleaseResultOutput struct{ *pulumi.OutputState }

func (LookupReleaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReleaseResult)(nil)).Elem()
}

func (o LookupReleaseResultOutput) ToLookupReleaseResultOutput() LookupReleaseResultOutput {
	return o
}

func (o LookupReleaseResultOutput) ToLookupReleaseResultOutputWithContext(ctx context.Context) LookupReleaseResultOutput {
	return o
}

// Indicates whether this is an abandoned release.
func (o LookupReleaseResultOutput) Abandoned() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupReleaseResult) bool { return v.Abandoned }).(pulumi.BoolOutput)
}

// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
func (o LookupReleaseResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupReleaseResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// List of artifacts to pass through to Skaffold command.
func (o LookupReleaseResultOutput) BuildArtifacts() BuildArtifactResponseArrayOutput {
	return o.ApplyT(func(v LookupReleaseResult) []BuildArtifactResponse { return v.BuildArtifacts }).(BuildArtifactResponseArrayOutput)
}

// Information around the state of the Release.
func (o LookupReleaseResultOutput) Condition() ReleaseConditionResponseOutput {
	return o.ApplyT(func(v LookupReleaseResult) ReleaseConditionResponse { return v.Condition }).(ReleaseConditionResponseOutput)
}

// Time at which the `Release` was created.
func (o LookupReleaseResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Snapshot of the parent pipeline taken at release creation time.
func (o LookupReleaseResultOutput) DeliveryPipelineSnapshot() DeliveryPipelineResponseOutput {
	return o.ApplyT(func(v LookupReleaseResult) DeliveryPipelineResponse { return v.DeliveryPipelineSnapshot }).(DeliveryPipelineResponseOutput)
}

// Optional. The deploy parameters to use for all targets in this release.
func (o LookupReleaseResultOutput) DeployParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupReleaseResult) map[string]string { return v.DeployParameters }).(pulumi.StringMapOutput)
}

// Description of the `Release`. Max length is 255 characters.
func (o LookupReleaseResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.Description }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o LookupReleaseResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
func (o LookupReleaseResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupReleaseResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Optional. Name of the `Release`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}`.
func (o LookupReleaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// Time at which the render completed.
func (o LookupReleaseResultOutput) RenderEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.RenderEndTime }).(pulumi.StringOutput)
}

// Time at which the render began.
func (o LookupReleaseResultOutput) RenderStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.RenderStartTime }).(pulumi.StringOutput)
}

// Current state of the render operation.
func (o LookupReleaseResultOutput) RenderState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.RenderState }).(pulumi.StringOutput)
}

// Filepath of the Skaffold config inside of the config URI.
func (o LookupReleaseResultOutput) SkaffoldConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.SkaffoldConfigPath }).(pulumi.StringOutput)
}

// Cloud Storage URI of tar.gz archive containing Skaffold configuration.
func (o LookupReleaseResultOutput) SkaffoldConfigUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.SkaffoldConfigUri }).(pulumi.StringOutput)
}

// The Skaffold version to use when operating on this release, such as "1.20.0". Not all versions are valid; Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.
func (o LookupReleaseResultOutput) SkaffoldVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.SkaffoldVersion }).(pulumi.StringOutput)
}

// Map from target ID to the target artifacts created during the render operation.
func (o LookupReleaseResultOutput) TargetArtifacts() TargetArtifactResponseMapOutput {
	return o.ApplyT(func(v LookupReleaseResult) map[string]TargetArtifactResponse { return v.TargetArtifacts }).(TargetArtifactResponseMapOutput)
}

// Map from target ID to details of the render operation for that target.
func (o LookupReleaseResultOutput) TargetRenders() TargetRenderResponseMapOutput {
	return o.ApplyT(func(v LookupReleaseResult) map[string]TargetRenderResponse { return v.TargetRenders }).(TargetRenderResponseMapOutput)
}

// Snapshot of the targets taken at release creation time.
func (o LookupReleaseResultOutput) TargetSnapshots() TargetResponseArrayOutput {
	return o.ApplyT(func(v LookupReleaseResult) []TargetResponse { return v.TargetSnapshots }).(TargetResponseArrayOutput)
}

// Unique identifier of the `Release`.
func (o LookupReleaseResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.Uid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReleaseResultOutput{})
}
