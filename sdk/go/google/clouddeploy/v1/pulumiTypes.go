// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// An advanceChildRollout Job.
type AdvanceChildRolloutJobResponse struct {
}

// An advanceChildRollout Job.
type AdvanceChildRolloutJobResponseOutput struct{ *pulumi.OutputState }

func (AdvanceChildRolloutJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvanceChildRolloutJobResponse)(nil)).Elem()
}

func (o AdvanceChildRolloutJobResponseOutput) ToAdvanceChildRolloutJobResponseOutput() AdvanceChildRolloutJobResponseOutput {
	return o
}

func (o AdvanceChildRolloutJobResponseOutput) ToAdvanceChildRolloutJobResponseOutputWithContext(ctx context.Context) AdvanceChildRolloutJobResponseOutput {
	return o
}

// The `AdvanceRollout` automation rule will automatically advance a successful Rollout to the next phase.
type AdvanceRolloutRule struct {
	// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
	Id string `pulumi:"id"`
	// Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	SourcePhases []string `pulumi:"sourcePhases"`
	// Optional. How long to wait after a rollout is finished.
	Wait *string `pulumi:"wait"`
}

// AdvanceRolloutRuleInput is an input type that accepts AdvanceRolloutRuleArgs and AdvanceRolloutRuleOutput values.
// You can construct a concrete instance of `AdvanceRolloutRuleInput` via:
//
//	AdvanceRolloutRuleArgs{...}
type AdvanceRolloutRuleInput interface {
	pulumi.Input

	ToAdvanceRolloutRuleOutput() AdvanceRolloutRuleOutput
	ToAdvanceRolloutRuleOutputWithContext(context.Context) AdvanceRolloutRuleOutput
}

// The `AdvanceRollout` automation rule will automatically advance a successful Rollout to the next phase.
type AdvanceRolloutRuleArgs struct {
	// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
	Id pulumi.StringInput `pulumi:"id"`
	// Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	SourcePhases pulumi.StringArrayInput `pulumi:"sourcePhases"`
	// Optional. How long to wait after a rollout is finished.
	Wait pulumi.StringPtrInput `pulumi:"wait"`
}

func (AdvanceRolloutRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvanceRolloutRule)(nil)).Elem()
}

func (i AdvanceRolloutRuleArgs) ToAdvanceRolloutRuleOutput() AdvanceRolloutRuleOutput {
	return i.ToAdvanceRolloutRuleOutputWithContext(context.Background())
}

func (i AdvanceRolloutRuleArgs) ToAdvanceRolloutRuleOutputWithContext(ctx context.Context) AdvanceRolloutRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvanceRolloutRuleOutput)
}

func (i AdvanceRolloutRuleArgs) ToAdvanceRolloutRulePtrOutput() AdvanceRolloutRulePtrOutput {
	return i.ToAdvanceRolloutRulePtrOutputWithContext(context.Background())
}

func (i AdvanceRolloutRuleArgs) ToAdvanceRolloutRulePtrOutputWithContext(ctx context.Context) AdvanceRolloutRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvanceRolloutRuleOutput).ToAdvanceRolloutRulePtrOutputWithContext(ctx)
}

// AdvanceRolloutRulePtrInput is an input type that accepts AdvanceRolloutRuleArgs, AdvanceRolloutRulePtr and AdvanceRolloutRulePtrOutput values.
// You can construct a concrete instance of `AdvanceRolloutRulePtrInput` via:
//
//	        AdvanceRolloutRuleArgs{...}
//
//	or:
//
//	        nil
type AdvanceRolloutRulePtrInput interface {
	pulumi.Input

	ToAdvanceRolloutRulePtrOutput() AdvanceRolloutRulePtrOutput
	ToAdvanceRolloutRulePtrOutputWithContext(context.Context) AdvanceRolloutRulePtrOutput
}

type advanceRolloutRulePtrType AdvanceRolloutRuleArgs

func AdvanceRolloutRulePtr(v *AdvanceRolloutRuleArgs) AdvanceRolloutRulePtrInput {
	return (*advanceRolloutRulePtrType)(v)
}

func (*advanceRolloutRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvanceRolloutRule)(nil)).Elem()
}

func (i *advanceRolloutRulePtrType) ToAdvanceRolloutRulePtrOutput() AdvanceRolloutRulePtrOutput {
	return i.ToAdvanceRolloutRulePtrOutputWithContext(context.Background())
}

func (i *advanceRolloutRulePtrType) ToAdvanceRolloutRulePtrOutputWithContext(ctx context.Context) AdvanceRolloutRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvanceRolloutRulePtrOutput)
}

// The `AdvanceRollout` automation rule will automatically advance a successful Rollout to the next phase.
type AdvanceRolloutRuleOutput struct{ *pulumi.OutputState }

func (AdvanceRolloutRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvanceRolloutRule)(nil)).Elem()
}

func (o AdvanceRolloutRuleOutput) ToAdvanceRolloutRuleOutput() AdvanceRolloutRuleOutput {
	return o
}

func (o AdvanceRolloutRuleOutput) ToAdvanceRolloutRuleOutputWithContext(ctx context.Context) AdvanceRolloutRuleOutput {
	return o
}

func (o AdvanceRolloutRuleOutput) ToAdvanceRolloutRulePtrOutput() AdvanceRolloutRulePtrOutput {
	return o.ToAdvanceRolloutRulePtrOutputWithContext(context.Background())
}

func (o AdvanceRolloutRuleOutput) ToAdvanceRolloutRulePtrOutputWithContext(ctx context.Context) AdvanceRolloutRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdvanceRolloutRule) *AdvanceRolloutRule {
		return &v
	}).(AdvanceRolloutRulePtrOutput)
}

// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
func (o AdvanceRolloutRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AdvanceRolloutRule) string { return v.Id }).(pulumi.StringOutput)
}

// Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o AdvanceRolloutRuleOutput) SourcePhases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AdvanceRolloutRule) []string { return v.SourcePhases }).(pulumi.StringArrayOutput)
}

// Optional. How long to wait after a rollout is finished.
func (o AdvanceRolloutRuleOutput) Wait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdvanceRolloutRule) *string { return v.Wait }).(pulumi.StringPtrOutput)
}

type AdvanceRolloutRulePtrOutput struct{ *pulumi.OutputState }

func (AdvanceRolloutRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvanceRolloutRule)(nil)).Elem()
}

func (o AdvanceRolloutRulePtrOutput) ToAdvanceRolloutRulePtrOutput() AdvanceRolloutRulePtrOutput {
	return o
}

func (o AdvanceRolloutRulePtrOutput) ToAdvanceRolloutRulePtrOutputWithContext(ctx context.Context) AdvanceRolloutRulePtrOutput {
	return o
}

func (o AdvanceRolloutRulePtrOutput) Elem() AdvanceRolloutRuleOutput {
	return o.ApplyT(func(v *AdvanceRolloutRule) AdvanceRolloutRule {
		if v != nil {
			return *v
		}
		var ret AdvanceRolloutRule
		return ret
	}).(AdvanceRolloutRuleOutput)
}

// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
func (o AdvanceRolloutRulePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdvanceRolloutRule) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o AdvanceRolloutRulePtrOutput) SourcePhases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvanceRolloutRule) []string {
		if v == nil {
			return nil
		}
		return v.SourcePhases
	}).(pulumi.StringArrayOutput)
}

// Optional. How long to wait after a rollout is finished.
func (o AdvanceRolloutRulePtrOutput) Wait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdvanceRolloutRule) *string {
		if v == nil {
			return nil
		}
		return v.Wait
	}).(pulumi.StringPtrOutput)
}

// The `AdvanceRollout` automation rule will automatically advance a successful Rollout to the next phase.
type AdvanceRolloutRuleResponse struct {
	// Information around the state of the Automation rule.
	Condition AutomationRuleConditionResponse `pulumi:"condition"`
	// Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	SourcePhases []string `pulumi:"sourcePhases"`
	// Optional. How long to wait after a rollout is finished.
	Wait string `pulumi:"wait"`
}

// The `AdvanceRollout` automation rule will automatically advance a successful Rollout to the next phase.
type AdvanceRolloutRuleResponseOutput struct{ *pulumi.OutputState }

func (AdvanceRolloutRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvanceRolloutRuleResponse)(nil)).Elem()
}

func (o AdvanceRolloutRuleResponseOutput) ToAdvanceRolloutRuleResponseOutput() AdvanceRolloutRuleResponseOutput {
	return o
}

func (o AdvanceRolloutRuleResponseOutput) ToAdvanceRolloutRuleResponseOutputWithContext(ctx context.Context) AdvanceRolloutRuleResponseOutput {
	return o
}

// Information around the state of the Automation rule.
func (o AdvanceRolloutRuleResponseOutput) Condition() AutomationRuleConditionResponseOutput {
	return o.ApplyT(func(v AdvanceRolloutRuleResponse) AutomationRuleConditionResponse { return v.Condition }).(AutomationRuleConditionResponseOutput)
}

// Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o AdvanceRolloutRuleResponseOutput) SourcePhases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AdvanceRolloutRuleResponse) []string { return v.SourcePhases }).(pulumi.StringArrayOutput)
}

// Optional. How long to wait after a rollout is finished.
func (o AdvanceRolloutRuleResponseOutput) Wait() pulumi.StringOutput {
	return o.ApplyT(func(v AdvanceRolloutRuleResponse) string { return v.Wait }).(pulumi.StringOutput)
}

// Information specifying an Anthos Cluster.
type AnthosCluster struct {
	// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
	Membership *string `pulumi:"membership"`
}

// AnthosClusterInput is an input type that accepts AnthosClusterArgs and AnthosClusterOutput values.
// You can construct a concrete instance of `AnthosClusterInput` via:
//
//	AnthosClusterArgs{...}
type AnthosClusterInput interface {
	pulumi.Input

	ToAnthosClusterOutput() AnthosClusterOutput
	ToAnthosClusterOutputWithContext(context.Context) AnthosClusterOutput
}

// Information specifying an Anthos Cluster.
type AnthosClusterArgs struct {
	// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
	Membership pulumi.StringPtrInput `pulumi:"membership"`
}

func (AnthosClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosCluster)(nil)).Elem()
}

func (i AnthosClusterArgs) ToAnthosClusterOutput() AnthosClusterOutput {
	return i.ToAnthosClusterOutputWithContext(context.Background())
}

func (i AnthosClusterArgs) ToAnthosClusterOutputWithContext(ctx context.Context) AnthosClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosClusterOutput)
}

func (i AnthosClusterArgs) ToAnthosClusterPtrOutput() AnthosClusterPtrOutput {
	return i.ToAnthosClusterPtrOutputWithContext(context.Background())
}

func (i AnthosClusterArgs) ToAnthosClusterPtrOutputWithContext(ctx context.Context) AnthosClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosClusterOutput).ToAnthosClusterPtrOutputWithContext(ctx)
}

// AnthosClusterPtrInput is an input type that accepts AnthosClusterArgs, AnthosClusterPtr and AnthosClusterPtrOutput values.
// You can construct a concrete instance of `AnthosClusterPtrInput` via:
//
//	        AnthosClusterArgs{...}
//
//	or:
//
//	        nil
type AnthosClusterPtrInput interface {
	pulumi.Input

	ToAnthosClusterPtrOutput() AnthosClusterPtrOutput
	ToAnthosClusterPtrOutputWithContext(context.Context) AnthosClusterPtrOutput
}

type anthosClusterPtrType AnthosClusterArgs

func AnthosClusterPtr(v *AnthosClusterArgs) AnthosClusterPtrInput {
	return (*anthosClusterPtrType)(v)
}

func (*anthosClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnthosCluster)(nil)).Elem()
}

func (i *anthosClusterPtrType) ToAnthosClusterPtrOutput() AnthosClusterPtrOutput {
	return i.ToAnthosClusterPtrOutputWithContext(context.Background())
}

func (i *anthosClusterPtrType) ToAnthosClusterPtrOutputWithContext(ctx context.Context) AnthosClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosClusterPtrOutput)
}

// Information specifying an Anthos Cluster.
type AnthosClusterOutput struct{ *pulumi.OutputState }

func (AnthosClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosCluster)(nil)).Elem()
}

func (o AnthosClusterOutput) ToAnthosClusterOutput() AnthosClusterOutput {
	return o
}

func (o AnthosClusterOutput) ToAnthosClusterOutputWithContext(ctx context.Context) AnthosClusterOutput {
	return o
}

func (o AnthosClusterOutput) ToAnthosClusterPtrOutput() AnthosClusterPtrOutput {
	return o.ToAnthosClusterPtrOutputWithContext(context.Background())
}

func (o AnthosClusterOutput) ToAnthosClusterPtrOutputWithContext(ctx context.Context) AnthosClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnthosCluster) *AnthosCluster {
		return &v
	}).(AnthosClusterPtrOutput)
}

// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
func (o AnthosClusterOutput) Membership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnthosCluster) *string { return v.Membership }).(pulumi.StringPtrOutput)
}

type AnthosClusterPtrOutput struct{ *pulumi.OutputState }

func (AnthosClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnthosCluster)(nil)).Elem()
}

func (o AnthosClusterPtrOutput) ToAnthosClusterPtrOutput() AnthosClusterPtrOutput {
	return o
}

func (o AnthosClusterPtrOutput) ToAnthosClusterPtrOutputWithContext(ctx context.Context) AnthosClusterPtrOutput {
	return o
}

func (o AnthosClusterPtrOutput) Elem() AnthosClusterOutput {
	return o.ApplyT(func(v *AnthosCluster) AnthosCluster {
		if v != nil {
			return *v
		}
		var ret AnthosCluster
		return ret
	}).(AnthosClusterOutput)
}

// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
func (o AnthosClusterPtrOutput) Membership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnthosCluster) *string {
		if v == nil {
			return nil
		}
		return v.Membership
	}).(pulumi.StringPtrOutput)
}

// Information specifying an Anthos Cluster.
type AnthosClusterResponse struct {
	// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
	Membership string `pulumi:"membership"`
}

// Information specifying an Anthos Cluster.
type AnthosClusterResponseOutput struct{ *pulumi.OutputState }

func (AnthosClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosClusterResponse)(nil)).Elem()
}

func (o AnthosClusterResponseOutput) ToAnthosClusterResponseOutput() AnthosClusterResponseOutput {
	return o
}

func (o AnthosClusterResponseOutput) ToAnthosClusterResponseOutputWithContext(ctx context.Context) AnthosClusterResponseOutput {
	return o
}

// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
func (o AnthosClusterResponseOutput) Membership() pulumi.StringOutput {
	return o.ApplyT(func(v AnthosClusterResponse) string { return v.Membership }).(pulumi.StringOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// AutomationResourceSelector contains the information to select the resources to which an Automation is going to be applied.
type AutomationResourceSelector struct {
	// Contains attributes about a target.
	Targets []TargetAttribute `pulumi:"targets"`
}

// AutomationResourceSelectorInput is an input type that accepts AutomationResourceSelectorArgs and AutomationResourceSelectorOutput values.
// You can construct a concrete instance of `AutomationResourceSelectorInput` via:
//
//	AutomationResourceSelectorArgs{...}
type AutomationResourceSelectorInput interface {
	pulumi.Input

	ToAutomationResourceSelectorOutput() AutomationResourceSelectorOutput
	ToAutomationResourceSelectorOutputWithContext(context.Context) AutomationResourceSelectorOutput
}

// AutomationResourceSelector contains the information to select the resources to which an Automation is going to be applied.
type AutomationResourceSelectorArgs struct {
	// Contains attributes about a target.
	Targets TargetAttributeArrayInput `pulumi:"targets"`
}

func (AutomationResourceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationResourceSelector)(nil)).Elem()
}

func (i AutomationResourceSelectorArgs) ToAutomationResourceSelectorOutput() AutomationResourceSelectorOutput {
	return i.ToAutomationResourceSelectorOutputWithContext(context.Background())
}

func (i AutomationResourceSelectorArgs) ToAutomationResourceSelectorOutputWithContext(ctx context.Context) AutomationResourceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationResourceSelectorOutput)
}

// AutomationResourceSelector contains the information to select the resources to which an Automation is going to be applied.
type AutomationResourceSelectorOutput struct{ *pulumi.OutputState }

func (AutomationResourceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationResourceSelector)(nil)).Elem()
}

func (o AutomationResourceSelectorOutput) ToAutomationResourceSelectorOutput() AutomationResourceSelectorOutput {
	return o
}

func (o AutomationResourceSelectorOutput) ToAutomationResourceSelectorOutputWithContext(ctx context.Context) AutomationResourceSelectorOutput {
	return o
}

// Contains attributes about a target.
func (o AutomationResourceSelectorOutput) Targets() TargetAttributeArrayOutput {
	return o.ApplyT(func(v AutomationResourceSelector) []TargetAttribute { return v.Targets }).(TargetAttributeArrayOutput)
}

// AutomationResourceSelector contains the information to select the resources to which an Automation is going to be applied.
type AutomationResourceSelectorResponse struct {
	// Contains attributes about a target.
	Targets []TargetAttributeResponse `pulumi:"targets"`
}

// AutomationResourceSelector contains the information to select the resources to which an Automation is going to be applied.
type AutomationResourceSelectorResponseOutput struct{ *pulumi.OutputState }

func (AutomationResourceSelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationResourceSelectorResponse)(nil)).Elem()
}

func (o AutomationResourceSelectorResponseOutput) ToAutomationResourceSelectorResponseOutput() AutomationResourceSelectorResponseOutput {
	return o
}

func (o AutomationResourceSelectorResponseOutput) ToAutomationResourceSelectorResponseOutputWithContext(ctx context.Context) AutomationResourceSelectorResponseOutput {
	return o
}

// Contains attributes about a target.
func (o AutomationResourceSelectorResponseOutput) Targets() TargetAttributeResponseArrayOutput {
	return o.ApplyT(func(v AutomationResourceSelectorResponse) []TargetAttributeResponse { return v.Targets }).(TargetAttributeResponseArrayOutput)
}

// AutomationRolloutMetadata contains Automation-related actions that were performed on a rollout.
type AutomationRolloutMetadataResponse struct {
	// The IDs of the AutomationRuns initiated by an advance rollout rule.
	AdvanceAutomationRuns []string `pulumi:"advanceAutomationRuns"`
	// The ID of the AutomationRun initiated by a promote release rule.
	PromoteAutomationRun string `pulumi:"promoteAutomationRun"`
	// The IDs of the AutomationRuns initiated by a repair rollout rule.
	RepairAutomationRuns []string `pulumi:"repairAutomationRuns"`
}

// AutomationRolloutMetadata contains Automation-related actions that were performed on a rollout.
type AutomationRolloutMetadataResponseOutput struct{ *pulumi.OutputState }

func (AutomationRolloutMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRolloutMetadataResponse)(nil)).Elem()
}

func (o AutomationRolloutMetadataResponseOutput) ToAutomationRolloutMetadataResponseOutput() AutomationRolloutMetadataResponseOutput {
	return o
}

func (o AutomationRolloutMetadataResponseOutput) ToAutomationRolloutMetadataResponseOutputWithContext(ctx context.Context) AutomationRolloutMetadataResponseOutput {
	return o
}

// The IDs of the AutomationRuns initiated by an advance rollout rule.
func (o AutomationRolloutMetadataResponseOutput) AdvanceAutomationRuns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutomationRolloutMetadataResponse) []string { return v.AdvanceAutomationRuns }).(pulumi.StringArrayOutput)
}

// The ID of the AutomationRun initiated by a promote release rule.
func (o AutomationRolloutMetadataResponseOutput) PromoteAutomationRun() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRolloutMetadataResponse) string { return v.PromoteAutomationRun }).(pulumi.StringOutput)
}

// The IDs of the AutomationRuns initiated by a repair rollout rule.
func (o AutomationRolloutMetadataResponseOutput) RepairAutomationRuns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutomationRolloutMetadataResponse) []string { return v.RepairAutomationRuns }).(pulumi.StringArrayOutput)
}

// `AutomationRule` defines the automation activities.
type AutomationRule struct {
	// Optional. The `AdvanceRolloutRule` will automatically advance a successful Rollout.
	AdvanceRolloutRule *AdvanceRolloutRule `pulumi:"advanceRolloutRule"`
	// Optional. `PromoteReleaseRule` will automatically promote a release from the current target to a specified target.
	PromoteReleaseRule *PromoteReleaseRule `pulumi:"promoteReleaseRule"`
	// Optional. The `RepairRolloutRule` will automatically repair a failed rollout.
	RepairRolloutRule *RepairRolloutRule `pulumi:"repairRolloutRule"`
}

// AutomationRuleInput is an input type that accepts AutomationRuleArgs and AutomationRuleOutput values.
// You can construct a concrete instance of `AutomationRuleInput` via:
//
//	AutomationRuleArgs{...}
type AutomationRuleInput interface {
	pulumi.Input

	ToAutomationRuleOutput() AutomationRuleOutput
	ToAutomationRuleOutputWithContext(context.Context) AutomationRuleOutput
}

// `AutomationRule` defines the automation activities.
type AutomationRuleArgs struct {
	// Optional. The `AdvanceRolloutRule` will automatically advance a successful Rollout.
	AdvanceRolloutRule AdvanceRolloutRulePtrInput `pulumi:"advanceRolloutRule"`
	// Optional. `PromoteReleaseRule` will automatically promote a release from the current target to a specified target.
	PromoteReleaseRule PromoteReleaseRulePtrInput `pulumi:"promoteReleaseRule"`
	// Optional. The `RepairRolloutRule` will automatically repair a failed rollout.
	RepairRolloutRule RepairRolloutRulePtrInput `pulumi:"repairRolloutRule"`
}

func (AutomationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRule)(nil)).Elem()
}

func (i AutomationRuleArgs) ToAutomationRuleOutput() AutomationRuleOutput {
	return i.ToAutomationRuleOutputWithContext(context.Background())
}

func (i AutomationRuleArgs) ToAutomationRuleOutputWithContext(ctx context.Context) AutomationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRuleOutput)
}

// AutomationRuleArrayInput is an input type that accepts AutomationRuleArray and AutomationRuleArrayOutput values.
// You can construct a concrete instance of `AutomationRuleArrayInput` via:
//
//	AutomationRuleArray{ AutomationRuleArgs{...} }
type AutomationRuleArrayInput interface {
	pulumi.Input

	ToAutomationRuleArrayOutput() AutomationRuleArrayOutput
	ToAutomationRuleArrayOutputWithContext(context.Context) AutomationRuleArrayOutput
}

type AutomationRuleArray []AutomationRuleInput

func (AutomationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRule)(nil)).Elem()
}

func (i AutomationRuleArray) ToAutomationRuleArrayOutput() AutomationRuleArrayOutput {
	return i.ToAutomationRuleArrayOutputWithContext(context.Background())
}

func (i AutomationRuleArray) ToAutomationRuleArrayOutputWithContext(ctx context.Context) AutomationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRuleArrayOutput)
}

// `AutomationRule` defines the automation activities.
type AutomationRuleOutput struct{ *pulumi.OutputState }

func (AutomationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRule)(nil)).Elem()
}

func (o AutomationRuleOutput) ToAutomationRuleOutput() AutomationRuleOutput {
	return o
}

func (o AutomationRuleOutput) ToAutomationRuleOutputWithContext(ctx context.Context) AutomationRuleOutput {
	return o
}

// Optional. The `AdvanceRolloutRule` will automatically advance a successful Rollout.
func (o AutomationRuleOutput) AdvanceRolloutRule() AdvanceRolloutRulePtrOutput {
	return o.ApplyT(func(v AutomationRule) *AdvanceRolloutRule { return v.AdvanceRolloutRule }).(AdvanceRolloutRulePtrOutput)
}

// Optional. `PromoteReleaseRule` will automatically promote a release from the current target to a specified target.
func (o AutomationRuleOutput) PromoteReleaseRule() PromoteReleaseRulePtrOutput {
	return o.ApplyT(func(v AutomationRule) *PromoteReleaseRule { return v.PromoteReleaseRule }).(PromoteReleaseRulePtrOutput)
}

// Optional. The `RepairRolloutRule` will automatically repair a failed rollout.
func (o AutomationRuleOutput) RepairRolloutRule() RepairRolloutRulePtrOutput {
	return o.ApplyT(func(v AutomationRule) *RepairRolloutRule { return v.RepairRolloutRule }).(RepairRolloutRulePtrOutput)
}

type AutomationRuleArrayOutput struct{ *pulumi.OutputState }

func (AutomationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRule)(nil)).Elem()
}

func (o AutomationRuleArrayOutput) ToAutomationRuleArrayOutput() AutomationRuleArrayOutput {
	return o
}

func (o AutomationRuleArrayOutput) ToAutomationRuleArrayOutputWithContext(ctx context.Context) AutomationRuleArrayOutput {
	return o
}

func (o AutomationRuleArrayOutput) Index(i pulumi.IntInput) AutomationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRule {
		return vs[0].([]AutomationRule)[vs[1].(int)]
	}).(AutomationRuleOutput)
}

// `AutomationRuleCondition` contains conditions relevant to an `Automation` rule.
type AutomationRuleConditionResponse struct {
	// Optional. Details around targets enumerated in the rule.
	TargetsPresentCondition TargetsPresentConditionResponse `pulumi:"targetsPresentCondition"`
}

// `AutomationRuleCondition` contains conditions relevant to an `Automation` rule.
type AutomationRuleConditionResponseOutput struct{ *pulumi.OutputState }

func (AutomationRuleConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRuleConditionResponse)(nil)).Elem()
}

func (o AutomationRuleConditionResponseOutput) ToAutomationRuleConditionResponseOutput() AutomationRuleConditionResponseOutput {
	return o
}

func (o AutomationRuleConditionResponseOutput) ToAutomationRuleConditionResponseOutputWithContext(ctx context.Context) AutomationRuleConditionResponseOutput {
	return o
}

// Optional. Details around targets enumerated in the rule.
func (o AutomationRuleConditionResponseOutput) TargetsPresentCondition() TargetsPresentConditionResponseOutput {
	return o.ApplyT(func(v AutomationRuleConditionResponse) TargetsPresentConditionResponse {
		return v.TargetsPresentCondition
	}).(TargetsPresentConditionResponseOutput)
}

// `AutomationRule` defines the automation activities.
type AutomationRuleResponse struct {
	// Optional. The `AdvanceRolloutRule` will automatically advance a successful Rollout.
	AdvanceRolloutRule AdvanceRolloutRuleResponse `pulumi:"advanceRolloutRule"`
	// Optional. `PromoteReleaseRule` will automatically promote a release from the current target to a specified target.
	PromoteReleaseRule PromoteReleaseRuleResponse `pulumi:"promoteReleaseRule"`
	// Optional. The `RepairRolloutRule` will automatically repair a failed rollout.
	RepairRolloutRule RepairRolloutRuleResponse `pulumi:"repairRolloutRule"`
}

// `AutomationRule` defines the automation activities.
type AutomationRuleResponseOutput struct{ *pulumi.OutputState }

func (AutomationRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRuleResponse)(nil)).Elem()
}

func (o AutomationRuleResponseOutput) ToAutomationRuleResponseOutput() AutomationRuleResponseOutput {
	return o
}

func (o AutomationRuleResponseOutput) ToAutomationRuleResponseOutputWithContext(ctx context.Context) AutomationRuleResponseOutput {
	return o
}

// Optional. The `AdvanceRolloutRule` will automatically advance a successful Rollout.
func (o AutomationRuleResponseOutput) AdvanceRolloutRule() AdvanceRolloutRuleResponseOutput {
	return o.ApplyT(func(v AutomationRuleResponse) AdvanceRolloutRuleResponse { return v.AdvanceRolloutRule }).(AdvanceRolloutRuleResponseOutput)
}

// Optional. `PromoteReleaseRule` will automatically promote a release from the current target to a specified target.
func (o AutomationRuleResponseOutput) PromoteReleaseRule() PromoteReleaseRuleResponseOutput {
	return o.ApplyT(func(v AutomationRuleResponse) PromoteReleaseRuleResponse { return v.PromoteReleaseRule }).(PromoteReleaseRuleResponseOutput)
}

// Optional. The `RepairRolloutRule` will automatically repair a failed rollout.
func (o AutomationRuleResponseOutput) RepairRolloutRule() RepairRolloutRuleResponseOutput {
	return o.ApplyT(func(v AutomationRuleResponse) RepairRolloutRuleResponse { return v.RepairRolloutRule }).(RepairRolloutRuleResponseOutput)
}

type AutomationRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRuleResponse)(nil)).Elem()
}

func (o AutomationRuleResponseArrayOutput) ToAutomationRuleResponseArrayOutput() AutomationRuleResponseArrayOutput {
	return o
}

func (o AutomationRuleResponseArrayOutput) ToAutomationRuleResponseArrayOutputWithContext(ctx context.Context) AutomationRuleResponseArrayOutput {
	return o
}

func (o AutomationRuleResponseArrayOutput) Index(i pulumi.IntInput) AutomationRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRuleResponse {
		return vs[0].([]AutomationRuleResponse)[vs[1].(int)]
	}).(AutomationRuleResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifact struct {
	// Image name in Skaffold configuration.
	Image *string `pulumi:"image"`
	// Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
	Tag *string `pulumi:"tag"`
}

// BuildArtifactInput is an input type that accepts BuildArtifactArgs and BuildArtifactOutput values.
// You can construct a concrete instance of `BuildArtifactInput` via:
//
//	BuildArtifactArgs{...}
type BuildArtifactInput interface {
	pulumi.Input

	ToBuildArtifactOutput() BuildArtifactOutput
	ToBuildArtifactOutputWithContext(context.Context) BuildArtifactOutput
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifactArgs struct {
	// Image name in Skaffold configuration.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (BuildArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArtifact)(nil)).Elem()
}

func (i BuildArtifactArgs) ToBuildArtifactOutput() BuildArtifactOutput {
	return i.ToBuildArtifactOutputWithContext(context.Background())
}

func (i BuildArtifactArgs) ToBuildArtifactOutputWithContext(ctx context.Context) BuildArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArtifactOutput)
}

// BuildArtifactArrayInput is an input type that accepts BuildArtifactArray and BuildArtifactArrayOutput values.
// You can construct a concrete instance of `BuildArtifactArrayInput` via:
//
//	BuildArtifactArray{ BuildArtifactArgs{...} }
type BuildArtifactArrayInput interface {
	pulumi.Input

	ToBuildArtifactArrayOutput() BuildArtifactArrayOutput
	ToBuildArtifactArrayOutputWithContext(context.Context) BuildArtifactArrayOutput
}

type BuildArtifactArray []BuildArtifactInput

func (BuildArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArtifact)(nil)).Elem()
}

func (i BuildArtifactArray) ToBuildArtifactArrayOutput() BuildArtifactArrayOutput {
	return i.ToBuildArtifactArrayOutputWithContext(context.Background())
}

func (i BuildArtifactArray) ToBuildArtifactArrayOutputWithContext(ctx context.Context) BuildArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArtifactArrayOutput)
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifactOutput struct{ *pulumi.OutputState }

func (BuildArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArtifact)(nil)).Elem()
}

func (o BuildArtifactOutput) ToBuildArtifactOutput() BuildArtifactOutput {
	return o
}

func (o BuildArtifactOutput) ToBuildArtifactOutputWithContext(ctx context.Context) BuildArtifactOutput {
	return o
}

// Image name in Skaffold configuration.
func (o BuildArtifactOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildArtifact) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
func (o BuildArtifactOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildArtifact) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type BuildArtifactArrayOutput struct{ *pulumi.OutputState }

func (BuildArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArtifact)(nil)).Elem()
}

func (o BuildArtifactArrayOutput) ToBuildArtifactArrayOutput() BuildArtifactArrayOutput {
	return o
}

func (o BuildArtifactArrayOutput) ToBuildArtifactArrayOutputWithContext(ctx context.Context) BuildArtifactArrayOutput {
	return o
}

func (o BuildArtifactArrayOutput) Index(i pulumi.IntInput) BuildArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildArtifact {
		return vs[0].([]BuildArtifact)[vs[1].(int)]
	}).(BuildArtifactOutput)
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifactResponse struct {
	// Image name in Skaffold configuration.
	Image string `pulumi:"image"`
	// Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
	Tag string `pulumi:"tag"`
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifactResponseOutput struct{ *pulumi.OutputState }

func (BuildArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArtifactResponse)(nil)).Elem()
}

func (o BuildArtifactResponseOutput) ToBuildArtifactResponseOutput() BuildArtifactResponseOutput {
	return o
}

func (o BuildArtifactResponseOutput) ToBuildArtifactResponseOutputWithContext(ctx context.Context) BuildArtifactResponseOutput {
	return o
}

// Image name in Skaffold configuration.
func (o BuildArtifactResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArtifactResponse) string { return v.Image }).(pulumi.StringOutput)
}

// Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
func (o BuildArtifactResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArtifactResponse) string { return v.Tag }).(pulumi.StringOutput)
}

type BuildArtifactResponseArrayOutput struct{ *pulumi.OutputState }

func (BuildArtifactResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArtifactResponse)(nil)).Elem()
}

func (o BuildArtifactResponseArrayOutput) ToBuildArtifactResponseArrayOutput() BuildArtifactResponseArrayOutput {
	return o
}

func (o BuildArtifactResponseArrayOutput) ToBuildArtifactResponseArrayOutputWithContext(ctx context.Context) BuildArtifactResponseArrayOutput {
	return o
}

func (o BuildArtifactResponseArrayOutput) Index(i pulumi.IntInput) BuildArtifactResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildArtifactResponse {
		return vs[0].([]BuildArtifactResponse)[vs[1].(int)]
	}).(BuildArtifactResponseOutput)
}

// Canary represents the canary deployment strategy.
type Canary struct {
	// Configures the progressive based deployment for a Target.
	CanaryDeployment *CanaryDeployment `pulumi:"canaryDeployment"`
	// Configures the progressive based deployment for a Target, but allows customizing at the phase level where a phase represents each of the percentage deployments.
	CustomCanaryDeployment *CustomCanaryDeployment `pulumi:"customCanaryDeployment"`
	// Optional. Runtime specific configurations for the deployment strategy. The runtime configuration is used to determine how Cloud Deploy will split traffic to enable a progressive deployment.
	RuntimeConfig *RuntimeConfig `pulumi:"runtimeConfig"`
}

// CanaryInput is an input type that accepts CanaryArgs and CanaryOutput values.
// You can construct a concrete instance of `CanaryInput` via:
//
//	CanaryArgs{...}
type CanaryInput interface {
	pulumi.Input

	ToCanaryOutput() CanaryOutput
	ToCanaryOutputWithContext(context.Context) CanaryOutput
}

// Canary represents the canary deployment strategy.
type CanaryArgs struct {
	// Configures the progressive based deployment for a Target.
	CanaryDeployment CanaryDeploymentPtrInput `pulumi:"canaryDeployment"`
	// Configures the progressive based deployment for a Target, but allows customizing at the phase level where a phase represents each of the percentage deployments.
	CustomCanaryDeployment CustomCanaryDeploymentPtrInput `pulumi:"customCanaryDeployment"`
	// Optional. Runtime specific configurations for the deployment strategy. The runtime configuration is used to determine how Cloud Deploy will split traffic to enable a progressive deployment.
	RuntimeConfig RuntimeConfigPtrInput `pulumi:"runtimeConfig"`
}

func (CanaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Canary)(nil)).Elem()
}

func (i CanaryArgs) ToCanaryOutput() CanaryOutput {
	return i.ToCanaryOutputWithContext(context.Background())
}

func (i CanaryArgs) ToCanaryOutputWithContext(ctx context.Context) CanaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryOutput)
}

func (i CanaryArgs) ToCanaryPtrOutput() CanaryPtrOutput {
	return i.ToCanaryPtrOutputWithContext(context.Background())
}

func (i CanaryArgs) ToCanaryPtrOutputWithContext(ctx context.Context) CanaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryOutput).ToCanaryPtrOutputWithContext(ctx)
}

// CanaryPtrInput is an input type that accepts CanaryArgs, CanaryPtr and CanaryPtrOutput values.
// You can construct a concrete instance of `CanaryPtrInput` via:
//
//	        CanaryArgs{...}
//
//	or:
//
//	        nil
type CanaryPtrInput interface {
	pulumi.Input

	ToCanaryPtrOutput() CanaryPtrOutput
	ToCanaryPtrOutputWithContext(context.Context) CanaryPtrOutput
}

type canaryPtrType CanaryArgs

func CanaryPtr(v *CanaryArgs) CanaryPtrInput {
	return (*canaryPtrType)(v)
}

func (*canaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Canary)(nil)).Elem()
}

func (i *canaryPtrType) ToCanaryPtrOutput() CanaryPtrOutput {
	return i.ToCanaryPtrOutputWithContext(context.Background())
}

func (i *canaryPtrType) ToCanaryPtrOutputWithContext(ctx context.Context) CanaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryPtrOutput)
}

// Canary represents the canary deployment strategy.
type CanaryOutput struct{ *pulumi.OutputState }

func (CanaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Canary)(nil)).Elem()
}

func (o CanaryOutput) ToCanaryOutput() CanaryOutput {
	return o
}

func (o CanaryOutput) ToCanaryOutputWithContext(ctx context.Context) CanaryOutput {
	return o
}

func (o CanaryOutput) ToCanaryPtrOutput() CanaryPtrOutput {
	return o.ToCanaryPtrOutputWithContext(context.Background())
}

func (o CanaryOutput) ToCanaryPtrOutputWithContext(ctx context.Context) CanaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Canary) *Canary {
		return &v
	}).(CanaryPtrOutput)
}

// Configures the progressive based deployment for a Target.
func (o CanaryOutput) CanaryDeployment() CanaryDeploymentPtrOutput {
	return o.ApplyT(func(v Canary) *CanaryDeployment { return v.CanaryDeployment }).(CanaryDeploymentPtrOutput)
}

// Configures the progressive based deployment for a Target, but allows customizing at the phase level where a phase represents each of the percentage deployments.
func (o CanaryOutput) CustomCanaryDeployment() CustomCanaryDeploymentPtrOutput {
	return o.ApplyT(func(v Canary) *CustomCanaryDeployment { return v.CustomCanaryDeployment }).(CustomCanaryDeploymentPtrOutput)
}

// Optional. Runtime specific configurations for the deployment strategy. The runtime configuration is used to determine how Cloud Deploy will split traffic to enable a progressive deployment.
func (o CanaryOutput) RuntimeConfig() RuntimeConfigPtrOutput {
	return o.ApplyT(func(v Canary) *RuntimeConfig { return v.RuntimeConfig }).(RuntimeConfigPtrOutput)
}

type CanaryPtrOutput struct{ *pulumi.OutputState }

func (CanaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Canary)(nil)).Elem()
}

func (o CanaryPtrOutput) ToCanaryPtrOutput() CanaryPtrOutput {
	return o
}

func (o CanaryPtrOutput) ToCanaryPtrOutputWithContext(ctx context.Context) CanaryPtrOutput {
	return o
}

func (o CanaryPtrOutput) Elem() CanaryOutput {
	return o.ApplyT(func(v *Canary) Canary {
		if v != nil {
			return *v
		}
		var ret Canary
		return ret
	}).(CanaryOutput)
}

// Configures the progressive based deployment for a Target.
func (o CanaryPtrOutput) CanaryDeployment() CanaryDeploymentPtrOutput {
	return o.ApplyT(func(v *Canary) *CanaryDeployment {
		if v == nil {
			return nil
		}
		return v.CanaryDeployment
	}).(CanaryDeploymentPtrOutput)
}

// Configures the progressive based deployment for a Target, but allows customizing at the phase level where a phase represents each of the percentage deployments.
func (o CanaryPtrOutput) CustomCanaryDeployment() CustomCanaryDeploymentPtrOutput {
	return o.ApplyT(func(v *Canary) *CustomCanaryDeployment {
		if v == nil {
			return nil
		}
		return v.CustomCanaryDeployment
	}).(CustomCanaryDeploymentPtrOutput)
}

// Optional. Runtime specific configurations for the deployment strategy. The runtime configuration is used to determine how Cloud Deploy will split traffic to enable a progressive deployment.
func (o CanaryPtrOutput) RuntimeConfig() RuntimeConfigPtrOutput {
	return o.ApplyT(func(v *Canary) *RuntimeConfig {
		if v == nil {
			return nil
		}
		return v.RuntimeConfig
	}).(RuntimeConfigPtrOutput)
}

// CanaryDeployment represents the canary deployment configuration
type CanaryDeployment struct {
	// The percentage based deployments that will occur as a part of a `Rollout`. List is expected in ascending order and each integer n is 0 <= n < 100.
	Percentages []int `pulumi:"percentages"`
	// Optional. Configuration for the postdeploy job of the last phase. If this is not configured, there will be no postdeploy job for this phase.
	Postdeploy *Postdeploy `pulumi:"postdeploy"`
	// Optional. Configuration for the predeploy job of the first phase. If this is not configured, there will be no predeploy job for this phase.
	Predeploy *Predeploy `pulumi:"predeploy"`
	// Whether to run verify tests after each percentage deployment.
	Verify *bool `pulumi:"verify"`
}

// CanaryDeploymentInput is an input type that accepts CanaryDeploymentArgs and CanaryDeploymentOutput values.
// You can construct a concrete instance of `CanaryDeploymentInput` via:
//
//	CanaryDeploymentArgs{...}
type CanaryDeploymentInput interface {
	pulumi.Input

	ToCanaryDeploymentOutput() CanaryDeploymentOutput
	ToCanaryDeploymentOutputWithContext(context.Context) CanaryDeploymentOutput
}

// CanaryDeployment represents the canary deployment configuration
type CanaryDeploymentArgs struct {
	// The percentage based deployments that will occur as a part of a `Rollout`. List is expected in ascending order and each integer n is 0 <= n < 100.
	Percentages pulumi.IntArrayInput `pulumi:"percentages"`
	// Optional. Configuration for the postdeploy job of the last phase. If this is not configured, there will be no postdeploy job for this phase.
	Postdeploy PostdeployPtrInput `pulumi:"postdeploy"`
	// Optional. Configuration for the predeploy job of the first phase. If this is not configured, there will be no predeploy job for this phase.
	Predeploy PredeployPtrInput `pulumi:"predeploy"`
	// Whether to run verify tests after each percentage deployment.
	Verify pulumi.BoolPtrInput `pulumi:"verify"`
}

func (CanaryDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryDeployment)(nil)).Elem()
}

func (i CanaryDeploymentArgs) ToCanaryDeploymentOutput() CanaryDeploymentOutput {
	return i.ToCanaryDeploymentOutputWithContext(context.Background())
}

func (i CanaryDeploymentArgs) ToCanaryDeploymentOutputWithContext(ctx context.Context) CanaryDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryDeploymentOutput)
}

func (i CanaryDeploymentArgs) ToCanaryDeploymentPtrOutput() CanaryDeploymentPtrOutput {
	return i.ToCanaryDeploymentPtrOutputWithContext(context.Background())
}

func (i CanaryDeploymentArgs) ToCanaryDeploymentPtrOutputWithContext(ctx context.Context) CanaryDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryDeploymentOutput).ToCanaryDeploymentPtrOutputWithContext(ctx)
}

// CanaryDeploymentPtrInput is an input type that accepts CanaryDeploymentArgs, CanaryDeploymentPtr and CanaryDeploymentPtrOutput values.
// You can construct a concrete instance of `CanaryDeploymentPtrInput` via:
//
//	        CanaryDeploymentArgs{...}
//
//	or:
//
//	        nil
type CanaryDeploymentPtrInput interface {
	pulumi.Input

	ToCanaryDeploymentPtrOutput() CanaryDeploymentPtrOutput
	ToCanaryDeploymentPtrOutputWithContext(context.Context) CanaryDeploymentPtrOutput
}

type canaryDeploymentPtrType CanaryDeploymentArgs

func CanaryDeploymentPtr(v *CanaryDeploymentArgs) CanaryDeploymentPtrInput {
	return (*canaryDeploymentPtrType)(v)
}

func (*canaryDeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryDeployment)(nil)).Elem()
}

func (i *canaryDeploymentPtrType) ToCanaryDeploymentPtrOutput() CanaryDeploymentPtrOutput {
	return i.ToCanaryDeploymentPtrOutputWithContext(context.Background())
}

func (i *canaryDeploymentPtrType) ToCanaryDeploymentPtrOutputWithContext(ctx context.Context) CanaryDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryDeploymentPtrOutput)
}

// CanaryDeployment represents the canary deployment configuration
type CanaryDeploymentOutput struct{ *pulumi.OutputState }

func (CanaryDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryDeployment)(nil)).Elem()
}

func (o CanaryDeploymentOutput) ToCanaryDeploymentOutput() CanaryDeploymentOutput {
	return o
}

func (o CanaryDeploymentOutput) ToCanaryDeploymentOutputWithContext(ctx context.Context) CanaryDeploymentOutput {
	return o
}

func (o CanaryDeploymentOutput) ToCanaryDeploymentPtrOutput() CanaryDeploymentPtrOutput {
	return o.ToCanaryDeploymentPtrOutputWithContext(context.Background())
}

func (o CanaryDeploymentOutput) ToCanaryDeploymentPtrOutputWithContext(ctx context.Context) CanaryDeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CanaryDeployment) *CanaryDeployment {
		return &v
	}).(CanaryDeploymentPtrOutput)
}

// The percentage based deployments that will occur as a part of a `Rollout`. List is expected in ascending order and each integer n is 0 <= n < 100.
func (o CanaryDeploymentOutput) Percentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CanaryDeployment) []int { return v.Percentages }).(pulumi.IntArrayOutput)
}

// Optional. Configuration for the postdeploy job of the last phase. If this is not configured, there will be no postdeploy job for this phase.
func (o CanaryDeploymentOutput) Postdeploy() PostdeployPtrOutput {
	return o.ApplyT(func(v CanaryDeployment) *Postdeploy { return v.Postdeploy }).(PostdeployPtrOutput)
}

// Optional. Configuration for the predeploy job of the first phase. If this is not configured, there will be no predeploy job for this phase.
func (o CanaryDeploymentOutput) Predeploy() PredeployPtrOutput {
	return o.ApplyT(func(v CanaryDeployment) *Predeploy { return v.Predeploy }).(PredeployPtrOutput)
}

// Whether to run verify tests after each percentage deployment.
func (o CanaryDeploymentOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CanaryDeployment) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

type CanaryDeploymentPtrOutput struct{ *pulumi.OutputState }

func (CanaryDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryDeployment)(nil)).Elem()
}

func (o CanaryDeploymentPtrOutput) ToCanaryDeploymentPtrOutput() CanaryDeploymentPtrOutput {
	return o
}

func (o CanaryDeploymentPtrOutput) ToCanaryDeploymentPtrOutputWithContext(ctx context.Context) CanaryDeploymentPtrOutput {
	return o
}

func (o CanaryDeploymentPtrOutput) Elem() CanaryDeploymentOutput {
	return o.ApplyT(func(v *CanaryDeployment) CanaryDeployment {
		if v != nil {
			return *v
		}
		var ret CanaryDeployment
		return ret
	}).(CanaryDeploymentOutput)
}

// The percentage based deployments that will occur as a part of a `Rollout`. List is expected in ascending order and each integer n is 0 <= n < 100.
func (o CanaryDeploymentPtrOutput) Percentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CanaryDeployment) []int {
		if v == nil {
			return nil
		}
		return v.Percentages
	}).(pulumi.IntArrayOutput)
}

// Optional. Configuration for the postdeploy job of the last phase. If this is not configured, there will be no postdeploy job for this phase.
func (o CanaryDeploymentPtrOutput) Postdeploy() PostdeployPtrOutput {
	return o.ApplyT(func(v *CanaryDeployment) *Postdeploy {
		if v == nil {
			return nil
		}
		return v.Postdeploy
	}).(PostdeployPtrOutput)
}

// Optional. Configuration for the predeploy job of the first phase. If this is not configured, there will be no predeploy job for this phase.
func (o CanaryDeploymentPtrOutput) Predeploy() PredeployPtrOutput {
	return o.ApplyT(func(v *CanaryDeployment) *Predeploy {
		if v == nil {
			return nil
		}
		return v.Predeploy
	}).(PredeployPtrOutput)
}

// Whether to run verify tests after each percentage deployment.
func (o CanaryDeploymentPtrOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CanaryDeployment) *bool {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(pulumi.BoolPtrOutput)
}

// CanaryDeployment represents the canary deployment configuration
type CanaryDeploymentResponse struct {
	// The percentage based deployments that will occur as a part of a `Rollout`. List is expected in ascending order and each integer n is 0 <= n < 100.
	Percentages []int `pulumi:"percentages"`
	// Optional. Configuration for the postdeploy job of the last phase. If this is not configured, there will be no postdeploy job for this phase.
	Postdeploy PostdeployResponse `pulumi:"postdeploy"`
	// Optional. Configuration for the predeploy job of the first phase. If this is not configured, there will be no predeploy job for this phase.
	Predeploy PredeployResponse `pulumi:"predeploy"`
	// Whether to run verify tests after each percentage deployment.
	Verify bool `pulumi:"verify"`
}

// CanaryDeployment represents the canary deployment configuration
type CanaryDeploymentResponseOutput struct{ *pulumi.OutputState }

func (CanaryDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryDeploymentResponse)(nil)).Elem()
}

func (o CanaryDeploymentResponseOutput) ToCanaryDeploymentResponseOutput() CanaryDeploymentResponseOutput {
	return o
}

func (o CanaryDeploymentResponseOutput) ToCanaryDeploymentResponseOutputWithContext(ctx context.Context) CanaryDeploymentResponseOutput {
	return o
}

// The percentage based deployments that will occur as a part of a `Rollout`. List is expected in ascending order and each integer n is 0 <= n < 100.
func (o CanaryDeploymentResponseOutput) Percentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CanaryDeploymentResponse) []int { return v.Percentages }).(pulumi.IntArrayOutput)
}

// Optional. Configuration for the postdeploy job of the last phase. If this is not configured, there will be no postdeploy job for this phase.
func (o CanaryDeploymentResponseOutput) Postdeploy() PostdeployResponseOutput {
	return o.ApplyT(func(v CanaryDeploymentResponse) PostdeployResponse { return v.Postdeploy }).(PostdeployResponseOutput)
}

// Optional. Configuration for the predeploy job of the first phase. If this is not configured, there will be no predeploy job for this phase.
func (o CanaryDeploymentResponseOutput) Predeploy() PredeployResponseOutput {
	return o.ApplyT(func(v CanaryDeploymentResponse) PredeployResponse { return v.Predeploy }).(PredeployResponseOutput)
}

// Whether to run verify tests after each percentage deployment.
func (o CanaryDeploymentResponseOutput) Verify() pulumi.BoolOutput {
	return o.ApplyT(func(v CanaryDeploymentResponse) bool { return v.Verify }).(pulumi.BoolOutput)
}

// Canary represents the canary deployment strategy.
type CanaryResponse struct {
	// Configures the progressive based deployment for a Target.
	CanaryDeployment CanaryDeploymentResponse `pulumi:"canaryDeployment"`
	// Configures the progressive based deployment for a Target, but allows customizing at the phase level where a phase represents each of the percentage deployments.
	CustomCanaryDeployment CustomCanaryDeploymentResponse `pulumi:"customCanaryDeployment"`
	// Optional. Runtime specific configurations for the deployment strategy. The runtime configuration is used to determine how Cloud Deploy will split traffic to enable a progressive deployment.
	RuntimeConfig RuntimeConfigResponse `pulumi:"runtimeConfig"`
}

// Canary represents the canary deployment strategy.
type CanaryResponseOutput struct{ *pulumi.OutputState }

func (CanaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryResponse)(nil)).Elem()
}

func (o CanaryResponseOutput) ToCanaryResponseOutput() CanaryResponseOutput {
	return o
}

func (o CanaryResponseOutput) ToCanaryResponseOutputWithContext(ctx context.Context) CanaryResponseOutput {
	return o
}

// Configures the progressive based deployment for a Target.
func (o CanaryResponseOutput) CanaryDeployment() CanaryDeploymentResponseOutput {
	return o.ApplyT(func(v CanaryResponse) CanaryDeploymentResponse { return v.CanaryDeployment }).(CanaryDeploymentResponseOutput)
}

// Configures the progressive based deployment for a Target, but allows customizing at the phase level where a phase represents each of the percentage deployments.
func (o CanaryResponseOutput) CustomCanaryDeployment() CustomCanaryDeploymentResponseOutput {
	return o.ApplyT(func(v CanaryResponse) CustomCanaryDeploymentResponse { return v.CustomCanaryDeployment }).(CustomCanaryDeploymentResponseOutput)
}

// Optional. Runtime specific configurations for the deployment strategy. The runtime configuration is used to determine how Cloud Deploy will split traffic to enable a progressive deployment.
func (o CanaryResponseOutput) RuntimeConfig() RuntimeConfigResponseOutput {
	return o.ApplyT(func(v CanaryResponse) RuntimeConfigResponse { return v.RuntimeConfig }).(RuntimeConfigResponseOutput)
}

// ChildRollouts job composition
type ChildRolloutJobsResponse struct {
	// List of AdvanceChildRolloutJobs
	AdvanceRolloutJobs []JobResponse `pulumi:"advanceRolloutJobs"`
	// List of CreateChildRolloutJobs
	CreateRolloutJobs []JobResponse `pulumi:"createRolloutJobs"`
}

// ChildRollouts job composition
type ChildRolloutJobsResponseOutput struct{ *pulumi.OutputState }

func (ChildRolloutJobsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChildRolloutJobsResponse)(nil)).Elem()
}

func (o ChildRolloutJobsResponseOutput) ToChildRolloutJobsResponseOutput() ChildRolloutJobsResponseOutput {
	return o
}

func (o ChildRolloutJobsResponseOutput) ToChildRolloutJobsResponseOutputWithContext(ctx context.Context) ChildRolloutJobsResponseOutput {
	return o
}

// List of AdvanceChildRolloutJobs
func (o ChildRolloutJobsResponseOutput) AdvanceRolloutJobs() JobResponseArrayOutput {
	return o.ApplyT(func(v ChildRolloutJobsResponse) []JobResponse { return v.AdvanceRolloutJobs }).(JobResponseArrayOutput)
}

// List of CreateChildRolloutJobs
func (o ChildRolloutJobsResponseOutput) CreateRolloutJobs() JobResponseArrayOutput {
	return o.ApplyT(func(v ChildRolloutJobsResponse) []JobResponse { return v.CreateRolloutJobs }).(JobResponseArrayOutput)
}

// CloudRunConfig contains the Cloud Run runtime configuration.
type CloudRunConfig struct {
	// Whether Cloud Deploy should update the traffic stanza in a Cloud Run Service on the user's behalf to facilitate traffic splitting. This is required to be true for CanaryDeployments, but optional for CustomCanaryDeployments.
	AutomaticTrafficControl *bool `pulumi:"automaticTrafficControl"`
}

// CloudRunConfigInput is an input type that accepts CloudRunConfigArgs and CloudRunConfigOutput values.
// You can construct a concrete instance of `CloudRunConfigInput` via:
//
//	CloudRunConfigArgs{...}
type CloudRunConfigInput interface {
	pulumi.Input

	ToCloudRunConfigOutput() CloudRunConfigOutput
	ToCloudRunConfigOutputWithContext(context.Context) CloudRunConfigOutput
}

// CloudRunConfig contains the Cloud Run runtime configuration.
type CloudRunConfigArgs struct {
	// Whether Cloud Deploy should update the traffic stanza in a Cloud Run Service on the user's behalf to facilitate traffic splitting. This is required to be true for CanaryDeployments, but optional for CustomCanaryDeployments.
	AutomaticTrafficControl pulumi.BoolPtrInput `pulumi:"automaticTrafficControl"`
}

func (CloudRunConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfig)(nil)).Elem()
}

func (i CloudRunConfigArgs) ToCloudRunConfigOutput() CloudRunConfigOutput {
	return i.ToCloudRunConfigOutputWithContext(context.Background())
}

func (i CloudRunConfigArgs) ToCloudRunConfigOutputWithContext(ctx context.Context) CloudRunConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigOutput)
}

func (i CloudRunConfigArgs) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return i.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (i CloudRunConfigArgs) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigOutput).ToCloudRunConfigPtrOutputWithContext(ctx)
}

// CloudRunConfigPtrInput is an input type that accepts CloudRunConfigArgs, CloudRunConfigPtr and CloudRunConfigPtrOutput values.
// You can construct a concrete instance of `CloudRunConfigPtrInput` via:
//
//	        CloudRunConfigArgs{...}
//
//	or:
//
//	        nil
type CloudRunConfigPtrInput interface {
	pulumi.Input

	ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput
	ToCloudRunConfigPtrOutputWithContext(context.Context) CloudRunConfigPtrOutput
}

type cloudRunConfigPtrType CloudRunConfigArgs

func CloudRunConfigPtr(v *CloudRunConfigArgs) CloudRunConfigPtrInput {
	return (*cloudRunConfigPtrType)(v)
}

func (*cloudRunConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunConfig)(nil)).Elem()
}

func (i *cloudRunConfigPtrType) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return i.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (i *cloudRunConfigPtrType) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigPtrOutput)
}

// CloudRunConfig contains the Cloud Run runtime configuration.
type CloudRunConfigOutput struct{ *pulumi.OutputState }

func (CloudRunConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfig)(nil)).Elem()
}

func (o CloudRunConfigOutput) ToCloudRunConfigOutput() CloudRunConfigOutput {
	return o
}

func (o CloudRunConfigOutput) ToCloudRunConfigOutputWithContext(ctx context.Context) CloudRunConfigOutput {
	return o
}

func (o CloudRunConfigOutput) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return o.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (o CloudRunConfigOutput) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudRunConfig) *CloudRunConfig {
		return &v
	}).(CloudRunConfigPtrOutput)
}

// Whether Cloud Deploy should update the traffic stanza in a Cloud Run Service on the user's behalf to facilitate traffic splitting. This is required to be true for CanaryDeployments, but optional for CustomCanaryDeployments.
func (o CloudRunConfigOutput) AutomaticTrafficControl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudRunConfig) *bool { return v.AutomaticTrafficControl }).(pulumi.BoolPtrOutput)
}

type CloudRunConfigPtrOutput struct{ *pulumi.OutputState }

func (CloudRunConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunConfig)(nil)).Elem()
}

func (o CloudRunConfigPtrOutput) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return o
}

func (o CloudRunConfigPtrOutput) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return o
}

func (o CloudRunConfigPtrOutput) Elem() CloudRunConfigOutput {
	return o.ApplyT(func(v *CloudRunConfig) CloudRunConfig {
		if v != nil {
			return *v
		}
		var ret CloudRunConfig
		return ret
	}).(CloudRunConfigOutput)
}

// Whether Cloud Deploy should update the traffic stanza in a Cloud Run Service on the user's behalf to facilitate traffic splitting. This is required to be true for CanaryDeployments, but optional for CustomCanaryDeployments.
func (o CloudRunConfigPtrOutput) AutomaticTrafficControl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudRunConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AutomaticTrafficControl
	}).(pulumi.BoolPtrOutput)
}

// CloudRunConfig contains the Cloud Run runtime configuration.
type CloudRunConfigResponse struct {
	// Whether Cloud Deploy should update the traffic stanza in a Cloud Run Service on the user's behalf to facilitate traffic splitting. This is required to be true for CanaryDeployments, but optional for CustomCanaryDeployments.
	AutomaticTrafficControl bool `pulumi:"automaticTrafficControl"`
}

// CloudRunConfig contains the Cloud Run runtime configuration.
type CloudRunConfigResponseOutput struct{ *pulumi.OutputState }

func (CloudRunConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfigResponse)(nil)).Elem()
}

func (o CloudRunConfigResponseOutput) ToCloudRunConfigResponseOutput() CloudRunConfigResponseOutput {
	return o
}

func (o CloudRunConfigResponseOutput) ToCloudRunConfigResponseOutputWithContext(ctx context.Context) CloudRunConfigResponseOutput {
	return o
}

// Whether Cloud Deploy should update the traffic stanza in a Cloud Run Service on the user's behalf to facilitate traffic splitting. This is required to be true for CanaryDeployments, but optional for CustomCanaryDeployments.
func (o CloudRunConfigResponseOutput) AutomaticTrafficControl() pulumi.BoolOutput {
	return o.ApplyT(func(v CloudRunConfigResponse) bool { return v.AutomaticTrafficControl }).(pulumi.BoolOutput)
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocation struct {
	// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
	Location string `pulumi:"location"`
}

// CloudRunLocationInput is an input type that accepts CloudRunLocationArgs and CloudRunLocationOutput values.
// You can construct a concrete instance of `CloudRunLocationInput` via:
//
//	CloudRunLocationArgs{...}
type CloudRunLocationInput interface {
	pulumi.Input

	ToCloudRunLocationOutput() CloudRunLocationOutput
	ToCloudRunLocationOutputWithContext(context.Context) CloudRunLocationOutput
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocationArgs struct {
	// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
	Location pulumi.StringInput `pulumi:"location"`
}

func (CloudRunLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunLocation)(nil)).Elem()
}

func (i CloudRunLocationArgs) ToCloudRunLocationOutput() CloudRunLocationOutput {
	return i.ToCloudRunLocationOutputWithContext(context.Background())
}

func (i CloudRunLocationArgs) ToCloudRunLocationOutputWithContext(ctx context.Context) CloudRunLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunLocationOutput)
}

func (i CloudRunLocationArgs) ToCloudRunLocationPtrOutput() CloudRunLocationPtrOutput {
	return i.ToCloudRunLocationPtrOutputWithContext(context.Background())
}

func (i CloudRunLocationArgs) ToCloudRunLocationPtrOutputWithContext(ctx context.Context) CloudRunLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunLocationOutput).ToCloudRunLocationPtrOutputWithContext(ctx)
}

// CloudRunLocationPtrInput is an input type that accepts CloudRunLocationArgs, CloudRunLocationPtr and CloudRunLocationPtrOutput values.
// You can construct a concrete instance of `CloudRunLocationPtrInput` via:
//
//	        CloudRunLocationArgs{...}
//
//	or:
//
//	        nil
type CloudRunLocationPtrInput interface {
	pulumi.Input

	ToCloudRunLocationPtrOutput() CloudRunLocationPtrOutput
	ToCloudRunLocationPtrOutputWithContext(context.Context) CloudRunLocationPtrOutput
}

type cloudRunLocationPtrType CloudRunLocationArgs

func CloudRunLocationPtr(v *CloudRunLocationArgs) CloudRunLocationPtrInput {
	return (*cloudRunLocationPtrType)(v)
}

func (*cloudRunLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunLocation)(nil)).Elem()
}

func (i *cloudRunLocationPtrType) ToCloudRunLocationPtrOutput() CloudRunLocationPtrOutput {
	return i.ToCloudRunLocationPtrOutputWithContext(context.Background())
}

func (i *cloudRunLocationPtrType) ToCloudRunLocationPtrOutputWithContext(ctx context.Context) CloudRunLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunLocationPtrOutput)
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocationOutput struct{ *pulumi.OutputState }

func (CloudRunLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunLocation)(nil)).Elem()
}

func (o CloudRunLocationOutput) ToCloudRunLocationOutput() CloudRunLocationOutput {
	return o
}

func (o CloudRunLocationOutput) ToCloudRunLocationOutputWithContext(ctx context.Context) CloudRunLocationOutput {
	return o
}

func (o CloudRunLocationOutput) ToCloudRunLocationPtrOutput() CloudRunLocationPtrOutput {
	return o.ToCloudRunLocationPtrOutputWithContext(context.Background())
}

func (o CloudRunLocationOutput) ToCloudRunLocationPtrOutputWithContext(ctx context.Context) CloudRunLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudRunLocation) *CloudRunLocation {
		return &v
	}).(CloudRunLocationPtrOutput)
}

// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
func (o CloudRunLocationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunLocation) string { return v.Location }).(pulumi.StringOutput)
}

type CloudRunLocationPtrOutput struct{ *pulumi.OutputState }

func (CloudRunLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunLocation)(nil)).Elem()
}

func (o CloudRunLocationPtrOutput) ToCloudRunLocationPtrOutput() CloudRunLocationPtrOutput {
	return o
}

func (o CloudRunLocationPtrOutput) ToCloudRunLocationPtrOutputWithContext(ctx context.Context) CloudRunLocationPtrOutput {
	return o
}

func (o CloudRunLocationPtrOutput) Elem() CloudRunLocationOutput {
	return o.ApplyT(func(v *CloudRunLocation) CloudRunLocation {
		if v != nil {
			return *v
		}
		var ret CloudRunLocation
		return ret
	}).(CloudRunLocationOutput)
}

// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
func (o CloudRunLocationPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRunLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocationResponse struct {
	// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
	Location string `pulumi:"location"`
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocationResponseOutput struct{ *pulumi.OutputState }

func (CloudRunLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunLocationResponse)(nil)).Elem()
}

func (o CloudRunLocationResponseOutput) ToCloudRunLocationResponseOutput() CloudRunLocationResponseOutput {
	return o
}

func (o CloudRunLocationResponseOutput) ToCloudRunLocationResponseOutputWithContext(ctx context.Context) CloudRunLocationResponseOutput {
	return o
}

// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
func (o CloudRunLocationResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunLocationResponse) string { return v.Location }).(pulumi.StringOutput)
}

// CloudRunMetadata contains information from a Cloud Run deployment.
type CloudRunMetadataResponse struct {
	// The name of the Cloud Run job that is associated with a `Rollout`. Format is `projects/{project}/locations/{location}/jobs/{job_name}`.
	Job string `pulumi:"job"`
	// The Cloud Run Revision id associated with a `Rollout`.
	Revision string `pulumi:"revision"`
	// The name of the Cloud Run Service that is associated with a `Rollout`. Format is `projects/{project}/locations/{location}/services/{service}`.
	Service string `pulumi:"service"`
	// The Cloud Run Service urls that are associated with a `Rollout`.
	ServiceUrls []string `pulumi:"serviceUrls"`
}

// CloudRunMetadata contains information from a Cloud Run deployment.
type CloudRunMetadataResponseOutput struct{ *pulumi.OutputState }

func (CloudRunMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunMetadataResponse)(nil)).Elem()
}

func (o CloudRunMetadataResponseOutput) ToCloudRunMetadataResponseOutput() CloudRunMetadataResponseOutput {
	return o
}

func (o CloudRunMetadataResponseOutput) ToCloudRunMetadataResponseOutputWithContext(ctx context.Context) CloudRunMetadataResponseOutput {
	return o
}

// The name of the Cloud Run job that is associated with a `Rollout`. Format is `projects/{project}/locations/{location}/jobs/{job_name}`.
func (o CloudRunMetadataResponseOutput) Job() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunMetadataResponse) string { return v.Job }).(pulumi.StringOutput)
}

// The Cloud Run Revision id associated with a `Rollout`.
func (o CloudRunMetadataResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunMetadataResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// The name of the Cloud Run Service that is associated with a `Rollout`. Format is `projects/{project}/locations/{location}/services/{service}`.
func (o CloudRunMetadataResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunMetadataResponse) string { return v.Service }).(pulumi.StringOutput)
}

// The Cloud Run Service urls that are associated with a `Rollout`.
func (o CloudRunMetadataResponseOutput) ServiceUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudRunMetadataResponse) []string { return v.ServiceUrls }).(pulumi.StringArrayOutput)
}

// CloudRunRenderMetadata contains Cloud Run information associated with a `Release` render.
type CloudRunRenderMetadataResponse struct {
	// The name of the Cloud Run Service in the rendered manifest. Format is `projects/{project}/locations/{location}/services/{service}`.
	Service string `pulumi:"service"`
}

// CloudRunRenderMetadata contains Cloud Run information associated with a `Release` render.
type CloudRunRenderMetadataResponseOutput struct{ *pulumi.OutputState }

func (CloudRunRenderMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunRenderMetadataResponse)(nil)).Elem()
}

func (o CloudRunRenderMetadataResponseOutput) ToCloudRunRenderMetadataResponseOutput() CloudRunRenderMetadataResponseOutput {
	return o
}

func (o CloudRunRenderMetadataResponseOutput) ToCloudRunRenderMetadataResponseOutputWithContext(ctx context.Context) CloudRunRenderMetadataResponseOutput {
	return o
}

// The name of the Cloud Run Service in the rendered manifest. Format is `projects/{project}/locations/{location}/services/{service}`.
func (o CloudRunRenderMetadataResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunRenderMetadataResponse) string { return v.Service }).(pulumi.StringOutput)
}

// A createChildRollout Job.
type CreateChildRolloutJobResponse struct {
}

// A createChildRollout Job.
type CreateChildRolloutJobResponseOutput struct{ *pulumi.OutputState }

func (CreateChildRolloutJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateChildRolloutJobResponse)(nil)).Elem()
}

func (o CreateChildRolloutJobResponseOutput) ToCreateChildRolloutJobResponseOutput() CreateChildRolloutJobResponseOutput {
	return o
}

func (o CreateChildRolloutJobResponseOutput) ToCreateChildRolloutJobResponseOutputWithContext(ctx context.Context) CreateChildRolloutJobResponseOutput {
	return o
}

// CustomCanaryDeployment represents the custom canary deployment configuration.
type CustomCanaryDeployment struct {
	// Configuration for each phase in the canary deployment in the order executed.
	PhaseConfigs []PhaseConfig `pulumi:"phaseConfigs"`
}

// CustomCanaryDeploymentInput is an input type that accepts CustomCanaryDeploymentArgs and CustomCanaryDeploymentOutput values.
// You can construct a concrete instance of `CustomCanaryDeploymentInput` via:
//
//	CustomCanaryDeploymentArgs{...}
type CustomCanaryDeploymentInput interface {
	pulumi.Input

	ToCustomCanaryDeploymentOutput() CustomCanaryDeploymentOutput
	ToCustomCanaryDeploymentOutputWithContext(context.Context) CustomCanaryDeploymentOutput
}

// CustomCanaryDeployment represents the custom canary deployment configuration.
type CustomCanaryDeploymentArgs struct {
	// Configuration for each phase in the canary deployment in the order executed.
	PhaseConfigs PhaseConfigArrayInput `pulumi:"phaseConfigs"`
}

func (CustomCanaryDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomCanaryDeployment)(nil)).Elem()
}

func (i CustomCanaryDeploymentArgs) ToCustomCanaryDeploymentOutput() CustomCanaryDeploymentOutput {
	return i.ToCustomCanaryDeploymentOutputWithContext(context.Background())
}

func (i CustomCanaryDeploymentArgs) ToCustomCanaryDeploymentOutputWithContext(ctx context.Context) CustomCanaryDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomCanaryDeploymentOutput)
}

func (i CustomCanaryDeploymentArgs) ToCustomCanaryDeploymentPtrOutput() CustomCanaryDeploymentPtrOutput {
	return i.ToCustomCanaryDeploymentPtrOutputWithContext(context.Background())
}

func (i CustomCanaryDeploymentArgs) ToCustomCanaryDeploymentPtrOutputWithContext(ctx context.Context) CustomCanaryDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomCanaryDeploymentOutput).ToCustomCanaryDeploymentPtrOutputWithContext(ctx)
}

// CustomCanaryDeploymentPtrInput is an input type that accepts CustomCanaryDeploymentArgs, CustomCanaryDeploymentPtr and CustomCanaryDeploymentPtrOutput values.
// You can construct a concrete instance of `CustomCanaryDeploymentPtrInput` via:
//
//	        CustomCanaryDeploymentArgs{...}
//
//	or:
//
//	        nil
type CustomCanaryDeploymentPtrInput interface {
	pulumi.Input

	ToCustomCanaryDeploymentPtrOutput() CustomCanaryDeploymentPtrOutput
	ToCustomCanaryDeploymentPtrOutputWithContext(context.Context) CustomCanaryDeploymentPtrOutput
}

type customCanaryDeploymentPtrType CustomCanaryDeploymentArgs

func CustomCanaryDeploymentPtr(v *CustomCanaryDeploymentArgs) CustomCanaryDeploymentPtrInput {
	return (*customCanaryDeploymentPtrType)(v)
}

func (*customCanaryDeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomCanaryDeployment)(nil)).Elem()
}

func (i *customCanaryDeploymentPtrType) ToCustomCanaryDeploymentPtrOutput() CustomCanaryDeploymentPtrOutput {
	return i.ToCustomCanaryDeploymentPtrOutputWithContext(context.Background())
}

func (i *customCanaryDeploymentPtrType) ToCustomCanaryDeploymentPtrOutputWithContext(ctx context.Context) CustomCanaryDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomCanaryDeploymentPtrOutput)
}

// CustomCanaryDeployment represents the custom canary deployment configuration.
type CustomCanaryDeploymentOutput struct{ *pulumi.OutputState }

func (CustomCanaryDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomCanaryDeployment)(nil)).Elem()
}

func (o CustomCanaryDeploymentOutput) ToCustomCanaryDeploymentOutput() CustomCanaryDeploymentOutput {
	return o
}

func (o CustomCanaryDeploymentOutput) ToCustomCanaryDeploymentOutputWithContext(ctx context.Context) CustomCanaryDeploymentOutput {
	return o
}

func (o CustomCanaryDeploymentOutput) ToCustomCanaryDeploymentPtrOutput() CustomCanaryDeploymentPtrOutput {
	return o.ToCustomCanaryDeploymentPtrOutputWithContext(context.Background())
}

func (o CustomCanaryDeploymentOutput) ToCustomCanaryDeploymentPtrOutputWithContext(ctx context.Context) CustomCanaryDeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomCanaryDeployment) *CustomCanaryDeployment {
		return &v
	}).(CustomCanaryDeploymentPtrOutput)
}

// Configuration for each phase in the canary deployment in the order executed.
func (o CustomCanaryDeploymentOutput) PhaseConfigs() PhaseConfigArrayOutput {
	return o.ApplyT(func(v CustomCanaryDeployment) []PhaseConfig { return v.PhaseConfigs }).(PhaseConfigArrayOutput)
}

type CustomCanaryDeploymentPtrOutput struct{ *pulumi.OutputState }

func (CustomCanaryDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomCanaryDeployment)(nil)).Elem()
}

func (o CustomCanaryDeploymentPtrOutput) ToCustomCanaryDeploymentPtrOutput() CustomCanaryDeploymentPtrOutput {
	return o
}

func (o CustomCanaryDeploymentPtrOutput) ToCustomCanaryDeploymentPtrOutputWithContext(ctx context.Context) CustomCanaryDeploymentPtrOutput {
	return o
}

func (o CustomCanaryDeploymentPtrOutput) Elem() CustomCanaryDeploymentOutput {
	return o.ApplyT(func(v *CustomCanaryDeployment) CustomCanaryDeployment {
		if v != nil {
			return *v
		}
		var ret CustomCanaryDeployment
		return ret
	}).(CustomCanaryDeploymentOutput)
}

// Configuration for each phase in the canary deployment in the order executed.
func (o CustomCanaryDeploymentPtrOutput) PhaseConfigs() PhaseConfigArrayOutput {
	return o.ApplyT(func(v *CustomCanaryDeployment) []PhaseConfig {
		if v == nil {
			return nil
		}
		return v.PhaseConfigs
	}).(PhaseConfigArrayOutput)
}

// CustomCanaryDeployment represents the custom canary deployment configuration.
type CustomCanaryDeploymentResponse struct {
	// Configuration for each phase in the canary deployment in the order executed.
	PhaseConfigs []PhaseConfigResponse `pulumi:"phaseConfigs"`
}

// CustomCanaryDeployment represents the custom canary deployment configuration.
type CustomCanaryDeploymentResponseOutput struct{ *pulumi.OutputState }

func (CustomCanaryDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomCanaryDeploymentResponse)(nil)).Elem()
}

func (o CustomCanaryDeploymentResponseOutput) ToCustomCanaryDeploymentResponseOutput() CustomCanaryDeploymentResponseOutput {
	return o
}

func (o CustomCanaryDeploymentResponseOutput) ToCustomCanaryDeploymentResponseOutputWithContext(ctx context.Context) CustomCanaryDeploymentResponseOutput {
	return o
}

// Configuration for each phase in the canary deployment in the order executed.
func (o CustomCanaryDeploymentResponseOutput) PhaseConfigs() PhaseConfigResponseArrayOutput {
	return o.ApplyT(func(v CustomCanaryDeploymentResponse) []PhaseConfigResponse { return v.PhaseConfigs }).(PhaseConfigResponseArrayOutput)
}

// Execution using the default Cloud Build pool.
type DefaultPool struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage *string `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount *string `pulumi:"serviceAccount"`
}

// DefaultPoolInput is an input type that accepts DefaultPoolArgs and DefaultPoolOutput values.
// You can construct a concrete instance of `DefaultPoolInput` via:
//
//	DefaultPoolArgs{...}
type DefaultPoolInput interface {
	pulumi.Input

	ToDefaultPoolOutput() DefaultPoolOutput
	ToDefaultPoolOutputWithContext(context.Context) DefaultPoolOutput
}

// Execution using the default Cloud Build pool.
type DefaultPoolArgs struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage pulumi.StringPtrInput `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
}

func (DefaultPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultPool)(nil)).Elem()
}

func (i DefaultPoolArgs) ToDefaultPoolOutput() DefaultPoolOutput {
	return i.ToDefaultPoolOutputWithContext(context.Background())
}

func (i DefaultPoolArgs) ToDefaultPoolOutputWithContext(ctx context.Context) DefaultPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultPoolOutput)
}

func (i DefaultPoolArgs) ToDefaultPoolPtrOutput() DefaultPoolPtrOutput {
	return i.ToDefaultPoolPtrOutputWithContext(context.Background())
}

func (i DefaultPoolArgs) ToDefaultPoolPtrOutputWithContext(ctx context.Context) DefaultPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultPoolOutput).ToDefaultPoolPtrOutputWithContext(ctx)
}

// DefaultPoolPtrInput is an input type that accepts DefaultPoolArgs, DefaultPoolPtr and DefaultPoolPtrOutput values.
// You can construct a concrete instance of `DefaultPoolPtrInput` via:
//
//	        DefaultPoolArgs{...}
//
//	or:
//
//	        nil
type DefaultPoolPtrInput interface {
	pulumi.Input

	ToDefaultPoolPtrOutput() DefaultPoolPtrOutput
	ToDefaultPoolPtrOutputWithContext(context.Context) DefaultPoolPtrOutput
}

type defaultPoolPtrType DefaultPoolArgs

func DefaultPoolPtr(v *DefaultPoolArgs) DefaultPoolPtrInput {
	return (*defaultPoolPtrType)(v)
}

func (*defaultPoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultPool)(nil)).Elem()
}

func (i *defaultPoolPtrType) ToDefaultPoolPtrOutput() DefaultPoolPtrOutput {
	return i.ToDefaultPoolPtrOutputWithContext(context.Background())
}

func (i *defaultPoolPtrType) ToDefaultPoolPtrOutputWithContext(ctx context.Context) DefaultPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultPoolPtrOutput)
}

// Execution using the default Cloud Build pool.
type DefaultPoolOutput struct{ *pulumi.OutputState }

func (DefaultPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultPool)(nil)).Elem()
}

func (o DefaultPoolOutput) ToDefaultPoolOutput() DefaultPoolOutput {
	return o
}

func (o DefaultPoolOutput) ToDefaultPoolOutputWithContext(ctx context.Context) DefaultPoolOutput {
	return o
}

func (o DefaultPoolOutput) ToDefaultPoolPtrOutput() DefaultPoolPtrOutput {
	return o.ToDefaultPoolPtrOutputWithContext(context.Background())
}

func (o DefaultPoolOutput) ToDefaultPoolPtrOutputWithContext(ctx context.Context) DefaultPoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultPool) *DefaultPool {
		return &v
	}).(DefaultPoolPtrOutput)
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o DefaultPoolOutput) ArtifactStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultPool) *string { return v.ArtifactStorage }).(pulumi.StringPtrOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o DefaultPoolOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultPool) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

type DefaultPoolPtrOutput struct{ *pulumi.OutputState }

func (DefaultPoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultPool)(nil)).Elem()
}

func (o DefaultPoolPtrOutput) ToDefaultPoolPtrOutput() DefaultPoolPtrOutput {
	return o
}

func (o DefaultPoolPtrOutput) ToDefaultPoolPtrOutputWithContext(ctx context.Context) DefaultPoolPtrOutput {
	return o
}

func (o DefaultPoolPtrOutput) Elem() DefaultPoolOutput {
	return o.ApplyT(func(v *DefaultPool) DefaultPool {
		if v != nil {
			return *v
		}
		var ret DefaultPool
		return ret
	}).(DefaultPoolOutput)
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o DefaultPoolPtrOutput) ArtifactStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultPool) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorage
	}).(pulumi.StringPtrOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o DefaultPoolPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultPool) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Execution using the default Cloud Build pool.
type DefaultPoolResponse struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage string `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount string `pulumi:"serviceAccount"`
}

// Execution using the default Cloud Build pool.
type DefaultPoolResponseOutput struct{ *pulumi.OutputState }

func (DefaultPoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultPoolResponse)(nil)).Elem()
}

func (o DefaultPoolResponseOutput) ToDefaultPoolResponseOutput() DefaultPoolResponseOutput {
	return o
}

func (o DefaultPoolResponseOutput) ToDefaultPoolResponseOutputWithContext(ctx context.Context) DefaultPoolResponseOutput {
	return o
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o DefaultPoolResponseOutput) ArtifactStorage() pulumi.StringOutput {
	return o.ApplyT(func(v DefaultPoolResponse) string { return v.ArtifactStorage }).(pulumi.StringOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o DefaultPoolResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v DefaultPoolResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// A `DeliveryPipeline` resource in the Cloud Deploy API. A `DeliveryPipeline` defines a pipeline through which a Skaffold configuration can progress.
type DeliveryPipelineResponse struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy.
	Annotations map[string]string `pulumi:"annotations"`
	// Information around the state of the Delivery Pipeline.
	Condition PipelineConditionResponse `pulumi:"condition"`
	// Time at which the pipeline was created.
	CreateTime string `pulumi:"createTime"`
	// Description of the `DeliveryPipeline`. Max length is 255 characters.
	Description string `pulumi:"description"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag string `pulumi:"etag"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Name of the `DeliveryPipeline`. Format is `projects/{project}/locations/{location}/deliveryPipelines/a-z{0,62}`.
	Name string `pulumi:"name"`
	// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
	SerialPipeline SerialPipelineResponse `pulumi:"serialPipeline"`
	// When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
	Suspended bool `pulumi:"suspended"`
	// Unique identifier of the `DeliveryPipeline`.
	Uid string `pulumi:"uid"`
	// Most recent time at which the pipeline was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// A `DeliveryPipeline` resource in the Cloud Deploy API. A `DeliveryPipeline` defines a pipeline through which a Skaffold configuration can progress.
type DeliveryPipelineResponseOutput struct{ *pulumi.OutputState }

func (DeliveryPipelineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryPipelineResponse)(nil)).Elem()
}

func (o DeliveryPipelineResponseOutput) ToDeliveryPipelineResponseOutput() DeliveryPipelineResponseOutput {
	return o
}

func (o DeliveryPipelineResponseOutput) ToDeliveryPipelineResponseOutputWithContext(ctx context.Context) DeliveryPipelineResponseOutput {
	return o
}

// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy.
func (o DeliveryPipelineResponseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Information around the state of the Delivery Pipeline.
func (o DeliveryPipelineResponseOutput) Condition() PipelineConditionResponseOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) PipelineConditionResponse { return v.Condition }).(PipelineConditionResponseOutput)
}

// Time at which the pipeline was created.
func (o DeliveryPipelineResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the `DeliveryPipeline`. Max length is 255 characters.
func (o DeliveryPipelineResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.Description }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o DeliveryPipelineResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
func (o DeliveryPipelineResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Optional. Name of the `DeliveryPipeline`. Format is `projects/{project}/locations/{location}/deliveryPipelines/a-z{0,62}`.
func (o DeliveryPipelineResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.Name }).(pulumi.StringOutput)
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
func (o DeliveryPipelineResponseOutput) SerialPipeline() SerialPipelineResponseOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) SerialPipelineResponse { return v.SerialPipeline }).(SerialPipelineResponseOutput)
}

// When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
func (o DeliveryPipelineResponseOutput) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) bool { return v.Suspended }).(pulumi.BoolOutput)
}

// Unique identifier of the `DeliveryPipeline`.
func (o DeliveryPipelineResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.Uid }).(pulumi.StringOutput)
}

// Most recent time at which the pipeline was updated.
func (o DeliveryPipelineResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// A deploy Job.
type DeployJobResponse struct {
}

// A deploy Job.
type DeployJobResponseOutput struct{ *pulumi.OutputState }

func (DeployJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployJobResponse)(nil)).Elem()
}

func (o DeployJobResponseOutput) ToDeployJobResponseOutput() DeployJobResponseOutput {
	return o
}

func (o DeployJobResponseOutput) ToDeployJobResponseOutputWithContext(ctx context.Context) DeployJobResponseOutput {
	return o
}

// DeployParameters contains deploy parameters information.
type DeployParameters struct {
	// Optional. Deploy parameters are applied to targets with match labels. If unspecified, deploy parameters are applied to all targets (including child targets of a multi-target).
	MatchTargetLabels map[string]string `pulumi:"matchTargetLabels"`
	// Values are deploy parameters in key-value pairs.
	Values map[string]string `pulumi:"values"`
}

// DeployParametersInput is an input type that accepts DeployParametersArgs and DeployParametersOutput values.
// You can construct a concrete instance of `DeployParametersInput` via:
//
//	DeployParametersArgs{...}
type DeployParametersInput interface {
	pulumi.Input

	ToDeployParametersOutput() DeployParametersOutput
	ToDeployParametersOutputWithContext(context.Context) DeployParametersOutput
}

// DeployParameters contains deploy parameters information.
type DeployParametersArgs struct {
	// Optional. Deploy parameters are applied to targets with match labels. If unspecified, deploy parameters are applied to all targets (including child targets of a multi-target).
	MatchTargetLabels pulumi.StringMapInput `pulumi:"matchTargetLabels"`
	// Values are deploy parameters in key-value pairs.
	Values pulumi.StringMapInput `pulumi:"values"`
}

func (DeployParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployParameters)(nil)).Elem()
}

func (i DeployParametersArgs) ToDeployParametersOutput() DeployParametersOutput {
	return i.ToDeployParametersOutputWithContext(context.Background())
}

func (i DeployParametersArgs) ToDeployParametersOutputWithContext(ctx context.Context) DeployParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployParametersOutput)
}

// DeployParametersArrayInput is an input type that accepts DeployParametersArray and DeployParametersArrayOutput values.
// You can construct a concrete instance of `DeployParametersArrayInput` via:
//
//	DeployParametersArray{ DeployParametersArgs{...} }
type DeployParametersArrayInput interface {
	pulumi.Input

	ToDeployParametersArrayOutput() DeployParametersArrayOutput
	ToDeployParametersArrayOutputWithContext(context.Context) DeployParametersArrayOutput
}

type DeployParametersArray []DeployParametersInput

func (DeployParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeployParameters)(nil)).Elem()
}

func (i DeployParametersArray) ToDeployParametersArrayOutput() DeployParametersArrayOutput {
	return i.ToDeployParametersArrayOutputWithContext(context.Background())
}

func (i DeployParametersArray) ToDeployParametersArrayOutputWithContext(ctx context.Context) DeployParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployParametersArrayOutput)
}

// DeployParameters contains deploy parameters information.
type DeployParametersOutput struct{ *pulumi.OutputState }

func (DeployParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployParameters)(nil)).Elem()
}

func (o DeployParametersOutput) ToDeployParametersOutput() DeployParametersOutput {
	return o
}

func (o DeployParametersOutput) ToDeployParametersOutputWithContext(ctx context.Context) DeployParametersOutput {
	return o
}

// Optional. Deploy parameters are applied to targets with match labels. If unspecified, deploy parameters are applied to all targets (including child targets of a multi-target).
func (o DeployParametersOutput) MatchTargetLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeployParameters) map[string]string { return v.MatchTargetLabels }).(pulumi.StringMapOutput)
}

// Values are deploy parameters in key-value pairs.
func (o DeployParametersOutput) Values() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeployParameters) map[string]string { return v.Values }).(pulumi.StringMapOutput)
}

type DeployParametersArrayOutput struct{ *pulumi.OutputState }

func (DeployParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeployParameters)(nil)).Elem()
}

func (o DeployParametersArrayOutput) ToDeployParametersArrayOutput() DeployParametersArrayOutput {
	return o
}

func (o DeployParametersArrayOutput) ToDeployParametersArrayOutputWithContext(ctx context.Context) DeployParametersArrayOutput {
	return o
}

func (o DeployParametersArrayOutput) Index(i pulumi.IntInput) DeployParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeployParameters {
		return vs[0].([]DeployParameters)[vs[1].(int)]
	}).(DeployParametersOutput)
}

// DeployParameters contains deploy parameters information.
type DeployParametersResponse struct {
	// Optional. Deploy parameters are applied to targets with match labels. If unspecified, deploy parameters are applied to all targets (including child targets of a multi-target).
	MatchTargetLabels map[string]string `pulumi:"matchTargetLabels"`
	// Values are deploy parameters in key-value pairs.
	Values map[string]string `pulumi:"values"`
}

// DeployParameters contains deploy parameters information.
type DeployParametersResponseOutput struct{ *pulumi.OutputState }

func (DeployParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployParametersResponse)(nil)).Elem()
}

func (o DeployParametersResponseOutput) ToDeployParametersResponseOutput() DeployParametersResponseOutput {
	return o
}

func (o DeployParametersResponseOutput) ToDeployParametersResponseOutputWithContext(ctx context.Context) DeployParametersResponseOutput {
	return o
}

// Optional. Deploy parameters are applied to targets with match labels. If unspecified, deploy parameters are applied to all targets (including child targets of a multi-target).
func (o DeployParametersResponseOutput) MatchTargetLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeployParametersResponse) map[string]string { return v.MatchTargetLabels }).(pulumi.StringMapOutput)
}

// Values are deploy parameters in key-value pairs.
func (o DeployParametersResponseOutput) Values() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeployParametersResponse) map[string]string { return v.Values }).(pulumi.StringMapOutput)
}

type DeployParametersResponseArrayOutput struct{ *pulumi.OutputState }

func (DeployParametersResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeployParametersResponse)(nil)).Elem()
}

func (o DeployParametersResponseArrayOutput) ToDeployParametersResponseArrayOutput() DeployParametersResponseArrayOutput {
	return o
}

func (o DeployParametersResponseArrayOutput) ToDeployParametersResponseArrayOutputWithContext(ctx context.Context) DeployParametersResponseArrayOutput {
	return o
}

func (o DeployParametersResponseArrayOutput) Index(i pulumi.IntInput) DeployParametersResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeployParametersResponse {
		return vs[0].([]DeployParametersResponse)[vs[1].(int)]
	}).(DeployParametersResponseOutput)
}

// Deployment job composition.
type DeploymentJobsResponse struct {
	// The deploy Job. This is the deploy job in the phase.
	DeployJob JobResponse `pulumi:"deployJob"`
	// The postdeploy Job, which is the last job on the phase.
	PostdeployJob JobResponse `pulumi:"postdeployJob"`
	// The predeploy Job, which is the first job on the phase.
	PredeployJob JobResponse `pulumi:"predeployJob"`
	// The verify Job. Runs after a deploy if the deploy succeeds.
	VerifyJob JobResponse `pulumi:"verifyJob"`
}

// Deployment job composition.
type DeploymentJobsResponseOutput struct{ *pulumi.OutputState }

func (DeploymentJobsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentJobsResponse)(nil)).Elem()
}

func (o DeploymentJobsResponseOutput) ToDeploymentJobsResponseOutput() DeploymentJobsResponseOutput {
	return o
}

func (o DeploymentJobsResponseOutput) ToDeploymentJobsResponseOutputWithContext(ctx context.Context) DeploymentJobsResponseOutput {
	return o
}

// The deploy Job. This is the deploy job in the phase.
func (o DeploymentJobsResponseOutput) DeployJob() JobResponseOutput {
	return o.ApplyT(func(v DeploymentJobsResponse) JobResponse { return v.DeployJob }).(JobResponseOutput)
}

// The postdeploy Job, which is the last job on the phase.
func (o DeploymentJobsResponseOutput) PostdeployJob() JobResponseOutput {
	return o.ApplyT(func(v DeploymentJobsResponse) JobResponse { return v.PostdeployJob }).(JobResponseOutput)
}

// The predeploy Job, which is the first job on the phase.
func (o DeploymentJobsResponseOutput) PredeployJob() JobResponseOutput {
	return o.ApplyT(func(v DeploymentJobsResponse) JobResponse { return v.PredeployJob }).(JobResponseOutput)
}

// The verify Job. Runs after a deploy if the deploy succeeds.
func (o DeploymentJobsResponseOutput) VerifyJob() JobResponseOutput {
	return o.ApplyT(func(v DeploymentJobsResponse) JobResponse { return v.VerifyJob }).(JobResponseOutput)
}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfig struct {
	// Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage *string `pulumi:"artifactStorage"`
	// Optional. Use default Cloud Build pool.
	DefaultPool *DefaultPool `pulumi:"defaultPool"`
	// Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
	ExecutionTimeout *string `pulumi:"executionTimeout"`
	// Optional. Use private Cloud Build pool.
	PrivatePool *PrivatePool `pulumi:"privatePool"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Usages when this configuration should be applied.
	Usages []ExecutionConfigUsagesItem `pulumi:"usages"`
	// Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
	WorkerPool *string `pulumi:"workerPool"`
}

// ExecutionConfigInput is an input type that accepts ExecutionConfigArgs and ExecutionConfigOutput values.
// You can construct a concrete instance of `ExecutionConfigInput` via:
//
//	ExecutionConfigArgs{...}
type ExecutionConfigInput interface {
	pulumi.Input

	ToExecutionConfigOutput() ExecutionConfigOutput
	ToExecutionConfigOutputWithContext(context.Context) ExecutionConfigOutput
}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfigArgs struct {
	// Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage pulumi.StringPtrInput `pulumi:"artifactStorage"`
	// Optional. Use default Cloud Build pool.
	DefaultPool DefaultPoolPtrInput `pulumi:"defaultPool"`
	// Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
	ExecutionTimeout pulumi.StringPtrInput `pulumi:"executionTimeout"`
	// Optional. Use private Cloud Build pool.
	PrivatePool PrivatePoolPtrInput `pulumi:"privatePool"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Usages when this configuration should be applied.
	Usages ExecutionConfigUsagesItemArrayInput `pulumi:"usages"`
	// Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
	WorkerPool pulumi.StringPtrInput `pulumi:"workerPool"`
}

func (ExecutionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionConfig)(nil)).Elem()
}

func (i ExecutionConfigArgs) ToExecutionConfigOutput() ExecutionConfigOutput {
	return i.ToExecutionConfigOutputWithContext(context.Background())
}

func (i ExecutionConfigArgs) ToExecutionConfigOutputWithContext(ctx context.Context) ExecutionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionConfigOutput)
}

// ExecutionConfigArrayInput is an input type that accepts ExecutionConfigArray and ExecutionConfigArrayOutput values.
// You can construct a concrete instance of `ExecutionConfigArrayInput` via:
//
//	ExecutionConfigArray{ ExecutionConfigArgs{...} }
type ExecutionConfigArrayInput interface {
	pulumi.Input

	ToExecutionConfigArrayOutput() ExecutionConfigArrayOutput
	ToExecutionConfigArrayOutputWithContext(context.Context) ExecutionConfigArrayOutput
}

type ExecutionConfigArray []ExecutionConfigInput

func (ExecutionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionConfig)(nil)).Elem()
}

func (i ExecutionConfigArray) ToExecutionConfigArrayOutput() ExecutionConfigArrayOutput {
	return i.ToExecutionConfigArrayOutputWithContext(context.Background())
}

func (i ExecutionConfigArray) ToExecutionConfigArrayOutputWithContext(ctx context.Context) ExecutionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionConfigArrayOutput)
}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfigOutput struct{ *pulumi.OutputState }

func (ExecutionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionConfig)(nil)).Elem()
}

func (o ExecutionConfigOutput) ToExecutionConfigOutput() ExecutionConfigOutput {
	return o
}

func (o ExecutionConfigOutput) ToExecutionConfigOutputWithContext(ctx context.Context) ExecutionConfigOutput {
	return o
}

// Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o ExecutionConfigOutput) ArtifactStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *string { return v.ArtifactStorage }).(pulumi.StringPtrOutput)
}

// Optional. Use default Cloud Build pool.
func (o ExecutionConfigOutput) DefaultPool() DefaultPoolPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *DefaultPool { return v.DefaultPool }).(DefaultPoolPtrOutput)
}

// Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
func (o ExecutionConfigOutput) ExecutionTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *string { return v.ExecutionTimeout }).(pulumi.StringPtrOutput)
}

// Optional. Use private Cloud Build pool.
func (o ExecutionConfigOutput) PrivatePool() PrivatePoolPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *PrivatePool { return v.PrivatePool }).(PrivatePoolPtrOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
func (o ExecutionConfigOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Usages when this configuration should be applied.
func (o ExecutionConfigOutput) Usages() ExecutionConfigUsagesItemArrayOutput {
	return o.ApplyT(func(v ExecutionConfig) []ExecutionConfigUsagesItem { return v.Usages }).(ExecutionConfigUsagesItemArrayOutput)
}

// Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
func (o ExecutionConfigOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *string { return v.WorkerPool }).(pulumi.StringPtrOutput)
}

type ExecutionConfigArrayOutput struct{ *pulumi.OutputState }

func (ExecutionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionConfig)(nil)).Elem()
}

func (o ExecutionConfigArrayOutput) ToExecutionConfigArrayOutput() ExecutionConfigArrayOutput {
	return o
}

func (o ExecutionConfigArrayOutput) ToExecutionConfigArrayOutputWithContext(ctx context.Context) ExecutionConfigArrayOutput {
	return o
}

func (o ExecutionConfigArrayOutput) Index(i pulumi.IntInput) ExecutionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutionConfig {
		return vs[0].([]ExecutionConfig)[vs[1].(int)]
	}).(ExecutionConfigOutput)
}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfigResponse struct {
	// Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage string `pulumi:"artifactStorage"`
	// Optional. Use default Cloud Build pool.
	DefaultPool DefaultPoolResponse `pulumi:"defaultPool"`
	// Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
	ExecutionTimeout string `pulumi:"executionTimeout"`
	// Optional. Use private Cloud Build pool.
	PrivatePool PrivatePoolResponse `pulumi:"privatePool"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Usages when this configuration should be applied.
	Usages []string `pulumi:"usages"`
	// Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
	WorkerPool string `pulumi:"workerPool"`
}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfigResponseOutput struct{ *pulumi.OutputState }

func (ExecutionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionConfigResponse)(nil)).Elem()
}

func (o ExecutionConfigResponseOutput) ToExecutionConfigResponseOutput() ExecutionConfigResponseOutput {
	return o
}

func (o ExecutionConfigResponseOutput) ToExecutionConfigResponseOutputWithContext(ctx context.Context) ExecutionConfigResponseOutput {
	return o
}

// Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o ExecutionConfigResponseOutput) ArtifactStorage() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) string { return v.ArtifactStorage }).(pulumi.StringOutput)
}

// Optional. Use default Cloud Build pool.
func (o ExecutionConfigResponseOutput) DefaultPool() DefaultPoolResponseOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) DefaultPoolResponse { return v.DefaultPool }).(DefaultPoolResponseOutput)
}

// Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
func (o ExecutionConfigResponseOutput) ExecutionTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) string { return v.ExecutionTimeout }).(pulumi.StringOutput)
}

// Optional. Use private Cloud Build pool.
func (o ExecutionConfigResponseOutput) PrivatePool() PrivatePoolResponseOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) PrivatePoolResponse { return v.PrivatePool }).(PrivatePoolResponseOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
func (o ExecutionConfigResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Usages when this configuration should be applied.
func (o ExecutionConfigResponseOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) []string { return v.Usages }).(pulumi.StringArrayOutput)
}

// Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
func (o ExecutionConfigResponseOutput) WorkerPool() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) string { return v.WorkerPool }).(pulumi.StringOutput)
}

type ExecutionConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (ExecutionConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionConfigResponse)(nil)).Elem()
}

func (o ExecutionConfigResponseArrayOutput) ToExecutionConfigResponseArrayOutput() ExecutionConfigResponseArrayOutput {
	return o
}

func (o ExecutionConfigResponseArrayOutput) ToExecutionConfigResponseArrayOutputWithContext(ctx context.Context) ExecutionConfigResponseArrayOutput {
	return o
}

func (o ExecutionConfigResponseArrayOutput) Index(i pulumi.IntInput) ExecutionConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutionConfigResponse {
		return vs[0].([]ExecutionConfigResponse)[vs[1].(int)]
	}).(ExecutionConfigResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Information about the Kubernetes Gateway API service mesh configuration.
type GatewayServiceMesh struct {
	// Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.
	Deployment string `pulumi:"deployment"`
	// Name of the Gateway API HTTPRoute.
	HttpRoute string `pulumi:"httpRoute"`
	// Optional. The time to wait for route updates to propagate. The maximum configurable time is 3 hours, in seconds format. If unspecified, there is no wait time.
	RouteUpdateWaitTime *string `pulumi:"routeUpdateWaitTime"`
	// Name of the Kubernetes Service.
	Service string `pulumi:"service"`
}

// GatewayServiceMeshInput is an input type that accepts GatewayServiceMeshArgs and GatewayServiceMeshOutput values.
// You can construct a concrete instance of `GatewayServiceMeshInput` via:
//
//	GatewayServiceMeshArgs{...}
type GatewayServiceMeshInput interface {
	pulumi.Input

	ToGatewayServiceMeshOutput() GatewayServiceMeshOutput
	ToGatewayServiceMeshOutputWithContext(context.Context) GatewayServiceMeshOutput
}

// Information about the Kubernetes Gateway API service mesh configuration.
type GatewayServiceMeshArgs struct {
	// Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.
	Deployment pulumi.StringInput `pulumi:"deployment"`
	// Name of the Gateway API HTTPRoute.
	HttpRoute pulumi.StringInput `pulumi:"httpRoute"`
	// Optional. The time to wait for route updates to propagate. The maximum configurable time is 3 hours, in seconds format. If unspecified, there is no wait time.
	RouteUpdateWaitTime pulumi.StringPtrInput `pulumi:"routeUpdateWaitTime"`
	// Name of the Kubernetes Service.
	Service pulumi.StringInput `pulumi:"service"`
}

func (GatewayServiceMeshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayServiceMesh)(nil)).Elem()
}

func (i GatewayServiceMeshArgs) ToGatewayServiceMeshOutput() GatewayServiceMeshOutput {
	return i.ToGatewayServiceMeshOutputWithContext(context.Background())
}

func (i GatewayServiceMeshArgs) ToGatewayServiceMeshOutputWithContext(ctx context.Context) GatewayServiceMeshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayServiceMeshOutput)
}

func (i GatewayServiceMeshArgs) ToGatewayServiceMeshPtrOutput() GatewayServiceMeshPtrOutput {
	return i.ToGatewayServiceMeshPtrOutputWithContext(context.Background())
}

func (i GatewayServiceMeshArgs) ToGatewayServiceMeshPtrOutputWithContext(ctx context.Context) GatewayServiceMeshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayServiceMeshOutput).ToGatewayServiceMeshPtrOutputWithContext(ctx)
}

// GatewayServiceMeshPtrInput is an input type that accepts GatewayServiceMeshArgs, GatewayServiceMeshPtr and GatewayServiceMeshPtrOutput values.
// You can construct a concrete instance of `GatewayServiceMeshPtrInput` via:
//
//	        GatewayServiceMeshArgs{...}
//
//	or:
//
//	        nil
type GatewayServiceMeshPtrInput interface {
	pulumi.Input

	ToGatewayServiceMeshPtrOutput() GatewayServiceMeshPtrOutput
	ToGatewayServiceMeshPtrOutputWithContext(context.Context) GatewayServiceMeshPtrOutput
}

type gatewayServiceMeshPtrType GatewayServiceMeshArgs

func GatewayServiceMeshPtr(v *GatewayServiceMeshArgs) GatewayServiceMeshPtrInput {
	return (*gatewayServiceMeshPtrType)(v)
}

func (*gatewayServiceMeshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayServiceMesh)(nil)).Elem()
}

func (i *gatewayServiceMeshPtrType) ToGatewayServiceMeshPtrOutput() GatewayServiceMeshPtrOutput {
	return i.ToGatewayServiceMeshPtrOutputWithContext(context.Background())
}

func (i *gatewayServiceMeshPtrType) ToGatewayServiceMeshPtrOutputWithContext(ctx context.Context) GatewayServiceMeshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayServiceMeshPtrOutput)
}

// Information about the Kubernetes Gateway API service mesh configuration.
type GatewayServiceMeshOutput struct{ *pulumi.OutputState }

func (GatewayServiceMeshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayServiceMesh)(nil)).Elem()
}

func (o GatewayServiceMeshOutput) ToGatewayServiceMeshOutput() GatewayServiceMeshOutput {
	return o
}

func (o GatewayServiceMeshOutput) ToGatewayServiceMeshOutputWithContext(ctx context.Context) GatewayServiceMeshOutput {
	return o
}

func (o GatewayServiceMeshOutput) ToGatewayServiceMeshPtrOutput() GatewayServiceMeshPtrOutput {
	return o.ToGatewayServiceMeshPtrOutputWithContext(context.Background())
}

func (o GatewayServiceMeshOutput) ToGatewayServiceMeshPtrOutputWithContext(ctx context.Context) GatewayServiceMeshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewayServiceMesh) *GatewayServiceMesh {
		return &v
	}).(GatewayServiceMeshPtrOutput)
}

// Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.
func (o GatewayServiceMeshOutput) Deployment() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayServiceMesh) string { return v.Deployment }).(pulumi.StringOutput)
}

// Name of the Gateway API HTTPRoute.
func (o GatewayServiceMeshOutput) HttpRoute() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayServiceMesh) string { return v.HttpRoute }).(pulumi.StringOutput)
}

// Optional. The time to wait for route updates to propagate. The maximum configurable time is 3 hours, in seconds format. If unspecified, there is no wait time.
func (o GatewayServiceMeshOutput) RouteUpdateWaitTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewayServiceMesh) *string { return v.RouteUpdateWaitTime }).(pulumi.StringPtrOutput)
}

// Name of the Kubernetes Service.
func (o GatewayServiceMeshOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayServiceMesh) string { return v.Service }).(pulumi.StringOutput)
}

type GatewayServiceMeshPtrOutput struct{ *pulumi.OutputState }

func (GatewayServiceMeshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayServiceMesh)(nil)).Elem()
}

func (o GatewayServiceMeshPtrOutput) ToGatewayServiceMeshPtrOutput() GatewayServiceMeshPtrOutput {
	return o
}

func (o GatewayServiceMeshPtrOutput) ToGatewayServiceMeshPtrOutputWithContext(ctx context.Context) GatewayServiceMeshPtrOutput {
	return o
}

func (o GatewayServiceMeshPtrOutput) Elem() GatewayServiceMeshOutput {
	return o.ApplyT(func(v *GatewayServiceMesh) GatewayServiceMesh {
		if v != nil {
			return *v
		}
		var ret GatewayServiceMesh
		return ret
	}).(GatewayServiceMeshOutput)
}

// Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.
func (o GatewayServiceMeshPtrOutput) Deployment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayServiceMesh) *string {
		if v == nil {
			return nil
		}
		return &v.Deployment
	}).(pulumi.StringPtrOutput)
}

// Name of the Gateway API HTTPRoute.
func (o GatewayServiceMeshPtrOutput) HttpRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayServiceMesh) *string {
		if v == nil {
			return nil
		}
		return &v.HttpRoute
	}).(pulumi.StringPtrOutput)
}

// Optional. The time to wait for route updates to propagate. The maximum configurable time is 3 hours, in seconds format. If unspecified, there is no wait time.
func (o GatewayServiceMeshPtrOutput) RouteUpdateWaitTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayServiceMesh) *string {
		if v == nil {
			return nil
		}
		return v.RouteUpdateWaitTime
	}).(pulumi.StringPtrOutput)
}

// Name of the Kubernetes Service.
func (o GatewayServiceMeshPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayServiceMesh) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// Information about the Kubernetes Gateway API service mesh configuration.
type GatewayServiceMeshResponse struct {
	// Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.
	Deployment string `pulumi:"deployment"`
	// Name of the Gateway API HTTPRoute.
	HttpRoute string `pulumi:"httpRoute"`
	// Optional. The time to wait for route updates to propagate. The maximum configurable time is 3 hours, in seconds format. If unspecified, there is no wait time.
	RouteUpdateWaitTime string `pulumi:"routeUpdateWaitTime"`
	// Name of the Kubernetes Service.
	Service string `pulumi:"service"`
}

// Information about the Kubernetes Gateway API service mesh configuration.
type GatewayServiceMeshResponseOutput struct{ *pulumi.OutputState }

func (GatewayServiceMeshResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayServiceMeshResponse)(nil)).Elem()
}

func (o GatewayServiceMeshResponseOutput) ToGatewayServiceMeshResponseOutput() GatewayServiceMeshResponseOutput {
	return o
}

func (o GatewayServiceMeshResponseOutput) ToGatewayServiceMeshResponseOutputWithContext(ctx context.Context) GatewayServiceMeshResponseOutput {
	return o
}

// Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.
func (o GatewayServiceMeshResponseOutput) Deployment() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayServiceMeshResponse) string { return v.Deployment }).(pulumi.StringOutput)
}

// Name of the Gateway API HTTPRoute.
func (o GatewayServiceMeshResponseOutput) HttpRoute() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayServiceMeshResponse) string { return v.HttpRoute }).(pulumi.StringOutput)
}

// Optional. The time to wait for route updates to propagate. The maximum configurable time is 3 hours, in seconds format. If unspecified, there is no wait time.
func (o GatewayServiceMeshResponseOutput) RouteUpdateWaitTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayServiceMeshResponse) string { return v.RouteUpdateWaitTime }).(pulumi.StringOutput)
}

// Name of the Kubernetes Service.
func (o GatewayServiceMeshResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayServiceMeshResponse) string { return v.Service }).(pulumi.StringOutput)
}

// Information specifying a GKE Cluster.
type GkeCluster struct {
	// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`.
	Cluster *string `pulumi:"cluster"`
	// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
	InternalIp *bool `pulumi:"internalIp"`
}

// GkeClusterInput is an input type that accepts GkeClusterArgs and GkeClusterOutput values.
// You can construct a concrete instance of `GkeClusterInput` via:
//
//	GkeClusterArgs{...}
type GkeClusterInput interface {
	pulumi.Input

	ToGkeClusterOutput() GkeClusterOutput
	ToGkeClusterOutputWithContext(context.Context) GkeClusterOutput
}

// Information specifying a GKE Cluster.
type GkeClusterArgs struct {
	// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`.
	Cluster pulumi.StringPtrInput `pulumi:"cluster"`
	// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
	InternalIp pulumi.BoolPtrInput `pulumi:"internalIp"`
}

func (GkeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeCluster)(nil)).Elem()
}

func (i GkeClusterArgs) ToGkeClusterOutput() GkeClusterOutput {
	return i.ToGkeClusterOutputWithContext(context.Background())
}

func (i GkeClusterArgs) ToGkeClusterOutputWithContext(ctx context.Context) GkeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterOutput)
}

func (i GkeClusterArgs) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return i.ToGkeClusterPtrOutputWithContext(context.Background())
}

func (i GkeClusterArgs) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterOutput).ToGkeClusterPtrOutputWithContext(ctx)
}

// GkeClusterPtrInput is an input type that accepts GkeClusterArgs, GkeClusterPtr and GkeClusterPtrOutput values.
// You can construct a concrete instance of `GkeClusterPtrInput` via:
//
//	        GkeClusterArgs{...}
//
//	or:
//
//	        nil
type GkeClusterPtrInput interface {
	pulumi.Input

	ToGkeClusterPtrOutput() GkeClusterPtrOutput
	ToGkeClusterPtrOutputWithContext(context.Context) GkeClusterPtrOutput
}

type gkeClusterPtrType GkeClusterArgs

func GkeClusterPtr(v *GkeClusterArgs) GkeClusterPtrInput {
	return (*gkeClusterPtrType)(v)
}

func (*gkeClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeCluster)(nil)).Elem()
}

func (i *gkeClusterPtrType) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return i.ToGkeClusterPtrOutputWithContext(context.Background())
}

func (i *gkeClusterPtrType) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterPtrOutput)
}

// Information specifying a GKE Cluster.
type GkeClusterOutput struct{ *pulumi.OutputState }

func (GkeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeCluster)(nil)).Elem()
}

func (o GkeClusterOutput) ToGkeClusterOutput() GkeClusterOutput {
	return o
}

func (o GkeClusterOutput) ToGkeClusterOutputWithContext(ctx context.Context) GkeClusterOutput {
	return o
}

func (o GkeClusterOutput) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return o.ToGkeClusterPtrOutputWithContext(context.Background())
}

func (o GkeClusterOutput) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GkeCluster) *GkeCluster {
		return &v
	}).(GkeClusterPtrOutput)
}

// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`.
func (o GkeClusterOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GkeCluster) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
func (o GkeClusterOutput) InternalIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GkeCluster) *bool { return v.InternalIp }).(pulumi.BoolPtrOutput)
}

type GkeClusterPtrOutput struct{ *pulumi.OutputState }

func (GkeClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeCluster)(nil)).Elem()
}

func (o GkeClusterPtrOutput) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return o
}

func (o GkeClusterPtrOutput) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return o
}

func (o GkeClusterPtrOutput) Elem() GkeClusterOutput {
	return o.ApplyT(func(v *GkeCluster) GkeCluster {
		if v != nil {
			return *v
		}
		var ret GkeCluster
		return ret
	}).(GkeClusterOutput)
}

// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`.
func (o GkeClusterPtrOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeCluster) *string {
		if v == nil {
			return nil
		}
		return v.Cluster
	}).(pulumi.StringPtrOutput)
}

// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
func (o GkeClusterPtrOutput) InternalIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GkeCluster) *bool {
		if v == nil {
			return nil
		}
		return v.InternalIp
	}).(pulumi.BoolPtrOutput)
}

// Information specifying a GKE Cluster.
type GkeClusterResponse struct {
	// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`.
	Cluster string `pulumi:"cluster"`
	// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
	InternalIp bool `pulumi:"internalIp"`
}

// Information specifying a GKE Cluster.
type GkeClusterResponseOutput struct{ *pulumi.OutputState }

func (GkeClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeClusterResponse)(nil)).Elem()
}

func (o GkeClusterResponseOutput) ToGkeClusterResponseOutput() GkeClusterResponseOutput {
	return o
}

func (o GkeClusterResponseOutput) ToGkeClusterResponseOutputWithContext(ctx context.Context) GkeClusterResponseOutput {
	return o
}

// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`.
func (o GkeClusterResponseOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v GkeClusterResponse) string { return v.Cluster }).(pulumi.StringOutput)
}

// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
func (o GkeClusterResponseOutput) InternalIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GkeClusterResponse) bool { return v.InternalIp }).(pulumi.BoolOutput)
}

// Job represents an operation for a `Rollout`.
type JobResponse struct {
	// An advanceChildRollout Job.
	AdvanceChildRolloutJob AdvanceChildRolloutJobResponse `pulumi:"advanceChildRolloutJob"`
	// A createChildRollout Job.
	CreateChildRolloutJob CreateChildRolloutJobResponse `pulumi:"createChildRolloutJob"`
	// A deploy Job.
	DeployJob DeployJobResponse `pulumi:"deployJob"`
	// The name of the `JobRun` responsible for the most recent invocation of this Job.
	JobRun string `pulumi:"jobRun"`
	// A postdeploy Job.
	PostdeployJob PostdeployJobResponse `pulumi:"postdeployJob"`
	// A predeploy Job.
	PredeployJob PredeployJobResponse `pulumi:"predeployJob"`
	// Additional information on why the Job was skipped, if available.
	SkipMessage string `pulumi:"skipMessage"`
	// The current state of the Job.
	State string `pulumi:"state"`
	// A verify Job.
	VerifyJob VerifyJobResponse `pulumi:"verifyJob"`
}

// Job represents an operation for a `Rollout`.
type JobResponseOutput struct{ *pulumi.OutputState }

func (JobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobResponse)(nil)).Elem()
}

func (o JobResponseOutput) ToJobResponseOutput() JobResponseOutput {
	return o
}

func (o JobResponseOutput) ToJobResponseOutputWithContext(ctx context.Context) JobResponseOutput {
	return o
}

// An advanceChildRollout Job.
func (o JobResponseOutput) AdvanceChildRolloutJob() AdvanceChildRolloutJobResponseOutput {
	return o.ApplyT(func(v JobResponse) AdvanceChildRolloutJobResponse { return v.AdvanceChildRolloutJob }).(AdvanceChildRolloutJobResponseOutput)
}

// A createChildRollout Job.
func (o JobResponseOutput) CreateChildRolloutJob() CreateChildRolloutJobResponseOutput {
	return o.ApplyT(func(v JobResponse) CreateChildRolloutJobResponse { return v.CreateChildRolloutJob }).(CreateChildRolloutJobResponseOutput)
}

// A deploy Job.
func (o JobResponseOutput) DeployJob() DeployJobResponseOutput {
	return o.ApplyT(func(v JobResponse) DeployJobResponse { return v.DeployJob }).(DeployJobResponseOutput)
}

// The name of the `JobRun` responsible for the most recent invocation of this Job.
func (o JobResponseOutput) JobRun() pulumi.StringOutput {
	return o.ApplyT(func(v JobResponse) string { return v.JobRun }).(pulumi.StringOutput)
}

// A postdeploy Job.
func (o JobResponseOutput) PostdeployJob() PostdeployJobResponseOutput {
	return o.ApplyT(func(v JobResponse) PostdeployJobResponse { return v.PostdeployJob }).(PostdeployJobResponseOutput)
}

// A predeploy Job.
func (o JobResponseOutput) PredeployJob() PredeployJobResponseOutput {
	return o.ApplyT(func(v JobResponse) PredeployJobResponse { return v.PredeployJob }).(PredeployJobResponseOutput)
}

// Additional information on why the Job was skipped, if available.
func (o JobResponseOutput) SkipMessage() pulumi.StringOutput {
	return o.ApplyT(func(v JobResponse) string { return v.SkipMessage }).(pulumi.StringOutput)
}

// The current state of the Job.
func (o JobResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v JobResponse) string { return v.State }).(pulumi.StringOutput)
}

// A verify Job.
func (o JobResponseOutput) VerifyJob() VerifyJobResponseOutput {
	return o.ApplyT(func(v JobResponse) VerifyJobResponse { return v.VerifyJob }).(VerifyJobResponseOutput)
}

type JobResponseArrayOutput struct{ *pulumi.OutputState }

func (JobResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobResponse)(nil)).Elem()
}

func (o JobResponseArrayOutput) ToJobResponseArrayOutput() JobResponseArrayOutput {
	return o
}

func (o JobResponseArrayOutput) ToJobResponseArrayOutputWithContext(ctx context.Context) JobResponseArrayOutput {
	return o
}

func (o JobResponseArrayOutput) Index(i pulumi.IntInput) JobResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobResponse {
		return vs[0].([]JobResponse)[vs[1].(int)]
	}).(JobResponseOutput)
}

// KubernetesConfig contains the Kubernetes runtime configuration.
type KubernetesConfig struct {
	// Kubernetes Gateway API service mesh configuration.
	GatewayServiceMesh *GatewayServiceMesh `pulumi:"gatewayServiceMesh"`
	// Kubernetes Service networking configuration.
	ServiceNetworking *ServiceNetworking `pulumi:"serviceNetworking"`
}

// KubernetesConfigInput is an input type that accepts KubernetesConfigArgs and KubernetesConfigOutput values.
// You can construct a concrete instance of `KubernetesConfigInput` via:
//
//	KubernetesConfigArgs{...}
type KubernetesConfigInput interface {
	pulumi.Input

	ToKubernetesConfigOutput() KubernetesConfigOutput
	ToKubernetesConfigOutputWithContext(context.Context) KubernetesConfigOutput
}

// KubernetesConfig contains the Kubernetes runtime configuration.
type KubernetesConfigArgs struct {
	// Kubernetes Gateway API service mesh configuration.
	GatewayServiceMesh GatewayServiceMeshPtrInput `pulumi:"gatewayServiceMesh"`
	// Kubernetes Service networking configuration.
	ServiceNetworking ServiceNetworkingPtrInput `pulumi:"serviceNetworking"`
}

func (KubernetesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesConfig)(nil)).Elem()
}

func (i KubernetesConfigArgs) ToKubernetesConfigOutput() KubernetesConfigOutput {
	return i.ToKubernetesConfigOutputWithContext(context.Background())
}

func (i KubernetesConfigArgs) ToKubernetesConfigOutputWithContext(ctx context.Context) KubernetesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesConfigOutput)
}

func (i KubernetesConfigArgs) ToKubernetesConfigPtrOutput() KubernetesConfigPtrOutput {
	return i.ToKubernetesConfigPtrOutputWithContext(context.Background())
}

func (i KubernetesConfigArgs) ToKubernetesConfigPtrOutputWithContext(ctx context.Context) KubernetesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesConfigOutput).ToKubernetesConfigPtrOutputWithContext(ctx)
}

// KubernetesConfigPtrInput is an input type that accepts KubernetesConfigArgs, KubernetesConfigPtr and KubernetesConfigPtrOutput values.
// You can construct a concrete instance of `KubernetesConfigPtrInput` via:
//
//	        KubernetesConfigArgs{...}
//
//	or:
//
//	        nil
type KubernetesConfigPtrInput interface {
	pulumi.Input

	ToKubernetesConfigPtrOutput() KubernetesConfigPtrOutput
	ToKubernetesConfigPtrOutputWithContext(context.Context) KubernetesConfigPtrOutput
}

type kubernetesConfigPtrType KubernetesConfigArgs

func KubernetesConfigPtr(v *KubernetesConfigArgs) KubernetesConfigPtrInput {
	return (*kubernetesConfigPtrType)(v)
}

func (*kubernetesConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesConfig)(nil)).Elem()
}

func (i *kubernetesConfigPtrType) ToKubernetesConfigPtrOutput() KubernetesConfigPtrOutput {
	return i.ToKubernetesConfigPtrOutputWithContext(context.Background())
}

func (i *kubernetesConfigPtrType) ToKubernetesConfigPtrOutputWithContext(ctx context.Context) KubernetesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesConfigPtrOutput)
}

// KubernetesConfig contains the Kubernetes runtime configuration.
type KubernetesConfigOutput struct{ *pulumi.OutputState }

func (KubernetesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesConfig)(nil)).Elem()
}

func (o KubernetesConfigOutput) ToKubernetesConfigOutput() KubernetesConfigOutput {
	return o
}

func (o KubernetesConfigOutput) ToKubernetesConfigOutputWithContext(ctx context.Context) KubernetesConfigOutput {
	return o
}

func (o KubernetesConfigOutput) ToKubernetesConfigPtrOutput() KubernetesConfigPtrOutput {
	return o.ToKubernetesConfigPtrOutputWithContext(context.Background())
}

func (o KubernetesConfigOutput) ToKubernetesConfigPtrOutputWithContext(ctx context.Context) KubernetesConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesConfig) *KubernetesConfig {
		return &v
	}).(KubernetesConfigPtrOutput)
}

// Kubernetes Gateway API service mesh configuration.
func (o KubernetesConfigOutput) GatewayServiceMesh() GatewayServiceMeshPtrOutput {
	return o.ApplyT(func(v KubernetesConfig) *GatewayServiceMesh { return v.GatewayServiceMesh }).(GatewayServiceMeshPtrOutput)
}

// Kubernetes Service networking configuration.
func (o KubernetesConfigOutput) ServiceNetworking() ServiceNetworkingPtrOutput {
	return o.ApplyT(func(v KubernetesConfig) *ServiceNetworking { return v.ServiceNetworking }).(ServiceNetworkingPtrOutput)
}

type KubernetesConfigPtrOutput struct{ *pulumi.OutputState }

func (KubernetesConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesConfig)(nil)).Elem()
}

func (o KubernetesConfigPtrOutput) ToKubernetesConfigPtrOutput() KubernetesConfigPtrOutput {
	return o
}

func (o KubernetesConfigPtrOutput) ToKubernetesConfigPtrOutputWithContext(ctx context.Context) KubernetesConfigPtrOutput {
	return o
}

func (o KubernetesConfigPtrOutput) Elem() KubernetesConfigOutput {
	return o.ApplyT(func(v *KubernetesConfig) KubernetesConfig {
		if v != nil {
			return *v
		}
		var ret KubernetesConfig
		return ret
	}).(KubernetesConfigOutput)
}

// Kubernetes Gateway API service mesh configuration.
func (o KubernetesConfigPtrOutput) GatewayServiceMesh() GatewayServiceMeshPtrOutput {
	return o.ApplyT(func(v *KubernetesConfig) *GatewayServiceMesh {
		if v == nil {
			return nil
		}
		return v.GatewayServiceMesh
	}).(GatewayServiceMeshPtrOutput)
}

// Kubernetes Service networking configuration.
func (o KubernetesConfigPtrOutput) ServiceNetworking() ServiceNetworkingPtrOutput {
	return o.ApplyT(func(v *KubernetesConfig) *ServiceNetworking {
		if v == nil {
			return nil
		}
		return v.ServiceNetworking
	}).(ServiceNetworkingPtrOutput)
}

// KubernetesConfig contains the Kubernetes runtime configuration.
type KubernetesConfigResponse struct {
	// Kubernetes Gateway API service mesh configuration.
	GatewayServiceMesh GatewayServiceMeshResponse `pulumi:"gatewayServiceMesh"`
	// Kubernetes Service networking configuration.
	ServiceNetworking ServiceNetworkingResponse `pulumi:"serviceNetworking"`
}

// KubernetesConfig contains the Kubernetes runtime configuration.
type KubernetesConfigResponseOutput struct{ *pulumi.OutputState }

func (KubernetesConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesConfigResponse)(nil)).Elem()
}

func (o KubernetesConfigResponseOutput) ToKubernetesConfigResponseOutput() KubernetesConfigResponseOutput {
	return o
}

func (o KubernetesConfigResponseOutput) ToKubernetesConfigResponseOutputWithContext(ctx context.Context) KubernetesConfigResponseOutput {
	return o
}

// Kubernetes Gateway API service mesh configuration.
func (o KubernetesConfigResponseOutput) GatewayServiceMesh() GatewayServiceMeshResponseOutput {
	return o.ApplyT(func(v KubernetesConfigResponse) GatewayServiceMeshResponse { return v.GatewayServiceMesh }).(GatewayServiceMeshResponseOutput)
}

// Kubernetes Service networking configuration.
func (o KubernetesConfigResponseOutput) ServiceNetworking() ServiceNetworkingResponseOutput {
	return o.ApplyT(func(v KubernetesConfigResponse) ServiceNetworkingResponse { return v.ServiceNetworking }).(ServiceNetworkingResponseOutput)
}

// Metadata includes information associated with a `Rollout`.
type MetadataResponse struct {
	// AutomationRolloutMetadata contains the information about the interactions between Automation service and this rollout.
	Automation AutomationRolloutMetadataResponse `pulumi:"automation"`
	// The name of the Cloud Run Service that is associated with a `Rollout`.
	CloudRun CloudRunMetadataResponse `pulumi:"cloudRun"`
}

// Metadata includes information associated with a `Rollout`.
type MetadataResponseOutput struct{ *pulumi.OutputState }

func (MetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataResponse)(nil)).Elem()
}

func (o MetadataResponseOutput) ToMetadataResponseOutput() MetadataResponseOutput {
	return o
}

func (o MetadataResponseOutput) ToMetadataResponseOutputWithContext(ctx context.Context) MetadataResponseOutput {
	return o
}

// AutomationRolloutMetadata contains the information about the interactions between Automation service and this rollout.
func (o MetadataResponseOutput) Automation() AutomationRolloutMetadataResponseOutput {
	return o.ApplyT(func(v MetadataResponse) AutomationRolloutMetadataResponse { return v.Automation }).(AutomationRolloutMetadataResponseOutput)
}

// The name of the Cloud Run Service that is associated with a `Rollout`.
func (o MetadataResponseOutput) CloudRun() CloudRunMetadataResponseOutput {
	return o.ApplyT(func(v MetadataResponse) CloudRunMetadataResponse { return v.CloudRun }).(CloudRunMetadataResponseOutput)
}

// Information specifying a multiTarget.
type MultiTarget struct {
	// The target_ids of this multiTarget.
	TargetIds []string `pulumi:"targetIds"`
}

// MultiTargetInput is an input type that accepts MultiTargetArgs and MultiTargetOutput values.
// You can construct a concrete instance of `MultiTargetInput` via:
//
//	MultiTargetArgs{...}
type MultiTargetInput interface {
	pulumi.Input

	ToMultiTargetOutput() MultiTargetOutput
	ToMultiTargetOutputWithContext(context.Context) MultiTargetOutput
}

// Information specifying a multiTarget.
type MultiTargetArgs struct {
	// The target_ids of this multiTarget.
	TargetIds pulumi.StringArrayInput `pulumi:"targetIds"`
}

func (MultiTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiTarget)(nil)).Elem()
}

func (i MultiTargetArgs) ToMultiTargetOutput() MultiTargetOutput {
	return i.ToMultiTargetOutputWithContext(context.Background())
}

func (i MultiTargetArgs) ToMultiTargetOutputWithContext(ctx context.Context) MultiTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiTargetOutput)
}

func (i MultiTargetArgs) ToMultiTargetPtrOutput() MultiTargetPtrOutput {
	return i.ToMultiTargetPtrOutputWithContext(context.Background())
}

func (i MultiTargetArgs) ToMultiTargetPtrOutputWithContext(ctx context.Context) MultiTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiTargetOutput).ToMultiTargetPtrOutputWithContext(ctx)
}

// MultiTargetPtrInput is an input type that accepts MultiTargetArgs, MultiTargetPtr and MultiTargetPtrOutput values.
// You can construct a concrete instance of `MultiTargetPtrInput` via:
//
//	        MultiTargetArgs{...}
//
//	or:
//
//	        nil
type MultiTargetPtrInput interface {
	pulumi.Input

	ToMultiTargetPtrOutput() MultiTargetPtrOutput
	ToMultiTargetPtrOutputWithContext(context.Context) MultiTargetPtrOutput
}

type multiTargetPtrType MultiTargetArgs

func MultiTargetPtr(v *MultiTargetArgs) MultiTargetPtrInput {
	return (*multiTargetPtrType)(v)
}

func (*multiTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiTarget)(nil)).Elem()
}

func (i *multiTargetPtrType) ToMultiTargetPtrOutput() MultiTargetPtrOutput {
	return i.ToMultiTargetPtrOutputWithContext(context.Background())
}

func (i *multiTargetPtrType) ToMultiTargetPtrOutputWithContext(ctx context.Context) MultiTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiTargetPtrOutput)
}

// Information specifying a multiTarget.
type MultiTargetOutput struct{ *pulumi.OutputState }

func (MultiTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiTarget)(nil)).Elem()
}

func (o MultiTargetOutput) ToMultiTargetOutput() MultiTargetOutput {
	return o
}

func (o MultiTargetOutput) ToMultiTargetOutputWithContext(ctx context.Context) MultiTargetOutput {
	return o
}

func (o MultiTargetOutput) ToMultiTargetPtrOutput() MultiTargetPtrOutput {
	return o.ToMultiTargetPtrOutputWithContext(context.Background())
}

func (o MultiTargetOutput) ToMultiTargetPtrOutputWithContext(ctx context.Context) MultiTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiTarget) *MultiTarget {
		return &v
	}).(MultiTargetPtrOutput)
}

// The target_ids of this multiTarget.
func (o MultiTargetOutput) TargetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MultiTarget) []string { return v.TargetIds }).(pulumi.StringArrayOutput)
}

type MultiTargetPtrOutput struct{ *pulumi.OutputState }

func (MultiTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiTarget)(nil)).Elem()
}

func (o MultiTargetPtrOutput) ToMultiTargetPtrOutput() MultiTargetPtrOutput {
	return o
}

func (o MultiTargetPtrOutput) ToMultiTargetPtrOutputWithContext(ctx context.Context) MultiTargetPtrOutput {
	return o
}

func (o MultiTargetPtrOutput) Elem() MultiTargetOutput {
	return o.ApplyT(func(v *MultiTarget) MultiTarget {
		if v != nil {
			return *v
		}
		var ret MultiTarget
		return ret
	}).(MultiTargetOutput)
}

// The target_ids of this multiTarget.
func (o MultiTargetPtrOutput) TargetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MultiTarget) []string {
		if v == nil {
			return nil
		}
		return v.TargetIds
	}).(pulumi.StringArrayOutput)
}

// Information specifying a multiTarget.
type MultiTargetResponse struct {
	// The target_ids of this multiTarget.
	TargetIds []string `pulumi:"targetIds"`
}

// Information specifying a multiTarget.
type MultiTargetResponseOutput struct{ *pulumi.OutputState }

func (MultiTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiTargetResponse)(nil)).Elem()
}

func (o MultiTargetResponseOutput) ToMultiTargetResponseOutput() MultiTargetResponseOutput {
	return o
}

func (o MultiTargetResponseOutput) ToMultiTargetResponseOutputWithContext(ctx context.Context) MultiTargetResponseOutput {
	return o
}

// The target_ids of this multiTarget.
func (o MultiTargetResponseOutput) TargetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MultiTargetResponse) []string { return v.TargetIds }).(pulumi.StringArrayOutput)
}

// Contains the paths to the artifacts, relative to the URI, for a phase.
type PhaseArtifactResponse struct {
	// File path of the directory of rendered job manifests relative to the URI. This is only set if it is applicable.
	JobManifestsPath string `pulumi:"jobManifestsPath"`
	// File path of the rendered manifest relative to the URI.
	ManifestPath string `pulumi:"manifestPath"`
	// File path of the resolved Skaffold configuration relative to the URI.
	SkaffoldConfigPath string `pulumi:"skaffoldConfigPath"`
}

// Contains the paths to the artifacts, relative to the URI, for a phase.
type PhaseArtifactResponseOutput struct{ *pulumi.OutputState }

func (PhaseArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhaseArtifactResponse)(nil)).Elem()
}

func (o PhaseArtifactResponseOutput) ToPhaseArtifactResponseOutput() PhaseArtifactResponseOutput {
	return o
}

func (o PhaseArtifactResponseOutput) ToPhaseArtifactResponseOutputWithContext(ctx context.Context) PhaseArtifactResponseOutput {
	return o
}

// File path of the directory of rendered job manifests relative to the URI. This is only set if it is applicable.
func (o PhaseArtifactResponseOutput) JobManifestsPath() pulumi.StringOutput {
	return o.ApplyT(func(v PhaseArtifactResponse) string { return v.JobManifestsPath }).(pulumi.StringOutput)
}

// File path of the rendered manifest relative to the URI.
func (o PhaseArtifactResponseOutput) ManifestPath() pulumi.StringOutput {
	return o.ApplyT(func(v PhaseArtifactResponse) string { return v.ManifestPath }).(pulumi.StringOutput)
}

// File path of the resolved Skaffold configuration relative to the URI.
func (o PhaseArtifactResponseOutput) SkaffoldConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v PhaseArtifactResponse) string { return v.SkaffoldConfigPath }).(pulumi.StringOutput)
}

type PhaseArtifactResponseMapOutput struct{ *pulumi.OutputState }

func (PhaseArtifactResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PhaseArtifactResponse)(nil)).Elem()
}

func (o PhaseArtifactResponseMapOutput) ToPhaseArtifactResponseMapOutput() PhaseArtifactResponseMapOutput {
	return o
}

func (o PhaseArtifactResponseMapOutput) ToPhaseArtifactResponseMapOutputWithContext(ctx context.Context) PhaseArtifactResponseMapOutput {
	return o
}

func (o PhaseArtifactResponseMapOutput) MapIndex(k pulumi.StringInput) PhaseArtifactResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PhaseArtifactResponse {
		return vs[0].(map[string]PhaseArtifactResponse)[vs[1].(string)]
	}).(PhaseArtifactResponseOutput)
}

// PhaseConfig represents the configuration for a phase in the custom canary deployment.
type PhaseConfig struct {
	// Percentage deployment for the phase.
	Percentage int `pulumi:"percentage"`
	// The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	PhaseId string `pulumi:"phaseId"`
	// Optional. Configuration for the postdeploy job of this phase. If this is not configured, there will be no postdeploy job for this phase.
	Postdeploy *Postdeploy `pulumi:"postdeploy"`
	// Optional. Configuration for the predeploy job of this phase. If this is not configured, there will be no predeploy job for this phase.
	Predeploy *Predeploy `pulumi:"predeploy"`
	// Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.
	Profiles []string `pulumi:"profiles"`
	// Whether to run verify tests after the deployment.
	Verify *bool `pulumi:"verify"`
}

// PhaseConfigInput is an input type that accepts PhaseConfigArgs and PhaseConfigOutput values.
// You can construct a concrete instance of `PhaseConfigInput` via:
//
//	PhaseConfigArgs{...}
type PhaseConfigInput interface {
	pulumi.Input

	ToPhaseConfigOutput() PhaseConfigOutput
	ToPhaseConfigOutputWithContext(context.Context) PhaseConfigOutput
}

// PhaseConfig represents the configuration for a phase in the custom canary deployment.
type PhaseConfigArgs struct {
	// Percentage deployment for the phase.
	Percentage pulumi.IntInput `pulumi:"percentage"`
	// The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	PhaseId pulumi.StringInput `pulumi:"phaseId"`
	// Optional. Configuration for the postdeploy job of this phase. If this is not configured, there will be no postdeploy job for this phase.
	Postdeploy PostdeployPtrInput `pulumi:"postdeploy"`
	// Optional. Configuration for the predeploy job of this phase. If this is not configured, there will be no predeploy job for this phase.
	Predeploy PredeployPtrInput `pulumi:"predeploy"`
	// Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.
	Profiles pulumi.StringArrayInput `pulumi:"profiles"`
	// Whether to run verify tests after the deployment.
	Verify pulumi.BoolPtrInput `pulumi:"verify"`
}

func (PhaseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhaseConfig)(nil)).Elem()
}

func (i PhaseConfigArgs) ToPhaseConfigOutput() PhaseConfigOutput {
	return i.ToPhaseConfigOutputWithContext(context.Background())
}

func (i PhaseConfigArgs) ToPhaseConfigOutputWithContext(ctx context.Context) PhaseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhaseConfigOutput)
}

// PhaseConfigArrayInput is an input type that accepts PhaseConfigArray and PhaseConfigArrayOutput values.
// You can construct a concrete instance of `PhaseConfigArrayInput` via:
//
//	PhaseConfigArray{ PhaseConfigArgs{...} }
type PhaseConfigArrayInput interface {
	pulumi.Input

	ToPhaseConfigArrayOutput() PhaseConfigArrayOutput
	ToPhaseConfigArrayOutputWithContext(context.Context) PhaseConfigArrayOutput
}

type PhaseConfigArray []PhaseConfigInput

func (PhaseConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhaseConfig)(nil)).Elem()
}

func (i PhaseConfigArray) ToPhaseConfigArrayOutput() PhaseConfigArrayOutput {
	return i.ToPhaseConfigArrayOutputWithContext(context.Background())
}

func (i PhaseConfigArray) ToPhaseConfigArrayOutputWithContext(ctx context.Context) PhaseConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhaseConfigArrayOutput)
}

// PhaseConfig represents the configuration for a phase in the custom canary deployment.
type PhaseConfigOutput struct{ *pulumi.OutputState }

func (PhaseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhaseConfig)(nil)).Elem()
}

func (o PhaseConfigOutput) ToPhaseConfigOutput() PhaseConfigOutput {
	return o
}

func (o PhaseConfigOutput) ToPhaseConfigOutputWithContext(ctx context.Context) PhaseConfigOutput {
	return o
}

// Percentage deployment for the phase.
func (o PhaseConfigOutput) Percentage() pulumi.IntOutput {
	return o.ApplyT(func(v PhaseConfig) int { return v.Percentage }).(pulumi.IntOutput)
}

// The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o PhaseConfigOutput) PhaseId() pulumi.StringOutput {
	return o.ApplyT(func(v PhaseConfig) string { return v.PhaseId }).(pulumi.StringOutput)
}

// Optional. Configuration for the postdeploy job of this phase. If this is not configured, there will be no postdeploy job for this phase.
func (o PhaseConfigOutput) Postdeploy() PostdeployPtrOutput {
	return o.ApplyT(func(v PhaseConfig) *Postdeploy { return v.Postdeploy }).(PostdeployPtrOutput)
}

// Optional. Configuration for the predeploy job of this phase. If this is not configured, there will be no predeploy job for this phase.
func (o PhaseConfigOutput) Predeploy() PredeployPtrOutput {
	return o.ApplyT(func(v PhaseConfig) *Predeploy { return v.Predeploy }).(PredeployPtrOutput)
}

// Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.
func (o PhaseConfigOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PhaseConfig) []string { return v.Profiles }).(pulumi.StringArrayOutput)
}

// Whether to run verify tests after the deployment.
func (o PhaseConfigOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PhaseConfig) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

type PhaseConfigArrayOutput struct{ *pulumi.OutputState }

func (PhaseConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhaseConfig)(nil)).Elem()
}

func (o PhaseConfigArrayOutput) ToPhaseConfigArrayOutput() PhaseConfigArrayOutput {
	return o
}

func (o PhaseConfigArrayOutput) ToPhaseConfigArrayOutputWithContext(ctx context.Context) PhaseConfigArrayOutput {
	return o
}

func (o PhaseConfigArrayOutput) Index(i pulumi.IntInput) PhaseConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PhaseConfig {
		return vs[0].([]PhaseConfig)[vs[1].(int)]
	}).(PhaseConfigOutput)
}

// PhaseConfig represents the configuration for a phase in the custom canary deployment.
type PhaseConfigResponse struct {
	// Percentage deployment for the phase.
	Percentage int `pulumi:"percentage"`
	// The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	PhaseId string `pulumi:"phaseId"`
	// Optional. Configuration for the postdeploy job of this phase. If this is not configured, there will be no postdeploy job for this phase.
	Postdeploy PostdeployResponse `pulumi:"postdeploy"`
	// Optional. Configuration for the predeploy job of this phase. If this is not configured, there will be no predeploy job for this phase.
	Predeploy PredeployResponse `pulumi:"predeploy"`
	// Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.
	Profiles []string `pulumi:"profiles"`
	// Whether to run verify tests after the deployment.
	Verify bool `pulumi:"verify"`
}

// PhaseConfig represents the configuration for a phase in the custom canary deployment.
type PhaseConfigResponseOutput struct{ *pulumi.OutputState }

func (PhaseConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhaseConfigResponse)(nil)).Elem()
}

func (o PhaseConfigResponseOutput) ToPhaseConfigResponseOutput() PhaseConfigResponseOutput {
	return o
}

func (o PhaseConfigResponseOutput) ToPhaseConfigResponseOutputWithContext(ctx context.Context) PhaseConfigResponseOutput {
	return o
}

// Percentage deployment for the phase.
func (o PhaseConfigResponseOutput) Percentage() pulumi.IntOutput {
	return o.ApplyT(func(v PhaseConfigResponse) int { return v.Percentage }).(pulumi.IntOutput)
}

// The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o PhaseConfigResponseOutput) PhaseId() pulumi.StringOutput {
	return o.ApplyT(func(v PhaseConfigResponse) string { return v.PhaseId }).(pulumi.StringOutput)
}

// Optional. Configuration for the postdeploy job of this phase. If this is not configured, there will be no postdeploy job for this phase.
func (o PhaseConfigResponseOutput) Postdeploy() PostdeployResponseOutput {
	return o.ApplyT(func(v PhaseConfigResponse) PostdeployResponse { return v.Postdeploy }).(PostdeployResponseOutput)
}

// Optional. Configuration for the predeploy job of this phase. If this is not configured, there will be no predeploy job for this phase.
func (o PhaseConfigResponseOutput) Predeploy() PredeployResponseOutput {
	return o.ApplyT(func(v PhaseConfigResponse) PredeployResponse { return v.Predeploy }).(PredeployResponseOutput)
}

// Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.
func (o PhaseConfigResponseOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PhaseConfigResponse) []string { return v.Profiles }).(pulumi.StringArrayOutput)
}

// Whether to run verify tests after the deployment.
func (o PhaseConfigResponseOutput) Verify() pulumi.BoolOutput {
	return o.ApplyT(func(v PhaseConfigResponse) bool { return v.Verify }).(pulumi.BoolOutput)
}

type PhaseConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (PhaseConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhaseConfigResponse)(nil)).Elem()
}

func (o PhaseConfigResponseArrayOutput) ToPhaseConfigResponseArrayOutput() PhaseConfigResponseArrayOutput {
	return o
}

func (o PhaseConfigResponseArrayOutput) ToPhaseConfigResponseArrayOutputWithContext(ctx context.Context) PhaseConfigResponseArrayOutput {
	return o
}

func (o PhaseConfigResponseArrayOutput) Index(i pulumi.IntInput) PhaseConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PhaseConfigResponse {
		return vs[0].([]PhaseConfigResponse)[vs[1].(int)]
	}).(PhaseConfigResponseOutput)
}

// Phase represents a collection of jobs that are logically grouped together for a `Rollout`.
type PhaseResponse struct {
	// ChildRollout job composition.
	ChildRolloutJobs ChildRolloutJobsResponse `pulumi:"childRolloutJobs"`
	// Deployment job composition.
	DeploymentJobs DeploymentJobsResponse `pulumi:"deploymentJobs"`
	// Additional information on why the Phase was skipped, if available.
	SkipMessage string `pulumi:"skipMessage"`
	// Current state of the Phase.
	State string `pulumi:"state"`
}

// Phase represents a collection of jobs that are logically grouped together for a `Rollout`.
type PhaseResponseOutput struct{ *pulumi.OutputState }

func (PhaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhaseResponse)(nil)).Elem()
}

func (o PhaseResponseOutput) ToPhaseResponseOutput() PhaseResponseOutput {
	return o
}

func (o PhaseResponseOutput) ToPhaseResponseOutputWithContext(ctx context.Context) PhaseResponseOutput {
	return o
}

// ChildRollout job composition.
func (o PhaseResponseOutput) ChildRolloutJobs() ChildRolloutJobsResponseOutput {
	return o.ApplyT(func(v PhaseResponse) ChildRolloutJobsResponse { return v.ChildRolloutJobs }).(ChildRolloutJobsResponseOutput)
}

// Deployment job composition.
func (o PhaseResponseOutput) DeploymentJobs() DeploymentJobsResponseOutput {
	return o.ApplyT(func(v PhaseResponse) DeploymentJobsResponse { return v.DeploymentJobs }).(DeploymentJobsResponseOutput)
}

// Additional information on why the Phase was skipped, if available.
func (o PhaseResponseOutput) SkipMessage() pulumi.StringOutput {
	return o.ApplyT(func(v PhaseResponse) string { return v.SkipMessage }).(pulumi.StringOutput)
}

// Current state of the Phase.
func (o PhaseResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v PhaseResponse) string { return v.State }).(pulumi.StringOutput)
}

type PhaseResponseArrayOutput struct{ *pulumi.OutputState }

func (PhaseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhaseResponse)(nil)).Elem()
}

func (o PhaseResponseArrayOutput) ToPhaseResponseArrayOutput() PhaseResponseArrayOutput {
	return o
}

func (o PhaseResponseArrayOutput) ToPhaseResponseArrayOutputWithContext(ctx context.Context) PhaseResponseArrayOutput {
	return o
}

func (o PhaseResponseArrayOutput) Index(i pulumi.IntInput) PhaseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PhaseResponse {
		return vs[0].([]PhaseResponse)[vs[1].(int)]
	}).(PhaseResponseOutput)
}

// PipelineCondition contains all conditions relevant to a Delivery Pipeline.
type PipelineConditionResponse struct {
	// Details around the Pipeline's overall status.
	PipelineReadyCondition PipelineReadyConditionResponse `pulumi:"pipelineReadyCondition"`
	// Details around targets enumerated in the pipeline.
	TargetsPresentCondition TargetsPresentConditionResponse `pulumi:"targetsPresentCondition"`
	// Details on the whether the targets enumerated in the pipeline are of the same type.
	TargetsTypeCondition TargetsTypeConditionResponse `pulumi:"targetsTypeCondition"`
}

// PipelineCondition contains all conditions relevant to a Delivery Pipeline.
type PipelineConditionResponseOutput struct{ *pulumi.OutputState }

func (PipelineConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineConditionResponse)(nil)).Elem()
}

func (o PipelineConditionResponseOutput) ToPipelineConditionResponseOutput() PipelineConditionResponseOutput {
	return o
}

func (o PipelineConditionResponseOutput) ToPipelineConditionResponseOutputWithContext(ctx context.Context) PipelineConditionResponseOutput {
	return o
}

// Details around the Pipeline's overall status.
func (o PipelineConditionResponseOutput) PipelineReadyCondition() PipelineReadyConditionResponseOutput {
	return o.ApplyT(func(v PipelineConditionResponse) PipelineReadyConditionResponse { return v.PipelineReadyCondition }).(PipelineReadyConditionResponseOutput)
}

// Details around targets enumerated in the pipeline.
func (o PipelineConditionResponseOutput) TargetsPresentCondition() TargetsPresentConditionResponseOutput {
	return o.ApplyT(func(v PipelineConditionResponse) TargetsPresentConditionResponse { return v.TargetsPresentCondition }).(TargetsPresentConditionResponseOutput)
}

// Details on the whether the targets enumerated in the pipeline are of the same type.
func (o PipelineConditionResponseOutput) TargetsTypeCondition() TargetsTypeConditionResponseOutput {
	return o.ApplyT(func(v PipelineConditionResponse) TargetsTypeConditionResponse { return v.TargetsTypeCondition }).(TargetsTypeConditionResponseOutput)
}

// PipelineReadyCondition contains information around the status of the Pipeline.
type PipelineReadyConditionResponse struct {
	// True if the Pipeline is in a valid state. Otherwise at least one condition in `PipelineCondition` is in an invalid state. Iterate over those conditions and see which condition(s) has status = false to find out what is wrong with the Pipeline.
	Status bool `pulumi:"status"`
	// Last time the condition was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// PipelineReadyCondition contains information around the status of the Pipeline.
type PipelineReadyConditionResponseOutput struct{ *pulumi.OutputState }

func (PipelineReadyConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReadyConditionResponse)(nil)).Elem()
}

func (o PipelineReadyConditionResponseOutput) ToPipelineReadyConditionResponseOutput() PipelineReadyConditionResponseOutput {
	return o
}

func (o PipelineReadyConditionResponseOutput) ToPipelineReadyConditionResponseOutputWithContext(ctx context.Context) PipelineReadyConditionResponseOutput {
	return o
}

// True if the Pipeline is in a valid state. Otherwise at least one condition in `PipelineCondition` is in an invalid state. Iterate over those conditions and see which condition(s) has status = false to find out what is wrong with the Pipeline.
func (o PipelineReadyConditionResponseOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v PipelineReadyConditionResponse) bool { return v.Status }).(pulumi.BoolOutput)
}

// Last time the condition was updated.
func (o PipelineReadyConditionResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReadyConditionResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Postdeploy contains the postdeploy job configuration information.
type Postdeploy struct {
	// Optional. A sequence of Skaffold custom actions to invoke during execution of the postdeploy job.
	Actions []string `pulumi:"actions"`
}

// PostdeployInput is an input type that accepts PostdeployArgs and PostdeployOutput values.
// You can construct a concrete instance of `PostdeployInput` via:
//
//	PostdeployArgs{...}
type PostdeployInput interface {
	pulumi.Input

	ToPostdeployOutput() PostdeployOutput
	ToPostdeployOutputWithContext(context.Context) PostdeployOutput
}

// Postdeploy contains the postdeploy job configuration information.
type PostdeployArgs struct {
	// Optional. A sequence of Skaffold custom actions to invoke during execution of the postdeploy job.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
}

func (PostdeployArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Postdeploy)(nil)).Elem()
}

func (i PostdeployArgs) ToPostdeployOutput() PostdeployOutput {
	return i.ToPostdeployOutputWithContext(context.Background())
}

func (i PostdeployArgs) ToPostdeployOutputWithContext(ctx context.Context) PostdeployOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostdeployOutput)
}

func (i PostdeployArgs) ToPostdeployPtrOutput() PostdeployPtrOutput {
	return i.ToPostdeployPtrOutputWithContext(context.Background())
}

func (i PostdeployArgs) ToPostdeployPtrOutputWithContext(ctx context.Context) PostdeployPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostdeployOutput).ToPostdeployPtrOutputWithContext(ctx)
}

// PostdeployPtrInput is an input type that accepts PostdeployArgs, PostdeployPtr and PostdeployPtrOutput values.
// You can construct a concrete instance of `PostdeployPtrInput` via:
//
//	        PostdeployArgs{...}
//
//	or:
//
//	        nil
type PostdeployPtrInput interface {
	pulumi.Input

	ToPostdeployPtrOutput() PostdeployPtrOutput
	ToPostdeployPtrOutputWithContext(context.Context) PostdeployPtrOutput
}

type postdeployPtrType PostdeployArgs

func PostdeployPtr(v *PostdeployArgs) PostdeployPtrInput {
	return (*postdeployPtrType)(v)
}

func (*postdeployPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Postdeploy)(nil)).Elem()
}

func (i *postdeployPtrType) ToPostdeployPtrOutput() PostdeployPtrOutput {
	return i.ToPostdeployPtrOutputWithContext(context.Background())
}

func (i *postdeployPtrType) ToPostdeployPtrOutputWithContext(ctx context.Context) PostdeployPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostdeployPtrOutput)
}

// Postdeploy contains the postdeploy job configuration information.
type PostdeployOutput struct{ *pulumi.OutputState }

func (PostdeployOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Postdeploy)(nil)).Elem()
}

func (o PostdeployOutput) ToPostdeployOutput() PostdeployOutput {
	return o
}

func (o PostdeployOutput) ToPostdeployOutputWithContext(ctx context.Context) PostdeployOutput {
	return o
}

func (o PostdeployOutput) ToPostdeployPtrOutput() PostdeployPtrOutput {
	return o.ToPostdeployPtrOutputWithContext(context.Background())
}

func (o PostdeployOutput) ToPostdeployPtrOutputWithContext(ctx context.Context) PostdeployPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Postdeploy) *Postdeploy {
		return &v
	}).(PostdeployPtrOutput)
}

// Optional. A sequence of Skaffold custom actions to invoke during execution of the postdeploy job.
func (o PostdeployOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Postdeploy) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

type PostdeployPtrOutput struct{ *pulumi.OutputState }

func (PostdeployPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Postdeploy)(nil)).Elem()
}

func (o PostdeployPtrOutput) ToPostdeployPtrOutput() PostdeployPtrOutput {
	return o
}

func (o PostdeployPtrOutput) ToPostdeployPtrOutputWithContext(ctx context.Context) PostdeployPtrOutput {
	return o
}

func (o PostdeployPtrOutput) Elem() PostdeployOutput {
	return o.ApplyT(func(v *Postdeploy) Postdeploy {
		if v != nil {
			return *v
		}
		var ret Postdeploy
		return ret
	}).(PostdeployOutput)
}

// Optional. A sequence of Skaffold custom actions to invoke during execution of the postdeploy job.
func (o PostdeployPtrOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Postdeploy) []string {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(pulumi.StringArrayOutput)
}

// A postdeploy Job.
type PostdeployJobResponse struct {
	// The custom actions that the postdeploy Job executes.
	Actions []string `pulumi:"actions"`
}

// A postdeploy Job.
type PostdeployJobResponseOutput struct{ *pulumi.OutputState }

func (PostdeployJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostdeployJobResponse)(nil)).Elem()
}

func (o PostdeployJobResponseOutput) ToPostdeployJobResponseOutput() PostdeployJobResponseOutput {
	return o
}

func (o PostdeployJobResponseOutput) ToPostdeployJobResponseOutputWithContext(ctx context.Context) PostdeployJobResponseOutput {
	return o
}

// The custom actions that the postdeploy Job executes.
func (o PostdeployJobResponseOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostdeployJobResponse) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Postdeploy contains the postdeploy job configuration information.
type PostdeployResponse struct {
	// Optional. A sequence of Skaffold custom actions to invoke during execution of the postdeploy job.
	Actions []string `pulumi:"actions"`
}

// Postdeploy contains the postdeploy job configuration information.
type PostdeployResponseOutput struct{ *pulumi.OutputState }

func (PostdeployResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostdeployResponse)(nil)).Elem()
}

func (o PostdeployResponseOutput) ToPostdeployResponseOutput() PostdeployResponseOutput {
	return o
}

func (o PostdeployResponseOutput) ToPostdeployResponseOutputWithContext(ctx context.Context) PostdeployResponseOutput {
	return o
}

// Optional. A sequence of Skaffold custom actions to invoke during execution of the postdeploy job.
func (o PostdeployResponseOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PostdeployResponse) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Predeploy contains the predeploy job configuration information.
type Predeploy struct {
	// Optional. A sequence of Skaffold custom actions to invoke during execution of the predeploy job.
	Actions []string `pulumi:"actions"`
}

// PredeployInput is an input type that accepts PredeployArgs and PredeployOutput values.
// You can construct a concrete instance of `PredeployInput` via:
//
//	PredeployArgs{...}
type PredeployInput interface {
	pulumi.Input

	ToPredeployOutput() PredeployOutput
	ToPredeployOutputWithContext(context.Context) PredeployOutput
}

// Predeploy contains the predeploy job configuration information.
type PredeployArgs struct {
	// Optional. A sequence of Skaffold custom actions to invoke during execution of the predeploy job.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
}

func (PredeployArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Predeploy)(nil)).Elem()
}

func (i PredeployArgs) ToPredeployOutput() PredeployOutput {
	return i.ToPredeployOutputWithContext(context.Background())
}

func (i PredeployArgs) ToPredeployOutputWithContext(ctx context.Context) PredeployOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredeployOutput)
}

func (i PredeployArgs) ToPredeployPtrOutput() PredeployPtrOutput {
	return i.ToPredeployPtrOutputWithContext(context.Background())
}

func (i PredeployArgs) ToPredeployPtrOutputWithContext(ctx context.Context) PredeployPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredeployOutput).ToPredeployPtrOutputWithContext(ctx)
}

// PredeployPtrInput is an input type that accepts PredeployArgs, PredeployPtr and PredeployPtrOutput values.
// You can construct a concrete instance of `PredeployPtrInput` via:
//
//	        PredeployArgs{...}
//
//	or:
//
//	        nil
type PredeployPtrInput interface {
	pulumi.Input

	ToPredeployPtrOutput() PredeployPtrOutput
	ToPredeployPtrOutputWithContext(context.Context) PredeployPtrOutput
}

type predeployPtrType PredeployArgs

func PredeployPtr(v *PredeployArgs) PredeployPtrInput {
	return (*predeployPtrType)(v)
}

func (*predeployPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Predeploy)(nil)).Elem()
}

func (i *predeployPtrType) ToPredeployPtrOutput() PredeployPtrOutput {
	return i.ToPredeployPtrOutputWithContext(context.Background())
}

func (i *predeployPtrType) ToPredeployPtrOutputWithContext(ctx context.Context) PredeployPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredeployPtrOutput)
}

// Predeploy contains the predeploy job configuration information.
type PredeployOutput struct{ *pulumi.OutputState }

func (PredeployOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Predeploy)(nil)).Elem()
}

func (o PredeployOutput) ToPredeployOutput() PredeployOutput {
	return o
}

func (o PredeployOutput) ToPredeployOutputWithContext(ctx context.Context) PredeployOutput {
	return o
}

func (o PredeployOutput) ToPredeployPtrOutput() PredeployPtrOutput {
	return o.ToPredeployPtrOutputWithContext(context.Background())
}

func (o PredeployOutput) ToPredeployPtrOutputWithContext(ctx context.Context) PredeployPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Predeploy) *Predeploy {
		return &v
	}).(PredeployPtrOutput)
}

// Optional. A sequence of Skaffold custom actions to invoke during execution of the predeploy job.
func (o PredeployOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Predeploy) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

type PredeployPtrOutput struct{ *pulumi.OutputState }

func (PredeployPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Predeploy)(nil)).Elem()
}

func (o PredeployPtrOutput) ToPredeployPtrOutput() PredeployPtrOutput {
	return o
}

func (o PredeployPtrOutput) ToPredeployPtrOutputWithContext(ctx context.Context) PredeployPtrOutput {
	return o
}

func (o PredeployPtrOutput) Elem() PredeployOutput {
	return o.ApplyT(func(v *Predeploy) Predeploy {
		if v != nil {
			return *v
		}
		var ret Predeploy
		return ret
	}).(PredeployOutput)
}

// Optional. A sequence of Skaffold custom actions to invoke during execution of the predeploy job.
func (o PredeployPtrOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Predeploy) []string {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(pulumi.StringArrayOutput)
}

// A predeploy Job.
type PredeployJobResponse struct {
	// The custom actions that the predeploy Job executes.
	Actions []string `pulumi:"actions"`
}

// A predeploy Job.
type PredeployJobResponseOutput struct{ *pulumi.OutputState }

func (PredeployJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredeployJobResponse)(nil)).Elem()
}

func (o PredeployJobResponseOutput) ToPredeployJobResponseOutput() PredeployJobResponseOutput {
	return o
}

func (o PredeployJobResponseOutput) ToPredeployJobResponseOutputWithContext(ctx context.Context) PredeployJobResponseOutput {
	return o
}

// The custom actions that the predeploy Job executes.
func (o PredeployJobResponseOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PredeployJobResponse) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Predeploy contains the predeploy job configuration information.
type PredeployResponse struct {
	// Optional. A sequence of Skaffold custom actions to invoke during execution of the predeploy job.
	Actions []string `pulumi:"actions"`
}

// Predeploy contains the predeploy job configuration information.
type PredeployResponseOutput struct{ *pulumi.OutputState }

func (PredeployResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredeployResponse)(nil)).Elem()
}

func (o PredeployResponseOutput) ToPredeployResponseOutput() PredeployResponseOutput {
	return o
}

func (o PredeployResponseOutput) ToPredeployResponseOutputWithContext(ctx context.Context) PredeployResponseOutput {
	return o
}

// Optional. A sequence of Skaffold custom actions to invoke during execution of the predeploy job.
func (o PredeployResponseOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PredeployResponse) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Execution using a private Cloud Build pool.
type PrivatePool struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage *string `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
	WorkerPool string `pulumi:"workerPool"`
}

// PrivatePoolInput is an input type that accepts PrivatePoolArgs and PrivatePoolOutput values.
// You can construct a concrete instance of `PrivatePoolInput` via:
//
//	PrivatePoolArgs{...}
type PrivatePoolInput interface {
	pulumi.Input

	ToPrivatePoolOutput() PrivatePoolOutput
	ToPrivatePoolOutputWithContext(context.Context) PrivatePoolOutput
}

// Execution using a private Cloud Build pool.
type PrivatePoolArgs struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage pulumi.StringPtrInput `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
	WorkerPool pulumi.StringInput `pulumi:"workerPool"`
}

func (PrivatePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivatePool)(nil)).Elem()
}

func (i PrivatePoolArgs) ToPrivatePoolOutput() PrivatePoolOutput {
	return i.ToPrivatePoolOutputWithContext(context.Background())
}

func (i PrivatePoolArgs) ToPrivatePoolOutputWithContext(ctx context.Context) PrivatePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatePoolOutput)
}

func (i PrivatePoolArgs) ToPrivatePoolPtrOutput() PrivatePoolPtrOutput {
	return i.ToPrivatePoolPtrOutputWithContext(context.Background())
}

func (i PrivatePoolArgs) ToPrivatePoolPtrOutputWithContext(ctx context.Context) PrivatePoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatePoolOutput).ToPrivatePoolPtrOutputWithContext(ctx)
}

// PrivatePoolPtrInput is an input type that accepts PrivatePoolArgs, PrivatePoolPtr and PrivatePoolPtrOutput values.
// You can construct a concrete instance of `PrivatePoolPtrInput` via:
//
//	        PrivatePoolArgs{...}
//
//	or:
//
//	        nil
type PrivatePoolPtrInput interface {
	pulumi.Input

	ToPrivatePoolPtrOutput() PrivatePoolPtrOutput
	ToPrivatePoolPtrOutputWithContext(context.Context) PrivatePoolPtrOutput
}

type privatePoolPtrType PrivatePoolArgs

func PrivatePoolPtr(v *PrivatePoolArgs) PrivatePoolPtrInput {
	return (*privatePoolPtrType)(v)
}

func (*privatePoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivatePool)(nil)).Elem()
}

func (i *privatePoolPtrType) ToPrivatePoolPtrOutput() PrivatePoolPtrOutput {
	return i.ToPrivatePoolPtrOutputWithContext(context.Background())
}

func (i *privatePoolPtrType) ToPrivatePoolPtrOutputWithContext(ctx context.Context) PrivatePoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatePoolPtrOutput)
}

// Execution using a private Cloud Build pool.
type PrivatePoolOutput struct{ *pulumi.OutputState }

func (PrivatePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivatePool)(nil)).Elem()
}

func (o PrivatePoolOutput) ToPrivatePoolOutput() PrivatePoolOutput {
	return o
}

func (o PrivatePoolOutput) ToPrivatePoolOutputWithContext(ctx context.Context) PrivatePoolOutput {
	return o
}

func (o PrivatePoolOutput) ToPrivatePoolPtrOutput() PrivatePoolPtrOutput {
	return o.ToPrivatePoolPtrOutputWithContext(context.Background())
}

func (o PrivatePoolOutput) ToPrivatePoolPtrOutputWithContext(ctx context.Context) PrivatePoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivatePool) *PrivatePool {
		return &v
	}).(PrivatePoolPtrOutput)
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o PrivatePoolOutput) ArtifactStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivatePool) *string { return v.ArtifactStorage }).(pulumi.StringPtrOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o PrivatePoolOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivatePool) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
func (o PrivatePoolOutput) WorkerPool() pulumi.StringOutput {
	return o.ApplyT(func(v PrivatePool) string { return v.WorkerPool }).(pulumi.StringOutput)
}

type PrivatePoolPtrOutput struct{ *pulumi.OutputState }

func (PrivatePoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivatePool)(nil)).Elem()
}

func (o PrivatePoolPtrOutput) ToPrivatePoolPtrOutput() PrivatePoolPtrOutput {
	return o
}

func (o PrivatePoolPtrOutput) ToPrivatePoolPtrOutputWithContext(ctx context.Context) PrivatePoolPtrOutput {
	return o
}

func (o PrivatePoolPtrOutput) Elem() PrivatePoolOutput {
	return o.ApplyT(func(v *PrivatePool) PrivatePool {
		if v != nil {
			return *v
		}
		var ret PrivatePool
		return ret
	}).(PrivatePoolOutput)
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o PrivatePoolPtrOutput) ArtifactStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatePool) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorage
	}).(pulumi.StringPtrOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o PrivatePoolPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatePool) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
func (o PrivatePoolPtrOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatePool) *string {
		if v == nil {
			return nil
		}
		return &v.WorkerPool
	}).(pulumi.StringPtrOutput)
}

// Execution using a private Cloud Build pool.
type PrivatePoolResponse struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage string `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
	WorkerPool string `pulumi:"workerPool"`
}

// Execution using a private Cloud Build pool.
type PrivatePoolResponseOutput struct{ *pulumi.OutputState }

func (PrivatePoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivatePoolResponse)(nil)).Elem()
}

func (o PrivatePoolResponseOutput) ToPrivatePoolResponseOutput() PrivatePoolResponseOutput {
	return o
}

func (o PrivatePoolResponseOutput) ToPrivatePoolResponseOutputWithContext(ctx context.Context) PrivatePoolResponseOutput {
	return o
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o PrivatePoolResponseOutput) ArtifactStorage() pulumi.StringOutput {
	return o.ApplyT(func(v PrivatePoolResponse) string { return v.ArtifactStorage }).(pulumi.StringOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o PrivatePoolResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v PrivatePoolResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
func (o PrivatePoolResponseOutput) WorkerPool() pulumi.StringOutput {
	return o.ApplyT(func(v PrivatePoolResponse) string { return v.WorkerPool }).(pulumi.StringOutput)
}

// `PromoteRelease` rule will automatically promote a release from the current target to a specified target.
type PromoteReleaseRule struct {
	// Optional. The starting phase of the rollout created by this operation. Default to the first phase.
	DestinationPhase *string `pulumi:"destinationPhase"`
	// Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * "@next", the next target in the promotion sequence.
	DestinationTargetId *string `pulumi:"destinationTargetId"`
	// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
	Id string `pulumi:"id"`
	// Optional. How long the release need to be paused until being promoted to the next target.
	Wait *string `pulumi:"wait"`
}

// PromoteReleaseRuleInput is an input type that accepts PromoteReleaseRuleArgs and PromoteReleaseRuleOutput values.
// You can construct a concrete instance of `PromoteReleaseRuleInput` via:
//
//	PromoteReleaseRuleArgs{...}
type PromoteReleaseRuleInput interface {
	pulumi.Input

	ToPromoteReleaseRuleOutput() PromoteReleaseRuleOutput
	ToPromoteReleaseRuleOutputWithContext(context.Context) PromoteReleaseRuleOutput
}

// `PromoteRelease` rule will automatically promote a release from the current target to a specified target.
type PromoteReleaseRuleArgs struct {
	// Optional. The starting phase of the rollout created by this operation. Default to the first phase.
	DestinationPhase pulumi.StringPtrInput `pulumi:"destinationPhase"`
	// Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * "@next", the next target in the promotion sequence.
	DestinationTargetId pulumi.StringPtrInput `pulumi:"destinationTargetId"`
	// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
	Id pulumi.StringInput `pulumi:"id"`
	// Optional. How long the release need to be paused until being promoted to the next target.
	Wait pulumi.StringPtrInput `pulumi:"wait"`
}

func (PromoteReleaseRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PromoteReleaseRule)(nil)).Elem()
}

func (i PromoteReleaseRuleArgs) ToPromoteReleaseRuleOutput() PromoteReleaseRuleOutput {
	return i.ToPromoteReleaseRuleOutputWithContext(context.Background())
}

func (i PromoteReleaseRuleArgs) ToPromoteReleaseRuleOutputWithContext(ctx context.Context) PromoteReleaseRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromoteReleaseRuleOutput)
}

func (i PromoteReleaseRuleArgs) ToPromoteReleaseRulePtrOutput() PromoteReleaseRulePtrOutput {
	return i.ToPromoteReleaseRulePtrOutputWithContext(context.Background())
}

func (i PromoteReleaseRuleArgs) ToPromoteReleaseRulePtrOutputWithContext(ctx context.Context) PromoteReleaseRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromoteReleaseRuleOutput).ToPromoteReleaseRulePtrOutputWithContext(ctx)
}

// PromoteReleaseRulePtrInput is an input type that accepts PromoteReleaseRuleArgs, PromoteReleaseRulePtr and PromoteReleaseRulePtrOutput values.
// You can construct a concrete instance of `PromoteReleaseRulePtrInput` via:
//
//	        PromoteReleaseRuleArgs{...}
//
//	or:
//
//	        nil
type PromoteReleaseRulePtrInput interface {
	pulumi.Input

	ToPromoteReleaseRulePtrOutput() PromoteReleaseRulePtrOutput
	ToPromoteReleaseRulePtrOutputWithContext(context.Context) PromoteReleaseRulePtrOutput
}

type promoteReleaseRulePtrType PromoteReleaseRuleArgs

func PromoteReleaseRulePtr(v *PromoteReleaseRuleArgs) PromoteReleaseRulePtrInput {
	return (*promoteReleaseRulePtrType)(v)
}

func (*promoteReleaseRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PromoteReleaseRule)(nil)).Elem()
}

func (i *promoteReleaseRulePtrType) ToPromoteReleaseRulePtrOutput() PromoteReleaseRulePtrOutput {
	return i.ToPromoteReleaseRulePtrOutputWithContext(context.Background())
}

func (i *promoteReleaseRulePtrType) ToPromoteReleaseRulePtrOutputWithContext(ctx context.Context) PromoteReleaseRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromoteReleaseRulePtrOutput)
}

// `PromoteRelease` rule will automatically promote a release from the current target to a specified target.
type PromoteReleaseRuleOutput struct{ *pulumi.OutputState }

func (PromoteReleaseRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PromoteReleaseRule)(nil)).Elem()
}

func (o PromoteReleaseRuleOutput) ToPromoteReleaseRuleOutput() PromoteReleaseRuleOutput {
	return o
}

func (o PromoteReleaseRuleOutput) ToPromoteReleaseRuleOutputWithContext(ctx context.Context) PromoteReleaseRuleOutput {
	return o
}

func (o PromoteReleaseRuleOutput) ToPromoteReleaseRulePtrOutput() PromoteReleaseRulePtrOutput {
	return o.ToPromoteReleaseRulePtrOutputWithContext(context.Background())
}

func (o PromoteReleaseRuleOutput) ToPromoteReleaseRulePtrOutputWithContext(ctx context.Context) PromoteReleaseRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PromoteReleaseRule) *PromoteReleaseRule {
		return &v
	}).(PromoteReleaseRulePtrOutput)
}

// Optional. The starting phase of the rollout created by this operation. Default to the first phase.
func (o PromoteReleaseRuleOutput) DestinationPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PromoteReleaseRule) *string { return v.DestinationPhase }).(pulumi.StringPtrOutput)
}

// Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * "@next", the next target in the promotion sequence.
func (o PromoteReleaseRuleOutput) DestinationTargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PromoteReleaseRule) *string { return v.DestinationTargetId }).(pulumi.StringPtrOutput)
}

// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
func (o PromoteReleaseRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PromoteReleaseRule) string { return v.Id }).(pulumi.StringOutput)
}

// Optional. How long the release need to be paused until being promoted to the next target.
func (o PromoteReleaseRuleOutput) Wait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PromoteReleaseRule) *string { return v.Wait }).(pulumi.StringPtrOutput)
}

type PromoteReleaseRulePtrOutput struct{ *pulumi.OutputState }

func (PromoteReleaseRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PromoteReleaseRule)(nil)).Elem()
}

func (o PromoteReleaseRulePtrOutput) ToPromoteReleaseRulePtrOutput() PromoteReleaseRulePtrOutput {
	return o
}

func (o PromoteReleaseRulePtrOutput) ToPromoteReleaseRulePtrOutputWithContext(ctx context.Context) PromoteReleaseRulePtrOutput {
	return o
}

func (o PromoteReleaseRulePtrOutput) Elem() PromoteReleaseRuleOutput {
	return o.ApplyT(func(v *PromoteReleaseRule) PromoteReleaseRule {
		if v != nil {
			return *v
		}
		var ret PromoteReleaseRule
		return ret
	}).(PromoteReleaseRuleOutput)
}

// Optional. The starting phase of the rollout created by this operation. Default to the first phase.
func (o PromoteReleaseRulePtrOutput) DestinationPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PromoteReleaseRule) *string {
		if v == nil {
			return nil
		}
		return v.DestinationPhase
	}).(pulumi.StringPtrOutput)
}

// Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * "@next", the next target in the promotion sequence.
func (o PromoteReleaseRulePtrOutput) DestinationTargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PromoteReleaseRule) *string {
		if v == nil {
			return nil
		}
		return v.DestinationTargetId
	}).(pulumi.StringPtrOutput)
}

// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
func (o PromoteReleaseRulePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PromoteReleaseRule) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Optional. How long the release need to be paused until being promoted to the next target.
func (o PromoteReleaseRulePtrOutput) Wait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PromoteReleaseRule) *string {
		if v == nil {
			return nil
		}
		return v.Wait
	}).(pulumi.StringPtrOutput)
}

// `PromoteRelease` rule will automatically promote a release from the current target to a specified target.
type PromoteReleaseRuleResponse struct {
	// Information around the state of the Automation rule.
	Condition AutomationRuleConditionResponse `pulumi:"condition"`
	// Optional. The starting phase of the rollout created by this operation. Default to the first phase.
	DestinationPhase string `pulumi:"destinationPhase"`
	// Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * "@next", the next target in the promotion sequence.
	DestinationTargetId string `pulumi:"destinationTargetId"`
	// Optional. How long the release need to be paused until being promoted to the next target.
	Wait string `pulumi:"wait"`
}

// `PromoteRelease` rule will automatically promote a release from the current target to a specified target.
type PromoteReleaseRuleResponseOutput struct{ *pulumi.OutputState }

func (PromoteReleaseRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PromoteReleaseRuleResponse)(nil)).Elem()
}

func (o PromoteReleaseRuleResponseOutput) ToPromoteReleaseRuleResponseOutput() PromoteReleaseRuleResponseOutput {
	return o
}

func (o PromoteReleaseRuleResponseOutput) ToPromoteReleaseRuleResponseOutputWithContext(ctx context.Context) PromoteReleaseRuleResponseOutput {
	return o
}

// Information around the state of the Automation rule.
func (o PromoteReleaseRuleResponseOutput) Condition() AutomationRuleConditionResponseOutput {
	return o.ApplyT(func(v PromoteReleaseRuleResponse) AutomationRuleConditionResponse { return v.Condition }).(AutomationRuleConditionResponseOutput)
}

// Optional. The starting phase of the rollout created by this operation. Default to the first phase.
func (o PromoteReleaseRuleResponseOutput) DestinationPhase() pulumi.StringOutput {
	return o.ApplyT(func(v PromoteReleaseRuleResponse) string { return v.DestinationPhase }).(pulumi.StringOutput)
}

// Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * "@next", the next target in the promotion sequence.
func (o PromoteReleaseRuleResponseOutput) DestinationTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v PromoteReleaseRuleResponse) string { return v.DestinationTargetId }).(pulumi.StringOutput)
}

// Optional. How long the release need to be paused until being promoted to the next target.
func (o PromoteReleaseRuleResponseOutput) Wait() pulumi.StringOutput {
	return o.ApplyT(func(v PromoteReleaseRuleResponse) string { return v.Wait }).(pulumi.StringOutput)
}

// ReleaseCondition contains all conditions relevant to a Release.
type ReleaseConditionResponse struct {
	// Details around the Releases's overall status.
	ReleaseReadyCondition ReleaseReadyConditionResponse `pulumi:"releaseReadyCondition"`
	// Details around the support state of the release's skaffold version.
	SkaffoldSupportedCondition SkaffoldSupportedConditionResponse `pulumi:"skaffoldSupportedCondition"`
}

// ReleaseCondition contains all conditions relevant to a Release.
type ReleaseConditionResponseOutput struct{ *pulumi.OutputState }

func (ReleaseConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseConditionResponse)(nil)).Elem()
}

func (o ReleaseConditionResponseOutput) ToReleaseConditionResponseOutput() ReleaseConditionResponseOutput {
	return o
}

func (o ReleaseConditionResponseOutput) ToReleaseConditionResponseOutputWithContext(ctx context.Context) ReleaseConditionResponseOutput {
	return o
}

// Details around the Releases's overall status.
func (o ReleaseConditionResponseOutput) ReleaseReadyCondition() ReleaseReadyConditionResponseOutput {
	return o.ApplyT(func(v ReleaseConditionResponse) ReleaseReadyConditionResponse { return v.ReleaseReadyCondition }).(ReleaseReadyConditionResponseOutput)
}

// Details around the support state of the release's skaffold version.
func (o ReleaseConditionResponseOutput) SkaffoldSupportedCondition() SkaffoldSupportedConditionResponseOutput {
	return o.ApplyT(func(v ReleaseConditionResponse) SkaffoldSupportedConditionResponse {
		return v.SkaffoldSupportedCondition
	}).(SkaffoldSupportedConditionResponseOutput)
}

// ReleaseReadyCondition contains information around the status of the Release. If a release is not ready, you cannot create a rollout with the release.
type ReleaseReadyConditionResponse struct {
	// True if the Release is in a valid state. Otherwise at least one condition in `ReleaseCondition` is in an invalid state. Iterate over those conditions and see which condition(s) has status = false to find out what is wrong with the Release.
	Status bool `pulumi:"status"`
}

// ReleaseReadyCondition contains information around the status of the Release. If a release is not ready, you cannot create a rollout with the release.
type ReleaseReadyConditionResponseOutput struct{ *pulumi.OutputState }

func (ReleaseReadyConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseReadyConditionResponse)(nil)).Elem()
}

func (o ReleaseReadyConditionResponseOutput) ToReleaseReadyConditionResponseOutput() ReleaseReadyConditionResponseOutput {
	return o
}

func (o ReleaseReadyConditionResponseOutput) ToReleaseReadyConditionResponseOutputWithContext(ctx context.Context) ReleaseReadyConditionResponseOutput {
	return o
}

// True if the Release is in a valid state. Otherwise at least one condition in `ReleaseCondition` is in an invalid state. Iterate over those conditions and see which condition(s) has status = false to find out what is wrong with the Release.
func (o ReleaseReadyConditionResponseOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v ReleaseReadyConditionResponse) bool { return v.Status }).(pulumi.BoolOutput)
}

// RenderMetadata includes information associated with a `Release` render.
type RenderMetadataResponse struct {
	// Metadata associated with rendering for Cloud Run.
	CloudRun CloudRunRenderMetadataResponse `pulumi:"cloudRun"`
}

// RenderMetadata includes information associated with a `Release` render.
type RenderMetadataResponseOutput struct{ *pulumi.OutputState }

func (RenderMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RenderMetadataResponse)(nil)).Elem()
}

func (o RenderMetadataResponseOutput) ToRenderMetadataResponseOutput() RenderMetadataResponseOutput {
	return o
}

func (o RenderMetadataResponseOutput) ToRenderMetadataResponseOutputWithContext(ctx context.Context) RenderMetadataResponseOutput {
	return o
}

// Metadata associated with rendering for Cloud Run.
func (o RenderMetadataResponseOutput) CloudRun() CloudRunRenderMetadataResponseOutput {
	return o.ApplyT(func(v RenderMetadataResponse) CloudRunRenderMetadataResponse { return v.CloudRun }).(CloudRunRenderMetadataResponseOutput)
}

// Configuration of the repair action.
type RepairMode struct {
	// Optional. Retries a failed job.
	Retry *Retry `pulumi:"retry"`
	// Optional. Rolls back a `Rollout`.
	Rollback *Rollback `pulumi:"rollback"`
}

// RepairModeInput is an input type that accepts RepairModeArgs and RepairModeOutput values.
// You can construct a concrete instance of `RepairModeInput` via:
//
//	RepairModeArgs{...}
type RepairModeInput interface {
	pulumi.Input

	ToRepairModeOutput() RepairModeOutput
	ToRepairModeOutputWithContext(context.Context) RepairModeOutput
}

// Configuration of the repair action.
type RepairModeArgs struct {
	// Optional. Retries a failed job.
	Retry RetryPtrInput `pulumi:"retry"`
	// Optional. Rolls back a `Rollout`.
	Rollback RollbackPtrInput `pulumi:"rollback"`
}

func (RepairModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepairMode)(nil)).Elem()
}

func (i RepairModeArgs) ToRepairModeOutput() RepairModeOutput {
	return i.ToRepairModeOutputWithContext(context.Background())
}

func (i RepairModeArgs) ToRepairModeOutputWithContext(ctx context.Context) RepairModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepairModeOutput)
}

// RepairModeArrayInput is an input type that accepts RepairModeArray and RepairModeArrayOutput values.
// You can construct a concrete instance of `RepairModeArrayInput` via:
//
//	RepairModeArray{ RepairModeArgs{...} }
type RepairModeArrayInput interface {
	pulumi.Input

	ToRepairModeArrayOutput() RepairModeArrayOutput
	ToRepairModeArrayOutputWithContext(context.Context) RepairModeArrayOutput
}

type RepairModeArray []RepairModeInput

func (RepairModeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepairMode)(nil)).Elem()
}

func (i RepairModeArray) ToRepairModeArrayOutput() RepairModeArrayOutput {
	return i.ToRepairModeArrayOutputWithContext(context.Background())
}

func (i RepairModeArray) ToRepairModeArrayOutputWithContext(ctx context.Context) RepairModeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepairModeArrayOutput)
}

// Configuration of the repair action.
type RepairModeOutput struct{ *pulumi.OutputState }

func (RepairModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepairMode)(nil)).Elem()
}

func (o RepairModeOutput) ToRepairModeOutput() RepairModeOutput {
	return o
}

func (o RepairModeOutput) ToRepairModeOutputWithContext(ctx context.Context) RepairModeOutput {
	return o
}

// Optional. Retries a failed job.
func (o RepairModeOutput) Retry() RetryPtrOutput {
	return o.ApplyT(func(v RepairMode) *Retry { return v.Retry }).(RetryPtrOutput)
}

// Optional. Rolls back a `Rollout`.
func (o RepairModeOutput) Rollback() RollbackPtrOutput {
	return o.ApplyT(func(v RepairMode) *Rollback { return v.Rollback }).(RollbackPtrOutput)
}

type RepairModeArrayOutput struct{ *pulumi.OutputState }

func (RepairModeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepairMode)(nil)).Elem()
}

func (o RepairModeArrayOutput) ToRepairModeArrayOutput() RepairModeArrayOutput {
	return o
}

func (o RepairModeArrayOutput) ToRepairModeArrayOutputWithContext(ctx context.Context) RepairModeArrayOutput {
	return o
}

func (o RepairModeArrayOutput) Index(i pulumi.IntInput) RepairModeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepairMode {
		return vs[0].([]RepairMode)[vs[1].(int)]
	}).(RepairModeOutput)
}

// Configuration of the repair action.
type RepairModeResponse struct {
	// Optional. Retries a failed job.
	Retry RetryResponse `pulumi:"retry"`
	// Optional. Rolls back a `Rollout`.
	Rollback RollbackResponse `pulumi:"rollback"`
}

// Configuration of the repair action.
type RepairModeResponseOutput struct{ *pulumi.OutputState }

func (RepairModeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepairModeResponse)(nil)).Elem()
}

func (o RepairModeResponseOutput) ToRepairModeResponseOutput() RepairModeResponseOutput {
	return o
}

func (o RepairModeResponseOutput) ToRepairModeResponseOutputWithContext(ctx context.Context) RepairModeResponseOutput {
	return o
}

// Optional. Retries a failed job.
func (o RepairModeResponseOutput) Retry() RetryResponseOutput {
	return o.ApplyT(func(v RepairModeResponse) RetryResponse { return v.Retry }).(RetryResponseOutput)
}

// Optional. Rolls back a `Rollout`.
func (o RepairModeResponseOutput) Rollback() RollbackResponseOutput {
	return o.ApplyT(func(v RepairModeResponse) RollbackResponse { return v.Rollback }).(RollbackResponseOutput)
}

type RepairModeResponseArrayOutput struct{ *pulumi.OutputState }

func (RepairModeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepairModeResponse)(nil)).Elem()
}

func (o RepairModeResponseArrayOutput) ToRepairModeResponseArrayOutput() RepairModeResponseArrayOutput {
	return o
}

func (o RepairModeResponseArrayOutput) ToRepairModeResponseArrayOutputWithContext(ctx context.Context) RepairModeResponseArrayOutput {
	return o
}

func (o RepairModeResponseArrayOutput) Index(i pulumi.IntInput) RepairModeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepairModeResponse {
		return vs[0].([]RepairModeResponse)[vs[1].(int)]
	}).(RepairModeResponseOutput)
}

// The `RepairRolloutRule` automation rule will automatically repair a failed `Rollout`.
type RepairRolloutRule struct {
	// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
	Id string `pulumi:"id"`
	// Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in `source_phase`. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	Jobs []string `pulumi:"jobs"`
	// Defines the types of automatic repair actions for failed jobs.
	RepairModes []RepairMode `pulumi:"repairModes"`
	// Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	SourcePhases []string `pulumi:"sourcePhases"`
}

// RepairRolloutRuleInput is an input type that accepts RepairRolloutRuleArgs and RepairRolloutRuleOutput values.
// You can construct a concrete instance of `RepairRolloutRuleInput` via:
//
//	RepairRolloutRuleArgs{...}
type RepairRolloutRuleInput interface {
	pulumi.Input

	ToRepairRolloutRuleOutput() RepairRolloutRuleOutput
	ToRepairRolloutRuleOutputWithContext(context.Context) RepairRolloutRuleOutput
}

// The `RepairRolloutRule` automation rule will automatically repair a failed `Rollout`.
type RepairRolloutRuleArgs struct {
	// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
	Id pulumi.StringInput `pulumi:"id"`
	// Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in `source_phase`. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	Jobs pulumi.StringArrayInput `pulumi:"jobs"`
	// Defines the types of automatic repair actions for failed jobs.
	RepairModes RepairModeArrayInput `pulumi:"repairModes"`
	// Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	SourcePhases pulumi.StringArrayInput `pulumi:"sourcePhases"`
}

func (RepairRolloutRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepairRolloutRule)(nil)).Elem()
}

func (i RepairRolloutRuleArgs) ToRepairRolloutRuleOutput() RepairRolloutRuleOutput {
	return i.ToRepairRolloutRuleOutputWithContext(context.Background())
}

func (i RepairRolloutRuleArgs) ToRepairRolloutRuleOutputWithContext(ctx context.Context) RepairRolloutRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepairRolloutRuleOutput)
}

func (i RepairRolloutRuleArgs) ToRepairRolloutRulePtrOutput() RepairRolloutRulePtrOutput {
	return i.ToRepairRolloutRulePtrOutputWithContext(context.Background())
}

func (i RepairRolloutRuleArgs) ToRepairRolloutRulePtrOutputWithContext(ctx context.Context) RepairRolloutRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepairRolloutRuleOutput).ToRepairRolloutRulePtrOutputWithContext(ctx)
}

// RepairRolloutRulePtrInput is an input type that accepts RepairRolloutRuleArgs, RepairRolloutRulePtr and RepairRolloutRulePtrOutput values.
// You can construct a concrete instance of `RepairRolloutRulePtrInput` via:
//
//	        RepairRolloutRuleArgs{...}
//
//	or:
//
//	        nil
type RepairRolloutRulePtrInput interface {
	pulumi.Input

	ToRepairRolloutRulePtrOutput() RepairRolloutRulePtrOutput
	ToRepairRolloutRulePtrOutputWithContext(context.Context) RepairRolloutRulePtrOutput
}

type repairRolloutRulePtrType RepairRolloutRuleArgs

func RepairRolloutRulePtr(v *RepairRolloutRuleArgs) RepairRolloutRulePtrInput {
	return (*repairRolloutRulePtrType)(v)
}

func (*repairRolloutRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepairRolloutRule)(nil)).Elem()
}

func (i *repairRolloutRulePtrType) ToRepairRolloutRulePtrOutput() RepairRolloutRulePtrOutput {
	return i.ToRepairRolloutRulePtrOutputWithContext(context.Background())
}

func (i *repairRolloutRulePtrType) ToRepairRolloutRulePtrOutputWithContext(ctx context.Context) RepairRolloutRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepairRolloutRulePtrOutput)
}

// The `RepairRolloutRule` automation rule will automatically repair a failed `Rollout`.
type RepairRolloutRuleOutput struct{ *pulumi.OutputState }

func (RepairRolloutRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepairRolloutRule)(nil)).Elem()
}

func (o RepairRolloutRuleOutput) ToRepairRolloutRuleOutput() RepairRolloutRuleOutput {
	return o
}

func (o RepairRolloutRuleOutput) ToRepairRolloutRuleOutputWithContext(ctx context.Context) RepairRolloutRuleOutput {
	return o
}

func (o RepairRolloutRuleOutput) ToRepairRolloutRulePtrOutput() RepairRolloutRulePtrOutput {
	return o.ToRepairRolloutRulePtrOutputWithContext(context.Background())
}

func (o RepairRolloutRuleOutput) ToRepairRolloutRulePtrOutputWithContext(ctx context.Context) RepairRolloutRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepairRolloutRule) *RepairRolloutRule {
		return &v
	}).(RepairRolloutRulePtrOutput)
}

// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
func (o RepairRolloutRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RepairRolloutRule) string { return v.Id }).(pulumi.StringOutput)
}

// Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in `source_phase`. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o RepairRolloutRuleOutput) Jobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepairRolloutRule) []string { return v.Jobs }).(pulumi.StringArrayOutput)
}

// Defines the types of automatic repair actions for failed jobs.
func (o RepairRolloutRuleOutput) RepairModes() RepairModeArrayOutput {
	return o.ApplyT(func(v RepairRolloutRule) []RepairMode { return v.RepairModes }).(RepairModeArrayOutput)
}

// Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o RepairRolloutRuleOutput) SourcePhases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepairRolloutRule) []string { return v.SourcePhases }).(pulumi.StringArrayOutput)
}

type RepairRolloutRulePtrOutput struct{ *pulumi.OutputState }

func (RepairRolloutRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepairRolloutRule)(nil)).Elem()
}

func (o RepairRolloutRulePtrOutput) ToRepairRolloutRulePtrOutput() RepairRolloutRulePtrOutput {
	return o
}

func (o RepairRolloutRulePtrOutput) ToRepairRolloutRulePtrOutputWithContext(ctx context.Context) RepairRolloutRulePtrOutput {
	return o
}

func (o RepairRolloutRulePtrOutput) Elem() RepairRolloutRuleOutput {
	return o.ApplyT(func(v *RepairRolloutRule) RepairRolloutRule {
		if v != nil {
			return *v
		}
		var ret RepairRolloutRule
		return ret
	}).(RepairRolloutRuleOutput)
}

// ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.
func (o RepairRolloutRulePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepairRolloutRule) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in `source_phase`. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o RepairRolloutRulePtrOutput) Jobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepairRolloutRule) []string {
		if v == nil {
			return nil
		}
		return v.Jobs
	}).(pulumi.StringArrayOutput)
}

// Defines the types of automatic repair actions for failed jobs.
func (o RepairRolloutRulePtrOutput) RepairModes() RepairModeArrayOutput {
	return o.ApplyT(func(v *RepairRolloutRule) []RepairMode {
		if v == nil {
			return nil
		}
		return v.RepairModes
	}).(RepairModeArrayOutput)
}

// Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o RepairRolloutRulePtrOutput) SourcePhases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepairRolloutRule) []string {
		if v == nil {
			return nil
		}
		return v.SourcePhases
	}).(pulumi.StringArrayOutput)
}

// The `RepairRolloutRule` automation rule will automatically repair a failed `Rollout`.
type RepairRolloutRuleResponse struct {
	// Information around the state of the 'Automation' rule.
	Condition AutomationRuleConditionResponse `pulumi:"condition"`
	// Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in `source_phase`. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	Jobs []string `pulumi:"jobs"`
	// Defines the types of automatic repair actions for failed jobs.
	RepairModes []RepairModeResponse `pulumi:"repairModes"`
	// Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	SourcePhases []string `pulumi:"sourcePhases"`
}

// The `RepairRolloutRule` automation rule will automatically repair a failed `Rollout`.
type RepairRolloutRuleResponseOutput struct{ *pulumi.OutputState }

func (RepairRolloutRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepairRolloutRuleResponse)(nil)).Elem()
}

func (o RepairRolloutRuleResponseOutput) ToRepairRolloutRuleResponseOutput() RepairRolloutRuleResponseOutput {
	return o
}

func (o RepairRolloutRuleResponseOutput) ToRepairRolloutRuleResponseOutputWithContext(ctx context.Context) RepairRolloutRuleResponseOutput {
	return o
}

// Information around the state of the 'Automation' rule.
func (o RepairRolloutRuleResponseOutput) Condition() AutomationRuleConditionResponseOutput {
	return o.ApplyT(func(v RepairRolloutRuleResponse) AutomationRuleConditionResponse { return v.Condition }).(AutomationRuleConditionResponseOutput)
}

// Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in `source_phase`. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o RepairRolloutRuleResponseOutput) Jobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepairRolloutRuleResponse) []string { return v.Jobs }).(pulumi.StringArrayOutput)
}

// Defines the types of automatic repair actions for failed jobs.
func (o RepairRolloutRuleResponseOutput) RepairModes() RepairModeResponseArrayOutput {
	return o.ApplyT(func(v RepairRolloutRuleResponse) []RepairModeResponse { return v.RepairModes }).(RepairModeResponseArrayOutput)
}

// Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
func (o RepairRolloutRuleResponseOutput) SourcePhases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepairRolloutRuleResponse) []string { return v.SourcePhases }).(pulumi.StringArrayOutput)
}

// Retries the failed job.
type Retry struct {
	// Total number of retries. Retry will skipped if set to 0; The minimum value is 1, and the maximum value is 10.
	Attempts string `pulumi:"attempts"`
	// Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.
	BackoffMode *RetryBackoffMode `pulumi:"backoffMode"`
	// Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.
	Wait *string `pulumi:"wait"`
}

// RetryInput is an input type that accepts RetryArgs and RetryOutput values.
// You can construct a concrete instance of `RetryInput` via:
//
//	RetryArgs{...}
type RetryInput interface {
	pulumi.Input

	ToRetryOutput() RetryOutput
	ToRetryOutputWithContext(context.Context) RetryOutput
}

// Retries the failed job.
type RetryArgs struct {
	// Total number of retries. Retry will skipped if set to 0; The minimum value is 1, and the maximum value is 10.
	Attempts pulumi.StringInput `pulumi:"attempts"`
	// Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.
	BackoffMode RetryBackoffModePtrInput `pulumi:"backoffMode"`
	// Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.
	Wait pulumi.StringPtrInput `pulumi:"wait"`
}

func (RetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Retry)(nil)).Elem()
}

func (i RetryArgs) ToRetryOutput() RetryOutput {
	return i.ToRetryOutputWithContext(context.Background())
}

func (i RetryArgs) ToRetryOutputWithContext(ctx context.Context) RetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryOutput)
}

func (i RetryArgs) ToRetryPtrOutput() RetryPtrOutput {
	return i.ToRetryPtrOutputWithContext(context.Background())
}

func (i RetryArgs) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryOutput).ToRetryPtrOutputWithContext(ctx)
}

// RetryPtrInput is an input type that accepts RetryArgs, RetryPtr and RetryPtrOutput values.
// You can construct a concrete instance of `RetryPtrInput` via:
//
//	        RetryArgs{...}
//
//	or:
//
//	        nil
type RetryPtrInput interface {
	pulumi.Input

	ToRetryPtrOutput() RetryPtrOutput
	ToRetryPtrOutputWithContext(context.Context) RetryPtrOutput
}

type retryPtrType RetryArgs

func RetryPtr(v *RetryArgs) RetryPtrInput {
	return (*retryPtrType)(v)
}

func (*retryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Retry)(nil)).Elem()
}

func (i *retryPtrType) ToRetryPtrOutput() RetryPtrOutput {
	return i.ToRetryPtrOutputWithContext(context.Background())
}

func (i *retryPtrType) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPtrOutput)
}

// Retries the failed job.
type RetryOutput struct{ *pulumi.OutputState }

func (RetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Retry)(nil)).Elem()
}

func (o RetryOutput) ToRetryOutput() RetryOutput {
	return o
}

func (o RetryOutput) ToRetryOutputWithContext(ctx context.Context) RetryOutput {
	return o
}

func (o RetryOutput) ToRetryPtrOutput() RetryPtrOutput {
	return o.ToRetryPtrOutputWithContext(context.Background())
}

func (o RetryOutput) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Retry) *Retry {
		return &v
	}).(RetryPtrOutput)
}

// Total number of retries. Retry will skipped if set to 0; The minimum value is 1, and the maximum value is 10.
func (o RetryOutput) Attempts() pulumi.StringOutput {
	return o.ApplyT(func(v Retry) string { return v.Attempts }).(pulumi.StringOutput)
}

// Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.
func (o RetryOutput) BackoffMode() RetryBackoffModePtrOutput {
	return o.ApplyT(func(v Retry) *RetryBackoffMode { return v.BackoffMode }).(RetryBackoffModePtrOutput)
}

// Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.
func (o RetryOutput) Wait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Retry) *string { return v.Wait }).(pulumi.StringPtrOutput)
}

type RetryPtrOutput struct{ *pulumi.OutputState }

func (RetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Retry)(nil)).Elem()
}

func (o RetryPtrOutput) ToRetryPtrOutput() RetryPtrOutput {
	return o
}

func (o RetryPtrOutput) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return o
}

func (o RetryPtrOutput) Elem() RetryOutput {
	return o.ApplyT(func(v *Retry) Retry {
		if v != nil {
			return *v
		}
		var ret Retry
		return ret
	}).(RetryOutput)
}

// Total number of retries. Retry will skipped if set to 0; The minimum value is 1, and the maximum value is 10.
func (o RetryPtrOutput) Attempts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Retry) *string {
		if v == nil {
			return nil
		}
		return &v.Attempts
	}).(pulumi.StringPtrOutput)
}

// Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.
func (o RetryPtrOutput) BackoffMode() RetryBackoffModePtrOutput {
	return o.ApplyT(func(v *Retry) *RetryBackoffMode {
		if v == nil {
			return nil
		}
		return v.BackoffMode
	}).(RetryBackoffModePtrOutput)
}

// Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.
func (o RetryPtrOutput) Wait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Retry) *string {
		if v == nil {
			return nil
		}
		return v.Wait
	}).(pulumi.StringPtrOutput)
}

// Retries the failed job.
type RetryResponse struct {
	// Total number of retries. Retry will skipped if set to 0; The minimum value is 1, and the maximum value is 10.
	Attempts string `pulumi:"attempts"`
	// Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.
	BackoffMode string `pulumi:"backoffMode"`
	// Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.
	Wait string `pulumi:"wait"`
}

// Retries the failed job.
type RetryResponseOutput struct{ *pulumi.OutputState }

func (RetryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryResponse)(nil)).Elem()
}

func (o RetryResponseOutput) ToRetryResponseOutput() RetryResponseOutput {
	return o
}

func (o RetryResponseOutput) ToRetryResponseOutputWithContext(ctx context.Context) RetryResponseOutput {
	return o
}

// Total number of retries. Retry will skipped if set to 0; The minimum value is 1, and the maximum value is 10.
func (o RetryResponseOutput) Attempts() pulumi.StringOutput {
	return o.ApplyT(func(v RetryResponse) string { return v.Attempts }).(pulumi.StringOutput)
}

// Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.
func (o RetryResponseOutput) BackoffMode() pulumi.StringOutput {
	return o.ApplyT(func(v RetryResponse) string { return v.BackoffMode }).(pulumi.StringOutput)
}

// Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.
func (o RetryResponseOutput) Wait() pulumi.StringOutput {
	return o.ApplyT(func(v RetryResponse) string { return v.Wait }).(pulumi.StringOutput)
}

// Rolls back a `Rollout`.
type Rollback struct {
	// Optional. The starting phase ID for the `Rollout`. If unspecified, the `Rollout` will start in the stable phase.
	DestinationPhase *string `pulumi:"destinationPhase"`
}

// RollbackInput is an input type that accepts RollbackArgs and RollbackOutput values.
// You can construct a concrete instance of `RollbackInput` via:
//
//	RollbackArgs{...}
type RollbackInput interface {
	pulumi.Input

	ToRollbackOutput() RollbackOutput
	ToRollbackOutputWithContext(context.Context) RollbackOutput
}

// Rolls back a `Rollout`.
type RollbackArgs struct {
	// Optional. The starting phase ID for the `Rollout`. If unspecified, the `Rollout` will start in the stable phase.
	DestinationPhase pulumi.StringPtrInput `pulumi:"destinationPhase"`
}

func (RollbackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Rollback)(nil)).Elem()
}

func (i RollbackArgs) ToRollbackOutput() RollbackOutput {
	return i.ToRollbackOutputWithContext(context.Background())
}

func (i RollbackArgs) ToRollbackOutputWithContext(ctx context.Context) RollbackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackOutput)
}

func (i RollbackArgs) ToRollbackPtrOutput() RollbackPtrOutput {
	return i.ToRollbackPtrOutputWithContext(context.Background())
}

func (i RollbackArgs) ToRollbackPtrOutputWithContext(ctx context.Context) RollbackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackOutput).ToRollbackPtrOutputWithContext(ctx)
}

// RollbackPtrInput is an input type that accepts RollbackArgs, RollbackPtr and RollbackPtrOutput values.
// You can construct a concrete instance of `RollbackPtrInput` via:
//
//	        RollbackArgs{...}
//
//	or:
//
//	        nil
type RollbackPtrInput interface {
	pulumi.Input

	ToRollbackPtrOutput() RollbackPtrOutput
	ToRollbackPtrOutputWithContext(context.Context) RollbackPtrOutput
}

type rollbackPtrType RollbackArgs

func RollbackPtr(v *RollbackArgs) RollbackPtrInput {
	return (*rollbackPtrType)(v)
}

func (*rollbackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Rollback)(nil)).Elem()
}

func (i *rollbackPtrType) ToRollbackPtrOutput() RollbackPtrOutput {
	return i.ToRollbackPtrOutputWithContext(context.Background())
}

func (i *rollbackPtrType) ToRollbackPtrOutputWithContext(ctx context.Context) RollbackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackPtrOutput)
}

// Rolls back a `Rollout`.
type RollbackOutput struct{ *pulumi.OutputState }

func (RollbackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rollback)(nil)).Elem()
}

func (o RollbackOutput) ToRollbackOutput() RollbackOutput {
	return o
}

func (o RollbackOutput) ToRollbackOutputWithContext(ctx context.Context) RollbackOutput {
	return o
}

func (o RollbackOutput) ToRollbackPtrOutput() RollbackPtrOutput {
	return o.ToRollbackPtrOutputWithContext(context.Background())
}

func (o RollbackOutput) ToRollbackPtrOutputWithContext(ctx context.Context) RollbackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Rollback) *Rollback {
		return &v
	}).(RollbackPtrOutput)
}

// Optional. The starting phase ID for the `Rollout`. If unspecified, the `Rollout` will start in the stable phase.
func (o RollbackOutput) DestinationPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rollback) *string { return v.DestinationPhase }).(pulumi.StringPtrOutput)
}

type RollbackPtrOutput struct{ *pulumi.OutputState }

func (RollbackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rollback)(nil)).Elem()
}

func (o RollbackPtrOutput) ToRollbackPtrOutput() RollbackPtrOutput {
	return o
}

func (o RollbackPtrOutput) ToRollbackPtrOutputWithContext(ctx context.Context) RollbackPtrOutput {
	return o
}

func (o RollbackPtrOutput) Elem() RollbackOutput {
	return o.ApplyT(func(v *Rollback) Rollback {
		if v != nil {
			return *v
		}
		var ret Rollback
		return ret
	}).(RollbackOutput)
}

// Optional. The starting phase ID for the `Rollout`. If unspecified, the `Rollout` will start in the stable phase.
func (o RollbackPtrOutput) DestinationPhase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rollback) *string {
		if v == nil {
			return nil
		}
		return v.DestinationPhase
	}).(pulumi.StringPtrOutput)
}

// Rolls back a `Rollout`.
type RollbackResponse struct {
	// Optional. The starting phase ID for the `Rollout`. If unspecified, the `Rollout` will start in the stable phase.
	DestinationPhase string `pulumi:"destinationPhase"`
}

// Rolls back a `Rollout`.
type RollbackResponseOutput struct{ *pulumi.OutputState }

func (RollbackResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollbackResponse)(nil)).Elem()
}

func (o RollbackResponseOutput) ToRollbackResponseOutput() RollbackResponseOutput {
	return o
}

func (o RollbackResponseOutput) ToRollbackResponseOutputWithContext(ctx context.Context) RollbackResponseOutput {
	return o
}

// Optional. The starting phase ID for the `Rollout`. If unspecified, the `Rollout` will start in the stable phase.
func (o RollbackResponseOutput) DestinationPhase() pulumi.StringOutput {
	return o.ApplyT(func(v RollbackResponse) string { return v.DestinationPhase }).(pulumi.StringOutput)
}

// RuntimeConfig contains the runtime specific configurations for a deployment strategy.
type RuntimeConfig struct {
	// Cloud Run runtime configuration.
	CloudRun *CloudRunConfig `pulumi:"cloudRun"`
	// Kubernetes runtime configuration.
	Kubernetes *KubernetesConfig `pulumi:"kubernetes"`
}

// RuntimeConfigInput is an input type that accepts RuntimeConfigArgs and RuntimeConfigOutput values.
// You can construct a concrete instance of `RuntimeConfigInput` via:
//
//	RuntimeConfigArgs{...}
type RuntimeConfigInput interface {
	pulumi.Input

	ToRuntimeConfigOutput() RuntimeConfigOutput
	ToRuntimeConfigOutputWithContext(context.Context) RuntimeConfigOutput
}

// RuntimeConfig contains the runtime specific configurations for a deployment strategy.
type RuntimeConfigArgs struct {
	// Cloud Run runtime configuration.
	CloudRun CloudRunConfigPtrInput `pulumi:"cloudRun"`
	// Kubernetes runtime configuration.
	Kubernetes KubernetesConfigPtrInput `pulumi:"kubernetes"`
}

func (RuntimeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeConfig)(nil)).Elem()
}

func (i RuntimeConfigArgs) ToRuntimeConfigOutput() RuntimeConfigOutput {
	return i.ToRuntimeConfigOutputWithContext(context.Background())
}

func (i RuntimeConfigArgs) ToRuntimeConfigOutputWithContext(ctx context.Context) RuntimeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeConfigOutput)
}

func (i RuntimeConfigArgs) ToRuntimeConfigPtrOutput() RuntimeConfigPtrOutput {
	return i.ToRuntimeConfigPtrOutputWithContext(context.Background())
}

func (i RuntimeConfigArgs) ToRuntimeConfigPtrOutputWithContext(ctx context.Context) RuntimeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeConfigOutput).ToRuntimeConfigPtrOutputWithContext(ctx)
}

// RuntimeConfigPtrInput is an input type that accepts RuntimeConfigArgs, RuntimeConfigPtr and RuntimeConfigPtrOutput values.
// You can construct a concrete instance of `RuntimeConfigPtrInput` via:
//
//	        RuntimeConfigArgs{...}
//
//	or:
//
//	        nil
type RuntimeConfigPtrInput interface {
	pulumi.Input

	ToRuntimeConfigPtrOutput() RuntimeConfigPtrOutput
	ToRuntimeConfigPtrOutputWithContext(context.Context) RuntimeConfigPtrOutput
}

type runtimeConfigPtrType RuntimeConfigArgs

func RuntimeConfigPtr(v *RuntimeConfigArgs) RuntimeConfigPtrInput {
	return (*runtimeConfigPtrType)(v)
}

func (*runtimeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeConfig)(nil)).Elem()
}

func (i *runtimeConfigPtrType) ToRuntimeConfigPtrOutput() RuntimeConfigPtrOutput {
	return i.ToRuntimeConfigPtrOutputWithContext(context.Background())
}

func (i *runtimeConfigPtrType) ToRuntimeConfigPtrOutputWithContext(ctx context.Context) RuntimeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeConfigPtrOutput)
}

// RuntimeConfig contains the runtime specific configurations for a deployment strategy.
type RuntimeConfigOutput struct{ *pulumi.OutputState }

func (RuntimeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeConfig)(nil)).Elem()
}

func (o RuntimeConfigOutput) ToRuntimeConfigOutput() RuntimeConfigOutput {
	return o
}

func (o RuntimeConfigOutput) ToRuntimeConfigOutputWithContext(ctx context.Context) RuntimeConfigOutput {
	return o
}

func (o RuntimeConfigOutput) ToRuntimeConfigPtrOutput() RuntimeConfigPtrOutput {
	return o.ToRuntimeConfigPtrOutputWithContext(context.Background())
}

func (o RuntimeConfigOutput) ToRuntimeConfigPtrOutputWithContext(ctx context.Context) RuntimeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuntimeConfig) *RuntimeConfig {
		return &v
	}).(RuntimeConfigPtrOutput)
}

// Cloud Run runtime configuration.
func (o RuntimeConfigOutput) CloudRun() CloudRunConfigPtrOutput {
	return o.ApplyT(func(v RuntimeConfig) *CloudRunConfig { return v.CloudRun }).(CloudRunConfigPtrOutput)
}

// Kubernetes runtime configuration.
func (o RuntimeConfigOutput) Kubernetes() KubernetesConfigPtrOutput {
	return o.ApplyT(func(v RuntimeConfig) *KubernetesConfig { return v.Kubernetes }).(KubernetesConfigPtrOutput)
}

type RuntimeConfigPtrOutput struct{ *pulumi.OutputState }

func (RuntimeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeConfig)(nil)).Elem()
}

func (o RuntimeConfigPtrOutput) ToRuntimeConfigPtrOutput() RuntimeConfigPtrOutput {
	return o
}

func (o RuntimeConfigPtrOutput) ToRuntimeConfigPtrOutputWithContext(ctx context.Context) RuntimeConfigPtrOutput {
	return o
}

func (o RuntimeConfigPtrOutput) Elem() RuntimeConfigOutput {
	return o.ApplyT(func(v *RuntimeConfig) RuntimeConfig {
		if v != nil {
			return *v
		}
		var ret RuntimeConfig
		return ret
	}).(RuntimeConfigOutput)
}

// Cloud Run runtime configuration.
func (o RuntimeConfigPtrOutput) CloudRun() CloudRunConfigPtrOutput {
	return o.ApplyT(func(v *RuntimeConfig) *CloudRunConfig {
		if v == nil {
			return nil
		}
		return v.CloudRun
	}).(CloudRunConfigPtrOutput)
}

// Kubernetes runtime configuration.
func (o RuntimeConfigPtrOutput) Kubernetes() KubernetesConfigPtrOutput {
	return o.ApplyT(func(v *RuntimeConfig) *KubernetesConfig {
		if v == nil {
			return nil
		}
		return v.Kubernetes
	}).(KubernetesConfigPtrOutput)
}

// RuntimeConfig contains the runtime specific configurations for a deployment strategy.
type RuntimeConfigResponse struct {
	// Cloud Run runtime configuration.
	CloudRun CloudRunConfigResponse `pulumi:"cloudRun"`
	// Kubernetes runtime configuration.
	Kubernetes KubernetesConfigResponse `pulumi:"kubernetes"`
}

// RuntimeConfig contains the runtime specific configurations for a deployment strategy.
type RuntimeConfigResponseOutput struct{ *pulumi.OutputState }

func (RuntimeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeConfigResponse)(nil)).Elem()
}

func (o RuntimeConfigResponseOutput) ToRuntimeConfigResponseOutput() RuntimeConfigResponseOutput {
	return o
}

func (o RuntimeConfigResponseOutput) ToRuntimeConfigResponseOutputWithContext(ctx context.Context) RuntimeConfigResponseOutput {
	return o
}

// Cloud Run runtime configuration.
func (o RuntimeConfigResponseOutput) CloudRun() CloudRunConfigResponseOutput {
	return o.ApplyT(func(v RuntimeConfigResponse) CloudRunConfigResponse { return v.CloudRun }).(CloudRunConfigResponseOutput)
}

// Kubernetes runtime configuration.
func (o RuntimeConfigResponseOutput) Kubernetes() KubernetesConfigResponseOutput {
	return o.ApplyT(func(v RuntimeConfigResponse) KubernetesConfigResponse { return v.Kubernetes }).(KubernetesConfigResponseOutput)
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipeline struct {
	// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
	Stages []Stage `pulumi:"stages"`
}

// SerialPipelineInput is an input type that accepts SerialPipelineArgs and SerialPipelineOutput values.
// You can construct a concrete instance of `SerialPipelineInput` via:
//
//	SerialPipelineArgs{...}
type SerialPipelineInput interface {
	pulumi.Input

	ToSerialPipelineOutput() SerialPipelineOutput
	ToSerialPipelineOutputWithContext(context.Context) SerialPipelineOutput
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipelineArgs struct {
	// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
	Stages StageArrayInput `pulumi:"stages"`
}

func (SerialPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SerialPipeline)(nil)).Elem()
}

func (i SerialPipelineArgs) ToSerialPipelineOutput() SerialPipelineOutput {
	return i.ToSerialPipelineOutputWithContext(context.Background())
}

func (i SerialPipelineArgs) ToSerialPipelineOutputWithContext(ctx context.Context) SerialPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerialPipelineOutput)
}

func (i SerialPipelineArgs) ToSerialPipelinePtrOutput() SerialPipelinePtrOutput {
	return i.ToSerialPipelinePtrOutputWithContext(context.Background())
}

func (i SerialPipelineArgs) ToSerialPipelinePtrOutputWithContext(ctx context.Context) SerialPipelinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerialPipelineOutput).ToSerialPipelinePtrOutputWithContext(ctx)
}

// SerialPipelinePtrInput is an input type that accepts SerialPipelineArgs, SerialPipelinePtr and SerialPipelinePtrOutput values.
// You can construct a concrete instance of `SerialPipelinePtrInput` via:
//
//	        SerialPipelineArgs{...}
//
//	or:
//
//	        nil
type SerialPipelinePtrInput interface {
	pulumi.Input

	ToSerialPipelinePtrOutput() SerialPipelinePtrOutput
	ToSerialPipelinePtrOutputWithContext(context.Context) SerialPipelinePtrOutput
}

type serialPipelinePtrType SerialPipelineArgs

func SerialPipelinePtr(v *SerialPipelineArgs) SerialPipelinePtrInput {
	return (*serialPipelinePtrType)(v)
}

func (*serialPipelinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SerialPipeline)(nil)).Elem()
}

func (i *serialPipelinePtrType) ToSerialPipelinePtrOutput() SerialPipelinePtrOutput {
	return i.ToSerialPipelinePtrOutputWithContext(context.Background())
}

func (i *serialPipelinePtrType) ToSerialPipelinePtrOutputWithContext(ctx context.Context) SerialPipelinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerialPipelinePtrOutput)
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipelineOutput struct{ *pulumi.OutputState }

func (SerialPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SerialPipeline)(nil)).Elem()
}

func (o SerialPipelineOutput) ToSerialPipelineOutput() SerialPipelineOutput {
	return o
}

func (o SerialPipelineOutput) ToSerialPipelineOutputWithContext(ctx context.Context) SerialPipelineOutput {
	return o
}

func (o SerialPipelineOutput) ToSerialPipelinePtrOutput() SerialPipelinePtrOutput {
	return o.ToSerialPipelinePtrOutputWithContext(context.Background())
}

func (o SerialPipelineOutput) ToSerialPipelinePtrOutputWithContext(ctx context.Context) SerialPipelinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SerialPipeline) *SerialPipeline {
		return &v
	}).(SerialPipelinePtrOutput)
}

// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
func (o SerialPipelineOutput) Stages() StageArrayOutput {
	return o.ApplyT(func(v SerialPipeline) []Stage { return v.Stages }).(StageArrayOutput)
}

type SerialPipelinePtrOutput struct{ *pulumi.OutputState }

func (SerialPipelinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SerialPipeline)(nil)).Elem()
}

func (o SerialPipelinePtrOutput) ToSerialPipelinePtrOutput() SerialPipelinePtrOutput {
	return o
}

func (o SerialPipelinePtrOutput) ToSerialPipelinePtrOutputWithContext(ctx context.Context) SerialPipelinePtrOutput {
	return o
}

func (o SerialPipelinePtrOutput) Elem() SerialPipelineOutput {
	return o.ApplyT(func(v *SerialPipeline) SerialPipeline {
		if v != nil {
			return *v
		}
		var ret SerialPipeline
		return ret
	}).(SerialPipelineOutput)
}

// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
func (o SerialPipelinePtrOutput) Stages() StageArrayOutput {
	return o.ApplyT(func(v *SerialPipeline) []Stage {
		if v == nil {
			return nil
		}
		return v.Stages
	}).(StageArrayOutput)
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipelineResponse struct {
	// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
	Stages []StageResponse `pulumi:"stages"`
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipelineResponseOutput struct{ *pulumi.OutputState }

func (SerialPipelineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SerialPipelineResponse)(nil)).Elem()
}

func (o SerialPipelineResponseOutput) ToSerialPipelineResponseOutput() SerialPipelineResponseOutput {
	return o
}

func (o SerialPipelineResponseOutput) ToSerialPipelineResponseOutputWithContext(ctx context.Context) SerialPipelineResponseOutput {
	return o
}

// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
func (o SerialPipelineResponseOutput) Stages() StageResponseArrayOutput {
	return o.ApplyT(func(v SerialPipelineResponse) []StageResponse { return v.Stages }).(StageResponseArrayOutput)
}

// Information about the Kubernetes Service networking configuration.
type ServiceNetworking struct {
	// Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
	Deployment string `pulumi:"deployment"`
	// Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
	DisablePodOverprovisioning *bool `pulumi:"disablePodOverprovisioning"`
	// Name of the Kubernetes Service.
	Service string `pulumi:"service"`
}

// ServiceNetworkingInput is an input type that accepts ServiceNetworkingArgs and ServiceNetworkingOutput values.
// You can construct a concrete instance of `ServiceNetworkingInput` via:
//
//	ServiceNetworkingArgs{...}
type ServiceNetworkingInput interface {
	pulumi.Input

	ToServiceNetworkingOutput() ServiceNetworkingOutput
	ToServiceNetworkingOutputWithContext(context.Context) ServiceNetworkingOutput
}

// Information about the Kubernetes Service networking configuration.
type ServiceNetworkingArgs struct {
	// Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
	Deployment pulumi.StringInput `pulumi:"deployment"`
	// Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
	DisablePodOverprovisioning pulumi.BoolPtrInput `pulumi:"disablePodOverprovisioning"`
	// Name of the Kubernetes Service.
	Service pulumi.StringInput `pulumi:"service"`
}

func (ServiceNetworkingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworking)(nil)).Elem()
}

func (i ServiceNetworkingArgs) ToServiceNetworkingOutput() ServiceNetworkingOutput {
	return i.ToServiceNetworkingOutputWithContext(context.Background())
}

func (i ServiceNetworkingArgs) ToServiceNetworkingOutputWithContext(ctx context.Context) ServiceNetworkingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkingOutput)
}

func (i ServiceNetworkingArgs) ToServiceNetworkingPtrOutput() ServiceNetworkingPtrOutput {
	return i.ToServiceNetworkingPtrOutputWithContext(context.Background())
}

func (i ServiceNetworkingArgs) ToServiceNetworkingPtrOutputWithContext(ctx context.Context) ServiceNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkingOutput).ToServiceNetworkingPtrOutputWithContext(ctx)
}

// ServiceNetworkingPtrInput is an input type that accepts ServiceNetworkingArgs, ServiceNetworkingPtr and ServiceNetworkingPtrOutput values.
// You can construct a concrete instance of `ServiceNetworkingPtrInput` via:
//
//	        ServiceNetworkingArgs{...}
//
//	or:
//
//	        nil
type ServiceNetworkingPtrInput interface {
	pulumi.Input

	ToServiceNetworkingPtrOutput() ServiceNetworkingPtrOutput
	ToServiceNetworkingPtrOutputWithContext(context.Context) ServiceNetworkingPtrOutput
}

type serviceNetworkingPtrType ServiceNetworkingArgs

func ServiceNetworkingPtr(v *ServiceNetworkingArgs) ServiceNetworkingPtrInput {
	return (*serviceNetworkingPtrType)(v)
}

func (*serviceNetworkingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNetworking)(nil)).Elem()
}

func (i *serviceNetworkingPtrType) ToServiceNetworkingPtrOutput() ServiceNetworkingPtrOutput {
	return i.ToServiceNetworkingPtrOutputWithContext(context.Background())
}

func (i *serviceNetworkingPtrType) ToServiceNetworkingPtrOutputWithContext(ctx context.Context) ServiceNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkingPtrOutput)
}

// Information about the Kubernetes Service networking configuration.
type ServiceNetworkingOutput struct{ *pulumi.OutputState }

func (ServiceNetworkingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworking)(nil)).Elem()
}

func (o ServiceNetworkingOutput) ToServiceNetworkingOutput() ServiceNetworkingOutput {
	return o
}

func (o ServiceNetworkingOutput) ToServiceNetworkingOutputWithContext(ctx context.Context) ServiceNetworkingOutput {
	return o
}

func (o ServiceNetworkingOutput) ToServiceNetworkingPtrOutput() ServiceNetworkingPtrOutput {
	return o.ToServiceNetworkingPtrOutputWithContext(context.Background())
}

func (o ServiceNetworkingOutput) ToServiceNetworkingPtrOutputWithContext(ctx context.Context) ServiceNetworkingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceNetworking) *ServiceNetworking {
		return &v
	}).(ServiceNetworkingPtrOutput)
}

// Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
func (o ServiceNetworkingOutput) Deployment() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNetworking) string { return v.Deployment }).(pulumi.StringOutput)
}

// Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
func (o ServiceNetworkingOutput) DisablePodOverprovisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceNetworking) *bool { return v.DisablePodOverprovisioning }).(pulumi.BoolPtrOutput)
}

// Name of the Kubernetes Service.
func (o ServiceNetworkingOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNetworking) string { return v.Service }).(pulumi.StringOutput)
}

type ServiceNetworkingPtrOutput struct{ *pulumi.OutputState }

func (ServiceNetworkingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNetworking)(nil)).Elem()
}

func (o ServiceNetworkingPtrOutput) ToServiceNetworkingPtrOutput() ServiceNetworkingPtrOutput {
	return o
}

func (o ServiceNetworkingPtrOutput) ToServiceNetworkingPtrOutputWithContext(ctx context.Context) ServiceNetworkingPtrOutput {
	return o
}

func (o ServiceNetworkingPtrOutput) Elem() ServiceNetworkingOutput {
	return o.ApplyT(func(v *ServiceNetworking) ServiceNetworking {
		if v != nil {
			return *v
		}
		var ret ServiceNetworking
		return ret
	}).(ServiceNetworkingOutput)
}

// Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
func (o ServiceNetworkingPtrOutput) Deployment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceNetworking) *string {
		if v == nil {
			return nil
		}
		return &v.Deployment
	}).(pulumi.StringPtrOutput)
}

// Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
func (o ServiceNetworkingPtrOutput) DisablePodOverprovisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceNetworking) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePodOverprovisioning
	}).(pulumi.BoolPtrOutput)
}

// Name of the Kubernetes Service.
func (o ServiceNetworkingPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceNetworking) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// Information about the Kubernetes Service networking configuration.
type ServiceNetworkingResponse struct {
	// Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
	Deployment string `pulumi:"deployment"`
	// Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
	DisablePodOverprovisioning bool `pulumi:"disablePodOverprovisioning"`
	// Name of the Kubernetes Service.
	Service string `pulumi:"service"`
}

// Information about the Kubernetes Service networking configuration.
type ServiceNetworkingResponseOutput struct{ *pulumi.OutputState }

func (ServiceNetworkingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkingResponse)(nil)).Elem()
}

func (o ServiceNetworkingResponseOutput) ToServiceNetworkingResponseOutput() ServiceNetworkingResponseOutput {
	return o
}

func (o ServiceNetworkingResponseOutput) ToServiceNetworkingResponseOutputWithContext(ctx context.Context) ServiceNetworkingResponseOutput {
	return o
}

// Name of the Kubernetes Deployment whose traffic is managed by the specified Service.
func (o ServiceNetworkingResponseOutput) Deployment() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNetworkingResponse) string { return v.Deployment }).(pulumi.StringOutput)
}

// Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.
func (o ServiceNetworkingResponseOutput) DisablePodOverprovisioning() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceNetworkingResponse) bool { return v.DisablePodOverprovisioning }).(pulumi.BoolOutput)
}

// Name of the Kubernetes Service.
func (o ServiceNetworkingResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNetworkingResponse) string { return v.Service }).(pulumi.StringOutput)
}

// SkaffoldSupportedCondition contains information about when support for the release's version of skaffold ends.
type SkaffoldSupportedConditionResponse struct {
	// The time at which this release's version of skaffold will enter maintenance mode.
	MaintenanceModeTime string `pulumi:"maintenanceModeTime"`
	// The skaffold support state for this release's version of skaffold.
	SkaffoldSupportState string `pulumi:"skaffoldSupportState"`
	// True if the version of skaffold used by this release is supported.
	Status bool `pulumi:"status"`
	// The time at which this release's version of skaffold will no longer be supported.
	SupportExpirationTime string `pulumi:"supportExpirationTime"`
}

// SkaffoldSupportedCondition contains information about when support for the release's version of skaffold ends.
type SkaffoldSupportedConditionResponseOutput struct{ *pulumi.OutputState }

func (SkaffoldSupportedConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkaffoldSupportedConditionResponse)(nil)).Elem()
}

func (o SkaffoldSupportedConditionResponseOutput) ToSkaffoldSupportedConditionResponseOutput() SkaffoldSupportedConditionResponseOutput {
	return o
}

func (o SkaffoldSupportedConditionResponseOutput) ToSkaffoldSupportedConditionResponseOutputWithContext(ctx context.Context) SkaffoldSupportedConditionResponseOutput {
	return o
}

// The time at which this release's version of skaffold will enter maintenance mode.
func (o SkaffoldSupportedConditionResponseOutput) MaintenanceModeTime() pulumi.StringOutput {
	return o.ApplyT(func(v SkaffoldSupportedConditionResponse) string { return v.MaintenanceModeTime }).(pulumi.StringOutput)
}

// The skaffold support state for this release's version of skaffold.
func (o SkaffoldSupportedConditionResponseOutput) SkaffoldSupportState() pulumi.StringOutput {
	return o.ApplyT(func(v SkaffoldSupportedConditionResponse) string { return v.SkaffoldSupportState }).(pulumi.StringOutput)
}

// True if the version of skaffold used by this release is supported.
func (o SkaffoldSupportedConditionResponseOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v SkaffoldSupportedConditionResponse) bool { return v.Status }).(pulumi.BoolOutput)
}

// The time at which this release's version of skaffold will no longer be supported.
func (o SkaffoldSupportedConditionResponseOutput) SupportExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v SkaffoldSupportedConditionResponse) string { return v.SupportExpirationTime }).(pulumi.StringOutput)
}

// Stage specifies a location to which to deploy.
type Stage struct {
	// Optional. The deploy parameters to use for the target in this stage.
	DeployParameters []DeployParameters `pulumi:"deployParameters"`
	// Skaffold profiles to use when rendering the manifest for this stage's `Target`.
	Profiles []string `pulumi:"profiles"`
	// Optional. The strategy to use for a `Rollout` to this stage.
	Strategy *Strategy `pulumi:"strategy"`
	// The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
	TargetId *string `pulumi:"targetId"`
}

// StageInput is an input type that accepts StageArgs and StageOutput values.
// You can construct a concrete instance of `StageInput` via:
//
//	StageArgs{...}
type StageInput interface {
	pulumi.Input

	ToStageOutput() StageOutput
	ToStageOutputWithContext(context.Context) StageOutput
}

// Stage specifies a location to which to deploy.
type StageArgs struct {
	// Optional. The deploy parameters to use for the target in this stage.
	DeployParameters DeployParametersArrayInput `pulumi:"deployParameters"`
	// Skaffold profiles to use when rendering the manifest for this stage's `Target`.
	Profiles pulumi.StringArrayInput `pulumi:"profiles"`
	// Optional. The strategy to use for a `Rollout` to this stage.
	Strategy StrategyPtrInput `pulumi:"strategy"`
	// The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
	TargetId pulumi.StringPtrInput `pulumi:"targetId"`
}

func (StageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Stage)(nil)).Elem()
}

func (i StageArgs) ToStageOutput() StageOutput {
	return i.ToStageOutputWithContext(context.Background())
}

func (i StageArgs) ToStageOutputWithContext(ctx context.Context) StageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageOutput)
}

// StageArrayInput is an input type that accepts StageArray and StageArrayOutput values.
// You can construct a concrete instance of `StageArrayInput` via:
//
//	StageArray{ StageArgs{...} }
type StageArrayInput interface {
	pulumi.Input

	ToStageArrayOutput() StageArrayOutput
	ToStageArrayOutputWithContext(context.Context) StageArrayOutput
}

type StageArray []StageInput

func (StageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Stage)(nil)).Elem()
}

func (i StageArray) ToStageArrayOutput() StageArrayOutput {
	return i.ToStageArrayOutputWithContext(context.Background())
}

func (i StageArray) ToStageArrayOutputWithContext(ctx context.Context) StageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageArrayOutput)
}

// Stage specifies a location to which to deploy.
type StageOutput struct{ *pulumi.OutputState }

func (StageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Stage)(nil)).Elem()
}

func (o StageOutput) ToStageOutput() StageOutput {
	return o
}

func (o StageOutput) ToStageOutputWithContext(ctx context.Context) StageOutput {
	return o
}

// Optional. The deploy parameters to use for the target in this stage.
func (o StageOutput) DeployParameters() DeployParametersArrayOutput {
	return o.ApplyT(func(v Stage) []DeployParameters { return v.DeployParameters }).(DeployParametersArrayOutput)
}

// Skaffold profiles to use when rendering the manifest for this stage's `Target`.
func (o StageOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Stage) []string { return v.Profiles }).(pulumi.StringArrayOutput)
}

// Optional. The strategy to use for a `Rollout` to this stage.
func (o StageOutput) Strategy() StrategyPtrOutput {
	return o.ApplyT(func(v Stage) *Strategy { return v.Strategy }).(StrategyPtrOutput)
}

// The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
func (o StageOutput) TargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Stage) *string { return v.TargetId }).(pulumi.StringPtrOutput)
}

type StageArrayOutput struct{ *pulumi.OutputState }

func (StageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Stage)(nil)).Elem()
}

func (o StageArrayOutput) ToStageArrayOutput() StageArrayOutput {
	return o
}

func (o StageArrayOutput) ToStageArrayOutputWithContext(ctx context.Context) StageArrayOutput {
	return o
}

func (o StageArrayOutput) Index(i pulumi.IntInput) StageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Stage {
		return vs[0].([]Stage)[vs[1].(int)]
	}).(StageOutput)
}

// Stage specifies a location to which to deploy.
type StageResponse struct {
	// Optional. The deploy parameters to use for the target in this stage.
	DeployParameters []DeployParametersResponse `pulumi:"deployParameters"`
	// Skaffold profiles to use when rendering the manifest for this stage's `Target`.
	Profiles []string `pulumi:"profiles"`
	// Optional. The strategy to use for a `Rollout` to this stage.
	Strategy StrategyResponse `pulumi:"strategy"`
	// The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
	TargetId string `pulumi:"targetId"`
}

// Stage specifies a location to which to deploy.
type StageResponseOutput struct{ *pulumi.OutputState }

func (StageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageResponse)(nil)).Elem()
}

func (o StageResponseOutput) ToStageResponseOutput() StageResponseOutput {
	return o
}

func (o StageResponseOutput) ToStageResponseOutputWithContext(ctx context.Context) StageResponseOutput {
	return o
}

// Optional. The deploy parameters to use for the target in this stage.
func (o StageResponseOutput) DeployParameters() DeployParametersResponseArrayOutput {
	return o.ApplyT(func(v StageResponse) []DeployParametersResponse { return v.DeployParameters }).(DeployParametersResponseArrayOutput)
}

// Skaffold profiles to use when rendering the manifest for this stage's `Target`.
func (o StageResponseOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StageResponse) []string { return v.Profiles }).(pulumi.StringArrayOutput)
}

// Optional. The strategy to use for a `Rollout` to this stage.
func (o StageResponseOutput) Strategy() StrategyResponseOutput {
	return o.ApplyT(func(v StageResponse) StrategyResponse { return v.Strategy }).(StrategyResponseOutput)
}

// The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
func (o StageResponseOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v StageResponse) string { return v.TargetId }).(pulumi.StringOutput)
}

type StageResponseArrayOutput struct{ *pulumi.OutputState }

func (StageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageResponse)(nil)).Elem()
}

func (o StageResponseArrayOutput) ToStageResponseArrayOutput() StageResponseArrayOutput {
	return o
}

func (o StageResponseArrayOutput) ToStageResponseArrayOutputWithContext(ctx context.Context) StageResponseArrayOutput {
	return o
}

func (o StageResponseArrayOutput) Index(i pulumi.IntInput) StageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StageResponse {
		return vs[0].([]StageResponse)[vs[1].(int)]
	}).(StageResponseOutput)
}

// Standard represents the standard deployment strategy.
type Standard struct {
	// Optional. Configuration for the postdeploy job. If this is not configured, postdeploy job will not be present.
	Postdeploy *Postdeploy `pulumi:"postdeploy"`
	// Optional. Configuration for the predeploy job. If this is not configured, predeploy job will not be present.
	Predeploy *Predeploy `pulumi:"predeploy"`
	// Whether to verify a deployment.
	Verify *bool `pulumi:"verify"`
}

// StandardInput is an input type that accepts StandardArgs and StandardOutput values.
// You can construct a concrete instance of `StandardInput` via:
//
//	StandardArgs{...}
type StandardInput interface {
	pulumi.Input

	ToStandardOutput() StandardOutput
	ToStandardOutputWithContext(context.Context) StandardOutput
}

// Standard represents the standard deployment strategy.
type StandardArgs struct {
	// Optional. Configuration for the postdeploy job. If this is not configured, postdeploy job will not be present.
	Postdeploy PostdeployPtrInput `pulumi:"postdeploy"`
	// Optional. Configuration for the predeploy job. If this is not configured, predeploy job will not be present.
	Predeploy PredeployPtrInput `pulumi:"predeploy"`
	// Whether to verify a deployment.
	Verify pulumi.BoolPtrInput `pulumi:"verify"`
}

func (StandardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Standard)(nil)).Elem()
}

func (i StandardArgs) ToStandardOutput() StandardOutput {
	return i.ToStandardOutputWithContext(context.Background())
}

func (i StandardArgs) ToStandardOutputWithContext(ctx context.Context) StandardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardOutput)
}

func (i StandardArgs) ToStandardPtrOutput() StandardPtrOutput {
	return i.ToStandardPtrOutputWithContext(context.Background())
}

func (i StandardArgs) ToStandardPtrOutputWithContext(ctx context.Context) StandardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardOutput).ToStandardPtrOutputWithContext(ctx)
}

// StandardPtrInput is an input type that accepts StandardArgs, StandardPtr and StandardPtrOutput values.
// You can construct a concrete instance of `StandardPtrInput` via:
//
//	        StandardArgs{...}
//
//	or:
//
//	        nil
type StandardPtrInput interface {
	pulumi.Input

	ToStandardPtrOutput() StandardPtrOutput
	ToStandardPtrOutputWithContext(context.Context) StandardPtrOutput
}

type standardPtrType StandardArgs

func StandardPtr(v *StandardArgs) StandardPtrInput {
	return (*standardPtrType)(v)
}

func (*standardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Standard)(nil)).Elem()
}

func (i *standardPtrType) ToStandardPtrOutput() StandardPtrOutput {
	return i.ToStandardPtrOutputWithContext(context.Background())
}

func (i *standardPtrType) ToStandardPtrOutputWithContext(ctx context.Context) StandardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardPtrOutput)
}

// Standard represents the standard deployment strategy.
type StandardOutput struct{ *pulumi.OutputState }

func (StandardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Standard)(nil)).Elem()
}

func (o StandardOutput) ToStandardOutput() StandardOutput {
	return o
}

func (o StandardOutput) ToStandardOutputWithContext(ctx context.Context) StandardOutput {
	return o
}

func (o StandardOutput) ToStandardPtrOutput() StandardPtrOutput {
	return o.ToStandardPtrOutputWithContext(context.Background())
}

func (o StandardOutput) ToStandardPtrOutputWithContext(ctx context.Context) StandardPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Standard) *Standard {
		return &v
	}).(StandardPtrOutput)
}

// Optional. Configuration for the postdeploy job. If this is not configured, postdeploy job will not be present.
func (o StandardOutput) Postdeploy() PostdeployPtrOutput {
	return o.ApplyT(func(v Standard) *Postdeploy { return v.Postdeploy }).(PostdeployPtrOutput)
}

// Optional. Configuration for the predeploy job. If this is not configured, predeploy job will not be present.
func (o StandardOutput) Predeploy() PredeployPtrOutput {
	return o.ApplyT(func(v Standard) *Predeploy { return v.Predeploy }).(PredeployPtrOutput)
}

// Whether to verify a deployment.
func (o StandardOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Standard) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

type StandardPtrOutput struct{ *pulumi.OutputState }

func (StandardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Standard)(nil)).Elem()
}

func (o StandardPtrOutput) ToStandardPtrOutput() StandardPtrOutput {
	return o
}

func (o StandardPtrOutput) ToStandardPtrOutputWithContext(ctx context.Context) StandardPtrOutput {
	return o
}

func (o StandardPtrOutput) Elem() StandardOutput {
	return o.ApplyT(func(v *Standard) Standard {
		if v != nil {
			return *v
		}
		var ret Standard
		return ret
	}).(StandardOutput)
}

// Optional. Configuration for the postdeploy job. If this is not configured, postdeploy job will not be present.
func (o StandardPtrOutput) Postdeploy() PostdeployPtrOutput {
	return o.ApplyT(func(v *Standard) *Postdeploy {
		if v == nil {
			return nil
		}
		return v.Postdeploy
	}).(PostdeployPtrOutput)
}

// Optional. Configuration for the predeploy job. If this is not configured, predeploy job will not be present.
func (o StandardPtrOutput) Predeploy() PredeployPtrOutput {
	return o.ApplyT(func(v *Standard) *Predeploy {
		if v == nil {
			return nil
		}
		return v.Predeploy
	}).(PredeployPtrOutput)
}

// Whether to verify a deployment.
func (o StandardPtrOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Standard) *bool {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(pulumi.BoolPtrOutput)
}

// Standard represents the standard deployment strategy.
type StandardResponse struct {
	// Optional. Configuration for the postdeploy job. If this is not configured, postdeploy job will not be present.
	Postdeploy PostdeployResponse `pulumi:"postdeploy"`
	// Optional. Configuration for the predeploy job. If this is not configured, predeploy job will not be present.
	Predeploy PredeployResponse `pulumi:"predeploy"`
	// Whether to verify a deployment.
	Verify bool `pulumi:"verify"`
}

// Standard represents the standard deployment strategy.
type StandardResponseOutput struct{ *pulumi.OutputState }

func (StandardResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardResponse)(nil)).Elem()
}

func (o StandardResponseOutput) ToStandardResponseOutput() StandardResponseOutput {
	return o
}

func (o StandardResponseOutput) ToStandardResponseOutputWithContext(ctx context.Context) StandardResponseOutput {
	return o
}

// Optional. Configuration for the postdeploy job. If this is not configured, postdeploy job will not be present.
func (o StandardResponseOutput) Postdeploy() PostdeployResponseOutput {
	return o.ApplyT(func(v StandardResponse) PostdeployResponse { return v.Postdeploy }).(PostdeployResponseOutput)
}

// Optional. Configuration for the predeploy job. If this is not configured, predeploy job will not be present.
func (o StandardResponseOutput) Predeploy() PredeployResponseOutput {
	return o.ApplyT(func(v StandardResponse) PredeployResponse { return v.Predeploy }).(PredeployResponseOutput)
}

// Whether to verify a deployment.
func (o StandardResponseOutput) Verify() pulumi.BoolOutput {
	return o.ApplyT(func(v StandardResponse) bool { return v.Verify }).(pulumi.BoolOutput)
}

// Strategy contains deployment strategy information.
type Strategy struct {
	// Canary deployment strategy provides progressive percentage based deployments to a Target.
	Canary *Canary `pulumi:"canary"`
	// Standard deployment strategy executes a single deploy and allows verifying the deployment.
	Standard *Standard `pulumi:"standard"`
}

// StrategyInput is an input type that accepts StrategyArgs and StrategyOutput values.
// You can construct a concrete instance of `StrategyInput` via:
//
//	StrategyArgs{...}
type StrategyInput interface {
	pulumi.Input

	ToStrategyOutput() StrategyOutput
	ToStrategyOutputWithContext(context.Context) StrategyOutput
}

// Strategy contains deployment strategy information.
type StrategyArgs struct {
	// Canary deployment strategy provides progressive percentage based deployments to a Target.
	Canary CanaryPtrInput `pulumi:"canary"`
	// Standard deployment strategy executes a single deploy and allows verifying the deployment.
	Standard StandardPtrInput `pulumi:"standard"`
}

func (StrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Strategy)(nil)).Elem()
}

func (i StrategyArgs) ToStrategyOutput() StrategyOutput {
	return i.ToStrategyOutputWithContext(context.Background())
}

func (i StrategyArgs) ToStrategyOutputWithContext(ctx context.Context) StrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyOutput)
}

func (i StrategyArgs) ToStrategyPtrOutput() StrategyPtrOutput {
	return i.ToStrategyPtrOutputWithContext(context.Background())
}

func (i StrategyArgs) ToStrategyPtrOutputWithContext(ctx context.Context) StrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyOutput).ToStrategyPtrOutputWithContext(ctx)
}

// StrategyPtrInput is an input type that accepts StrategyArgs, StrategyPtr and StrategyPtrOutput values.
// You can construct a concrete instance of `StrategyPtrInput` via:
//
//	        StrategyArgs{...}
//
//	or:
//
//	        nil
type StrategyPtrInput interface {
	pulumi.Input

	ToStrategyPtrOutput() StrategyPtrOutput
	ToStrategyPtrOutputWithContext(context.Context) StrategyPtrOutput
}

type strategyPtrType StrategyArgs

func StrategyPtr(v *StrategyArgs) StrategyPtrInput {
	return (*strategyPtrType)(v)
}

func (*strategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Strategy)(nil)).Elem()
}

func (i *strategyPtrType) ToStrategyPtrOutput() StrategyPtrOutput {
	return i.ToStrategyPtrOutputWithContext(context.Background())
}

func (i *strategyPtrType) ToStrategyPtrOutputWithContext(ctx context.Context) StrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyPtrOutput)
}

// Strategy contains deployment strategy information.
type StrategyOutput struct{ *pulumi.OutputState }

func (StrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Strategy)(nil)).Elem()
}

func (o StrategyOutput) ToStrategyOutput() StrategyOutput {
	return o
}

func (o StrategyOutput) ToStrategyOutputWithContext(ctx context.Context) StrategyOutput {
	return o
}

func (o StrategyOutput) ToStrategyPtrOutput() StrategyPtrOutput {
	return o.ToStrategyPtrOutputWithContext(context.Background())
}

func (o StrategyOutput) ToStrategyPtrOutputWithContext(ctx context.Context) StrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Strategy) *Strategy {
		return &v
	}).(StrategyPtrOutput)
}

// Canary deployment strategy provides progressive percentage based deployments to a Target.
func (o StrategyOutput) Canary() CanaryPtrOutput {
	return o.ApplyT(func(v Strategy) *Canary { return v.Canary }).(CanaryPtrOutput)
}

// Standard deployment strategy executes a single deploy and allows verifying the deployment.
func (o StrategyOutput) Standard() StandardPtrOutput {
	return o.ApplyT(func(v Strategy) *Standard { return v.Standard }).(StandardPtrOutput)
}

type StrategyPtrOutput struct{ *pulumi.OutputState }

func (StrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Strategy)(nil)).Elem()
}

func (o StrategyPtrOutput) ToStrategyPtrOutput() StrategyPtrOutput {
	return o
}

func (o StrategyPtrOutput) ToStrategyPtrOutputWithContext(ctx context.Context) StrategyPtrOutput {
	return o
}

func (o StrategyPtrOutput) Elem() StrategyOutput {
	return o.ApplyT(func(v *Strategy) Strategy {
		if v != nil {
			return *v
		}
		var ret Strategy
		return ret
	}).(StrategyOutput)
}

// Canary deployment strategy provides progressive percentage based deployments to a Target.
func (o StrategyPtrOutput) Canary() CanaryPtrOutput {
	return o.ApplyT(func(v *Strategy) *Canary {
		if v == nil {
			return nil
		}
		return v.Canary
	}).(CanaryPtrOutput)
}

// Standard deployment strategy executes a single deploy and allows verifying the deployment.
func (o StrategyPtrOutput) Standard() StandardPtrOutput {
	return o.ApplyT(func(v *Strategy) *Standard {
		if v == nil {
			return nil
		}
		return v.Standard
	}).(StandardPtrOutput)
}

// Strategy contains deployment strategy information.
type StrategyResponse struct {
	// Canary deployment strategy provides progressive percentage based deployments to a Target.
	Canary CanaryResponse `pulumi:"canary"`
	// Standard deployment strategy executes a single deploy and allows verifying the deployment.
	Standard StandardResponse `pulumi:"standard"`
}

// Strategy contains deployment strategy information.
type StrategyResponseOutput struct{ *pulumi.OutputState }

func (StrategyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StrategyResponse)(nil)).Elem()
}

func (o StrategyResponseOutput) ToStrategyResponseOutput() StrategyResponseOutput {
	return o
}

func (o StrategyResponseOutput) ToStrategyResponseOutputWithContext(ctx context.Context) StrategyResponseOutput {
	return o
}

// Canary deployment strategy provides progressive percentage based deployments to a Target.
func (o StrategyResponseOutput) Canary() CanaryResponseOutput {
	return o.ApplyT(func(v StrategyResponse) CanaryResponse { return v.Canary }).(CanaryResponseOutput)
}

// Standard deployment strategy executes a single deploy and allows verifying the deployment.
func (o StrategyResponseOutput) Standard() StandardResponseOutput {
	return o.ApplyT(func(v StrategyResponse) StandardResponse { return v.Standard }).(StandardResponseOutput)
}

// The artifacts produced by a target render operation.
type TargetArtifactResponse struct {
	// URI of a directory containing the artifacts. This contains deployment configuration used by Skaffold during a rollout, and all paths are relative to this location.
	ArtifactUri string `pulumi:"artifactUri"`
	// File path of the rendered manifest relative to the URI.
	ManifestPath string `pulumi:"manifestPath"`
	// Map from the phase ID to the phase artifacts for the `Target`.
	PhaseArtifacts map[string]PhaseArtifactResponse `pulumi:"phaseArtifacts"`
	// File path of the resolved Skaffold configuration relative to the URI.
	SkaffoldConfigPath string `pulumi:"skaffoldConfigPath"`
}

// The artifacts produced by a target render operation.
type TargetArtifactResponseOutput struct{ *pulumi.OutputState }

func (TargetArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetArtifactResponse)(nil)).Elem()
}

func (o TargetArtifactResponseOutput) ToTargetArtifactResponseOutput() TargetArtifactResponseOutput {
	return o
}

func (o TargetArtifactResponseOutput) ToTargetArtifactResponseOutputWithContext(ctx context.Context) TargetArtifactResponseOutput {
	return o
}

// URI of a directory containing the artifacts. This contains deployment configuration used by Skaffold during a rollout, and all paths are relative to this location.
func (o TargetArtifactResponseOutput) ArtifactUri() pulumi.StringOutput {
	return o.ApplyT(func(v TargetArtifactResponse) string { return v.ArtifactUri }).(pulumi.StringOutput)
}

// File path of the rendered manifest relative to the URI.
func (o TargetArtifactResponseOutput) ManifestPath() pulumi.StringOutput {
	return o.ApplyT(func(v TargetArtifactResponse) string { return v.ManifestPath }).(pulumi.StringOutput)
}

// Map from the phase ID to the phase artifacts for the `Target`.
func (o TargetArtifactResponseOutput) PhaseArtifacts() PhaseArtifactResponseMapOutput {
	return o.ApplyT(func(v TargetArtifactResponse) map[string]PhaseArtifactResponse { return v.PhaseArtifacts }).(PhaseArtifactResponseMapOutput)
}

// File path of the resolved Skaffold configuration relative to the URI.
func (o TargetArtifactResponseOutput) SkaffoldConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v TargetArtifactResponse) string { return v.SkaffoldConfigPath }).(pulumi.StringOutput)
}

type TargetArtifactResponseMapOutput struct{ *pulumi.OutputState }

func (TargetArtifactResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TargetArtifactResponse)(nil)).Elem()
}

func (o TargetArtifactResponseMapOutput) ToTargetArtifactResponseMapOutput() TargetArtifactResponseMapOutput {
	return o
}

func (o TargetArtifactResponseMapOutput) ToTargetArtifactResponseMapOutputWithContext(ctx context.Context) TargetArtifactResponseMapOutput {
	return o
}

func (o TargetArtifactResponseMapOutput) MapIndex(k pulumi.StringInput) TargetArtifactResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TargetArtifactResponse {
		return vs[0].(map[string]TargetArtifactResponse)[vs[1].(string)]
	}).(TargetArtifactResponseOutput)
}

// Contains criteria for selecting Targets. Attributes provided must match the target resource in order for policy restrictions to apply. E.g. if id "prod" and labels "foo: bar" are given the target resource must match both that id and have that label in order to be selected.
type TargetAttribute struct {
	// ID of the `Target`. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine which target is being referred to * "*", all targets in a location.
	Id *string `pulumi:"id"`
	// Target labels.
	Labels map[string]string `pulumi:"labels"`
}

// TargetAttributeInput is an input type that accepts TargetAttributeArgs and TargetAttributeOutput values.
// You can construct a concrete instance of `TargetAttributeInput` via:
//
//	TargetAttributeArgs{...}
type TargetAttributeInput interface {
	pulumi.Input

	ToTargetAttributeOutput() TargetAttributeOutput
	ToTargetAttributeOutputWithContext(context.Context) TargetAttributeOutput
}

// Contains criteria for selecting Targets. Attributes provided must match the target resource in order for policy restrictions to apply. E.g. if id "prod" and labels "foo: bar" are given the target resource must match both that id and have that label in order to be selected.
type TargetAttributeArgs struct {
	// ID of the `Target`. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine which target is being referred to * "*", all targets in a location.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Target labels.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (TargetAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetAttribute)(nil)).Elem()
}

func (i TargetAttributeArgs) ToTargetAttributeOutput() TargetAttributeOutput {
	return i.ToTargetAttributeOutputWithContext(context.Background())
}

func (i TargetAttributeArgs) ToTargetAttributeOutputWithContext(ctx context.Context) TargetAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetAttributeOutput)
}

// TargetAttributeArrayInput is an input type that accepts TargetAttributeArray and TargetAttributeArrayOutput values.
// You can construct a concrete instance of `TargetAttributeArrayInput` via:
//
//	TargetAttributeArray{ TargetAttributeArgs{...} }
type TargetAttributeArrayInput interface {
	pulumi.Input

	ToTargetAttributeArrayOutput() TargetAttributeArrayOutput
	ToTargetAttributeArrayOutputWithContext(context.Context) TargetAttributeArrayOutput
}

type TargetAttributeArray []TargetAttributeInput

func (TargetAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetAttribute)(nil)).Elem()
}

func (i TargetAttributeArray) ToTargetAttributeArrayOutput() TargetAttributeArrayOutput {
	return i.ToTargetAttributeArrayOutputWithContext(context.Background())
}

func (i TargetAttributeArray) ToTargetAttributeArrayOutputWithContext(ctx context.Context) TargetAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetAttributeArrayOutput)
}

// Contains criteria for selecting Targets. Attributes provided must match the target resource in order for policy restrictions to apply. E.g. if id "prod" and labels "foo: bar" are given the target resource must match both that id and have that label in order to be selected.
type TargetAttributeOutput struct{ *pulumi.OutputState }

func (TargetAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetAttribute)(nil)).Elem()
}

func (o TargetAttributeOutput) ToTargetAttributeOutput() TargetAttributeOutput {
	return o
}

func (o TargetAttributeOutput) ToTargetAttributeOutputWithContext(ctx context.Context) TargetAttributeOutput {
	return o
}

// ID of the `Target`. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine which target is being referred to * "*", all targets in a location.
func (o TargetAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Target labels.
func (o TargetAttributeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetAttribute) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type TargetAttributeArrayOutput struct{ *pulumi.OutputState }

func (TargetAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetAttribute)(nil)).Elem()
}

func (o TargetAttributeArrayOutput) ToTargetAttributeArrayOutput() TargetAttributeArrayOutput {
	return o
}

func (o TargetAttributeArrayOutput) ToTargetAttributeArrayOutputWithContext(ctx context.Context) TargetAttributeArrayOutput {
	return o
}

func (o TargetAttributeArrayOutput) Index(i pulumi.IntInput) TargetAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetAttribute {
		return vs[0].([]TargetAttribute)[vs[1].(int)]
	}).(TargetAttributeOutput)
}

// Contains criteria for selecting Targets. Attributes provided must match the target resource in order for policy restrictions to apply. E.g. if id "prod" and labels "foo: bar" are given the target resource must match both that id and have that label in order to be selected.
type TargetAttributeResponse struct {
	// Target labels.
	Labels map[string]string `pulumi:"labels"`
}

// Contains criteria for selecting Targets. Attributes provided must match the target resource in order for policy restrictions to apply. E.g. if id "prod" and labels "foo: bar" are given the target resource must match both that id and have that label in order to be selected.
type TargetAttributeResponseOutput struct{ *pulumi.OutputState }

func (TargetAttributeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetAttributeResponse)(nil)).Elem()
}

func (o TargetAttributeResponseOutput) ToTargetAttributeResponseOutput() TargetAttributeResponseOutput {
	return o
}

func (o TargetAttributeResponseOutput) ToTargetAttributeResponseOutputWithContext(ctx context.Context) TargetAttributeResponseOutput {
	return o
}

// Target labels.
func (o TargetAttributeResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetAttributeResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type TargetAttributeResponseArrayOutput struct{ *pulumi.OutputState }

func (TargetAttributeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetAttributeResponse)(nil)).Elem()
}

func (o TargetAttributeResponseArrayOutput) ToTargetAttributeResponseArrayOutput() TargetAttributeResponseArrayOutput {
	return o
}

func (o TargetAttributeResponseArrayOutput) ToTargetAttributeResponseArrayOutputWithContext(ctx context.Context) TargetAttributeResponseArrayOutput {
	return o
}

func (o TargetAttributeResponseArrayOutput) Index(i pulumi.IntInput) TargetAttributeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetAttributeResponse {
		return vs[0].([]TargetAttributeResponse)[vs[1].(int)]
	}).(TargetAttributeResponseOutput)
}

// Details of rendering for a single target.
type TargetRenderResponse struct {
	// Reason this render failed. This will always be unspecified while the render in progress.
	FailureCause string `pulumi:"failureCause"`
	// Additional information about the render failure, if available.
	FailureMessage string `pulumi:"failureMessage"`
	// Metadata related to the `Release` render for this Target.
	Metadata RenderMetadataResponse `pulumi:"metadata"`
	// The resource name of the Cloud Build `Build` object that is used to render the manifest for this target. Format is `projects/{project}/locations/{location}/builds/{build}`.
	RenderingBuild string `pulumi:"renderingBuild"`
	// Current state of the render operation for this Target.
	RenderingState string `pulumi:"renderingState"`
}

// Details of rendering for a single target.
type TargetRenderResponseOutput struct{ *pulumi.OutputState }

func (TargetRenderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetRenderResponse)(nil)).Elem()
}

func (o TargetRenderResponseOutput) ToTargetRenderResponseOutput() TargetRenderResponseOutput {
	return o
}

func (o TargetRenderResponseOutput) ToTargetRenderResponseOutputWithContext(ctx context.Context) TargetRenderResponseOutput {
	return o
}

// Reason this render failed. This will always be unspecified while the render in progress.
func (o TargetRenderResponseOutput) FailureCause() pulumi.StringOutput {
	return o.ApplyT(func(v TargetRenderResponse) string { return v.FailureCause }).(pulumi.StringOutput)
}

// Additional information about the render failure, if available.
func (o TargetRenderResponseOutput) FailureMessage() pulumi.StringOutput {
	return o.ApplyT(func(v TargetRenderResponse) string { return v.FailureMessage }).(pulumi.StringOutput)
}

// Metadata related to the `Release` render for this Target.
func (o TargetRenderResponseOutput) Metadata() RenderMetadataResponseOutput {
	return o.ApplyT(func(v TargetRenderResponse) RenderMetadataResponse { return v.Metadata }).(RenderMetadataResponseOutput)
}

// The resource name of the Cloud Build `Build` object that is used to render the manifest for this target. Format is `projects/{project}/locations/{location}/builds/{build}`.
func (o TargetRenderResponseOutput) RenderingBuild() pulumi.StringOutput {
	return o.ApplyT(func(v TargetRenderResponse) string { return v.RenderingBuild }).(pulumi.StringOutput)
}

// Current state of the render operation for this Target.
func (o TargetRenderResponseOutput) RenderingState() pulumi.StringOutput {
	return o.ApplyT(func(v TargetRenderResponse) string { return v.RenderingState }).(pulumi.StringOutput)
}

type TargetRenderResponseMapOutput struct{ *pulumi.OutputState }

func (TargetRenderResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TargetRenderResponse)(nil)).Elem()
}

func (o TargetRenderResponseMapOutput) ToTargetRenderResponseMapOutput() TargetRenderResponseMapOutput {
	return o
}

func (o TargetRenderResponseMapOutput) ToTargetRenderResponseMapOutputWithContext(ctx context.Context) TargetRenderResponseMapOutput {
	return o
}

func (o TargetRenderResponseMapOutput) MapIndex(k pulumi.StringInput) TargetRenderResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TargetRenderResponse {
		return vs[0].(map[string]TargetRenderResponse)[vs[1].(string)]
	}).(TargetRenderResponseOutput)
}

// A `Target` resource in the Cloud Deploy API. A `Target` defines a location to which a Skaffold configuration can be deployed.
type TargetResponse struct {
	// Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	Annotations map[string]string `pulumi:"annotations"`
	// Optional. Information specifying an Anthos Cluster.
	AnthosCluster AnthosClusterResponse `pulumi:"anthosCluster"`
	// Time at which the `Target` was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. The deploy parameters to use for this target.
	DeployParameters map[string]string `pulumi:"deployParameters"`
	// Optional. Description of the `Target`. Max length is 255 characters.
	Description string `pulumi:"description"`
	// Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag string `pulumi:"etag"`
	// Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.
	ExecutionConfigs []ExecutionConfigResponse `pulumi:"executionConfigs"`
	// Optional. Information specifying a GKE Cluster.
	Gke GkeClusterResponse `pulumi:"gke"`
	// Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Information specifying a multiTarget.
	MultiTarget MultiTargetResponse `pulumi:"multiTarget"`
	// Optional. Name of the `Target`. Format is `projects/{project}/locations/{location}/targets/a-z{0,62}`.
	Name string `pulumi:"name"`
	// Optional. Whether or not the `Target` requires approval.
	RequireApproval bool `pulumi:"requireApproval"`
	// Optional. Information specifying a Cloud Run deployment target.
	Run CloudRunLocationResponse `pulumi:"run"`
	// Resource id of the `Target`.
	TargetId string `pulumi:"targetId"`
	// Unique identifier of the `Target`.
	Uid string `pulumi:"uid"`
	// Most recent time at which the `Target` was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// A `Target` resource in the Cloud Deploy API. A `Target` defines a location to which a Skaffold configuration can be deployed.
type TargetResponseOutput struct{ *pulumi.OutputState }

func (TargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetResponse)(nil)).Elem()
}

func (o TargetResponseOutput) ToTargetResponseOutput() TargetResponseOutput {
	return o
}

func (o TargetResponseOutput) ToTargetResponseOutputWithContext(ctx context.Context) TargetResponseOutput {
	return o
}

// Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
func (o TargetResponseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetResponse) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Optional. Information specifying an Anthos Cluster.
func (o TargetResponseOutput) AnthosCluster() AnthosClusterResponseOutput {
	return o.ApplyT(func(v TargetResponse) AnthosClusterResponse { return v.AnthosCluster }).(AnthosClusterResponseOutput)
}

// Time at which the `Target` was created.
func (o TargetResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. The deploy parameters to use for this target.
func (o TargetResponseOutput) DeployParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetResponse) map[string]string { return v.DeployParameters }).(pulumi.StringMapOutput)
}

// Optional. Description of the `Target`. Max length is 255 characters.
func (o TargetResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o TargetResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.
func (o TargetResponseOutput) ExecutionConfigs() ExecutionConfigResponseArrayOutput {
	return o.ApplyT(func(v TargetResponse) []ExecutionConfigResponse { return v.ExecutionConfigs }).(ExecutionConfigResponseArrayOutput)
}

// Optional. Information specifying a GKE Cluster.
func (o TargetResponseOutput) Gke() GkeClusterResponseOutput {
	return o.ApplyT(func(v TargetResponse) GkeClusterResponse { return v.Gke }).(GkeClusterResponseOutput)
}

// Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
func (o TargetResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Optional. Information specifying a multiTarget.
func (o TargetResponseOutput) MultiTarget() MultiTargetResponseOutput {
	return o.ApplyT(func(v TargetResponse) MultiTargetResponse { return v.MultiTarget }).(MultiTargetResponseOutput)
}

// Optional. Name of the `Target`. Format is `projects/{project}/locations/{location}/targets/a-z{0,62}`.
func (o TargetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. Whether or not the `Target` requires approval.
func (o TargetResponseOutput) RequireApproval() pulumi.BoolOutput {
	return o.ApplyT(func(v TargetResponse) bool { return v.RequireApproval }).(pulumi.BoolOutput)
}

// Optional. Information specifying a Cloud Run deployment target.
func (o TargetResponseOutput) Run() CloudRunLocationResponseOutput {
	return o.ApplyT(func(v TargetResponse) CloudRunLocationResponse { return v.Run }).(CloudRunLocationResponseOutput)
}

// Resource id of the `Target`.
func (o TargetResponseOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.TargetId }).(pulumi.StringOutput)
}

// Unique identifier of the `Target`.
func (o TargetResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.Uid }).(pulumi.StringOutput)
}

// Most recent time at which the `Target` was updated.
func (o TargetResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type TargetResponseArrayOutput struct{ *pulumi.OutputState }

func (TargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetResponse)(nil)).Elem()
}

func (o TargetResponseArrayOutput) ToTargetResponseArrayOutput() TargetResponseArrayOutput {
	return o
}

func (o TargetResponseArrayOutput) ToTargetResponseArrayOutputWithContext(ctx context.Context) TargetResponseArrayOutput {
	return o
}

func (o TargetResponseArrayOutput) Index(i pulumi.IntInput) TargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetResponse {
		return vs[0].([]TargetResponse)[vs[1].(int)]
	}).(TargetResponseOutput)
}

// TargetsPresentCondition contains information on any Targets defined in the Delivery Pipeline that do not actually exist.
type TargetsPresentConditionResponse struct {
	// The list of Target names that do not exist. For example, `projects/{project_id}/locations/{location_name}/targets/{target_name}`.
	MissingTargets []string `pulumi:"missingTargets"`
	// True if there aren't any missing Targets.
	Status bool `pulumi:"status"`
	// Last time the condition was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// TargetsPresentCondition contains information on any Targets defined in the Delivery Pipeline that do not actually exist.
type TargetsPresentConditionResponseOutput struct{ *pulumi.OutputState }

func (TargetsPresentConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetsPresentConditionResponse)(nil)).Elem()
}

func (o TargetsPresentConditionResponseOutput) ToTargetsPresentConditionResponseOutput() TargetsPresentConditionResponseOutput {
	return o
}

func (o TargetsPresentConditionResponseOutput) ToTargetsPresentConditionResponseOutputWithContext(ctx context.Context) TargetsPresentConditionResponseOutput {
	return o
}

// The list of Target names that do not exist. For example, `projects/{project_id}/locations/{location_name}/targets/{target_name}`.
func (o TargetsPresentConditionResponseOutput) MissingTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TargetsPresentConditionResponse) []string { return v.MissingTargets }).(pulumi.StringArrayOutput)
}

// True if there aren't any missing Targets.
func (o TargetsPresentConditionResponseOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v TargetsPresentConditionResponse) bool { return v.Status }).(pulumi.BoolOutput)
}

// Last time the condition was updated.
func (o TargetsPresentConditionResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TargetsPresentConditionResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// TargetsTypeCondition contains information on whether the Targets defined in the Delivery Pipeline are of the same type.
type TargetsTypeConditionResponse struct {
	// Human readable error message.
	ErrorDetails string `pulumi:"errorDetails"`
	// True if the targets are all a comparable type. For example this is true if all targets are GKE clusters. This is false if some targets are Cloud Run targets and others are GKE clusters.
	Status bool `pulumi:"status"`
}

// TargetsTypeCondition contains information on whether the Targets defined in the Delivery Pipeline are of the same type.
type TargetsTypeConditionResponseOutput struct{ *pulumi.OutputState }

func (TargetsTypeConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetsTypeConditionResponse)(nil)).Elem()
}

func (o TargetsTypeConditionResponseOutput) ToTargetsTypeConditionResponseOutput() TargetsTypeConditionResponseOutput {
	return o
}

func (o TargetsTypeConditionResponseOutput) ToTargetsTypeConditionResponseOutputWithContext(ctx context.Context) TargetsTypeConditionResponseOutput {
	return o
}

// Human readable error message.
func (o TargetsTypeConditionResponseOutput) ErrorDetails() pulumi.StringOutput {
	return o.ApplyT(func(v TargetsTypeConditionResponse) string { return v.ErrorDetails }).(pulumi.StringOutput)
}

// True if the targets are all a comparable type. For example this is true if all targets are GKE clusters. This is false if some targets are Cloud Run targets and others are GKE clusters.
func (o TargetsTypeConditionResponseOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v TargetsTypeConditionResponse) bool { return v.Status }).(pulumi.BoolOutput)
}

// A verify Job.
type VerifyJobResponse struct {
}

// A verify Job.
type VerifyJobResponseOutput struct{ *pulumi.OutputState }

func (VerifyJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerifyJobResponse)(nil)).Elem()
}

func (o VerifyJobResponseOutput) ToVerifyJobResponseOutput() VerifyJobResponseOutput {
	return o
}

func (o VerifyJobResponseOutput) ToVerifyJobResponseOutputWithContext(ctx context.Context) VerifyJobResponseOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdvanceRolloutRuleInput)(nil)).Elem(), AdvanceRolloutRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvanceRolloutRulePtrInput)(nil)).Elem(), AdvanceRolloutRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnthosClusterInput)(nil)).Elem(), AnthosClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnthosClusterPtrInput)(nil)).Elem(), AnthosClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationResourceSelectorInput)(nil)).Elem(), AutomationResourceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationRuleInput)(nil)).Elem(), AutomationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationRuleArrayInput)(nil)).Elem(), AutomationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildArtifactInput)(nil)).Elem(), BuildArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildArtifactArrayInput)(nil)).Elem(), BuildArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryInput)(nil)).Elem(), CanaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryPtrInput)(nil)).Elem(), CanaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryDeploymentInput)(nil)).Elem(), CanaryDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryDeploymentPtrInput)(nil)).Elem(), CanaryDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunConfigInput)(nil)).Elem(), CloudRunConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunConfigPtrInput)(nil)).Elem(), CloudRunConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunLocationInput)(nil)).Elem(), CloudRunLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunLocationPtrInput)(nil)).Elem(), CloudRunLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomCanaryDeploymentInput)(nil)).Elem(), CustomCanaryDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomCanaryDeploymentPtrInput)(nil)).Elem(), CustomCanaryDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultPoolInput)(nil)).Elem(), DefaultPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultPoolPtrInput)(nil)).Elem(), DefaultPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployParametersInput)(nil)).Elem(), DeployParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployParametersArrayInput)(nil)).Elem(), DeployParametersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionConfigInput)(nil)).Elem(), ExecutionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionConfigArrayInput)(nil)).Elem(), ExecutionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayServiceMeshInput)(nil)).Elem(), GatewayServiceMeshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayServiceMeshPtrInput)(nil)).Elem(), GatewayServiceMeshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterInput)(nil)).Elem(), GkeClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterPtrInput)(nil)).Elem(), GkeClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesConfigInput)(nil)).Elem(), KubernetesConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesConfigPtrInput)(nil)).Elem(), KubernetesConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiTargetInput)(nil)).Elem(), MultiTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiTargetPtrInput)(nil)).Elem(), MultiTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhaseConfigInput)(nil)).Elem(), PhaseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhaseConfigArrayInput)(nil)).Elem(), PhaseConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostdeployInput)(nil)).Elem(), PostdeployArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostdeployPtrInput)(nil)).Elem(), PostdeployArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PredeployInput)(nil)).Elem(), PredeployArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PredeployPtrInput)(nil)).Elem(), PredeployArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivatePoolInput)(nil)).Elem(), PrivatePoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivatePoolPtrInput)(nil)).Elem(), PrivatePoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PromoteReleaseRuleInput)(nil)).Elem(), PromoteReleaseRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PromoteReleaseRulePtrInput)(nil)).Elem(), PromoteReleaseRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepairModeInput)(nil)).Elem(), RepairModeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepairModeArrayInput)(nil)).Elem(), RepairModeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepairRolloutRuleInput)(nil)).Elem(), RepairRolloutRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepairRolloutRulePtrInput)(nil)).Elem(), RepairRolloutRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetryInput)(nil)).Elem(), RetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetryPtrInput)(nil)).Elem(), RetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollbackInput)(nil)).Elem(), RollbackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollbackPtrInput)(nil)).Elem(), RollbackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeConfigInput)(nil)).Elem(), RuntimeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeConfigPtrInput)(nil)).Elem(), RuntimeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SerialPipelineInput)(nil)).Elem(), SerialPipelineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SerialPipelinePtrInput)(nil)).Elem(), SerialPipelineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkingInput)(nil)).Elem(), ServiceNetworkingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkingPtrInput)(nil)).Elem(), ServiceNetworkingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageInput)(nil)).Elem(), StageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageArrayInput)(nil)).Elem(), StageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardInput)(nil)).Elem(), StandardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardPtrInput)(nil)).Elem(), StandardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StrategyInput)(nil)).Elem(), StrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StrategyPtrInput)(nil)).Elem(), StrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetAttributeInput)(nil)).Elem(), TargetAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetAttributeArrayInput)(nil)).Elem(), TargetAttributeArray{})
	pulumi.RegisterOutputType(AdvanceChildRolloutJobResponseOutput{})
	pulumi.RegisterOutputType(AdvanceRolloutRuleOutput{})
	pulumi.RegisterOutputType(AdvanceRolloutRulePtrOutput{})
	pulumi.RegisterOutputType(AdvanceRolloutRuleResponseOutput{})
	pulumi.RegisterOutputType(AnthosClusterOutput{})
	pulumi.RegisterOutputType(AnthosClusterPtrOutput{})
	pulumi.RegisterOutputType(AnthosClusterResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomationResourceSelectorOutput{})
	pulumi.RegisterOutputType(AutomationResourceSelectorResponseOutput{})
	pulumi.RegisterOutputType(AutomationRolloutMetadataResponseOutput{})
	pulumi.RegisterOutputType(AutomationRuleOutput{})
	pulumi.RegisterOutputType(AutomationRuleArrayOutput{})
	pulumi.RegisterOutputType(AutomationRuleConditionResponseOutput{})
	pulumi.RegisterOutputType(AutomationRuleResponseOutput{})
	pulumi.RegisterOutputType(AutomationRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(BuildArtifactOutput{})
	pulumi.RegisterOutputType(BuildArtifactArrayOutput{})
	pulumi.RegisterOutputType(BuildArtifactResponseOutput{})
	pulumi.RegisterOutputType(BuildArtifactResponseArrayOutput{})
	pulumi.RegisterOutputType(CanaryOutput{})
	pulumi.RegisterOutputType(CanaryPtrOutput{})
	pulumi.RegisterOutputType(CanaryDeploymentOutput{})
	pulumi.RegisterOutputType(CanaryDeploymentPtrOutput{})
	pulumi.RegisterOutputType(CanaryDeploymentResponseOutput{})
	pulumi.RegisterOutputType(CanaryResponseOutput{})
	pulumi.RegisterOutputType(ChildRolloutJobsResponseOutput{})
	pulumi.RegisterOutputType(CloudRunConfigOutput{})
	pulumi.RegisterOutputType(CloudRunConfigPtrOutput{})
	pulumi.RegisterOutputType(CloudRunConfigResponseOutput{})
	pulumi.RegisterOutputType(CloudRunLocationOutput{})
	pulumi.RegisterOutputType(CloudRunLocationPtrOutput{})
	pulumi.RegisterOutputType(CloudRunLocationResponseOutput{})
	pulumi.RegisterOutputType(CloudRunMetadataResponseOutput{})
	pulumi.RegisterOutputType(CloudRunRenderMetadataResponseOutput{})
	pulumi.RegisterOutputType(CreateChildRolloutJobResponseOutput{})
	pulumi.RegisterOutputType(CustomCanaryDeploymentOutput{})
	pulumi.RegisterOutputType(CustomCanaryDeploymentPtrOutput{})
	pulumi.RegisterOutputType(CustomCanaryDeploymentResponseOutput{})
	pulumi.RegisterOutputType(DefaultPoolOutput{})
	pulumi.RegisterOutputType(DefaultPoolPtrOutput{})
	pulumi.RegisterOutputType(DefaultPoolResponseOutput{})
	pulumi.RegisterOutputType(DeliveryPipelineResponseOutput{})
	pulumi.RegisterOutputType(DeployJobResponseOutput{})
	pulumi.RegisterOutputType(DeployParametersOutput{})
	pulumi.RegisterOutputType(DeployParametersArrayOutput{})
	pulumi.RegisterOutputType(DeployParametersResponseOutput{})
	pulumi.RegisterOutputType(DeployParametersResponseArrayOutput{})
	pulumi.RegisterOutputType(DeploymentJobsResponseOutput{})
	pulumi.RegisterOutputType(ExecutionConfigOutput{})
	pulumi.RegisterOutputType(ExecutionConfigArrayOutput{})
	pulumi.RegisterOutputType(ExecutionConfigResponseOutput{})
	pulumi.RegisterOutputType(ExecutionConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GatewayServiceMeshOutput{})
	pulumi.RegisterOutputType(GatewayServiceMeshPtrOutput{})
	pulumi.RegisterOutputType(GatewayServiceMeshResponseOutput{})
	pulumi.RegisterOutputType(GkeClusterOutput{})
	pulumi.RegisterOutputType(GkeClusterPtrOutput{})
	pulumi.RegisterOutputType(GkeClusterResponseOutput{})
	pulumi.RegisterOutputType(JobResponseOutput{})
	pulumi.RegisterOutputType(JobResponseArrayOutput{})
	pulumi.RegisterOutputType(KubernetesConfigOutput{})
	pulumi.RegisterOutputType(KubernetesConfigPtrOutput{})
	pulumi.RegisterOutputType(KubernetesConfigResponseOutput{})
	pulumi.RegisterOutputType(MetadataResponseOutput{})
	pulumi.RegisterOutputType(MultiTargetOutput{})
	pulumi.RegisterOutputType(MultiTargetPtrOutput{})
	pulumi.RegisterOutputType(MultiTargetResponseOutput{})
	pulumi.RegisterOutputType(PhaseArtifactResponseOutput{})
	pulumi.RegisterOutputType(PhaseArtifactResponseMapOutput{})
	pulumi.RegisterOutputType(PhaseConfigOutput{})
	pulumi.RegisterOutputType(PhaseConfigArrayOutput{})
	pulumi.RegisterOutputType(PhaseConfigResponseOutput{})
	pulumi.RegisterOutputType(PhaseConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(PhaseResponseOutput{})
	pulumi.RegisterOutputType(PhaseResponseArrayOutput{})
	pulumi.RegisterOutputType(PipelineConditionResponseOutput{})
	pulumi.RegisterOutputType(PipelineReadyConditionResponseOutput{})
	pulumi.RegisterOutputType(PostdeployOutput{})
	pulumi.RegisterOutputType(PostdeployPtrOutput{})
	pulumi.RegisterOutputType(PostdeployJobResponseOutput{})
	pulumi.RegisterOutputType(PostdeployResponseOutput{})
	pulumi.RegisterOutputType(PredeployOutput{})
	pulumi.RegisterOutputType(PredeployPtrOutput{})
	pulumi.RegisterOutputType(PredeployJobResponseOutput{})
	pulumi.RegisterOutputType(PredeployResponseOutput{})
	pulumi.RegisterOutputType(PrivatePoolOutput{})
	pulumi.RegisterOutputType(PrivatePoolPtrOutput{})
	pulumi.RegisterOutputType(PrivatePoolResponseOutput{})
	pulumi.RegisterOutputType(PromoteReleaseRuleOutput{})
	pulumi.RegisterOutputType(PromoteReleaseRulePtrOutput{})
	pulumi.RegisterOutputType(PromoteReleaseRuleResponseOutput{})
	pulumi.RegisterOutputType(ReleaseConditionResponseOutput{})
	pulumi.RegisterOutputType(ReleaseReadyConditionResponseOutput{})
	pulumi.RegisterOutputType(RenderMetadataResponseOutput{})
	pulumi.RegisterOutputType(RepairModeOutput{})
	pulumi.RegisterOutputType(RepairModeArrayOutput{})
	pulumi.RegisterOutputType(RepairModeResponseOutput{})
	pulumi.RegisterOutputType(RepairModeResponseArrayOutput{})
	pulumi.RegisterOutputType(RepairRolloutRuleOutput{})
	pulumi.RegisterOutputType(RepairRolloutRulePtrOutput{})
	pulumi.RegisterOutputType(RepairRolloutRuleResponseOutput{})
	pulumi.RegisterOutputType(RetryOutput{})
	pulumi.RegisterOutputType(RetryPtrOutput{})
	pulumi.RegisterOutputType(RetryResponseOutput{})
	pulumi.RegisterOutputType(RollbackOutput{})
	pulumi.RegisterOutputType(RollbackPtrOutput{})
	pulumi.RegisterOutputType(RollbackResponseOutput{})
	pulumi.RegisterOutputType(RuntimeConfigOutput{})
	pulumi.RegisterOutputType(RuntimeConfigPtrOutput{})
	pulumi.RegisterOutputType(RuntimeConfigResponseOutput{})
	pulumi.RegisterOutputType(SerialPipelineOutput{})
	pulumi.RegisterOutputType(SerialPipelinePtrOutput{})
	pulumi.RegisterOutputType(SerialPipelineResponseOutput{})
	pulumi.RegisterOutputType(ServiceNetworkingOutput{})
	pulumi.RegisterOutputType(ServiceNetworkingPtrOutput{})
	pulumi.RegisterOutputType(ServiceNetworkingResponseOutput{})
	pulumi.RegisterOutputType(SkaffoldSupportedConditionResponseOutput{})
	pulumi.RegisterOutputType(StageOutput{})
	pulumi.RegisterOutputType(StageArrayOutput{})
	pulumi.RegisterOutputType(StageResponseOutput{})
	pulumi.RegisterOutputType(StageResponseArrayOutput{})
	pulumi.RegisterOutputType(StandardOutput{})
	pulumi.RegisterOutputType(StandardPtrOutput{})
	pulumi.RegisterOutputType(StandardResponseOutput{})
	pulumi.RegisterOutputType(StrategyOutput{})
	pulumi.RegisterOutputType(StrategyPtrOutput{})
	pulumi.RegisterOutputType(StrategyResponseOutput{})
	pulumi.RegisterOutputType(TargetArtifactResponseOutput{})
	pulumi.RegisterOutputType(TargetArtifactResponseMapOutput{})
	pulumi.RegisterOutputType(TargetAttributeOutput{})
	pulumi.RegisterOutputType(TargetAttributeArrayOutput{})
	pulumi.RegisterOutputType(TargetAttributeResponseOutput{})
	pulumi.RegisterOutputType(TargetAttributeResponseArrayOutput{})
	pulumi.RegisterOutputType(TargetRenderResponseOutput{})
	pulumi.RegisterOutputType(TargetRenderResponseMapOutput{})
	pulumi.RegisterOutputType(TargetResponseOutput{})
	pulumi.RegisterOutputType(TargetResponseArrayOutput{})
	pulumi.RegisterOutputType(TargetsPresentConditionResponseOutput{})
	pulumi.RegisterOutputType(TargetsTypeConditionResponseOutput{})
	pulumi.RegisterOutputType(VerifyJobResponseOutput{})
}
