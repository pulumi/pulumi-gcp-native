// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information specifying an Anthos Cluster.
type AnthosCluster struct {
	// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
	Membership *string `pulumi:"membership"`
}

// AnthosClusterInput is an input type that accepts AnthosClusterArgs and AnthosClusterOutput values.
// You can construct a concrete instance of `AnthosClusterInput` via:
//
//	AnthosClusterArgs{...}
type AnthosClusterInput interface {
	pulumi.Input

	ToAnthosClusterOutput() AnthosClusterOutput
	ToAnthosClusterOutputWithContext(context.Context) AnthosClusterOutput
}

// Information specifying an Anthos Cluster.
type AnthosClusterArgs struct {
	// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
	Membership pulumi.StringPtrInput `pulumi:"membership"`
}

func (AnthosClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosCluster)(nil)).Elem()
}

func (i AnthosClusterArgs) ToAnthosClusterOutput() AnthosClusterOutput {
	return i.ToAnthosClusterOutputWithContext(context.Background())
}

func (i AnthosClusterArgs) ToAnthosClusterOutputWithContext(ctx context.Context) AnthosClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosClusterOutput)
}

func (i AnthosClusterArgs) ToAnthosClusterPtrOutput() AnthosClusterPtrOutput {
	return i.ToAnthosClusterPtrOutputWithContext(context.Background())
}

func (i AnthosClusterArgs) ToAnthosClusterPtrOutputWithContext(ctx context.Context) AnthosClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosClusterOutput).ToAnthosClusterPtrOutputWithContext(ctx)
}

// AnthosClusterPtrInput is an input type that accepts AnthosClusterArgs, AnthosClusterPtr and AnthosClusterPtrOutput values.
// You can construct a concrete instance of `AnthosClusterPtrInput` via:
//
//	        AnthosClusterArgs{...}
//
//	or:
//
//	        nil
type AnthosClusterPtrInput interface {
	pulumi.Input

	ToAnthosClusterPtrOutput() AnthosClusterPtrOutput
	ToAnthosClusterPtrOutputWithContext(context.Context) AnthosClusterPtrOutput
}

type anthosClusterPtrType AnthosClusterArgs

func AnthosClusterPtr(v *AnthosClusterArgs) AnthosClusterPtrInput {
	return (*anthosClusterPtrType)(v)
}

func (*anthosClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnthosCluster)(nil)).Elem()
}

func (i *anthosClusterPtrType) ToAnthosClusterPtrOutput() AnthosClusterPtrOutput {
	return i.ToAnthosClusterPtrOutputWithContext(context.Background())
}

func (i *anthosClusterPtrType) ToAnthosClusterPtrOutputWithContext(ctx context.Context) AnthosClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosClusterPtrOutput)
}

// Information specifying an Anthos Cluster.
type AnthosClusterOutput struct{ *pulumi.OutputState }

func (AnthosClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosCluster)(nil)).Elem()
}

func (o AnthosClusterOutput) ToAnthosClusterOutput() AnthosClusterOutput {
	return o
}

func (o AnthosClusterOutput) ToAnthosClusterOutputWithContext(ctx context.Context) AnthosClusterOutput {
	return o
}

func (o AnthosClusterOutput) ToAnthosClusterPtrOutput() AnthosClusterPtrOutput {
	return o.ToAnthosClusterPtrOutputWithContext(context.Background())
}

func (o AnthosClusterOutput) ToAnthosClusterPtrOutputWithContext(ctx context.Context) AnthosClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnthosCluster) *AnthosCluster {
		return &v
	}).(AnthosClusterPtrOutput)
}

// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
func (o AnthosClusterOutput) Membership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnthosCluster) *string { return v.Membership }).(pulumi.StringPtrOutput)
}

type AnthosClusterPtrOutput struct{ *pulumi.OutputState }

func (AnthosClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnthosCluster)(nil)).Elem()
}

func (o AnthosClusterPtrOutput) ToAnthosClusterPtrOutput() AnthosClusterPtrOutput {
	return o
}

func (o AnthosClusterPtrOutput) ToAnthosClusterPtrOutputWithContext(ctx context.Context) AnthosClusterPtrOutput {
	return o
}

func (o AnthosClusterPtrOutput) Elem() AnthosClusterOutput {
	return o.ApplyT(func(v *AnthosCluster) AnthosCluster {
		if v != nil {
			return *v
		}
		var ret AnthosCluster
		return ret
	}).(AnthosClusterOutput)
}

// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
func (o AnthosClusterPtrOutput) Membership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnthosCluster) *string {
		if v == nil {
			return nil
		}
		return v.Membership
	}).(pulumi.StringPtrOutput)
}

// Information specifying an Anthos Cluster.
type AnthosClusterResponse struct {
	// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
	Membership string `pulumi:"membership"`
}

// Information specifying an Anthos Cluster.
type AnthosClusterResponseOutput struct{ *pulumi.OutputState }

func (AnthosClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosClusterResponse)(nil)).Elem()
}

func (o AnthosClusterResponseOutput) ToAnthosClusterResponseOutput() AnthosClusterResponseOutput {
	return o
}

func (o AnthosClusterResponseOutput) ToAnthosClusterResponseOutputWithContext(ctx context.Context) AnthosClusterResponseOutput {
	return o
}

// Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
func (o AnthosClusterResponseOutput) Membership() pulumi.StringOutput {
	return o.ApplyT(func(v AnthosClusterResponse) string { return v.Membership }).(pulumi.StringOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifact struct {
	// Image name in Skaffold configuration.
	Image *string `pulumi:"image"`
	// Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
	Tag *string `pulumi:"tag"`
}

// BuildArtifactInput is an input type that accepts BuildArtifactArgs and BuildArtifactOutput values.
// You can construct a concrete instance of `BuildArtifactInput` via:
//
//	BuildArtifactArgs{...}
type BuildArtifactInput interface {
	pulumi.Input

	ToBuildArtifactOutput() BuildArtifactOutput
	ToBuildArtifactOutputWithContext(context.Context) BuildArtifactOutput
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifactArgs struct {
	// Image name in Skaffold configuration.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (BuildArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArtifact)(nil)).Elem()
}

func (i BuildArtifactArgs) ToBuildArtifactOutput() BuildArtifactOutput {
	return i.ToBuildArtifactOutputWithContext(context.Background())
}

func (i BuildArtifactArgs) ToBuildArtifactOutputWithContext(ctx context.Context) BuildArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArtifactOutput)
}

// BuildArtifactArrayInput is an input type that accepts BuildArtifactArray and BuildArtifactArrayOutput values.
// You can construct a concrete instance of `BuildArtifactArrayInput` via:
//
//	BuildArtifactArray{ BuildArtifactArgs{...} }
type BuildArtifactArrayInput interface {
	pulumi.Input

	ToBuildArtifactArrayOutput() BuildArtifactArrayOutput
	ToBuildArtifactArrayOutputWithContext(context.Context) BuildArtifactArrayOutput
}

type BuildArtifactArray []BuildArtifactInput

func (BuildArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArtifact)(nil)).Elem()
}

func (i BuildArtifactArray) ToBuildArtifactArrayOutput() BuildArtifactArrayOutput {
	return i.ToBuildArtifactArrayOutputWithContext(context.Background())
}

func (i BuildArtifactArray) ToBuildArtifactArrayOutputWithContext(ctx context.Context) BuildArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildArtifactArrayOutput)
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifactOutput struct{ *pulumi.OutputState }

func (BuildArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArtifact)(nil)).Elem()
}

func (o BuildArtifactOutput) ToBuildArtifactOutput() BuildArtifactOutput {
	return o
}

func (o BuildArtifactOutput) ToBuildArtifactOutputWithContext(ctx context.Context) BuildArtifactOutput {
	return o
}

// Image name in Skaffold configuration.
func (o BuildArtifactOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildArtifact) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
func (o BuildArtifactOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildArtifact) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type BuildArtifactArrayOutput struct{ *pulumi.OutputState }

func (BuildArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArtifact)(nil)).Elem()
}

func (o BuildArtifactArrayOutput) ToBuildArtifactArrayOutput() BuildArtifactArrayOutput {
	return o
}

func (o BuildArtifactArrayOutput) ToBuildArtifactArrayOutputWithContext(ctx context.Context) BuildArtifactArrayOutput {
	return o
}

func (o BuildArtifactArrayOutput) Index(i pulumi.IntInput) BuildArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildArtifact {
		return vs[0].([]BuildArtifact)[vs[1].(int)]
	}).(BuildArtifactOutput)
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifactResponse struct {
	// Image name in Skaffold configuration.
	Image string `pulumi:"image"`
	// Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
	Tag string `pulumi:"tag"`
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifactResponseOutput struct{ *pulumi.OutputState }

func (BuildArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArtifactResponse)(nil)).Elem()
}

func (o BuildArtifactResponseOutput) ToBuildArtifactResponseOutput() BuildArtifactResponseOutput {
	return o
}

func (o BuildArtifactResponseOutput) ToBuildArtifactResponseOutputWithContext(ctx context.Context) BuildArtifactResponseOutput {
	return o
}

// Image name in Skaffold configuration.
func (o BuildArtifactResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArtifactResponse) string { return v.Image }).(pulumi.StringOutput)
}

// Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
func (o BuildArtifactResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArtifactResponse) string { return v.Tag }).(pulumi.StringOutput)
}

type BuildArtifactResponseArrayOutput struct{ *pulumi.OutputState }

func (BuildArtifactResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArtifactResponse)(nil)).Elem()
}

func (o BuildArtifactResponseArrayOutput) ToBuildArtifactResponseArrayOutput() BuildArtifactResponseArrayOutput {
	return o
}

func (o BuildArtifactResponseArrayOutput) ToBuildArtifactResponseArrayOutputWithContext(ctx context.Context) BuildArtifactResponseArrayOutput {
	return o
}

func (o BuildArtifactResponseArrayOutput) Index(i pulumi.IntInput) BuildArtifactResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildArtifactResponse {
		return vs[0].([]BuildArtifactResponse)[vs[1].(int)]
	}).(BuildArtifactResponseOutput)
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocation struct {
	// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
	Location string `pulumi:"location"`
}

// CloudRunLocationInput is an input type that accepts CloudRunLocationArgs and CloudRunLocationOutput values.
// You can construct a concrete instance of `CloudRunLocationInput` via:
//
//	CloudRunLocationArgs{...}
type CloudRunLocationInput interface {
	pulumi.Input

	ToCloudRunLocationOutput() CloudRunLocationOutput
	ToCloudRunLocationOutputWithContext(context.Context) CloudRunLocationOutput
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocationArgs struct {
	// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
	Location pulumi.StringInput `pulumi:"location"`
}

func (CloudRunLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunLocation)(nil)).Elem()
}

func (i CloudRunLocationArgs) ToCloudRunLocationOutput() CloudRunLocationOutput {
	return i.ToCloudRunLocationOutputWithContext(context.Background())
}

func (i CloudRunLocationArgs) ToCloudRunLocationOutputWithContext(ctx context.Context) CloudRunLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunLocationOutput)
}

func (i CloudRunLocationArgs) ToCloudRunLocationPtrOutput() CloudRunLocationPtrOutput {
	return i.ToCloudRunLocationPtrOutputWithContext(context.Background())
}

func (i CloudRunLocationArgs) ToCloudRunLocationPtrOutputWithContext(ctx context.Context) CloudRunLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunLocationOutput).ToCloudRunLocationPtrOutputWithContext(ctx)
}

// CloudRunLocationPtrInput is an input type that accepts CloudRunLocationArgs, CloudRunLocationPtr and CloudRunLocationPtrOutput values.
// You can construct a concrete instance of `CloudRunLocationPtrInput` via:
//
//	        CloudRunLocationArgs{...}
//
//	or:
//
//	        nil
type CloudRunLocationPtrInput interface {
	pulumi.Input

	ToCloudRunLocationPtrOutput() CloudRunLocationPtrOutput
	ToCloudRunLocationPtrOutputWithContext(context.Context) CloudRunLocationPtrOutput
}

type cloudRunLocationPtrType CloudRunLocationArgs

func CloudRunLocationPtr(v *CloudRunLocationArgs) CloudRunLocationPtrInput {
	return (*cloudRunLocationPtrType)(v)
}

func (*cloudRunLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunLocation)(nil)).Elem()
}

func (i *cloudRunLocationPtrType) ToCloudRunLocationPtrOutput() CloudRunLocationPtrOutput {
	return i.ToCloudRunLocationPtrOutputWithContext(context.Background())
}

func (i *cloudRunLocationPtrType) ToCloudRunLocationPtrOutputWithContext(ctx context.Context) CloudRunLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunLocationPtrOutput)
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocationOutput struct{ *pulumi.OutputState }

func (CloudRunLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunLocation)(nil)).Elem()
}

func (o CloudRunLocationOutput) ToCloudRunLocationOutput() CloudRunLocationOutput {
	return o
}

func (o CloudRunLocationOutput) ToCloudRunLocationOutputWithContext(ctx context.Context) CloudRunLocationOutput {
	return o
}

func (o CloudRunLocationOutput) ToCloudRunLocationPtrOutput() CloudRunLocationPtrOutput {
	return o.ToCloudRunLocationPtrOutputWithContext(context.Background())
}

func (o CloudRunLocationOutput) ToCloudRunLocationPtrOutputWithContext(ctx context.Context) CloudRunLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudRunLocation) *CloudRunLocation {
		return &v
	}).(CloudRunLocationPtrOutput)
}

// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
func (o CloudRunLocationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunLocation) string { return v.Location }).(pulumi.StringOutput)
}

type CloudRunLocationPtrOutput struct{ *pulumi.OutputState }

func (CloudRunLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunLocation)(nil)).Elem()
}

func (o CloudRunLocationPtrOutput) ToCloudRunLocationPtrOutput() CloudRunLocationPtrOutput {
	return o
}

func (o CloudRunLocationPtrOutput) ToCloudRunLocationPtrOutputWithContext(ctx context.Context) CloudRunLocationPtrOutput {
	return o
}

func (o CloudRunLocationPtrOutput) Elem() CloudRunLocationOutput {
	return o.ApplyT(func(v *CloudRunLocation) CloudRunLocation {
		if v != nil {
			return *v
		}
		var ret CloudRunLocation
		return ret
	}).(CloudRunLocationOutput)
}

// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
func (o CloudRunLocationPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRunLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocationResponse struct {
	// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
	Location string `pulumi:"location"`
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocationResponseOutput struct{ *pulumi.OutputState }

func (CloudRunLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunLocationResponse)(nil)).Elem()
}

func (o CloudRunLocationResponseOutput) ToCloudRunLocationResponseOutput() CloudRunLocationResponseOutput {
	return o
}

func (o CloudRunLocationResponseOutput) ToCloudRunLocationResponseOutputWithContext(ctx context.Context) CloudRunLocationResponseOutput {
	return o
}

// The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
func (o CloudRunLocationResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunLocationResponse) string { return v.Location }).(pulumi.StringOutput)
}

// CloudRunMetadata contains information from a Cloud Run deployment.
type CloudRunMetadataResponse struct {
	// The Cloud Run Revision id associated with a `Rollout`.
	Revision string `pulumi:"revision"`
	// The name of the Cloud Run Service that is associated with a `Rollout`. Format is projects/{project}/locations/{location}/services/{service}.
	Service string `pulumi:"service"`
	// The Cloud Run Service urls that are associated with a `Rollout`.
	ServiceUrls []string `pulumi:"serviceUrls"`
}

// CloudRunMetadata contains information from a Cloud Run deployment.
type CloudRunMetadataResponseOutput struct{ *pulumi.OutputState }

func (CloudRunMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunMetadataResponse)(nil)).Elem()
}

func (o CloudRunMetadataResponseOutput) ToCloudRunMetadataResponseOutput() CloudRunMetadataResponseOutput {
	return o
}

func (o CloudRunMetadataResponseOutput) ToCloudRunMetadataResponseOutputWithContext(ctx context.Context) CloudRunMetadataResponseOutput {
	return o
}

// The Cloud Run Revision id associated with a `Rollout`.
func (o CloudRunMetadataResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunMetadataResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// The name of the Cloud Run Service that is associated with a `Rollout`. Format is projects/{project}/locations/{location}/services/{service}.
func (o CloudRunMetadataResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunMetadataResponse) string { return v.Service }).(pulumi.StringOutput)
}

// The Cloud Run Service urls that are associated with a `Rollout`.
func (o CloudRunMetadataResponseOutput) ServiceUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudRunMetadataResponse) []string { return v.ServiceUrls }).(pulumi.StringArrayOutput)
}

// Execution using the default Cloud Build pool.
type DefaultPool struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage *string `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount *string `pulumi:"serviceAccount"`
}

// DefaultPoolInput is an input type that accepts DefaultPoolArgs and DefaultPoolOutput values.
// You can construct a concrete instance of `DefaultPoolInput` via:
//
//	DefaultPoolArgs{...}
type DefaultPoolInput interface {
	pulumi.Input

	ToDefaultPoolOutput() DefaultPoolOutput
	ToDefaultPoolOutputWithContext(context.Context) DefaultPoolOutput
}

// Execution using the default Cloud Build pool.
type DefaultPoolArgs struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage pulumi.StringPtrInput `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
}

func (DefaultPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultPool)(nil)).Elem()
}

func (i DefaultPoolArgs) ToDefaultPoolOutput() DefaultPoolOutput {
	return i.ToDefaultPoolOutputWithContext(context.Background())
}

func (i DefaultPoolArgs) ToDefaultPoolOutputWithContext(ctx context.Context) DefaultPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultPoolOutput)
}

func (i DefaultPoolArgs) ToDefaultPoolPtrOutput() DefaultPoolPtrOutput {
	return i.ToDefaultPoolPtrOutputWithContext(context.Background())
}

func (i DefaultPoolArgs) ToDefaultPoolPtrOutputWithContext(ctx context.Context) DefaultPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultPoolOutput).ToDefaultPoolPtrOutputWithContext(ctx)
}

// DefaultPoolPtrInput is an input type that accepts DefaultPoolArgs, DefaultPoolPtr and DefaultPoolPtrOutput values.
// You can construct a concrete instance of `DefaultPoolPtrInput` via:
//
//	        DefaultPoolArgs{...}
//
//	or:
//
//	        nil
type DefaultPoolPtrInput interface {
	pulumi.Input

	ToDefaultPoolPtrOutput() DefaultPoolPtrOutput
	ToDefaultPoolPtrOutputWithContext(context.Context) DefaultPoolPtrOutput
}

type defaultPoolPtrType DefaultPoolArgs

func DefaultPoolPtr(v *DefaultPoolArgs) DefaultPoolPtrInput {
	return (*defaultPoolPtrType)(v)
}

func (*defaultPoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultPool)(nil)).Elem()
}

func (i *defaultPoolPtrType) ToDefaultPoolPtrOutput() DefaultPoolPtrOutput {
	return i.ToDefaultPoolPtrOutputWithContext(context.Background())
}

func (i *defaultPoolPtrType) ToDefaultPoolPtrOutputWithContext(ctx context.Context) DefaultPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultPoolPtrOutput)
}

// Execution using the default Cloud Build pool.
type DefaultPoolOutput struct{ *pulumi.OutputState }

func (DefaultPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultPool)(nil)).Elem()
}

func (o DefaultPoolOutput) ToDefaultPoolOutput() DefaultPoolOutput {
	return o
}

func (o DefaultPoolOutput) ToDefaultPoolOutputWithContext(ctx context.Context) DefaultPoolOutput {
	return o
}

func (o DefaultPoolOutput) ToDefaultPoolPtrOutput() DefaultPoolPtrOutput {
	return o.ToDefaultPoolPtrOutputWithContext(context.Background())
}

func (o DefaultPoolOutput) ToDefaultPoolPtrOutputWithContext(ctx context.Context) DefaultPoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultPool) *DefaultPool {
		return &v
	}).(DefaultPoolPtrOutput)
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o DefaultPoolOutput) ArtifactStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultPool) *string { return v.ArtifactStorage }).(pulumi.StringPtrOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o DefaultPoolOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultPool) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

type DefaultPoolPtrOutput struct{ *pulumi.OutputState }

func (DefaultPoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultPool)(nil)).Elem()
}

func (o DefaultPoolPtrOutput) ToDefaultPoolPtrOutput() DefaultPoolPtrOutput {
	return o
}

func (o DefaultPoolPtrOutput) ToDefaultPoolPtrOutputWithContext(ctx context.Context) DefaultPoolPtrOutput {
	return o
}

func (o DefaultPoolPtrOutput) Elem() DefaultPoolOutput {
	return o.ApplyT(func(v *DefaultPool) DefaultPool {
		if v != nil {
			return *v
		}
		var ret DefaultPool
		return ret
	}).(DefaultPoolOutput)
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o DefaultPoolPtrOutput) ArtifactStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultPool) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorage
	}).(pulumi.StringPtrOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o DefaultPoolPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultPool) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Execution using the default Cloud Build pool.
type DefaultPoolResponse struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage string `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount string `pulumi:"serviceAccount"`
}

// Execution using the default Cloud Build pool.
type DefaultPoolResponseOutput struct{ *pulumi.OutputState }

func (DefaultPoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultPoolResponse)(nil)).Elem()
}

func (o DefaultPoolResponseOutput) ToDefaultPoolResponseOutput() DefaultPoolResponseOutput {
	return o
}

func (o DefaultPoolResponseOutput) ToDefaultPoolResponseOutputWithContext(ctx context.Context) DefaultPoolResponseOutput {
	return o
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o DefaultPoolResponseOutput) ArtifactStorage() pulumi.StringOutput {
	return o.ApplyT(func(v DefaultPoolResponse) string { return v.ArtifactStorage }).(pulumi.StringOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o DefaultPoolResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v DefaultPoolResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// A `DeliveryPipeline` resource in the Google Cloud Deploy API. A `DeliveryPipeline` defines a pipeline through which a Skaffold configuration can progress.
type DeliveryPipelineResponse struct {
	// User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	Annotations map[string]string `pulumi:"annotations"`
	// Information around the state of the Delivery Pipeline.
	Condition PipelineConditionResponse `pulumi:"condition"`
	// Time at which the pipeline was created.
	CreateTime string `pulumi:"createTime"`
	// Description of the `DeliveryPipeline`. Max length is 255 characters.
	Description string `pulumi:"description"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag string `pulumi:"etag"`
	// Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Name of the `DeliveryPipeline`. Format is projects/{project}/ locations/{location}/deliveryPipelines/a-z{0,62}.
	Name string `pulumi:"name"`
	// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
	SerialPipeline SerialPipelineResponse `pulumi:"serialPipeline"`
	// When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
	Suspended bool `pulumi:"suspended"`
	// Unique identifier of the `DeliveryPipeline`.
	Uid string `pulumi:"uid"`
	// Most recent time at which the pipeline was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// A `DeliveryPipeline` resource in the Google Cloud Deploy API. A `DeliveryPipeline` defines a pipeline through which a Skaffold configuration can progress.
type DeliveryPipelineResponseOutput struct{ *pulumi.OutputState }

func (DeliveryPipelineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryPipelineResponse)(nil)).Elem()
}

func (o DeliveryPipelineResponseOutput) ToDeliveryPipelineResponseOutput() DeliveryPipelineResponseOutput {
	return o
}

func (o DeliveryPipelineResponseOutput) ToDeliveryPipelineResponseOutputWithContext(ctx context.Context) DeliveryPipelineResponseOutput {
	return o
}

// User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
func (o DeliveryPipelineResponseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Information around the state of the Delivery Pipeline.
func (o DeliveryPipelineResponseOutput) Condition() PipelineConditionResponseOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) PipelineConditionResponse { return v.Condition }).(PipelineConditionResponseOutput)
}

// Time at which the pipeline was created.
func (o DeliveryPipelineResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the `DeliveryPipeline`. Max length is 255 characters.
func (o DeliveryPipelineResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.Description }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o DeliveryPipelineResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
func (o DeliveryPipelineResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Optional. Name of the `DeliveryPipeline`. Format is projects/{project}/ locations/{location}/deliveryPipelines/a-z{0,62}.
func (o DeliveryPipelineResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.Name }).(pulumi.StringOutput)
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
func (o DeliveryPipelineResponseOutput) SerialPipeline() SerialPipelineResponseOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) SerialPipelineResponse { return v.SerialPipeline }).(SerialPipelineResponseOutput)
}

// When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
func (o DeliveryPipelineResponseOutput) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) bool { return v.Suspended }).(pulumi.BoolOutput)
}

// Unique identifier of the `DeliveryPipeline`.
func (o DeliveryPipelineResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.Uid }).(pulumi.StringOutput)
}

// Most recent time at which the pipeline was updated.
func (o DeliveryPipelineResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryPipelineResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// A deploy Job.
type DeployJobResponse struct {
}

// A deploy Job.
type DeployJobResponseOutput struct{ *pulumi.OutputState }

func (DeployJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployJobResponse)(nil)).Elem()
}

func (o DeployJobResponseOutput) ToDeployJobResponseOutput() DeployJobResponseOutput {
	return o
}

func (o DeployJobResponseOutput) ToDeployJobResponseOutputWithContext(ctx context.Context) DeployJobResponseOutput {
	return o
}

// Deployment job composition.
type DeploymentJobsResponse struct {
	// The deploy Job. This is the first job run in the phase.
	DeployJob JobResponse `pulumi:"deployJob"`
	// The verify Job. Runs after a deploy if the deploy succeeds.
	VerifyJob JobResponse `pulumi:"verifyJob"`
}

// Deployment job composition.
type DeploymentJobsResponseOutput struct{ *pulumi.OutputState }

func (DeploymentJobsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentJobsResponse)(nil)).Elem()
}

func (o DeploymentJobsResponseOutput) ToDeploymentJobsResponseOutput() DeploymentJobsResponseOutput {
	return o
}

func (o DeploymentJobsResponseOutput) ToDeploymentJobsResponseOutputWithContext(ctx context.Context) DeploymentJobsResponseOutput {
	return o
}

// The deploy Job. This is the first job run in the phase.
func (o DeploymentJobsResponseOutput) DeployJob() JobResponseOutput {
	return o.ApplyT(func(v DeploymentJobsResponse) JobResponse { return v.DeployJob }).(JobResponseOutput)
}

// The verify Job. Runs after a deploy if the deploy succeeds.
func (o DeploymentJobsResponseOutput) VerifyJob() JobResponseOutput {
	return o.ApplyT(func(v DeploymentJobsResponse) JobResponse { return v.VerifyJob }).(JobResponseOutput)
}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfig struct {
	// Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage *string `pulumi:"artifactStorage"`
	// Optional. Use default Cloud Build pool.
	DefaultPool *DefaultPool `pulumi:"defaultPool"`
	// Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
	ExecutionTimeout *string `pulumi:"executionTimeout"`
	// Optional. Use private Cloud Build pool.
	PrivatePool *PrivatePool `pulumi:"privatePool"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Usages when this configuration should be applied.
	Usages []ExecutionConfigUsagesItem `pulumi:"usages"`
	// Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
	WorkerPool *string `pulumi:"workerPool"`
}

// ExecutionConfigInput is an input type that accepts ExecutionConfigArgs and ExecutionConfigOutput values.
// You can construct a concrete instance of `ExecutionConfigInput` via:
//
//	ExecutionConfigArgs{...}
type ExecutionConfigInput interface {
	pulumi.Input

	ToExecutionConfigOutput() ExecutionConfigOutput
	ToExecutionConfigOutputWithContext(context.Context) ExecutionConfigOutput
}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfigArgs struct {
	// Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage pulumi.StringPtrInput `pulumi:"artifactStorage"`
	// Optional. Use default Cloud Build pool.
	DefaultPool DefaultPoolPtrInput `pulumi:"defaultPool"`
	// Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
	ExecutionTimeout pulumi.StringPtrInput `pulumi:"executionTimeout"`
	// Optional. Use private Cloud Build pool.
	PrivatePool PrivatePoolPtrInput `pulumi:"privatePool"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Usages when this configuration should be applied.
	Usages ExecutionConfigUsagesItemArrayInput `pulumi:"usages"`
	// Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
	WorkerPool pulumi.StringPtrInput `pulumi:"workerPool"`
}

func (ExecutionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionConfig)(nil)).Elem()
}

func (i ExecutionConfigArgs) ToExecutionConfigOutput() ExecutionConfigOutput {
	return i.ToExecutionConfigOutputWithContext(context.Background())
}

func (i ExecutionConfigArgs) ToExecutionConfigOutputWithContext(ctx context.Context) ExecutionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionConfigOutput)
}

// ExecutionConfigArrayInput is an input type that accepts ExecutionConfigArray and ExecutionConfigArrayOutput values.
// You can construct a concrete instance of `ExecutionConfigArrayInput` via:
//
//	ExecutionConfigArray{ ExecutionConfigArgs{...} }
type ExecutionConfigArrayInput interface {
	pulumi.Input

	ToExecutionConfigArrayOutput() ExecutionConfigArrayOutput
	ToExecutionConfigArrayOutputWithContext(context.Context) ExecutionConfigArrayOutput
}

type ExecutionConfigArray []ExecutionConfigInput

func (ExecutionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionConfig)(nil)).Elem()
}

func (i ExecutionConfigArray) ToExecutionConfigArrayOutput() ExecutionConfigArrayOutput {
	return i.ToExecutionConfigArrayOutputWithContext(context.Background())
}

func (i ExecutionConfigArray) ToExecutionConfigArrayOutputWithContext(ctx context.Context) ExecutionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionConfigArrayOutput)
}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfigOutput struct{ *pulumi.OutputState }

func (ExecutionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionConfig)(nil)).Elem()
}

func (o ExecutionConfigOutput) ToExecutionConfigOutput() ExecutionConfigOutput {
	return o
}

func (o ExecutionConfigOutput) ToExecutionConfigOutputWithContext(ctx context.Context) ExecutionConfigOutput {
	return o
}

// Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o ExecutionConfigOutput) ArtifactStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *string { return v.ArtifactStorage }).(pulumi.StringPtrOutput)
}

// Optional. Use default Cloud Build pool.
func (o ExecutionConfigOutput) DefaultPool() DefaultPoolPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *DefaultPool { return v.DefaultPool }).(DefaultPoolPtrOutput)
}

// Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
func (o ExecutionConfigOutput) ExecutionTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *string { return v.ExecutionTimeout }).(pulumi.StringPtrOutput)
}

// Optional. Use private Cloud Build pool.
func (o ExecutionConfigOutput) PrivatePool() PrivatePoolPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *PrivatePool { return v.PrivatePool }).(PrivatePoolPtrOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
func (o ExecutionConfigOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Usages when this configuration should be applied.
func (o ExecutionConfigOutput) Usages() ExecutionConfigUsagesItemArrayOutput {
	return o.ApplyT(func(v ExecutionConfig) []ExecutionConfigUsagesItem { return v.Usages }).(ExecutionConfigUsagesItemArrayOutput)
}

// Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
func (o ExecutionConfigOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionConfig) *string { return v.WorkerPool }).(pulumi.StringPtrOutput)
}

type ExecutionConfigArrayOutput struct{ *pulumi.OutputState }

func (ExecutionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionConfig)(nil)).Elem()
}

func (o ExecutionConfigArrayOutput) ToExecutionConfigArrayOutput() ExecutionConfigArrayOutput {
	return o
}

func (o ExecutionConfigArrayOutput) ToExecutionConfigArrayOutputWithContext(ctx context.Context) ExecutionConfigArrayOutput {
	return o
}

func (o ExecutionConfigArrayOutput) Index(i pulumi.IntInput) ExecutionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutionConfig {
		return vs[0].([]ExecutionConfig)[vs[1].(int)]
	}).(ExecutionConfigOutput)
}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfigResponse struct {
	// Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage string `pulumi:"artifactStorage"`
	// Optional. Use default Cloud Build pool.
	DefaultPool DefaultPoolResponse `pulumi:"defaultPool"`
	// Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
	ExecutionTimeout string `pulumi:"executionTimeout"`
	// Optional. Use private Cloud Build pool.
	PrivatePool PrivatePoolResponse `pulumi:"privatePool"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Usages when this configuration should be applied.
	Usages []string `pulumi:"usages"`
	// Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
	WorkerPool string `pulumi:"workerPool"`
}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfigResponseOutput struct{ *pulumi.OutputState }

func (ExecutionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionConfigResponse)(nil)).Elem()
}

func (o ExecutionConfigResponseOutput) ToExecutionConfigResponseOutput() ExecutionConfigResponseOutput {
	return o
}

func (o ExecutionConfigResponseOutput) ToExecutionConfigResponseOutputWithContext(ctx context.Context) ExecutionConfigResponseOutput {
	return o
}

// Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o ExecutionConfigResponseOutput) ArtifactStorage() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) string { return v.ArtifactStorage }).(pulumi.StringOutput)
}

// Optional. Use default Cloud Build pool.
func (o ExecutionConfigResponseOutput) DefaultPool() DefaultPoolResponseOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) DefaultPoolResponse { return v.DefaultPool }).(DefaultPoolResponseOutput)
}

// Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
func (o ExecutionConfigResponseOutput) ExecutionTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) string { return v.ExecutionTimeout }).(pulumi.StringOutput)
}

// Optional. Use private Cloud Build pool.
func (o ExecutionConfigResponseOutput) PrivatePool() PrivatePoolResponseOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) PrivatePoolResponse { return v.PrivatePool }).(PrivatePoolResponseOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
func (o ExecutionConfigResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Usages when this configuration should be applied.
func (o ExecutionConfigResponseOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) []string { return v.Usages }).(pulumi.StringArrayOutput)
}

// Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
func (o ExecutionConfigResponseOutput) WorkerPool() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionConfigResponse) string { return v.WorkerPool }).(pulumi.StringOutput)
}

type ExecutionConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (ExecutionConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionConfigResponse)(nil)).Elem()
}

func (o ExecutionConfigResponseArrayOutput) ToExecutionConfigResponseArrayOutput() ExecutionConfigResponseArrayOutput {
	return o
}

func (o ExecutionConfigResponseArrayOutput) ToExecutionConfigResponseArrayOutputWithContext(ctx context.Context) ExecutionConfigResponseArrayOutput {
	return o
}

func (o ExecutionConfigResponseArrayOutput) Index(i pulumi.IntInput) ExecutionConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutionConfigResponse {
		return vs[0].([]ExecutionConfigResponse)[vs[1].(int)]
	}).(ExecutionConfigResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Information specifying a GKE Cluster.
type GkeCluster struct {
	// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}.
	Cluster *string `pulumi:"cluster"`
	// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
	InternalIp *bool `pulumi:"internalIp"`
}

// GkeClusterInput is an input type that accepts GkeClusterArgs and GkeClusterOutput values.
// You can construct a concrete instance of `GkeClusterInput` via:
//
//	GkeClusterArgs{...}
type GkeClusterInput interface {
	pulumi.Input

	ToGkeClusterOutput() GkeClusterOutput
	ToGkeClusterOutputWithContext(context.Context) GkeClusterOutput
}

// Information specifying a GKE Cluster.
type GkeClusterArgs struct {
	// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}.
	Cluster pulumi.StringPtrInput `pulumi:"cluster"`
	// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
	InternalIp pulumi.BoolPtrInput `pulumi:"internalIp"`
}

func (GkeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeCluster)(nil)).Elem()
}

func (i GkeClusterArgs) ToGkeClusterOutput() GkeClusterOutput {
	return i.ToGkeClusterOutputWithContext(context.Background())
}

func (i GkeClusterArgs) ToGkeClusterOutputWithContext(ctx context.Context) GkeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterOutput)
}

func (i GkeClusterArgs) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return i.ToGkeClusterPtrOutputWithContext(context.Background())
}

func (i GkeClusterArgs) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterOutput).ToGkeClusterPtrOutputWithContext(ctx)
}

// GkeClusterPtrInput is an input type that accepts GkeClusterArgs, GkeClusterPtr and GkeClusterPtrOutput values.
// You can construct a concrete instance of `GkeClusterPtrInput` via:
//
//	        GkeClusterArgs{...}
//
//	or:
//
//	        nil
type GkeClusterPtrInput interface {
	pulumi.Input

	ToGkeClusterPtrOutput() GkeClusterPtrOutput
	ToGkeClusterPtrOutputWithContext(context.Context) GkeClusterPtrOutput
}

type gkeClusterPtrType GkeClusterArgs

func GkeClusterPtr(v *GkeClusterArgs) GkeClusterPtrInput {
	return (*gkeClusterPtrType)(v)
}

func (*gkeClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeCluster)(nil)).Elem()
}

func (i *gkeClusterPtrType) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return i.ToGkeClusterPtrOutputWithContext(context.Background())
}

func (i *gkeClusterPtrType) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterPtrOutput)
}

// Information specifying a GKE Cluster.
type GkeClusterOutput struct{ *pulumi.OutputState }

func (GkeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeCluster)(nil)).Elem()
}

func (o GkeClusterOutput) ToGkeClusterOutput() GkeClusterOutput {
	return o
}

func (o GkeClusterOutput) ToGkeClusterOutputWithContext(ctx context.Context) GkeClusterOutput {
	return o
}

func (o GkeClusterOutput) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return o.ToGkeClusterPtrOutputWithContext(context.Background())
}

func (o GkeClusterOutput) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GkeCluster) *GkeCluster {
		return &v
	}).(GkeClusterPtrOutput)
}

// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}.
func (o GkeClusterOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GkeCluster) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
func (o GkeClusterOutput) InternalIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GkeCluster) *bool { return v.InternalIp }).(pulumi.BoolPtrOutput)
}

type GkeClusterPtrOutput struct{ *pulumi.OutputState }

func (GkeClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeCluster)(nil)).Elem()
}

func (o GkeClusterPtrOutput) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return o
}

func (o GkeClusterPtrOutput) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return o
}

func (o GkeClusterPtrOutput) Elem() GkeClusterOutput {
	return o.ApplyT(func(v *GkeCluster) GkeCluster {
		if v != nil {
			return *v
		}
		var ret GkeCluster
		return ret
	}).(GkeClusterOutput)
}

// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}.
func (o GkeClusterPtrOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeCluster) *string {
		if v == nil {
			return nil
		}
		return v.Cluster
	}).(pulumi.StringPtrOutput)
}

// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
func (o GkeClusterPtrOutput) InternalIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GkeCluster) *bool {
		if v == nil {
			return nil
		}
		return v.InternalIp
	}).(pulumi.BoolPtrOutput)
}

// Information specifying a GKE Cluster.
type GkeClusterResponse struct {
	// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}.
	Cluster string `pulumi:"cluster"`
	// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
	InternalIp bool `pulumi:"internalIp"`
}

// Information specifying a GKE Cluster.
type GkeClusterResponseOutput struct{ *pulumi.OutputState }

func (GkeClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeClusterResponse)(nil)).Elem()
}

func (o GkeClusterResponseOutput) ToGkeClusterResponseOutput() GkeClusterResponseOutput {
	return o
}

func (o GkeClusterResponseOutput) ToGkeClusterResponseOutputWithContext(ctx context.Context) GkeClusterResponseOutput {
	return o
}

// Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}.
func (o GkeClusterResponseOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v GkeClusterResponse) string { return v.Cluster }).(pulumi.StringOutput)
}

// Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
func (o GkeClusterResponseOutput) InternalIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GkeClusterResponse) bool { return v.InternalIp }).(pulumi.BoolOutput)
}

// Job represents an operation for a `Rollout`.
type JobResponse struct {
	// A deploy Job.
	DeployJob DeployJobResponse `pulumi:"deployJob"`
	// The name of the `JobRun` responsible for the most recent invocation of this Job.
	JobRun string `pulumi:"jobRun"`
	// The current state of the Job.
	State string `pulumi:"state"`
	// A verify Job.
	VerifyJob VerifyJobResponse `pulumi:"verifyJob"`
}

// Job represents an operation for a `Rollout`.
type JobResponseOutput struct{ *pulumi.OutputState }

func (JobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobResponse)(nil)).Elem()
}

func (o JobResponseOutput) ToJobResponseOutput() JobResponseOutput {
	return o
}

func (o JobResponseOutput) ToJobResponseOutputWithContext(ctx context.Context) JobResponseOutput {
	return o
}

// A deploy Job.
func (o JobResponseOutput) DeployJob() DeployJobResponseOutput {
	return o.ApplyT(func(v JobResponse) DeployJobResponse { return v.DeployJob }).(DeployJobResponseOutput)
}

// The name of the `JobRun` responsible for the most recent invocation of this Job.
func (o JobResponseOutput) JobRun() pulumi.StringOutput {
	return o.ApplyT(func(v JobResponse) string { return v.JobRun }).(pulumi.StringOutput)
}

// The current state of the Job.
func (o JobResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v JobResponse) string { return v.State }).(pulumi.StringOutput)
}

// A verify Job.
func (o JobResponseOutput) VerifyJob() VerifyJobResponseOutput {
	return o.ApplyT(func(v JobResponse) VerifyJobResponse { return v.VerifyJob }).(VerifyJobResponseOutput)
}

// Metadata includes information associated with a `Rollout`.
type MetadataResponse struct {
	// The name of the Cloud Run Service that is associated with a `Rollout`.
	CloudRun CloudRunMetadataResponse `pulumi:"cloudRun"`
}

// Metadata includes information associated with a `Rollout`.
type MetadataResponseOutput struct{ *pulumi.OutputState }

func (MetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataResponse)(nil)).Elem()
}

func (o MetadataResponseOutput) ToMetadataResponseOutput() MetadataResponseOutput {
	return o
}

func (o MetadataResponseOutput) ToMetadataResponseOutputWithContext(ctx context.Context) MetadataResponseOutput {
	return o
}

// The name of the Cloud Run Service that is associated with a `Rollout`.
func (o MetadataResponseOutput) CloudRun() CloudRunMetadataResponseOutput {
	return o.ApplyT(func(v MetadataResponse) CloudRunMetadataResponse { return v.CloudRun }).(CloudRunMetadataResponseOutput)
}

// Phase represents a collection of jobs that are logically grouped together for a `Rollout`.
type PhaseResponse struct {
	// Deployment job composition.
	DeploymentJobs DeploymentJobsResponse `pulumi:"deploymentJobs"`
	// Current state of the Phase.
	State string `pulumi:"state"`
}

// Phase represents a collection of jobs that are logically grouped together for a `Rollout`.
type PhaseResponseOutput struct{ *pulumi.OutputState }

func (PhaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhaseResponse)(nil)).Elem()
}

func (o PhaseResponseOutput) ToPhaseResponseOutput() PhaseResponseOutput {
	return o
}

func (o PhaseResponseOutput) ToPhaseResponseOutputWithContext(ctx context.Context) PhaseResponseOutput {
	return o
}

// Deployment job composition.
func (o PhaseResponseOutput) DeploymentJobs() DeploymentJobsResponseOutput {
	return o.ApplyT(func(v PhaseResponse) DeploymentJobsResponse { return v.DeploymentJobs }).(DeploymentJobsResponseOutput)
}

// Current state of the Phase.
func (o PhaseResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v PhaseResponse) string { return v.State }).(pulumi.StringOutput)
}

type PhaseResponseArrayOutput struct{ *pulumi.OutputState }

func (PhaseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhaseResponse)(nil)).Elem()
}

func (o PhaseResponseArrayOutput) ToPhaseResponseArrayOutput() PhaseResponseArrayOutput {
	return o
}

func (o PhaseResponseArrayOutput) ToPhaseResponseArrayOutputWithContext(ctx context.Context) PhaseResponseArrayOutput {
	return o
}

func (o PhaseResponseArrayOutput) Index(i pulumi.IntInput) PhaseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PhaseResponse {
		return vs[0].([]PhaseResponse)[vs[1].(int)]
	}).(PhaseResponseOutput)
}

// PipelineCondition contains all conditions relevant to a Delivery Pipeline.
type PipelineConditionResponse struct {
	// Details around the Pipeline's overall status.
	PipelineReadyCondition PipelineReadyConditionResponse `pulumi:"pipelineReadyCondition"`
	// Detalis around targets enumerated in the pipeline.
	TargetsPresentCondition TargetsPresentConditionResponse `pulumi:"targetsPresentCondition"`
}

// PipelineCondition contains all conditions relevant to a Delivery Pipeline.
type PipelineConditionResponseOutput struct{ *pulumi.OutputState }

func (PipelineConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineConditionResponse)(nil)).Elem()
}

func (o PipelineConditionResponseOutput) ToPipelineConditionResponseOutput() PipelineConditionResponseOutput {
	return o
}

func (o PipelineConditionResponseOutput) ToPipelineConditionResponseOutputWithContext(ctx context.Context) PipelineConditionResponseOutput {
	return o
}

// Details around the Pipeline's overall status.
func (o PipelineConditionResponseOutput) PipelineReadyCondition() PipelineReadyConditionResponseOutput {
	return o.ApplyT(func(v PipelineConditionResponse) PipelineReadyConditionResponse { return v.PipelineReadyCondition }).(PipelineReadyConditionResponseOutput)
}

// Detalis around targets enumerated in the pipeline.
func (o PipelineConditionResponseOutput) TargetsPresentCondition() TargetsPresentConditionResponseOutput {
	return o.ApplyT(func(v PipelineConditionResponse) TargetsPresentConditionResponse { return v.TargetsPresentCondition }).(TargetsPresentConditionResponseOutput)
}

// PipelineReadyCondition contains information around the status of the Pipeline.
type PipelineReadyConditionResponse struct {
	// True if the Pipeline is in a valid state. Otherwise at least one condition in `PipelineCondition` is in an invalid state. Iterate over those conditions and see which condition(s) has status = false to find out what is wrong with the Pipeline.
	Status bool `pulumi:"status"`
	// Last time the condition was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// PipelineReadyCondition contains information around the status of the Pipeline.
type PipelineReadyConditionResponseOutput struct{ *pulumi.OutputState }

func (PipelineReadyConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReadyConditionResponse)(nil)).Elem()
}

func (o PipelineReadyConditionResponseOutput) ToPipelineReadyConditionResponseOutput() PipelineReadyConditionResponseOutput {
	return o
}

func (o PipelineReadyConditionResponseOutput) ToPipelineReadyConditionResponseOutputWithContext(ctx context.Context) PipelineReadyConditionResponseOutput {
	return o
}

// True if the Pipeline is in a valid state. Otherwise at least one condition in `PipelineCondition` is in an invalid state. Iterate over those conditions and see which condition(s) has status = false to find out what is wrong with the Pipeline.
func (o PipelineReadyConditionResponseOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v PipelineReadyConditionResponse) bool { return v.Status }).(pulumi.BoolOutput)
}

// Last time the condition was updated.
func (o PipelineReadyConditionResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReadyConditionResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Execution using a private Cloud Build pool.
type PrivatePool struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage *string `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
	WorkerPool string `pulumi:"workerPool"`
}

// PrivatePoolInput is an input type that accepts PrivatePoolArgs and PrivatePoolOutput values.
// You can construct a concrete instance of `PrivatePoolInput` via:
//
//	PrivatePoolArgs{...}
type PrivatePoolInput interface {
	pulumi.Input

	ToPrivatePoolOutput() PrivatePoolOutput
	ToPrivatePoolOutputWithContext(context.Context) PrivatePoolOutput
}

// Execution using a private Cloud Build pool.
type PrivatePoolArgs struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage pulumi.StringPtrInput `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
	WorkerPool pulumi.StringInput `pulumi:"workerPool"`
}

func (PrivatePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivatePool)(nil)).Elem()
}

func (i PrivatePoolArgs) ToPrivatePoolOutput() PrivatePoolOutput {
	return i.ToPrivatePoolOutputWithContext(context.Background())
}

func (i PrivatePoolArgs) ToPrivatePoolOutputWithContext(ctx context.Context) PrivatePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatePoolOutput)
}

func (i PrivatePoolArgs) ToPrivatePoolPtrOutput() PrivatePoolPtrOutput {
	return i.ToPrivatePoolPtrOutputWithContext(context.Background())
}

func (i PrivatePoolArgs) ToPrivatePoolPtrOutputWithContext(ctx context.Context) PrivatePoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatePoolOutput).ToPrivatePoolPtrOutputWithContext(ctx)
}

// PrivatePoolPtrInput is an input type that accepts PrivatePoolArgs, PrivatePoolPtr and PrivatePoolPtrOutput values.
// You can construct a concrete instance of `PrivatePoolPtrInput` via:
//
//	        PrivatePoolArgs{...}
//
//	or:
//
//	        nil
type PrivatePoolPtrInput interface {
	pulumi.Input

	ToPrivatePoolPtrOutput() PrivatePoolPtrOutput
	ToPrivatePoolPtrOutputWithContext(context.Context) PrivatePoolPtrOutput
}

type privatePoolPtrType PrivatePoolArgs

func PrivatePoolPtr(v *PrivatePoolArgs) PrivatePoolPtrInput {
	return (*privatePoolPtrType)(v)
}

func (*privatePoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivatePool)(nil)).Elem()
}

func (i *privatePoolPtrType) ToPrivatePoolPtrOutput() PrivatePoolPtrOutput {
	return i.ToPrivatePoolPtrOutputWithContext(context.Background())
}

func (i *privatePoolPtrType) ToPrivatePoolPtrOutputWithContext(ctx context.Context) PrivatePoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatePoolPtrOutput)
}

// Execution using a private Cloud Build pool.
type PrivatePoolOutput struct{ *pulumi.OutputState }

func (PrivatePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivatePool)(nil)).Elem()
}

func (o PrivatePoolOutput) ToPrivatePoolOutput() PrivatePoolOutput {
	return o
}

func (o PrivatePoolOutput) ToPrivatePoolOutputWithContext(ctx context.Context) PrivatePoolOutput {
	return o
}

func (o PrivatePoolOutput) ToPrivatePoolPtrOutput() PrivatePoolPtrOutput {
	return o.ToPrivatePoolPtrOutputWithContext(context.Background())
}

func (o PrivatePoolOutput) ToPrivatePoolPtrOutputWithContext(ctx context.Context) PrivatePoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivatePool) *PrivatePool {
		return &v
	}).(PrivatePoolPtrOutput)
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o PrivatePoolOutput) ArtifactStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivatePool) *string { return v.ArtifactStorage }).(pulumi.StringPtrOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o PrivatePoolOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivatePool) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
func (o PrivatePoolOutput) WorkerPool() pulumi.StringOutput {
	return o.ApplyT(func(v PrivatePool) string { return v.WorkerPool }).(pulumi.StringOutput)
}

type PrivatePoolPtrOutput struct{ *pulumi.OutputState }

func (PrivatePoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivatePool)(nil)).Elem()
}

func (o PrivatePoolPtrOutput) ToPrivatePoolPtrOutput() PrivatePoolPtrOutput {
	return o
}

func (o PrivatePoolPtrOutput) ToPrivatePoolPtrOutputWithContext(ctx context.Context) PrivatePoolPtrOutput {
	return o
}

func (o PrivatePoolPtrOutput) Elem() PrivatePoolOutput {
	return o.ApplyT(func(v *PrivatePool) PrivatePool {
		if v != nil {
			return *v
		}
		var ret PrivatePool
		return ret
	}).(PrivatePoolOutput)
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o PrivatePoolPtrOutput) ArtifactStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatePool) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactStorage
	}).(pulumi.StringPtrOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o PrivatePoolPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatePool) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
func (o PrivatePoolPtrOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivatePool) *string {
		if v == nil {
			return nil
		}
		return &v.WorkerPool
	}).(pulumi.StringPtrOutput)
}

// Execution using a private Cloud Build pool.
type PrivatePoolResponse struct {
	// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage string `pulumi:"artifactStorage"`
	// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
	WorkerPool string `pulumi:"workerPool"`
}

// Execution using a private Cloud Build pool.
type PrivatePoolResponseOutput struct{ *pulumi.OutputState }

func (PrivatePoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivatePoolResponse)(nil)).Elem()
}

func (o PrivatePoolResponseOutput) ToPrivatePoolResponseOutput() PrivatePoolResponseOutput {
	return o
}

func (o PrivatePoolResponseOutput) ToPrivatePoolResponseOutputWithContext(ctx context.Context) PrivatePoolResponseOutput {
	return o
}

// Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
func (o PrivatePoolResponseOutput) ArtifactStorage() pulumi.StringOutput {
	return o.ApplyT(func(v PrivatePoolResponse) string { return v.ArtifactStorage }).(pulumi.StringOutput)
}

// Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
func (o PrivatePoolResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v PrivatePoolResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
func (o PrivatePoolResponseOutput) WorkerPool() pulumi.StringOutput {
	return o.ApplyT(func(v PrivatePoolResponse) string { return v.WorkerPool }).(pulumi.StringOutput)
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipeline struct {
	// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
	Stages []Stage `pulumi:"stages"`
}

// SerialPipelineInput is an input type that accepts SerialPipelineArgs and SerialPipelineOutput values.
// You can construct a concrete instance of `SerialPipelineInput` via:
//
//	SerialPipelineArgs{...}
type SerialPipelineInput interface {
	pulumi.Input

	ToSerialPipelineOutput() SerialPipelineOutput
	ToSerialPipelineOutputWithContext(context.Context) SerialPipelineOutput
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipelineArgs struct {
	// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
	Stages StageArrayInput `pulumi:"stages"`
}

func (SerialPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SerialPipeline)(nil)).Elem()
}

func (i SerialPipelineArgs) ToSerialPipelineOutput() SerialPipelineOutput {
	return i.ToSerialPipelineOutputWithContext(context.Background())
}

func (i SerialPipelineArgs) ToSerialPipelineOutputWithContext(ctx context.Context) SerialPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerialPipelineOutput)
}

func (i SerialPipelineArgs) ToSerialPipelinePtrOutput() SerialPipelinePtrOutput {
	return i.ToSerialPipelinePtrOutputWithContext(context.Background())
}

func (i SerialPipelineArgs) ToSerialPipelinePtrOutputWithContext(ctx context.Context) SerialPipelinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerialPipelineOutput).ToSerialPipelinePtrOutputWithContext(ctx)
}

// SerialPipelinePtrInput is an input type that accepts SerialPipelineArgs, SerialPipelinePtr and SerialPipelinePtrOutput values.
// You can construct a concrete instance of `SerialPipelinePtrInput` via:
//
//	        SerialPipelineArgs{...}
//
//	or:
//
//	        nil
type SerialPipelinePtrInput interface {
	pulumi.Input

	ToSerialPipelinePtrOutput() SerialPipelinePtrOutput
	ToSerialPipelinePtrOutputWithContext(context.Context) SerialPipelinePtrOutput
}

type serialPipelinePtrType SerialPipelineArgs

func SerialPipelinePtr(v *SerialPipelineArgs) SerialPipelinePtrInput {
	return (*serialPipelinePtrType)(v)
}

func (*serialPipelinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SerialPipeline)(nil)).Elem()
}

func (i *serialPipelinePtrType) ToSerialPipelinePtrOutput() SerialPipelinePtrOutput {
	return i.ToSerialPipelinePtrOutputWithContext(context.Background())
}

func (i *serialPipelinePtrType) ToSerialPipelinePtrOutputWithContext(ctx context.Context) SerialPipelinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerialPipelinePtrOutput)
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipelineOutput struct{ *pulumi.OutputState }

func (SerialPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SerialPipeline)(nil)).Elem()
}

func (o SerialPipelineOutput) ToSerialPipelineOutput() SerialPipelineOutput {
	return o
}

func (o SerialPipelineOutput) ToSerialPipelineOutputWithContext(ctx context.Context) SerialPipelineOutput {
	return o
}

func (o SerialPipelineOutput) ToSerialPipelinePtrOutput() SerialPipelinePtrOutput {
	return o.ToSerialPipelinePtrOutputWithContext(context.Background())
}

func (o SerialPipelineOutput) ToSerialPipelinePtrOutputWithContext(ctx context.Context) SerialPipelinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SerialPipeline) *SerialPipeline {
		return &v
	}).(SerialPipelinePtrOutput)
}

// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
func (o SerialPipelineOutput) Stages() StageArrayOutput {
	return o.ApplyT(func(v SerialPipeline) []Stage { return v.Stages }).(StageArrayOutput)
}

type SerialPipelinePtrOutput struct{ *pulumi.OutputState }

func (SerialPipelinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SerialPipeline)(nil)).Elem()
}

func (o SerialPipelinePtrOutput) ToSerialPipelinePtrOutput() SerialPipelinePtrOutput {
	return o
}

func (o SerialPipelinePtrOutput) ToSerialPipelinePtrOutputWithContext(ctx context.Context) SerialPipelinePtrOutput {
	return o
}

func (o SerialPipelinePtrOutput) Elem() SerialPipelineOutput {
	return o.ApplyT(func(v *SerialPipeline) SerialPipeline {
		if v != nil {
			return *v
		}
		var ret SerialPipeline
		return ret
	}).(SerialPipelineOutput)
}

// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
func (o SerialPipelinePtrOutput) Stages() StageArrayOutput {
	return o.ApplyT(func(v *SerialPipeline) []Stage {
		if v == nil {
			return nil
		}
		return v.Stages
	}).(StageArrayOutput)
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipelineResponse struct {
	// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
	Stages []StageResponse `pulumi:"stages"`
}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipelineResponseOutput struct{ *pulumi.OutputState }

func (SerialPipelineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SerialPipelineResponse)(nil)).Elem()
}

func (o SerialPipelineResponseOutput) ToSerialPipelineResponseOutput() SerialPipelineResponseOutput {
	return o
}

func (o SerialPipelineResponseOutput) ToSerialPipelineResponseOutputWithContext(ctx context.Context) SerialPipelineResponseOutput {
	return o
}

// Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
func (o SerialPipelineResponseOutput) Stages() StageResponseArrayOutput {
	return o.ApplyT(func(v SerialPipelineResponse) []StageResponse { return v.Stages }).(StageResponseArrayOutput)
}

// Stage specifies a location to which to deploy.
type Stage struct {
	// Skaffold profiles to use when rendering the manifest for this stage's `Target`.
	Profiles []string `pulumi:"profiles"`
	// Optional. The strategy to use for a `Rollout` to this stage.
	Strategy *Strategy `pulumi:"strategy"`
	// The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
	TargetId *string `pulumi:"targetId"`
}

// StageInput is an input type that accepts StageArgs and StageOutput values.
// You can construct a concrete instance of `StageInput` via:
//
//	StageArgs{...}
type StageInput interface {
	pulumi.Input

	ToStageOutput() StageOutput
	ToStageOutputWithContext(context.Context) StageOutput
}

// Stage specifies a location to which to deploy.
type StageArgs struct {
	// Skaffold profiles to use when rendering the manifest for this stage's `Target`.
	Profiles pulumi.StringArrayInput `pulumi:"profiles"`
	// Optional. The strategy to use for a `Rollout` to this stage.
	Strategy StrategyPtrInput `pulumi:"strategy"`
	// The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
	TargetId pulumi.StringPtrInput `pulumi:"targetId"`
}

func (StageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Stage)(nil)).Elem()
}

func (i StageArgs) ToStageOutput() StageOutput {
	return i.ToStageOutputWithContext(context.Background())
}

func (i StageArgs) ToStageOutputWithContext(ctx context.Context) StageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageOutput)
}

// StageArrayInput is an input type that accepts StageArray and StageArrayOutput values.
// You can construct a concrete instance of `StageArrayInput` via:
//
//	StageArray{ StageArgs{...} }
type StageArrayInput interface {
	pulumi.Input

	ToStageArrayOutput() StageArrayOutput
	ToStageArrayOutputWithContext(context.Context) StageArrayOutput
}

type StageArray []StageInput

func (StageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Stage)(nil)).Elem()
}

func (i StageArray) ToStageArrayOutput() StageArrayOutput {
	return i.ToStageArrayOutputWithContext(context.Background())
}

func (i StageArray) ToStageArrayOutputWithContext(ctx context.Context) StageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageArrayOutput)
}

// Stage specifies a location to which to deploy.
type StageOutput struct{ *pulumi.OutputState }

func (StageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Stage)(nil)).Elem()
}

func (o StageOutput) ToStageOutput() StageOutput {
	return o
}

func (o StageOutput) ToStageOutputWithContext(ctx context.Context) StageOutput {
	return o
}

// Skaffold profiles to use when rendering the manifest for this stage's `Target`.
func (o StageOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Stage) []string { return v.Profiles }).(pulumi.StringArrayOutput)
}

// Optional. The strategy to use for a `Rollout` to this stage.
func (o StageOutput) Strategy() StrategyPtrOutput {
	return o.ApplyT(func(v Stage) *Strategy { return v.Strategy }).(StrategyPtrOutput)
}

// The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
func (o StageOutput) TargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Stage) *string { return v.TargetId }).(pulumi.StringPtrOutput)
}

type StageArrayOutput struct{ *pulumi.OutputState }

func (StageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Stage)(nil)).Elem()
}

func (o StageArrayOutput) ToStageArrayOutput() StageArrayOutput {
	return o
}

func (o StageArrayOutput) ToStageArrayOutputWithContext(ctx context.Context) StageArrayOutput {
	return o
}

func (o StageArrayOutput) Index(i pulumi.IntInput) StageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Stage {
		return vs[0].([]Stage)[vs[1].(int)]
	}).(StageOutput)
}

// Stage specifies a location to which to deploy.
type StageResponse struct {
	// Skaffold profiles to use when rendering the manifest for this stage's `Target`.
	Profiles []string `pulumi:"profiles"`
	// Optional. The strategy to use for a `Rollout` to this stage.
	Strategy StrategyResponse `pulumi:"strategy"`
	// The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
	TargetId string `pulumi:"targetId"`
}

// Stage specifies a location to which to deploy.
type StageResponseOutput struct{ *pulumi.OutputState }

func (StageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageResponse)(nil)).Elem()
}

func (o StageResponseOutput) ToStageResponseOutput() StageResponseOutput {
	return o
}

func (o StageResponseOutput) ToStageResponseOutputWithContext(ctx context.Context) StageResponseOutput {
	return o
}

// Skaffold profiles to use when rendering the manifest for this stage's `Target`.
func (o StageResponseOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StageResponse) []string { return v.Profiles }).(pulumi.StringArrayOutput)
}

// Optional. The strategy to use for a `Rollout` to this stage.
func (o StageResponseOutput) Strategy() StrategyResponseOutput {
	return o.ApplyT(func(v StageResponse) StrategyResponse { return v.Strategy }).(StrategyResponseOutput)
}

// The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
func (o StageResponseOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v StageResponse) string { return v.TargetId }).(pulumi.StringOutput)
}

type StageResponseArrayOutput struct{ *pulumi.OutputState }

func (StageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageResponse)(nil)).Elem()
}

func (o StageResponseArrayOutput) ToStageResponseArrayOutput() StageResponseArrayOutput {
	return o
}

func (o StageResponseArrayOutput) ToStageResponseArrayOutputWithContext(ctx context.Context) StageResponseArrayOutput {
	return o
}

func (o StageResponseArrayOutput) Index(i pulumi.IntInput) StageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StageResponse {
		return vs[0].([]StageResponse)[vs[1].(int)]
	}).(StageResponseOutput)
}

// Standard represents the standard deployment strategy.
type Standard struct {
	// Whether to verify a deployment.
	Verify *bool `pulumi:"verify"`
}

// StandardInput is an input type that accepts StandardArgs and StandardOutput values.
// You can construct a concrete instance of `StandardInput` via:
//
//	StandardArgs{...}
type StandardInput interface {
	pulumi.Input

	ToStandardOutput() StandardOutput
	ToStandardOutputWithContext(context.Context) StandardOutput
}

// Standard represents the standard deployment strategy.
type StandardArgs struct {
	// Whether to verify a deployment.
	Verify pulumi.BoolPtrInput `pulumi:"verify"`
}

func (StandardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Standard)(nil)).Elem()
}

func (i StandardArgs) ToStandardOutput() StandardOutput {
	return i.ToStandardOutputWithContext(context.Background())
}

func (i StandardArgs) ToStandardOutputWithContext(ctx context.Context) StandardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardOutput)
}

func (i StandardArgs) ToStandardPtrOutput() StandardPtrOutput {
	return i.ToStandardPtrOutputWithContext(context.Background())
}

func (i StandardArgs) ToStandardPtrOutputWithContext(ctx context.Context) StandardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardOutput).ToStandardPtrOutputWithContext(ctx)
}

// StandardPtrInput is an input type that accepts StandardArgs, StandardPtr and StandardPtrOutput values.
// You can construct a concrete instance of `StandardPtrInput` via:
//
//	        StandardArgs{...}
//
//	or:
//
//	        nil
type StandardPtrInput interface {
	pulumi.Input

	ToStandardPtrOutput() StandardPtrOutput
	ToStandardPtrOutputWithContext(context.Context) StandardPtrOutput
}

type standardPtrType StandardArgs

func StandardPtr(v *StandardArgs) StandardPtrInput {
	return (*standardPtrType)(v)
}

func (*standardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Standard)(nil)).Elem()
}

func (i *standardPtrType) ToStandardPtrOutput() StandardPtrOutput {
	return i.ToStandardPtrOutputWithContext(context.Background())
}

func (i *standardPtrType) ToStandardPtrOutputWithContext(ctx context.Context) StandardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardPtrOutput)
}

// Standard represents the standard deployment strategy.
type StandardOutput struct{ *pulumi.OutputState }

func (StandardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Standard)(nil)).Elem()
}

func (o StandardOutput) ToStandardOutput() StandardOutput {
	return o
}

func (o StandardOutput) ToStandardOutputWithContext(ctx context.Context) StandardOutput {
	return o
}

func (o StandardOutput) ToStandardPtrOutput() StandardPtrOutput {
	return o.ToStandardPtrOutputWithContext(context.Background())
}

func (o StandardOutput) ToStandardPtrOutputWithContext(ctx context.Context) StandardPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Standard) *Standard {
		return &v
	}).(StandardPtrOutput)
}

// Whether to verify a deployment.
func (o StandardOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Standard) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

type StandardPtrOutput struct{ *pulumi.OutputState }

func (StandardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Standard)(nil)).Elem()
}

func (o StandardPtrOutput) ToStandardPtrOutput() StandardPtrOutput {
	return o
}

func (o StandardPtrOutput) ToStandardPtrOutputWithContext(ctx context.Context) StandardPtrOutput {
	return o
}

func (o StandardPtrOutput) Elem() StandardOutput {
	return o.ApplyT(func(v *Standard) Standard {
		if v != nil {
			return *v
		}
		var ret Standard
		return ret
	}).(StandardOutput)
}

// Whether to verify a deployment.
func (o StandardPtrOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Standard) *bool {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(pulumi.BoolPtrOutput)
}

// Standard represents the standard deployment strategy.
type StandardResponse struct {
	// Whether to verify a deployment.
	Verify bool `pulumi:"verify"`
}

// Standard represents the standard deployment strategy.
type StandardResponseOutput struct{ *pulumi.OutputState }

func (StandardResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardResponse)(nil)).Elem()
}

func (o StandardResponseOutput) ToStandardResponseOutput() StandardResponseOutput {
	return o
}

func (o StandardResponseOutput) ToStandardResponseOutputWithContext(ctx context.Context) StandardResponseOutput {
	return o
}

// Whether to verify a deployment.
func (o StandardResponseOutput) Verify() pulumi.BoolOutput {
	return o.ApplyT(func(v StandardResponse) bool { return v.Verify }).(pulumi.BoolOutput)
}

// Strategy contains deployment strategy information.
type Strategy struct {
	// Standard deployment strategy executes a single deploy and allows verifying the deployment.
	Standard *Standard `pulumi:"standard"`
}

// StrategyInput is an input type that accepts StrategyArgs and StrategyOutput values.
// You can construct a concrete instance of `StrategyInput` via:
//
//	StrategyArgs{...}
type StrategyInput interface {
	pulumi.Input

	ToStrategyOutput() StrategyOutput
	ToStrategyOutputWithContext(context.Context) StrategyOutput
}

// Strategy contains deployment strategy information.
type StrategyArgs struct {
	// Standard deployment strategy executes a single deploy and allows verifying the deployment.
	Standard StandardPtrInput `pulumi:"standard"`
}

func (StrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Strategy)(nil)).Elem()
}

func (i StrategyArgs) ToStrategyOutput() StrategyOutput {
	return i.ToStrategyOutputWithContext(context.Background())
}

func (i StrategyArgs) ToStrategyOutputWithContext(ctx context.Context) StrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyOutput)
}

func (i StrategyArgs) ToStrategyPtrOutput() StrategyPtrOutput {
	return i.ToStrategyPtrOutputWithContext(context.Background())
}

func (i StrategyArgs) ToStrategyPtrOutputWithContext(ctx context.Context) StrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyOutput).ToStrategyPtrOutputWithContext(ctx)
}

// StrategyPtrInput is an input type that accepts StrategyArgs, StrategyPtr and StrategyPtrOutput values.
// You can construct a concrete instance of `StrategyPtrInput` via:
//
//	        StrategyArgs{...}
//
//	or:
//
//	        nil
type StrategyPtrInput interface {
	pulumi.Input

	ToStrategyPtrOutput() StrategyPtrOutput
	ToStrategyPtrOutputWithContext(context.Context) StrategyPtrOutput
}

type strategyPtrType StrategyArgs

func StrategyPtr(v *StrategyArgs) StrategyPtrInput {
	return (*strategyPtrType)(v)
}

func (*strategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Strategy)(nil)).Elem()
}

func (i *strategyPtrType) ToStrategyPtrOutput() StrategyPtrOutput {
	return i.ToStrategyPtrOutputWithContext(context.Background())
}

func (i *strategyPtrType) ToStrategyPtrOutputWithContext(ctx context.Context) StrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyPtrOutput)
}

// Strategy contains deployment strategy information.
type StrategyOutput struct{ *pulumi.OutputState }

func (StrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Strategy)(nil)).Elem()
}

func (o StrategyOutput) ToStrategyOutput() StrategyOutput {
	return o
}

func (o StrategyOutput) ToStrategyOutputWithContext(ctx context.Context) StrategyOutput {
	return o
}

func (o StrategyOutput) ToStrategyPtrOutput() StrategyPtrOutput {
	return o.ToStrategyPtrOutputWithContext(context.Background())
}

func (o StrategyOutput) ToStrategyPtrOutputWithContext(ctx context.Context) StrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Strategy) *Strategy {
		return &v
	}).(StrategyPtrOutput)
}

// Standard deployment strategy executes a single deploy and allows verifying the deployment.
func (o StrategyOutput) Standard() StandardPtrOutput {
	return o.ApplyT(func(v Strategy) *Standard { return v.Standard }).(StandardPtrOutput)
}

type StrategyPtrOutput struct{ *pulumi.OutputState }

func (StrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Strategy)(nil)).Elem()
}

func (o StrategyPtrOutput) ToStrategyPtrOutput() StrategyPtrOutput {
	return o
}

func (o StrategyPtrOutput) ToStrategyPtrOutputWithContext(ctx context.Context) StrategyPtrOutput {
	return o
}

func (o StrategyPtrOutput) Elem() StrategyOutput {
	return o.ApplyT(func(v *Strategy) Strategy {
		if v != nil {
			return *v
		}
		var ret Strategy
		return ret
	}).(StrategyOutput)
}

// Standard deployment strategy executes a single deploy and allows verifying the deployment.
func (o StrategyPtrOutput) Standard() StandardPtrOutput {
	return o.ApplyT(func(v *Strategy) *Standard {
		if v == nil {
			return nil
		}
		return v.Standard
	}).(StandardPtrOutput)
}

// Strategy contains deployment strategy information.
type StrategyResponse struct {
	// Standard deployment strategy executes a single deploy and allows verifying the deployment.
	Standard StandardResponse `pulumi:"standard"`
}

// Strategy contains deployment strategy information.
type StrategyResponseOutput struct{ *pulumi.OutputState }

func (StrategyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StrategyResponse)(nil)).Elem()
}

func (o StrategyResponseOutput) ToStrategyResponseOutput() StrategyResponseOutput {
	return o
}

func (o StrategyResponseOutput) ToStrategyResponseOutputWithContext(ctx context.Context) StrategyResponseOutput {
	return o
}

// Standard deployment strategy executes a single deploy and allows verifying the deployment.
func (o StrategyResponseOutput) Standard() StandardResponseOutput {
	return o.ApplyT(func(v StrategyResponse) StandardResponse { return v.Standard }).(StandardResponseOutput)
}

// A `Target` resource in the Google Cloud Deploy API. A `Target` defines a location to which a Skaffold configuration can be deployed.
type TargetResponse struct {
	// Optional. User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	Annotations map[string]string `pulumi:"annotations"`
	// Information specifying an Anthos Cluster.
	AnthosCluster AnthosClusterResponse `pulumi:"anthosCluster"`
	// Time at which the `Target` was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. Description of the `Target`. Max length is 255 characters.
	Description string `pulumi:"description"`
	// Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag string `pulumi:"etag"`
	// Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.
	ExecutionConfigs []ExecutionConfigResponse `pulumi:"executionConfigs"`
	// Information specifying a GKE Cluster.
	Gke GkeClusterResponse `pulumi:"gke"`
	// Optional. Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Name of the `Target`. Format is projects/{project}/locations/{location}/targets/a-z{0,62}.
	Name string `pulumi:"name"`
	// Optional. Whether or not the `Target` requires approval.
	RequireApproval bool `pulumi:"requireApproval"`
	// Information specifying a Cloud Run deployment target.
	Run CloudRunLocationResponse `pulumi:"run"`
	// Resource id of the `Target`.
	TargetId string `pulumi:"targetId"`
	// Unique identifier of the `Target`.
	Uid string `pulumi:"uid"`
	// Most recent time at which the `Target` was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// A `Target` resource in the Google Cloud Deploy API. A `Target` defines a location to which a Skaffold configuration can be deployed.
type TargetResponseOutput struct{ *pulumi.OutputState }

func (TargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetResponse)(nil)).Elem()
}

func (o TargetResponseOutput) ToTargetResponseOutput() TargetResponseOutput {
	return o
}

func (o TargetResponseOutput) ToTargetResponseOutputWithContext(ctx context.Context) TargetResponseOutput {
	return o
}

// Optional. User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
func (o TargetResponseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetResponse) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Information specifying an Anthos Cluster.
func (o TargetResponseOutput) AnthosCluster() AnthosClusterResponseOutput {
	return o.ApplyT(func(v TargetResponse) AnthosClusterResponse { return v.AnthosCluster }).(AnthosClusterResponseOutput)
}

// Time at which the `Target` was created.
func (o TargetResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Description of the `Target`. Max length is 255 characters.
func (o TargetResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o TargetResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.
func (o TargetResponseOutput) ExecutionConfigs() ExecutionConfigResponseArrayOutput {
	return o.ApplyT(func(v TargetResponse) []ExecutionConfigResponse { return v.ExecutionConfigs }).(ExecutionConfigResponseArrayOutput)
}

// Information specifying a GKE Cluster.
func (o TargetResponseOutput) Gke() GkeClusterResponseOutput {
	return o.ApplyT(func(v TargetResponse) GkeClusterResponse { return v.Gke }).(GkeClusterResponseOutput)
}

// Optional. Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
func (o TargetResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TargetResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Optional. Name of the `Target`. Format is projects/{project}/locations/{location}/targets/a-z{0,62}.
func (o TargetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. Whether or not the `Target` requires approval.
func (o TargetResponseOutput) RequireApproval() pulumi.BoolOutput {
	return o.ApplyT(func(v TargetResponse) bool { return v.RequireApproval }).(pulumi.BoolOutput)
}

// Information specifying a Cloud Run deployment target.
func (o TargetResponseOutput) Run() CloudRunLocationResponseOutput {
	return o.ApplyT(func(v TargetResponse) CloudRunLocationResponse { return v.Run }).(CloudRunLocationResponseOutput)
}

// Resource id of the `Target`.
func (o TargetResponseOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.TargetId }).(pulumi.StringOutput)
}

// Unique identifier of the `Target`.
func (o TargetResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.Uid }).(pulumi.StringOutput)
}

// Most recent time at which the `Target` was updated.
func (o TargetResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TargetResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type TargetResponseArrayOutput struct{ *pulumi.OutputState }

func (TargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetResponse)(nil)).Elem()
}

func (o TargetResponseArrayOutput) ToTargetResponseArrayOutput() TargetResponseArrayOutput {
	return o
}

func (o TargetResponseArrayOutput) ToTargetResponseArrayOutputWithContext(ctx context.Context) TargetResponseArrayOutput {
	return o
}

func (o TargetResponseArrayOutput) Index(i pulumi.IntInput) TargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetResponse {
		return vs[0].([]TargetResponse)[vs[1].(int)]
	}).(TargetResponseOutput)
}

// TargetsPresentCondition contains information on any Targets defined in the Delivery Pipeline that do not actually exist.
type TargetsPresentConditionResponse struct {
	// The list of Target names that are missing. For example, projects/{project_id}/locations/{location_name}/targets/{target_name}.
	MissingTargets []string `pulumi:"missingTargets"`
	// True if there aren't any missing Targets.
	Status bool `pulumi:"status"`
	// Last time the condition was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// TargetsPresentCondition contains information on any Targets defined in the Delivery Pipeline that do not actually exist.
type TargetsPresentConditionResponseOutput struct{ *pulumi.OutputState }

func (TargetsPresentConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetsPresentConditionResponse)(nil)).Elem()
}

func (o TargetsPresentConditionResponseOutput) ToTargetsPresentConditionResponseOutput() TargetsPresentConditionResponseOutput {
	return o
}

func (o TargetsPresentConditionResponseOutput) ToTargetsPresentConditionResponseOutputWithContext(ctx context.Context) TargetsPresentConditionResponseOutput {
	return o
}

// The list of Target names that are missing. For example, projects/{project_id}/locations/{location_name}/targets/{target_name}.
func (o TargetsPresentConditionResponseOutput) MissingTargets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TargetsPresentConditionResponse) []string { return v.MissingTargets }).(pulumi.StringArrayOutput)
}

// True if there aren't any missing Targets.
func (o TargetsPresentConditionResponseOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v TargetsPresentConditionResponse) bool { return v.Status }).(pulumi.BoolOutput)
}

// Last time the condition was updated.
func (o TargetsPresentConditionResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TargetsPresentConditionResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// A verify Job.
type VerifyJobResponse struct {
}

// A verify Job.
type VerifyJobResponseOutput struct{ *pulumi.OutputState }

func (VerifyJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerifyJobResponse)(nil)).Elem()
}

func (o VerifyJobResponseOutput) ToVerifyJobResponseOutput() VerifyJobResponseOutput {
	return o
}

func (o VerifyJobResponseOutput) ToVerifyJobResponseOutputWithContext(ctx context.Context) VerifyJobResponseOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnthosClusterInput)(nil)).Elem(), AnthosClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnthosClusterPtrInput)(nil)).Elem(), AnthosClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildArtifactInput)(nil)).Elem(), BuildArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildArtifactArrayInput)(nil)).Elem(), BuildArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunLocationInput)(nil)).Elem(), CloudRunLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunLocationPtrInput)(nil)).Elem(), CloudRunLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultPoolInput)(nil)).Elem(), DefaultPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultPoolPtrInput)(nil)).Elem(), DefaultPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionConfigInput)(nil)).Elem(), ExecutionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionConfigArrayInput)(nil)).Elem(), ExecutionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterInput)(nil)).Elem(), GkeClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterPtrInput)(nil)).Elem(), GkeClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivatePoolInput)(nil)).Elem(), PrivatePoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivatePoolPtrInput)(nil)).Elem(), PrivatePoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SerialPipelineInput)(nil)).Elem(), SerialPipelineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SerialPipelinePtrInput)(nil)).Elem(), SerialPipelineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageInput)(nil)).Elem(), StageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageArrayInput)(nil)).Elem(), StageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardInput)(nil)).Elem(), StandardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardPtrInput)(nil)).Elem(), StandardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StrategyInput)(nil)).Elem(), StrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StrategyPtrInput)(nil)).Elem(), StrategyArgs{})
	pulumi.RegisterOutputType(AnthosClusterOutput{})
	pulumi.RegisterOutputType(AnthosClusterPtrOutput{})
	pulumi.RegisterOutputType(AnthosClusterResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(BuildArtifactOutput{})
	pulumi.RegisterOutputType(BuildArtifactArrayOutput{})
	pulumi.RegisterOutputType(BuildArtifactResponseOutput{})
	pulumi.RegisterOutputType(BuildArtifactResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudRunLocationOutput{})
	pulumi.RegisterOutputType(CloudRunLocationPtrOutput{})
	pulumi.RegisterOutputType(CloudRunLocationResponseOutput{})
	pulumi.RegisterOutputType(CloudRunMetadataResponseOutput{})
	pulumi.RegisterOutputType(DefaultPoolOutput{})
	pulumi.RegisterOutputType(DefaultPoolPtrOutput{})
	pulumi.RegisterOutputType(DefaultPoolResponseOutput{})
	pulumi.RegisterOutputType(DeliveryPipelineResponseOutput{})
	pulumi.RegisterOutputType(DeployJobResponseOutput{})
	pulumi.RegisterOutputType(DeploymentJobsResponseOutput{})
	pulumi.RegisterOutputType(ExecutionConfigOutput{})
	pulumi.RegisterOutputType(ExecutionConfigArrayOutput{})
	pulumi.RegisterOutputType(ExecutionConfigResponseOutput{})
	pulumi.RegisterOutputType(ExecutionConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GkeClusterOutput{})
	pulumi.RegisterOutputType(GkeClusterPtrOutput{})
	pulumi.RegisterOutputType(GkeClusterResponseOutput{})
	pulumi.RegisterOutputType(JobResponseOutput{})
	pulumi.RegisterOutputType(MetadataResponseOutput{})
	pulumi.RegisterOutputType(PhaseResponseOutput{})
	pulumi.RegisterOutputType(PhaseResponseArrayOutput{})
	pulumi.RegisterOutputType(PipelineConditionResponseOutput{})
	pulumi.RegisterOutputType(PipelineReadyConditionResponseOutput{})
	pulumi.RegisterOutputType(PrivatePoolOutput{})
	pulumi.RegisterOutputType(PrivatePoolPtrOutput{})
	pulumi.RegisterOutputType(PrivatePoolResponseOutput{})
	pulumi.RegisterOutputType(SerialPipelineOutput{})
	pulumi.RegisterOutputType(SerialPipelinePtrOutput{})
	pulumi.RegisterOutputType(SerialPipelineResponseOutput{})
	pulumi.RegisterOutputType(StageOutput{})
	pulumi.RegisterOutputType(StageArrayOutput{})
	pulumi.RegisterOutputType(StageResponseOutput{})
	pulumi.RegisterOutputType(StageResponseArrayOutput{})
	pulumi.RegisterOutputType(StandardOutput{})
	pulumi.RegisterOutputType(StandardPtrOutput{})
	pulumi.RegisterOutputType(StandardResponseOutput{})
	pulumi.RegisterOutputType(StrategyOutput{})
	pulumi.RegisterOutputType(StrategyPtrOutput{})
	pulumi.RegisterOutputType(StrategyResponseOutput{})
	pulumi.RegisterOutputType(TargetResponseOutput{})
	pulumi.RegisterOutputType(TargetResponseArrayOutput{})
	pulumi.RegisterOutputType(TargetsPresentConditionResponseOutput{})
	pulumi.RegisterOutputType(VerifyJobResponseOutput{})
}
