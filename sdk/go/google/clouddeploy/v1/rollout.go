// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Rollout in a given project and location.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type Rollout struct {
	pulumi.CustomResourceState

	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Approval state of the `Rollout`.
	ApprovalState pulumi.StringOutput `pulumi:"approvalState"`
	// Time at which the `Rollout` was approved.
	ApproveTime pulumi.StringOutput `pulumi:"approveTime"`
	// Name of the `ControllerRollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
	ControllerRollout pulumi.StringOutput `pulumi:"controllerRollout"`
	// Time at which the `Rollout` was created.
	CreateTime         pulumi.StringOutput `pulumi:"createTime"`
	DeliveryPipelineId pulumi.StringOutput `pulumi:"deliveryPipelineId"`
	// Time at which the `Rollout` finished deploying.
	DeployEndTime pulumi.StringOutput `pulumi:"deployEndTime"`
	// The reason this rollout failed. This will always be unspecified while the rollout is in progress.
	DeployFailureCause pulumi.StringOutput `pulumi:"deployFailureCause"`
	// Time at which the `Rollout` started deploying.
	DeployStartTime pulumi.StringOutput `pulumi:"deployStartTime"`
	// The resource name of the Cloud Build `Build` object that is used to deploy the Rollout. Format is `projects/{project}/locations/{location}/builds/{build}`.
	DeployingBuild pulumi.StringOutput `pulumi:"deployingBuild"`
	// Description of the `Rollout` for user purposes. Max length is 255 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Time at which the `Rollout` was enqueued.
	EnqueueTime pulumi.StringOutput `pulumi:"enqueueTime"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Additional information about the rollout failure, if available.
	FailureReason pulumi.StringOutput `pulumi:"failureReason"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Metadata contains information about the rollout.
	Metadata MetadataResponseOutput `pulumi:"metadata"`
	// Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The phases that represent the workflows of this `Rollout`.
	Phases    PhaseResponseArrayOutput `pulumi:"phases"`
	Project   pulumi.StringOutput      `pulumi:"project"`
	ReleaseId pulumi.StringOutput      `pulumi:"releaseId"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Name of the `Rollout` that is rolled back by this `Rollout`. Empty if this `Rollout` wasn't created as a rollback.
	RollbackOfRollout pulumi.StringOutput `pulumi:"rollbackOfRollout"`
	// Names of `Rollouts` that rolled back this `Rollout`.
	RolledBackByRollouts pulumi.StringArrayOutput `pulumi:"rolledBackByRollouts"`
	// Required. ID of the `Rollout`.
	RolloutId pulumi.StringOutput `pulumi:"rolloutId"`
	// Optional. The starting phase ID for the `Rollout`. If empty the `Rollout` will start at the first phase.
	StartingPhaseId pulumi.StringPtrOutput `pulumi:"startingPhaseId"`
	// Current state of the `Rollout`.
	State pulumi.StringOutput `pulumi:"state"`
	// The ID of Target to which this `Rollout` is deploying.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
	// Unique identifier of the `Rollout`.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewRollout registers a new resource with the given unique name, arguments, and options.
func NewRollout(ctx *pulumi.Context,
	name string, args *RolloutArgs, opts ...pulumi.ResourceOption) (*Rollout, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeliveryPipelineId == nil {
		return nil, errors.New("invalid value for required argument 'DeliveryPipelineId'")
	}
	if args.ReleaseId == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseId'")
	}
	if args.RolloutId == nil {
		return nil, errors.New("invalid value for required argument 'RolloutId'")
	}
	if args.TargetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"deliveryPipelineId",
		"location",
		"project",
		"releaseId",
		"rolloutId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rollout
	err := ctx.RegisterResource("google-native:clouddeploy/v1:Rollout", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRollout gets an existing Rollout resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRollout(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolloutState, opts ...pulumi.ResourceOption) (*Rollout, error) {
	var resource Rollout
	err := ctx.ReadResource("google-native:clouddeploy/v1:Rollout", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rollout resources.
type rolloutState struct {
}

type RolloutState struct {
}

func (RolloutState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutState)(nil)).Elem()
}

type rolloutArgs struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	Annotations        map[string]string `pulumi:"annotations"`
	DeliveryPipelineId string            `pulumi:"deliveryPipelineId"`
	// Description of the `Rollout` for user purposes. Max length is 255 characters.
	Description *string `pulumi:"description"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
	Name      *string `pulumi:"name"`
	Project   *string `pulumi:"project"`
	ReleaseId string  `pulumi:"releaseId"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Required. ID of the `Rollout`.
	RolloutId string `pulumi:"rolloutId"`
	// Optional. The starting phase ID for the `Rollout`. If empty the `Rollout` will start at the first phase.
	StartingPhaseId *string `pulumi:"startingPhaseId"`
	// The ID of Target to which this `Rollout` is deploying.
	TargetId string `pulumi:"targetId"`
}

// The set of arguments for constructing a Rollout resource.
type RolloutArgs struct {
	// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	Annotations        pulumi.StringMapInput
	DeliveryPipelineId pulumi.StringInput
	// Description of the `Rollout` for user purposes. Max length is 255 characters.
	Description pulumi.StringPtrInput
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	ReleaseId pulumi.StringInput
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Required. ID of the `Rollout`.
	RolloutId pulumi.StringInput
	// Optional. The starting phase ID for the `Rollout`. If empty the `Rollout` will start at the first phase.
	StartingPhaseId pulumi.StringPtrInput
	// The ID of Target to which this `Rollout` is deploying.
	TargetId pulumi.StringInput
}

func (RolloutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutArgs)(nil)).Elem()
}

type RolloutInput interface {
	pulumi.Input

	ToRolloutOutput() RolloutOutput
	ToRolloutOutputWithContext(ctx context.Context) RolloutOutput
}

func (*Rollout) ElementType() reflect.Type {
	return reflect.TypeOf((**Rollout)(nil)).Elem()
}

func (i *Rollout) ToRolloutOutput() RolloutOutput {
	return i.ToRolloutOutputWithContext(context.Background())
}

func (i *Rollout) ToRolloutOutputWithContext(ctx context.Context) RolloutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutOutput)
}

func (i *Rollout) ToOutput(ctx context.Context) pulumix.Output[*Rollout] {
	return pulumix.Output[*Rollout]{
		OutputState: i.ToRolloutOutputWithContext(ctx).OutputState,
	}
}

type RolloutOutput struct{ *pulumi.OutputState }

func (RolloutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rollout)(nil)).Elem()
}

func (o RolloutOutput) ToRolloutOutput() RolloutOutput {
	return o
}

func (o RolloutOutput) ToRolloutOutputWithContext(ctx context.Context) RolloutOutput {
	return o
}

func (o RolloutOutput) ToOutput(ctx context.Context) pulumix.Output[*Rollout] {
	return pulumix.Output[*Rollout]{
		OutputState: o.OutputState,
	}
}

// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
func (o RolloutOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Approval state of the `Rollout`.
func (o RolloutOutput) ApprovalState() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.ApprovalState }).(pulumi.StringOutput)
}

// Time at which the `Rollout` was approved.
func (o RolloutOutput) ApproveTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.ApproveTime }).(pulumi.StringOutput)
}

// Name of the `ControllerRollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
func (o RolloutOutput) ControllerRollout() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.ControllerRollout }).(pulumi.StringOutput)
}

// Time at which the `Rollout` was created.
func (o RolloutOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o RolloutOutput) DeliveryPipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.DeliveryPipelineId }).(pulumi.StringOutput)
}

// Time at which the `Rollout` finished deploying.
func (o RolloutOutput) DeployEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.DeployEndTime }).(pulumi.StringOutput)
}

// The reason this rollout failed. This will always be unspecified while the rollout is in progress.
func (o RolloutOutput) DeployFailureCause() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.DeployFailureCause }).(pulumi.StringOutput)
}

// Time at which the `Rollout` started deploying.
func (o RolloutOutput) DeployStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.DeployStartTime }).(pulumi.StringOutput)
}

// The resource name of the Cloud Build `Build` object that is used to deploy the Rollout. Format is `projects/{project}/locations/{location}/builds/{build}`.
func (o RolloutOutput) DeployingBuild() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.DeployingBuild }).(pulumi.StringOutput)
}

// Description of the `Rollout` for user purposes. Max length is 255 characters.
func (o RolloutOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Time at which the `Rollout` was enqueued.
func (o RolloutOutput) EnqueueTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.EnqueueTime }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o RolloutOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Additional information about the rollout failure, if available.
func (o RolloutOutput) FailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.FailureReason }).(pulumi.StringOutput)
}

// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
func (o RolloutOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o RolloutOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Metadata contains information about the rollout.
func (o RolloutOutput) Metadata() MetadataResponseOutput {
	return o.ApplyT(func(v *Rollout) MetadataResponseOutput { return v.Metadata }).(MetadataResponseOutput)
}

// Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
func (o RolloutOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The phases that represent the workflows of this `Rollout`.
func (o RolloutOutput) Phases() PhaseResponseArrayOutput {
	return o.ApplyT(func(v *Rollout) PhaseResponseArrayOutput { return v.Phases }).(PhaseResponseArrayOutput)
}

func (o RolloutOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o RolloutOutput) ReleaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.ReleaseId }).(pulumi.StringOutput)
}

// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o RolloutOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Name of the `Rollout` that is rolled back by this `Rollout`. Empty if this `Rollout` wasn't created as a rollback.
func (o RolloutOutput) RollbackOfRollout() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.RollbackOfRollout }).(pulumi.StringOutput)
}

// Names of `Rollouts` that rolled back this `Rollout`.
func (o RolloutOutput) RolledBackByRollouts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringArrayOutput { return v.RolledBackByRollouts }).(pulumi.StringArrayOutput)
}

// Required. ID of the `Rollout`.
func (o RolloutOutput) RolloutId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.RolloutId }).(pulumi.StringOutput)
}

// Optional. The starting phase ID for the `Rollout`. If empty the `Rollout` will start at the first phase.
func (o RolloutOutput) StartingPhaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringPtrOutput { return v.StartingPhaseId }).(pulumi.StringPtrOutput)
}

// Current state of the `Rollout`.
func (o RolloutOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The ID of Target to which this `Rollout` is deploying.
func (o RolloutOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.TargetId }).(pulumi.StringOutput)
}

// Unique identifier of the `Rollout`.
func (o RolloutOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutInput)(nil)).Elem(), &Rollout{})
	pulumi.RegisterOutputType(RolloutOutput{})
}
