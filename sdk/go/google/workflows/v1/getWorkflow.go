// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single workflow.
func LookupWorkflow(ctx *pulumi.Context, args *LookupWorkflowArgs, opts ...pulumi.InvokeOption) (*LookupWorkflowResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkflowResult
	err := ctx.Invoke("google-native:workflows/v1:getWorkflow", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWorkflowArgs struct {
	Location   string  `pulumi:"location"`
	Project    *string `pulumi:"project"`
	RevisionId *string `pulumi:"revisionId"`
	WorkflowId string  `pulumi:"workflowId"`
}

type LookupWorkflowResult struct {
	// Optional. Describes the level of platform logging to apply to calls and call responses during executions of this workflow. If both the workflow and the execution specify a logging level, the execution level takes precedence.
	CallLogLevel string `pulumi:"callLogLevel"`
	// The timestamp for when the workflow was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. The resource name of a KMS crypto key used to encrypt or decrypt the data associated with the workflow. Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. If not provided, data associated with the workflow will not be CMEK-encrypted.
	CryptoKeyName string `pulumi:"cryptoKeyName"`
	// Description of the workflow provided by the user. Must be at most 1000 unicode characters long.
	Description string `pulumi:"description"`
	// Labels associated with this workflow. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the workflow. Format: projects/{project}/locations/{location}/workflows/{workflow}
	Name string `pulumi:"name"`
	// The timestamp for the latest revision of the workflow's creation.
	RevisionCreateTime string `pulumi:"revisionCreateTime"`
	// The revision of the workflow. A new revision of a workflow is created as a result of updating the following properties of a workflow: - Service account - Workflow code to be executed The format is "000001-a4d", where the first 6 characters define the zero-padded revision ordinal number. They are followed by a hyphen and 3 hexadecimal random characters.
	RevisionId string `pulumi:"revisionId"`
	// The service account associated with the latest workflow version. This service account represents the identity of the workflow and determines what permissions the workflow has. Format: projects/{project}/serviceAccounts/{account} or {account} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. The `{account}` value can be the `email` address or the `unique_id` of the service account. If not provided, workflow will use the project's default service account. Modifying this field for an existing workflow results in a new workflow revision.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Workflow code to be executed. The size limit is 128KB.
	SourceContents string `pulumi:"sourceContents"`
	// State of the workflow deployment.
	State string `pulumi:"state"`
	// Error regarding the state of the workflow. For example, this field will have error details if the execution data is unavailable due to revoked KMS key permissions.
	StateError StateErrorResponse `pulumi:"stateError"`
	// The timestamp for when the workflow was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupWorkflowOutput(ctx *pulumi.Context, args LookupWorkflowOutputArgs, opts ...pulumi.InvokeOption) LookupWorkflowResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkflowResult, error) {
			args := v.(LookupWorkflowArgs)
			r, err := LookupWorkflow(ctx, &args, opts...)
			var s LookupWorkflowResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkflowResultOutput)
}

type LookupWorkflowOutputArgs struct {
	Location   pulumi.StringInput    `pulumi:"location"`
	Project    pulumi.StringPtrInput `pulumi:"project"`
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
	WorkflowId pulumi.StringInput    `pulumi:"workflowId"`
}

func (LookupWorkflowOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkflowArgs)(nil)).Elem()
}

type LookupWorkflowResultOutput struct{ *pulumi.OutputState }

func (LookupWorkflowResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkflowResult)(nil)).Elem()
}

func (o LookupWorkflowResultOutput) ToLookupWorkflowResultOutput() LookupWorkflowResultOutput {
	return o
}

func (o LookupWorkflowResultOutput) ToLookupWorkflowResultOutputWithContext(ctx context.Context) LookupWorkflowResultOutput {
	return o
}

// Optional. Describes the level of platform logging to apply to calls and call responses during executions of this workflow. If both the workflow and the execution specify a logging level, the execution level takes precedence.
func (o LookupWorkflowResultOutput) CallLogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.CallLogLevel }).(pulumi.StringOutput)
}

// The timestamp for when the workflow was created.
func (o LookupWorkflowResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. The resource name of a KMS crypto key used to encrypt or decrypt the data associated with the workflow. Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. If not provided, data associated with the workflow will not be CMEK-encrypted.
func (o LookupWorkflowResultOutput) CryptoKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.CryptoKeyName }).(pulumi.StringOutput)
}

// Description of the workflow provided by the user. Must be at most 1000 unicode characters long.
func (o LookupWorkflowResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.Description }).(pulumi.StringOutput)
}

// Labels associated with this workflow. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed.
func (o LookupWorkflowResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupWorkflowResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name of the workflow. Format: projects/{project}/locations/{location}/workflows/{workflow}
func (o LookupWorkflowResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.Name }).(pulumi.StringOutput)
}

// The timestamp for the latest revision of the workflow's creation.
func (o LookupWorkflowResultOutput) RevisionCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.RevisionCreateTime }).(pulumi.StringOutput)
}

// The revision of the workflow. A new revision of a workflow is created as a result of updating the following properties of a workflow: - Service account - Workflow code to be executed The format is "000001-a4d", where the first 6 characters define the zero-padded revision ordinal number. They are followed by a hyphen and 3 hexadecimal random characters.
func (o LookupWorkflowResultOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.RevisionId }).(pulumi.StringOutput)
}

// The service account associated with the latest workflow version. This service account represents the identity of the workflow and determines what permissions the workflow has. Format: projects/{project}/serviceAccounts/{account} or {account} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. The `{account}` value can be the `email` address or the `unique_id` of the service account. If not provided, workflow will use the project's default service account. Modifying this field for an existing workflow results in a new workflow revision.
func (o LookupWorkflowResultOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Workflow code to be executed. The size limit is 128KB.
func (o LookupWorkflowResultOutput) SourceContents() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.SourceContents }).(pulumi.StringOutput)
}

// State of the workflow deployment.
func (o LookupWorkflowResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.State }).(pulumi.StringOutput)
}

// Error regarding the state of the workflow. For example, this field will have error details if the execution data is unavailable due to revoked KMS key permissions.
func (o LookupWorkflowResultOutput) StateError() StateErrorResponseOutput {
	return o.ApplyT(func(v LookupWorkflowResult) StateErrorResponse { return v.StateError }).(StateErrorResponseOutput)
}

// The timestamp for when the workflow was last updated.
func (o LookupWorkflowResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkflowResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkflowResultOutput{})
}
