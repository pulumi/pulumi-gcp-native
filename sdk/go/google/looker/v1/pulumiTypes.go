// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Looker instance Admin settings fields.
type AdminSettings struct {
	// Email domain allowlist for the instance.
	AllowedEmailDomains []string `pulumi:"allowedEmailDomains"`
}

// AdminSettingsInput is an input type that accepts AdminSettingsArgs and AdminSettingsOutput values.
// You can construct a concrete instance of `AdminSettingsInput` via:
//
//	AdminSettingsArgs{...}
type AdminSettingsInput interface {
	pulumi.Input

	ToAdminSettingsOutput() AdminSettingsOutput
	ToAdminSettingsOutputWithContext(context.Context) AdminSettingsOutput
}

// Looker instance Admin settings fields.
type AdminSettingsArgs struct {
	// Email domain allowlist for the instance.
	AllowedEmailDomains pulumi.StringArrayInput `pulumi:"allowedEmailDomains"`
}

func (AdminSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminSettings)(nil)).Elem()
}

func (i AdminSettingsArgs) ToAdminSettingsOutput() AdminSettingsOutput {
	return i.ToAdminSettingsOutputWithContext(context.Background())
}

func (i AdminSettingsArgs) ToAdminSettingsOutputWithContext(ctx context.Context) AdminSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminSettingsOutput)
}

func (i AdminSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[AdminSettings] {
	return pulumix.Output[AdminSettings]{
		OutputState: i.ToAdminSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i AdminSettingsArgs) ToAdminSettingsPtrOutput() AdminSettingsPtrOutput {
	return i.ToAdminSettingsPtrOutputWithContext(context.Background())
}

func (i AdminSettingsArgs) ToAdminSettingsPtrOutputWithContext(ctx context.Context) AdminSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminSettingsOutput).ToAdminSettingsPtrOutputWithContext(ctx)
}

// AdminSettingsPtrInput is an input type that accepts AdminSettingsArgs, AdminSettingsPtr and AdminSettingsPtrOutput values.
// You can construct a concrete instance of `AdminSettingsPtrInput` via:
//
//	        AdminSettingsArgs{...}
//
//	or:
//
//	        nil
type AdminSettingsPtrInput interface {
	pulumi.Input

	ToAdminSettingsPtrOutput() AdminSettingsPtrOutput
	ToAdminSettingsPtrOutputWithContext(context.Context) AdminSettingsPtrOutput
}

type adminSettingsPtrType AdminSettingsArgs

func AdminSettingsPtr(v *AdminSettingsArgs) AdminSettingsPtrInput {
	return (*adminSettingsPtrType)(v)
}

func (*adminSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminSettings)(nil)).Elem()
}

func (i *adminSettingsPtrType) ToAdminSettingsPtrOutput() AdminSettingsPtrOutput {
	return i.ToAdminSettingsPtrOutputWithContext(context.Background())
}

func (i *adminSettingsPtrType) ToAdminSettingsPtrOutputWithContext(ctx context.Context) AdminSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminSettingsPtrOutput)
}

func (i *adminSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AdminSettings] {
	return pulumix.Output[*AdminSettings]{
		OutputState: i.ToAdminSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// Looker instance Admin settings fields.
type AdminSettingsOutput struct{ *pulumi.OutputState }

func (AdminSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminSettings)(nil)).Elem()
}

func (o AdminSettingsOutput) ToAdminSettingsOutput() AdminSettingsOutput {
	return o
}

func (o AdminSettingsOutput) ToAdminSettingsOutputWithContext(ctx context.Context) AdminSettingsOutput {
	return o
}

func (o AdminSettingsOutput) ToAdminSettingsPtrOutput() AdminSettingsPtrOutput {
	return o.ToAdminSettingsPtrOutputWithContext(context.Background())
}

func (o AdminSettingsOutput) ToAdminSettingsPtrOutputWithContext(ctx context.Context) AdminSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdminSettings) *AdminSettings {
		return &v
	}).(AdminSettingsPtrOutput)
}

func (o AdminSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[AdminSettings] {
	return pulumix.Output[AdminSettings]{
		OutputState: o.OutputState,
	}
}

// Email domain allowlist for the instance.
func (o AdminSettingsOutput) AllowedEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AdminSettings) []string { return v.AllowedEmailDomains }).(pulumi.StringArrayOutput)
}

type AdminSettingsPtrOutput struct{ *pulumi.OutputState }

func (AdminSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminSettings)(nil)).Elem()
}

func (o AdminSettingsPtrOutput) ToAdminSettingsPtrOutput() AdminSettingsPtrOutput {
	return o
}

func (o AdminSettingsPtrOutput) ToAdminSettingsPtrOutputWithContext(ctx context.Context) AdminSettingsPtrOutput {
	return o
}

func (o AdminSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AdminSettings] {
	return pulumix.Output[*AdminSettings]{
		OutputState: o.OutputState,
	}
}

func (o AdminSettingsPtrOutput) Elem() AdminSettingsOutput {
	return o.ApplyT(func(v *AdminSettings) AdminSettings {
		if v != nil {
			return *v
		}
		var ret AdminSettings
		return ret
	}).(AdminSettingsOutput)
}

// Email domain allowlist for the instance.
func (o AdminSettingsPtrOutput) AllowedEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdminSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedEmailDomains
	}).(pulumi.StringArrayOutput)
}

// Looker instance Admin settings fields.
type AdminSettingsResponse struct {
	// Email domain allowlist for the instance.
	AllowedEmailDomains []string `pulumi:"allowedEmailDomains"`
}

// Looker instance Admin settings fields.
type AdminSettingsResponseOutput struct{ *pulumi.OutputState }

func (AdminSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminSettingsResponse)(nil)).Elem()
}

func (o AdminSettingsResponseOutput) ToAdminSettingsResponseOutput() AdminSettingsResponseOutput {
	return o
}

func (o AdminSettingsResponseOutput) ToAdminSettingsResponseOutputWithContext(ctx context.Context) AdminSettingsResponseOutput {
	return o
}

func (o AdminSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AdminSettingsResponse] {
	return pulumix.Output[AdminSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Email domain allowlist for the instance.
func (o AdminSettingsResponseOutput) AllowedEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AdminSettingsResponse) []string { return v.AllowedEmailDomains }).(pulumi.StringArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

func (i AuditConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuditConfig] {
	return pulumix.Output[AuditConfig]{
		OutputState: i.ToAuditConfigOutputWithContext(ctx).OutputState,
	}
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

func (i AuditConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfig] {
	return pulumix.Output[[]AuditConfig]{
		OutputState: i.ToAuditConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuditConfig] {
	return pulumix.Output[AuditConfig]{
		OutputState: o.OutputState,
	}
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfig] {
	return pulumix.Output[[]AuditConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuditConfigResponse] {
	return pulumix.Output[AuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfigResponse] {
	return pulumix.Output[[]AuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

func (i AuditLogConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfig] {
	return pulumix.Output[AuditLogConfig]{
		OutputState: i.ToAuditLogConfigOutputWithContext(ctx).OutputState,
	}
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

func (i AuditLogConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfig] {
	return pulumix.Output[[]AuditLogConfig]{
		OutputState: i.ToAuditLogConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfig] {
	return pulumix.Output[AuditLogConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfig] {
	return pulumix.Output[[]AuditLogConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfigResponse] {
	return pulumix.Output[AuditLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfigResponse] {
	return pulumix.Output[[]AuditLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

func (i BindingArgs) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: i.ToBindingOutputWithContext(ctx).OutputState,
	}
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

func (i BindingArray) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: i.ToBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

func (o BindingOutput) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: o.OutputState,
	}
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BindingResponse] {
	return pulumix.Output[BindingResponse]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BindingResponse] {
	return pulumix.Output[[]BindingResponse]{
		OutputState: o.OutputState,
	}
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Custom domain information.
type CustomDomain struct {
	// Domain name.
	Domain *string `pulumi:"domain"`
	// Domain state.
	State *CustomDomainState `pulumi:"state"`
}

// CustomDomainInput is an input type that accepts CustomDomainArgs and CustomDomainOutput values.
// You can construct a concrete instance of `CustomDomainInput` via:
//
//	CustomDomainArgs{...}
type CustomDomainInput interface {
	pulumi.Input

	ToCustomDomainOutput() CustomDomainOutput
	ToCustomDomainOutputWithContext(context.Context) CustomDomainOutput
}

// Custom domain information.
type CustomDomainArgs struct {
	// Domain name.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Domain state.
	State CustomDomainStatePtrInput `pulumi:"state"`
}

func (CustomDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomain)(nil)).Elem()
}

func (i CustomDomainArgs) ToCustomDomainOutput() CustomDomainOutput {
	return i.ToCustomDomainOutputWithContext(context.Background())
}

func (i CustomDomainArgs) ToCustomDomainOutputWithContext(ctx context.Context) CustomDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainOutput)
}

func (i CustomDomainArgs) ToOutput(ctx context.Context) pulumix.Output[CustomDomain] {
	return pulumix.Output[CustomDomain]{
		OutputState: i.ToCustomDomainOutputWithContext(ctx).OutputState,
	}
}

func (i CustomDomainArgs) ToCustomDomainPtrOutput() CustomDomainPtrOutput {
	return i.ToCustomDomainPtrOutputWithContext(context.Background())
}

func (i CustomDomainArgs) ToCustomDomainPtrOutputWithContext(ctx context.Context) CustomDomainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainOutput).ToCustomDomainPtrOutputWithContext(ctx)
}

// CustomDomainPtrInput is an input type that accepts CustomDomainArgs, CustomDomainPtr and CustomDomainPtrOutput values.
// You can construct a concrete instance of `CustomDomainPtrInput` via:
//
//	        CustomDomainArgs{...}
//
//	or:
//
//	        nil
type CustomDomainPtrInput interface {
	pulumi.Input

	ToCustomDomainPtrOutput() CustomDomainPtrOutput
	ToCustomDomainPtrOutputWithContext(context.Context) CustomDomainPtrOutput
}

type customDomainPtrType CustomDomainArgs

func CustomDomainPtr(v *CustomDomainArgs) CustomDomainPtrInput {
	return (*customDomainPtrType)(v)
}

func (*customDomainPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomain)(nil)).Elem()
}

func (i *customDomainPtrType) ToCustomDomainPtrOutput() CustomDomainPtrOutput {
	return i.ToCustomDomainPtrOutputWithContext(context.Background())
}

func (i *customDomainPtrType) ToCustomDomainPtrOutputWithContext(ctx context.Context) CustomDomainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainPtrOutput)
}

func (i *customDomainPtrType) ToOutput(ctx context.Context) pulumix.Output[*CustomDomain] {
	return pulumix.Output[*CustomDomain]{
		OutputState: i.ToCustomDomainPtrOutputWithContext(ctx).OutputState,
	}
}

// Custom domain information.
type CustomDomainOutput struct{ *pulumi.OutputState }

func (CustomDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomain)(nil)).Elem()
}

func (o CustomDomainOutput) ToCustomDomainOutput() CustomDomainOutput {
	return o
}

func (o CustomDomainOutput) ToCustomDomainOutputWithContext(ctx context.Context) CustomDomainOutput {
	return o
}

func (o CustomDomainOutput) ToCustomDomainPtrOutput() CustomDomainPtrOutput {
	return o.ToCustomDomainPtrOutputWithContext(context.Background())
}

func (o CustomDomainOutput) ToCustomDomainPtrOutputWithContext(ctx context.Context) CustomDomainPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomDomain) *CustomDomain {
		return &v
	}).(CustomDomainPtrOutput)
}

func (o CustomDomainOutput) ToOutput(ctx context.Context) pulumix.Output[CustomDomain] {
	return pulumix.Output[CustomDomain]{
		OutputState: o.OutputState,
	}
}

// Domain name.
func (o CustomDomainOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomain) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Domain state.
func (o CustomDomainOutput) State() CustomDomainStatePtrOutput {
	return o.ApplyT(func(v CustomDomain) *CustomDomainState { return v.State }).(CustomDomainStatePtrOutput)
}

type CustomDomainPtrOutput struct{ *pulumi.OutputState }

func (CustomDomainPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomain)(nil)).Elem()
}

func (o CustomDomainPtrOutput) ToCustomDomainPtrOutput() CustomDomainPtrOutput {
	return o
}

func (o CustomDomainPtrOutput) ToCustomDomainPtrOutputWithContext(ctx context.Context) CustomDomainPtrOutput {
	return o
}

func (o CustomDomainPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomDomain] {
	return pulumix.Output[*CustomDomain]{
		OutputState: o.OutputState,
	}
}

func (o CustomDomainPtrOutput) Elem() CustomDomainOutput {
	return o.ApplyT(func(v *CustomDomain) CustomDomain {
		if v != nil {
			return *v
		}
		var ret CustomDomain
		return ret
	}).(CustomDomainOutput)
}

// Domain name.
func (o CustomDomainPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomain) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// Domain state.
func (o CustomDomainPtrOutput) State() CustomDomainStatePtrOutput {
	return o.ApplyT(func(v *CustomDomain) *CustomDomainState {
		if v == nil {
			return nil
		}
		return v.State
	}).(CustomDomainStatePtrOutput)
}

// Custom domain information.
type CustomDomainResponse struct {
	// Domain name.
	Domain string `pulumi:"domain"`
	// Domain state.
	State string `pulumi:"state"`
}

// Custom domain information.
type CustomDomainResponseOutput struct{ *pulumi.OutputState }

func (CustomDomainResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomainResponse)(nil)).Elem()
}

func (o CustomDomainResponseOutput) ToCustomDomainResponseOutput() CustomDomainResponseOutput {
	return o
}

func (o CustomDomainResponseOutput) ToCustomDomainResponseOutputWithContext(ctx context.Context) CustomDomainResponseOutput {
	return o
}

func (o CustomDomainResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CustomDomainResponse] {
	return pulumix.Output[CustomDomainResponse]{
		OutputState: o.OutputState,
	}
}

// Domain name.
func (o CustomDomainResponseOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDomainResponse) string { return v.Domain }).(pulumi.StringOutput)
}

// Domain state.
func (o CustomDomainResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDomainResponse) string { return v.State }).(pulumi.StringOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type Date struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `pulumi:"year"`
}

// DateInput is an input type that accepts DateArgs and DateOutput values.
// You can construct a concrete instance of `DateInput` via:
//
//	DateArgs{...}
type DateInput interface {
	pulumi.Input

	ToDateOutput() DateOutput
	ToDateOutputWithContext(context.Context) DateOutput
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type DateArgs struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day pulumi.IntPtrInput `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month pulumi.IntPtrInput `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year pulumi.IntPtrInput `pulumi:"year"`
}

func (DateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Date)(nil)).Elem()
}

func (i DateArgs) ToDateOutput() DateOutput {
	return i.ToDateOutputWithContext(context.Background())
}

func (i DateArgs) ToDateOutputWithContext(ctx context.Context) DateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DateOutput)
}

func (i DateArgs) ToOutput(ctx context.Context) pulumix.Output[Date] {
	return pulumix.Output[Date]{
		OutputState: i.ToDateOutputWithContext(ctx).OutputState,
	}
}

func (i DateArgs) ToDatePtrOutput() DatePtrOutput {
	return i.ToDatePtrOutputWithContext(context.Background())
}

func (i DateArgs) ToDatePtrOutputWithContext(ctx context.Context) DatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DateOutput).ToDatePtrOutputWithContext(ctx)
}

// DatePtrInput is an input type that accepts DateArgs, DatePtr and DatePtrOutput values.
// You can construct a concrete instance of `DatePtrInput` via:
//
//	        DateArgs{...}
//
//	or:
//
//	        nil
type DatePtrInput interface {
	pulumi.Input

	ToDatePtrOutput() DatePtrOutput
	ToDatePtrOutputWithContext(context.Context) DatePtrOutput
}

type datePtrType DateArgs

func DatePtr(v *DateArgs) DatePtrInput {
	return (*datePtrType)(v)
}

func (*datePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Date)(nil)).Elem()
}

func (i *datePtrType) ToDatePtrOutput() DatePtrOutput {
	return i.ToDatePtrOutputWithContext(context.Background())
}

func (i *datePtrType) ToDatePtrOutputWithContext(ctx context.Context) DatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatePtrOutput)
}

func (i *datePtrType) ToOutput(ctx context.Context) pulumix.Output[*Date] {
	return pulumix.Output[*Date]{
		OutputState: i.ToDatePtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type DateOutput struct{ *pulumi.OutputState }

func (DateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Date)(nil)).Elem()
}

func (o DateOutput) ToDateOutput() DateOutput {
	return o
}

func (o DateOutput) ToDateOutputWithContext(ctx context.Context) DateOutput {
	return o
}

func (o DateOutput) ToDatePtrOutput() DatePtrOutput {
	return o.ToDatePtrOutputWithContext(context.Background())
}

func (o DateOutput) ToDatePtrOutputWithContext(ctx context.Context) DatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Date) *Date {
		return &v
	}).(DatePtrOutput)
}

func (o DateOutput) ToOutput(ctx context.Context) pulumix.Output[Date] {
	return pulumix.Output[Date]{
		OutputState: o.OutputState,
	}
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o DateOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Date) *int { return v.Day }).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o DateOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Date) *int { return v.Month }).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o DateOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Date) *int { return v.Year }).(pulumi.IntPtrOutput)
}

type DatePtrOutput struct{ *pulumi.OutputState }

func (DatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Date)(nil)).Elem()
}

func (o DatePtrOutput) ToDatePtrOutput() DatePtrOutput {
	return o
}

func (o DatePtrOutput) ToDatePtrOutputWithContext(ctx context.Context) DatePtrOutput {
	return o
}

func (o DatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Date] {
	return pulumix.Output[*Date]{
		OutputState: o.OutputState,
	}
}

func (o DatePtrOutput) Elem() DateOutput {
	return o.ApplyT(func(v *Date) Date {
		if v != nil {
			return *v
		}
		var ret Date
		return ret
	}).(DateOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o DatePtrOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Date) *int {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o DatePtrOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Date) *int {
		if v == nil {
			return nil
		}
		return v.Month
	}).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o DatePtrOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Date) *int {
		if v == nil {
			return nil
		}
		return v.Year
	}).(pulumi.IntPtrOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type DateResponse struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day int `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month int `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year int `pulumi:"year"`
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type DateResponseOutput struct{ *pulumi.OutputState }

func (DateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DateResponse)(nil)).Elem()
}

func (o DateResponseOutput) ToDateResponseOutput() DateResponseOutput {
	return o
}

func (o DateResponseOutput) ToDateResponseOutputWithContext(ctx context.Context) DateResponseOutput {
	return o
}

func (o DateResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DateResponse] {
	return pulumix.Output[DateResponse]{
		OutputState: o.OutputState,
	}
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o DateResponseOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v DateResponse) int { return v.Day }).(pulumi.IntOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o DateResponseOutput) Month() pulumi.IntOutput {
	return o.ApplyT(func(v DateResponse) int { return v.Month }).(pulumi.IntOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o DateResponseOutput) Year() pulumi.IntOutput {
	return o.ApplyT(func(v DateResponse) int { return v.Year }).(pulumi.IntOutput)
}

// Specifies the maintenance denial period.
type DenyMaintenancePeriod struct {
	// End date of the deny maintenance period.
	EndDate Date `pulumi:"endDate"`
	// Start date of the deny maintenance period.
	StartDate Date `pulumi:"startDate"`
	// Time in UTC when the period starts and ends.
	Time TimeOfDay `pulumi:"time"`
}

// DenyMaintenancePeriodInput is an input type that accepts DenyMaintenancePeriodArgs and DenyMaintenancePeriodOutput values.
// You can construct a concrete instance of `DenyMaintenancePeriodInput` via:
//
//	DenyMaintenancePeriodArgs{...}
type DenyMaintenancePeriodInput interface {
	pulumi.Input

	ToDenyMaintenancePeriodOutput() DenyMaintenancePeriodOutput
	ToDenyMaintenancePeriodOutputWithContext(context.Context) DenyMaintenancePeriodOutput
}

// Specifies the maintenance denial period.
type DenyMaintenancePeriodArgs struct {
	// End date of the deny maintenance period.
	EndDate DateInput `pulumi:"endDate"`
	// Start date of the deny maintenance period.
	StartDate DateInput `pulumi:"startDate"`
	// Time in UTC when the period starts and ends.
	Time TimeOfDayInput `pulumi:"time"`
}

func (DenyMaintenancePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DenyMaintenancePeriod)(nil)).Elem()
}

func (i DenyMaintenancePeriodArgs) ToDenyMaintenancePeriodOutput() DenyMaintenancePeriodOutput {
	return i.ToDenyMaintenancePeriodOutputWithContext(context.Background())
}

func (i DenyMaintenancePeriodArgs) ToDenyMaintenancePeriodOutputWithContext(ctx context.Context) DenyMaintenancePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenyMaintenancePeriodOutput)
}

func (i DenyMaintenancePeriodArgs) ToOutput(ctx context.Context) pulumix.Output[DenyMaintenancePeriod] {
	return pulumix.Output[DenyMaintenancePeriod]{
		OutputState: i.ToDenyMaintenancePeriodOutputWithContext(ctx).OutputState,
	}
}

func (i DenyMaintenancePeriodArgs) ToDenyMaintenancePeriodPtrOutput() DenyMaintenancePeriodPtrOutput {
	return i.ToDenyMaintenancePeriodPtrOutputWithContext(context.Background())
}

func (i DenyMaintenancePeriodArgs) ToDenyMaintenancePeriodPtrOutputWithContext(ctx context.Context) DenyMaintenancePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenyMaintenancePeriodOutput).ToDenyMaintenancePeriodPtrOutputWithContext(ctx)
}

// DenyMaintenancePeriodPtrInput is an input type that accepts DenyMaintenancePeriodArgs, DenyMaintenancePeriodPtr and DenyMaintenancePeriodPtrOutput values.
// You can construct a concrete instance of `DenyMaintenancePeriodPtrInput` via:
//
//	        DenyMaintenancePeriodArgs{...}
//
//	or:
//
//	        nil
type DenyMaintenancePeriodPtrInput interface {
	pulumi.Input

	ToDenyMaintenancePeriodPtrOutput() DenyMaintenancePeriodPtrOutput
	ToDenyMaintenancePeriodPtrOutputWithContext(context.Context) DenyMaintenancePeriodPtrOutput
}

type denyMaintenancePeriodPtrType DenyMaintenancePeriodArgs

func DenyMaintenancePeriodPtr(v *DenyMaintenancePeriodArgs) DenyMaintenancePeriodPtrInput {
	return (*denyMaintenancePeriodPtrType)(v)
}

func (*denyMaintenancePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DenyMaintenancePeriod)(nil)).Elem()
}

func (i *denyMaintenancePeriodPtrType) ToDenyMaintenancePeriodPtrOutput() DenyMaintenancePeriodPtrOutput {
	return i.ToDenyMaintenancePeriodPtrOutputWithContext(context.Background())
}

func (i *denyMaintenancePeriodPtrType) ToDenyMaintenancePeriodPtrOutputWithContext(ctx context.Context) DenyMaintenancePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenyMaintenancePeriodPtrOutput)
}

func (i *denyMaintenancePeriodPtrType) ToOutput(ctx context.Context) pulumix.Output[*DenyMaintenancePeriod] {
	return pulumix.Output[*DenyMaintenancePeriod]{
		OutputState: i.ToDenyMaintenancePeriodPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the maintenance denial period.
type DenyMaintenancePeriodOutput struct{ *pulumi.OutputState }

func (DenyMaintenancePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DenyMaintenancePeriod)(nil)).Elem()
}

func (o DenyMaintenancePeriodOutput) ToDenyMaintenancePeriodOutput() DenyMaintenancePeriodOutput {
	return o
}

func (o DenyMaintenancePeriodOutput) ToDenyMaintenancePeriodOutputWithContext(ctx context.Context) DenyMaintenancePeriodOutput {
	return o
}

func (o DenyMaintenancePeriodOutput) ToDenyMaintenancePeriodPtrOutput() DenyMaintenancePeriodPtrOutput {
	return o.ToDenyMaintenancePeriodPtrOutputWithContext(context.Background())
}

func (o DenyMaintenancePeriodOutput) ToDenyMaintenancePeriodPtrOutputWithContext(ctx context.Context) DenyMaintenancePeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DenyMaintenancePeriod) *DenyMaintenancePeriod {
		return &v
	}).(DenyMaintenancePeriodPtrOutput)
}

func (o DenyMaintenancePeriodOutput) ToOutput(ctx context.Context) pulumix.Output[DenyMaintenancePeriod] {
	return pulumix.Output[DenyMaintenancePeriod]{
		OutputState: o.OutputState,
	}
}

// End date of the deny maintenance period.
func (o DenyMaintenancePeriodOutput) EndDate() DateOutput {
	return o.ApplyT(func(v DenyMaintenancePeriod) Date { return v.EndDate }).(DateOutput)
}

// Start date of the deny maintenance period.
func (o DenyMaintenancePeriodOutput) StartDate() DateOutput {
	return o.ApplyT(func(v DenyMaintenancePeriod) Date { return v.StartDate }).(DateOutput)
}

// Time in UTC when the period starts and ends.
func (o DenyMaintenancePeriodOutput) Time() TimeOfDayOutput {
	return o.ApplyT(func(v DenyMaintenancePeriod) TimeOfDay { return v.Time }).(TimeOfDayOutput)
}

type DenyMaintenancePeriodPtrOutput struct{ *pulumi.OutputState }

func (DenyMaintenancePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DenyMaintenancePeriod)(nil)).Elem()
}

func (o DenyMaintenancePeriodPtrOutput) ToDenyMaintenancePeriodPtrOutput() DenyMaintenancePeriodPtrOutput {
	return o
}

func (o DenyMaintenancePeriodPtrOutput) ToDenyMaintenancePeriodPtrOutputWithContext(ctx context.Context) DenyMaintenancePeriodPtrOutput {
	return o
}

func (o DenyMaintenancePeriodPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DenyMaintenancePeriod] {
	return pulumix.Output[*DenyMaintenancePeriod]{
		OutputState: o.OutputState,
	}
}

func (o DenyMaintenancePeriodPtrOutput) Elem() DenyMaintenancePeriodOutput {
	return o.ApplyT(func(v *DenyMaintenancePeriod) DenyMaintenancePeriod {
		if v != nil {
			return *v
		}
		var ret DenyMaintenancePeriod
		return ret
	}).(DenyMaintenancePeriodOutput)
}

// End date of the deny maintenance period.
func (o DenyMaintenancePeriodPtrOutput) EndDate() DatePtrOutput {
	return o.ApplyT(func(v *DenyMaintenancePeriod) *Date {
		if v == nil {
			return nil
		}
		return &v.EndDate
	}).(DatePtrOutput)
}

// Start date of the deny maintenance period.
func (o DenyMaintenancePeriodPtrOutput) StartDate() DatePtrOutput {
	return o.ApplyT(func(v *DenyMaintenancePeriod) *Date {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(DatePtrOutput)
}

// Time in UTC when the period starts and ends.
func (o DenyMaintenancePeriodPtrOutput) Time() TimeOfDayPtrOutput {
	return o.ApplyT(func(v *DenyMaintenancePeriod) *TimeOfDay {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(TimeOfDayPtrOutput)
}

// Specifies the maintenance denial period.
type DenyMaintenancePeriodResponse struct {
	// End date of the deny maintenance period.
	EndDate DateResponse `pulumi:"endDate"`
	// Start date of the deny maintenance period.
	StartDate DateResponse `pulumi:"startDate"`
	// Time in UTC when the period starts and ends.
	Time TimeOfDayResponse `pulumi:"time"`
}

// Specifies the maintenance denial period.
type DenyMaintenancePeriodResponseOutput struct{ *pulumi.OutputState }

func (DenyMaintenancePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DenyMaintenancePeriodResponse)(nil)).Elem()
}

func (o DenyMaintenancePeriodResponseOutput) ToDenyMaintenancePeriodResponseOutput() DenyMaintenancePeriodResponseOutput {
	return o
}

func (o DenyMaintenancePeriodResponseOutput) ToDenyMaintenancePeriodResponseOutputWithContext(ctx context.Context) DenyMaintenancePeriodResponseOutput {
	return o
}

func (o DenyMaintenancePeriodResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DenyMaintenancePeriodResponse] {
	return pulumix.Output[DenyMaintenancePeriodResponse]{
		OutputState: o.OutputState,
	}
}

// End date of the deny maintenance period.
func (o DenyMaintenancePeriodResponseOutput) EndDate() DateResponseOutput {
	return o.ApplyT(func(v DenyMaintenancePeriodResponse) DateResponse { return v.EndDate }).(DateResponseOutput)
}

// Start date of the deny maintenance period.
func (o DenyMaintenancePeriodResponseOutput) StartDate() DateResponseOutput {
	return o.ApplyT(func(v DenyMaintenancePeriodResponse) DateResponse { return v.StartDate }).(DateResponseOutput)
}

// Time in UTC when the period starts and ends.
func (o DenyMaintenancePeriodResponseOutput) Time() TimeOfDayResponseOutput {
	return o.ApplyT(func(v DenyMaintenancePeriodResponse) TimeOfDayResponse { return v.Time }).(TimeOfDayResponseOutput)
}

// Encryption configuration (i.e. CMEK).
type EncryptionConfig struct {
	// Name of the CMEK key in KMS (input parameter).
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigInput is an input type that accepts EncryptionConfigArgs and EncryptionConfigOutput values.
// You can construct a concrete instance of `EncryptionConfigInput` via:
//
//	EncryptionConfigArgs{...}
type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(context.Context) EncryptionConfigOutput
}

// Encryption configuration (i.e. CMEK).
type EncryptionConfigArgs struct {
	// Name of the CMEK key in KMS (input parameter).
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i EncryptionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfig] {
	return pulumix.Output[EncryptionConfig]{
		OutputState: i.ToEncryptionConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput).ToEncryptionConfigPtrOutputWithContext(ctx)
}

// EncryptionConfigPtrInput is an input type that accepts EncryptionConfigArgs, EncryptionConfigPtr and EncryptionConfigPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigPtrInput` via:
//
//	        EncryptionConfigArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func EncryptionConfigPtr(v *EncryptionConfigArgs) EncryptionConfigPtrInput {
	return (*encryptionConfigPtrType)(v)
}

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

func (i *encryptionConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EncryptionConfig] {
	return pulumix.Output[*EncryptionConfig]{
		OutputState: i.ToEncryptionConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Encryption configuration (i.e. CMEK).
type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

func (o EncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfig] {
	return pulumix.Output[EncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// Name of the CMEK key in KMS (input parameter).
func (o EncryptionConfigOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionConfig] {
	return pulumix.Output[*EncryptionConfig]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig {
		if v != nil {
			return *v
		}
		var ret EncryptionConfig
		return ret
	}).(EncryptionConfigOutput)
}

// Name of the CMEK key in KMS (input parameter).
func (o EncryptionConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Encryption configuration (i.e. CMEK).
type EncryptionConfigResponse struct {
	// Name of the CMEK key in KMS (input parameter).
	KmsKeyName string `pulumi:"kmsKeyName"`
	// Full name and version of the CMEK key currently in use to encrypt Looker data. Format: `projects/{project}/locations/{location}/keyRings/{ring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`. Empty if CMEK is not configured in this instance.
	KmsKeyNameVersion string `pulumi:"kmsKeyNameVersion"`
	// Status of the CMEK key.
	KmsKeyState string `pulumi:"kmsKeyState"`
}

// Encryption configuration (i.e. CMEK).
type EncryptionConfigResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigResponse)(nil)).Elem()
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutput() EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutputWithContext(ctx context.Context) EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfigResponse] {
	return pulumix.Output[EncryptionConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the CMEK key in KMS (input parameter).
func (o EncryptionConfigResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Full name and version of the CMEK key currently in use to encrypt Looker data. Format: `projects/{project}/locations/{location}/keyRings/{ring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`. Empty if CMEK is not configured in this instance.
func (o EncryptionConfigResponseOutput) KmsKeyNameVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigResponse) string { return v.KmsKeyNameVersion }).(pulumi.StringOutput)
}

// Status of the CMEK key.
func (o EncryptionConfigResponseOutput) KmsKeyState() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigResponse) string { return v.KmsKeyState }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: i.ToExprOutputWithContext(ctx).OutputState,
	}
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

func (i *exprPtrType) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: i.ToExprPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

func (o ExprOutput) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: o.OutputState,
	}
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExprResponse] {
	return pulumix.Output[ExprResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Published upcoming future maintenance schedule.
type MaintenanceSchedule struct {
	// The scheduled end time for the maintenance.
	EndTime *string `pulumi:"endTime"`
	// The scheduled start time for the maintenance.
	StartTime *string `pulumi:"startTime"`
}

// MaintenanceScheduleInput is an input type that accepts MaintenanceScheduleArgs and MaintenanceScheduleOutput values.
// You can construct a concrete instance of `MaintenanceScheduleInput` via:
//
//	MaintenanceScheduleArgs{...}
type MaintenanceScheduleInput interface {
	pulumi.Input

	ToMaintenanceScheduleOutput() MaintenanceScheduleOutput
	ToMaintenanceScheduleOutputWithContext(context.Context) MaintenanceScheduleOutput
}

// Published upcoming future maintenance schedule.
type MaintenanceScheduleArgs struct {
	// The scheduled end time for the maintenance.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The scheduled start time for the maintenance.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (MaintenanceScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceSchedule)(nil)).Elem()
}

func (i MaintenanceScheduleArgs) ToMaintenanceScheduleOutput() MaintenanceScheduleOutput {
	return i.ToMaintenanceScheduleOutputWithContext(context.Background())
}

func (i MaintenanceScheduleArgs) ToMaintenanceScheduleOutputWithContext(ctx context.Context) MaintenanceScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceScheduleOutput)
}

func (i MaintenanceScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[MaintenanceSchedule] {
	return pulumix.Output[MaintenanceSchedule]{
		OutputState: i.ToMaintenanceScheduleOutputWithContext(ctx).OutputState,
	}
}

func (i MaintenanceScheduleArgs) ToMaintenanceSchedulePtrOutput() MaintenanceSchedulePtrOutput {
	return i.ToMaintenanceSchedulePtrOutputWithContext(context.Background())
}

func (i MaintenanceScheduleArgs) ToMaintenanceSchedulePtrOutputWithContext(ctx context.Context) MaintenanceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceScheduleOutput).ToMaintenanceSchedulePtrOutputWithContext(ctx)
}

// MaintenanceSchedulePtrInput is an input type that accepts MaintenanceScheduleArgs, MaintenanceSchedulePtr and MaintenanceSchedulePtrOutput values.
// You can construct a concrete instance of `MaintenanceSchedulePtrInput` via:
//
//	        MaintenanceScheduleArgs{...}
//
//	or:
//
//	        nil
type MaintenanceSchedulePtrInput interface {
	pulumi.Input

	ToMaintenanceSchedulePtrOutput() MaintenanceSchedulePtrOutput
	ToMaintenanceSchedulePtrOutputWithContext(context.Context) MaintenanceSchedulePtrOutput
}

type maintenanceSchedulePtrType MaintenanceScheduleArgs

func MaintenanceSchedulePtr(v *MaintenanceScheduleArgs) MaintenanceSchedulePtrInput {
	return (*maintenanceSchedulePtrType)(v)
}

func (*maintenanceSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceSchedule)(nil)).Elem()
}

func (i *maintenanceSchedulePtrType) ToMaintenanceSchedulePtrOutput() MaintenanceSchedulePtrOutput {
	return i.ToMaintenanceSchedulePtrOutputWithContext(context.Background())
}

func (i *maintenanceSchedulePtrType) ToMaintenanceSchedulePtrOutputWithContext(ctx context.Context) MaintenanceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceSchedulePtrOutput)
}

func (i *maintenanceSchedulePtrType) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceSchedule] {
	return pulumix.Output[*MaintenanceSchedule]{
		OutputState: i.ToMaintenanceSchedulePtrOutputWithContext(ctx).OutputState,
	}
}

// Published upcoming future maintenance schedule.
type MaintenanceScheduleOutput struct{ *pulumi.OutputState }

func (MaintenanceScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceSchedule)(nil)).Elem()
}

func (o MaintenanceScheduleOutput) ToMaintenanceScheduleOutput() MaintenanceScheduleOutput {
	return o
}

func (o MaintenanceScheduleOutput) ToMaintenanceScheduleOutputWithContext(ctx context.Context) MaintenanceScheduleOutput {
	return o
}

func (o MaintenanceScheduleOutput) ToMaintenanceSchedulePtrOutput() MaintenanceSchedulePtrOutput {
	return o.ToMaintenanceSchedulePtrOutputWithContext(context.Background())
}

func (o MaintenanceScheduleOutput) ToMaintenanceSchedulePtrOutputWithContext(ctx context.Context) MaintenanceSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenanceSchedule) *MaintenanceSchedule {
		return &v
	}).(MaintenanceSchedulePtrOutput)
}

func (o MaintenanceScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceSchedule] {
	return pulumix.Output[MaintenanceSchedule]{
		OutputState: o.OutputState,
	}
}

// The scheduled end time for the maintenance.
func (o MaintenanceScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The scheduled start time for the maintenance.
func (o MaintenanceScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type MaintenanceSchedulePtrOutput struct{ *pulumi.OutputState }

func (MaintenanceSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceSchedule)(nil)).Elem()
}

func (o MaintenanceSchedulePtrOutput) ToMaintenanceSchedulePtrOutput() MaintenanceSchedulePtrOutput {
	return o
}

func (o MaintenanceSchedulePtrOutput) ToMaintenanceSchedulePtrOutputWithContext(ctx context.Context) MaintenanceSchedulePtrOutput {
	return o
}

func (o MaintenanceSchedulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceSchedule] {
	return pulumix.Output[*MaintenanceSchedule]{
		OutputState: o.OutputState,
	}
}

func (o MaintenanceSchedulePtrOutput) Elem() MaintenanceScheduleOutput {
	return o.ApplyT(func(v *MaintenanceSchedule) MaintenanceSchedule {
		if v != nil {
			return *v
		}
		var ret MaintenanceSchedule
		return ret
	}).(MaintenanceScheduleOutput)
}

// The scheduled end time for the maintenance.
func (o MaintenanceSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// The scheduled start time for the maintenance.
func (o MaintenanceSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Published upcoming future maintenance schedule.
type MaintenanceScheduleResponse struct {
	// The scheduled end time for the maintenance.
	EndTime string `pulumi:"endTime"`
	// The scheduled start time for the maintenance.
	StartTime string `pulumi:"startTime"`
}

// Published upcoming future maintenance schedule.
type MaintenanceScheduleResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceScheduleResponse)(nil)).Elem()
}

func (o MaintenanceScheduleResponseOutput) ToMaintenanceScheduleResponseOutput() MaintenanceScheduleResponseOutput {
	return o
}

func (o MaintenanceScheduleResponseOutput) ToMaintenanceScheduleResponseOutputWithContext(ctx context.Context) MaintenanceScheduleResponseOutput {
	return o
}

func (o MaintenanceScheduleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceScheduleResponse] {
	return pulumix.Output[MaintenanceScheduleResponse]{
		OutputState: o.OutputState,
	}
}

// The scheduled end time for the maintenance.
func (o MaintenanceScheduleResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// The scheduled start time for the maintenance.
func (o MaintenanceScheduleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Specifies the recurring maintenance window.
type MaintenanceWindow struct {
	// Day of the week for this MaintenanceWindow (in UTC).
	DayOfWeek MaintenanceWindowDayOfWeek `pulumi:"dayOfWeek"`
	// Time in UTC when the period starts. Maintenance will be scheduled within 60 minutes.
	StartTime TimeOfDay `pulumi:"startTime"`
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//	MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// Specifies the recurring maintenance window.
type MaintenanceWindowArgs struct {
	// Day of the week for this MaintenanceWindow (in UTC).
	DayOfWeek MaintenanceWindowDayOfWeekInput `pulumi:"dayOfWeek"`
	// Time in UTC when the period starts. Maintenance will be scheduled within 60 minutes.
	StartTime TimeOfDayInput `pulumi:"startTime"`
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindow] {
	return pulumix.Output[MaintenanceWindow]{
		OutputState: i.ToMaintenanceWindowOutputWithContext(ctx).OutputState,
	}
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//	        MaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

func (i *maintenanceWindowPtrType) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindow] {
	return pulumix.Output[*MaintenanceWindow]{
		OutputState: i.ToMaintenanceWindowPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the recurring maintenance window.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

func (o MaintenanceWindowOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindow] {
	return pulumix.Output[MaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

// Day of the week for this MaintenanceWindow (in UTC).
func (o MaintenanceWindowOutput) DayOfWeek() MaintenanceWindowDayOfWeekOutput {
	return o.ApplyT(func(v MaintenanceWindow) MaintenanceWindowDayOfWeek { return v.DayOfWeek }).(MaintenanceWindowDayOfWeekOutput)
}

// Time in UTC when the period starts. Maintenance will be scheduled within 60 minutes.
func (o MaintenanceWindowOutput) StartTime() TimeOfDayOutput {
	return o.ApplyT(func(v MaintenanceWindow) TimeOfDay { return v.StartTime }).(TimeOfDayOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindow] {
	return pulumix.Output[*MaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret MaintenanceWindow
		return ret
	}).(MaintenanceWindowOutput)
}

// Day of the week for this MaintenanceWindow (in UTC).
func (o MaintenanceWindowPtrOutput) DayOfWeek() MaintenanceWindowDayOfWeekPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *MaintenanceWindowDayOfWeek {
		if v == nil {
			return nil
		}
		return &v.DayOfWeek
	}).(MaintenanceWindowDayOfWeekPtrOutput)
}

// Time in UTC when the period starts. Maintenance will be scheduled within 60 minutes.
func (o MaintenanceWindowPtrOutput) StartTime() TimeOfDayPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *TimeOfDay {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(TimeOfDayPtrOutput)
}

// Specifies the recurring maintenance window.
type MaintenanceWindowResponse struct {
	// Day of the week for this MaintenanceWindow (in UTC).
	DayOfWeek string `pulumi:"dayOfWeek"`
	// Time in UTC when the period starts. Maintenance will be scheduled within 60 minutes.
	StartTime TimeOfDayResponse `pulumi:"startTime"`
}

// Specifies the recurring maintenance window.
type MaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutput() MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutputWithContext(ctx context.Context) MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowResponse] {
	return pulumix.Output[MaintenanceWindowResponse]{
		OutputState: o.OutputState,
	}
}

// Day of the week for this MaintenanceWindow (in UTC).
func (o MaintenanceWindowResponseOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// Time in UTC when the period starts. Maintenance will be scheduled within 60 minutes.
func (o MaintenanceWindowResponseOutput) StartTime() TimeOfDayResponseOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) TimeOfDayResponse { return v.StartTime }).(TimeOfDayResponseOutput)
}

// Looker instance OAuth login settings.
type OAuthConfig struct {
	// Input only. Client ID from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
	ClientId *string `pulumi:"clientId"`
	// Input only. Client secret from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
	ClientSecret *string `pulumi:"clientSecret"`
}

// OAuthConfigInput is an input type that accepts OAuthConfigArgs and OAuthConfigOutput values.
// You can construct a concrete instance of `OAuthConfigInput` via:
//
//	OAuthConfigArgs{...}
type OAuthConfigInput interface {
	pulumi.Input

	ToOAuthConfigOutput() OAuthConfigOutput
	ToOAuthConfigOutputWithContext(context.Context) OAuthConfigOutput
}

// Looker instance OAuth login settings.
type OAuthConfigArgs struct {
	// Input only. Client ID from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Input only. Client secret from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
}

func (OAuthConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthConfig)(nil)).Elem()
}

func (i OAuthConfigArgs) ToOAuthConfigOutput() OAuthConfigOutput {
	return i.ToOAuthConfigOutputWithContext(context.Background())
}

func (i OAuthConfigArgs) ToOAuthConfigOutputWithContext(ctx context.Context) OAuthConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthConfigOutput)
}

func (i OAuthConfigArgs) ToOutput(ctx context.Context) pulumix.Output[OAuthConfig] {
	return pulumix.Output[OAuthConfig]{
		OutputState: i.ToOAuthConfigOutputWithContext(ctx).OutputState,
	}
}

func (i OAuthConfigArgs) ToOAuthConfigPtrOutput() OAuthConfigPtrOutput {
	return i.ToOAuthConfigPtrOutputWithContext(context.Background())
}

func (i OAuthConfigArgs) ToOAuthConfigPtrOutputWithContext(ctx context.Context) OAuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthConfigOutput).ToOAuthConfigPtrOutputWithContext(ctx)
}

// OAuthConfigPtrInput is an input type that accepts OAuthConfigArgs, OAuthConfigPtr and OAuthConfigPtrOutput values.
// You can construct a concrete instance of `OAuthConfigPtrInput` via:
//
//	        OAuthConfigArgs{...}
//
//	or:
//
//	        nil
type OAuthConfigPtrInput interface {
	pulumi.Input

	ToOAuthConfigPtrOutput() OAuthConfigPtrOutput
	ToOAuthConfigPtrOutputWithContext(context.Context) OAuthConfigPtrOutput
}

type oauthConfigPtrType OAuthConfigArgs

func OAuthConfigPtr(v *OAuthConfigArgs) OAuthConfigPtrInput {
	return (*oauthConfigPtrType)(v)
}

func (*oauthConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthConfig)(nil)).Elem()
}

func (i *oauthConfigPtrType) ToOAuthConfigPtrOutput() OAuthConfigPtrOutput {
	return i.ToOAuthConfigPtrOutputWithContext(context.Background())
}

func (i *oauthConfigPtrType) ToOAuthConfigPtrOutputWithContext(ctx context.Context) OAuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthConfigPtrOutput)
}

func (i *oauthConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*OAuthConfig] {
	return pulumix.Output[*OAuthConfig]{
		OutputState: i.ToOAuthConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Looker instance OAuth login settings.
type OAuthConfigOutput struct{ *pulumi.OutputState }

func (OAuthConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthConfig)(nil)).Elem()
}

func (o OAuthConfigOutput) ToOAuthConfigOutput() OAuthConfigOutput {
	return o
}

func (o OAuthConfigOutput) ToOAuthConfigOutputWithContext(ctx context.Context) OAuthConfigOutput {
	return o
}

func (o OAuthConfigOutput) ToOAuthConfigPtrOutput() OAuthConfigPtrOutput {
	return o.ToOAuthConfigPtrOutputWithContext(context.Background())
}

func (o OAuthConfigOutput) ToOAuthConfigPtrOutputWithContext(ctx context.Context) OAuthConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OAuthConfig) *OAuthConfig {
		return &v
	}).(OAuthConfigPtrOutput)
}

func (o OAuthConfigOutput) ToOutput(ctx context.Context) pulumix.Output[OAuthConfig] {
	return pulumix.Output[OAuthConfig]{
		OutputState: o.OutputState,
	}
}

// Input only. Client ID from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
func (o OAuthConfigOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthConfig) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Input only. Client secret from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
func (o OAuthConfigOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthConfig) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

type OAuthConfigPtrOutput struct{ *pulumi.OutputState }

func (OAuthConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthConfig)(nil)).Elem()
}

func (o OAuthConfigPtrOutput) ToOAuthConfigPtrOutput() OAuthConfigPtrOutput {
	return o
}

func (o OAuthConfigPtrOutput) ToOAuthConfigPtrOutputWithContext(ctx context.Context) OAuthConfigPtrOutput {
	return o
}

func (o OAuthConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OAuthConfig] {
	return pulumix.Output[*OAuthConfig]{
		OutputState: o.OutputState,
	}
}

func (o OAuthConfigPtrOutput) Elem() OAuthConfigOutput {
	return o.ApplyT(func(v *OAuthConfig) OAuthConfig {
		if v != nil {
			return *v
		}
		var ret OAuthConfig
		return ret
	}).(OAuthConfigOutput)
}

// Input only. Client ID from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
func (o OAuthConfigPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Input only. Client secret from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
func (o OAuthConfigPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Looker instance OAuth login settings.
type OAuthConfigResponse struct {
	// Input only. Client ID from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
	ClientId string `pulumi:"clientId"`
	// Input only. Client secret from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
	ClientSecret string `pulumi:"clientSecret"`
}

// Looker instance OAuth login settings.
type OAuthConfigResponseOutput struct{ *pulumi.OutputState }

func (OAuthConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthConfigResponse)(nil)).Elem()
}

func (o OAuthConfigResponseOutput) ToOAuthConfigResponseOutput() OAuthConfigResponseOutput {
	return o
}

func (o OAuthConfigResponseOutput) ToOAuthConfigResponseOutputWithContext(ctx context.Context) OAuthConfigResponseOutput {
	return o
}

func (o OAuthConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OAuthConfigResponse] {
	return pulumix.Output[OAuthConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Input only. Client ID from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
func (o OAuthConfigResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthConfigResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Input only. Client secret from an external OAuth application. This is an input-only field, and thus will not be set in any responses.
func (o OAuthConfigResponseOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthConfigResponse) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds *int `pulumi:"seconds"`
}

// TimeOfDayInput is an input type that accepts TimeOfDayArgs and TimeOfDayOutput values.
// You can construct a concrete instance of `TimeOfDayInput` via:
//
//	TimeOfDayArgs{...}
type TimeOfDayInput interface {
	pulumi.Input

	ToTimeOfDayOutput() TimeOfDayOutput
	ToTimeOfDayOutputWithContext(context.Context) TimeOfDayOutput
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayArgs struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours pulumi.IntPtrInput `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes pulumi.IntPtrInput `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds pulumi.IntPtrInput `pulumi:"seconds"`
}

func (TimeOfDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (i TimeOfDayArgs) ToTimeOfDayOutput() TimeOfDayOutput {
	return i.ToTimeOfDayOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput)
}

func (i TimeOfDayArgs) ToOutput(ctx context.Context) pulumix.Output[TimeOfDay] {
	return pulumix.Output[TimeOfDay]{
		OutputState: i.ToTimeOfDayOutputWithContext(ctx).OutputState,
	}
}

func (i TimeOfDayArgs) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return i.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput).ToTimeOfDayPtrOutputWithContext(ctx)
}

// TimeOfDayPtrInput is an input type that accepts TimeOfDayArgs, TimeOfDayPtr and TimeOfDayPtrOutput values.
// You can construct a concrete instance of `TimeOfDayPtrInput` via:
//
//	        TimeOfDayArgs{...}
//
//	or:
//
//	        nil
type TimeOfDayPtrInput interface {
	pulumi.Input

	ToTimeOfDayPtrOutput() TimeOfDayPtrOutput
	ToTimeOfDayPtrOutputWithContext(context.Context) TimeOfDayPtrOutput
}

type timeOfDayPtrType TimeOfDayArgs

func TimeOfDayPtr(v *TimeOfDayArgs) TimeOfDayPtrInput {
	return (*timeOfDayPtrType)(v)
}

func (*timeOfDayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeOfDay)(nil)).Elem()
}

func (i *timeOfDayPtrType) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return i.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (i *timeOfDayPtrType) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayPtrOutput)
}

func (i *timeOfDayPtrType) ToOutput(ctx context.Context) pulumix.Output[*TimeOfDay] {
	return pulumix.Output[*TimeOfDay]{
		OutputState: i.ToTimeOfDayPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayOutput struct{ *pulumi.OutputState }

func (TimeOfDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayOutput) ToTimeOfDayOutput() TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return o.ToTimeOfDayPtrOutputWithContext(context.Background())
}

func (o TimeOfDayOutput) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeOfDay) *TimeOfDay {
		return &v
	}).(TimeOfDayPtrOutput)
}

func (o TimeOfDayOutput) ToOutput(ctx context.Context) pulumix.Output[TimeOfDay] {
	return pulumix.Output[TimeOfDay]{
		OutputState: o.OutputState,
	}
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Hours }).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Minutes }).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Seconds }).(pulumi.IntPtrOutput)
}

type TimeOfDayPtrOutput struct{ *pulumi.OutputState }

func (TimeOfDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayPtrOutput) ToTimeOfDayPtrOutput() TimeOfDayPtrOutput {
	return o
}

func (o TimeOfDayPtrOutput) ToTimeOfDayPtrOutputWithContext(ctx context.Context) TimeOfDayPtrOutput {
	return o
}

func (o TimeOfDayPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TimeOfDay] {
	return pulumix.Output[*TimeOfDay]{
		OutputState: o.OutputState,
	}
}

func (o TimeOfDayPtrOutput) Elem() TimeOfDayOutput {
	return o.ApplyT(func(v *TimeOfDay) TimeOfDay {
		if v != nil {
			return *v
		}
		var ret TimeOfDay
		return ret
	}).(TimeOfDayOutput)
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayPtrOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayPtrOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Seconds
	}).(pulumi.IntPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayResponse struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds int `pulumi:"seconds"`
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayResponseOutput struct{ *pulumi.OutputState }

func (TimeOfDayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDayResponse)(nil)).Elem()
}

func (o TimeOfDayResponseOutput) ToTimeOfDayResponseOutput() TimeOfDayResponseOutput {
	return o
}

func (o TimeOfDayResponseOutput) ToTimeOfDayResponseOutputWithContext(ctx context.Context) TimeOfDayResponseOutput {
	return o
}

func (o TimeOfDayResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimeOfDayResponse] {
	return pulumix.Output[TimeOfDayResponse]{
		OutputState: o.OutputState,
	}
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayResponseOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Hours }).(pulumi.IntOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayResponseOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Minutes }).(pulumi.IntOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayResponseOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Nanos }).(pulumi.IntOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayResponseOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Seconds }).(pulumi.IntOutput)
}

// Metadata about users for a Looker instance.
type UserMetadata struct {
	// Optional. The number of additional developer users the instance owner has purchased.
	AdditionalDeveloperUserCount *int `pulumi:"additionalDeveloperUserCount"`
	// Optional. The number of additional standard users the instance owner has purchased.
	AdditionalStandardUserCount *int `pulumi:"additionalStandardUserCount"`
	// Optional. The number of additional viewer users the instance owner has purchased.
	AdditionalViewerUserCount *int `pulumi:"additionalViewerUserCount"`
}

// UserMetadataInput is an input type that accepts UserMetadataArgs and UserMetadataOutput values.
// You can construct a concrete instance of `UserMetadataInput` via:
//
//	UserMetadataArgs{...}
type UserMetadataInput interface {
	pulumi.Input

	ToUserMetadataOutput() UserMetadataOutput
	ToUserMetadataOutputWithContext(context.Context) UserMetadataOutput
}

// Metadata about users for a Looker instance.
type UserMetadataArgs struct {
	// Optional. The number of additional developer users the instance owner has purchased.
	AdditionalDeveloperUserCount pulumi.IntPtrInput `pulumi:"additionalDeveloperUserCount"`
	// Optional. The number of additional standard users the instance owner has purchased.
	AdditionalStandardUserCount pulumi.IntPtrInput `pulumi:"additionalStandardUserCount"`
	// Optional. The number of additional viewer users the instance owner has purchased.
	AdditionalViewerUserCount pulumi.IntPtrInput `pulumi:"additionalViewerUserCount"`
}

func (UserMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserMetadata)(nil)).Elem()
}

func (i UserMetadataArgs) ToUserMetadataOutput() UserMetadataOutput {
	return i.ToUserMetadataOutputWithContext(context.Background())
}

func (i UserMetadataArgs) ToUserMetadataOutputWithContext(ctx context.Context) UserMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMetadataOutput)
}

func (i UserMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[UserMetadata] {
	return pulumix.Output[UserMetadata]{
		OutputState: i.ToUserMetadataOutputWithContext(ctx).OutputState,
	}
}

func (i UserMetadataArgs) ToUserMetadataPtrOutput() UserMetadataPtrOutput {
	return i.ToUserMetadataPtrOutputWithContext(context.Background())
}

func (i UserMetadataArgs) ToUserMetadataPtrOutputWithContext(ctx context.Context) UserMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMetadataOutput).ToUserMetadataPtrOutputWithContext(ctx)
}

// UserMetadataPtrInput is an input type that accepts UserMetadataArgs, UserMetadataPtr and UserMetadataPtrOutput values.
// You can construct a concrete instance of `UserMetadataPtrInput` via:
//
//	        UserMetadataArgs{...}
//
//	or:
//
//	        nil
type UserMetadataPtrInput interface {
	pulumi.Input

	ToUserMetadataPtrOutput() UserMetadataPtrOutput
	ToUserMetadataPtrOutputWithContext(context.Context) UserMetadataPtrOutput
}

type userMetadataPtrType UserMetadataArgs

func UserMetadataPtr(v *UserMetadataArgs) UserMetadataPtrInput {
	return (*userMetadataPtrType)(v)
}

func (*userMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserMetadata)(nil)).Elem()
}

func (i *userMetadataPtrType) ToUserMetadataPtrOutput() UserMetadataPtrOutput {
	return i.ToUserMetadataPtrOutputWithContext(context.Background())
}

func (i *userMetadataPtrType) ToUserMetadataPtrOutputWithContext(ctx context.Context) UserMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMetadataPtrOutput)
}

func (i *userMetadataPtrType) ToOutput(ctx context.Context) pulumix.Output[*UserMetadata] {
	return pulumix.Output[*UserMetadata]{
		OutputState: i.ToUserMetadataPtrOutputWithContext(ctx).OutputState,
	}
}

// Metadata about users for a Looker instance.
type UserMetadataOutput struct{ *pulumi.OutputState }

func (UserMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserMetadata)(nil)).Elem()
}

func (o UserMetadataOutput) ToUserMetadataOutput() UserMetadataOutput {
	return o
}

func (o UserMetadataOutput) ToUserMetadataOutputWithContext(ctx context.Context) UserMetadataOutput {
	return o
}

func (o UserMetadataOutput) ToUserMetadataPtrOutput() UserMetadataPtrOutput {
	return o.ToUserMetadataPtrOutputWithContext(context.Background())
}

func (o UserMetadataOutput) ToUserMetadataPtrOutputWithContext(ctx context.Context) UserMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserMetadata) *UserMetadata {
		return &v
	}).(UserMetadataPtrOutput)
}

func (o UserMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[UserMetadata] {
	return pulumix.Output[UserMetadata]{
		OutputState: o.OutputState,
	}
}

// Optional. The number of additional developer users the instance owner has purchased.
func (o UserMetadataOutput) AdditionalDeveloperUserCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UserMetadata) *int { return v.AdditionalDeveloperUserCount }).(pulumi.IntPtrOutput)
}

// Optional. The number of additional standard users the instance owner has purchased.
func (o UserMetadataOutput) AdditionalStandardUserCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UserMetadata) *int { return v.AdditionalStandardUserCount }).(pulumi.IntPtrOutput)
}

// Optional. The number of additional viewer users the instance owner has purchased.
func (o UserMetadataOutput) AdditionalViewerUserCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UserMetadata) *int { return v.AdditionalViewerUserCount }).(pulumi.IntPtrOutput)
}

type UserMetadataPtrOutput struct{ *pulumi.OutputState }

func (UserMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserMetadata)(nil)).Elem()
}

func (o UserMetadataPtrOutput) ToUserMetadataPtrOutput() UserMetadataPtrOutput {
	return o
}

func (o UserMetadataPtrOutput) ToUserMetadataPtrOutputWithContext(ctx context.Context) UserMetadataPtrOutput {
	return o
}

func (o UserMetadataPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UserMetadata] {
	return pulumix.Output[*UserMetadata]{
		OutputState: o.OutputState,
	}
}

func (o UserMetadataPtrOutput) Elem() UserMetadataOutput {
	return o.ApplyT(func(v *UserMetadata) UserMetadata {
		if v != nil {
			return *v
		}
		var ret UserMetadata
		return ret
	}).(UserMetadataOutput)
}

// Optional. The number of additional developer users the instance owner has purchased.
func (o UserMetadataPtrOutput) AdditionalDeveloperUserCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserMetadata) *int {
		if v == nil {
			return nil
		}
		return v.AdditionalDeveloperUserCount
	}).(pulumi.IntPtrOutput)
}

// Optional. The number of additional standard users the instance owner has purchased.
func (o UserMetadataPtrOutput) AdditionalStandardUserCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserMetadata) *int {
		if v == nil {
			return nil
		}
		return v.AdditionalStandardUserCount
	}).(pulumi.IntPtrOutput)
}

// Optional. The number of additional viewer users the instance owner has purchased.
func (o UserMetadataPtrOutput) AdditionalViewerUserCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserMetadata) *int {
		if v == nil {
			return nil
		}
		return v.AdditionalViewerUserCount
	}).(pulumi.IntPtrOutput)
}

// Metadata about users for a Looker instance.
type UserMetadataResponse struct {
	// Optional. The number of additional developer users the instance owner has purchased.
	AdditionalDeveloperUserCount int `pulumi:"additionalDeveloperUserCount"`
	// Optional. The number of additional standard users the instance owner has purchased.
	AdditionalStandardUserCount int `pulumi:"additionalStandardUserCount"`
	// Optional. The number of additional viewer users the instance owner has purchased.
	AdditionalViewerUserCount int `pulumi:"additionalViewerUserCount"`
}

// Metadata about users for a Looker instance.
type UserMetadataResponseOutput struct{ *pulumi.OutputState }

func (UserMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserMetadataResponse)(nil)).Elem()
}

func (o UserMetadataResponseOutput) ToUserMetadataResponseOutput() UserMetadataResponseOutput {
	return o
}

func (o UserMetadataResponseOutput) ToUserMetadataResponseOutputWithContext(ctx context.Context) UserMetadataResponseOutput {
	return o
}

func (o UserMetadataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserMetadataResponse] {
	return pulumix.Output[UserMetadataResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. The number of additional developer users the instance owner has purchased.
func (o UserMetadataResponseOutput) AdditionalDeveloperUserCount() pulumi.IntOutput {
	return o.ApplyT(func(v UserMetadataResponse) int { return v.AdditionalDeveloperUserCount }).(pulumi.IntOutput)
}

// Optional. The number of additional standard users the instance owner has purchased.
func (o UserMetadataResponseOutput) AdditionalStandardUserCount() pulumi.IntOutput {
	return o.ApplyT(func(v UserMetadataResponse) int { return v.AdditionalStandardUserCount }).(pulumi.IntOutput)
}

// Optional. The number of additional viewer users the instance owner has purchased.
func (o UserMetadataResponseOutput) AdditionalViewerUserCount() pulumi.IntOutput {
	return o.ApplyT(func(v UserMetadataResponse) int { return v.AdditionalViewerUserCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdminSettingsInput)(nil)).Elem(), AdminSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminSettingsPtrInput)(nil)).Elem(), AdminSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDomainInput)(nil)).Elem(), CustomDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDomainPtrInput)(nil)).Elem(), CustomDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DateInput)(nil)).Elem(), DateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatePtrInput)(nil)).Elem(), DateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DenyMaintenancePeriodInput)(nil)).Elem(), DenyMaintenancePeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DenyMaintenancePeriodPtrInput)(nil)).Elem(), DenyMaintenancePeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigPtrInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceScheduleInput)(nil)).Elem(), MaintenanceScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceSchedulePtrInput)(nil)).Elem(), MaintenanceScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowInput)(nil)).Elem(), MaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowPtrInput)(nil)).Elem(), MaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthConfigInput)(nil)).Elem(), OAuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthConfigPtrInput)(nil)).Elem(), OAuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeOfDayInput)(nil)).Elem(), TimeOfDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeOfDayPtrInput)(nil)).Elem(), TimeOfDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMetadataInput)(nil)).Elem(), UserMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMetadataPtrInput)(nil)).Elem(), UserMetadataArgs{})
	pulumi.RegisterOutputType(AdminSettingsOutput{})
	pulumi.RegisterOutputType(AdminSettingsPtrOutput{})
	pulumi.RegisterOutputType(AdminSettingsResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CustomDomainOutput{})
	pulumi.RegisterOutputType(CustomDomainPtrOutput{})
	pulumi.RegisterOutputType(CustomDomainResponseOutput{})
	pulumi.RegisterOutputType(DateOutput{})
	pulumi.RegisterOutputType(DatePtrOutput{})
	pulumi.RegisterOutputType(DateResponseOutput{})
	pulumi.RegisterOutputType(DenyMaintenancePeriodOutput{})
	pulumi.RegisterOutputType(DenyMaintenancePeriodPtrOutput{})
	pulumi.RegisterOutputType(DenyMaintenancePeriodResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceScheduleOutput{})
	pulumi.RegisterOutputType(MaintenanceSchedulePtrOutput{})
	pulumi.RegisterOutputType(MaintenanceScheduleResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(OAuthConfigOutput{})
	pulumi.RegisterOutputType(OAuthConfigPtrOutput{})
	pulumi.RegisterOutputType(OAuthConfigResponseOutput{})
	pulumi.RegisterOutputType(TimeOfDayOutput{})
	pulumi.RegisterOutputType(TimeOfDayPtrOutput{})
	pulumi.RegisterOutputType(TimeOfDayResponseOutput{})
	pulumi.RegisterOutputType(UserMetadataOutput{})
	pulumi.RegisterOutputType(UserMetadataPtrOutput{})
	pulumi.RegisterOutputType(UserMetadataResponseOutput{})
}
