// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates an Annotation
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type Annotation struct {
	pulumi.CustomResourceState

	// Create time stamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Labels as key value pairs.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// name of resource.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Type of an annotation.
	Type pulumi.StringOutput `pulumi:"type"`
	// Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAnnotation registers a new resource with the given unique name, arguments, and options.
func NewAnnotation(ctx *pulumi.Context,
	name string, args *AnnotationArgs, opts ...pulumi.ResourceOption) (*Annotation, error) {
	if args == nil {
		args = &AnnotationArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Annotation
	err := ctx.RegisterResource("google-native:rapidmigrationassessment/v1:Annotation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnnotation gets an existing Annotation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnnotation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnnotationState, opts ...pulumi.ResourceOption) (*Annotation, error) {
	var resource Annotation
	err := ctx.ReadResource("google-native:rapidmigrationassessment/v1:Annotation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Annotation resources.
type annotationState struct {
}

type AnnotationState struct {
}

func (AnnotationState) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationState)(nil)).Elem()
}

type annotationArgs struct {
	// Labels as key value pairs.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// name of resource.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests.
	RequestId *string `pulumi:"requestId"`
	// Type of an annotation.
	Type *AnnotationType `pulumi:"type"`
}

// The set of arguments for constructing a Annotation resource.
type AnnotationArgs struct {
	// Labels as key value pairs.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// name of resource.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests.
	RequestId pulumi.StringPtrInput
	// Type of an annotation.
	Type AnnotationTypePtrInput
}

func (AnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationArgs)(nil)).Elem()
}

type AnnotationInput interface {
	pulumi.Input

	ToAnnotationOutput() AnnotationOutput
	ToAnnotationOutputWithContext(ctx context.Context) AnnotationOutput
}

func (*Annotation) ElementType() reflect.Type {
	return reflect.TypeOf((**Annotation)(nil)).Elem()
}

func (i *Annotation) ToAnnotationOutput() AnnotationOutput {
	return i.ToAnnotationOutputWithContext(context.Background())
}

func (i *Annotation) ToAnnotationOutputWithContext(ctx context.Context) AnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationOutput)
}

func (i *Annotation) ToOutput(ctx context.Context) pulumix.Output[*Annotation] {
	return pulumix.Output[*Annotation]{
		OutputState: i.ToAnnotationOutputWithContext(ctx).OutputState,
	}
}

type AnnotationOutput struct{ *pulumi.OutputState }

func (AnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Annotation)(nil)).Elem()
}

func (o AnnotationOutput) ToAnnotationOutput() AnnotationOutput {
	return o
}

func (o AnnotationOutput) ToAnnotationOutputWithContext(ctx context.Context) AnnotationOutput {
	return o
}

func (o AnnotationOutput) ToOutput(ctx context.Context) pulumix.Output[*Annotation] {
	return pulumix.Output[*Annotation]{
		OutputState: o.OutputState,
	}
}

// Create time stamp.
func (o AnnotationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Labels as key value pairs.
func (o AnnotationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o AnnotationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// name of resource.
func (o AnnotationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AnnotationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests.
func (o AnnotationOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Type of an annotation.
func (o AnnotationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Update time stamp.
func (o AnnotationOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationInput)(nil)).Elem(), &Annotation{})
	pulumi.RegisterOutputType(AnnotationOutput{})
}
