// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details of a single Collector.
func LookupCollector(ctx *pulumi.Context, args *LookupCollectorArgs, opts ...pulumi.InvokeOption) (*LookupCollectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCollectorResult
	err := ctx.Invoke("google-native:rapidmigrationassessment/v1:getCollector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCollectorArgs struct {
	CollectorId string  `pulumi:"collectorId"`
	Location    string  `pulumi:"location"`
	Project     *string `pulumi:"project"`
}

type LookupCollectorResult struct {
	// Store cloud storage bucket name (which is a guid) created with this Collector.
	Bucket string `pulumi:"bucket"`
	// Client version.
	ClientVersion string `pulumi:"clientVersion"`
	// How many days to collect data.
	CollectionDays int `pulumi:"collectionDays"`
	// Create time stamp.
	CreateTime string `pulumi:"createTime"`
	// User specified description of the Collector.
	Description string `pulumi:"description"`
	// User specified name of the Collector.
	DisplayName string `pulumi:"displayName"`
	// Uri for EULA (End User License Agreement) from customer.
	EulaUri string `pulumi:"eulaUri"`
	// User specified expected asset count.
	ExpectedAssetCount string `pulumi:"expectedAssetCount"`
	// Reference to MC Source Guest Os Scan.
	GuestOsScan GuestOsScanResponse `pulumi:"guestOsScan"`
	// Labels as key value pairs.
	Labels map[string]string `pulumi:"labels"`
	// name of resource.
	Name string `pulumi:"name"`
	// Service Account email used to ingest data to this Collector.
	ServiceAccount string `pulumi:"serviceAccount"`
	// State of the Collector.
	State string `pulumi:"state"`
	// Update time stamp.
	UpdateTime string `pulumi:"updateTime"`
	// Reference to MC Source vsphere_scan.
	VsphereScan VSphereScanResponse `pulumi:"vsphereScan"`
}

func LookupCollectorOutput(ctx *pulumi.Context, args LookupCollectorOutputArgs, opts ...pulumi.InvokeOption) LookupCollectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCollectorResult, error) {
			args := v.(LookupCollectorArgs)
			r, err := LookupCollector(ctx, &args, opts...)
			var s LookupCollectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCollectorResultOutput)
}

type LookupCollectorOutputArgs struct {
	CollectorId pulumi.StringInput    `pulumi:"collectorId"`
	Location    pulumi.StringInput    `pulumi:"location"`
	Project     pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupCollectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCollectorArgs)(nil)).Elem()
}

type LookupCollectorResultOutput struct{ *pulumi.OutputState }

func (LookupCollectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCollectorResult)(nil)).Elem()
}

func (o LookupCollectorResultOutput) ToLookupCollectorResultOutput() LookupCollectorResultOutput {
	return o
}

func (o LookupCollectorResultOutput) ToLookupCollectorResultOutputWithContext(ctx context.Context) LookupCollectorResultOutput {
	return o
}

func (o LookupCollectorResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCollectorResult] {
	return pulumix.Output[LookupCollectorResult]{
		OutputState: o.OutputState,
	}
}

// Store cloud storage bucket name (which is a guid) created with this Collector.
func (o LookupCollectorResultOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.Bucket }).(pulumi.StringOutput)
}

// Client version.
func (o LookupCollectorResultOutput) ClientVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.ClientVersion }).(pulumi.StringOutput)
}

// How many days to collect data.
func (o LookupCollectorResultOutput) CollectionDays() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCollectorResult) int { return v.CollectionDays }).(pulumi.IntOutput)
}

// Create time stamp.
func (o LookupCollectorResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// User specified description of the Collector.
func (o LookupCollectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.Description }).(pulumi.StringOutput)
}

// User specified name of the Collector.
func (o LookupCollectorResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Uri for EULA (End User License Agreement) from customer.
func (o LookupCollectorResultOutput) EulaUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.EulaUri }).(pulumi.StringOutput)
}

// User specified expected asset count.
func (o LookupCollectorResultOutput) ExpectedAssetCount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.ExpectedAssetCount }).(pulumi.StringOutput)
}

// Reference to MC Source Guest Os Scan.
func (o LookupCollectorResultOutput) GuestOsScan() GuestOsScanResponseOutput {
	return o.ApplyT(func(v LookupCollectorResult) GuestOsScanResponse { return v.GuestOsScan }).(GuestOsScanResponseOutput)
}

// Labels as key value pairs.
func (o LookupCollectorResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCollectorResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// name of resource.
func (o LookupCollectorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.Name }).(pulumi.StringOutput)
}

// Service Account email used to ingest data to this Collector.
func (o LookupCollectorResultOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// State of the Collector.
func (o LookupCollectorResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.State }).(pulumi.StringOutput)
}

// Update time stamp.
func (o LookupCollectorResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Reference to MC Source vsphere_scan.
func (o LookupCollectorResultOutput) VsphereScan() VSphereScanResponseOutput {
	return o.ApplyT(func(v LookupCollectorResult) VSphereScanResponse { return v.VsphereScan }).(VSphereScanResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCollectorResultOutput{})
}
