// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single Annotation.
func LookupAnnotation(ctx *pulumi.Context, args *LookupAnnotationArgs, opts ...pulumi.InvokeOption) (*LookupAnnotationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAnnotationResult
	err := ctx.Invoke("google-native:rapidmigrationassessment/v1:getAnnotation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAnnotationArgs struct {
	AnnotationId string  `pulumi:"annotationId"`
	Location     string  `pulumi:"location"`
	Project      *string `pulumi:"project"`
}

type LookupAnnotationResult struct {
	// Create time stamp.
	CreateTime string `pulumi:"createTime"`
	// Labels as key value pairs.
	Labels map[string]string `pulumi:"labels"`
	// name of resource.
	Name string `pulumi:"name"`
	// Type of an annotation.
	Type string `pulumi:"type"`
	// Update time stamp.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupAnnotationOutput(ctx *pulumi.Context, args LookupAnnotationOutputArgs, opts ...pulumi.InvokeOption) LookupAnnotationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAnnotationResult, error) {
			args := v.(LookupAnnotationArgs)
			r, err := LookupAnnotation(ctx, &args, opts...)
			var s LookupAnnotationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAnnotationResultOutput)
}

type LookupAnnotationOutputArgs struct {
	AnnotationId pulumi.StringInput    `pulumi:"annotationId"`
	Location     pulumi.StringInput    `pulumi:"location"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupAnnotationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAnnotationArgs)(nil)).Elem()
}

type LookupAnnotationResultOutput struct{ *pulumi.OutputState }

func (LookupAnnotationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAnnotationResult)(nil)).Elem()
}

func (o LookupAnnotationResultOutput) ToLookupAnnotationResultOutput() LookupAnnotationResultOutput {
	return o
}

func (o LookupAnnotationResultOutput) ToLookupAnnotationResultOutputWithContext(ctx context.Context) LookupAnnotationResultOutput {
	return o
}

// Create time stamp.
func (o LookupAnnotationResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAnnotationResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Labels as key value pairs.
func (o LookupAnnotationResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAnnotationResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// name of resource.
func (o LookupAnnotationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAnnotationResult) string { return v.Name }).(pulumi.StringOutput)
}

// Type of an annotation.
func (o LookupAnnotationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAnnotationResult) string { return v.Type }).(pulumi.StringOutput)
}

// Update time stamp.
func (o LookupAnnotationResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAnnotationResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAnnotationResultOutput{})
}
