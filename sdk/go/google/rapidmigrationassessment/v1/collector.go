// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Create a Collector to manage the on-prem appliance which collects information about Customer assets.
type Collector struct {
	pulumi.CustomResourceState

	// Store cloud storage bucket name (which is a guid) created with this Collector.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Client version.
	ClientVersion pulumi.StringOutput `pulumi:"clientVersion"`
	// How many days to collect data.
	CollectionDays pulumi.IntOutput `pulumi:"collectionDays"`
	// Required. Id of the requesting object.
	CollectorId pulumi.StringOutput `pulumi:"collectorId"`
	// Create time stamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User specified description of the Collector.
	Description pulumi.StringOutput `pulumi:"description"`
	// User specified name of the Collector.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Uri for EULA (End User License Agreement) from customer.
	EulaUri pulumi.StringOutput `pulumi:"eulaUri"`
	// User specified expected asset count.
	ExpectedAssetCount pulumi.StringOutput `pulumi:"expectedAssetCount"`
	// Reference to MC Source Guest Os Scan.
	GuestOsScan GuestOsScanResponseOutput `pulumi:"guestOsScan"`
	// Labels as key value pairs.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// name of resource.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Service Account email used to ingest data to this Collector.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// State of the Collector.
	State pulumi.StringOutput `pulumi:"state"`
	// Update time stamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Reference to MC Source vsphere_scan.
	VsphereScan VSphereScanResponseOutput `pulumi:"vsphereScan"`
}

// NewCollector registers a new resource with the given unique name, arguments, and options.
func NewCollector(ctx *pulumi.Context,
	name string, args *CollectorArgs, opts ...pulumi.ResourceOption) (*Collector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"collectorId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Collector
	err := ctx.RegisterResource("google-native:rapidmigrationassessment/v1:Collector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCollector gets an existing Collector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCollector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CollectorState, opts ...pulumi.ResourceOption) (*Collector, error) {
	var resource Collector
	err := ctx.ReadResource("google-native:rapidmigrationassessment/v1:Collector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Collector resources.
type collectorState struct {
}

type CollectorState struct {
}

func (CollectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*collectorState)(nil)).Elem()
}

type collectorArgs struct {
	// How many days to collect data.
	CollectionDays *int `pulumi:"collectionDays"`
	// Required. Id of the requesting object.
	CollectorId string `pulumi:"collectorId"`
	// User specified description of the Collector.
	Description *string `pulumi:"description"`
	// User specified name of the Collector.
	DisplayName *string `pulumi:"displayName"`
	// Uri for EULA (End User License Agreement) from customer.
	EulaUri *string `pulumi:"eulaUri"`
	// User specified expected asset count.
	ExpectedAssetCount *string `pulumi:"expectedAssetCount"`
	// Labels as key value pairs.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// name of resource.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests.
	RequestId *string `pulumi:"requestId"`
	// Service Account email used to ingest data to this Collector.
	ServiceAccount *string `pulumi:"serviceAccount"`
}

// The set of arguments for constructing a Collector resource.
type CollectorArgs struct {
	// How many days to collect data.
	CollectionDays pulumi.IntPtrInput
	// Required. Id of the requesting object.
	CollectorId pulumi.StringInput
	// User specified description of the Collector.
	Description pulumi.StringPtrInput
	// User specified name of the Collector.
	DisplayName pulumi.StringPtrInput
	// Uri for EULA (End User License Agreement) from customer.
	EulaUri pulumi.StringPtrInput
	// User specified expected asset count.
	ExpectedAssetCount pulumi.StringPtrInput
	// Labels as key value pairs.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// name of resource.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests.
	RequestId pulumi.StringPtrInput
	// Service Account email used to ingest data to this Collector.
	ServiceAccount pulumi.StringPtrInput
}

func (CollectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*collectorArgs)(nil)).Elem()
}

type CollectorInput interface {
	pulumi.Input

	ToCollectorOutput() CollectorOutput
	ToCollectorOutputWithContext(ctx context.Context) CollectorOutput
}

func (*Collector) ElementType() reflect.Type {
	return reflect.TypeOf((**Collector)(nil)).Elem()
}

func (i *Collector) ToCollectorOutput() CollectorOutput {
	return i.ToCollectorOutputWithContext(context.Background())
}

func (i *Collector) ToCollectorOutputWithContext(ctx context.Context) CollectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorOutput)
}

func (i *Collector) ToOutput(ctx context.Context) pulumix.Output[*Collector] {
	return pulumix.Output[*Collector]{
		OutputState: i.ToCollectorOutputWithContext(ctx).OutputState,
	}
}

type CollectorOutput struct{ *pulumi.OutputState }

func (CollectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Collector)(nil)).Elem()
}

func (o CollectorOutput) ToCollectorOutput() CollectorOutput {
	return o
}

func (o CollectorOutput) ToCollectorOutputWithContext(ctx context.Context) CollectorOutput {
	return o
}

func (o CollectorOutput) ToOutput(ctx context.Context) pulumix.Output[*Collector] {
	return pulumix.Output[*Collector]{
		OutputState: o.OutputState,
	}
}

// Store cloud storage bucket name (which is a guid) created with this Collector.
func (o CollectorOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Client version.
func (o CollectorOutput) ClientVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.ClientVersion }).(pulumi.StringOutput)
}

// How many days to collect data.
func (o CollectorOutput) CollectionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *Collector) pulumi.IntOutput { return v.CollectionDays }).(pulumi.IntOutput)
}

// Required. Id of the requesting object.
func (o CollectorOutput) CollectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.CollectorId }).(pulumi.StringOutput)
}

// Create time stamp.
func (o CollectorOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User specified description of the Collector.
func (o CollectorOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// User specified name of the Collector.
func (o CollectorOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Uri for EULA (End User License Agreement) from customer.
func (o CollectorOutput) EulaUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.EulaUri }).(pulumi.StringOutput)
}

// User specified expected asset count.
func (o CollectorOutput) ExpectedAssetCount() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.ExpectedAssetCount }).(pulumi.StringOutput)
}

// Reference to MC Source Guest Os Scan.
func (o CollectorOutput) GuestOsScan() GuestOsScanResponseOutput {
	return o.ApplyT(func(v *Collector) GuestOsScanResponseOutput { return v.GuestOsScan }).(GuestOsScanResponseOutput)
}

// Labels as key value pairs.
func (o CollectorOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o CollectorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// name of resource.
func (o CollectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CollectorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests.
func (o CollectorOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Service Account email used to ingest data to this Collector.
func (o CollectorOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// State of the Collector.
func (o CollectorOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Update time stamp.
func (o CollectorOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Reference to MC Source vsphere_scan.
func (o CollectorOutput) VsphereScan() VSphereScanResponseOutput {
	return o.ApplyT(func(v *Collector) VSphereScanResponseOutput { return v.VsphereScan }).(VSphereScanResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorInput)(nil)).Elem(), &Collector{})
	pulumi.RegisterOutputType(CollectorOutput{})
}
