// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Dynamic group metadata like queries and status.
type DynamicGroupMetadata struct {
	// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
	Queries []DynamicGroupQuery `pulumi:"queries"`
}

// DynamicGroupMetadataInput is an input type that accepts DynamicGroupMetadataArgs and DynamicGroupMetadataOutput values.
// You can construct a concrete instance of `DynamicGroupMetadataInput` via:
//
//          DynamicGroupMetadataArgs{...}
type DynamicGroupMetadataInput interface {
	pulumi.Input

	ToDynamicGroupMetadataOutput() DynamicGroupMetadataOutput
	ToDynamicGroupMetadataOutputWithContext(context.Context) DynamicGroupMetadataOutput
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataArgs struct {
	// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
	Queries DynamicGroupQueryArrayInput `pulumi:"queries"`
}

func (DynamicGroupMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupMetadata)(nil)).Elem()
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataOutput() DynamicGroupMetadataOutput {
	return i.ToDynamicGroupMetadataOutputWithContext(context.Background())
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataOutputWithContext(ctx context.Context) DynamicGroupMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataOutput)
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return i.ToDynamicGroupMetadataPtrOutputWithContext(context.Background())
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataOutput).ToDynamicGroupMetadataPtrOutputWithContext(ctx)
}

// DynamicGroupMetadataPtrInput is an input type that accepts DynamicGroupMetadataArgs, DynamicGroupMetadataPtr and DynamicGroupMetadataPtrOutput values.
// You can construct a concrete instance of `DynamicGroupMetadataPtrInput` via:
//
//          DynamicGroupMetadataArgs{...}
//
//  or:
//
//          nil
type DynamicGroupMetadataPtrInput interface {
	pulumi.Input

	ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput
	ToDynamicGroupMetadataPtrOutputWithContext(context.Context) DynamicGroupMetadataPtrOutput
}

type dynamicGroupMetadataPtrType DynamicGroupMetadataArgs

func DynamicGroupMetadataPtr(v *DynamicGroupMetadataArgs) DynamicGroupMetadataPtrInput {
	return (*dynamicGroupMetadataPtrType)(v)
}

func (*dynamicGroupMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupMetadata)(nil)).Elem()
}

func (i *dynamicGroupMetadataPtrType) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return i.ToDynamicGroupMetadataPtrOutputWithContext(context.Background())
}

func (i *dynamicGroupMetadataPtrType) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataPtrOutput)
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataOutput struct{ *pulumi.OutputState }

func (DynamicGroupMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupMetadata)(nil)).Elem()
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataOutput() DynamicGroupMetadataOutput {
	return o
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataOutputWithContext(ctx context.Context) DynamicGroupMetadataOutput {
	return o
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return o.ToDynamicGroupMetadataPtrOutputWithContext(context.Background())
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return o.ApplyT(func(v DynamicGroupMetadata) *DynamicGroupMetadata {
		return &v
	}).(DynamicGroupMetadataPtrOutput)
}

// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
func (o DynamicGroupMetadataOutput) Queries() DynamicGroupQueryArrayOutput {
	return o.ApplyT(func(v DynamicGroupMetadata) []DynamicGroupQuery { return v.Queries }).(DynamicGroupQueryArrayOutput)
}

type DynamicGroupMetadataPtrOutput struct{ *pulumi.OutputState }

func (DynamicGroupMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupMetadata)(nil)).Elem()
}

func (o DynamicGroupMetadataPtrOutput) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return o
}

func (o DynamicGroupMetadataPtrOutput) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return o
}

func (o DynamicGroupMetadataPtrOutput) Elem() DynamicGroupMetadataOutput {
	return o.ApplyT(func(v *DynamicGroupMetadata) DynamicGroupMetadata { return *v }).(DynamicGroupMetadataOutput)
}

// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
func (o DynamicGroupMetadataPtrOutput) Queries() DynamicGroupQueryArrayOutput {
	return o.ApplyT(func(v *DynamicGroupMetadata) []DynamicGroupQuery {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(DynamicGroupQueryArrayOutput)
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataResponse struct {
	// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
	Queries []DynamicGroupQueryResponse `pulumi:"queries"`
	// Status of the dynamic group.
	Status DynamicGroupStatusResponse `pulumi:"status"`
}

// DynamicGroupMetadataResponseInput is an input type that accepts DynamicGroupMetadataResponseArgs and DynamicGroupMetadataResponseOutput values.
// You can construct a concrete instance of `DynamicGroupMetadataResponseInput` via:
//
//          DynamicGroupMetadataResponseArgs{...}
type DynamicGroupMetadataResponseInput interface {
	pulumi.Input

	ToDynamicGroupMetadataResponseOutput() DynamicGroupMetadataResponseOutput
	ToDynamicGroupMetadataResponseOutputWithContext(context.Context) DynamicGroupMetadataResponseOutput
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataResponseArgs struct {
	// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
	Queries DynamicGroupQueryResponseArrayInput `pulumi:"queries"`
	// Status of the dynamic group.
	Status DynamicGroupStatusResponseInput `pulumi:"status"`
}

func (DynamicGroupMetadataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupMetadataResponse)(nil)).Elem()
}

func (i DynamicGroupMetadataResponseArgs) ToDynamicGroupMetadataResponseOutput() DynamicGroupMetadataResponseOutput {
	return i.ToDynamicGroupMetadataResponseOutputWithContext(context.Background())
}

func (i DynamicGroupMetadataResponseArgs) ToDynamicGroupMetadataResponseOutputWithContext(ctx context.Context) DynamicGroupMetadataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataResponseOutput)
}

func (i DynamicGroupMetadataResponseArgs) ToDynamicGroupMetadataResponsePtrOutput() DynamicGroupMetadataResponsePtrOutput {
	return i.ToDynamicGroupMetadataResponsePtrOutputWithContext(context.Background())
}

func (i DynamicGroupMetadataResponseArgs) ToDynamicGroupMetadataResponsePtrOutputWithContext(ctx context.Context) DynamicGroupMetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataResponseOutput).ToDynamicGroupMetadataResponsePtrOutputWithContext(ctx)
}

// DynamicGroupMetadataResponsePtrInput is an input type that accepts DynamicGroupMetadataResponseArgs, DynamicGroupMetadataResponsePtr and DynamicGroupMetadataResponsePtrOutput values.
// You can construct a concrete instance of `DynamicGroupMetadataResponsePtrInput` via:
//
//          DynamicGroupMetadataResponseArgs{...}
//
//  or:
//
//          nil
type DynamicGroupMetadataResponsePtrInput interface {
	pulumi.Input

	ToDynamicGroupMetadataResponsePtrOutput() DynamicGroupMetadataResponsePtrOutput
	ToDynamicGroupMetadataResponsePtrOutputWithContext(context.Context) DynamicGroupMetadataResponsePtrOutput
}

type dynamicGroupMetadataResponsePtrType DynamicGroupMetadataResponseArgs

func DynamicGroupMetadataResponsePtr(v *DynamicGroupMetadataResponseArgs) DynamicGroupMetadataResponsePtrInput {
	return (*dynamicGroupMetadataResponsePtrType)(v)
}

func (*dynamicGroupMetadataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupMetadataResponse)(nil)).Elem()
}

func (i *dynamicGroupMetadataResponsePtrType) ToDynamicGroupMetadataResponsePtrOutput() DynamicGroupMetadataResponsePtrOutput {
	return i.ToDynamicGroupMetadataResponsePtrOutputWithContext(context.Background())
}

func (i *dynamicGroupMetadataResponsePtrType) ToDynamicGroupMetadataResponsePtrOutputWithContext(ctx context.Context) DynamicGroupMetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataResponsePtrOutput)
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataResponseOutput struct{ *pulumi.OutputState }

func (DynamicGroupMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupMetadataResponse)(nil)).Elem()
}

func (o DynamicGroupMetadataResponseOutput) ToDynamicGroupMetadataResponseOutput() DynamicGroupMetadataResponseOutput {
	return o
}

func (o DynamicGroupMetadataResponseOutput) ToDynamicGroupMetadataResponseOutputWithContext(ctx context.Context) DynamicGroupMetadataResponseOutput {
	return o
}

func (o DynamicGroupMetadataResponseOutput) ToDynamicGroupMetadataResponsePtrOutput() DynamicGroupMetadataResponsePtrOutput {
	return o.ToDynamicGroupMetadataResponsePtrOutputWithContext(context.Background())
}

func (o DynamicGroupMetadataResponseOutput) ToDynamicGroupMetadataResponsePtrOutputWithContext(ctx context.Context) DynamicGroupMetadataResponsePtrOutput {
	return o.ApplyT(func(v DynamicGroupMetadataResponse) *DynamicGroupMetadataResponse {
		return &v
	}).(DynamicGroupMetadataResponsePtrOutput)
}

// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
func (o DynamicGroupMetadataResponseOutput) Queries() DynamicGroupQueryResponseArrayOutput {
	return o.ApplyT(func(v DynamicGroupMetadataResponse) []DynamicGroupQueryResponse { return v.Queries }).(DynamicGroupQueryResponseArrayOutput)
}

// Status of the dynamic group.
func (o DynamicGroupMetadataResponseOutput) Status() DynamicGroupStatusResponseOutput {
	return o.ApplyT(func(v DynamicGroupMetadataResponse) DynamicGroupStatusResponse { return v.Status }).(DynamicGroupStatusResponseOutput)
}

type DynamicGroupMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (DynamicGroupMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupMetadataResponse)(nil)).Elem()
}

func (o DynamicGroupMetadataResponsePtrOutput) ToDynamicGroupMetadataResponsePtrOutput() DynamicGroupMetadataResponsePtrOutput {
	return o
}

func (o DynamicGroupMetadataResponsePtrOutput) ToDynamicGroupMetadataResponsePtrOutputWithContext(ctx context.Context) DynamicGroupMetadataResponsePtrOutput {
	return o
}

func (o DynamicGroupMetadataResponsePtrOutput) Elem() DynamicGroupMetadataResponseOutput {
	return o.ApplyT(func(v *DynamicGroupMetadataResponse) DynamicGroupMetadataResponse { return *v }).(DynamicGroupMetadataResponseOutput)
}

// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
func (o DynamicGroupMetadataResponsePtrOutput) Queries() DynamicGroupQueryResponseArrayOutput {
	return o.ApplyT(func(v *DynamicGroupMetadataResponse) []DynamicGroupQueryResponse {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(DynamicGroupQueryResponseArrayOutput)
}

// Status of the dynamic group.
func (o DynamicGroupMetadataResponsePtrOutput) Status() DynamicGroupStatusResponsePtrOutput {
	return o.ApplyT(func(v *DynamicGroupMetadataResponse) *DynamicGroupStatusResponse {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(DynamicGroupStatusResponsePtrOutput)
}

// Defines a query on a resource.
type DynamicGroupQuery struct {
	// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
	Query *string `pulumi:"query"`
	// Resource type for the Dynamic Group Query
	ResourceType *DynamicGroupQueryResourceType `pulumi:"resourceType"`
}

// DynamicGroupQueryInput is an input type that accepts DynamicGroupQueryArgs and DynamicGroupQueryOutput values.
// You can construct a concrete instance of `DynamicGroupQueryInput` via:
//
//          DynamicGroupQueryArgs{...}
type DynamicGroupQueryInput interface {
	pulumi.Input

	ToDynamicGroupQueryOutput() DynamicGroupQueryOutput
	ToDynamicGroupQueryOutputWithContext(context.Context) DynamicGroupQueryOutput
}

// Defines a query on a resource.
type DynamicGroupQueryArgs struct {
	// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Resource type for the Dynamic Group Query
	ResourceType DynamicGroupQueryResourceTypePtrInput `pulumi:"resourceType"`
}

func (DynamicGroupQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupQuery)(nil)).Elem()
}

func (i DynamicGroupQueryArgs) ToDynamicGroupQueryOutput() DynamicGroupQueryOutput {
	return i.ToDynamicGroupQueryOutputWithContext(context.Background())
}

func (i DynamicGroupQueryArgs) ToDynamicGroupQueryOutputWithContext(ctx context.Context) DynamicGroupQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupQueryOutput)
}

// DynamicGroupQueryArrayInput is an input type that accepts DynamicGroupQueryArray and DynamicGroupQueryArrayOutput values.
// You can construct a concrete instance of `DynamicGroupQueryArrayInput` via:
//
//          DynamicGroupQueryArray{ DynamicGroupQueryArgs{...} }
type DynamicGroupQueryArrayInput interface {
	pulumi.Input

	ToDynamicGroupQueryArrayOutput() DynamicGroupQueryArrayOutput
	ToDynamicGroupQueryArrayOutputWithContext(context.Context) DynamicGroupQueryArrayOutput
}

type DynamicGroupQueryArray []DynamicGroupQueryInput

func (DynamicGroupQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicGroupQuery)(nil)).Elem()
}

func (i DynamicGroupQueryArray) ToDynamicGroupQueryArrayOutput() DynamicGroupQueryArrayOutput {
	return i.ToDynamicGroupQueryArrayOutputWithContext(context.Background())
}

func (i DynamicGroupQueryArray) ToDynamicGroupQueryArrayOutputWithContext(ctx context.Context) DynamicGroupQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupQueryArrayOutput)
}

// Defines a query on a resource.
type DynamicGroupQueryOutput struct{ *pulumi.OutputState }

func (DynamicGroupQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupQuery)(nil)).Elem()
}

func (o DynamicGroupQueryOutput) ToDynamicGroupQueryOutput() DynamicGroupQueryOutput {
	return o
}

func (o DynamicGroupQueryOutput) ToDynamicGroupQueryOutputWithContext(ctx context.Context) DynamicGroupQueryOutput {
	return o
}

// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
func (o DynamicGroupQueryOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicGroupQuery) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Resource type for the Dynamic Group Query
func (o DynamicGroupQueryOutput) ResourceType() DynamicGroupQueryResourceTypePtrOutput {
	return o.ApplyT(func(v DynamicGroupQuery) *DynamicGroupQueryResourceType { return v.ResourceType }).(DynamicGroupQueryResourceTypePtrOutput)
}

type DynamicGroupQueryArrayOutput struct{ *pulumi.OutputState }

func (DynamicGroupQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicGroupQuery)(nil)).Elem()
}

func (o DynamicGroupQueryArrayOutput) ToDynamicGroupQueryArrayOutput() DynamicGroupQueryArrayOutput {
	return o
}

func (o DynamicGroupQueryArrayOutput) ToDynamicGroupQueryArrayOutputWithContext(ctx context.Context) DynamicGroupQueryArrayOutput {
	return o
}

func (o DynamicGroupQueryArrayOutput) Index(i pulumi.IntInput) DynamicGroupQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicGroupQuery {
		return vs[0].([]DynamicGroupQuery)[vs[1].(int)]
	}).(DynamicGroupQueryOutput)
}

// Defines a query on a resource.
type DynamicGroupQueryResponse struct {
	// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
	Query string `pulumi:"query"`
	// Resource type for the Dynamic Group Query
	ResourceType string `pulumi:"resourceType"`
}

// DynamicGroupQueryResponseInput is an input type that accepts DynamicGroupQueryResponseArgs and DynamicGroupQueryResponseOutput values.
// You can construct a concrete instance of `DynamicGroupQueryResponseInput` via:
//
//          DynamicGroupQueryResponseArgs{...}
type DynamicGroupQueryResponseInput interface {
	pulumi.Input

	ToDynamicGroupQueryResponseOutput() DynamicGroupQueryResponseOutput
	ToDynamicGroupQueryResponseOutputWithContext(context.Context) DynamicGroupQueryResponseOutput
}

// Defines a query on a resource.
type DynamicGroupQueryResponseArgs struct {
	// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
	Query pulumi.StringInput `pulumi:"query"`
	// Resource type for the Dynamic Group Query
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
}

func (DynamicGroupQueryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupQueryResponse)(nil)).Elem()
}

func (i DynamicGroupQueryResponseArgs) ToDynamicGroupQueryResponseOutput() DynamicGroupQueryResponseOutput {
	return i.ToDynamicGroupQueryResponseOutputWithContext(context.Background())
}

func (i DynamicGroupQueryResponseArgs) ToDynamicGroupQueryResponseOutputWithContext(ctx context.Context) DynamicGroupQueryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupQueryResponseOutput)
}

// DynamicGroupQueryResponseArrayInput is an input type that accepts DynamicGroupQueryResponseArray and DynamicGroupQueryResponseArrayOutput values.
// You can construct a concrete instance of `DynamicGroupQueryResponseArrayInput` via:
//
//          DynamicGroupQueryResponseArray{ DynamicGroupQueryResponseArgs{...} }
type DynamicGroupQueryResponseArrayInput interface {
	pulumi.Input

	ToDynamicGroupQueryResponseArrayOutput() DynamicGroupQueryResponseArrayOutput
	ToDynamicGroupQueryResponseArrayOutputWithContext(context.Context) DynamicGroupQueryResponseArrayOutput
}

type DynamicGroupQueryResponseArray []DynamicGroupQueryResponseInput

func (DynamicGroupQueryResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicGroupQueryResponse)(nil)).Elem()
}

func (i DynamicGroupQueryResponseArray) ToDynamicGroupQueryResponseArrayOutput() DynamicGroupQueryResponseArrayOutput {
	return i.ToDynamicGroupQueryResponseArrayOutputWithContext(context.Background())
}

func (i DynamicGroupQueryResponseArray) ToDynamicGroupQueryResponseArrayOutputWithContext(ctx context.Context) DynamicGroupQueryResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupQueryResponseArrayOutput)
}

// Defines a query on a resource.
type DynamicGroupQueryResponseOutput struct{ *pulumi.OutputState }

func (DynamicGroupQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupQueryResponse)(nil)).Elem()
}

func (o DynamicGroupQueryResponseOutput) ToDynamicGroupQueryResponseOutput() DynamicGroupQueryResponseOutput {
	return o
}

func (o DynamicGroupQueryResponseOutput) ToDynamicGroupQueryResponseOutputWithContext(ctx context.Context) DynamicGroupQueryResponseOutput {
	return o
}

// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')`
func (o DynamicGroupQueryResponseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicGroupQueryResponse) string { return v.Query }).(pulumi.StringOutput)
}

// Resource type for the Dynamic Group Query
func (o DynamicGroupQueryResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicGroupQueryResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

type DynamicGroupQueryResponseArrayOutput struct{ *pulumi.OutputState }

func (DynamicGroupQueryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicGroupQueryResponse)(nil)).Elem()
}

func (o DynamicGroupQueryResponseArrayOutput) ToDynamicGroupQueryResponseArrayOutput() DynamicGroupQueryResponseArrayOutput {
	return o
}

func (o DynamicGroupQueryResponseArrayOutput) ToDynamicGroupQueryResponseArrayOutputWithContext(ctx context.Context) DynamicGroupQueryResponseArrayOutput {
	return o
}

func (o DynamicGroupQueryResponseArrayOutput) Index(i pulumi.IntInput) DynamicGroupQueryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicGroupQueryResponse {
		return vs[0].([]DynamicGroupQueryResponse)[vs[1].(int)]
	}).(DynamicGroupQueryResponseOutput)
}

// The current status of a dynamic group along with timestamp.
type DynamicGroupStatusResponse struct {
	// Status of the dynamic group.
	Status string `pulumi:"status"`
	// The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
	StatusTime string `pulumi:"statusTime"`
}

// DynamicGroupStatusResponseInput is an input type that accepts DynamicGroupStatusResponseArgs and DynamicGroupStatusResponseOutput values.
// You can construct a concrete instance of `DynamicGroupStatusResponseInput` via:
//
//          DynamicGroupStatusResponseArgs{...}
type DynamicGroupStatusResponseInput interface {
	pulumi.Input

	ToDynamicGroupStatusResponseOutput() DynamicGroupStatusResponseOutput
	ToDynamicGroupStatusResponseOutputWithContext(context.Context) DynamicGroupStatusResponseOutput
}

// The current status of a dynamic group along with timestamp.
type DynamicGroupStatusResponseArgs struct {
	// Status of the dynamic group.
	Status pulumi.StringInput `pulumi:"status"`
	// The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
	StatusTime pulumi.StringInput `pulumi:"statusTime"`
}

func (DynamicGroupStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupStatusResponse)(nil)).Elem()
}

func (i DynamicGroupStatusResponseArgs) ToDynamicGroupStatusResponseOutput() DynamicGroupStatusResponseOutput {
	return i.ToDynamicGroupStatusResponseOutputWithContext(context.Background())
}

func (i DynamicGroupStatusResponseArgs) ToDynamicGroupStatusResponseOutputWithContext(ctx context.Context) DynamicGroupStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupStatusResponseOutput)
}

func (i DynamicGroupStatusResponseArgs) ToDynamicGroupStatusResponsePtrOutput() DynamicGroupStatusResponsePtrOutput {
	return i.ToDynamicGroupStatusResponsePtrOutputWithContext(context.Background())
}

func (i DynamicGroupStatusResponseArgs) ToDynamicGroupStatusResponsePtrOutputWithContext(ctx context.Context) DynamicGroupStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupStatusResponseOutput).ToDynamicGroupStatusResponsePtrOutputWithContext(ctx)
}

// DynamicGroupStatusResponsePtrInput is an input type that accepts DynamicGroupStatusResponseArgs, DynamicGroupStatusResponsePtr and DynamicGroupStatusResponsePtrOutput values.
// You can construct a concrete instance of `DynamicGroupStatusResponsePtrInput` via:
//
//          DynamicGroupStatusResponseArgs{...}
//
//  or:
//
//          nil
type DynamicGroupStatusResponsePtrInput interface {
	pulumi.Input

	ToDynamicGroupStatusResponsePtrOutput() DynamicGroupStatusResponsePtrOutput
	ToDynamicGroupStatusResponsePtrOutputWithContext(context.Context) DynamicGroupStatusResponsePtrOutput
}

type dynamicGroupStatusResponsePtrType DynamicGroupStatusResponseArgs

func DynamicGroupStatusResponsePtr(v *DynamicGroupStatusResponseArgs) DynamicGroupStatusResponsePtrInput {
	return (*dynamicGroupStatusResponsePtrType)(v)
}

func (*dynamicGroupStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupStatusResponse)(nil)).Elem()
}

func (i *dynamicGroupStatusResponsePtrType) ToDynamicGroupStatusResponsePtrOutput() DynamicGroupStatusResponsePtrOutput {
	return i.ToDynamicGroupStatusResponsePtrOutputWithContext(context.Background())
}

func (i *dynamicGroupStatusResponsePtrType) ToDynamicGroupStatusResponsePtrOutputWithContext(ctx context.Context) DynamicGroupStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupStatusResponsePtrOutput)
}

// The current status of a dynamic group along with timestamp.
type DynamicGroupStatusResponseOutput struct{ *pulumi.OutputState }

func (DynamicGroupStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupStatusResponse)(nil)).Elem()
}

func (o DynamicGroupStatusResponseOutput) ToDynamicGroupStatusResponseOutput() DynamicGroupStatusResponseOutput {
	return o
}

func (o DynamicGroupStatusResponseOutput) ToDynamicGroupStatusResponseOutputWithContext(ctx context.Context) DynamicGroupStatusResponseOutput {
	return o
}

func (o DynamicGroupStatusResponseOutput) ToDynamicGroupStatusResponsePtrOutput() DynamicGroupStatusResponsePtrOutput {
	return o.ToDynamicGroupStatusResponsePtrOutputWithContext(context.Background())
}

func (o DynamicGroupStatusResponseOutput) ToDynamicGroupStatusResponsePtrOutputWithContext(ctx context.Context) DynamicGroupStatusResponsePtrOutput {
	return o.ApplyT(func(v DynamicGroupStatusResponse) *DynamicGroupStatusResponse {
		return &v
	}).(DynamicGroupStatusResponsePtrOutput)
}

// Status of the dynamic group.
func (o DynamicGroupStatusResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicGroupStatusResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
func (o DynamicGroupStatusResponseOutput) StatusTime() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicGroupStatusResponse) string { return v.StatusTime }).(pulumi.StringOutput)
}

type DynamicGroupStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (DynamicGroupStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupStatusResponse)(nil)).Elem()
}

func (o DynamicGroupStatusResponsePtrOutput) ToDynamicGroupStatusResponsePtrOutput() DynamicGroupStatusResponsePtrOutput {
	return o
}

func (o DynamicGroupStatusResponsePtrOutput) ToDynamicGroupStatusResponsePtrOutputWithContext(ctx context.Context) DynamicGroupStatusResponsePtrOutput {
	return o
}

func (o DynamicGroupStatusResponsePtrOutput) Elem() DynamicGroupStatusResponseOutput {
	return o.ApplyT(func(v *DynamicGroupStatusResponse) DynamicGroupStatusResponse { return *v }).(DynamicGroupStatusResponseOutput)
}

// Status of the dynamic group.
func (o DynamicGroupStatusResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicGroupStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
func (o DynamicGroupStatusResponsePtrOutput) StatusTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicGroupStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StatusTime
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKey struct {
	// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
	Id *string `pulumi:"id"`
	// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.
	Namespace *string `pulumi:"namespace"`
}

// EntityKeyInput is an input type that accepts EntityKeyArgs and EntityKeyOutput values.
// You can construct a concrete instance of `EntityKeyInput` via:
//
//          EntityKeyArgs{...}
type EntityKeyInput interface {
	pulumi.Input

	ToEntityKeyOutput() EntityKeyOutput
	ToEntityKeyOutputWithContext(context.Context) EntityKeyOutput
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyArgs struct {
	// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (EntityKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKey)(nil)).Elem()
}

func (i EntityKeyArgs) ToEntityKeyOutput() EntityKeyOutput {
	return i.ToEntityKeyOutputWithContext(context.Background())
}

func (i EntityKeyArgs) ToEntityKeyOutputWithContext(ctx context.Context) EntityKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKeyOutput)
}

func (i EntityKeyArgs) ToEntityKeyPtrOutput() EntityKeyPtrOutput {
	return i.ToEntityKeyPtrOutputWithContext(context.Background())
}

func (i EntityKeyArgs) ToEntityKeyPtrOutputWithContext(ctx context.Context) EntityKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKeyOutput).ToEntityKeyPtrOutputWithContext(ctx)
}

// EntityKeyPtrInput is an input type that accepts EntityKeyArgs, EntityKeyPtr and EntityKeyPtrOutput values.
// You can construct a concrete instance of `EntityKeyPtrInput` via:
//
//          EntityKeyArgs{...}
//
//  or:
//
//          nil
type EntityKeyPtrInput interface {
	pulumi.Input

	ToEntityKeyPtrOutput() EntityKeyPtrOutput
	ToEntityKeyPtrOutputWithContext(context.Context) EntityKeyPtrOutput
}

type entityKeyPtrType EntityKeyArgs

func EntityKeyPtr(v *EntityKeyArgs) EntityKeyPtrInput {
	return (*entityKeyPtrType)(v)
}

func (*entityKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityKey)(nil)).Elem()
}

func (i *entityKeyPtrType) ToEntityKeyPtrOutput() EntityKeyPtrOutput {
	return i.ToEntityKeyPtrOutputWithContext(context.Background())
}

func (i *entityKeyPtrType) ToEntityKeyPtrOutputWithContext(ctx context.Context) EntityKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKeyPtrOutput)
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyOutput struct{ *pulumi.OutputState }

func (EntityKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKey)(nil)).Elem()
}

func (o EntityKeyOutput) ToEntityKeyOutput() EntityKeyOutput {
	return o
}

func (o EntityKeyOutput) ToEntityKeyOutputWithContext(ctx context.Context) EntityKeyOutput {
	return o
}

func (o EntityKeyOutput) ToEntityKeyPtrOutput() EntityKeyPtrOutput {
	return o.ToEntityKeyPtrOutputWithContext(context.Background())
}

func (o EntityKeyOutput) ToEntityKeyPtrOutputWithContext(ctx context.Context) EntityKeyPtrOutput {
	return o.ApplyT(func(v EntityKey) *EntityKey {
		return &v
	}).(EntityKeyPtrOutput)
}

// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
func (o EntityKeyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityKey) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.
func (o EntityKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type EntityKeyPtrOutput struct{ *pulumi.OutputState }

func (EntityKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityKey)(nil)).Elem()
}

func (o EntityKeyPtrOutput) ToEntityKeyPtrOutput() EntityKeyPtrOutput {
	return o
}

func (o EntityKeyPtrOutput) ToEntityKeyPtrOutputWithContext(ctx context.Context) EntityKeyPtrOutput {
	return o
}

func (o EntityKeyPtrOutput) Elem() EntityKeyOutput {
	return o.ApplyT(func(v *EntityKey) EntityKey { return *v }).(EntityKeyOutput)
}

// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
func (o EntityKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityKey) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.
func (o EntityKeyPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityKey) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyResponse struct {
	// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.
	Namespace string `pulumi:"namespace"`
}

// EntityKeyResponseInput is an input type that accepts EntityKeyResponseArgs and EntityKeyResponseOutput values.
// You can construct a concrete instance of `EntityKeyResponseInput` via:
//
//          EntityKeyResponseArgs{...}
type EntityKeyResponseInput interface {
	pulumi.Input

	ToEntityKeyResponseOutput() EntityKeyResponseOutput
	ToEntityKeyResponseOutputWithContext(context.Context) EntityKeyResponseOutput
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyResponseArgs struct {
	// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (EntityKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKeyResponse)(nil)).Elem()
}

func (i EntityKeyResponseArgs) ToEntityKeyResponseOutput() EntityKeyResponseOutput {
	return i.ToEntityKeyResponseOutputWithContext(context.Background())
}

func (i EntityKeyResponseArgs) ToEntityKeyResponseOutputWithContext(ctx context.Context) EntityKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKeyResponseOutput)
}

func (i EntityKeyResponseArgs) ToEntityKeyResponsePtrOutput() EntityKeyResponsePtrOutput {
	return i.ToEntityKeyResponsePtrOutputWithContext(context.Background())
}

func (i EntityKeyResponseArgs) ToEntityKeyResponsePtrOutputWithContext(ctx context.Context) EntityKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKeyResponseOutput).ToEntityKeyResponsePtrOutputWithContext(ctx)
}

// EntityKeyResponsePtrInput is an input type that accepts EntityKeyResponseArgs, EntityKeyResponsePtr and EntityKeyResponsePtrOutput values.
// You can construct a concrete instance of `EntityKeyResponsePtrInput` via:
//
//          EntityKeyResponseArgs{...}
//
//  or:
//
//          nil
type EntityKeyResponsePtrInput interface {
	pulumi.Input

	ToEntityKeyResponsePtrOutput() EntityKeyResponsePtrOutput
	ToEntityKeyResponsePtrOutputWithContext(context.Context) EntityKeyResponsePtrOutput
}

type entityKeyResponsePtrType EntityKeyResponseArgs

func EntityKeyResponsePtr(v *EntityKeyResponseArgs) EntityKeyResponsePtrInput {
	return (*entityKeyResponsePtrType)(v)
}

func (*entityKeyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityKeyResponse)(nil)).Elem()
}

func (i *entityKeyResponsePtrType) ToEntityKeyResponsePtrOutput() EntityKeyResponsePtrOutput {
	return i.ToEntityKeyResponsePtrOutputWithContext(context.Background())
}

func (i *entityKeyResponsePtrType) ToEntityKeyResponsePtrOutputWithContext(ctx context.Context) EntityKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKeyResponsePtrOutput)
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyResponseOutput struct{ *pulumi.OutputState }

func (EntityKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKeyResponse)(nil)).Elem()
}

func (o EntityKeyResponseOutput) ToEntityKeyResponseOutput() EntityKeyResponseOutput {
	return o
}

func (o EntityKeyResponseOutput) ToEntityKeyResponseOutputWithContext(ctx context.Context) EntityKeyResponseOutput {
	return o
}

func (o EntityKeyResponseOutput) ToEntityKeyResponsePtrOutput() EntityKeyResponsePtrOutput {
	return o.ToEntityKeyResponsePtrOutputWithContext(context.Background())
}

func (o EntityKeyResponseOutput) ToEntityKeyResponsePtrOutputWithContext(ctx context.Context) EntityKeyResponsePtrOutput {
	return o.ApplyT(func(v EntityKeyResponse) *EntityKeyResponse {
		return &v
	}).(EntityKeyResponsePtrOutput)
}

// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.
func (o EntityKeyResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v EntityKeyResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

type EntityKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (EntityKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityKeyResponse)(nil)).Elem()
}

func (o EntityKeyResponsePtrOutput) ToEntityKeyResponsePtrOutput() EntityKeyResponsePtrOutput {
	return o
}

func (o EntityKeyResponsePtrOutput) ToEntityKeyResponsePtrOutputWithContext(ctx context.Context) EntityKeyResponsePtrOutput {
	return o
}

func (o EntityKeyResponsePtrOutput) Elem() EntityKeyResponseOutput {
	return o.ApplyT(func(v *EntityKeyResponse) EntityKeyResponse { return *v }).(EntityKeyResponseOutput)
}

// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.
func (o EntityKeyResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityKeyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The `MembershipRole` expiry details.
type ExpiryDetail struct {
	// The time at which the `MembershipRole` will expire.
	ExpireTime *string `pulumi:"expireTime"`
}

// ExpiryDetailInput is an input type that accepts ExpiryDetailArgs and ExpiryDetailOutput values.
// You can construct a concrete instance of `ExpiryDetailInput` via:
//
//          ExpiryDetailArgs{...}
type ExpiryDetailInput interface {
	pulumi.Input

	ToExpiryDetailOutput() ExpiryDetailOutput
	ToExpiryDetailOutputWithContext(context.Context) ExpiryDetailOutput
}

// The `MembershipRole` expiry details.
type ExpiryDetailArgs struct {
	// The time at which the `MembershipRole` will expire.
	ExpireTime pulumi.StringPtrInput `pulumi:"expireTime"`
}

func (ExpiryDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpiryDetail)(nil)).Elem()
}

func (i ExpiryDetailArgs) ToExpiryDetailOutput() ExpiryDetailOutput {
	return i.ToExpiryDetailOutputWithContext(context.Background())
}

func (i ExpiryDetailArgs) ToExpiryDetailOutputWithContext(ctx context.Context) ExpiryDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpiryDetailOutput)
}

func (i ExpiryDetailArgs) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return i.ToExpiryDetailPtrOutputWithContext(context.Background())
}

func (i ExpiryDetailArgs) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpiryDetailOutput).ToExpiryDetailPtrOutputWithContext(ctx)
}

// ExpiryDetailPtrInput is an input type that accepts ExpiryDetailArgs, ExpiryDetailPtr and ExpiryDetailPtrOutput values.
// You can construct a concrete instance of `ExpiryDetailPtrInput` via:
//
//          ExpiryDetailArgs{...}
//
//  or:
//
//          nil
type ExpiryDetailPtrInput interface {
	pulumi.Input

	ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput
	ToExpiryDetailPtrOutputWithContext(context.Context) ExpiryDetailPtrOutput
}

type expiryDetailPtrType ExpiryDetailArgs

func ExpiryDetailPtr(v *ExpiryDetailArgs) ExpiryDetailPtrInput {
	return (*expiryDetailPtrType)(v)
}

func (*expiryDetailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpiryDetail)(nil)).Elem()
}

func (i *expiryDetailPtrType) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return i.ToExpiryDetailPtrOutputWithContext(context.Background())
}

func (i *expiryDetailPtrType) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpiryDetailPtrOutput)
}

// The `MembershipRole` expiry details.
type ExpiryDetailOutput struct{ *pulumi.OutputState }

func (ExpiryDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpiryDetail)(nil)).Elem()
}

func (o ExpiryDetailOutput) ToExpiryDetailOutput() ExpiryDetailOutput {
	return o
}

func (o ExpiryDetailOutput) ToExpiryDetailOutputWithContext(ctx context.Context) ExpiryDetailOutput {
	return o
}

func (o ExpiryDetailOutput) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return o.ToExpiryDetailPtrOutputWithContext(context.Background())
}

func (o ExpiryDetailOutput) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return o.ApplyT(func(v ExpiryDetail) *ExpiryDetail {
		return &v
	}).(ExpiryDetailPtrOutput)
}

// The time at which the `MembershipRole` will expire.
func (o ExpiryDetailOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpiryDetail) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

type ExpiryDetailPtrOutput struct{ *pulumi.OutputState }

func (ExpiryDetailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpiryDetail)(nil)).Elem()
}

func (o ExpiryDetailPtrOutput) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return o
}

func (o ExpiryDetailPtrOutput) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return o
}

func (o ExpiryDetailPtrOutput) Elem() ExpiryDetailOutput {
	return o.ApplyT(func(v *ExpiryDetail) ExpiryDetail { return *v }).(ExpiryDetailOutput)
}

// The time at which the `MembershipRole` will expire.
func (o ExpiryDetailPtrOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpiryDetail) *string {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.StringPtrOutput)
}

// The `MembershipRole` expiry details.
type ExpiryDetailResponse struct {
	// The time at which the `MembershipRole` will expire.
	ExpireTime string `pulumi:"expireTime"`
}

// ExpiryDetailResponseInput is an input type that accepts ExpiryDetailResponseArgs and ExpiryDetailResponseOutput values.
// You can construct a concrete instance of `ExpiryDetailResponseInput` via:
//
//          ExpiryDetailResponseArgs{...}
type ExpiryDetailResponseInput interface {
	pulumi.Input

	ToExpiryDetailResponseOutput() ExpiryDetailResponseOutput
	ToExpiryDetailResponseOutputWithContext(context.Context) ExpiryDetailResponseOutput
}

// The `MembershipRole` expiry details.
type ExpiryDetailResponseArgs struct {
	// The time at which the `MembershipRole` will expire.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
}

func (ExpiryDetailResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpiryDetailResponse)(nil)).Elem()
}

func (i ExpiryDetailResponseArgs) ToExpiryDetailResponseOutput() ExpiryDetailResponseOutput {
	return i.ToExpiryDetailResponseOutputWithContext(context.Background())
}

func (i ExpiryDetailResponseArgs) ToExpiryDetailResponseOutputWithContext(ctx context.Context) ExpiryDetailResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpiryDetailResponseOutput)
}

// The `MembershipRole` expiry details.
type ExpiryDetailResponseOutput struct{ *pulumi.OutputState }

func (ExpiryDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpiryDetailResponse)(nil)).Elem()
}

func (o ExpiryDetailResponseOutput) ToExpiryDetailResponseOutput() ExpiryDetailResponseOutput {
	return o
}

func (o ExpiryDetailResponseOutput) ToExpiryDetailResponseOutputWithContext(ctx context.Context) ExpiryDetailResponseOutput {
	return o
}

// The time at which the `MembershipRole` will expire.
func (o ExpiryDetailResponseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v ExpiryDetailResponse) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Resource representing the Android specific attributes of a Device.
type GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse struct {
	// Whether applications from unknown sources can be installed on device.
	EnabledUnknownSources bool `pulumi:"enabledUnknownSources"`
	// Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
	OwnerProfileAccount bool `pulumi:"ownerProfileAccount"`
	// Ownership privileges on device.
	OwnershipPrivilege string `pulumi:"ownershipPrivilege"`
	// Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
	SupportsWorkProfile bool `pulumi:"supportsWorkProfile"`
}

// GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseInput is an input type that accepts GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs and GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput values.
// You can construct a concrete instance of `GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseInput` via:
//
//          GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs{...}
type GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseInput interface {
	pulumi.Input

	ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput
	ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutputWithContext(context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput
}

// Resource representing the Android specific attributes of a Device.
type GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs struct {
	// Whether applications from unknown sources can be installed on device.
	EnabledUnknownSources pulumi.BoolInput `pulumi:"enabledUnknownSources"`
	// Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
	OwnerProfileAccount pulumi.BoolInput `pulumi:"ownerProfileAccount"`
	// Ownership privileges on device.
	OwnershipPrivilege pulumi.StringInput `pulumi:"ownershipPrivilege"`
	// Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
	SupportsWorkProfile pulumi.BoolInput `pulumi:"supportsWorkProfile"`
}

func (GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse)(nil)).Elem()
}

func (i GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput {
	return i.ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutputWithContext(context.Background())
}

func (i GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput)
}

func (i GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput {
	return i.ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutputWithContext(context.Background())
}

func (i GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput).ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutputWithContext(ctx)
}

// GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrInput is an input type that accepts GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs, GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtr and GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput values.
// You can construct a concrete instance of `GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrInput` via:
//
//          GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs{...}
//
//  or:
//
//          nil
type GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrInput interface {
	pulumi.Input

	ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput
	ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutputWithContext(context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput
}

type googleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrType GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs

func GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtr(v *GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseArgs) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrInput {
	return (*googleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrType)(v)
}

func (*googleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse)(nil)).Elem()
}

func (i *googleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrType) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput {
	return i.ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutputWithContext(context.Background())
}

func (i *googleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrType) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput)
}

// Resource representing the Android specific attributes of a Device.
type GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput struct{ *pulumi.OutputState }

func (GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse)(nil)).Elem()
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput {
	return o
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput {
	return o
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput {
	return o.ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutputWithContext(context.Background())
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) *GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse {
		return &v
	}).(GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput)
}

// Whether applications from unknown sources can be installed on device.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) EnabledUnknownSources() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) bool { return v.EnabledUnknownSources }).(pulumi.BoolOutput)
}

// Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) OwnerProfileAccount() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) bool { return v.OwnerProfileAccount }).(pulumi.BoolOutput)
}

// Ownership privileges on device.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) OwnershipPrivilege() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) string { return v.OwnershipPrivilege }).(pulumi.StringOutput)
}

// Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) SupportsWorkProfile() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) bool { return v.SupportsWorkProfile }).(pulumi.BoolOutput)
}

type GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse)(nil)).Elem()
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput {
	return o
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput {
	return o
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput) Elem() GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput {
	return o.ApplyT(func(v *GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse {
		return *v
	}).(GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput)
}

// Whether applications from unknown sources can be installed on device.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput) EnabledUnknownSources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnabledUnknownSources
	}).(pulumi.BoolPtrOutput)
}

// Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput) OwnerProfileAccount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.OwnerProfileAccount
	}).(pulumi.BoolPtrOutput)
}

// Ownership privileges on device.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput) OwnershipPrivilege() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OwnershipPrivilege
	}).(pulumi.StringPtrOutput)
}

// Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput) SupportsWorkProfile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SupportsWorkProfile
	}).(pulumi.BoolPtrOutput)
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRole struct {
	// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
	ExpiryDetail *ExpiryDetail `pulumi:"expiryDetail"`
	// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
	Name *string `pulumi:"name"`
}

// MembershipRoleInput is an input type that accepts MembershipRoleArgs and MembershipRoleOutput values.
// You can construct a concrete instance of `MembershipRoleInput` via:
//
//          MembershipRoleArgs{...}
type MembershipRoleInput interface {
	pulumi.Input

	ToMembershipRoleOutput() MembershipRoleOutput
	ToMembershipRoleOutputWithContext(context.Context) MembershipRoleOutput
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleArgs struct {
	// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
	ExpiryDetail ExpiryDetailPtrInput `pulumi:"expiryDetail"`
	// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MembershipRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRole)(nil)).Elem()
}

func (i MembershipRoleArgs) ToMembershipRoleOutput() MembershipRoleOutput {
	return i.ToMembershipRoleOutputWithContext(context.Background())
}

func (i MembershipRoleArgs) ToMembershipRoleOutputWithContext(ctx context.Context) MembershipRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleOutput)
}

// MembershipRoleArrayInput is an input type that accepts MembershipRoleArray and MembershipRoleArrayOutput values.
// You can construct a concrete instance of `MembershipRoleArrayInput` via:
//
//          MembershipRoleArray{ MembershipRoleArgs{...} }
type MembershipRoleArrayInput interface {
	pulumi.Input

	ToMembershipRoleArrayOutput() MembershipRoleArrayOutput
	ToMembershipRoleArrayOutputWithContext(context.Context) MembershipRoleArrayOutput
}

type MembershipRoleArray []MembershipRoleInput

func (MembershipRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipRole)(nil)).Elem()
}

func (i MembershipRoleArray) ToMembershipRoleArrayOutput() MembershipRoleArrayOutput {
	return i.ToMembershipRoleArrayOutputWithContext(context.Background())
}

func (i MembershipRoleArray) ToMembershipRoleArrayOutputWithContext(ctx context.Context) MembershipRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleArrayOutput)
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleOutput struct{ *pulumi.OutputState }

func (MembershipRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRole)(nil)).Elem()
}

func (o MembershipRoleOutput) ToMembershipRoleOutput() MembershipRoleOutput {
	return o
}

func (o MembershipRoleOutput) ToMembershipRoleOutputWithContext(ctx context.Context) MembershipRoleOutput {
	return o
}

// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
func (o MembershipRoleOutput) ExpiryDetail() ExpiryDetailPtrOutput {
	return o.ApplyT(func(v MembershipRole) *ExpiryDetail { return v.ExpiryDetail }).(ExpiryDetailPtrOutput)
}

// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
func (o MembershipRoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MembershipRole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MembershipRoleArrayOutput struct{ *pulumi.OutputState }

func (MembershipRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipRole)(nil)).Elem()
}

func (o MembershipRoleArrayOutput) ToMembershipRoleArrayOutput() MembershipRoleArrayOutput {
	return o
}

func (o MembershipRoleArrayOutput) ToMembershipRoleArrayOutputWithContext(ctx context.Context) MembershipRoleArrayOutput {
	return o
}

func (o MembershipRoleArrayOutput) Index(i pulumi.IntInput) MembershipRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MembershipRole {
		return vs[0].([]MembershipRole)[vs[1].(int)]
	}).(MembershipRoleOutput)
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleResponse struct {
	// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
	ExpiryDetail ExpiryDetailResponse `pulumi:"expiryDetail"`
	// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
	Name string `pulumi:"name"`
}

// MembershipRoleResponseInput is an input type that accepts MembershipRoleResponseArgs and MembershipRoleResponseOutput values.
// You can construct a concrete instance of `MembershipRoleResponseInput` via:
//
//          MembershipRoleResponseArgs{...}
type MembershipRoleResponseInput interface {
	pulumi.Input

	ToMembershipRoleResponseOutput() MembershipRoleResponseOutput
	ToMembershipRoleResponseOutputWithContext(context.Context) MembershipRoleResponseOutput
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleResponseArgs struct {
	// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
	ExpiryDetail ExpiryDetailResponseInput `pulumi:"expiryDetail"`
	// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
	Name pulumi.StringInput `pulumi:"name"`
}

func (MembershipRoleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRoleResponse)(nil)).Elem()
}

func (i MembershipRoleResponseArgs) ToMembershipRoleResponseOutput() MembershipRoleResponseOutput {
	return i.ToMembershipRoleResponseOutputWithContext(context.Background())
}

func (i MembershipRoleResponseArgs) ToMembershipRoleResponseOutputWithContext(ctx context.Context) MembershipRoleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleResponseOutput)
}

// MembershipRoleResponseArrayInput is an input type that accepts MembershipRoleResponseArray and MembershipRoleResponseArrayOutput values.
// You can construct a concrete instance of `MembershipRoleResponseArrayInput` via:
//
//          MembershipRoleResponseArray{ MembershipRoleResponseArgs{...} }
type MembershipRoleResponseArrayInput interface {
	pulumi.Input

	ToMembershipRoleResponseArrayOutput() MembershipRoleResponseArrayOutput
	ToMembershipRoleResponseArrayOutputWithContext(context.Context) MembershipRoleResponseArrayOutput
}

type MembershipRoleResponseArray []MembershipRoleResponseInput

func (MembershipRoleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipRoleResponse)(nil)).Elem()
}

func (i MembershipRoleResponseArray) ToMembershipRoleResponseArrayOutput() MembershipRoleResponseArrayOutput {
	return i.ToMembershipRoleResponseArrayOutputWithContext(context.Background())
}

func (i MembershipRoleResponseArray) ToMembershipRoleResponseArrayOutputWithContext(ctx context.Context) MembershipRoleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleResponseArrayOutput)
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleResponseOutput struct{ *pulumi.OutputState }

func (MembershipRoleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRoleResponse)(nil)).Elem()
}

func (o MembershipRoleResponseOutput) ToMembershipRoleResponseOutput() MembershipRoleResponseOutput {
	return o
}

func (o MembershipRoleResponseOutput) ToMembershipRoleResponseOutputWithContext(ctx context.Context) MembershipRoleResponseOutput {
	return o
}

// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
func (o MembershipRoleResponseOutput) ExpiryDetail() ExpiryDetailResponseOutput {
	return o.ApplyT(func(v MembershipRoleResponse) ExpiryDetailResponse { return v.ExpiryDetail }).(ExpiryDetailResponseOutput)
}

// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
func (o MembershipRoleResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MembershipRoleResponse) string { return v.Name }).(pulumi.StringOutput)
}

type MembershipRoleResponseArrayOutput struct{ *pulumi.OutputState }

func (MembershipRoleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipRoleResponse)(nil)).Elem()
}

func (o MembershipRoleResponseArrayOutput) ToMembershipRoleResponseArrayOutput() MembershipRoleResponseArrayOutput {
	return o
}

func (o MembershipRoleResponseArrayOutput) ToMembershipRoleResponseArrayOutputWithContext(ctx context.Context) MembershipRoleResponseArrayOutput {
	return o
}

func (o MembershipRoleResponseArrayOutput) Index(i pulumi.IntInput) MembershipRoleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MembershipRoleResponse {
		return vs[0].([]MembershipRoleResponse)[vs[1].(int)]
	}).(MembershipRoleResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(DynamicGroupMetadataOutput{})
	pulumi.RegisterOutputType(DynamicGroupMetadataPtrOutput{})
	pulumi.RegisterOutputType(DynamicGroupMetadataResponseOutput{})
	pulumi.RegisterOutputType(DynamicGroupMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(DynamicGroupQueryOutput{})
	pulumi.RegisterOutputType(DynamicGroupQueryArrayOutput{})
	pulumi.RegisterOutputType(DynamicGroupQueryResponseOutput{})
	pulumi.RegisterOutputType(DynamicGroupQueryResponseArrayOutput{})
	pulumi.RegisterOutputType(DynamicGroupStatusResponseOutput{})
	pulumi.RegisterOutputType(DynamicGroupStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(EntityKeyOutput{})
	pulumi.RegisterOutputType(EntityKeyPtrOutput{})
	pulumi.RegisterOutputType(EntityKeyResponseOutput{})
	pulumi.RegisterOutputType(EntityKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(ExpiryDetailOutput{})
	pulumi.RegisterOutputType(ExpiryDetailPtrOutput{})
	pulumi.RegisterOutputType(ExpiryDetailResponseOutput{})
	pulumi.RegisterOutputType(GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput{})
	pulumi.RegisterOutputType(GoogleAppsCloudidentityDevicesV1AndroidAttributesResponsePtrOutput{})
	pulumi.RegisterOutputType(MembershipRoleOutput{})
	pulumi.RegisterOutputType(MembershipRoleArrayOutput{})
	pulumi.RegisterOutputType(MembershipRoleResponseOutput{})
	pulumi.RegisterOutputType(MembershipRoleResponseArrayOutput{})
}
