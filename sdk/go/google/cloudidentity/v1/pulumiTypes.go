// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Dynamic group metadata like queries and status.
type DynamicGroupMetadata struct {
	// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
	Queries []DynamicGroupQuery `pulumi:"queries"`
}

// DynamicGroupMetadataInput is an input type that accepts DynamicGroupMetadataArgs and DynamicGroupMetadataOutput values.
// You can construct a concrete instance of `DynamicGroupMetadataInput` via:
//
//	DynamicGroupMetadataArgs{...}
type DynamicGroupMetadataInput interface {
	pulumi.Input

	ToDynamicGroupMetadataOutput() DynamicGroupMetadataOutput
	ToDynamicGroupMetadataOutputWithContext(context.Context) DynamicGroupMetadataOutput
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataArgs struct {
	// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
	Queries DynamicGroupQueryArrayInput `pulumi:"queries"`
}

func (DynamicGroupMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupMetadata)(nil)).Elem()
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataOutput() DynamicGroupMetadataOutput {
	return i.ToDynamicGroupMetadataOutputWithContext(context.Background())
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataOutputWithContext(ctx context.Context) DynamicGroupMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataOutput)
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return i.ToDynamicGroupMetadataPtrOutputWithContext(context.Background())
}

func (i DynamicGroupMetadataArgs) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataOutput).ToDynamicGroupMetadataPtrOutputWithContext(ctx)
}

// DynamicGroupMetadataPtrInput is an input type that accepts DynamicGroupMetadataArgs, DynamicGroupMetadataPtr and DynamicGroupMetadataPtrOutput values.
// You can construct a concrete instance of `DynamicGroupMetadataPtrInput` via:
//
//	        DynamicGroupMetadataArgs{...}
//
//	or:
//
//	        nil
type DynamicGroupMetadataPtrInput interface {
	pulumi.Input

	ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput
	ToDynamicGroupMetadataPtrOutputWithContext(context.Context) DynamicGroupMetadataPtrOutput
}

type dynamicGroupMetadataPtrType DynamicGroupMetadataArgs

func DynamicGroupMetadataPtr(v *DynamicGroupMetadataArgs) DynamicGroupMetadataPtrInput {
	return (*dynamicGroupMetadataPtrType)(v)
}

func (*dynamicGroupMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupMetadata)(nil)).Elem()
}

func (i *dynamicGroupMetadataPtrType) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return i.ToDynamicGroupMetadataPtrOutputWithContext(context.Background())
}

func (i *dynamicGroupMetadataPtrType) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupMetadataPtrOutput)
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataOutput struct{ *pulumi.OutputState }

func (DynamicGroupMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupMetadata)(nil)).Elem()
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataOutput() DynamicGroupMetadataOutput {
	return o
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataOutputWithContext(ctx context.Context) DynamicGroupMetadataOutput {
	return o
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return o.ToDynamicGroupMetadataPtrOutputWithContext(context.Background())
}

func (o DynamicGroupMetadataOutput) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DynamicGroupMetadata) *DynamicGroupMetadata {
		return &v
	}).(DynamicGroupMetadataPtrOutput)
}

// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
func (o DynamicGroupMetadataOutput) Queries() DynamicGroupQueryArrayOutput {
	return o.ApplyT(func(v DynamicGroupMetadata) []DynamicGroupQuery { return v.Queries }).(DynamicGroupQueryArrayOutput)
}

type DynamicGroupMetadataPtrOutput struct{ *pulumi.OutputState }

func (DynamicGroupMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicGroupMetadata)(nil)).Elem()
}

func (o DynamicGroupMetadataPtrOutput) ToDynamicGroupMetadataPtrOutput() DynamicGroupMetadataPtrOutput {
	return o
}

func (o DynamicGroupMetadataPtrOutput) ToDynamicGroupMetadataPtrOutputWithContext(ctx context.Context) DynamicGroupMetadataPtrOutput {
	return o
}

func (o DynamicGroupMetadataPtrOutput) Elem() DynamicGroupMetadataOutput {
	return o.ApplyT(func(v *DynamicGroupMetadata) DynamicGroupMetadata {
		if v != nil {
			return *v
		}
		var ret DynamicGroupMetadata
		return ret
	}).(DynamicGroupMetadataOutput)
}

// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
func (o DynamicGroupMetadataPtrOutput) Queries() DynamicGroupQueryArrayOutput {
	return o.ApplyT(func(v *DynamicGroupMetadata) []DynamicGroupQuery {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(DynamicGroupQueryArrayOutput)
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataResponse struct {
	// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
	Queries []DynamicGroupQueryResponse `pulumi:"queries"`
	// Status of the dynamic group.
	Status DynamicGroupStatusResponse `pulumi:"status"`
}

// Dynamic group metadata like queries and status.
type DynamicGroupMetadataResponseOutput struct{ *pulumi.OutputState }

func (DynamicGroupMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupMetadataResponse)(nil)).Elem()
}

func (o DynamicGroupMetadataResponseOutput) ToDynamicGroupMetadataResponseOutput() DynamicGroupMetadataResponseOutput {
	return o
}

func (o DynamicGroupMetadataResponseOutput) ToDynamicGroupMetadataResponseOutputWithContext(ctx context.Context) DynamicGroupMetadataResponseOutput {
	return o
}

// Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
func (o DynamicGroupMetadataResponseOutput) Queries() DynamicGroupQueryResponseArrayOutput {
	return o.ApplyT(func(v DynamicGroupMetadataResponse) []DynamicGroupQueryResponse { return v.Queries }).(DynamicGroupQueryResponseArrayOutput)
}

// Status of the dynamic group.
func (o DynamicGroupMetadataResponseOutput) Status() DynamicGroupStatusResponseOutput {
	return o.ApplyT(func(v DynamicGroupMetadataResponse) DynamicGroupStatusResponse { return v.Status }).(DynamicGroupStatusResponseOutput)
}

// Defines a query on a resource.
type DynamicGroupQuery struct {
	// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`
	Query *string `pulumi:"query"`
	// Resource type for the Dynamic Group Query
	ResourceType *DynamicGroupQueryResourceType `pulumi:"resourceType"`
}

// DynamicGroupQueryInput is an input type that accepts DynamicGroupQueryArgs and DynamicGroupQueryOutput values.
// You can construct a concrete instance of `DynamicGroupQueryInput` via:
//
//	DynamicGroupQueryArgs{...}
type DynamicGroupQueryInput interface {
	pulumi.Input

	ToDynamicGroupQueryOutput() DynamicGroupQueryOutput
	ToDynamicGroupQueryOutputWithContext(context.Context) DynamicGroupQueryOutput
}

// Defines a query on a resource.
type DynamicGroupQueryArgs struct {
	// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Resource type for the Dynamic Group Query
	ResourceType DynamicGroupQueryResourceTypePtrInput `pulumi:"resourceType"`
}

func (DynamicGroupQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupQuery)(nil)).Elem()
}

func (i DynamicGroupQueryArgs) ToDynamicGroupQueryOutput() DynamicGroupQueryOutput {
	return i.ToDynamicGroupQueryOutputWithContext(context.Background())
}

func (i DynamicGroupQueryArgs) ToDynamicGroupQueryOutputWithContext(ctx context.Context) DynamicGroupQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupQueryOutput)
}

// DynamicGroupQueryArrayInput is an input type that accepts DynamicGroupQueryArray and DynamicGroupQueryArrayOutput values.
// You can construct a concrete instance of `DynamicGroupQueryArrayInput` via:
//
//	DynamicGroupQueryArray{ DynamicGroupQueryArgs{...} }
type DynamicGroupQueryArrayInput interface {
	pulumi.Input

	ToDynamicGroupQueryArrayOutput() DynamicGroupQueryArrayOutput
	ToDynamicGroupQueryArrayOutputWithContext(context.Context) DynamicGroupQueryArrayOutput
}

type DynamicGroupQueryArray []DynamicGroupQueryInput

func (DynamicGroupQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicGroupQuery)(nil)).Elem()
}

func (i DynamicGroupQueryArray) ToDynamicGroupQueryArrayOutput() DynamicGroupQueryArrayOutput {
	return i.ToDynamicGroupQueryArrayOutputWithContext(context.Background())
}

func (i DynamicGroupQueryArray) ToDynamicGroupQueryArrayOutputWithContext(ctx context.Context) DynamicGroupQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicGroupQueryArrayOutput)
}

// Defines a query on a resource.
type DynamicGroupQueryOutput struct{ *pulumi.OutputState }

func (DynamicGroupQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupQuery)(nil)).Elem()
}

func (o DynamicGroupQueryOutput) ToDynamicGroupQueryOutput() DynamicGroupQueryOutput {
	return o
}

func (o DynamicGroupQueryOutput) ToDynamicGroupQueryOutputWithContext(ctx context.Context) DynamicGroupQueryOutput {
	return o
}

// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`
func (o DynamicGroupQueryOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicGroupQuery) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Resource type for the Dynamic Group Query
func (o DynamicGroupQueryOutput) ResourceType() DynamicGroupQueryResourceTypePtrOutput {
	return o.ApplyT(func(v DynamicGroupQuery) *DynamicGroupQueryResourceType { return v.ResourceType }).(DynamicGroupQueryResourceTypePtrOutput)
}

type DynamicGroupQueryArrayOutput struct{ *pulumi.OutputState }

func (DynamicGroupQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicGroupQuery)(nil)).Elem()
}

func (o DynamicGroupQueryArrayOutput) ToDynamicGroupQueryArrayOutput() DynamicGroupQueryArrayOutput {
	return o
}

func (o DynamicGroupQueryArrayOutput) ToDynamicGroupQueryArrayOutputWithContext(ctx context.Context) DynamicGroupQueryArrayOutput {
	return o
}

func (o DynamicGroupQueryArrayOutput) Index(i pulumi.IntInput) DynamicGroupQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicGroupQuery {
		return vs[0].([]DynamicGroupQuery)[vs[1].(int)]
	}).(DynamicGroupQueryOutput)
}

// Defines a query on a resource.
type DynamicGroupQueryResponse struct {
	// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`
	Query string `pulumi:"query"`
	// Resource type for the Dynamic Group Query
	ResourceType string `pulumi:"resourceType"`
}

// Defines a query on a resource.
type DynamicGroupQueryResponseOutput struct{ *pulumi.OutputState }

func (DynamicGroupQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupQueryResponse)(nil)).Elem()
}

func (o DynamicGroupQueryResponseOutput) ToDynamicGroupQueryResponseOutput() DynamicGroupQueryResponseOutput {
	return o
}

func (o DynamicGroupQueryResponseOutput) ToDynamicGroupQueryResponseOutputWithContext(ctx context.Context) DynamicGroupQueryResponseOutput {
	return o
}

// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`
func (o DynamicGroupQueryResponseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicGroupQueryResponse) string { return v.Query }).(pulumi.StringOutput)
}

// Resource type for the Dynamic Group Query
func (o DynamicGroupQueryResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicGroupQueryResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

type DynamicGroupQueryResponseArrayOutput struct{ *pulumi.OutputState }

func (DynamicGroupQueryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamicGroupQueryResponse)(nil)).Elem()
}

func (o DynamicGroupQueryResponseArrayOutput) ToDynamicGroupQueryResponseArrayOutput() DynamicGroupQueryResponseArrayOutput {
	return o
}

func (o DynamicGroupQueryResponseArrayOutput) ToDynamicGroupQueryResponseArrayOutputWithContext(ctx context.Context) DynamicGroupQueryResponseArrayOutput {
	return o
}

func (o DynamicGroupQueryResponseArrayOutput) Index(i pulumi.IntInput) DynamicGroupQueryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamicGroupQueryResponse {
		return vs[0].([]DynamicGroupQueryResponse)[vs[1].(int)]
	}).(DynamicGroupQueryResponseOutput)
}

// The current status of a dynamic group along with timestamp.
type DynamicGroupStatusResponse struct {
	// Status of the dynamic group.
	Status string `pulumi:"status"`
	// The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
	StatusTime string `pulumi:"statusTime"`
}

// The current status of a dynamic group along with timestamp.
type DynamicGroupStatusResponseOutput struct{ *pulumi.OutputState }

func (DynamicGroupStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicGroupStatusResponse)(nil)).Elem()
}

func (o DynamicGroupStatusResponseOutput) ToDynamicGroupStatusResponseOutput() DynamicGroupStatusResponseOutput {
	return o
}

func (o DynamicGroupStatusResponseOutput) ToDynamicGroupStatusResponseOutputWithContext(ctx context.Context) DynamicGroupStatusResponseOutput {
	return o
}

// Status of the dynamic group.
func (o DynamicGroupStatusResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicGroupStatusResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
func (o DynamicGroupStatusResponseOutput) StatusTime() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicGroupStatusResponse) string { return v.StatusTime }).(pulumi.StringOutput)
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKey struct {
	// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
	Id *string `pulumi:"id"`
	// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source}`.
	Namespace *string `pulumi:"namespace"`
}

// EntityKeyInput is an input type that accepts EntityKeyArgs and EntityKeyOutput values.
// You can construct a concrete instance of `EntityKeyInput` via:
//
//	EntityKeyArgs{...}
type EntityKeyInput interface {
	pulumi.Input

	ToEntityKeyOutput() EntityKeyOutput
	ToEntityKeyOutputWithContext(context.Context) EntityKeyOutput
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyArgs struct {
	// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source}`.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (EntityKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKey)(nil)).Elem()
}

func (i EntityKeyArgs) ToEntityKeyOutput() EntityKeyOutput {
	return i.ToEntityKeyOutputWithContext(context.Background())
}

func (i EntityKeyArgs) ToEntityKeyOutputWithContext(ctx context.Context) EntityKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKeyOutput)
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyOutput struct{ *pulumi.OutputState }

func (EntityKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKey)(nil)).Elem()
}

func (o EntityKeyOutput) ToEntityKeyOutput() EntityKeyOutput {
	return o
}

func (o EntityKeyOutput) ToEntityKeyOutputWithContext(ctx context.Context) EntityKeyOutput {
	return o
}

// The ID of the entity. For Google-managed entities, the `id` should be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.
func (o EntityKeyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityKey) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source}`.
func (o EntityKeyOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityKey) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyResponse struct {
	// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source}`.
	Namespace string `pulumi:"namespace"`
}

// A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
type EntityKeyResponseOutput struct{ *pulumi.OutputState }

func (EntityKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKeyResponse)(nil)).Elem()
}

func (o EntityKeyResponseOutput) ToEntityKeyResponseOutput() EntityKeyResponseOutput {
	return o
}

func (o EntityKeyResponseOutput) ToEntityKeyResponseOutputWithContext(ctx context.Context) EntityKeyResponseOutput {
	return o
}

// The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source}`.
func (o EntityKeyResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v EntityKeyResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

// The `MembershipRole` expiry details.
type ExpiryDetail struct {
	// The time at which the `MembershipRole` will expire.
	ExpireTime *string `pulumi:"expireTime"`
}

// ExpiryDetailInput is an input type that accepts ExpiryDetailArgs and ExpiryDetailOutput values.
// You can construct a concrete instance of `ExpiryDetailInput` via:
//
//	ExpiryDetailArgs{...}
type ExpiryDetailInput interface {
	pulumi.Input

	ToExpiryDetailOutput() ExpiryDetailOutput
	ToExpiryDetailOutputWithContext(context.Context) ExpiryDetailOutput
}

// The `MembershipRole` expiry details.
type ExpiryDetailArgs struct {
	// The time at which the `MembershipRole` will expire.
	ExpireTime pulumi.StringPtrInput `pulumi:"expireTime"`
}

func (ExpiryDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpiryDetail)(nil)).Elem()
}

func (i ExpiryDetailArgs) ToExpiryDetailOutput() ExpiryDetailOutput {
	return i.ToExpiryDetailOutputWithContext(context.Background())
}

func (i ExpiryDetailArgs) ToExpiryDetailOutputWithContext(ctx context.Context) ExpiryDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpiryDetailOutput)
}

func (i ExpiryDetailArgs) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return i.ToExpiryDetailPtrOutputWithContext(context.Background())
}

func (i ExpiryDetailArgs) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpiryDetailOutput).ToExpiryDetailPtrOutputWithContext(ctx)
}

// ExpiryDetailPtrInput is an input type that accepts ExpiryDetailArgs, ExpiryDetailPtr and ExpiryDetailPtrOutput values.
// You can construct a concrete instance of `ExpiryDetailPtrInput` via:
//
//	        ExpiryDetailArgs{...}
//
//	or:
//
//	        nil
type ExpiryDetailPtrInput interface {
	pulumi.Input

	ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput
	ToExpiryDetailPtrOutputWithContext(context.Context) ExpiryDetailPtrOutput
}

type expiryDetailPtrType ExpiryDetailArgs

func ExpiryDetailPtr(v *ExpiryDetailArgs) ExpiryDetailPtrInput {
	return (*expiryDetailPtrType)(v)
}

func (*expiryDetailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpiryDetail)(nil)).Elem()
}

func (i *expiryDetailPtrType) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return i.ToExpiryDetailPtrOutputWithContext(context.Background())
}

func (i *expiryDetailPtrType) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpiryDetailPtrOutput)
}

// The `MembershipRole` expiry details.
type ExpiryDetailOutput struct{ *pulumi.OutputState }

func (ExpiryDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpiryDetail)(nil)).Elem()
}

func (o ExpiryDetailOutput) ToExpiryDetailOutput() ExpiryDetailOutput {
	return o
}

func (o ExpiryDetailOutput) ToExpiryDetailOutputWithContext(ctx context.Context) ExpiryDetailOutput {
	return o
}

func (o ExpiryDetailOutput) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return o.ToExpiryDetailPtrOutputWithContext(context.Background())
}

func (o ExpiryDetailOutput) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExpiryDetail) *ExpiryDetail {
		return &v
	}).(ExpiryDetailPtrOutput)
}

// The time at which the `MembershipRole` will expire.
func (o ExpiryDetailOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpiryDetail) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

type ExpiryDetailPtrOutput struct{ *pulumi.OutputState }

func (ExpiryDetailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpiryDetail)(nil)).Elem()
}

func (o ExpiryDetailPtrOutput) ToExpiryDetailPtrOutput() ExpiryDetailPtrOutput {
	return o
}

func (o ExpiryDetailPtrOutput) ToExpiryDetailPtrOutputWithContext(ctx context.Context) ExpiryDetailPtrOutput {
	return o
}

func (o ExpiryDetailPtrOutput) Elem() ExpiryDetailOutput {
	return o.ApplyT(func(v *ExpiryDetail) ExpiryDetail {
		if v != nil {
			return *v
		}
		var ret ExpiryDetail
		return ret
	}).(ExpiryDetailOutput)
}

// The time at which the `MembershipRole` will expire.
func (o ExpiryDetailPtrOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpiryDetail) *string {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.StringPtrOutput)
}

// The `MembershipRole` expiry details.
type ExpiryDetailResponse struct {
	// The time at which the `MembershipRole` will expire.
	ExpireTime string `pulumi:"expireTime"`
}

// The `MembershipRole` expiry details.
type ExpiryDetailResponseOutput struct{ *pulumi.OutputState }

func (ExpiryDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpiryDetailResponse)(nil)).Elem()
}

func (o ExpiryDetailResponseOutput) ToExpiryDetailResponseOutput() ExpiryDetailResponseOutput {
	return o
}

func (o ExpiryDetailResponseOutput) ToExpiryDetailResponseOutputWithContext(ctx context.Context) ExpiryDetailResponseOutput {
	return o
}

// The time at which the `MembershipRole` will expire.
func (o ExpiryDetailResponseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v ExpiryDetailResponse) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Resource representing the Android specific attributes of a Device.
type GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse struct {
	// Whether applications from unknown sources can be installed on device.
	EnabledUnknownSources bool `pulumi:"enabledUnknownSources"`
	// Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
	OwnerProfileAccount bool `pulumi:"ownerProfileAccount"`
	// Ownership privileges on device.
	OwnershipPrivilege string `pulumi:"ownershipPrivilege"`
	// Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
	SupportsWorkProfile bool `pulumi:"supportsWorkProfile"`
}

// Resource representing the Android specific attributes of a Device.
type GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput struct{ *pulumi.OutputState }

func (GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse)(nil)).Elem()
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput() GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput {
	return o
}

func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) ToGoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutputWithContext(ctx context.Context) GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput {
	return o
}

// Whether applications from unknown sources can be installed on device.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) EnabledUnknownSources() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) bool { return v.EnabledUnknownSources }).(pulumi.BoolOutput)
}

// Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) OwnerProfileAccount() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) bool { return v.OwnerProfileAccount }).(pulumi.BoolOutput)
}

// Ownership privileges on device.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) OwnershipPrivilege() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) string { return v.OwnershipPrivilege }).(pulumi.StringOutput)
}

// Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
func (o GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput) SupportsWorkProfile() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleAppsCloudidentityDevicesV1AndroidAttributesResponse) bool { return v.SupportsWorkProfile }).(pulumi.BoolOutput)
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRole struct {
	// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
	ExpiryDetail *ExpiryDetail `pulumi:"expiryDetail"`
	// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
	Name *string `pulumi:"name"`
	// Evaluations of restrictions applied to parent group on this membership.
	RestrictionEvaluations *RestrictionEvaluations `pulumi:"restrictionEvaluations"`
}

// MembershipRoleInput is an input type that accepts MembershipRoleArgs and MembershipRoleOutput values.
// You can construct a concrete instance of `MembershipRoleInput` via:
//
//	MembershipRoleArgs{...}
type MembershipRoleInput interface {
	pulumi.Input

	ToMembershipRoleOutput() MembershipRoleOutput
	ToMembershipRoleOutputWithContext(context.Context) MembershipRoleOutput
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleArgs struct {
	// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
	ExpiryDetail ExpiryDetailPtrInput `pulumi:"expiryDetail"`
	// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Evaluations of restrictions applied to parent group on this membership.
	RestrictionEvaluations RestrictionEvaluationsPtrInput `pulumi:"restrictionEvaluations"`
}

func (MembershipRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRole)(nil)).Elem()
}

func (i MembershipRoleArgs) ToMembershipRoleOutput() MembershipRoleOutput {
	return i.ToMembershipRoleOutputWithContext(context.Background())
}

func (i MembershipRoleArgs) ToMembershipRoleOutputWithContext(ctx context.Context) MembershipRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleOutput)
}

// MembershipRoleArrayInput is an input type that accepts MembershipRoleArray and MembershipRoleArrayOutput values.
// You can construct a concrete instance of `MembershipRoleArrayInput` via:
//
//	MembershipRoleArray{ MembershipRoleArgs{...} }
type MembershipRoleArrayInput interface {
	pulumi.Input

	ToMembershipRoleArrayOutput() MembershipRoleArrayOutput
	ToMembershipRoleArrayOutputWithContext(context.Context) MembershipRoleArrayOutput
}

type MembershipRoleArray []MembershipRoleInput

func (MembershipRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipRole)(nil)).Elem()
}

func (i MembershipRoleArray) ToMembershipRoleArrayOutput() MembershipRoleArrayOutput {
	return i.ToMembershipRoleArrayOutputWithContext(context.Background())
}

func (i MembershipRoleArray) ToMembershipRoleArrayOutputWithContext(ctx context.Context) MembershipRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleArrayOutput)
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleOutput struct{ *pulumi.OutputState }

func (MembershipRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRole)(nil)).Elem()
}

func (o MembershipRoleOutput) ToMembershipRoleOutput() MembershipRoleOutput {
	return o
}

func (o MembershipRoleOutput) ToMembershipRoleOutputWithContext(ctx context.Context) MembershipRoleOutput {
	return o
}

// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
func (o MembershipRoleOutput) ExpiryDetail() ExpiryDetailPtrOutput {
	return o.ApplyT(func(v MembershipRole) *ExpiryDetail { return v.ExpiryDetail }).(ExpiryDetailPtrOutput)
}

// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
func (o MembershipRoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MembershipRole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Evaluations of restrictions applied to parent group on this membership.
func (o MembershipRoleOutput) RestrictionEvaluations() RestrictionEvaluationsPtrOutput {
	return o.ApplyT(func(v MembershipRole) *RestrictionEvaluations { return v.RestrictionEvaluations }).(RestrictionEvaluationsPtrOutput)
}

type MembershipRoleArrayOutput struct{ *pulumi.OutputState }

func (MembershipRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipRole)(nil)).Elem()
}

func (o MembershipRoleArrayOutput) ToMembershipRoleArrayOutput() MembershipRoleArrayOutput {
	return o
}

func (o MembershipRoleArrayOutput) ToMembershipRoleArrayOutputWithContext(ctx context.Context) MembershipRoleArrayOutput {
	return o
}

func (o MembershipRoleArrayOutput) Index(i pulumi.IntInput) MembershipRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MembershipRole {
		return vs[0].([]MembershipRole)[vs[1].(int)]
	}).(MembershipRoleOutput)
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleResponse struct {
	// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
	ExpiryDetail ExpiryDetailResponse `pulumi:"expiryDetail"`
	// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
	Name string `pulumi:"name"`
	// Evaluations of restrictions applied to parent group on this membership.
	RestrictionEvaluations RestrictionEvaluationsResponse `pulumi:"restrictionEvaluations"`
}

// A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
type MembershipRoleResponseOutput struct{ *pulumi.OutputState }

func (MembershipRoleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRoleResponse)(nil)).Elem()
}

func (o MembershipRoleResponseOutput) ToMembershipRoleResponseOutput() MembershipRoleResponseOutput {
	return o
}

func (o MembershipRoleResponseOutput) ToMembershipRoleResponseOutputWithContext(ctx context.Context) MembershipRoleResponseOutput {
	return o
}

// The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
func (o MembershipRoleResponseOutput) ExpiryDetail() ExpiryDetailResponseOutput {
	return o.ApplyT(func(v MembershipRoleResponse) ExpiryDetailResponse { return v.ExpiryDetail }).(ExpiryDetailResponseOutput)
}

// The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
func (o MembershipRoleResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MembershipRoleResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Evaluations of restrictions applied to parent group on this membership.
func (o MembershipRoleResponseOutput) RestrictionEvaluations() RestrictionEvaluationsResponseOutput {
	return o.ApplyT(func(v MembershipRoleResponse) RestrictionEvaluationsResponse { return v.RestrictionEvaluations }).(RestrictionEvaluationsResponseOutput)
}

type MembershipRoleResponseArrayOutput struct{ *pulumi.OutputState }

func (MembershipRoleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipRoleResponse)(nil)).Elem()
}

func (o MembershipRoleResponseArrayOutput) ToMembershipRoleResponseArrayOutput() MembershipRoleResponseArrayOutput {
	return o
}

func (o MembershipRoleResponseArrayOutput) ToMembershipRoleResponseArrayOutputWithContext(ctx context.Context) MembershipRoleResponseArrayOutput {
	return o
}

func (o MembershipRoleResponseArrayOutput) Index(i pulumi.IntInput) MembershipRoleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MembershipRoleResponse {
		return vs[0].([]MembershipRoleResponse)[vs[1].(int)]
	}).(MembershipRoleResponseOutput)
}

// The evaluated state of this restriction.
type MembershipRoleRestrictionEvaluation struct {
}

// MembershipRoleRestrictionEvaluationInput is an input type that accepts MembershipRoleRestrictionEvaluationArgs and MembershipRoleRestrictionEvaluationOutput values.
// You can construct a concrete instance of `MembershipRoleRestrictionEvaluationInput` via:
//
//	MembershipRoleRestrictionEvaluationArgs{...}
type MembershipRoleRestrictionEvaluationInput interface {
	pulumi.Input

	ToMembershipRoleRestrictionEvaluationOutput() MembershipRoleRestrictionEvaluationOutput
	ToMembershipRoleRestrictionEvaluationOutputWithContext(context.Context) MembershipRoleRestrictionEvaluationOutput
}

// The evaluated state of this restriction.
type MembershipRoleRestrictionEvaluationArgs struct {
}

func (MembershipRoleRestrictionEvaluationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRoleRestrictionEvaluation)(nil)).Elem()
}

func (i MembershipRoleRestrictionEvaluationArgs) ToMembershipRoleRestrictionEvaluationOutput() MembershipRoleRestrictionEvaluationOutput {
	return i.ToMembershipRoleRestrictionEvaluationOutputWithContext(context.Background())
}

func (i MembershipRoleRestrictionEvaluationArgs) ToMembershipRoleRestrictionEvaluationOutputWithContext(ctx context.Context) MembershipRoleRestrictionEvaluationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleRestrictionEvaluationOutput)
}

func (i MembershipRoleRestrictionEvaluationArgs) ToMembershipRoleRestrictionEvaluationPtrOutput() MembershipRoleRestrictionEvaluationPtrOutput {
	return i.ToMembershipRoleRestrictionEvaluationPtrOutputWithContext(context.Background())
}

func (i MembershipRoleRestrictionEvaluationArgs) ToMembershipRoleRestrictionEvaluationPtrOutputWithContext(ctx context.Context) MembershipRoleRestrictionEvaluationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleRestrictionEvaluationOutput).ToMembershipRoleRestrictionEvaluationPtrOutputWithContext(ctx)
}

// MembershipRoleRestrictionEvaluationPtrInput is an input type that accepts MembershipRoleRestrictionEvaluationArgs, MembershipRoleRestrictionEvaluationPtr and MembershipRoleRestrictionEvaluationPtrOutput values.
// You can construct a concrete instance of `MembershipRoleRestrictionEvaluationPtrInput` via:
//
//	        MembershipRoleRestrictionEvaluationArgs{...}
//
//	or:
//
//	        nil
type MembershipRoleRestrictionEvaluationPtrInput interface {
	pulumi.Input

	ToMembershipRoleRestrictionEvaluationPtrOutput() MembershipRoleRestrictionEvaluationPtrOutput
	ToMembershipRoleRestrictionEvaluationPtrOutputWithContext(context.Context) MembershipRoleRestrictionEvaluationPtrOutput
}

type membershipRoleRestrictionEvaluationPtrType MembershipRoleRestrictionEvaluationArgs

func MembershipRoleRestrictionEvaluationPtr(v *MembershipRoleRestrictionEvaluationArgs) MembershipRoleRestrictionEvaluationPtrInput {
	return (*membershipRoleRestrictionEvaluationPtrType)(v)
}

func (*membershipRoleRestrictionEvaluationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipRoleRestrictionEvaluation)(nil)).Elem()
}

func (i *membershipRoleRestrictionEvaluationPtrType) ToMembershipRoleRestrictionEvaluationPtrOutput() MembershipRoleRestrictionEvaluationPtrOutput {
	return i.ToMembershipRoleRestrictionEvaluationPtrOutputWithContext(context.Background())
}

func (i *membershipRoleRestrictionEvaluationPtrType) ToMembershipRoleRestrictionEvaluationPtrOutputWithContext(ctx context.Context) MembershipRoleRestrictionEvaluationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRoleRestrictionEvaluationPtrOutput)
}

// The evaluated state of this restriction.
type MembershipRoleRestrictionEvaluationOutput struct{ *pulumi.OutputState }

func (MembershipRoleRestrictionEvaluationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRoleRestrictionEvaluation)(nil)).Elem()
}

func (o MembershipRoleRestrictionEvaluationOutput) ToMembershipRoleRestrictionEvaluationOutput() MembershipRoleRestrictionEvaluationOutput {
	return o
}

func (o MembershipRoleRestrictionEvaluationOutput) ToMembershipRoleRestrictionEvaluationOutputWithContext(ctx context.Context) MembershipRoleRestrictionEvaluationOutput {
	return o
}

func (o MembershipRoleRestrictionEvaluationOutput) ToMembershipRoleRestrictionEvaluationPtrOutput() MembershipRoleRestrictionEvaluationPtrOutput {
	return o.ToMembershipRoleRestrictionEvaluationPtrOutputWithContext(context.Background())
}

func (o MembershipRoleRestrictionEvaluationOutput) ToMembershipRoleRestrictionEvaluationPtrOutputWithContext(ctx context.Context) MembershipRoleRestrictionEvaluationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MembershipRoleRestrictionEvaluation) *MembershipRoleRestrictionEvaluation {
		return &v
	}).(MembershipRoleRestrictionEvaluationPtrOutput)
}

type MembershipRoleRestrictionEvaluationPtrOutput struct{ *pulumi.OutputState }

func (MembershipRoleRestrictionEvaluationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipRoleRestrictionEvaluation)(nil)).Elem()
}

func (o MembershipRoleRestrictionEvaluationPtrOutput) ToMembershipRoleRestrictionEvaluationPtrOutput() MembershipRoleRestrictionEvaluationPtrOutput {
	return o
}

func (o MembershipRoleRestrictionEvaluationPtrOutput) ToMembershipRoleRestrictionEvaluationPtrOutputWithContext(ctx context.Context) MembershipRoleRestrictionEvaluationPtrOutput {
	return o
}

func (o MembershipRoleRestrictionEvaluationPtrOutput) Elem() MembershipRoleRestrictionEvaluationOutput {
	return o.ApplyT(func(v *MembershipRoleRestrictionEvaluation) MembershipRoleRestrictionEvaluation {
		if v != nil {
			return *v
		}
		var ret MembershipRoleRestrictionEvaluation
		return ret
	}).(MembershipRoleRestrictionEvaluationOutput)
}

// The evaluated state of this restriction.
type MembershipRoleRestrictionEvaluationResponse struct {
	// The current state of the restriction
	State string `pulumi:"state"`
}

// The evaluated state of this restriction.
type MembershipRoleRestrictionEvaluationResponseOutput struct{ *pulumi.OutputState }

func (MembershipRoleRestrictionEvaluationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipRoleRestrictionEvaluationResponse)(nil)).Elem()
}

func (o MembershipRoleRestrictionEvaluationResponseOutput) ToMembershipRoleRestrictionEvaluationResponseOutput() MembershipRoleRestrictionEvaluationResponseOutput {
	return o
}

func (o MembershipRoleRestrictionEvaluationResponseOutput) ToMembershipRoleRestrictionEvaluationResponseOutputWithContext(ctx context.Context) MembershipRoleRestrictionEvaluationResponseOutput {
	return o
}

// The current state of the restriction
func (o MembershipRoleRestrictionEvaluationResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MembershipRoleRestrictionEvaluationResponse) string { return v.State }).(pulumi.StringOutput)
}

// Evaluations of restrictions applied to parent group on this membership.
type RestrictionEvaluations struct {
	// Evaluation of the member restriction applied to this membership. Empty if the user lacks permission to view the restriction evaluation.
	MemberRestrictionEvaluation *MembershipRoleRestrictionEvaluation `pulumi:"memberRestrictionEvaluation"`
}

// RestrictionEvaluationsInput is an input type that accepts RestrictionEvaluationsArgs and RestrictionEvaluationsOutput values.
// You can construct a concrete instance of `RestrictionEvaluationsInput` via:
//
//	RestrictionEvaluationsArgs{...}
type RestrictionEvaluationsInput interface {
	pulumi.Input

	ToRestrictionEvaluationsOutput() RestrictionEvaluationsOutput
	ToRestrictionEvaluationsOutputWithContext(context.Context) RestrictionEvaluationsOutput
}

// Evaluations of restrictions applied to parent group on this membership.
type RestrictionEvaluationsArgs struct {
	// Evaluation of the member restriction applied to this membership. Empty if the user lacks permission to view the restriction evaluation.
	MemberRestrictionEvaluation MembershipRoleRestrictionEvaluationPtrInput `pulumi:"memberRestrictionEvaluation"`
}

func (RestrictionEvaluationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestrictionEvaluations)(nil)).Elem()
}

func (i RestrictionEvaluationsArgs) ToRestrictionEvaluationsOutput() RestrictionEvaluationsOutput {
	return i.ToRestrictionEvaluationsOutputWithContext(context.Background())
}

func (i RestrictionEvaluationsArgs) ToRestrictionEvaluationsOutputWithContext(ctx context.Context) RestrictionEvaluationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestrictionEvaluationsOutput)
}

func (i RestrictionEvaluationsArgs) ToRestrictionEvaluationsPtrOutput() RestrictionEvaluationsPtrOutput {
	return i.ToRestrictionEvaluationsPtrOutputWithContext(context.Background())
}

func (i RestrictionEvaluationsArgs) ToRestrictionEvaluationsPtrOutputWithContext(ctx context.Context) RestrictionEvaluationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestrictionEvaluationsOutput).ToRestrictionEvaluationsPtrOutputWithContext(ctx)
}

// RestrictionEvaluationsPtrInput is an input type that accepts RestrictionEvaluationsArgs, RestrictionEvaluationsPtr and RestrictionEvaluationsPtrOutput values.
// You can construct a concrete instance of `RestrictionEvaluationsPtrInput` via:
//
//	        RestrictionEvaluationsArgs{...}
//
//	or:
//
//	        nil
type RestrictionEvaluationsPtrInput interface {
	pulumi.Input

	ToRestrictionEvaluationsPtrOutput() RestrictionEvaluationsPtrOutput
	ToRestrictionEvaluationsPtrOutputWithContext(context.Context) RestrictionEvaluationsPtrOutput
}

type restrictionEvaluationsPtrType RestrictionEvaluationsArgs

func RestrictionEvaluationsPtr(v *RestrictionEvaluationsArgs) RestrictionEvaluationsPtrInput {
	return (*restrictionEvaluationsPtrType)(v)
}

func (*restrictionEvaluationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestrictionEvaluations)(nil)).Elem()
}

func (i *restrictionEvaluationsPtrType) ToRestrictionEvaluationsPtrOutput() RestrictionEvaluationsPtrOutput {
	return i.ToRestrictionEvaluationsPtrOutputWithContext(context.Background())
}

func (i *restrictionEvaluationsPtrType) ToRestrictionEvaluationsPtrOutputWithContext(ctx context.Context) RestrictionEvaluationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestrictionEvaluationsPtrOutput)
}

// Evaluations of restrictions applied to parent group on this membership.
type RestrictionEvaluationsOutput struct{ *pulumi.OutputState }

func (RestrictionEvaluationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestrictionEvaluations)(nil)).Elem()
}

func (o RestrictionEvaluationsOutput) ToRestrictionEvaluationsOutput() RestrictionEvaluationsOutput {
	return o
}

func (o RestrictionEvaluationsOutput) ToRestrictionEvaluationsOutputWithContext(ctx context.Context) RestrictionEvaluationsOutput {
	return o
}

func (o RestrictionEvaluationsOutput) ToRestrictionEvaluationsPtrOutput() RestrictionEvaluationsPtrOutput {
	return o.ToRestrictionEvaluationsPtrOutputWithContext(context.Background())
}

func (o RestrictionEvaluationsOutput) ToRestrictionEvaluationsPtrOutputWithContext(ctx context.Context) RestrictionEvaluationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestrictionEvaluations) *RestrictionEvaluations {
		return &v
	}).(RestrictionEvaluationsPtrOutput)
}

// Evaluation of the member restriction applied to this membership. Empty if the user lacks permission to view the restriction evaluation.
func (o RestrictionEvaluationsOutput) MemberRestrictionEvaluation() MembershipRoleRestrictionEvaluationPtrOutput {
	return o.ApplyT(func(v RestrictionEvaluations) *MembershipRoleRestrictionEvaluation {
		return v.MemberRestrictionEvaluation
	}).(MembershipRoleRestrictionEvaluationPtrOutput)
}

type RestrictionEvaluationsPtrOutput struct{ *pulumi.OutputState }

func (RestrictionEvaluationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestrictionEvaluations)(nil)).Elem()
}

func (o RestrictionEvaluationsPtrOutput) ToRestrictionEvaluationsPtrOutput() RestrictionEvaluationsPtrOutput {
	return o
}

func (o RestrictionEvaluationsPtrOutput) ToRestrictionEvaluationsPtrOutputWithContext(ctx context.Context) RestrictionEvaluationsPtrOutput {
	return o
}

func (o RestrictionEvaluationsPtrOutput) Elem() RestrictionEvaluationsOutput {
	return o.ApplyT(func(v *RestrictionEvaluations) RestrictionEvaluations {
		if v != nil {
			return *v
		}
		var ret RestrictionEvaluations
		return ret
	}).(RestrictionEvaluationsOutput)
}

// Evaluation of the member restriction applied to this membership. Empty if the user lacks permission to view the restriction evaluation.
func (o RestrictionEvaluationsPtrOutput) MemberRestrictionEvaluation() MembershipRoleRestrictionEvaluationPtrOutput {
	return o.ApplyT(func(v *RestrictionEvaluations) *MembershipRoleRestrictionEvaluation {
		if v == nil {
			return nil
		}
		return v.MemberRestrictionEvaluation
	}).(MembershipRoleRestrictionEvaluationPtrOutput)
}

// Evaluations of restrictions applied to parent group on this membership.
type RestrictionEvaluationsResponse struct {
	// Evaluation of the member restriction applied to this membership. Empty if the user lacks permission to view the restriction evaluation.
	MemberRestrictionEvaluation MembershipRoleRestrictionEvaluationResponse `pulumi:"memberRestrictionEvaluation"`
}

// Evaluations of restrictions applied to parent group on this membership.
type RestrictionEvaluationsResponseOutput struct{ *pulumi.OutputState }

func (RestrictionEvaluationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestrictionEvaluationsResponse)(nil)).Elem()
}

func (o RestrictionEvaluationsResponseOutput) ToRestrictionEvaluationsResponseOutput() RestrictionEvaluationsResponseOutput {
	return o
}

func (o RestrictionEvaluationsResponseOutput) ToRestrictionEvaluationsResponseOutputWithContext(ctx context.Context) RestrictionEvaluationsResponseOutput {
	return o
}

// Evaluation of the member restriction applied to this membership. Empty if the user lacks permission to view the restriction evaluation.
func (o RestrictionEvaluationsResponseOutput) MemberRestrictionEvaluation() MembershipRoleRestrictionEvaluationResponseOutput {
	return o.ApplyT(func(v RestrictionEvaluationsResponse) MembershipRoleRestrictionEvaluationResponse {
		return v.MemberRestrictionEvaluation
	}).(MembershipRoleRestrictionEvaluationResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicGroupMetadataInput)(nil)).Elem(), DynamicGroupMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicGroupMetadataPtrInput)(nil)).Elem(), DynamicGroupMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicGroupQueryInput)(nil)).Elem(), DynamicGroupQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamicGroupQueryArrayInput)(nil)).Elem(), DynamicGroupQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityKeyInput)(nil)).Elem(), EntityKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpiryDetailInput)(nil)).Elem(), ExpiryDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpiryDetailPtrInput)(nil)).Elem(), ExpiryDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipRoleInput)(nil)).Elem(), MembershipRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipRoleArrayInput)(nil)).Elem(), MembershipRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipRoleRestrictionEvaluationInput)(nil)).Elem(), MembershipRoleRestrictionEvaluationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipRoleRestrictionEvaluationPtrInput)(nil)).Elem(), MembershipRoleRestrictionEvaluationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestrictionEvaluationsInput)(nil)).Elem(), RestrictionEvaluationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestrictionEvaluationsPtrInput)(nil)).Elem(), RestrictionEvaluationsArgs{})
	pulumi.RegisterOutputType(DynamicGroupMetadataOutput{})
	pulumi.RegisterOutputType(DynamicGroupMetadataPtrOutput{})
	pulumi.RegisterOutputType(DynamicGroupMetadataResponseOutput{})
	pulumi.RegisterOutputType(DynamicGroupQueryOutput{})
	pulumi.RegisterOutputType(DynamicGroupQueryArrayOutput{})
	pulumi.RegisterOutputType(DynamicGroupQueryResponseOutput{})
	pulumi.RegisterOutputType(DynamicGroupQueryResponseArrayOutput{})
	pulumi.RegisterOutputType(DynamicGroupStatusResponseOutput{})
	pulumi.RegisterOutputType(EntityKeyOutput{})
	pulumi.RegisterOutputType(EntityKeyResponseOutput{})
	pulumi.RegisterOutputType(ExpiryDetailOutput{})
	pulumi.RegisterOutputType(ExpiryDetailPtrOutput{})
	pulumi.RegisterOutputType(ExpiryDetailResponseOutput{})
	pulumi.RegisterOutputType(GoogleAppsCloudidentityDevicesV1AndroidAttributesResponseOutput{})
	pulumi.RegisterOutputType(MembershipRoleOutput{})
	pulumi.RegisterOutputType(MembershipRoleArrayOutput{})
	pulumi.RegisterOutputType(MembershipRoleResponseOutput{})
	pulumi.RegisterOutputType(MembershipRoleResponseArrayOutput{})
	pulumi.RegisterOutputType(MembershipRoleRestrictionEvaluationOutput{})
	pulumi.RegisterOutputType(MembershipRoleRestrictionEvaluationPtrOutput{})
	pulumi.RegisterOutputType(MembershipRoleRestrictionEvaluationResponseOutput{})
	pulumi.RegisterOutputType(RestrictionEvaluationsOutput{})
	pulumi.RegisterOutputType(RestrictionEvaluationsPtrOutput{})
	pulumi.RegisterOutputType(RestrictionEvaluationsResponseOutput{})
}
