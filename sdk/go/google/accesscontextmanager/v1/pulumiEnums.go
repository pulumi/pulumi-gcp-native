// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
type BasicLevelCombiningFunction pulumi.String

const (
	// All `Conditions` must be true for the `BasicLevel` to be true.
	BasicLevelCombiningFunctionAnd = BasicLevelCombiningFunction("AND")
	// If at least one `Condition` is true, then the `BasicLevel` is true.
	BasicLevelCombiningFunctionOr = BasicLevelCombiningFunction("OR")
)

func (BasicLevelCombiningFunction) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BasicLevelCombiningFunction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicLevelCombiningFunction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicLevelCombiningFunction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BasicLevelCombiningFunction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DevicePolicyAllowedDeviceManagementLevelsItem pulumi.String

const (
	// The device's management level is not specified or not known.
	DevicePolicyAllowedDeviceManagementLevelsItemManagementUnspecified = DevicePolicyAllowedDeviceManagementLevelsItem("MANAGEMENT_UNSPECIFIED")
	// The device is not managed.
	DevicePolicyAllowedDeviceManagementLevelsItemNone = DevicePolicyAllowedDeviceManagementLevelsItem("NONE")
	// Basic management is enabled, which is generally limited to monitoring and wiping the corporate account.
	DevicePolicyAllowedDeviceManagementLevelsItemBasic = DevicePolicyAllowedDeviceManagementLevelsItem("BASIC")
	// Complete device management. This includes more thorough monitoring and the ability to directly manage the device (such as remote wiping). This can be enabled through the Android Enterprise Platform.
	DevicePolicyAllowedDeviceManagementLevelsItemComplete = DevicePolicyAllowedDeviceManagementLevelsItem("COMPLETE")
)

func (DevicePolicyAllowedDeviceManagementLevelsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DevicePolicyAllowedDeviceManagementLevelsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DevicePolicyAllowedDeviceManagementLevelsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DevicePolicyAllowedDeviceManagementLevelsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DevicePolicyAllowedDeviceManagementLevelsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// DevicePolicyAllowedDeviceManagementLevelsItemArrayInput is an input type that accepts DevicePolicyAllowedDeviceManagementLevelsItemArray and DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput values.
// You can construct a concrete instance of `DevicePolicyAllowedDeviceManagementLevelsItemArrayInput` via:
//
//          DevicePolicyAllowedDeviceManagementLevelsItemArray{ DevicePolicyAllowedDeviceManagementLevelsItemArgs{...} }
type DevicePolicyAllowedDeviceManagementLevelsItemArrayInput interface {
	pulumi.Input

	ToDevicePolicyAllowedDeviceManagementLevelsItemArrayOutput() DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput
	ToDevicePolicyAllowedDeviceManagementLevelsItemArrayOutputWithContext(context.Context) DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput
}

type DevicePolicyAllowedDeviceManagementLevelsItemArray []DevicePolicyAllowedDeviceManagementLevelsItem

func (DevicePolicyAllowedDeviceManagementLevelsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicePolicyAllowedDeviceManagementLevelsItem)(nil)).Elem()
}

func (i DevicePolicyAllowedDeviceManagementLevelsItemArray) ToDevicePolicyAllowedDeviceManagementLevelsItemArrayOutput() DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput {
	return i.ToDevicePolicyAllowedDeviceManagementLevelsItemArrayOutputWithContext(context.Background())
}

func (i DevicePolicyAllowedDeviceManagementLevelsItemArray) ToDevicePolicyAllowedDeviceManagementLevelsItemArrayOutputWithContext(ctx context.Context) DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput)
}

type DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput struct{ *pulumi.OutputState }

func (DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicePolicyAllowedDeviceManagementLevelsItem)(nil)).Elem()
}

func (o DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput) ToDevicePolicyAllowedDeviceManagementLevelsItemArrayOutput() DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput {
	return o
}

func (o DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput) ToDevicePolicyAllowedDeviceManagementLevelsItemArrayOutputWithContext(ctx context.Context) DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput {
	return o
}

func (o DevicePolicyAllowedDeviceManagementLevelsItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]DevicePolicyAllowedDeviceManagementLevelsItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}

type DevicePolicyAllowedEncryptionStatusesItem pulumi.String

const (
	// The encryption status of the device is not specified or not known.
	DevicePolicyAllowedEncryptionStatusesItemEncryptionUnspecified = DevicePolicyAllowedEncryptionStatusesItem("ENCRYPTION_UNSPECIFIED")
	// The device does not support encryption.
	DevicePolicyAllowedEncryptionStatusesItemEncryptionUnsupported = DevicePolicyAllowedEncryptionStatusesItem("ENCRYPTION_UNSUPPORTED")
	// The device supports encryption, but is currently unencrypted.
	DevicePolicyAllowedEncryptionStatusesItemUnencrypted = DevicePolicyAllowedEncryptionStatusesItem("UNENCRYPTED")
	// The device is encrypted.
	DevicePolicyAllowedEncryptionStatusesItemEncrypted = DevicePolicyAllowedEncryptionStatusesItem("ENCRYPTED")
)

func (DevicePolicyAllowedEncryptionStatusesItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DevicePolicyAllowedEncryptionStatusesItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DevicePolicyAllowedEncryptionStatusesItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DevicePolicyAllowedEncryptionStatusesItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DevicePolicyAllowedEncryptionStatusesItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// DevicePolicyAllowedEncryptionStatusesItemArrayInput is an input type that accepts DevicePolicyAllowedEncryptionStatusesItemArray and DevicePolicyAllowedEncryptionStatusesItemArrayOutput values.
// You can construct a concrete instance of `DevicePolicyAllowedEncryptionStatusesItemArrayInput` via:
//
//          DevicePolicyAllowedEncryptionStatusesItemArray{ DevicePolicyAllowedEncryptionStatusesItemArgs{...} }
type DevicePolicyAllowedEncryptionStatusesItemArrayInput interface {
	pulumi.Input

	ToDevicePolicyAllowedEncryptionStatusesItemArrayOutput() DevicePolicyAllowedEncryptionStatusesItemArrayOutput
	ToDevicePolicyAllowedEncryptionStatusesItemArrayOutputWithContext(context.Context) DevicePolicyAllowedEncryptionStatusesItemArrayOutput
}

type DevicePolicyAllowedEncryptionStatusesItemArray []DevicePolicyAllowedEncryptionStatusesItem

func (DevicePolicyAllowedEncryptionStatusesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicePolicyAllowedEncryptionStatusesItem)(nil)).Elem()
}

func (i DevicePolicyAllowedEncryptionStatusesItemArray) ToDevicePolicyAllowedEncryptionStatusesItemArrayOutput() DevicePolicyAllowedEncryptionStatusesItemArrayOutput {
	return i.ToDevicePolicyAllowedEncryptionStatusesItemArrayOutputWithContext(context.Background())
}

func (i DevicePolicyAllowedEncryptionStatusesItemArray) ToDevicePolicyAllowedEncryptionStatusesItemArrayOutputWithContext(ctx context.Context) DevicePolicyAllowedEncryptionStatusesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePolicyAllowedEncryptionStatusesItemArrayOutput)
}

type DevicePolicyAllowedEncryptionStatusesItemArrayOutput struct{ *pulumi.OutputState }

func (DevicePolicyAllowedEncryptionStatusesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicePolicyAllowedEncryptionStatusesItem)(nil)).Elem()
}

func (o DevicePolicyAllowedEncryptionStatusesItemArrayOutput) ToDevicePolicyAllowedEncryptionStatusesItemArrayOutput() DevicePolicyAllowedEncryptionStatusesItemArrayOutput {
	return o
}

func (o DevicePolicyAllowedEncryptionStatusesItemArrayOutput) ToDevicePolicyAllowedEncryptionStatusesItemArrayOutputWithContext(ctx context.Context) DevicePolicyAllowedEncryptionStatusesItemArrayOutput {
	return o
}

func (o DevicePolicyAllowedEncryptionStatusesItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]DevicePolicyAllowedEncryptionStatusesItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}

// Specifies the type of identities that are allowed access to outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.
type EgressFromIdentityType pulumi.String

const (
	// No blanket identity group specified.
	EgressFromIdentityTypeIdentityTypeUnspecified = EgressFromIdentityType("IDENTITY_TYPE_UNSPECIFIED")
	// Authorize access from all identities outside the perimeter.
	EgressFromIdentityTypeAnyIdentity = EgressFromIdentityType("ANY_IDENTITY")
	// Authorize access from all human users outside the perimeter.
	EgressFromIdentityTypeAnyUserAccount = EgressFromIdentityType("ANY_USER_ACCOUNT")
	// Authorize access from all service accounts outside the perimeter.
	EgressFromIdentityTypeAnyServiceAccount = EgressFromIdentityType("ANY_SERVICE_ACCOUNT")
)

func (EgressFromIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e EgressFromIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EgressFromIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EgressFromIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EgressFromIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of identities that are allowed access from outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.
type IngressFromIdentityType pulumi.String

const (
	// No blanket identity group specified.
	IngressFromIdentityTypeIdentityTypeUnspecified = IngressFromIdentityType("IDENTITY_TYPE_UNSPECIFIED")
	// Authorize access from all identities outside the perimeter.
	IngressFromIdentityTypeAnyIdentity = IngressFromIdentityType("ANY_IDENTITY")
	// Authorize access from all human users outside the perimeter.
	IngressFromIdentityTypeAnyUserAccount = IngressFromIdentityType("ANY_USER_ACCOUNT")
	// Authorize access from all service accounts outside the perimeter.
	IngressFromIdentityTypeAnyServiceAccount = IngressFromIdentityType("ANY_SERVICE_ACCOUNT")
)

func (IngressFromIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e IngressFromIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IngressFromIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IngressFromIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IngressFromIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. The allowed OS type.
type OsConstraintOsType pulumi.String

const (
	// The operating system of the device is not specified or not known.
	OsConstraintOsTypeOsUnspecified = OsConstraintOsType("OS_UNSPECIFIED")
	// A desktop Mac operating system.
	OsConstraintOsTypeDesktopMac = OsConstraintOsType("DESKTOP_MAC")
	// A desktop Windows operating system.
	OsConstraintOsTypeDesktopWindows = OsConstraintOsType("DESKTOP_WINDOWS")
	// A desktop Linux operating system.
	OsConstraintOsTypeDesktopLinux = OsConstraintOsType("DESKTOP_LINUX")
	// A desktop ChromeOS operating system.
	OsConstraintOsTypeDesktopChromeOs = OsConstraintOsType("DESKTOP_CHROME_OS")
	// An Android operating system.
	OsConstraintOsTypeAndroid = OsConstraintOsType("ANDROID")
	// An iOS operating system.
	OsConstraintOsTypeIos = OsConstraintOsType("IOS")
)

func (OsConstraintOsType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e OsConstraintOsType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OsConstraintOsType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OsConstraintOsType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OsConstraintOsType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, the restricted service list as well as access level lists must be empty.
type ServicePerimeterPerimeterType pulumi.String

const (
	// Regular Perimeter.
	ServicePerimeterPerimeterTypePerimeterTypeRegular = ServicePerimeterPerimeterType("PERIMETER_TYPE_REGULAR")
	// Perimeter Bridge.
	ServicePerimeterPerimeterTypePerimeterTypeBridge = ServicePerimeterPerimeterType("PERIMETER_TYPE_BRIDGE")
)

func (ServicePerimeterPerimeterType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ServicePerimeterPerimeterType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServicePerimeterPerimeterType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServicePerimeterPerimeterType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServicePerimeterPerimeterType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
