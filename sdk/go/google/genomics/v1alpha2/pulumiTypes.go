// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// A Google Compute Engine disk resource specification.
type Disk struct {
	// Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
	//
	// Deprecated: Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
	AutoDelete *bool `pulumi:"autoDelete"`
	// Required at create time and cannot be overridden at run time. Specifies the path in the docker container where files on this disk should be located. For example, if `mountPoint` is `/mnt/disk`, and the parameter has `localPath` `inputs/file.txt`, the docker container can access the data at `/mnt/disk/inputs/file.txt`.
	MountPoint *string `pulumi:"mountPoint"`
	// The name of the disk that can be used in the pipeline parameters. Must be 1 - 63 characters. The name "boot" is reserved for system use.
	Name string `pulumi:"name"`
	// Specifies how a sourced-base persistent disk will be mounted. See https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances for more details. Can only be set at create time.
	ReadOnly *bool `pulumi:"readOnly"`
	// The size of the disk. Defaults to 500 (GB). This field is not applicable for local SSD.
	SizeGb *int `pulumi:"sizeGb"`
	// The full or partial URL of the persistent disk to attach. See https://cloud.google.com/compute/docs/reference/latest/instances#resource and https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots for more details.
	Source *string `pulumi:"source"`
	// The type of the disk to create.
	Type DiskType `pulumi:"type"`
}

// DiskInput is an input type that accepts DiskArgs and DiskOutput values.
// You can construct a concrete instance of `DiskInput` via:
//
//	DiskArgs{...}
type DiskInput interface {
	pulumi.Input

	ToDiskOutput() DiskOutput
	ToDiskOutputWithContext(context.Context) DiskOutput
}

// A Google Compute Engine disk resource specification.
type DiskArgs struct {
	// Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
	//
	// Deprecated: Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
	AutoDelete pulumi.BoolPtrInput `pulumi:"autoDelete"`
	// Required at create time and cannot be overridden at run time. Specifies the path in the docker container where files on this disk should be located. For example, if `mountPoint` is `/mnt/disk`, and the parameter has `localPath` `inputs/file.txt`, the docker container can access the data at `/mnt/disk/inputs/file.txt`.
	MountPoint pulumi.StringPtrInput `pulumi:"mountPoint"`
	// The name of the disk that can be used in the pipeline parameters. Must be 1 - 63 characters. The name "boot" is reserved for system use.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies how a sourced-base persistent disk will be mounted. See https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances for more details. Can only be set at create time.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The size of the disk. Defaults to 500 (GB). This field is not applicable for local SSD.
	SizeGb pulumi.IntPtrInput `pulumi:"sizeGb"`
	// The full or partial URL of the persistent disk to attach. See https://cloud.google.com/compute/docs/reference/latest/instances#resource and https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots for more details.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The type of the disk to create.
	Type DiskTypeInput `pulumi:"type"`
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (i DiskArgs) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i DiskArgs) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

// DiskArrayInput is an input type that accepts DiskArray and DiskArrayOutput values.
// You can construct a concrete instance of `DiskArrayInput` via:
//
//	DiskArray{ DiskArgs{...} }
type DiskArrayInput interface {
	pulumi.Input

	ToDiskArrayOutput() DiskArrayOutput
	ToDiskArrayOutputWithContext(context.Context) DiskArrayOutput
}

type DiskArray []DiskInput

func (DiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (i DiskArray) ToDiskArrayOutput() DiskArrayOutput {
	return i.ToDiskArrayOutputWithContext(context.Background())
}

func (i DiskArray) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskArrayOutput)
}

// A Google Compute Engine disk resource specification.
type DiskOutput struct{ *pulumi.OutputState }

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

// Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
//
// Deprecated: Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
func (o DiskOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Disk) *bool { return v.AutoDelete }).(pulumi.BoolPtrOutput)
}

// Required at create time and cannot be overridden at run time. Specifies the path in the docker container where files on this disk should be located. For example, if `mountPoint` is `/mnt/disk`, and the parameter has `localPath` `inputs/file.txt`, the docker container can access the data at `/mnt/disk/inputs/file.txt`.
func (o DiskOutput) MountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.MountPoint }).(pulumi.StringPtrOutput)
}

// The name of the disk that can be used in the pipeline parameters. Must be 1 - 63 characters. The name "boot" is reserved for system use.
func (o DiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Disk) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies how a sourced-base persistent disk will be mounted. See https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances for more details. Can only be set at create time.
func (o DiskOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Disk) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The size of the disk. Defaults to 500 (GB). This field is not applicable for local SSD.
func (o DiskOutput) SizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Disk) *int { return v.SizeGb }).(pulumi.IntPtrOutput)
}

// The full or partial URL of the persistent disk to attach. See https://cloud.google.com/compute/docs/reference/latest/instances#resource and https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots for more details.
func (o DiskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The type of the disk to create.
func (o DiskOutput) Type() DiskTypeOutput {
	return o.ApplyT(func(v Disk) DiskType { return v.Type }).(DiskTypeOutput)
}

type DiskArrayOutput struct{ *pulumi.OutputState }

func (DiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (o DiskArrayOutput) ToDiskArrayOutput() DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) Index(i pulumi.IntInput) DiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Disk {
		return vs[0].([]Disk)[vs[1].(int)]
	}).(DiskOutput)
}

// A Google Compute Engine disk resource specification.
type DiskResponse struct {
	// Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
	//
	// Deprecated: Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
	AutoDelete bool `pulumi:"autoDelete"`
	// Required at create time and cannot be overridden at run time. Specifies the path in the docker container where files on this disk should be located. For example, if `mountPoint` is `/mnt/disk`, and the parameter has `localPath` `inputs/file.txt`, the docker container can access the data at `/mnt/disk/inputs/file.txt`.
	MountPoint string `pulumi:"mountPoint"`
	// The name of the disk that can be used in the pipeline parameters. Must be 1 - 63 characters. The name "boot" is reserved for system use.
	Name string `pulumi:"name"`
	// Specifies how a sourced-base persistent disk will be mounted. See https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances for more details. Can only be set at create time.
	ReadOnly bool `pulumi:"readOnly"`
	// The size of the disk. Defaults to 500 (GB). This field is not applicable for local SSD.
	SizeGb int `pulumi:"sizeGb"`
	// The full or partial URL of the persistent disk to attach. See https://cloud.google.com/compute/docs/reference/latest/instances#resource and https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots for more details.
	Source string `pulumi:"source"`
	// The type of the disk to create.
	Type string `pulumi:"type"`
}

// A Google Compute Engine disk resource specification.
type DiskResponseOutput struct{ *pulumi.OutputState }

func (DiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskResponse)(nil)).Elem()
}

func (o DiskResponseOutput) ToDiskResponseOutput() DiskResponseOutput {
	return o
}

func (o DiskResponseOutput) ToDiskResponseOutputWithContext(ctx context.Context) DiskResponseOutput {
	return o
}

// Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
//
// Deprecated: Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
func (o DiskResponseOutput) AutoDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v DiskResponse) bool { return v.AutoDelete }).(pulumi.BoolOutput)
}

// Required at create time and cannot be overridden at run time. Specifies the path in the docker container where files on this disk should be located. For example, if `mountPoint` is `/mnt/disk`, and the parameter has `localPath` `inputs/file.txt`, the docker container can access the data at `/mnt/disk/inputs/file.txt`.
func (o DiskResponseOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.MountPoint }).(pulumi.StringOutput)
}

// The name of the disk that can be used in the pipeline parameters. Must be 1 - 63 characters. The name "boot" is reserved for system use.
func (o DiskResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies how a sourced-base persistent disk will be mounted. See https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances for more details. Can only be set at create time.
func (o DiskResponseOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v DiskResponse) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

// The size of the disk. Defaults to 500 (GB). This field is not applicable for local SSD.
func (o DiskResponseOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v DiskResponse) int { return v.SizeGb }).(pulumi.IntOutput)
}

// The full or partial URL of the persistent disk to attach. See https://cloud.google.com/compute/docs/reference/latest/instances#resource and https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots for more details.
func (o DiskResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Source }).(pulumi.StringOutput)
}

// The type of the disk to create.
func (o DiskResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskResponse)(nil)).Elem()
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutput() DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutputWithContext(ctx context.Context) DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) Index(i pulumi.IntInput) DiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskResponse {
		return vs[0].([]DiskResponse)[vs[1].(int)]
	}).(DiskResponseOutput)
}

// The Docker execuctor specification.
type DockerExecutor struct {
	// The command or newline delimited script to run. The command string will be executed within a bash shell. If the command exits with a non-zero exit code, output parameter de-localization will be skipped and the pipeline operation's `error` field will be populated. Maximum command string length is 16384.
	Cmd string `pulumi:"cmd"`
	// Image name from either Docker Hub or Google Container Registry. Users that run pipelines must have READ access to the image.
	ImageName string `pulumi:"imageName"`
}

// DockerExecutorInput is an input type that accepts DockerExecutorArgs and DockerExecutorOutput values.
// You can construct a concrete instance of `DockerExecutorInput` via:
//
//	DockerExecutorArgs{...}
type DockerExecutorInput interface {
	pulumi.Input

	ToDockerExecutorOutput() DockerExecutorOutput
	ToDockerExecutorOutputWithContext(context.Context) DockerExecutorOutput
}

// The Docker execuctor specification.
type DockerExecutorArgs struct {
	// The command or newline delimited script to run. The command string will be executed within a bash shell. If the command exits with a non-zero exit code, output parameter de-localization will be skipped and the pipeline operation's `error` field will be populated. Maximum command string length is 16384.
	Cmd pulumi.StringInput `pulumi:"cmd"`
	// Image name from either Docker Hub or Google Container Registry. Users that run pipelines must have READ access to the image.
	ImageName pulumi.StringInput `pulumi:"imageName"`
}

func (DockerExecutorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerExecutor)(nil)).Elem()
}

func (i DockerExecutorArgs) ToDockerExecutorOutput() DockerExecutorOutput {
	return i.ToDockerExecutorOutputWithContext(context.Background())
}

func (i DockerExecutorArgs) ToDockerExecutorOutputWithContext(ctx context.Context) DockerExecutorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerExecutorOutput)
}

func (i DockerExecutorArgs) ToDockerExecutorPtrOutput() DockerExecutorPtrOutput {
	return i.ToDockerExecutorPtrOutputWithContext(context.Background())
}

func (i DockerExecutorArgs) ToDockerExecutorPtrOutputWithContext(ctx context.Context) DockerExecutorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerExecutorOutput).ToDockerExecutorPtrOutputWithContext(ctx)
}

// DockerExecutorPtrInput is an input type that accepts DockerExecutorArgs, DockerExecutorPtr and DockerExecutorPtrOutput values.
// You can construct a concrete instance of `DockerExecutorPtrInput` via:
//
//	        DockerExecutorArgs{...}
//
//	or:
//
//	        nil
type DockerExecutorPtrInput interface {
	pulumi.Input

	ToDockerExecutorPtrOutput() DockerExecutorPtrOutput
	ToDockerExecutorPtrOutputWithContext(context.Context) DockerExecutorPtrOutput
}

type dockerExecutorPtrType DockerExecutorArgs

func DockerExecutorPtr(v *DockerExecutorArgs) DockerExecutorPtrInput {
	return (*dockerExecutorPtrType)(v)
}

func (*dockerExecutorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerExecutor)(nil)).Elem()
}

func (i *dockerExecutorPtrType) ToDockerExecutorPtrOutput() DockerExecutorPtrOutput {
	return i.ToDockerExecutorPtrOutputWithContext(context.Background())
}

func (i *dockerExecutorPtrType) ToDockerExecutorPtrOutputWithContext(ctx context.Context) DockerExecutorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerExecutorPtrOutput)
}

// The Docker execuctor specification.
type DockerExecutorOutput struct{ *pulumi.OutputState }

func (DockerExecutorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerExecutor)(nil)).Elem()
}

func (o DockerExecutorOutput) ToDockerExecutorOutput() DockerExecutorOutput {
	return o
}

func (o DockerExecutorOutput) ToDockerExecutorOutputWithContext(ctx context.Context) DockerExecutorOutput {
	return o
}

func (o DockerExecutorOutput) ToDockerExecutorPtrOutput() DockerExecutorPtrOutput {
	return o.ToDockerExecutorPtrOutputWithContext(context.Background())
}

func (o DockerExecutorOutput) ToDockerExecutorPtrOutputWithContext(ctx context.Context) DockerExecutorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerExecutor) *DockerExecutor {
		return &v
	}).(DockerExecutorPtrOutput)
}

// The command or newline delimited script to run. The command string will be executed within a bash shell. If the command exits with a non-zero exit code, output parameter de-localization will be skipped and the pipeline operation's `error` field will be populated. Maximum command string length is 16384.
func (o DockerExecutorOutput) Cmd() pulumi.StringOutput {
	return o.ApplyT(func(v DockerExecutor) string { return v.Cmd }).(pulumi.StringOutput)
}

// Image name from either Docker Hub or Google Container Registry. Users that run pipelines must have READ access to the image.
func (o DockerExecutorOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v DockerExecutor) string { return v.ImageName }).(pulumi.StringOutput)
}

type DockerExecutorPtrOutput struct{ *pulumi.OutputState }

func (DockerExecutorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerExecutor)(nil)).Elem()
}

func (o DockerExecutorPtrOutput) ToDockerExecutorPtrOutput() DockerExecutorPtrOutput {
	return o
}

func (o DockerExecutorPtrOutput) ToDockerExecutorPtrOutputWithContext(ctx context.Context) DockerExecutorPtrOutput {
	return o
}

func (o DockerExecutorPtrOutput) Elem() DockerExecutorOutput {
	return o.ApplyT(func(v *DockerExecutor) DockerExecutor {
		if v != nil {
			return *v
		}
		var ret DockerExecutor
		return ret
	}).(DockerExecutorOutput)
}

// The command or newline delimited script to run. The command string will be executed within a bash shell. If the command exits with a non-zero exit code, output parameter de-localization will be skipped and the pipeline operation's `error` field will be populated. Maximum command string length is 16384.
func (o DockerExecutorPtrOutput) Cmd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerExecutor) *string {
		if v == nil {
			return nil
		}
		return &v.Cmd
	}).(pulumi.StringPtrOutput)
}

// Image name from either Docker Hub or Google Container Registry. Users that run pipelines must have READ access to the image.
func (o DockerExecutorPtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerExecutor) *string {
		if v == nil {
			return nil
		}
		return &v.ImageName
	}).(pulumi.StringPtrOutput)
}

// The Docker execuctor specification.
type DockerExecutorResponse struct {
	// The command or newline delimited script to run. The command string will be executed within a bash shell. If the command exits with a non-zero exit code, output parameter de-localization will be skipped and the pipeline operation's `error` field will be populated. Maximum command string length is 16384.
	Cmd string `pulumi:"cmd"`
	// Image name from either Docker Hub or Google Container Registry. Users that run pipelines must have READ access to the image.
	ImageName string `pulumi:"imageName"`
}

// The Docker execuctor specification.
type DockerExecutorResponseOutput struct{ *pulumi.OutputState }

func (DockerExecutorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerExecutorResponse)(nil)).Elem()
}

func (o DockerExecutorResponseOutput) ToDockerExecutorResponseOutput() DockerExecutorResponseOutput {
	return o
}

func (o DockerExecutorResponseOutput) ToDockerExecutorResponseOutputWithContext(ctx context.Context) DockerExecutorResponseOutput {
	return o
}

// The command or newline delimited script to run. The command string will be executed within a bash shell. If the command exits with a non-zero exit code, output parameter de-localization will be skipped and the pipeline operation's `error` field will be populated. Maximum command string length is 16384.
func (o DockerExecutorResponseOutput) Cmd() pulumi.StringOutput {
	return o.ApplyT(func(v DockerExecutorResponse) string { return v.Cmd }).(pulumi.StringOutput)
}

// Image name from either Docker Hub or Google Container Registry. Users that run pipelines must have READ access to the image.
func (o DockerExecutorResponseOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v DockerExecutorResponse) string { return v.ImageName }).(pulumi.StringOutput)
}

// LocalCopy defines how a remote file should be copied to and from the VM.
type LocalCopy struct {
	// The name of the disk where this parameter is located. Can be the name of one of the disks specified in the Resources field, or "boot", which represents the Docker instance's boot disk and has a mount point of `/`.
	Disk string `pulumi:"disk"`
	// The path within the user's docker container where this input should be localized to and from, relative to the specified disk's mount point. For example: file.txt,
	Path string `pulumi:"path"`
}

// LocalCopyInput is an input type that accepts LocalCopyArgs and LocalCopyOutput values.
// You can construct a concrete instance of `LocalCopyInput` via:
//
//	LocalCopyArgs{...}
type LocalCopyInput interface {
	pulumi.Input

	ToLocalCopyOutput() LocalCopyOutput
	ToLocalCopyOutputWithContext(context.Context) LocalCopyOutput
}

// LocalCopy defines how a remote file should be copied to and from the VM.
type LocalCopyArgs struct {
	// The name of the disk where this parameter is located. Can be the name of one of the disks specified in the Resources field, or "boot", which represents the Docker instance's boot disk and has a mount point of `/`.
	Disk pulumi.StringInput `pulumi:"disk"`
	// The path within the user's docker container where this input should be localized to and from, relative to the specified disk's mount point. For example: file.txt,
	Path pulumi.StringInput `pulumi:"path"`
}

func (LocalCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalCopy)(nil)).Elem()
}

func (i LocalCopyArgs) ToLocalCopyOutput() LocalCopyOutput {
	return i.ToLocalCopyOutputWithContext(context.Background())
}

func (i LocalCopyArgs) ToLocalCopyOutputWithContext(ctx context.Context) LocalCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalCopyOutput)
}

func (i LocalCopyArgs) ToLocalCopyPtrOutput() LocalCopyPtrOutput {
	return i.ToLocalCopyPtrOutputWithContext(context.Background())
}

func (i LocalCopyArgs) ToLocalCopyPtrOutputWithContext(ctx context.Context) LocalCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalCopyOutput).ToLocalCopyPtrOutputWithContext(ctx)
}

// LocalCopyPtrInput is an input type that accepts LocalCopyArgs, LocalCopyPtr and LocalCopyPtrOutput values.
// You can construct a concrete instance of `LocalCopyPtrInput` via:
//
//	        LocalCopyArgs{...}
//
//	or:
//
//	        nil
type LocalCopyPtrInput interface {
	pulumi.Input

	ToLocalCopyPtrOutput() LocalCopyPtrOutput
	ToLocalCopyPtrOutputWithContext(context.Context) LocalCopyPtrOutput
}

type localCopyPtrType LocalCopyArgs

func LocalCopyPtr(v *LocalCopyArgs) LocalCopyPtrInput {
	return (*localCopyPtrType)(v)
}

func (*localCopyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalCopy)(nil)).Elem()
}

func (i *localCopyPtrType) ToLocalCopyPtrOutput() LocalCopyPtrOutput {
	return i.ToLocalCopyPtrOutputWithContext(context.Background())
}

func (i *localCopyPtrType) ToLocalCopyPtrOutputWithContext(ctx context.Context) LocalCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalCopyPtrOutput)
}

// LocalCopy defines how a remote file should be copied to and from the VM.
type LocalCopyOutput struct{ *pulumi.OutputState }

func (LocalCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalCopy)(nil)).Elem()
}

func (o LocalCopyOutput) ToLocalCopyOutput() LocalCopyOutput {
	return o
}

func (o LocalCopyOutput) ToLocalCopyOutputWithContext(ctx context.Context) LocalCopyOutput {
	return o
}

func (o LocalCopyOutput) ToLocalCopyPtrOutput() LocalCopyPtrOutput {
	return o.ToLocalCopyPtrOutputWithContext(context.Background())
}

func (o LocalCopyOutput) ToLocalCopyPtrOutputWithContext(ctx context.Context) LocalCopyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalCopy) *LocalCopy {
		return &v
	}).(LocalCopyPtrOutput)
}

// The name of the disk where this parameter is located. Can be the name of one of the disks specified in the Resources field, or "boot", which represents the Docker instance's boot disk and has a mount point of `/`.
func (o LocalCopyOutput) Disk() pulumi.StringOutput {
	return o.ApplyT(func(v LocalCopy) string { return v.Disk }).(pulumi.StringOutput)
}

// The path within the user's docker container where this input should be localized to and from, relative to the specified disk's mount point. For example: file.txt,
func (o LocalCopyOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LocalCopy) string { return v.Path }).(pulumi.StringOutput)
}

type LocalCopyPtrOutput struct{ *pulumi.OutputState }

func (LocalCopyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalCopy)(nil)).Elem()
}

func (o LocalCopyPtrOutput) ToLocalCopyPtrOutput() LocalCopyPtrOutput {
	return o
}

func (o LocalCopyPtrOutput) ToLocalCopyPtrOutputWithContext(ctx context.Context) LocalCopyPtrOutput {
	return o
}

func (o LocalCopyPtrOutput) Elem() LocalCopyOutput {
	return o.ApplyT(func(v *LocalCopy) LocalCopy {
		if v != nil {
			return *v
		}
		var ret LocalCopy
		return ret
	}).(LocalCopyOutput)
}

// The name of the disk where this parameter is located. Can be the name of one of the disks specified in the Resources field, or "boot", which represents the Docker instance's boot disk and has a mount point of `/`.
func (o LocalCopyPtrOutput) Disk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalCopy) *string {
		if v == nil {
			return nil
		}
		return &v.Disk
	}).(pulumi.StringPtrOutput)
}

// The path within the user's docker container where this input should be localized to and from, relative to the specified disk's mount point. For example: file.txt,
func (o LocalCopyPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalCopy) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// LocalCopy defines how a remote file should be copied to and from the VM.
type LocalCopyResponse struct {
	// The name of the disk where this parameter is located. Can be the name of one of the disks specified in the Resources field, or "boot", which represents the Docker instance's boot disk and has a mount point of `/`.
	Disk string `pulumi:"disk"`
	// The path within the user's docker container where this input should be localized to and from, relative to the specified disk's mount point. For example: file.txt,
	Path string `pulumi:"path"`
}

// LocalCopy defines how a remote file should be copied to and from the VM.
type LocalCopyResponseOutput struct{ *pulumi.OutputState }

func (LocalCopyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalCopyResponse)(nil)).Elem()
}

func (o LocalCopyResponseOutput) ToLocalCopyResponseOutput() LocalCopyResponseOutput {
	return o
}

func (o LocalCopyResponseOutput) ToLocalCopyResponseOutputWithContext(ctx context.Context) LocalCopyResponseOutput {
	return o
}

// The name of the disk where this parameter is located. Can be the name of one of the disks specified in the Resources field, or "boot", which represents the Docker instance's boot disk and has a mount point of `/`.
func (o LocalCopyResponseOutput) Disk() pulumi.StringOutput {
	return o.ApplyT(func(v LocalCopyResponse) string { return v.Disk }).(pulumi.StringOutput)
}

// The path within the user's docker container where this input should be localized to and from, relative to the specified disk's mount point. For example: file.txt,
func (o LocalCopyResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LocalCopyResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Parameters facilitate setting and delivering data into the pipeline's execution environment. They are defined at create time, with optional defaults, and can be overridden at run time. If `localCopy` is unset, then the parameter specifies a string that is passed as-is into the pipeline, as the value of the environment variable with the given name. A default value can be optionally specified at create time. The default can be overridden at run time using the inputs map. If no default is given, a value must be supplied at runtime. If `localCopy` is defined, then the parameter specifies a data source or sink, both in Google Cloud Storage and on the Docker container where the pipeline computation is run. The service account associated with the Pipeline (by default the project's Compute Engine service account) must have access to the Google Cloud Storage paths. At run time, the Google Cloud Storage paths can be overridden if a default was provided at create time, or must be set otherwise. The pipeline runner should add a key/value pair to either the inputs or outputs map. The indicated data copies will be carried out before/after pipeline execution, just as if the corresponding arguments were provided to `gsutil cp`. For example: Given the following `PipelineParameter`, specified in the `inputParameters` list: ```{name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}}``` where `disk` is defined in the `PipelineResources` object as: ```{name: "pd1", mountPoint: "/mnt/disk/"}``` We create a disk named `pd1`, mount it on the host VM, and map `/mnt/pd1` to `/mnt/disk` in the docker container. At runtime, an entry for `input_file` would be required in the inputs map, such as: ```inputs["input_file"] = "gs://my-bucket/bar.txt"``` This would generate the following gsutil call: ```gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt``` The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the Docker container. Acceptable paths are: Google Cloud storage pathLocal path file file glob directory For outputs, the direction of the copy is reversed: ```gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt``` Acceptable paths are: Local pathGoogle Cloud Storage path file file file directory - directory must already exist glob directory - directory will be created if it doesn't exist One restriction due to docker limitations, is that for outputs that are found on the boot disk, the local path cannot be a glob and must be a file.
type PipelineParameter struct {
	// The default value for this parameter. Can be overridden at runtime. If `localCopy` is present, then this must be a Google Cloud Storage path beginning with `gs://`.
	DefaultValue *string `pulumi:"defaultValue"`
	// Human-readable description.
	Description *string `pulumi:"description"`
	// If present, this parameter is marked for copying to and from the VM. `LocalCopy` indicates where on the VM the file should be. The value given to this parameter (either at runtime or using `defaultValue`) must be the remote path where the file should be.
	LocalCopy *LocalCopy `pulumi:"localCopy"`
	// Name of the parameter - the pipeline runner uses this string as the key to the input and output maps in RunPipeline.
	Name string `pulumi:"name"`
}

// PipelineParameterInput is an input type that accepts PipelineParameterArgs and PipelineParameterOutput values.
// You can construct a concrete instance of `PipelineParameterInput` via:
//
//	PipelineParameterArgs{...}
type PipelineParameterInput interface {
	pulumi.Input

	ToPipelineParameterOutput() PipelineParameterOutput
	ToPipelineParameterOutputWithContext(context.Context) PipelineParameterOutput
}

// Parameters facilitate setting and delivering data into the pipeline's execution environment. They are defined at create time, with optional defaults, and can be overridden at run time. If `localCopy` is unset, then the parameter specifies a string that is passed as-is into the pipeline, as the value of the environment variable with the given name. A default value can be optionally specified at create time. The default can be overridden at run time using the inputs map. If no default is given, a value must be supplied at runtime. If `localCopy` is defined, then the parameter specifies a data source or sink, both in Google Cloud Storage and on the Docker container where the pipeline computation is run. The service account associated with the Pipeline (by default the project's Compute Engine service account) must have access to the Google Cloud Storage paths. At run time, the Google Cloud Storage paths can be overridden if a default was provided at create time, or must be set otherwise. The pipeline runner should add a key/value pair to either the inputs or outputs map. The indicated data copies will be carried out before/after pipeline execution, just as if the corresponding arguments were provided to `gsutil cp`. For example: Given the following `PipelineParameter`, specified in the `inputParameters` list: ```{name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}}``` where `disk` is defined in the `PipelineResources` object as: ```{name: "pd1", mountPoint: "/mnt/disk/"}``` We create a disk named `pd1`, mount it on the host VM, and map `/mnt/pd1` to `/mnt/disk` in the docker container. At runtime, an entry for `input_file` would be required in the inputs map, such as: ```inputs["input_file"] = "gs://my-bucket/bar.txt"``` This would generate the following gsutil call: ```gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt``` The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the Docker container. Acceptable paths are: Google Cloud storage pathLocal path file file glob directory For outputs, the direction of the copy is reversed: ```gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt``` Acceptable paths are: Local pathGoogle Cloud Storage path file file file directory - directory must already exist glob directory - directory will be created if it doesn't exist One restriction due to docker limitations, is that for outputs that are found on the boot disk, the local path cannot be a glob and must be a file.
type PipelineParameterArgs struct {
	// The default value for this parameter. Can be overridden at runtime. If `localCopy` is present, then this must be a Google Cloud Storage path beginning with `gs://`.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// Human-readable description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If present, this parameter is marked for copying to and from the VM. `LocalCopy` indicates where on the VM the file should be. The value given to this parameter (either at runtime or using `defaultValue`) must be the remote path where the file should be.
	LocalCopy LocalCopyPtrInput `pulumi:"localCopy"`
	// Name of the parameter - the pipeline runner uses this string as the key to the input and output maps in RunPipeline.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PipelineParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineParameter)(nil)).Elem()
}

func (i PipelineParameterArgs) ToPipelineParameterOutput() PipelineParameterOutput {
	return i.ToPipelineParameterOutputWithContext(context.Background())
}

func (i PipelineParameterArgs) ToPipelineParameterOutputWithContext(ctx context.Context) PipelineParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineParameterOutput)
}

// PipelineParameterArrayInput is an input type that accepts PipelineParameterArray and PipelineParameterArrayOutput values.
// You can construct a concrete instance of `PipelineParameterArrayInput` via:
//
//	PipelineParameterArray{ PipelineParameterArgs{...} }
type PipelineParameterArrayInput interface {
	pulumi.Input

	ToPipelineParameterArrayOutput() PipelineParameterArrayOutput
	ToPipelineParameterArrayOutputWithContext(context.Context) PipelineParameterArrayOutput
}

type PipelineParameterArray []PipelineParameterInput

func (PipelineParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineParameter)(nil)).Elem()
}

func (i PipelineParameterArray) ToPipelineParameterArrayOutput() PipelineParameterArrayOutput {
	return i.ToPipelineParameterArrayOutputWithContext(context.Background())
}

func (i PipelineParameterArray) ToPipelineParameterArrayOutputWithContext(ctx context.Context) PipelineParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineParameterArrayOutput)
}

// Parameters facilitate setting and delivering data into the pipeline's execution environment. They are defined at create time, with optional defaults, and can be overridden at run time. If `localCopy` is unset, then the parameter specifies a string that is passed as-is into the pipeline, as the value of the environment variable with the given name. A default value can be optionally specified at create time. The default can be overridden at run time using the inputs map. If no default is given, a value must be supplied at runtime. If `localCopy` is defined, then the parameter specifies a data source or sink, both in Google Cloud Storage and on the Docker container where the pipeline computation is run. The service account associated with the Pipeline (by default the project's Compute Engine service account) must have access to the Google Cloud Storage paths. At run time, the Google Cloud Storage paths can be overridden if a default was provided at create time, or must be set otherwise. The pipeline runner should add a key/value pair to either the inputs or outputs map. The indicated data copies will be carried out before/after pipeline execution, just as if the corresponding arguments were provided to `gsutil cp`. For example: Given the following `PipelineParameter`, specified in the `inputParameters` list: ```{name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}}``` where `disk` is defined in the `PipelineResources` object as: ```{name: "pd1", mountPoint: "/mnt/disk/"}``` We create a disk named `pd1`, mount it on the host VM, and map `/mnt/pd1` to `/mnt/disk` in the docker container. At runtime, an entry for `input_file` would be required in the inputs map, such as: ```inputs["input_file"] = "gs://my-bucket/bar.txt"``` This would generate the following gsutil call: ```gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt``` The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the Docker container. Acceptable paths are: Google Cloud storage pathLocal path file file glob directory For outputs, the direction of the copy is reversed: ```gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt``` Acceptable paths are: Local pathGoogle Cloud Storage path file file file directory - directory must already exist glob directory - directory will be created if it doesn't exist One restriction due to docker limitations, is that for outputs that are found on the boot disk, the local path cannot be a glob and must be a file.
type PipelineParameterOutput struct{ *pulumi.OutputState }

func (PipelineParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineParameter)(nil)).Elem()
}

func (o PipelineParameterOutput) ToPipelineParameterOutput() PipelineParameterOutput {
	return o
}

func (o PipelineParameterOutput) ToPipelineParameterOutputWithContext(ctx context.Context) PipelineParameterOutput {
	return o
}

// The default value for this parameter. Can be overridden at runtime. If `localCopy` is present, then this must be a Google Cloud Storage path beginning with `gs://`.
func (o PipelineParameterOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineParameter) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// Human-readable description.
func (o PipelineParameterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineParameter) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If present, this parameter is marked for copying to and from the VM. `LocalCopy` indicates where on the VM the file should be. The value given to this parameter (either at runtime or using `defaultValue`) must be the remote path where the file should be.
func (o PipelineParameterOutput) LocalCopy() LocalCopyPtrOutput {
	return o.ApplyT(func(v PipelineParameter) *LocalCopy { return v.LocalCopy }).(LocalCopyPtrOutput)
}

// Name of the parameter - the pipeline runner uses this string as the key to the input and output maps in RunPipeline.
func (o PipelineParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineParameter) string { return v.Name }).(pulumi.StringOutput)
}

type PipelineParameterArrayOutput struct{ *pulumi.OutputState }

func (PipelineParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineParameter)(nil)).Elem()
}

func (o PipelineParameterArrayOutput) ToPipelineParameterArrayOutput() PipelineParameterArrayOutput {
	return o
}

func (o PipelineParameterArrayOutput) ToPipelineParameterArrayOutputWithContext(ctx context.Context) PipelineParameterArrayOutput {
	return o
}

func (o PipelineParameterArrayOutput) Index(i pulumi.IntInput) PipelineParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineParameter {
		return vs[0].([]PipelineParameter)[vs[1].(int)]
	}).(PipelineParameterOutput)
}

// Parameters facilitate setting and delivering data into the pipeline's execution environment. They are defined at create time, with optional defaults, and can be overridden at run time. If `localCopy` is unset, then the parameter specifies a string that is passed as-is into the pipeline, as the value of the environment variable with the given name. A default value can be optionally specified at create time. The default can be overridden at run time using the inputs map. If no default is given, a value must be supplied at runtime. If `localCopy` is defined, then the parameter specifies a data source or sink, both in Google Cloud Storage and on the Docker container where the pipeline computation is run. The service account associated with the Pipeline (by default the project's Compute Engine service account) must have access to the Google Cloud Storage paths. At run time, the Google Cloud Storage paths can be overridden if a default was provided at create time, or must be set otherwise. The pipeline runner should add a key/value pair to either the inputs or outputs map. The indicated data copies will be carried out before/after pipeline execution, just as if the corresponding arguments were provided to `gsutil cp`. For example: Given the following `PipelineParameter`, specified in the `inputParameters` list: ```{name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}}``` where `disk` is defined in the `PipelineResources` object as: ```{name: "pd1", mountPoint: "/mnt/disk/"}``` We create a disk named `pd1`, mount it on the host VM, and map `/mnt/pd1` to `/mnt/disk` in the docker container. At runtime, an entry for `input_file` would be required in the inputs map, such as: ```inputs["input_file"] = "gs://my-bucket/bar.txt"``` This would generate the following gsutil call: ```gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt``` The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the Docker container. Acceptable paths are: Google Cloud storage pathLocal path file file glob directory For outputs, the direction of the copy is reversed: ```gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt``` Acceptable paths are: Local pathGoogle Cloud Storage path file file file directory - directory must already exist glob directory - directory will be created if it doesn't exist One restriction due to docker limitations, is that for outputs that are found on the boot disk, the local path cannot be a glob and must be a file.
type PipelineParameterResponse struct {
	// The default value for this parameter. Can be overridden at runtime. If `localCopy` is present, then this must be a Google Cloud Storage path beginning with `gs://`.
	DefaultValue string `pulumi:"defaultValue"`
	// Human-readable description.
	Description string `pulumi:"description"`
	// If present, this parameter is marked for copying to and from the VM. `LocalCopy` indicates where on the VM the file should be. The value given to this parameter (either at runtime or using `defaultValue`) must be the remote path where the file should be.
	LocalCopy LocalCopyResponse `pulumi:"localCopy"`
	// Name of the parameter - the pipeline runner uses this string as the key to the input and output maps in RunPipeline.
	Name string `pulumi:"name"`
}

// Parameters facilitate setting and delivering data into the pipeline's execution environment. They are defined at create time, with optional defaults, and can be overridden at run time. If `localCopy` is unset, then the parameter specifies a string that is passed as-is into the pipeline, as the value of the environment variable with the given name. A default value can be optionally specified at create time. The default can be overridden at run time using the inputs map. If no default is given, a value must be supplied at runtime. If `localCopy` is defined, then the parameter specifies a data source or sink, both in Google Cloud Storage and on the Docker container where the pipeline computation is run. The service account associated with the Pipeline (by default the project's Compute Engine service account) must have access to the Google Cloud Storage paths. At run time, the Google Cloud Storage paths can be overridden if a default was provided at create time, or must be set otherwise. The pipeline runner should add a key/value pair to either the inputs or outputs map. The indicated data copies will be carried out before/after pipeline execution, just as if the corresponding arguments were provided to `gsutil cp`. For example: Given the following `PipelineParameter`, specified in the `inputParameters` list: ```{name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}}``` where `disk` is defined in the `PipelineResources` object as: ```{name: "pd1", mountPoint: "/mnt/disk/"}``` We create a disk named `pd1`, mount it on the host VM, and map `/mnt/pd1` to `/mnt/disk` in the docker container. At runtime, an entry for `input_file` would be required in the inputs map, such as: ```inputs["input_file"] = "gs://my-bucket/bar.txt"``` This would generate the following gsutil call: ```gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt``` The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the Docker container. Acceptable paths are: Google Cloud storage pathLocal path file file glob directory For outputs, the direction of the copy is reversed: ```gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt``` Acceptable paths are: Local pathGoogle Cloud Storage path file file file directory - directory must already exist glob directory - directory will be created if it doesn't exist One restriction due to docker limitations, is that for outputs that are found on the boot disk, the local path cannot be a glob and must be a file.
type PipelineParameterResponseOutput struct{ *pulumi.OutputState }

func (PipelineParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineParameterResponse)(nil)).Elem()
}

func (o PipelineParameterResponseOutput) ToPipelineParameterResponseOutput() PipelineParameterResponseOutput {
	return o
}

func (o PipelineParameterResponseOutput) ToPipelineParameterResponseOutputWithContext(ctx context.Context) PipelineParameterResponseOutput {
	return o
}

// The default value for this parameter. Can be overridden at runtime. If `localCopy` is present, then this must be a Google Cloud Storage path beginning with `gs://`.
func (o PipelineParameterResponseOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineParameterResponse) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// Human-readable description.
func (o PipelineParameterResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineParameterResponse) string { return v.Description }).(pulumi.StringOutput)
}

// If present, this parameter is marked for copying to and from the VM. `LocalCopy` indicates where on the VM the file should be. The value given to this parameter (either at runtime or using `defaultValue`) must be the remote path where the file should be.
func (o PipelineParameterResponseOutput) LocalCopy() LocalCopyResponseOutput {
	return o.ApplyT(func(v PipelineParameterResponse) LocalCopyResponse { return v.LocalCopy }).(LocalCopyResponseOutput)
}

// Name of the parameter - the pipeline runner uses this string as the key to the input and output maps in RunPipeline.
func (o PipelineParameterResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineParameterResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PipelineParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (PipelineParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineParameterResponse)(nil)).Elem()
}

func (o PipelineParameterResponseArrayOutput) ToPipelineParameterResponseArrayOutput() PipelineParameterResponseArrayOutput {
	return o
}

func (o PipelineParameterResponseArrayOutput) ToPipelineParameterResponseArrayOutputWithContext(ctx context.Context) PipelineParameterResponseArrayOutput {
	return o
}

func (o PipelineParameterResponseArrayOutput) Index(i pulumi.IntInput) PipelineParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineParameterResponse {
		return vs[0].([]PipelineParameterResponse)[vs[1].(int)]
	}).(PipelineParameterResponseOutput)
}

// The system resources for the pipeline run.
type PipelineResources struct {
	// Optional. The number of accelerators of the specified type to attach. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
	AcceleratorCount *string `pulumi:"acceleratorCount"`
	// Optional. The Compute Engine defined accelerator type. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit. Please see https://cloud.google.com/compute/docs/gpus/ for a list of available accelerator types.
	AcceleratorType *string `pulumi:"acceleratorType"`
	// The size of the boot disk. Defaults to 10 (GB).
	BootDiskSizeGb *int `pulumi:"bootDiskSizeGb"`
	// Disks to attach.
	Disks []Disk `pulumi:"disks"`
	// The minimum number of cores to use. Defaults to 1.
	MinimumCpuCores *int `pulumi:"minimumCpuCores"`
	// The minimum amount of RAM to use. Defaults to 3.75 (GB)
	MinimumRamGb *float64 `pulumi:"minimumRamGb"`
	// Whether to assign an external IP to the instance. This is an experimental feature that may go away. Defaults to false. Corresponds to `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create). In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time. If you need to ssh into a private IP VM for debugging, you can ssh to a public VM and then ssh into the private VM's Internal IP. If noAddress is set, this pipeline run may only load docker images from Google Container Registry and not Docker Hub. Before using this, you must [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
	NoAddress *bool `pulumi:"noAddress"`
	// Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
	Preemptible *bool `pulumi:"preemptible"`
	// List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
	Zones []string `pulumi:"zones"`
}

// PipelineResourcesInput is an input type that accepts PipelineResourcesArgs and PipelineResourcesOutput values.
// You can construct a concrete instance of `PipelineResourcesInput` via:
//
//	PipelineResourcesArgs{...}
type PipelineResourcesInput interface {
	pulumi.Input

	ToPipelineResourcesOutput() PipelineResourcesOutput
	ToPipelineResourcesOutputWithContext(context.Context) PipelineResourcesOutput
}

// The system resources for the pipeline run.
type PipelineResourcesArgs struct {
	// Optional. The number of accelerators of the specified type to attach. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
	AcceleratorCount pulumi.StringPtrInput `pulumi:"acceleratorCount"`
	// Optional. The Compute Engine defined accelerator type. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit. Please see https://cloud.google.com/compute/docs/gpus/ for a list of available accelerator types.
	AcceleratorType pulumi.StringPtrInput `pulumi:"acceleratorType"`
	// The size of the boot disk. Defaults to 10 (GB).
	BootDiskSizeGb pulumi.IntPtrInput `pulumi:"bootDiskSizeGb"`
	// Disks to attach.
	Disks DiskArrayInput `pulumi:"disks"`
	// The minimum number of cores to use. Defaults to 1.
	MinimumCpuCores pulumi.IntPtrInput `pulumi:"minimumCpuCores"`
	// The minimum amount of RAM to use. Defaults to 3.75 (GB)
	MinimumRamGb pulumi.Float64PtrInput `pulumi:"minimumRamGb"`
	// Whether to assign an external IP to the instance. This is an experimental feature that may go away. Defaults to false. Corresponds to `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create). In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time. If you need to ssh into a private IP VM for debugging, you can ssh to a public VM and then ssh into the private VM's Internal IP. If noAddress is set, this pipeline run may only load docker images from Google Container Registry and not Docker Hub. Before using this, you must [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
	NoAddress pulumi.BoolPtrInput `pulumi:"noAddress"`
	// Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
	Preemptible pulumi.BoolPtrInput `pulumi:"preemptible"`
	// List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (PipelineResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResources)(nil)).Elem()
}

func (i PipelineResourcesArgs) ToPipelineResourcesOutput() PipelineResourcesOutput {
	return i.ToPipelineResourcesOutputWithContext(context.Background())
}

func (i PipelineResourcesArgs) ToPipelineResourcesOutputWithContext(ctx context.Context) PipelineResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResourcesOutput)
}

// The system resources for the pipeline run.
type PipelineResourcesOutput struct{ *pulumi.OutputState }

func (PipelineResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResources)(nil)).Elem()
}

func (o PipelineResourcesOutput) ToPipelineResourcesOutput() PipelineResourcesOutput {
	return o
}

func (o PipelineResourcesOutput) ToPipelineResourcesOutputWithContext(ctx context.Context) PipelineResourcesOutput {
	return o
}

// Optional. The number of accelerators of the specified type to attach. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
func (o PipelineResourcesOutput) AcceleratorCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineResources) *string { return v.AcceleratorCount }).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine defined accelerator type. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit. Please see https://cloud.google.com/compute/docs/gpus/ for a list of available accelerator types.
func (o PipelineResourcesOutput) AcceleratorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineResources) *string { return v.AcceleratorType }).(pulumi.StringPtrOutput)
}

// The size of the boot disk. Defaults to 10 (GB).
func (o PipelineResourcesOutput) BootDiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineResources) *int { return v.BootDiskSizeGb }).(pulumi.IntPtrOutput)
}

// Disks to attach.
func (o PipelineResourcesOutput) Disks() DiskArrayOutput {
	return o.ApplyT(func(v PipelineResources) []Disk { return v.Disks }).(DiskArrayOutput)
}

// The minimum number of cores to use. Defaults to 1.
func (o PipelineResourcesOutput) MinimumCpuCores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineResources) *int { return v.MinimumCpuCores }).(pulumi.IntPtrOutput)
}

// The minimum amount of RAM to use. Defaults to 3.75 (GB)
func (o PipelineResourcesOutput) MinimumRamGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v PipelineResources) *float64 { return v.MinimumRamGb }).(pulumi.Float64PtrOutput)
}

// Whether to assign an external IP to the instance. This is an experimental feature that may go away. Defaults to false. Corresponds to `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create). In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time. If you need to ssh into a private IP VM for debugging, you can ssh to a public VM and then ssh into the private VM's Internal IP. If noAddress is set, this pipeline run may only load docker images from Google Container Registry and not Docker Hub. Before using this, you must [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
func (o PipelineResourcesOutput) NoAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineResources) *bool { return v.NoAddress }).(pulumi.BoolPtrOutput)
}

// Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
func (o PipelineResourcesOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineResources) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

// List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
func (o PipelineResourcesOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineResources) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

// The system resources for the pipeline run.
type PipelineResourcesResponse struct {
	// Optional. The number of accelerators of the specified type to attach. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
	AcceleratorCount string `pulumi:"acceleratorCount"`
	// Optional. The Compute Engine defined accelerator type. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit. Please see https://cloud.google.com/compute/docs/gpus/ for a list of available accelerator types.
	AcceleratorType string `pulumi:"acceleratorType"`
	// The size of the boot disk. Defaults to 10 (GB).
	BootDiskSizeGb int `pulumi:"bootDiskSizeGb"`
	// Disks to attach.
	Disks []DiskResponse `pulumi:"disks"`
	// The minimum number of cores to use. Defaults to 1.
	MinimumCpuCores int `pulumi:"minimumCpuCores"`
	// The minimum amount of RAM to use. Defaults to 3.75 (GB)
	MinimumRamGb float64 `pulumi:"minimumRamGb"`
	// Whether to assign an external IP to the instance. This is an experimental feature that may go away. Defaults to false. Corresponds to `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create). In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time. If you need to ssh into a private IP VM for debugging, you can ssh to a public VM and then ssh into the private VM's Internal IP. If noAddress is set, this pipeline run may only load docker images from Google Container Registry and not Docker Hub. Before using this, you must [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
	NoAddress bool `pulumi:"noAddress"`
	// Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
	Preemptible bool `pulumi:"preemptible"`
	// List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
	Zones []string `pulumi:"zones"`
}

// The system resources for the pipeline run.
type PipelineResourcesResponseOutput struct{ *pulumi.OutputState }

func (PipelineResourcesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResourcesResponse)(nil)).Elem()
}

func (o PipelineResourcesResponseOutput) ToPipelineResourcesResponseOutput() PipelineResourcesResponseOutput {
	return o
}

func (o PipelineResourcesResponseOutput) ToPipelineResourcesResponseOutputWithContext(ctx context.Context) PipelineResourcesResponseOutput {
	return o
}

// Optional. The number of accelerators of the specified type to attach. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
func (o PipelineResourcesResponseOutput) AcceleratorCount() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineResourcesResponse) string { return v.AcceleratorCount }).(pulumi.StringOutput)
}

// Optional. The Compute Engine defined accelerator type. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit. Please see https://cloud.google.com/compute/docs/gpus/ for a list of available accelerator types.
func (o PipelineResourcesResponseOutput) AcceleratorType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineResourcesResponse) string { return v.AcceleratorType }).(pulumi.StringOutput)
}

// The size of the boot disk. Defaults to 10 (GB).
func (o PipelineResourcesResponseOutput) BootDiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v PipelineResourcesResponse) int { return v.BootDiskSizeGb }).(pulumi.IntOutput)
}

// Disks to attach.
func (o PipelineResourcesResponseOutput) Disks() DiskResponseArrayOutput {
	return o.ApplyT(func(v PipelineResourcesResponse) []DiskResponse { return v.Disks }).(DiskResponseArrayOutput)
}

// The minimum number of cores to use. Defaults to 1.
func (o PipelineResourcesResponseOutput) MinimumCpuCores() pulumi.IntOutput {
	return o.ApplyT(func(v PipelineResourcesResponse) int { return v.MinimumCpuCores }).(pulumi.IntOutput)
}

// The minimum amount of RAM to use. Defaults to 3.75 (GB)
func (o PipelineResourcesResponseOutput) MinimumRamGb() pulumi.Float64Output {
	return o.ApplyT(func(v PipelineResourcesResponse) float64 { return v.MinimumRamGb }).(pulumi.Float64Output)
}

// Whether to assign an external IP to the instance. This is an experimental feature that may go away. Defaults to false. Corresponds to `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create). In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time. If you need to ssh into a private IP VM for debugging, you can ssh to a public VM and then ssh into the private VM's Internal IP. If noAddress is set, this pipeline run may only load docker images from Google Container Registry and not Docker Hub. Before using this, you must [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
func (o PipelineResourcesResponseOutput) NoAddress() pulumi.BoolOutput {
	return o.ApplyT(func(v PipelineResourcesResponse) bool { return v.NoAddress }).(pulumi.BoolOutput)
}

// Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
func (o PipelineResourcesResponseOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v PipelineResourcesResponse) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

// List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
func (o PipelineResourcesResponseOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineResourcesResponse) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiskInput)(nil)).Elem(), DiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskArrayInput)(nil)).Elem(), DiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerExecutorInput)(nil)).Elem(), DockerExecutorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerExecutorPtrInput)(nil)).Elem(), DockerExecutorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalCopyInput)(nil)).Elem(), LocalCopyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalCopyPtrInput)(nil)).Elem(), LocalCopyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineParameterInput)(nil)).Elem(), PipelineParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineParameterArrayInput)(nil)).Elem(), PipelineParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineResourcesInput)(nil)).Elem(), PipelineResourcesArgs{})
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(DiskArrayOutput{})
	pulumi.RegisterOutputType(DiskResponseOutput{})
	pulumi.RegisterOutputType(DiskResponseArrayOutput{})
	pulumi.RegisterOutputType(DockerExecutorOutput{})
	pulumi.RegisterOutputType(DockerExecutorPtrOutput{})
	pulumi.RegisterOutputType(DockerExecutorResponseOutput{})
	pulumi.RegisterOutputType(LocalCopyOutput{})
	pulumi.RegisterOutputType(LocalCopyPtrOutput{})
	pulumi.RegisterOutputType(LocalCopyResponseOutput{})
	pulumi.RegisterOutputType(PipelineParameterOutput{})
	pulumi.RegisterOutputType(PipelineParameterArrayOutput{})
	pulumi.RegisterOutputType(PipelineParameterResponseOutput{})
	pulumi.RegisterOutputType(PipelineParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(PipelineResourcesOutput{})
	pulumi.RegisterOutputType(PipelineResourcesResponseOutput{})
}
