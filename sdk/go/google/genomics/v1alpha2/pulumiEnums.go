// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Required. The type of the disk to create.
type DiskType string

const (
	// Default disk type. Use one of the other options below.
	DiskTypeTypeUnspecified = DiskType("TYPE_UNSPECIFIED")
	// Specifies a Google Compute Engine persistent hard disk. See https://cloud.google.com/compute/docs/disks/#pdspecs for details.
	DiskTypePersistentHdd = DiskType("PERSISTENT_HDD")
	// Specifies a Google Compute Engine persistent solid-state disk. See https://cloud.google.com/compute/docs/disks/#pdspecs for details.
	DiskTypePersistentSsd = DiskType("PERSISTENT_SSD")
	// Specifies a Google Compute Engine local SSD. See https://cloud.google.com/compute/docs/disks/local-ssd for details.
	DiskTypeLocalSsd = DiskType("LOCAL_SSD")
)

func (DiskType) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskType)(nil)).Elem()
}

func (e DiskType) ToDiskTypeOutput() DiskTypeOutput {
	return pulumi.ToOutput(e).(DiskTypeOutput)
}

func (e DiskType) ToDiskTypeOutputWithContext(ctx context.Context) DiskTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiskTypeOutput)
}

func (e DiskType) ToDiskTypePtrOutput() DiskTypePtrOutput {
	return e.ToDiskTypePtrOutputWithContext(context.Background())
}

func (e DiskType) ToDiskTypePtrOutputWithContext(ctx context.Context) DiskTypePtrOutput {
	return DiskType(e).ToDiskTypeOutputWithContext(ctx).ToDiskTypePtrOutputWithContext(ctx)
}

func (e DiskType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiskType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiskTypeOutput struct{ *pulumi.OutputState }

func (DiskTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskType)(nil)).Elem()
}

func (o DiskTypeOutput) ToDiskTypeOutput() DiskTypeOutput {
	return o
}

func (o DiskTypeOutput) ToDiskTypeOutputWithContext(ctx context.Context) DiskTypeOutput {
	return o
}

func (o DiskTypeOutput) ToDiskTypePtrOutput() DiskTypePtrOutput {
	return o.ToDiskTypePtrOutputWithContext(context.Background())
}

func (o DiskTypeOutput) ToDiskTypePtrOutputWithContext(ctx context.Context) DiskTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskType) *DiskType {
		return &v
	}).(DiskTypePtrOutput)
}

func (o DiskTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiskTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiskTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiskTypePtrOutput struct{ *pulumi.OutputState }

func (DiskTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskType)(nil)).Elem()
}

func (o DiskTypePtrOutput) ToDiskTypePtrOutput() DiskTypePtrOutput {
	return o
}

func (o DiskTypePtrOutput) ToDiskTypePtrOutputWithContext(ctx context.Context) DiskTypePtrOutput {
	return o
}

func (o DiskTypePtrOutput) Elem() DiskTypeOutput {
	return o.ApplyT(func(v *DiskType) DiskType {
		if v != nil {
			return *v
		}
		var ret DiskType
		return ret
	}).(DiskTypeOutput)
}

func (o DiskTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiskType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiskTypeInput is an input type that accepts values of the DiskType enum
// A concrete instance of `DiskTypeInput` can be one of the following:
//
//	DiskTypeTypeUnspecified
//	DiskTypePersistentHdd
//	DiskTypePersistentSsd
//	DiskTypeLocalSsd
type DiskTypeInput interface {
	pulumi.Input

	ToDiskTypeOutput() DiskTypeOutput
	ToDiskTypeOutputWithContext(context.Context) DiskTypeOutput
}

var diskTypePtrType = reflect.TypeOf((**DiskType)(nil)).Elem()

type DiskTypePtrInput interface {
	pulumi.Input

	ToDiskTypePtrOutput() DiskTypePtrOutput
	ToDiskTypePtrOutputWithContext(context.Context) DiskTypePtrOutput
}

type diskTypePtr string

func DiskTypePtr(v string) DiskTypePtrInput {
	return (*diskTypePtr)(&v)
}

func (*diskTypePtr) ElementType() reflect.Type {
	return diskTypePtrType
}

func (in *diskTypePtr) ToDiskTypePtrOutput() DiskTypePtrOutput {
	return pulumi.ToOutput(in).(DiskTypePtrOutput)
}

func (in *diskTypePtr) ToDiskTypePtrOutputWithContext(ctx context.Context) DiskTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiskTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiskTypeInput)(nil)).Elem(), DiskType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DiskTypePtrInput)(nil)).Elem(), DiskType("TYPE_UNSPECIFIED"))
	pulumi.RegisterOutputType(DiskTypeOutput{})
	pulumi.RegisterOutputType(DiskTypePtrOutput{})
}
