// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a Submission of a URI suspected of containing phishing content to be reviewed. If the result verifies the existence of malicious phishing content, the site will be added to the [Google's Social Engineering lists](https://support.google.com/webmasters/answer/6350487/) in order to protect users that could get exposed to this threat in the future. Only allowlisted projects can use this method during Early Access. Please reach out to Sales or your customer engineer to obtain access.
type Submission struct {
	pulumi.CustomResourceState
}

// NewSubmission registers a new resource with the given unique name, arguments, and options.
func NewSubmission(ctx *pulumi.Context,
	name string, args *SubmissionArgs, opts ...pulumi.ResourceOption) (*Submission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource Submission
	err := ctx.RegisterResource("google-cloud:webrisk/v1:Submission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubmission gets an existing Submission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubmission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubmissionState, opts ...pulumi.ResourceOption) (*Submission, error) {
	var resource Submission
	err := ctx.ReadResource("google-cloud:webrisk/v1:Submission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Submission resources.
type submissionState struct {
}

type SubmissionState struct {
}

func (SubmissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*submissionState)(nil)).Elem()
}

type submissionArgs struct {
	ProjectsId string `pulumi:"projectsId"`
	// ThreatTypes found to be associated with the submitted URI after reviewing it. This may be empty if the URI was not added to any list.
	ThreatTypes []string `pulumi:"threatTypes"`
	// Required. The URI that is being reported for malicious content to be analyzed.
	Uri *string `pulumi:"uri"`
}

// The set of arguments for constructing a Submission resource.
type SubmissionArgs struct {
	ProjectsId pulumi.StringInput
	// ThreatTypes found to be associated with the submitted URI after reviewing it. This may be empty if the URI was not added to any list.
	ThreatTypes pulumi.StringArrayInput
	// Required. The URI that is being reported for malicious content to be analyzed.
	Uri pulumi.StringPtrInput
}

func (SubmissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*submissionArgs)(nil)).Elem()
}

type SubmissionInput interface {
	pulumi.Input

	ToSubmissionOutput() SubmissionOutput
	ToSubmissionOutputWithContext(ctx context.Context) SubmissionOutput
}

func (*Submission) ElementType() reflect.Type {
	return reflect.TypeOf((*Submission)(nil))
}

func (i *Submission) ToSubmissionOutput() SubmissionOutput {
	return i.ToSubmissionOutputWithContext(context.Background())
}

func (i *Submission) ToSubmissionOutputWithContext(ctx context.Context) SubmissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubmissionOutput)
}

type SubmissionOutput struct {
	*pulumi.OutputState
}

func (SubmissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Submission)(nil))
}

func (o SubmissionOutput) ToSubmissionOutput() SubmissionOutput {
	return o
}

func (o SubmissionOutput) ToSubmissionOutputWithContext(ctx context.Context) SubmissionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SubmissionOutput{})
}
