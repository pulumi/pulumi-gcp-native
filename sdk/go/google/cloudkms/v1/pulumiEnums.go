// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The log type that this config enables.
type AuditLogConfigLogType pulumi.String

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Immutable. The immutable purpose of this CryptoKey.
type CryptoKeyPurpose pulumi.String

const (
	// Not specified.
	CryptoKeyPurposeCryptoKeyPurposeUnspecified = CryptoKeyPurpose("CRYPTO_KEY_PURPOSE_UNSPECIFIED")
	// CryptoKeys with this purpose may be used with Encrypt and Decrypt.
	CryptoKeyPurposeEncryptDecrypt = CryptoKeyPurpose("ENCRYPT_DECRYPT")
	// CryptoKeys with this purpose may be used with AsymmetricSign and GetPublicKey.
	CryptoKeyPurposeAsymmetricSign = CryptoKeyPurpose("ASYMMETRIC_SIGN")
	// CryptoKeys with this purpose may be used with AsymmetricDecrypt and GetPublicKey.
	CryptoKeyPurposeAsymmetricDecrypt = CryptoKeyPurpose("ASYMMETRIC_DECRYPT")
)

func (CryptoKeyPurpose) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CryptoKeyPurpose) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyPurpose) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyPurpose) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CryptoKeyPurpose) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The current state of the CryptoKeyVersion.
type CryptoKeyVersionStateEnum pulumi.String

const (
	// Not specified.
	CryptoKeyVersionStateEnumCryptoKeyVersionStateUnspecified = CryptoKeyVersionStateEnum("CRYPTO_KEY_VERSION_STATE_UNSPECIFIED")
	// This version is still being generated. It may not be used, enabled, disabled, or destroyed yet. Cloud KMS will automatically mark this version ENABLED as soon as the version is ready.
	CryptoKeyVersionStateEnumPendingGeneration = CryptoKeyVersionStateEnum("PENDING_GENERATION")
	// This version may be used for cryptographic operations.
	CryptoKeyVersionStateEnumEnabled = CryptoKeyVersionStateEnum("ENABLED")
	// This version may not be used, but the key material is still available, and the version can be placed back into the ENABLED state.
	CryptoKeyVersionStateEnumDisabled = CryptoKeyVersionStateEnum("DISABLED")
	// This version is destroyed, and the key material is no longer stored.
	CryptoKeyVersionStateEnumDestroyed = CryptoKeyVersionStateEnum("DESTROYED")
	// This version is scheduled for destruction, and will be destroyed soon. Call RestoreCryptoKeyVersion to put it back into the DISABLED state.
	CryptoKeyVersionStateEnumDestroyScheduled = CryptoKeyVersionStateEnum("DESTROY_SCHEDULED")
	// This version is still being imported. It may not be used, enabled, disabled, or destroyed yet. Cloud KMS will automatically mark this version ENABLED as soon as the version is ready.
	CryptoKeyVersionStateEnumPendingImport = CryptoKeyVersionStateEnum("PENDING_IMPORT")
	// This version was not imported successfully. It may not be used, enabled, disabled, or destroyed. The submitted key material has been discarded. Additional details can be found in CryptoKeyVersion.import_failure_reason.
	CryptoKeyVersionStateEnumImportFailed = CryptoKeyVersionStateEnum("IMPORT_FAILED")
)

func (CryptoKeyVersionStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CryptoKeyVersionStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CryptoKeyVersionStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
type CryptoKeyVersionTemplateAlgorithm pulumi.String

const (
	// Not specified.
	CryptoKeyVersionTemplateAlgorithmCryptoKeyVersionAlgorithmUnspecified = CryptoKeyVersionTemplateAlgorithm("CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED")
	// Creates symmetric encryption keys.
	CryptoKeyVersionTemplateAlgorithmGoogleSymmetricEncryption = CryptoKeyVersionTemplateAlgorithm("GOOGLE_SYMMETRIC_ENCRYPTION")
	// RSASSA-PSS 2048 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPss2048Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PSS_2048_SHA256")
	// RSASSA-PSS 3072 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPss3072Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PSS_3072_SHA256")
	// RSASSA-PSS 4096 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPss4096Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PSS_4096_SHA256")
	// RSASSA-PSS 4096 bit key with a SHA512 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPss4096Sha512 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PSS_4096_SHA512")
	// RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPkcs12048Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PKCS1_2048_SHA256")
	// RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPkcs13072Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PKCS1_3072_SHA256")
	// RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPkcs14096Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PKCS1_4096_SHA256")
	// RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPkcs14096Sha512 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PKCS1_4096_SHA512")
	// RSAES-OAEP 2048 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep2048Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_2048_SHA256")
	// RSAES-OAEP 3072 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep3072Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_3072_SHA256")
	// RSAES-OAEP 4096 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep4096Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_4096_SHA256")
	// RSAES-OAEP 4096 bit key with a SHA512 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep4096Sha512 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_4096_SHA512")
	// ECDSA on the NIST P-256 curve with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmEcSignP256Sha256 = CryptoKeyVersionTemplateAlgorithm("EC_SIGN_P256_SHA256")
	// ECDSA on the NIST P-384 curve with a SHA384 digest.
	CryptoKeyVersionTemplateAlgorithmEcSignP384Sha384 = CryptoKeyVersionTemplateAlgorithm("EC_SIGN_P384_SHA384")
	// Algorithm representing symmetric encryption by an external key manager.
	CryptoKeyVersionTemplateAlgorithmExternalSymmetricEncryption = CryptoKeyVersionTemplateAlgorithm("EXTERNAL_SYMMETRIC_ENCRYPTION")
)

func (CryptoKeyVersionTemplateAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CryptoKeyVersionTemplateAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionTemplateAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionTemplateAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CryptoKeyVersionTemplateAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
type CryptoKeyVersionTemplateProtectionLevel pulumi.String

const (
	// Not specified.
	CryptoKeyVersionTemplateProtectionLevelProtectionLevelUnspecified = CryptoKeyVersionTemplateProtectionLevel("PROTECTION_LEVEL_UNSPECIFIED")
	// Crypto operations are performed in software.
	CryptoKeyVersionTemplateProtectionLevelSoftware = CryptoKeyVersionTemplateProtectionLevel("SOFTWARE")
	// Crypto operations are performed in a Hardware Security Module.
	CryptoKeyVersionTemplateProtectionLevelHsm = CryptoKeyVersionTemplateProtectionLevel("HSM")
	// Crypto operations are performed by an external key manager.
	CryptoKeyVersionTemplateProtectionLevelExternal = CryptoKeyVersionTemplateProtectionLevel("EXTERNAL")
)

func (CryptoKeyVersionTemplateProtectionLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. Immutable. The wrapping method to be used for incoming key material.
type ImportJobImportMethod pulumi.String

const (
	// Not specified.
	ImportJobImportMethodImportMethodUnspecified = ImportJobImportMethod("IMPORT_METHOD_UNSPECIFIED")
	// This ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme defined in the PKCS #11 standard. In summary, this involves wrapping the raw key with an ephemeral AES key, and wrapping the ephemeral AES key with a 3072 bit RSA key. For more details, see [RSA AES key wrap mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).
	ImportJobImportMethodRsaOaep3072Sha1Aes256 = ImportJobImportMethod("RSA_OAEP_3072_SHA1_AES_256")
	// This ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme defined in the PKCS #11 standard. In summary, this involves wrapping the raw key with an ephemeral AES key, and wrapping the ephemeral AES key with a 4096 bit RSA key. For more details, see [RSA AES key wrap mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).
	ImportJobImportMethodRsaOaep4096Sha1Aes256 = ImportJobImportMethod("RSA_OAEP_4096_SHA1_AES_256")
)

func (ImportJobImportMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ImportJobImportMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImportJobImportMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImportJobImportMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ImportJobImportMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
type ImportJobProtectionLevel pulumi.String

const (
	// Not specified.
	ImportJobProtectionLevelProtectionLevelUnspecified = ImportJobProtectionLevel("PROTECTION_LEVEL_UNSPECIFIED")
	// Crypto operations are performed in software.
	ImportJobProtectionLevelSoftware = ImportJobProtectionLevel("SOFTWARE")
	// Crypto operations are performed in a Hardware Security Module.
	ImportJobProtectionLevelHsm = ImportJobProtectionLevel("HSM")
	// Crypto operations are performed by an external key manager.
	ImportJobProtectionLevelExternal = ImportJobProtectionLevel("EXTERNAL")
)

func (ImportJobProtectionLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ImportJobProtectionLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImportJobProtectionLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImportJobProtectionLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ImportJobProtectionLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
