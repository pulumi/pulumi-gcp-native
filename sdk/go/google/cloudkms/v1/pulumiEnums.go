// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The log type that this config enables.
type AuditLogConfigLogType string

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return pulumi.ToOutput(e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return e.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return AuditLogConfigLogType(e).ToAuditLogConfigLogTypeOutputWithContext(ctx).ToAuditLogConfigLogTypePtrOutputWithContext(ctx)
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuditLogConfigLogTypeOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuditLogConfigLogType) *AuditLogConfigLogType {
		return &v
	}).(AuditLogConfigLogTypePtrOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuditLogConfigLogTypePtrOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) Elem() AuditLogConfigLogTypeOutput {
	return o.ApplyT(func(v *AuditLogConfigLogType) AuditLogConfigLogType {
		if v != nil {
			return *v
		}
		var ret AuditLogConfigLogType
		return ret
	}).(AuditLogConfigLogTypeOutput)
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuditLogConfigLogType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuditLogConfigLogTypeInput is an input type that accepts AuditLogConfigLogTypeArgs and AuditLogConfigLogTypeOutput values.
// You can construct a concrete instance of `AuditLogConfigLogTypeInput` via:
//
//          AuditLogConfigLogTypeArgs{...}
type AuditLogConfigLogTypeInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput
	ToAuditLogConfigLogTypeOutputWithContext(context.Context) AuditLogConfigLogTypeOutput
}

var auditLogConfigLogTypePtrType = reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()

type AuditLogConfigLogTypePtrInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput
	ToAuditLogConfigLogTypePtrOutputWithContext(context.Context) AuditLogConfigLogTypePtrOutput
}

type auditLogConfigLogTypePtr string

func AuditLogConfigLogTypePtr(v string) AuditLogConfigLogTypePtrInput {
	return (*auditLogConfigLogTypePtr)(&v)
}

func (*auditLogConfigLogTypePtr) ElementType() reflect.Type {
	return auditLogConfigLogTypePtrType
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutput(in).(AuditLogConfigLogTypePtrOutput)
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuditLogConfigLogTypePtrOutput)
}

// Immutable. The immutable purpose of this CryptoKey.
type CryptoKeyPurpose string

const (
	// Not specified.
	CryptoKeyPurposeCryptoKeyPurposeUnspecified = CryptoKeyPurpose("CRYPTO_KEY_PURPOSE_UNSPECIFIED")
	// CryptoKeys with this purpose may be used with Encrypt and Decrypt.
	CryptoKeyPurposeEncryptDecrypt = CryptoKeyPurpose("ENCRYPT_DECRYPT")
	// CryptoKeys with this purpose may be used with AsymmetricSign and GetPublicKey.
	CryptoKeyPurposeAsymmetricSign = CryptoKeyPurpose("ASYMMETRIC_SIGN")
	// CryptoKeys with this purpose may be used with AsymmetricDecrypt and GetPublicKey.
	CryptoKeyPurposeAsymmetricDecrypt = CryptoKeyPurpose("ASYMMETRIC_DECRYPT")
	// CryptoKeys with this purpose may be used with MacSign.
	CryptoKeyPurposeMac = CryptoKeyPurpose("MAC")
)

func (CryptoKeyPurpose) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyPurpose)(nil)).Elem()
}

func (e CryptoKeyPurpose) ToCryptoKeyPurposeOutput() CryptoKeyPurposeOutput {
	return pulumi.ToOutput(e).(CryptoKeyPurposeOutput)
}

func (e CryptoKeyPurpose) ToCryptoKeyPurposeOutputWithContext(ctx context.Context) CryptoKeyPurposeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CryptoKeyPurposeOutput)
}

func (e CryptoKeyPurpose) ToCryptoKeyPurposePtrOutput() CryptoKeyPurposePtrOutput {
	return e.ToCryptoKeyPurposePtrOutputWithContext(context.Background())
}

func (e CryptoKeyPurpose) ToCryptoKeyPurposePtrOutputWithContext(ctx context.Context) CryptoKeyPurposePtrOutput {
	return CryptoKeyPurpose(e).ToCryptoKeyPurposeOutputWithContext(ctx).ToCryptoKeyPurposePtrOutputWithContext(ctx)
}

func (e CryptoKeyPurpose) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyPurpose) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyPurpose) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CryptoKeyPurpose) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CryptoKeyPurposeOutput struct{ *pulumi.OutputState }

func (CryptoKeyPurposeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyPurpose)(nil)).Elem()
}

func (o CryptoKeyPurposeOutput) ToCryptoKeyPurposeOutput() CryptoKeyPurposeOutput {
	return o
}

func (o CryptoKeyPurposeOutput) ToCryptoKeyPurposeOutputWithContext(ctx context.Context) CryptoKeyPurposeOutput {
	return o
}

func (o CryptoKeyPurposeOutput) ToCryptoKeyPurposePtrOutput() CryptoKeyPurposePtrOutput {
	return o.ToCryptoKeyPurposePtrOutputWithContext(context.Background())
}

func (o CryptoKeyPurposeOutput) ToCryptoKeyPurposePtrOutputWithContext(ctx context.Context) CryptoKeyPurposePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyPurpose) *CryptoKeyPurpose {
		return &v
	}).(CryptoKeyPurposePtrOutput)
}

func (o CryptoKeyPurposeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CryptoKeyPurposeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CryptoKeyPurpose) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CryptoKeyPurposeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CryptoKeyPurposeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CryptoKeyPurpose) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyPurposePtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyPurposePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyPurpose)(nil)).Elem()
}

func (o CryptoKeyPurposePtrOutput) ToCryptoKeyPurposePtrOutput() CryptoKeyPurposePtrOutput {
	return o
}

func (o CryptoKeyPurposePtrOutput) ToCryptoKeyPurposePtrOutputWithContext(ctx context.Context) CryptoKeyPurposePtrOutput {
	return o
}

func (o CryptoKeyPurposePtrOutput) Elem() CryptoKeyPurposeOutput {
	return o.ApplyT(func(v *CryptoKeyPurpose) CryptoKeyPurpose {
		if v != nil {
			return *v
		}
		var ret CryptoKeyPurpose
		return ret
	}).(CryptoKeyPurposeOutput)
}

func (o CryptoKeyPurposePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CryptoKeyPurposePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CryptoKeyPurpose) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CryptoKeyPurposeInput is an input type that accepts CryptoKeyPurposeArgs and CryptoKeyPurposeOutput values.
// You can construct a concrete instance of `CryptoKeyPurposeInput` via:
//
//          CryptoKeyPurposeArgs{...}
type CryptoKeyPurposeInput interface {
	pulumi.Input

	ToCryptoKeyPurposeOutput() CryptoKeyPurposeOutput
	ToCryptoKeyPurposeOutputWithContext(context.Context) CryptoKeyPurposeOutput
}

var cryptoKeyPurposePtrType = reflect.TypeOf((**CryptoKeyPurpose)(nil)).Elem()

type CryptoKeyPurposePtrInput interface {
	pulumi.Input

	ToCryptoKeyPurposePtrOutput() CryptoKeyPurposePtrOutput
	ToCryptoKeyPurposePtrOutputWithContext(context.Context) CryptoKeyPurposePtrOutput
}

type cryptoKeyPurposePtr string

func CryptoKeyPurposePtr(v string) CryptoKeyPurposePtrInput {
	return (*cryptoKeyPurposePtr)(&v)
}

func (*cryptoKeyPurposePtr) ElementType() reflect.Type {
	return cryptoKeyPurposePtrType
}

func (in *cryptoKeyPurposePtr) ToCryptoKeyPurposePtrOutput() CryptoKeyPurposePtrOutput {
	return pulumi.ToOutput(in).(CryptoKeyPurposePtrOutput)
}

func (in *cryptoKeyPurposePtr) ToCryptoKeyPurposePtrOutputWithContext(ctx context.Context) CryptoKeyPurposePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CryptoKeyPurposePtrOutput)
}

// The current state of the CryptoKeyVersion.
type CryptoKeyVersionStateEnum string

const (
	// Not specified.
	CryptoKeyVersionStateEnumCryptoKeyVersionStateUnspecified = CryptoKeyVersionStateEnum("CRYPTO_KEY_VERSION_STATE_UNSPECIFIED")
	// This version is still being generated. It may not be used, enabled, disabled, or destroyed yet. Cloud KMS will automatically mark this version ENABLED as soon as the version is ready.
	CryptoKeyVersionStateEnumPendingGeneration = CryptoKeyVersionStateEnum("PENDING_GENERATION")
	// This version may be used for cryptographic operations.
	CryptoKeyVersionStateEnumEnabled = CryptoKeyVersionStateEnum("ENABLED")
	// This version may not be used, but the key material is still available, and the version can be placed back into the ENABLED state.
	CryptoKeyVersionStateEnumDisabled = CryptoKeyVersionStateEnum("DISABLED")
	// This version is destroyed, and the key material is no longer stored. This version may only become ENABLED again if this version is reimport_eligible and the original key material is reimported with a call to KeyManagementService.ImportCryptoKeyVersion.
	CryptoKeyVersionStateEnumDestroyed = CryptoKeyVersionStateEnum("DESTROYED")
	// This version is scheduled for destruction, and will be destroyed soon. Call RestoreCryptoKeyVersion to put it back into the DISABLED state.
	CryptoKeyVersionStateEnumDestroyScheduled = CryptoKeyVersionStateEnum("DESTROY_SCHEDULED")
	// This version is still being imported. It may not be used, enabled, disabled, or destroyed yet. Cloud KMS will automatically mark this version ENABLED as soon as the version is ready.
	CryptoKeyVersionStateEnumPendingImport = CryptoKeyVersionStateEnum("PENDING_IMPORT")
	// This version was not imported successfully. It may not be used, enabled, disabled, or destroyed. The submitted key material has been discarded. Additional details can be found in CryptoKeyVersion.import_failure_reason.
	CryptoKeyVersionStateEnumImportFailed = CryptoKeyVersionStateEnum("IMPORT_FAILED")
)

func (CryptoKeyVersionStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionStateEnum)(nil)).Elem()
}

func (e CryptoKeyVersionStateEnum) ToCryptoKeyVersionStateEnumOutput() CryptoKeyVersionStateEnumOutput {
	return pulumi.ToOutput(e).(CryptoKeyVersionStateEnumOutput)
}

func (e CryptoKeyVersionStateEnum) ToCryptoKeyVersionStateEnumOutputWithContext(ctx context.Context) CryptoKeyVersionStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CryptoKeyVersionStateEnumOutput)
}

func (e CryptoKeyVersionStateEnum) ToCryptoKeyVersionStateEnumPtrOutput() CryptoKeyVersionStateEnumPtrOutput {
	return e.ToCryptoKeyVersionStateEnumPtrOutputWithContext(context.Background())
}

func (e CryptoKeyVersionStateEnum) ToCryptoKeyVersionStateEnumPtrOutputWithContext(ctx context.Context) CryptoKeyVersionStateEnumPtrOutput {
	return CryptoKeyVersionStateEnum(e).ToCryptoKeyVersionStateEnumOutputWithContext(ctx).ToCryptoKeyVersionStateEnumPtrOutputWithContext(ctx)
}

func (e CryptoKeyVersionStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CryptoKeyVersionStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CryptoKeyVersionStateEnumOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionStateEnum)(nil)).Elem()
}

func (o CryptoKeyVersionStateEnumOutput) ToCryptoKeyVersionStateEnumOutput() CryptoKeyVersionStateEnumOutput {
	return o
}

func (o CryptoKeyVersionStateEnumOutput) ToCryptoKeyVersionStateEnumOutputWithContext(ctx context.Context) CryptoKeyVersionStateEnumOutput {
	return o
}

func (o CryptoKeyVersionStateEnumOutput) ToCryptoKeyVersionStateEnumPtrOutput() CryptoKeyVersionStateEnumPtrOutput {
	return o.ToCryptoKeyVersionStateEnumPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionStateEnumOutput) ToCryptoKeyVersionStateEnumPtrOutputWithContext(ctx context.Context) CryptoKeyVersionStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyVersionStateEnum) *CryptoKeyVersionStateEnum {
		return &v
	}).(CryptoKeyVersionStateEnumPtrOutput)
}

func (o CryptoKeyVersionStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CryptoKeyVersionStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CryptoKeyVersionStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CryptoKeyVersionStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CryptoKeyVersionStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionStateEnumPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionStateEnum)(nil)).Elem()
}

func (o CryptoKeyVersionStateEnumPtrOutput) ToCryptoKeyVersionStateEnumPtrOutput() CryptoKeyVersionStateEnumPtrOutput {
	return o
}

func (o CryptoKeyVersionStateEnumPtrOutput) ToCryptoKeyVersionStateEnumPtrOutputWithContext(ctx context.Context) CryptoKeyVersionStateEnumPtrOutput {
	return o
}

func (o CryptoKeyVersionStateEnumPtrOutput) Elem() CryptoKeyVersionStateEnumOutput {
	return o.ApplyT(func(v *CryptoKeyVersionStateEnum) CryptoKeyVersionStateEnum {
		if v != nil {
			return *v
		}
		var ret CryptoKeyVersionStateEnum
		return ret
	}).(CryptoKeyVersionStateEnumOutput)
}

func (o CryptoKeyVersionStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CryptoKeyVersionStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CryptoKeyVersionStateEnumInput is an input type that accepts CryptoKeyVersionStateEnumArgs and CryptoKeyVersionStateEnumOutput values.
// You can construct a concrete instance of `CryptoKeyVersionStateEnumInput` via:
//
//          CryptoKeyVersionStateEnumArgs{...}
type CryptoKeyVersionStateEnumInput interface {
	pulumi.Input

	ToCryptoKeyVersionStateEnumOutput() CryptoKeyVersionStateEnumOutput
	ToCryptoKeyVersionStateEnumOutputWithContext(context.Context) CryptoKeyVersionStateEnumOutput
}

var cryptoKeyVersionStateEnumPtrType = reflect.TypeOf((**CryptoKeyVersionStateEnum)(nil)).Elem()

type CryptoKeyVersionStateEnumPtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionStateEnumPtrOutput() CryptoKeyVersionStateEnumPtrOutput
	ToCryptoKeyVersionStateEnumPtrOutputWithContext(context.Context) CryptoKeyVersionStateEnumPtrOutput
}

type cryptoKeyVersionStateEnumPtr string

func CryptoKeyVersionStateEnumPtr(v string) CryptoKeyVersionStateEnumPtrInput {
	return (*cryptoKeyVersionStateEnumPtr)(&v)
}

func (*cryptoKeyVersionStateEnumPtr) ElementType() reflect.Type {
	return cryptoKeyVersionStateEnumPtrType
}

func (in *cryptoKeyVersionStateEnumPtr) ToCryptoKeyVersionStateEnumPtrOutput() CryptoKeyVersionStateEnumPtrOutput {
	return pulumi.ToOutput(in).(CryptoKeyVersionStateEnumPtrOutput)
}

func (in *cryptoKeyVersionStateEnumPtr) ToCryptoKeyVersionStateEnumPtrOutputWithContext(ctx context.Context) CryptoKeyVersionStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CryptoKeyVersionStateEnumPtrOutput)
}

// Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
type CryptoKeyVersionTemplateAlgorithm string

const (
	// Not specified.
	CryptoKeyVersionTemplateAlgorithmCryptoKeyVersionAlgorithmUnspecified = CryptoKeyVersionTemplateAlgorithm("CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED")
	// Creates symmetric encryption keys.
	CryptoKeyVersionTemplateAlgorithmGoogleSymmetricEncryption = CryptoKeyVersionTemplateAlgorithm("GOOGLE_SYMMETRIC_ENCRYPTION")
	// RSASSA-PSS 2048 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPss2048Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PSS_2048_SHA256")
	// RSASSA-PSS 3072 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPss3072Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PSS_3072_SHA256")
	// RSASSA-PSS 4096 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPss4096Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PSS_4096_SHA256")
	// RSASSA-PSS 4096 bit key with a SHA512 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPss4096Sha512 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PSS_4096_SHA512")
	// RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPkcs12048Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PKCS1_2048_SHA256")
	// RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPkcs13072Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PKCS1_3072_SHA256")
	// RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPkcs14096Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PKCS1_4096_SHA256")
	// RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
	CryptoKeyVersionTemplateAlgorithmRsaSignPkcs14096Sha512 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_PKCS1_4096_SHA512")
	// RSASSA-PKCS1-v1_5 signing without encoding, with a 2048 bit key.
	CryptoKeyVersionTemplateAlgorithmRsaSignRawPkcs12048 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_RAW_PKCS1_2048")
	// RSASSA-PKCS1-v1_5 signing without encoding, with a 3072 bit key.
	CryptoKeyVersionTemplateAlgorithmRsaSignRawPkcs13072 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_RAW_PKCS1_3072")
	// RSASSA-PKCS1-v1_5 signing without encoding, with a 4096 bit key.
	CryptoKeyVersionTemplateAlgorithmRsaSignRawPkcs14096 = CryptoKeyVersionTemplateAlgorithm("RSA_SIGN_RAW_PKCS1_4096")
	// RSAES-OAEP 2048 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep2048Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_2048_SHA256")
	// RSAES-OAEP 3072 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep3072Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_3072_SHA256")
	// RSAES-OAEP 4096 bit key with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep4096Sha256 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_4096_SHA256")
	// RSAES-OAEP 4096 bit key with a SHA512 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep4096Sha512 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_4096_SHA512")
	// RSAES-OAEP 2048 bit key with a SHA1 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep2048Sha1 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_2048_SHA1")
	// RSAES-OAEP 3072 bit key with a SHA1 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep3072Sha1 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_3072_SHA1")
	// RSAES-OAEP 4096 bit key with a SHA1 digest.
	CryptoKeyVersionTemplateAlgorithmRsaDecryptOaep4096Sha1 = CryptoKeyVersionTemplateAlgorithm("RSA_DECRYPT_OAEP_4096_SHA1")
	// ECDSA on the NIST P-256 curve with a SHA256 digest.
	CryptoKeyVersionTemplateAlgorithmEcSignP256Sha256 = CryptoKeyVersionTemplateAlgorithm("EC_SIGN_P256_SHA256")
	// ECDSA on the NIST P-384 curve with a SHA384 digest.
	CryptoKeyVersionTemplateAlgorithmEcSignP384Sha384 = CryptoKeyVersionTemplateAlgorithm("EC_SIGN_P384_SHA384")
	// ECDSA on the non-NIST secp256k1 curve. This curve is only supported for HSM protection level.
	CryptoKeyVersionTemplateAlgorithmEcSignSecp256k1Sha256 = CryptoKeyVersionTemplateAlgorithm("EC_SIGN_SECP256K1_SHA256")
	// HMAC-SHA256 signing with a 256 bit key.
	CryptoKeyVersionTemplateAlgorithmHmacSha256 = CryptoKeyVersionTemplateAlgorithm("HMAC_SHA256")
	// Algorithm representing symmetric encryption by an external key manager.
	CryptoKeyVersionTemplateAlgorithmExternalSymmetricEncryption = CryptoKeyVersionTemplateAlgorithm("EXTERNAL_SYMMETRIC_ENCRYPTION")
)

func (CryptoKeyVersionTemplateAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplateAlgorithm)(nil)).Elem()
}

func (e CryptoKeyVersionTemplateAlgorithm) ToCryptoKeyVersionTemplateAlgorithmOutput() CryptoKeyVersionTemplateAlgorithmOutput {
	return pulumi.ToOutput(e).(CryptoKeyVersionTemplateAlgorithmOutput)
}

func (e CryptoKeyVersionTemplateAlgorithm) ToCryptoKeyVersionTemplateAlgorithmOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CryptoKeyVersionTemplateAlgorithmOutput)
}

func (e CryptoKeyVersionTemplateAlgorithm) ToCryptoKeyVersionTemplateAlgorithmPtrOutput() CryptoKeyVersionTemplateAlgorithmPtrOutput {
	return e.ToCryptoKeyVersionTemplateAlgorithmPtrOutputWithContext(context.Background())
}

func (e CryptoKeyVersionTemplateAlgorithm) ToCryptoKeyVersionTemplateAlgorithmPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateAlgorithmPtrOutput {
	return CryptoKeyVersionTemplateAlgorithm(e).ToCryptoKeyVersionTemplateAlgorithmOutputWithContext(ctx).ToCryptoKeyVersionTemplateAlgorithmPtrOutputWithContext(ctx)
}

func (e CryptoKeyVersionTemplateAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionTemplateAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionTemplateAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CryptoKeyVersionTemplateAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CryptoKeyVersionTemplateAlgorithmOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplateAlgorithm)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateAlgorithmOutput) ToCryptoKeyVersionTemplateAlgorithmOutput() CryptoKeyVersionTemplateAlgorithmOutput {
	return o
}

func (o CryptoKeyVersionTemplateAlgorithmOutput) ToCryptoKeyVersionTemplateAlgorithmOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateAlgorithmOutput {
	return o
}

func (o CryptoKeyVersionTemplateAlgorithmOutput) ToCryptoKeyVersionTemplateAlgorithmPtrOutput() CryptoKeyVersionTemplateAlgorithmPtrOutput {
	return o.ToCryptoKeyVersionTemplateAlgorithmPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateAlgorithmOutput) ToCryptoKeyVersionTemplateAlgorithmPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyVersionTemplateAlgorithm) *CryptoKeyVersionTemplateAlgorithm {
		return &v
	}).(CryptoKeyVersionTemplateAlgorithmPtrOutput)
}

func (o CryptoKeyVersionTemplateAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CryptoKeyVersionTemplateAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CryptoKeyVersionTemplateAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CryptoKeyVersionTemplateAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplateAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplateAlgorithm)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateAlgorithmPtrOutput) ToCryptoKeyVersionTemplateAlgorithmPtrOutput() CryptoKeyVersionTemplateAlgorithmPtrOutput {
	return o
}

func (o CryptoKeyVersionTemplateAlgorithmPtrOutput) ToCryptoKeyVersionTemplateAlgorithmPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateAlgorithmPtrOutput {
	return o
}

func (o CryptoKeyVersionTemplateAlgorithmPtrOutput) Elem() CryptoKeyVersionTemplateAlgorithmOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplateAlgorithm) CryptoKeyVersionTemplateAlgorithm {
		if v != nil {
			return *v
		}
		var ret CryptoKeyVersionTemplateAlgorithm
		return ret
	}).(CryptoKeyVersionTemplateAlgorithmOutput)
}

func (o CryptoKeyVersionTemplateAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CryptoKeyVersionTemplateAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CryptoKeyVersionTemplateAlgorithmInput is an input type that accepts CryptoKeyVersionTemplateAlgorithmArgs and CryptoKeyVersionTemplateAlgorithmOutput values.
// You can construct a concrete instance of `CryptoKeyVersionTemplateAlgorithmInput` via:
//
//          CryptoKeyVersionTemplateAlgorithmArgs{...}
type CryptoKeyVersionTemplateAlgorithmInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateAlgorithmOutput() CryptoKeyVersionTemplateAlgorithmOutput
	ToCryptoKeyVersionTemplateAlgorithmOutputWithContext(context.Context) CryptoKeyVersionTemplateAlgorithmOutput
}

var cryptoKeyVersionTemplateAlgorithmPtrType = reflect.TypeOf((**CryptoKeyVersionTemplateAlgorithm)(nil)).Elem()

type CryptoKeyVersionTemplateAlgorithmPtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateAlgorithmPtrOutput() CryptoKeyVersionTemplateAlgorithmPtrOutput
	ToCryptoKeyVersionTemplateAlgorithmPtrOutputWithContext(context.Context) CryptoKeyVersionTemplateAlgorithmPtrOutput
}

type cryptoKeyVersionTemplateAlgorithmPtr string

func CryptoKeyVersionTemplateAlgorithmPtr(v string) CryptoKeyVersionTemplateAlgorithmPtrInput {
	return (*cryptoKeyVersionTemplateAlgorithmPtr)(&v)
}

func (*cryptoKeyVersionTemplateAlgorithmPtr) ElementType() reflect.Type {
	return cryptoKeyVersionTemplateAlgorithmPtrType
}

func (in *cryptoKeyVersionTemplateAlgorithmPtr) ToCryptoKeyVersionTemplateAlgorithmPtrOutput() CryptoKeyVersionTemplateAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(CryptoKeyVersionTemplateAlgorithmPtrOutput)
}

func (in *cryptoKeyVersionTemplateAlgorithmPtr) ToCryptoKeyVersionTemplateAlgorithmPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CryptoKeyVersionTemplateAlgorithmPtrOutput)
}

// ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
type CryptoKeyVersionTemplateProtectionLevel string

const (
	// Not specified.
	CryptoKeyVersionTemplateProtectionLevelProtectionLevelUnspecified = CryptoKeyVersionTemplateProtectionLevel("PROTECTION_LEVEL_UNSPECIFIED")
	// Crypto operations are performed in software.
	CryptoKeyVersionTemplateProtectionLevelSoftware = CryptoKeyVersionTemplateProtectionLevel("SOFTWARE")
	// Crypto operations are performed in a Hardware Security Module.
	CryptoKeyVersionTemplateProtectionLevelHsm = CryptoKeyVersionTemplateProtectionLevel("HSM")
	// Crypto operations are performed by an external key manager.
	CryptoKeyVersionTemplateProtectionLevelExternal = CryptoKeyVersionTemplateProtectionLevel("EXTERNAL")
	// Crypto operations are performed in an EKM-over-VPC backend.
	CryptoKeyVersionTemplateProtectionLevelExternalVpc = CryptoKeyVersionTemplateProtectionLevel("EXTERNAL_VPC")
)

func (CryptoKeyVersionTemplateProtectionLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplateProtectionLevel)(nil)).Elem()
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToCryptoKeyVersionTemplateProtectionLevelOutput() CryptoKeyVersionTemplateProtectionLevelOutput {
	return pulumi.ToOutput(e).(CryptoKeyVersionTemplateProtectionLevelOutput)
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToCryptoKeyVersionTemplateProtectionLevelOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateProtectionLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CryptoKeyVersionTemplateProtectionLevelOutput)
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToCryptoKeyVersionTemplateProtectionLevelPtrOutput() CryptoKeyVersionTemplateProtectionLevelPtrOutput {
	return e.ToCryptoKeyVersionTemplateProtectionLevelPtrOutputWithContext(context.Background())
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToCryptoKeyVersionTemplateProtectionLevelPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateProtectionLevelPtrOutput {
	return CryptoKeyVersionTemplateProtectionLevel(e).ToCryptoKeyVersionTemplateProtectionLevelOutputWithContext(ctx).ToCryptoKeyVersionTemplateProtectionLevelPtrOutputWithContext(ctx)
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CryptoKeyVersionTemplateProtectionLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CryptoKeyVersionTemplateProtectionLevelOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateProtectionLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplateProtectionLevel)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateProtectionLevelOutput) ToCryptoKeyVersionTemplateProtectionLevelOutput() CryptoKeyVersionTemplateProtectionLevelOutput {
	return o
}

func (o CryptoKeyVersionTemplateProtectionLevelOutput) ToCryptoKeyVersionTemplateProtectionLevelOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateProtectionLevelOutput {
	return o
}

func (o CryptoKeyVersionTemplateProtectionLevelOutput) ToCryptoKeyVersionTemplateProtectionLevelPtrOutput() CryptoKeyVersionTemplateProtectionLevelPtrOutput {
	return o.ToCryptoKeyVersionTemplateProtectionLevelPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateProtectionLevelOutput) ToCryptoKeyVersionTemplateProtectionLevelPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateProtectionLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoKeyVersionTemplateProtectionLevel) *CryptoKeyVersionTemplateProtectionLevel {
		return &v
	}).(CryptoKeyVersionTemplateProtectionLevelPtrOutput)
}

func (o CryptoKeyVersionTemplateProtectionLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateProtectionLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CryptoKeyVersionTemplateProtectionLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CryptoKeyVersionTemplateProtectionLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateProtectionLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CryptoKeyVersionTemplateProtectionLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplateProtectionLevelPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateProtectionLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplateProtectionLevel)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateProtectionLevelPtrOutput) ToCryptoKeyVersionTemplateProtectionLevelPtrOutput() CryptoKeyVersionTemplateProtectionLevelPtrOutput {
	return o
}

func (o CryptoKeyVersionTemplateProtectionLevelPtrOutput) ToCryptoKeyVersionTemplateProtectionLevelPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateProtectionLevelPtrOutput {
	return o
}

func (o CryptoKeyVersionTemplateProtectionLevelPtrOutput) Elem() CryptoKeyVersionTemplateProtectionLevelOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplateProtectionLevel) CryptoKeyVersionTemplateProtectionLevel {
		if v != nil {
			return *v
		}
		var ret CryptoKeyVersionTemplateProtectionLevel
		return ret
	}).(CryptoKeyVersionTemplateProtectionLevelOutput)
}

func (o CryptoKeyVersionTemplateProtectionLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateProtectionLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CryptoKeyVersionTemplateProtectionLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CryptoKeyVersionTemplateProtectionLevelInput is an input type that accepts CryptoKeyVersionTemplateProtectionLevelArgs and CryptoKeyVersionTemplateProtectionLevelOutput values.
// You can construct a concrete instance of `CryptoKeyVersionTemplateProtectionLevelInput` via:
//
//          CryptoKeyVersionTemplateProtectionLevelArgs{...}
type CryptoKeyVersionTemplateProtectionLevelInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateProtectionLevelOutput() CryptoKeyVersionTemplateProtectionLevelOutput
	ToCryptoKeyVersionTemplateProtectionLevelOutputWithContext(context.Context) CryptoKeyVersionTemplateProtectionLevelOutput
}

var cryptoKeyVersionTemplateProtectionLevelPtrType = reflect.TypeOf((**CryptoKeyVersionTemplateProtectionLevel)(nil)).Elem()

type CryptoKeyVersionTemplateProtectionLevelPtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateProtectionLevelPtrOutput() CryptoKeyVersionTemplateProtectionLevelPtrOutput
	ToCryptoKeyVersionTemplateProtectionLevelPtrOutputWithContext(context.Context) CryptoKeyVersionTemplateProtectionLevelPtrOutput
}

type cryptoKeyVersionTemplateProtectionLevelPtr string

func CryptoKeyVersionTemplateProtectionLevelPtr(v string) CryptoKeyVersionTemplateProtectionLevelPtrInput {
	return (*cryptoKeyVersionTemplateProtectionLevelPtr)(&v)
}

func (*cryptoKeyVersionTemplateProtectionLevelPtr) ElementType() reflect.Type {
	return cryptoKeyVersionTemplateProtectionLevelPtrType
}

func (in *cryptoKeyVersionTemplateProtectionLevelPtr) ToCryptoKeyVersionTemplateProtectionLevelPtrOutput() CryptoKeyVersionTemplateProtectionLevelPtrOutput {
	return pulumi.ToOutput(in).(CryptoKeyVersionTemplateProtectionLevelPtrOutput)
}

func (in *cryptoKeyVersionTemplateProtectionLevelPtr) ToCryptoKeyVersionTemplateProtectionLevelPtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateProtectionLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CryptoKeyVersionTemplateProtectionLevelPtrOutput)
}

// Required. Immutable. The wrapping method to be used for incoming key material.
type ImportJobImportMethod string

const (
	// Not specified.
	ImportJobImportMethodImportMethodUnspecified = ImportJobImportMethod("IMPORT_METHOD_UNSPECIFIED")
	// This ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme defined in the PKCS #11 standard. In summary, this involves wrapping the raw key with an ephemeral AES key, and wrapping the ephemeral AES key with a 3072 bit RSA key. For more details, see [RSA AES key wrap mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).
	ImportJobImportMethodRsaOaep3072Sha1Aes256 = ImportJobImportMethod("RSA_OAEP_3072_SHA1_AES_256")
	// This ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme defined in the PKCS #11 standard. In summary, this involves wrapping the raw key with an ephemeral AES key, and wrapping the ephemeral AES key with a 4096 bit RSA key. For more details, see [RSA AES key wrap mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).
	ImportJobImportMethodRsaOaep4096Sha1Aes256 = ImportJobImportMethod("RSA_OAEP_4096_SHA1_AES_256")
)

func (ImportJobImportMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportJobImportMethod)(nil)).Elem()
}

func (e ImportJobImportMethod) ToImportJobImportMethodOutput() ImportJobImportMethodOutput {
	return pulumi.ToOutput(e).(ImportJobImportMethodOutput)
}

func (e ImportJobImportMethod) ToImportJobImportMethodOutputWithContext(ctx context.Context) ImportJobImportMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ImportJobImportMethodOutput)
}

func (e ImportJobImportMethod) ToImportJobImportMethodPtrOutput() ImportJobImportMethodPtrOutput {
	return e.ToImportJobImportMethodPtrOutputWithContext(context.Background())
}

func (e ImportJobImportMethod) ToImportJobImportMethodPtrOutputWithContext(ctx context.Context) ImportJobImportMethodPtrOutput {
	return ImportJobImportMethod(e).ToImportJobImportMethodOutputWithContext(ctx).ToImportJobImportMethodPtrOutputWithContext(ctx)
}

func (e ImportJobImportMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImportJobImportMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImportJobImportMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ImportJobImportMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ImportJobImportMethodOutput struct{ *pulumi.OutputState }

func (ImportJobImportMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportJobImportMethod)(nil)).Elem()
}

func (o ImportJobImportMethodOutput) ToImportJobImportMethodOutput() ImportJobImportMethodOutput {
	return o
}

func (o ImportJobImportMethodOutput) ToImportJobImportMethodOutputWithContext(ctx context.Context) ImportJobImportMethodOutput {
	return o
}

func (o ImportJobImportMethodOutput) ToImportJobImportMethodPtrOutput() ImportJobImportMethodPtrOutput {
	return o.ToImportJobImportMethodPtrOutputWithContext(context.Background())
}

func (o ImportJobImportMethodOutput) ToImportJobImportMethodPtrOutputWithContext(ctx context.Context) ImportJobImportMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImportJobImportMethod) *ImportJobImportMethod {
		return &v
	}).(ImportJobImportMethodPtrOutput)
}

func (o ImportJobImportMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ImportJobImportMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ImportJobImportMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ImportJobImportMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ImportJobImportMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ImportJobImportMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ImportJobImportMethodPtrOutput struct{ *pulumi.OutputState }

func (ImportJobImportMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportJobImportMethod)(nil)).Elem()
}

func (o ImportJobImportMethodPtrOutput) ToImportJobImportMethodPtrOutput() ImportJobImportMethodPtrOutput {
	return o
}

func (o ImportJobImportMethodPtrOutput) ToImportJobImportMethodPtrOutputWithContext(ctx context.Context) ImportJobImportMethodPtrOutput {
	return o
}

func (o ImportJobImportMethodPtrOutput) Elem() ImportJobImportMethodOutput {
	return o.ApplyT(func(v *ImportJobImportMethod) ImportJobImportMethod {
		if v != nil {
			return *v
		}
		var ret ImportJobImportMethod
		return ret
	}).(ImportJobImportMethodOutput)
}

func (o ImportJobImportMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ImportJobImportMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ImportJobImportMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ImportJobImportMethodInput is an input type that accepts ImportJobImportMethodArgs and ImportJobImportMethodOutput values.
// You can construct a concrete instance of `ImportJobImportMethodInput` via:
//
//          ImportJobImportMethodArgs{...}
type ImportJobImportMethodInput interface {
	pulumi.Input

	ToImportJobImportMethodOutput() ImportJobImportMethodOutput
	ToImportJobImportMethodOutputWithContext(context.Context) ImportJobImportMethodOutput
}

var importJobImportMethodPtrType = reflect.TypeOf((**ImportJobImportMethod)(nil)).Elem()

type ImportJobImportMethodPtrInput interface {
	pulumi.Input

	ToImportJobImportMethodPtrOutput() ImportJobImportMethodPtrOutput
	ToImportJobImportMethodPtrOutputWithContext(context.Context) ImportJobImportMethodPtrOutput
}

type importJobImportMethodPtr string

func ImportJobImportMethodPtr(v string) ImportJobImportMethodPtrInput {
	return (*importJobImportMethodPtr)(&v)
}

func (*importJobImportMethodPtr) ElementType() reflect.Type {
	return importJobImportMethodPtrType
}

func (in *importJobImportMethodPtr) ToImportJobImportMethodPtrOutput() ImportJobImportMethodPtrOutput {
	return pulumi.ToOutput(in).(ImportJobImportMethodPtrOutput)
}

func (in *importJobImportMethodPtr) ToImportJobImportMethodPtrOutputWithContext(ctx context.Context) ImportJobImportMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ImportJobImportMethodPtrOutput)
}

// Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
type ImportJobProtectionLevel string

const (
	// Not specified.
	ImportJobProtectionLevelProtectionLevelUnspecified = ImportJobProtectionLevel("PROTECTION_LEVEL_UNSPECIFIED")
	// Crypto operations are performed in software.
	ImportJobProtectionLevelSoftware = ImportJobProtectionLevel("SOFTWARE")
	// Crypto operations are performed in a Hardware Security Module.
	ImportJobProtectionLevelHsm = ImportJobProtectionLevel("HSM")
	// Crypto operations are performed by an external key manager.
	ImportJobProtectionLevelExternal = ImportJobProtectionLevel("EXTERNAL")
	// Crypto operations are performed in an EKM-over-VPC backend.
	ImportJobProtectionLevelExternalVpc = ImportJobProtectionLevel("EXTERNAL_VPC")
)

func (ImportJobProtectionLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportJobProtectionLevel)(nil)).Elem()
}

func (e ImportJobProtectionLevel) ToImportJobProtectionLevelOutput() ImportJobProtectionLevelOutput {
	return pulumi.ToOutput(e).(ImportJobProtectionLevelOutput)
}

func (e ImportJobProtectionLevel) ToImportJobProtectionLevelOutputWithContext(ctx context.Context) ImportJobProtectionLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ImportJobProtectionLevelOutput)
}

func (e ImportJobProtectionLevel) ToImportJobProtectionLevelPtrOutput() ImportJobProtectionLevelPtrOutput {
	return e.ToImportJobProtectionLevelPtrOutputWithContext(context.Background())
}

func (e ImportJobProtectionLevel) ToImportJobProtectionLevelPtrOutputWithContext(ctx context.Context) ImportJobProtectionLevelPtrOutput {
	return ImportJobProtectionLevel(e).ToImportJobProtectionLevelOutputWithContext(ctx).ToImportJobProtectionLevelPtrOutputWithContext(ctx)
}

func (e ImportJobProtectionLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImportJobProtectionLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImportJobProtectionLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ImportJobProtectionLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ImportJobProtectionLevelOutput struct{ *pulumi.OutputState }

func (ImportJobProtectionLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportJobProtectionLevel)(nil)).Elem()
}

func (o ImportJobProtectionLevelOutput) ToImportJobProtectionLevelOutput() ImportJobProtectionLevelOutput {
	return o
}

func (o ImportJobProtectionLevelOutput) ToImportJobProtectionLevelOutputWithContext(ctx context.Context) ImportJobProtectionLevelOutput {
	return o
}

func (o ImportJobProtectionLevelOutput) ToImportJobProtectionLevelPtrOutput() ImportJobProtectionLevelPtrOutput {
	return o.ToImportJobProtectionLevelPtrOutputWithContext(context.Background())
}

func (o ImportJobProtectionLevelOutput) ToImportJobProtectionLevelPtrOutputWithContext(ctx context.Context) ImportJobProtectionLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImportJobProtectionLevel) *ImportJobProtectionLevel {
		return &v
	}).(ImportJobProtectionLevelPtrOutput)
}

func (o ImportJobProtectionLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ImportJobProtectionLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ImportJobProtectionLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ImportJobProtectionLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ImportJobProtectionLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ImportJobProtectionLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ImportJobProtectionLevelPtrOutput struct{ *pulumi.OutputState }

func (ImportJobProtectionLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportJobProtectionLevel)(nil)).Elem()
}

func (o ImportJobProtectionLevelPtrOutput) ToImportJobProtectionLevelPtrOutput() ImportJobProtectionLevelPtrOutput {
	return o
}

func (o ImportJobProtectionLevelPtrOutput) ToImportJobProtectionLevelPtrOutputWithContext(ctx context.Context) ImportJobProtectionLevelPtrOutput {
	return o
}

func (o ImportJobProtectionLevelPtrOutput) Elem() ImportJobProtectionLevelOutput {
	return o.ApplyT(func(v *ImportJobProtectionLevel) ImportJobProtectionLevel {
		if v != nil {
			return *v
		}
		var ret ImportJobProtectionLevel
		return ret
	}).(ImportJobProtectionLevelOutput)
}

func (o ImportJobProtectionLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ImportJobProtectionLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ImportJobProtectionLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ImportJobProtectionLevelInput is an input type that accepts ImportJobProtectionLevelArgs and ImportJobProtectionLevelOutput values.
// You can construct a concrete instance of `ImportJobProtectionLevelInput` via:
//
//          ImportJobProtectionLevelArgs{...}
type ImportJobProtectionLevelInput interface {
	pulumi.Input

	ToImportJobProtectionLevelOutput() ImportJobProtectionLevelOutput
	ToImportJobProtectionLevelOutputWithContext(context.Context) ImportJobProtectionLevelOutput
}

var importJobProtectionLevelPtrType = reflect.TypeOf((**ImportJobProtectionLevel)(nil)).Elem()

type ImportJobProtectionLevelPtrInput interface {
	pulumi.Input

	ToImportJobProtectionLevelPtrOutput() ImportJobProtectionLevelPtrOutput
	ToImportJobProtectionLevelPtrOutputWithContext(context.Context) ImportJobProtectionLevelPtrOutput
}

type importJobProtectionLevelPtr string

func ImportJobProtectionLevelPtr(v string) ImportJobProtectionLevelPtrInput {
	return (*importJobProtectionLevelPtr)(&v)
}

func (*importJobProtectionLevelPtr) ElementType() reflect.Type {
	return importJobProtectionLevelPtrType
}

func (in *importJobProtectionLevelPtr) ToImportJobProtectionLevelPtrOutput() ImportJobProtectionLevelPtrOutput {
	return pulumi.ToOutput(in).(ImportJobProtectionLevelPtrOutput)
}

func (in *importJobProtectionLevelPtr) ToImportJobProtectionLevelPtrOutputWithContext(ctx context.Context) ImportJobProtectionLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ImportJobProtectionLevelPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypeInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypePtrInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyPurposeInput)(nil)).Elem(), CryptoKeyPurpose("CRYPTO_KEY_PURPOSE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyPurposePtrInput)(nil)).Elem(), CryptoKeyPurpose("CRYPTO_KEY_PURPOSE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionStateEnumInput)(nil)).Elem(), CryptoKeyVersionStateEnum("CRYPTO_KEY_VERSION_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionStateEnumPtrInput)(nil)).Elem(), CryptoKeyVersionStateEnum("CRYPTO_KEY_VERSION_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionTemplateAlgorithmInput)(nil)).Elem(), CryptoKeyVersionTemplateAlgorithm("CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionTemplateAlgorithmPtrInput)(nil)).Elem(), CryptoKeyVersionTemplateAlgorithm("CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionTemplateProtectionLevelInput)(nil)).Elem(), CryptoKeyVersionTemplateProtectionLevel("PROTECTION_LEVEL_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionTemplateProtectionLevelPtrInput)(nil)).Elem(), CryptoKeyVersionTemplateProtectionLevel("PROTECTION_LEVEL_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ImportJobImportMethodInput)(nil)).Elem(), ImportJobImportMethod("IMPORT_METHOD_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ImportJobImportMethodPtrInput)(nil)).Elem(), ImportJobImportMethod("IMPORT_METHOD_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ImportJobProtectionLevelInput)(nil)).Elem(), ImportJobProtectionLevel("PROTECTION_LEVEL_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ImportJobProtectionLevelPtrInput)(nil)).Elem(), ImportJobProtectionLevel("PROTECTION_LEVEL_UNSPECIFIED"))
	pulumi.RegisterOutputType(AuditLogConfigLogTypeOutput{})
	pulumi.RegisterOutputType(AuditLogConfigLogTypePtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyPurposeOutput{})
	pulumi.RegisterOutputType(CryptoKeyPurposePtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionStateEnumOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionStateEnumPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateAlgorithmOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateProtectionLevelOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateProtectionLevelPtrOutput{})
	pulumi.RegisterOutputType(ImportJobImportMethodOutput{})
	pulumi.RegisterOutputType(ImportJobImportMethodPtrOutput{})
	pulumi.RegisterOutputType(ImportJobProtectionLevelOutput{})
	pulumi.RegisterOutputType(ImportJobProtectionLevelPtrOutput{})
}
