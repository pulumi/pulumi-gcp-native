// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a new CryptoKey within a KeyRing. CryptoKey.purpose and CryptoKey.version_template.algorithm are required.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type CryptoKey struct {
	pulumi.CustomResourceState

	// The time at which this CryptoKey was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
	CryptoKeyBackend pulumi.StringOutput `pulumi:"cryptoKeyBackend"`
	// Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
	CryptoKeyId pulumi.StringOutput `pulumi:"cryptoKeyId"`
	// Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
	DestroyScheduledDuration pulumi.StringOutput `pulumi:"destroyScheduledDuration"`
	// Immutable. Whether this key may contain imported versions only.
	ImportOnly pulumi.BoolOutput   `pulumi:"importOnly"`
	KeyRingId  pulumi.StringOutput `pulumi:"keyRingId"`
	// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	NextRotationTime pulumi.StringOutput `pulumi:"nextRotationTime"`
	// A copy of the "primary" CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey's primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.
	Primary CryptoKeyVersionResponseOutput `pulumi:"primary"`
	Project pulumi.StringOutput            `pulumi:"project"`
	// Immutable. The immutable purpose of this CryptoKey.
	Purpose pulumi.StringOutput `pulumi:"purpose"`
	// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	RotationPeriod pulumi.StringOutput `pulumi:"rotationPeriod"`
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must manually call CreateCryptoKeyVersion or ImportCryptoKeyVersion before you can use this CryptoKey.
	SkipInitialVersionCreation pulumi.BoolPtrOutput `pulumi:"skipInitialVersionCreation"`
	// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
	VersionTemplate CryptoKeyVersionTemplateResponseOutput `pulumi:"versionTemplate"`
}

// NewCryptoKey registers a new resource with the given unique name, arguments, and options.
func NewCryptoKey(ctx *pulumi.Context,
	name string, args *CryptoKeyArgs, opts ...pulumi.ResourceOption) (*CryptoKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyRingId == nil {
		return nil, errors.New("invalid value for required argument 'KeyRingId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"cryptoKeyId",
		"keyRingId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource CryptoKey
	err := ctx.RegisterResource("google-native:cloudkms/v1:CryptoKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCryptoKey gets an existing CryptoKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCryptoKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CryptoKeyState, opts ...pulumi.ResourceOption) (*CryptoKey, error) {
	var resource CryptoKey
	err := ctx.ReadResource("google-native:cloudkms/v1:CryptoKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CryptoKey resources.
type cryptoKeyState struct {
}

type CryptoKeyState struct {
}

func (CryptoKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoKeyState)(nil)).Elem()
}

type cryptoKeyArgs struct {
	// Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
	CryptoKeyBackend *string `pulumi:"cryptoKeyBackend"`
	// Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
	CryptoKeyId *string `pulumi:"cryptoKeyId"`
	// Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
	DestroyScheduledDuration *string `pulumi:"destroyScheduledDuration"`
	// Immutable. Whether this key may contain imported versions only.
	ImportOnly *bool  `pulumi:"importOnly"`
	KeyRingId  string `pulumi:"keyRingId"`
	// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	NextRotationTime *string `pulumi:"nextRotationTime"`
	Project          *string `pulumi:"project"`
	// Immutable. The immutable purpose of this CryptoKey.
	Purpose *CryptoKeyPurpose `pulumi:"purpose"`
	// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	RotationPeriod *string `pulumi:"rotationPeriod"`
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must manually call CreateCryptoKeyVersion or ImportCryptoKeyVersion before you can use this CryptoKey.
	SkipInitialVersionCreation *bool `pulumi:"skipInitialVersionCreation"`
	// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
	VersionTemplate *CryptoKeyVersionTemplate `pulumi:"versionTemplate"`
}

// The set of arguments for constructing a CryptoKey resource.
type CryptoKeyArgs struct {
	// Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
	CryptoKeyBackend pulumi.StringPtrInput
	// Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
	CryptoKeyId pulumi.StringPtrInput
	// Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
	DestroyScheduledDuration pulumi.StringPtrInput
	// Immutable. Whether this key may contain imported versions only.
	ImportOnly pulumi.BoolPtrInput
	KeyRingId  pulumi.StringInput
	// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	NextRotationTime pulumi.StringPtrInput
	Project          pulumi.StringPtrInput
	// Immutable. The immutable purpose of this CryptoKey.
	Purpose CryptoKeyPurposePtrInput
	// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	RotationPeriod pulumi.StringPtrInput
	// If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must manually call CreateCryptoKeyVersion or ImportCryptoKeyVersion before you can use this CryptoKey.
	SkipInitialVersionCreation pulumi.BoolPtrInput
	// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
	VersionTemplate CryptoKeyVersionTemplatePtrInput
}

func (CryptoKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoKeyArgs)(nil)).Elem()
}

type CryptoKeyInput interface {
	pulumi.Input

	ToCryptoKeyOutput() CryptoKeyOutput
	ToCryptoKeyOutputWithContext(ctx context.Context) CryptoKeyOutput
}

func (*CryptoKey) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKey)(nil)).Elem()
}

func (i *CryptoKey) ToCryptoKeyOutput() CryptoKeyOutput {
	return i.ToCryptoKeyOutputWithContext(context.Background())
}

func (i *CryptoKey) ToCryptoKeyOutputWithContext(ctx context.Context) CryptoKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyOutput)
}

type CryptoKeyOutput struct{ *pulumi.OutputState }

func (CryptoKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKey)(nil)).Elem()
}

func (o CryptoKeyOutput) ToCryptoKeyOutput() CryptoKeyOutput {
	return o
}

func (o CryptoKeyOutput) ToCryptoKeyOutputWithContext(ctx context.Context) CryptoKeyOutput {
	return o
}

// The time at which this CryptoKey was created.
func (o CryptoKeyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
func (o CryptoKeyOutput) CryptoKeyBackend() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.CryptoKeyBackend }).(pulumi.StringOutput)
}

// Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
func (o CryptoKeyOutput) CryptoKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.CryptoKeyId }).(pulumi.StringOutput)
}

// Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
func (o CryptoKeyOutput) DestroyScheduledDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.DestroyScheduledDuration }).(pulumi.StringOutput)
}

// Immutable. Whether this key may contain imported versions only.
func (o CryptoKeyOutput) ImportOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.BoolOutput { return v.ImportOnly }).(pulumi.BoolOutput)
}

func (o CryptoKeyOutput) KeyRingId() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.KeyRingId }).(pulumi.StringOutput)
}

// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
func (o CryptoKeyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o CryptoKeyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o CryptoKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
func (o CryptoKeyOutput) NextRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.NextRotationTime }).(pulumi.StringOutput)
}

// A copy of the "primary" CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey's primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.
func (o CryptoKeyOutput) Primary() CryptoKeyVersionResponseOutput {
	return o.ApplyT(func(v *CryptoKey) CryptoKeyVersionResponseOutput { return v.Primary }).(CryptoKeyVersionResponseOutput)
}

func (o CryptoKeyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Immutable. The immutable purpose of this CryptoKey.
func (o CryptoKeyOutput) Purpose() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.Purpose }).(pulumi.StringOutput)
}

// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
func (o CryptoKeyOutput) RotationPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.StringOutput { return v.RotationPeriod }).(pulumi.StringOutput)
}

// If set to true, the request will create a CryptoKey without any CryptoKeyVersions. You must manually call CreateCryptoKeyVersion or ImportCryptoKeyVersion before you can use this CryptoKey.
func (o CryptoKeyOutput) SkipInitialVersionCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoKey) pulumi.BoolPtrOutput { return v.SkipInitialVersionCreation }).(pulumi.BoolPtrOutput)
}

// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
func (o CryptoKeyOutput) VersionTemplate() CryptoKeyVersionTemplateResponseOutput {
	return o.ApplyT(func(v *CryptoKey) CryptoKeyVersionTemplateResponseOutput { return v.VersionTemplate }).(CryptoKeyVersionTemplateResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyInput)(nil)).Elem(), &CryptoKey{})
	pulumi.RegisterOutputType(CryptoKeyOutput{})
}
