// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Certificate chains needed to verify the attestation. Certificates in chains are PEM-encoded and are ordered based on https://tools.ietf.org/html/rfc5246#section-7.4.2.
type CertificateChains struct {
	// Cavium certificate chain corresponding to the attestation.
	CaviumCerts []string `pulumi:"caviumCerts"`
	// Google card certificate chain corresponding to the attestation.
	GoogleCardCerts []string `pulumi:"googleCardCerts"`
	// Google partition certificate chain corresponding to the attestation.
	GooglePartitionCerts []string `pulumi:"googlePartitionCerts"`
}

// CertificateChainsInput is an input type that accepts CertificateChainsArgs and CertificateChainsOutput values.
// You can construct a concrete instance of `CertificateChainsInput` via:
//
//          CertificateChainsArgs{...}
type CertificateChainsInput interface {
	pulumi.Input

	ToCertificateChainsOutput() CertificateChainsOutput
	ToCertificateChainsOutputWithContext(context.Context) CertificateChainsOutput
}

// Certificate chains needed to verify the attestation. Certificates in chains are PEM-encoded and are ordered based on https://tools.ietf.org/html/rfc5246#section-7.4.2.
type CertificateChainsArgs struct {
	// Cavium certificate chain corresponding to the attestation.
	CaviumCerts pulumi.StringArrayInput `pulumi:"caviumCerts"`
	// Google card certificate chain corresponding to the attestation.
	GoogleCardCerts pulumi.StringArrayInput `pulumi:"googleCardCerts"`
	// Google partition certificate chain corresponding to the attestation.
	GooglePartitionCerts pulumi.StringArrayInput `pulumi:"googlePartitionCerts"`
}

func (CertificateChainsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateChains)(nil)).Elem()
}

func (i CertificateChainsArgs) ToCertificateChainsOutput() CertificateChainsOutput {
	return i.ToCertificateChainsOutputWithContext(context.Background())
}

func (i CertificateChainsArgs) ToCertificateChainsOutputWithContext(ctx context.Context) CertificateChainsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateChainsOutput)
}

func (i CertificateChainsArgs) ToCertificateChainsPtrOutput() CertificateChainsPtrOutput {
	return i.ToCertificateChainsPtrOutputWithContext(context.Background())
}

func (i CertificateChainsArgs) ToCertificateChainsPtrOutputWithContext(ctx context.Context) CertificateChainsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateChainsOutput).ToCertificateChainsPtrOutputWithContext(ctx)
}

// CertificateChainsPtrInput is an input type that accepts CertificateChainsArgs, CertificateChainsPtr and CertificateChainsPtrOutput values.
// You can construct a concrete instance of `CertificateChainsPtrInput` via:
//
//          CertificateChainsArgs{...}
//
//  or:
//
//          nil
type CertificateChainsPtrInput interface {
	pulumi.Input

	ToCertificateChainsPtrOutput() CertificateChainsPtrOutput
	ToCertificateChainsPtrOutputWithContext(context.Context) CertificateChainsPtrOutput
}

type certificateChainsPtrType CertificateChainsArgs

func CertificateChainsPtr(v *CertificateChainsArgs) CertificateChainsPtrInput {
	return (*certificateChainsPtrType)(v)
}

func (*certificateChainsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateChains)(nil)).Elem()
}

func (i *certificateChainsPtrType) ToCertificateChainsPtrOutput() CertificateChainsPtrOutput {
	return i.ToCertificateChainsPtrOutputWithContext(context.Background())
}

func (i *certificateChainsPtrType) ToCertificateChainsPtrOutputWithContext(ctx context.Context) CertificateChainsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateChainsPtrOutput)
}

// Certificate chains needed to verify the attestation. Certificates in chains are PEM-encoded and are ordered based on https://tools.ietf.org/html/rfc5246#section-7.4.2.
type CertificateChainsOutput struct{ *pulumi.OutputState }

func (CertificateChainsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateChains)(nil)).Elem()
}

func (o CertificateChainsOutput) ToCertificateChainsOutput() CertificateChainsOutput {
	return o
}

func (o CertificateChainsOutput) ToCertificateChainsOutputWithContext(ctx context.Context) CertificateChainsOutput {
	return o
}

func (o CertificateChainsOutput) ToCertificateChainsPtrOutput() CertificateChainsPtrOutput {
	return o.ToCertificateChainsPtrOutputWithContext(context.Background())
}

func (o CertificateChainsOutput) ToCertificateChainsPtrOutputWithContext(ctx context.Context) CertificateChainsPtrOutput {
	return o.ApplyT(func(v CertificateChains) *CertificateChains {
		return &v
	}).(CertificateChainsPtrOutput)
}

// Cavium certificate chain corresponding to the attestation.
func (o CertificateChainsOutput) CaviumCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateChains) []string { return v.CaviumCerts }).(pulumi.StringArrayOutput)
}

// Google card certificate chain corresponding to the attestation.
func (o CertificateChainsOutput) GoogleCardCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateChains) []string { return v.GoogleCardCerts }).(pulumi.StringArrayOutput)
}

// Google partition certificate chain corresponding to the attestation.
func (o CertificateChainsOutput) GooglePartitionCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateChains) []string { return v.GooglePartitionCerts }).(pulumi.StringArrayOutput)
}

type CertificateChainsPtrOutput struct{ *pulumi.OutputState }

func (CertificateChainsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateChains)(nil)).Elem()
}

func (o CertificateChainsPtrOutput) ToCertificateChainsPtrOutput() CertificateChainsPtrOutput {
	return o
}

func (o CertificateChainsPtrOutput) ToCertificateChainsPtrOutputWithContext(ctx context.Context) CertificateChainsPtrOutput {
	return o
}

func (o CertificateChainsPtrOutput) Elem() CertificateChainsOutput {
	return o.ApplyT(func(v *CertificateChains) CertificateChains { return *v }).(CertificateChainsOutput)
}

// Cavium certificate chain corresponding to the attestation.
func (o CertificateChainsPtrOutput) CaviumCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateChains) []string {
		if v == nil {
			return nil
		}
		return v.CaviumCerts
	}).(pulumi.StringArrayOutput)
}

// Google card certificate chain corresponding to the attestation.
func (o CertificateChainsPtrOutput) GoogleCardCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateChains) []string {
		if v == nil {
			return nil
		}
		return v.GoogleCardCerts
	}).(pulumi.StringArrayOutput)
}

// Google partition certificate chain corresponding to the attestation.
func (o CertificateChainsPtrOutput) GooglePartitionCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateChains) []string {
		if v == nil {
			return nil
		}
		return v.GooglePartitionCerts
	}).(pulumi.StringArrayOutput)
}

// A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.
type CryptoKeyVersion struct {
	// Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm *string `pulumi:"algorithm"`
	// Output only. Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.
	Attestation *KeyOperationAttestation `pulumi:"attestation"`
	// Output only. The time at which this CryptoKeyVersion was created.
	CreateTime *string `pulumi:"createTime"`
	// Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
	DestroyEventTime *string `pulumi:"destroyEventTime"`
	// Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
	DestroyTime *string `pulumi:"destroyTime"`
	// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level.
	ExternalProtectionLevelOptions *ExternalProtectionLevelOptions `pulumi:"externalProtectionLevelOptions"`
	// Output only. The time this CryptoKeyVersion's key material was generated.
	GenerateTime *string `pulumi:"generateTime"`
	// Output only. The root cause of an import failure. Only present if state is IMPORT_FAILED.
	ImportFailureReason *string `pulumi:"importFailureReason"`
	// Output only. The name of the ImportJob used to import this CryptoKeyVersion. Only present if the underlying key material was imported.
	ImportJob *string `pulumi:"importJob"`
	// Output only. The time at which this CryptoKeyVersion's key material was imported.
	ImportTime *string `pulumi:"importTime"`
	// Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
	Name *string `pulumi:"name"`
	// Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
	ProtectionLevel *string `pulumi:"protectionLevel"`
	// The current state of the CryptoKeyVersion.
	State *string `pulumi:"state"`
}

// CryptoKeyVersionInput is an input type that accepts CryptoKeyVersionArgs and CryptoKeyVersionOutput values.
// You can construct a concrete instance of `CryptoKeyVersionInput` via:
//
//          CryptoKeyVersionArgs{...}
type CryptoKeyVersionInput interface {
	pulumi.Input

	ToCryptoKeyVersionOutput() CryptoKeyVersionOutput
	ToCryptoKeyVersionOutputWithContext(context.Context) CryptoKeyVersionOutput
}

// A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.
type CryptoKeyVersionArgs struct {
	// Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// Output only. Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.
	Attestation KeyOperationAttestationPtrInput `pulumi:"attestation"`
	// Output only. The time at which this CryptoKeyVersion was created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
	DestroyEventTime pulumi.StringPtrInput `pulumi:"destroyEventTime"`
	// Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
	DestroyTime pulumi.StringPtrInput `pulumi:"destroyTime"`
	// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level.
	ExternalProtectionLevelOptions ExternalProtectionLevelOptionsPtrInput `pulumi:"externalProtectionLevelOptions"`
	// Output only. The time this CryptoKeyVersion's key material was generated.
	GenerateTime pulumi.StringPtrInput `pulumi:"generateTime"`
	// Output only. The root cause of an import failure. Only present if state is IMPORT_FAILED.
	ImportFailureReason pulumi.StringPtrInput `pulumi:"importFailureReason"`
	// Output only. The name of the ImportJob used to import this CryptoKeyVersion. Only present if the underlying key material was imported.
	ImportJob pulumi.StringPtrInput `pulumi:"importJob"`
	// Output only. The time at which this CryptoKeyVersion's key material was imported.
	ImportTime pulumi.StringPtrInput `pulumi:"importTime"`
	// Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
	ProtectionLevel pulumi.StringPtrInput `pulumi:"protectionLevel"`
	// The current state of the CryptoKeyVersion.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CryptoKeyVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersion)(nil)).Elem()
}

func (i CryptoKeyVersionArgs) ToCryptoKeyVersionOutput() CryptoKeyVersionOutput {
	return i.ToCryptoKeyVersionOutputWithContext(context.Background())
}

func (i CryptoKeyVersionArgs) ToCryptoKeyVersionOutputWithContext(ctx context.Context) CryptoKeyVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionOutput)
}

func (i CryptoKeyVersionArgs) ToCryptoKeyVersionPtrOutput() CryptoKeyVersionPtrOutput {
	return i.ToCryptoKeyVersionPtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionArgs) ToCryptoKeyVersionPtrOutputWithContext(ctx context.Context) CryptoKeyVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionOutput).ToCryptoKeyVersionPtrOutputWithContext(ctx)
}

// CryptoKeyVersionPtrInput is an input type that accepts CryptoKeyVersionArgs, CryptoKeyVersionPtr and CryptoKeyVersionPtrOutput values.
// You can construct a concrete instance of `CryptoKeyVersionPtrInput` via:
//
//          CryptoKeyVersionArgs{...}
//
//  or:
//
//          nil
type CryptoKeyVersionPtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionPtrOutput() CryptoKeyVersionPtrOutput
	ToCryptoKeyVersionPtrOutputWithContext(context.Context) CryptoKeyVersionPtrOutput
}

type cryptoKeyVersionPtrType CryptoKeyVersionArgs

func CryptoKeyVersionPtr(v *CryptoKeyVersionArgs) CryptoKeyVersionPtrInput {
	return (*cryptoKeyVersionPtrType)(v)
}

func (*cryptoKeyVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersion)(nil)).Elem()
}

func (i *cryptoKeyVersionPtrType) ToCryptoKeyVersionPtrOutput() CryptoKeyVersionPtrOutput {
	return i.ToCryptoKeyVersionPtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionPtrType) ToCryptoKeyVersionPtrOutputWithContext(ctx context.Context) CryptoKeyVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionPtrOutput)
}

// A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.
type CryptoKeyVersionOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersion)(nil)).Elem()
}

func (o CryptoKeyVersionOutput) ToCryptoKeyVersionOutput() CryptoKeyVersionOutput {
	return o
}

func (o CryptoKeyVersionOutput) ToCryptoKeyVersionOutputWithContext(ctx context.Context) CryptoKeyVersionOutput {
	return o
}

func (o CryptoKeyVersionOutput) ToCryptoKeyVersionPtrOutput() CryptoKeyVersionPtrOutput {
	return o.ToCryptoKeyVersionPtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionOutput) ToCryptoKeyVersionPtrOutputWithContext(ctx context.Context) CryptoKeyVersionPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *CryptoKeyVersion {
		return &v
	}).(CryptoKeyVersionPtrOutput)
}

// Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o CryptoKeyVersionOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// Output only. Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.
func (o CryptoKeyVersionOutput) Attestation() KeyOperationAttestationPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *KeyOperationAttestation { return v.Attestation }).(KeyOperationAttestationPtrOutput)
}

// Output only. The time at which this CryptoKeyVersion was created.
func (o CryptoKeyVersionOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
func (o CryptoKeyVersionOutput) DestroyEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.DestroyEventTime }).(pulumi.StringPtrOutput)
}

// Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
func (o CryptoKeyVersionOutput) DestroyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.DestroyTime }).(pulumi.StringPtrOutput)
}

// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level.
func (o CryptoKeyVersionOutput) ExternalProtectionLevelOptions() ExternalProtectionLevelOptionsPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *ExternalProtectionLevelOptions { return v.ExternalProtectionLevelOptions }).(ExternalProtectionLevelOptionsPtrOutput)
}

// Output only. The time this CryptoKeyVersion's key material was generated.
func (o CryptoKeyVersionOutput) GenerateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.GenerateTime }).(pulumi.StringPtrOutput)
}

// Output only. The root cause of an import failure. Only present if state is IMPORT_FAILED.
func (o CryptoKeyVersionOutput) ImportFailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.ImportFailureReason }).(pulumi.StringPtrOutput)
}

// Output only. The name of the ImportJob used to import this CryptoKeyVersion. Only present if the underlying key material was imported.
func (o CryptoKeyVersionOutput) ImportJob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.ImportJob }).(pulumi.StringPtrOutput)
}

// Output only. The time at which this CryptoKeyVersion's key material was imported.
func (o CryptoKeyVersionOutput) ImportTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.ImportTime }).(pulumi.StringPtrOutput)
}

// Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
func (o CryptoKeyVersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
func (o CryptoKeyVersionOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

// The current state of the CryptoKeyVersion.
func (o CryptoKeyVersionOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersion) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionPtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersion)(nil)).Elem()
}

func (o CryptoKeyVersionPtrOutput) ToCryptoKeyVersionPtrOutput() CryptoKeyVersionPtrOutput {
	return o
}

func (o CryptoKeyVersionPtrOutput) ToCryptoKeyVersionPtrOutputWithContext(ctx context.Context) CryptoKeyVersionPtrOutput {
	return o
}

func (o CryptoKeyVersionPtrOutput) Elem() CryptoKeyVersionOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) CryptoKeyVersion { return *v }).(CryptoKeyVersionOutput)
}

// Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o CryptoKeyVersionPtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// Output only. Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.
func (o CryptoKeyVersionPtrOutput) Attestation() KeyOperationAttestationPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *KeyOperationAttestation {
		if v == nil {
			return nil
		}
		return v.Attestation
	}).(KeyOperationAttestationPtrOutput)
}

// Output only. The time at which this CryptoKeyVersion was created.
func (o CryptoKeyVersionPtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
func (o CryptoKeyVersionPtrOutput) DestroyEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.DestroyEventTime
	}).(pulumi.StringPtrOutput)
}

// Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
func (o CryptoKeyVersionPtrOutput) DestroyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.DestroyTime
	}).(pulumi.StringPtrOutput)
}

// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level.
func (o CryptoKeyVersionPtrOutput) ExternalProtectionLevelOptions() ExternalProtectionLevelOptionsPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *ExternalProtectionLevelOptions {
		if v == nil {
			return nil
		}
		return v.ExternalProtectionLevelOptions
	}).(ExternalProtectionLevelOptionsPtrOutput)
}

// Output only. The time this CryptoKeyVersion's key material was generated.
func (o CryptoKeyVersionPtrOutput) GenerateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.GenerateTime
	}).(pulumi.StringPtrOutput)
}

// Output only. The root cause of an import failure. Only present if state is IMPORT_FAILED.
func (o CryptoKeyVersionPtrOutput) ImportFailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.ImportFailureReason
	}).(pulumi.StringPtrOutput)
}

// Output only. The name of the ImportJob used to import this CryptoKeyVersion. Only present if the underlying key material was imported.
func (o CryptoKeyVersionPtrOutput) ImportJob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.ImportJob
	}).(pulumi.StringPtrOutput)
}

// Output only. The time at which this CryptoKeyVersion's key material was imported.
func (o CryptoKeyVersionPtrOutput) ImportTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.ImportTime
	}).(pulumi.StringPtrOutput)
}

// Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
func (o CryptoKeyVersionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
func (o CryptoKeyVersionPtrOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionLevel
	}).(pulumi.StringPtrOutput)
}

// The current state of the CryptoKeyVersion.
func (o CryptoKeyVersionPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.
type CryptoKeyVersionTemplate struct {
	// Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
	Algorithm *string `pulumi:"algorithm"`
	// ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
	ProtectionLevel *string `pulumi:"protectionLevel"`
}

// CryptoKeyVersionTemplateInput is an input type that accepts CryptoKeyVersionTemplateArgs and CryptoKeyVersionTemplateOutput values.
// You can construct a concrete instance of `CryptoKeyVersionTemplateInput` via:
//
//          CryptoKeyVersionTemplateArgs{...}
type CryptoKeyVersionTemplateInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput
	ToCryptoKeyVersionTemplateOutputWithContext(context.Context) CryptoKeyVersionTemplateOutput
}

// A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.
type CryptoKeyVersionTemplateArgs struct {
	// Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
	ProtectionLevel pulumi.StringPtrInput `pulumi:"protectionLevel"`
}

func (CryptoKeyVersionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplate)(nil)).Elem()
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput {
	return i.ToCryptoKeyVersionTemplateOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateOutput)
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return i.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (i CryptoKeyVersionTemplateArgs) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplateOutput).ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx)
}

// CryptoKeyVersionTemplatePtrInput is an input type that accepts CryptoKeyVersionTemplateArgs, CryptoKeyVersionTemplatePtr and CryptoKeyVersionTemplatePtrOutput values.
// You can construct a concrete instance of `CryptoKeyVersionTemplatePtrInput` via:
//
//          CryptoKeyVersionTemplateArgs{...}
//
//  or:
//
//          nil
type CryptoKeyVersionTemplatePtrInput interface {
	pulumi.Input

	ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput
	ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Context) CryptoKeyVersionTemplatePtrOutput
}

type cryptoKeyVersionTemplatePtrType CryptoKeyVersionTemplateArgs

func CryptoKeyVersionTemplatePtr(v *CryptoKeyVersionTemplateArgs) CryptoKeyVersionTemplatePtrInput {
	return (*cryptoKeyVersionTemplatePtrType)(v)
}

func (*cryptoKeyVersionTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplate)(nil)).Elem()
}

func (i *cryptoKeyVersionTemplatePtrType) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return i.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (i *cryptoKeyVersionTemplatePtrType) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionTemplatePtrOutput)
}

// A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.
type CryptoKeyVersionTemplateOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoKeyVersionTemplate)(nil)).Elem()
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplateOutput() CryptoKeyVersionTemplateOutput {
	return o
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplateOutputWithContext(ctx context.Context) CryptoKeyVersionTemplateOutput {
	return o
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return o.ToCryptoKeyVersionTemplatePtrOutputWithContext(context.Background())
}

func (o CryptoKeyVersionTemplateOutput) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) *CryptoKeyVersionTemplate {
		return &v
	}).(CryptoKeyVersionTemplatePtrOutput)
}

// Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
func (o CryptoKeyVersionTemplateOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
func (o CryptoKeyVersionTemplateOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoKeyVersionTemplate) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

type CryptoKeyVersionTemplatePtrOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersionTemplate)(nil)).Elem()
}

func (o CryptoKeyVersionTemplatePtrOutput) ToCryptoKeyVersionTemplatePtrOutput() CryptoKeyVersionTemplatePtrOutput {
	return o
}

func (o CryptoKeyVersionTemplatePtrOutput) ToCryptoKeyVersionTemplatePtrOutputWithContext(ctx context.Context) CryptoKeyVersionTemplatePtrOutput {
	return o
}

func (o CryptoKeyVersionTemplatePtrOutput) Elem() CryptoKeyVersionTemplateOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) CryptoKeyVersionTemplate { return *v }).(CryptoKeyVersionTemplateOutput)
}

// Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.
func (o CryptoKeyVersionTemplatePtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
func (o CryptoKeyVersionTemplatePtrOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoKeyVersionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionLevel
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level.
type ExternalProtectionLevelOptions struct {
	// The URI for an external resource that this CryptoKeyVersion represents.
	ExternalKeyUri *string `pulumi:"externalKeyUri"`
}

// ExternalProtectionLevelOptionsInput is an input type that accepts ExternalProtectionLevelOptionsArgs and ExternalProtectionLevelOptionsOutput values.
// You can construct a concrete instance of `ExternalProtectionLevelOptionsInput` via:
//
//          ExternalProtectionLevelOptionsArgs{...}
type ExternalProtectionLevelOptionsInput interface {
	pulumi.Input

	ToExternalProtectionLevelOptionsOutput() ExternalProtectionLevelOptionsOutput
	ToExternalProtectionLevelOptionsOutputWithContext(context.Context) ExternalProtectionLevelOptionsOutput
}

// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level.
type ExternalProtectionLevelOptionsArgs struct {
	// The URI for an external resource that this CryptoKeyVersion represents.
	ExternalKeyUri pulumi.StringPtrInput `pulumi:"externalKeyUri"`
}

func (ExternalProtectionLevelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalProtectionLevelOptions)(nil)).Elem()
}

func (i ExternalProtectionLevelOptionsArgs) ToExternalProtectionLevelOptionsOutput() ExternalProtectionLevelOptionsOutput {
	return i.ToExternalProtectionLevelOptionsOutputWithContext(context.Background())
}

func (i ExternalProtectionLevelOptionsArgs) ToExternalProtectionLevelOptionsOutputWithContext(ctx context.Context) ExternalProtectionLevelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalProtectionLevelOptionsOutput)
}

func (i ExternalProtectionLevelOptionsArgs) ToExternalProtectionLevelOptionsPtrOutput() ExternalProtectionLevelOptionsPtrOutput {
	return i.ToExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (i ExternalProtectionLevelOptionsArgs) ToExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) ExternalProtectionLevelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalProtectionLevelOptionsOutput).ToExternalProtectionLevelOptionsPtrOutputWithContext(ctx)
}

// ExternalProtectionLevelOptionsPtrInput is an input type that accepts ExternalProtectionLevelOptionsArgs, ExternalProtectionLevelOptionsPtr and ExternalProtectionLevelOptionsPtrOutput values.
// You can construct a concrete instance of `ExternalProtectionLevelOptionsPtrInput` via:
//
//          ExternalProtectionLevelOptionsArgs{...}
//
//  or:
//
//          nil
type ExternalProtectionLevelOptionsPtrInput interface {
	pulumi.Input

	ToExternalProtectionLevelOptionsPtrOutput() ExternalProtectionLevelOptionsPtrOutput
	ToExternalProtectionLevelOptionsPtrOutputWithContext(context.Context) ExternalProtectionLevelOptionsPtrOutput
}

type externalProtectionLevelOptionsPtrType ExternalProtectionLevelOptionsArgs

func ExternalProtectionLevelOptionsPtr(v *ExternalProtectionLevelOptionsArgs) ExternalProtectionLevelOptionsPtrInput {
	return (*externalProtectionLevelOptionsPtrType)(v)
}

func (*externalProtectionLevelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalProtectionLevelOptions)(nil)).Elem()
}

func (i *externalProtectionLevelOptionsPtrType) ToExternalProtectionLevelOptionsPtrOutput() ExternalProtectionLevelOptionsPtrOutput {
	return i.ToExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (i *externalProtectionLevelOptionsPtrType) ToExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) ExternalProtectionLevelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalProtectionLevelOptionsPtrOutput)
}

// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level.
type ExternalProtectionLevelOptionsOutput struct{ *pulumi.OutputState }

func (ExternalProtectionLevelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalProtectionLevelOptions)(nil)).Elem()
}

func (o ExternalProtectionLevelOptionsOutput) ToExternalProtectionLevelOptionsOutput() ExternalProtectionLevelOptionsOutput {
	return o
}

func (o ExternalProtectionLevelOptionsOutput) ToExternalProtectionLevelOptionsOutputWithContext(ctx context.Context) ExternalProtectionLevelOptionsOutput {
	return o
}

func (o ExternalProtectionLevelOptionsOutput) ToExternalProtectionLevelOptionsPtrOutput() ExternalProtectionLevelOptionsPtrOutput {
	return o.ToExternalProtectionLevelOptionsPtrOutputWithContext(context.Background())
}

func (o ExternalProtectionLevelOptionsOutput) ToExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) ExternalProtectionLevelOptionsPtrOutput {
	return o.ApplyT(func(v ExternalProtectionLevelOptions) *ExternalProtectionLevelOptions {
		return &v
	}).(ExternalProtectionLevelOptionsPtrOutput)
}

// The URI for an external resource that this CryptoKeyVersion represents.
func (o ExternalProtectionLevelOptionsOutput) ExternalKeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalProtectionLevelOptions) *string { return v.ExternalKeyUri }).(pulumi.StringPtrOutput)
}

type ExternalProtectionLevelOptionsPtrOutput struct{ *pulumi.OutputState }

func (ExternalProtectionLevelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalProtectionLevelOptions)(nil)).Elem()
}

func (o ExternalProtectionLevelOptionsPtrOutput) ToExternalProtectionLevelOptionsPtrOutput() ExternalProtectionLevelOptionsPtrOutput {
	return o
}

func (o ExternalProtectionLevelOptionsPtrOutput) ToExternalProtectionLevelOptionsPtrOutputWithContext(ctx context.Context) ExternalProtectionLevelOptionsPtrOutput {
	return o
}

func (o ExternalProtectionLevelOptionsPtrOutput) Elem() ExternalProtectionLevelOptionsOutput {
	return o.ApplyT(func(v *ExternalProtectionLevelOptions) ExternalProtectionLevelOptions { return *v }).(ExternalProtectionLevelOptionsOutput)
}

// The URI for an external resource that this CryptoKeyVersion represents.
func (o ExternalProtectionLevelOptionsPtrOutput) ExternalKeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalProtectionLevelOptions) *string {
		if v == nil {
			return nil
		}
		return v.ExternalKeyUri
	}).(pulumi.StringPtrOutput)
}

// Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).
type KeyOperationAttestation struct {
	// Output only. The certificate chains needed to validate the attestation
	CertChains *CertificateChains `pulumi:"certChains"`
	// Output only. The attestation data provided by the HSM when the key operation was performed.
	Content *string `pulumi:"content"`
	// Output only. The format of the attestation data.
	Format *string `pulumi:"format"`
}

// KeyOperationAttestationInput is an input type that accepts KeyOperationAttestationArgs and KeyOperationAttestationOutput values.
// You can construct a concrete instance of `KeyOperationAttestationInput` via:
//
//          KeyOperationAttestationArgs{...}
type KeyOperationAttestationInput interface {
	pulumi.Input

	ToKeyOperationAttestationOutput() KeyOperationAttestationOutput
	ToKeyOperationAttestationOutputWithContext(context.Context) KeyOperationAttestationOutput
}

// Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).
type KeyOperationAttestationArgs struct {
	// Output only. The certificate chains needed to validate the attestation
	CertChains CertificateChainsPtrInput `pulumi:"certChains"`
	// Output only. The attestation data provided by the HSM when the key operation was performed.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// Output only. The format of the attestation data.
	Format pulumi.StringPtrInput `pulumi:"format"`
}

func (KeyOperationAttestationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyOperationAttestation)(nil)).Elem()
}

func (i KeyOperationAttestationArgs) ToKeyOperationAttestationOutput() KeyOperationAttestationOutput {
	return i.ToKeyOperationAttestationOutputWithContext(context.Background())
}

func (i KeyOperationAttestationArgs) ToKeyOperationAttestationOutputWithContext(ctx context.Context) KeyOperationAttestationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOperationAttestationOutput)
}

func (i KeyOperationAttestationArgs) ToKeyOperationAttestationPtrOutput() KeyOperationAttestationPtrOutput {
	return i.ToKeyOperationAttestationPtrOutputWithContext(context.Background())
}

func (i KeyOperationAttestationArgs) ToKeyOperationAttestationPtrOutputWithContext(ctx context.Context) KeyOperationAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOperationAttestationOutput).ToKeyOperationAttestationPtrOutputWithContext(ctx)
}

// KeyOperationAttestationPtrInput is an input type that accepts KeyOperationAttestationArgs, KeyOperationAttestationPtr and KeyOperationAttestationPtrOutput values.
// You can construct a concrete instance of `KeyOperationAttestationPtrInput` via:
//
//          KeyOperationAttestationArgs{...}
//
//  or:
//
//          nil
type KeyOperationAttestationPtrInput interface {
	pulumi.Input

	ToKeyOperationAttestationPtrOutput() KeyOperationAttestationPtrOutput
	ToKeyOperationAttestationPtrOutputWithContext(context.Context) KeyOperationAttestationPtrOutput
}

type keyOperationAttestationPtrType KeyOperationAttestationArgs

func KeyOperationAttestationPtr(v *KeyOperationAttestationArgs) KeyOperationAttestationPtrInput {
	return (*keyOperationAttestationPtrType)(v)
}

func (*keyOperationAttestationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyOperationAttestation)(nil)).Elem()
}

func (i *keyOperationAttestationPtrType) ToKeyOperationAttestationPtrOutput() KeyOperationAttestationPtrOutput {
	return i.ToKeyOperationAttestationPtrOutputWithContext(context.Background())
}

func (i *keyOperationAttestationPtrType) ToKeyOperationAttestationPtrOutputWithContext(ctx context.Context) KeyOperationAttestationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOperationAttestationPtrOutput)
}

// Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).
type KeyOperationAttestationOutput struct{ *pulumi.OutputState }

func (KeyOperationAttestationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyOperationAttestation)(nil)).Elem()
}

func (o KeyOperationAttestationOutput) ToKeyOperationAttestationOutput() KeyOperationAttestationOutput {
	return o
}

func (o KeyOperationAttestationOutput) ToKeyOperationAttestationOutputWithContext(ctx context.Context) KeyOperationAttestationOutput {
	return o
}

func (o KeyOperationAttestationOutput) ToKeyOperationAttestationPtrOutput() KeyOperationAttestationPtrOutput {
	return o.ToKeyOperationAttestationPtrOutputWithContext(context.Background())
}

func (o KeyOperationAttestationOutput) ToKeyOperationAttestationPtrOutputWithContext(ctx context.Context) KeyOperationAttestationPtrOutput {
	return o.ApplyT(func(v KeyOperationAttestation) *KeyOperationAttestation {
		return &v
	}).(KeyOperationAttestationPtrOutput)
}

// Output only. The certificate chains needed to validate the attestation
func (o KeyOperationAttestationOutput) CertChains() CertificateChainsPtrOutput {
	return o.ApplyT(func(v KeyOperationAttestation) *CertificateChains { return v.CertChains }).(CertificateChainsPtrOutput)
}

// Output only. The attestation data provided by the HSM when the key operation was performed.
func (o KeyOperationAttestationOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyOperationAttestation) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Output only. The format of the attestation data.
func (o KeyOperationAttestationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyOperationAttestation) *string { return v.Format }).(pulumi.StringPtrOutput)
}

type KeyOperationAttestationPtrOutput struct{ *pulumi.OutputState }

func (KeyOperationAttestationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyOperationAttestation)(nil)).Elem()
}

func (o KeyOperationAttestationPtrOutput) ToKeyOperationAttestationPtrOutput() KeyOperationAttestationPtrOutput {
	return o
}

func (o KeyOperationAttestationPtrOutput) ToKeyOperationAttestationPtrOutputWithContext(ctx context.Context) KeyOperationAttestationPtrOutput {
	return o
}

func (o KeyOperationAttestationPtrOutput) Elem() KeyOperationAttestationOutput {
	return o.ApplyT(func(v *KeyOperationAttestation) KeyOperationAttestation { return *v }).(KeyOperationAttestationOutput)
}

// Output only. The certificate chains needed to validate the attestation
func (o KeyOperationAttestationPtrOutput) CertChains() CertificateChainsPtrOutput {
	return o.ApplyT(func(v *KeyOperationAttestation) *CertificateChains {
		if v == nil {
			return nil
		}
		return v.CertChains
	}).(CertificateChainsPtrOutput)
}

// Output only. The attestation data provided by the HSM when the key operation was performed.
func (o KeyOperationAttestationPtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyOperationAttestation) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

// Output only. The format of the attestation data.
func (o KeyOperationAttestationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyOperationAttestation) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []AuditConfig `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs AuditConfigArrayInput `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v Policy) []AuditConfig { return v.AuditConfigs }).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyPtrOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v *Policy) []AuditConfig {
		if v == nil {
			return nil
		}
		return v.AuditConfigs
	}).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// The public key component of the wrapping key. For details of the type of key this public key corresponds to, see the ImportMethod.
type WrappingPublicKey struct {
	// The public key, encoded in PEM format. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).
	Pem *string `pulumi:"pem"`
}

// WrappingPublicKeyInput is an input type that accepts WrappingPublicKeyArgs and WrappingPublicKeyOutput values.
// You can construct a concrete instance of `WrappingPublicKeyInput` via:
//
//          WrappingPublicKeyArgs{...}
type WrappingPublicKeyInput interface {
	pulumi.Input

	ToWrappingPublicKeyOutput() WrappingPublicKeyOutput
	ToWrappingPublicKeyOutputWithContext(context.Context) WrappingPublicKeyOutput
}

// The public key component of the wrapping key. For details of the type of key this public key corresponds to, see the ImportMethod.
type WrappingPublicKeyArgs struct {
	// The public key, encoded in PEM format. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).
	Pem pulumi.StringPtrInput `pulumi:"pem"`
}

func (WrappingPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WrappingPublicKey)(nil)).Elem()
}

func (i WrappingPublicKeyArgs) ToWrappingPublicKeyOutput() WrappingPublicKeyOutput {
	return i.ToWrappingPublicKeyOutputWithContext(context.Background())
}

func (i WrappingPublicKeyArgs) ToWrappingPublicKeyOutputWithContext(ctx context.Context) WrappingPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WrappingPublicKeyOutput)
}

func (i WrappingPublicKeyArgs) ToWrappingPublicKeyPtrOutput() WrappingPublicKeyPtrOutput {
	return i.ToWrappingPublicKeyPtrOutputWithContext(context.Background())
}

func (i WrappingPublicKeyArgs) ToWrappingPublicKeyPtrOutputWithContext(ctx context.Context) WrappingPublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WrappingPublicKeyOutput).ToWrappingPublicKeyPtrOutputWithContext(ctx)
}

// WrappingPublicKeyPtrInput is an input type that accepts WrappingPublicKeyArgs, WrappingPublicKeyPtr and WrappingPublicKeyPtrOutput values.
// You can construct a concrete instance of `WrappingPublicKeyPtrInput` via:
//
//          WrappingPublicKeyArgs{...}
//
//  or:
//
//          nil
type WrappingPublicKeyPtrInput interface {
	pulumi.Input

	ToWrappingPublicKeyPtrOutput() WrappingPublicKeyPtrOutput
	ToWrappingPublicKeyPtrOutputWithContext(context.Context) WrappingPublicKeyPtrOutput
}

type wrappingPublicKeyPtrType WrappingPublicKeyArgs

func WrappingPublicKeyPtr(v *WrappingPublicKeyArgs) WrappingPublicKeyPtrInput {
	return (*wrappingPublicKeyPtrType)(v)
}

func (*wrappingPublicKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WrappingPublicKey)(nil)).Elem()
}

func (i *wrappingPublicKeyPtrType) ToWrappingPublicKeyPtrOutput() WrappingPublicKeyPtrOutput {
	return i.ToWrappingPublicKeyPtrOutputWithContext(context.Background())
}

func (i *wrappingPublicKeyPtrType) ToWrappingPublicKeyPtrOutputWithContext(ctx context.Context) WrappingPublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WrappingPublicKeyPtrOutput)
}

// The public key component of the wrapping key. For details of the type of key this public key corresponds to, see the ImportMethod.
type WrappingPublicKeyOutput struct{ *pulumi.OutputState }

func (WrappingPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WrappingPublicKey)(nil)).Elem()
}

func (o WrappingPublicKeyOutput) ToWrappingPublicKeyOutput() WrappingPublicKeyOutput {
	return o
}

func (o WrappingPublicKeyOutput) ToWrappingPublicKeyOutputWithContext(ctx context.Context) WrappingPublicKeyOutput {
	return o
}

func (o WrappingPublicKeyOutput) ToWrappingPublicKeyPtrOutput() WrappingPublicKeyPtrOutput {
	return o.ToWrappingPublicKeyPtrOutputWithContext(context.Background())
}

func (o WrappingPublicKeyOutput) ToWrappingPublicKeyPtrOutputWithContext(ctx context.Context) WrappingPublicKeyPtrOutput {
	return o.ApplyT(func(v WrappingPublicKey) *WrappingPublicKey {
		return &v
	}).(WrappingPublicKeyPtrOutput)
}

// The public key, encoded in PEM format. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).
func (o WrappingPublicKeyOutput) Pem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WrappingPublicKey) *string { return v.Pem }).(pulumi.StringPtrOutput)
}

type WrappingPublicKeyPtrOutput struct{ *pulumi.OutputState }

func (WrappingPublicKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WrappingPublicKey)(nil)).Elem()
}

func (o WrappingPublicKeyPtrOutput) ToWrappingPublicKeyPtrOutput() WrappingPublicKeyPtrOutput {
	return o
}

func (o WrappingPublicKeyPtrOutput) ToWrappingPublicKeyPtrOutputWithContext(ctx context.Context) WrappingPublicKeyPtrOutput {
	return o
}

func (o WrappingPublicKeyPtrOutput) Elem() WrappingPublicKeyOutput {
	return o.ApplyT(func(v *WrappingPublicKey) WrappingPublicKey { return *v }).(WrappingPublicKeyOutput)
}

// The public key, encoded in PEM format. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).
func (o WrappingPublicKeyPtrOutput) Pem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WrappingPublicKey) *string {
		if v == nil {
			return nil
		}
		return v.Pem
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(CertificateChainsOutput{})
	pulumi.RegisterOutputType(CertificateChainsPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionPtrOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplateOutput{})
	pulumi.RegisterOutputType(CryptoKeyVersionTemplatePtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExternalProtectionLevelOptionsOutput{})
	pulumi.RegisterOutputType(ExternalProtectionLevelOptionsPtrOutput{})
	pulumi.RegisterOutputType(KeyOperationAttestationOutput{})
	pulumi.RegisterOutputType(KeyOperationAttestationPtrOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(WrappingPublicKeyOutput{})
	pulumi.RegisterOutputType(WrappingPublicKeyPtrOutput{})
}
