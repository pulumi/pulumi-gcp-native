// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new EkmConnection in a given Project and Location.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type EkmConnection struct {
	pulumi.CustomResourceState

	// The time at which the EkmConnection was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
	CryptoSpacePath pulumi.StringOutput `pulumi:"cryptoSpacePath"`
	// Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`.
	EkmConnectionId pulumi.StringOutput `pulumi:"ekmConnectionId"`
	// Optional. Etag of the currently stored EkmConnection.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
	KeyManagementMode pulumi.StringOutput `pulumi:"keyManagementMode"`
	Location          pulumi.StringOutput `pulumi:"location"`
	// The resource name for the EkmConnection in the format `projects/*/locations/*/ekmConnections/*`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
	ServiceResolvers ServiceResolverResponseArrayOutput `pulumi:"serviceResolvers"`
}

// NewEkmConnection registers a new resource with the given unique name, arguments, and options.
func NewEkmConnection(ctx *pulumi.Context,
	name string, args *EkmConnectionArgs, opts ...pulumi.ResourceOption) (*EkmConnection, error) {
	if args == nil {
		args = &EkmConnectionArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"ekmConnectionId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource EkmConnection
	err := ctx.RegisterResource("google-native:cloudkms/v1:EkmConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEkmConnection gets an existing EkmConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEkmConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EkmConnectionState, opts ...pulumi.ResourceOption) (*EkmConnection, error) {
	var resource EkmConnection
	err := ctx.ReadResource("google-native:cloudkms/v1:EkmConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EkmConnection resources.
type ekmConnectionState struct {
}

type EkmConnectionState struct {
}

func (EkmConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ekmConnectionState)(nil)).Elem()
}

type ekmConnectionArgs struct {
	// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
	CryptoSpacePath *string `pulumi:"cryptoSpacePath"`
	// Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`.
	EkmConnectionId *string `pulumi:"ekmConnectionId"`
	// Optional. Etag of the currently stored EkmConnection.
	Etag *string `pulumi:"etag"`
	// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
	KeyManagementMode *EkmConnectionKeyManagementMode `pulumi:"keyManagementMode"`
	Location          *string                         `pulumi:"location"`
	Project           *string                         `pulumi:"project"`
	// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
	ServiceResolvers []ServiceResolver `pulumi:"serviceResolvers"`
}

// The set of arguments for constructing a EkmConnection resource.
type EkmConnectionArgs struct {
	// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
	CryptoSpacePath pulumi.StringPtrInput
	// Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`.
	EkmConnectionId pulumi.StringPtrInput
	// Optional. Etag of the currently stored EkmConnection.
	Etag pulumi.StringPtrInput
	// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
	KeyManagementMode EkmConnectionKeyManagementModePtrInput
	Location          pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
	ServiceResolvers ServiceResolverArrayInput
}

func (EkmConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ekmConnectionArgs)(nil)).Elem()
}

type EkmConnectionInput interface {
	pulumi.Input

	ToEkmConnectionOutput() EkmConnectionOutput
	ToEkmConnectionOutputWithContext(ctx context.Context) EkmConnectionOutput
}

func (*EkmConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmConnection)(nil)).Elem()
}

func (i *EkmConnection) ToEkmConnectionOutput() EkmConnectionOutput {
	return i.ToEkmConnectionOutputWithContext(context.Background())
}

func (i *EkmConnection) ToEkmConnectionOutputWithContext(ctx context.Context) EkmConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmConnectionOutput)
}

type EkmConnectionOutput struct{ *pulumi.OutputState }

func (EkmConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmConnection)(nil)).Elem()
}

func (o EkmConnectionOutput) ToEkmConnectionOutput() EkmConnectionOutput {
	return o
}

func (o EkmConnectionOutput) ToEkmConnectionOutputWithContext(ctx context.Context) EkmConnectionOutput {
	return o
}

// The time at which the EkmConnection was created.
func (o EkmConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
func (o EkmConnectionOutput) CryptoSpacePath() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.CryptoSpacePath }).(pulumi.StringOutput)
}

// Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`.
func (o EkmConnectionOutput) EkmConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.EkmConnectionId }).(pulumi.StringOutput)
}

// Optional. Etag of the currently stored EkmConnection.
func (o EkmConnectionOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
func (o EkmConnectionOutput) KeyManagementMode() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.KeyManagementMode }).(pulumi.StringOutput)
}

func (o EkmConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for the EkmConnection in the format `projects/*/locations/*/ekmConnections/*`.
func (o EkmConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EkmConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmConnection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
func (o EkmConnectionOutput) ServiceResolvers() ServiceResolverResponseArrayOutput {
	return o.ApplyT(func(v *EkmConnection) ServiceResolverResponseArrayOutput { return v.ServiceResolvers }).(ServiceResolverResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EkmConnectionInput)(nil)).Elem(), &EkmConnection{})
	pulumi.RegisterOutputType(EkmConnectionOutput{})
}
