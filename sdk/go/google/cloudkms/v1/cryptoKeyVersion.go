// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a new CryptoKeyVersion in a CryptoKey. The server will assign the next sequential id. If unset, state will be set to ENABLED.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type CryptoKeyVersion struct {
	pulumi.CustomResourceState

	// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.
	Attestation KeyOperationAttestationResponseOutput `pulumi:"attestation"`
	// The time at which this CryptoKeyVersion was created.
	CreateTime  pulumi.StringOutput `pulumi:"createTime"`
	CryptoKeyId pulumi.StringOutput `pulumi:"cryptoKeyId"`
	// The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
	DestroyEventTime pulumi.StringOutput `pulumi:"destroyEventTime"`
	// The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
	DestroyTime pulumi.StringOutput `pulumi:"destroyTime"`
	// The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.
	ExternalDestructionFailureReason pulumi.StringOutput `pulumi:"externalDestructionFailureReason"`
	// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
	ExternalProtectionLevelOptions ExternalProtectionLevelOptionsResponseOutput `pulumi:"externalProtectionLevelOptions"`
	// The time this CryptoKeyVersion's key material was generated.
	GenerateTime pulumi.StringOutput `pulumi:"generateTime"`
	// The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.
	GenerationFailureReason pulumi.StringOutput `pulumi:"generationFailureReason"`
	// The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.
	ImportFailureReason pulumi.StringOutput `pulumi:"importFailureReason"`
	// The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.
	ImportJob pulumi.StringOutput `pulumi:"importJob"`
	// The time at which this CryptoKeyVersion's key material was most recently imported.
	ImportTime pulumi.StringOutput `pulumi:"importTime"`
	KeyRingId  pulumi.StringOutput `pulumi:"keyRingId"`
	Location   pulumi.StringOutput `pulumi:"location"`
	// The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
	ProtectionLevel pulumi.StringOutput `pulumi:"protectionLevel"`
	// Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.
	ReimportEligible pulumi.BoolOutput `pulumi:"reimportEligible"`
	// The current state of the CryptoKeyVersion.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewCryptoKeyVersion registers a new resource with the given unique name, arguments, and options.
func NewCryptoKeyVersion(ctx *pulumi.Context,
	name string, args *CryptoKeyVersionArgs, opts ...pulumi.ResourceOption) (*CryptoKeyVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyRingId == nil {
		return nil, errors.New("invalid value for required argument 'KeyRingId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"cryptoKeyId",
		"keyRingId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource CryptoKeyVersion
	err := ctx.RegisterResource("google-native:cloudkms/v1:CryptoKeyVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCryptoKeyVersion gets an existing CryptoKeyVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCryptoKeyVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CryptoKeyVersionState, opts ...pulumi.ResourceOption) (*CryptoKeyVersion, error) {
	var resource CryptoKeyVersion
	err := ctx.ReadResource("google-native:cloudkms/v1:CryptoKeyVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CryptoKeyVersion resources.
type cryptoKeyVersionState struct {
}

type CryptoKeyVersionState struct {
}

func (CryptoKeyVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoKeyVersionState)(nil)).Elem()
}

type cryptoKeyVersionArgs struct {
	CryptoKeyId *string `pulumi:"cryptoKeyId"`
	// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
	ExternalProtectionLevelOptions *ExternalProtectionLevelOptions `pulumi:"externalProtectionLevelOptions"`
	KeyRingId                      string                          `pulumi:"keyRingId"`
	Location                       *string                         `pulumi:"location"`
	Project                        *string                         `pulumi:"project"`
	// The current state of the CryptoKeyVersion.
	State *CryptoKeyVersionStateEnum `pulumi:"state"`
}

// The set of arguments for constructing a CryptoKeyVersion resource.
type CryptoKeyVersionArgs struct {
	CryptoKeyId pulumi.StringPtrInput
	// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
	ExternalProtectionLevelOptions ExternalProtectionLevelOptionsPtrInput
	KeyRingId                      pulumi.StringInput
	Location                       pulumi.StringPtrInput
	Project                        pulumi.StringPtrInput
	// The current state of the CryptoKeyVersion.
	State CryptoKeyVersionStateEnumPtrInput
}

func (CryptoKeyVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoKeyVersionArgs)(nil)).Elem()
}

type CryptoKeyVersionInput interface {
	pulumi.Input

	ToCryptoKeyVersionOutput() CryptoKeyVersionOutput
	ToCryptoKeyVersionOutputWithContext(ctx context.Context) CryptoKeyVersionOutput
}

func (*CryptoKeyVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersion)(nil)).Elem()
}

func (i *CryptoKeyVersion) ToCryptoKeyVersionOutput() CryptoKeyVersionOutput {
	return i.ToCryptoKeyVersionOutputWithContext(context.Background())
}

func (i *CryptoKeyVersion) ToCryptoKeyVersionOutputWithContext(ctx context.Context) CryptoKeyVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoKeyVersionOutput)
}

type CryptoKeyVersionOutput struct{ *pulumi.OutputState }

func (CryptoKeyVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoKeyVersion)(nil)).Elem()
}

func (o CryptoKeyVersionOutput) ToCryptoKeyVersionOutput() CryptoKeyVersionOutput {
	return o
}

func (o CryptoKeyVersionOutput) ToCryptoKeyVersionOutputWithContext(ctx context.Context) CryptoKeyVersionOutput {
	return o
}

// The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
func (o CryptoKeyVersionOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.
func (o CryptoKeyVersionOutput) Attestation() KeyOperationAttestationResponseOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) KeyOperationAttestationResponseOutput { return v.Attestation }).(KeyOperationAttestationResponseOutput)
}

// The time at which this CryptoKeyVersion was created.
func (o CryptoKeyVersionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o CryptoKeyVersionOutput) CryptoKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.CryptoKeyId }).(pulumi.StringOutput)
}

// The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
func (o CryptoKeyVersionOutput) DestroyEventTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.DestroyEventTime }).(pulumi.StringOutput)
}

// The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
func (o CryptoKeyVersionOutput) DestroyTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.DestroyTime }).(pulumi.StringOutput)
}

// The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.
func (o CryptoKeyVersionOutput) ExternalDestructionFailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.ExternalDestructionFailureReason }).(pulumi.StringOutput)
}

// ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
func (o CryptoKeyVersionOutput) ExternalProtectionLevelOptions() ExternalProtectionLevelOptionsResponseOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) ExternalProtectionLevelOptionsResponseOutput {
		return v.ExternalProtectionLevelOptions
	}).(ExternalProtectionLevelOptionsResponseOutput)
}

// The time this CryptoKeyVersion's key material was generated.
func (o CryptoKeyVersionOutput) GenerateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.GenerateTime }).(pulumi.StringOutput)
}

// The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.
func (o CryptoKeyVersionOutput) GenerationFailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.GenerationFailureReason }).(pulumi.StringOutput)
}

// The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.
func (o CryptoKeyVersionOutput) ImportFailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.ImportFailureReason }).(pulumi.StringOutput)
}

// The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.
func (o CryptoKeyVersionOutput) ImportJob() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.ImportJob }).(pulumi.StringOutput)
}

// The time at which this CryptoKeyVersion's key material was most recently imported.
func (o CryptoKeyVersionOutput) ImportTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.ImportTime }).(pulumi.StringOutput)
}

func (o CryptoKeyVersionOutput) KeyRingId() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.KeyRingId }).(pulumi.StringOutput)
}

func (o CryptoKeyVersionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
func (o CryptoKeyVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CryptoKeyVersionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
func (o CryptoKeyVersionOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.ProtectionLevel }).(pulumi.StringOutput)
}

// Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.
func (o CryptoKeyVersionOutput) ReimportEligible() pulumi.BoolOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.BoolOutput { return v.ReimportEligible }).(pulumi.BoolOutput)
}

// The current state of the CryptoKeyVersion.
func (o CryptoKeyVersionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoKeyVersion) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoKeyVersionInput)(nil)).Elem(), &CryptoKeyVersion{})
	pulumi.RegisterOutputType(CryptoKeyVersionOutput{})
}
