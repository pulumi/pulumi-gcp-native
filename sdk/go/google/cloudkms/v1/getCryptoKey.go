// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns metadata for a given CryptoKey, as well as its primary CryptoKeyVersion.
func LookupCryptoKey(ctx *pulumi.Context, args *LookupCryptoKeyArgs, opts ...pulumi.InvokeOption) (*LookupCryptoKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCryptoKeyResult
	err := ctx.Invoke("google-native:cloudkms/v1:getCryptoKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCryptoKeyArgs struct {
	CryptoKeyId string  `pulumi:"cryptoKeyId"`
	KeyRingId   string  `pulumi:"keyRingId"`
	Location    string  `pulumi:"location"`
	Project     *string `pulumi:"project"`
}

type LookupCryptoKeyResult struct {
	// The time at which this CryptoKey was created.
	CreateTime string `pulumi:"createTime"`
	// Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
	CryptoKeyBackend string `pulumi:"cryptoKeyBackend"`
	// Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
	DestroyScheduledDuration string `pulumi:"destroyScheduledDuration"`
	// Immutable. Whether this key may contain imported versions only.
	ImportOnly bool `pulumi:"importOnly"`
	// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
	Labels map[string]string `pulumi:"labels"`
	// The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	Name string `pulumi:"name"`
	// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	NextRotationTime string `pulumi:"nextRotationTime"`
	// A copy of the "primary" CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey's primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.
	Primary CryptoKeyVersionResponse `pulumi:"primary"`
	// Immutable. The immutable purpose of this CryptoKey.
	Purpose string `pulumi:"purpose"`
	// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	RotationPeriod string `pulumi:"rotationPeriod"`
	// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
	VersionTemplate CryptoKeyVersionTemplateResponse `pulumi:"versionTemplate"`
}

func LookupCryptoKeyOutput(ctx *pulumi.Context, args LookupCryptoKeyOutputArgs, opts ...pulumi.InvokeOption) LookupCryptoKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCryptoKeyResult, error) {
			args := v.(LookupCryptoKeyArgs)
			r, err := LookupCryptoKey(ctx, &args, opts...)
			var s LookupCryptoKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCryptoKeyResultOutput)
}

type LookupCryptoKeyOutputArgs struct {
	CryptoKeyId pulumi.StringInput    `pulumi:"cryptoKeyId"`
	KeyRingId   pulumi.StringInput    `pulumi:"keyRingId"`
	Location    pulumi.StringInput    `pulumi:"location"`
	Project     pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupCryptoKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCryptoKeyArgs)(nil)).Elem()
}

type LookupCryptoKeyResultOutput struct{ *pulumi.OutputState }

func (LookupCryptoKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCryptoKeyResult)(nil)).Elem()
}

func (o LookupCryptoKeyResultOutput) ToLookupCryptoKeyResultOutput() LookupCryptoKeyResultOutput {
	return o
}

func (o LookupCryptoKeyResultOutput) ToLookupCryptoKeyResultOutputWithContext(ctx context.Context) LookupCryptoKeyResultOutput {
	return o
}

func (o LookupCryptoKeyResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCryptoKeyResult] {
	return pulumix.Output[LookupCryptoKeyResult]{
		OutputState: o.OutputState,
	}
}

// The time at which this CryptoKey was created.
func (o LookupCryptoKeyResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.
func (o LookupCryptoKeyResultOutput) CryptoKeyBackend() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) string { return v.CryptoKeyBackend }).(pulumi.StringOutput)
}

// Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.
func (o LookupCryptoKeyResultOutput) DestroyScheduledDuration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) string { return v.DestroyScheduledDuration }).(pulumi.StringOutput)
}

// Immutable. Whether this key may contain imported versions only.
func (o LookupCryptoKeyResultOutput) ImportOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) bool { return v.ImportOnly }).(pulumi.BoolOutput)
}

// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
func (o LookupCryptoKeyResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o LookupCryptoKeyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) string { return v.Name }).(pulumi.StringOutput)
}

// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
func (o LookupCryptoKeyResultOutput) NextRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) string { return v.NextRotationTime }).(pulumi.StringOutput)
}

// A copy of the "primary" CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey's primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.
func (o LookupCryptoKeyResultOutput) Primary() CryptoKeyVersionResponseOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) CryptoKeyVersionResponse { return v.Primary }).(CryptoKeyVersionResponseOutput)
}

// Immutable. The immutable purpose of this CryptoKey.
func (o LookupCryptoKeyResultOutput) Purpose() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) string { return v.Purpose }).(pulumi.StringOutput)
}

// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
func (o LookupCryptoKeyResultOutput) RotationPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) string { return v.RotationPeriod }).(pulumi.StringOutput)
}

// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
func (o LookupCryptoKeyResultOutput) VersionTemplate() CryptoKeyVersionTemplateResponseOutput {
	return o.ApplyT(func(v LookupCryptoKeyResult) CryptoKeyVersionTemplateResponse { return v.VersionTemplate }).(CryptoKeyVersionTemplateResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCryptoKeyResultOutput{})
}
