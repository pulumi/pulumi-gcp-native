// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a new CryptoKey within a KeyRing. CryptoKey.purpose and CryptoKey.version_template.algorithm are required.
type KeyRingCryptoKey struct {
	pulumi.CustomResourceState

	// The time at which this CryptoKey was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	NextRotationTime pulumi.StringOutput `pulumi:"nextRotationTime"`
	// A copy of the "primary" CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey's primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.
	Primary CryptoKeyVersionResponseOutput `pulumi:"primary"`
	// Immutable. The immutable purpose of this CryptoKey.
	Purpose pulumi.StringOutput `pulumi:"purpose"`
	// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	RotationPeriod pulumi.StringOutput `pulumi:"rotationPeriod"`
	// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
	VersionTemplate CryptoKeyVersionTemplateResponseOutput `pulumi:"versionTemplate"`
}

// NewKeyRingCryptoKey registers a new resource with the given unique name, arguments, and options.
func NewKeyRingCryptoKey(ctx *pulumi.Context,
	name string, args *KeyRingCryptoKeyArgs, opts ...pulumi.ResourceOption) (*KeyRingCryptoKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CryptoKeyId == nil {
		return nil, errors.New("invalid value for required argument 'CryptoKeyId'")
	}
	if args.KeyRingId == nil {
		return nil, errors.New("invalid value for required argument 'KeyRingId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource KeyRingCryptoKey
	err := ctx.RegisterResource("google-native:cloudkms/v1:KeyRingCryptoKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyRingCryptoKey gets an existing KeyRingCryptoKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyRingCryptoKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyRingCryptoKeyState, opts ...pulumi.ResourceOption) (*KeyRingCryptoKey, error) {
	var resource KeyRingCryptoKey
	err := ctx.ReadResource("google-native:cloudkms/v1:KeyRingCryptoKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyRingCryptoKey resources.
type keyRingCryptoKeyState struct {
	// The time at which this CryptoKey was created.
	CreateTime *string `pulumi:"createTime"`
	// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
	Labels map[string]string `pulumi:"labels"`
	// The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	Name *string `pulumi:"name"`
	// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	NextRotationTime *string `pulumi:"nextRotationTime"`
	// A copy of the "primary" CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey's primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.
	Primary *CryptoKeyVersionResponse `pulumi:"primary"`
	// Immutable. The immutable purpose of this CryptoKey.
	Purpose *string `pulumi:"purpose"`
	// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	RotationPeriod *string `pulumi:"rotationPeriod"`
	// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
	VersionTemplate *CryptoKeyVersionTemplateResponse `pulumi:"versionTemplate"`
}

type KeyRingCryptoKeyState struct {
	// The time at which this CryptoKey was created.
	CreateTime pulumi.StringPtrInput
	// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
	Labels pulumi.StringMapInput
	// The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	Name pulumi.StringPtrInput
	// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	NextRotationTime pulumi.StringPtrInput
	// A copy of the "primary" CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey's primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.
	Primary CryptoKeyVersionResponsePtrInput
	// Immutable. The immutable purpose of this CryptoKey.
	Purpose pulumi.StringPtrInput
	// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	RotationPeriod pulumi.StringPtrInput
	// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
	VersionTemplate CryptoKeyVersionTemplateResponsePtrInput
}

func (KeyRingCryptoKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingCryptoKeyState)(nil)).Elem()
}

type keyRingCryptoKeyArgs struct {
	CryptoKeyId string `pulumi:"cryptoKeyId"`
	KeyRingId   string `pulumi:"keyRingId"`
	// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
	Labels   map[string]string `pulumi:"labels"`
	Location string            `pulumi:"location"`
	// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	NextRotationTime *string `pulumi:"nextRotationTime"`
	Project          string  `pulumi:"project"`
	// Immutable. The immutable purpose of this CryptoKey.
	Purpose *string `pulumi:"purpose"`
	// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	RotationPeriod             *string `pulumi:"rotationPeriod"`
	SkipInitialVersionCreation *string `pulumi:"skipInitialVersionCreation"`
	// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
	VersionTemplate *CryptoKeyVersionTemplate `pulumi:"versionTemplate"`
}

// The set of arguments for constructing a KeyRingCryptoKey resource.
type KeyRingCryptoKeyArgs struct {
	CryptoKeyId pulumi.StringInput
	KeyRingId   pulumi.StringInput
	// Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).
	Labels   pulumi.StringMapInput
	Location pulumi.StringInput
	// At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	NextRotationTime pulumi.StringPtrInput
	Project          pulumi.StringInput
	// Immutable. The immutable purpose of this CryptoKey.
	Purpose pulumi.StringPtrInput
	// next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.
	RotationPeriod             pulumi.StringPtrInput
	SkipInitialVersionCreation pulumi.StringPtrInput
	// A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
	VersionTemplate CryptoKeyVersionTemplatePtrInput
}

func (KeyRingCryptoKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingCryptoKeyArgs)(nil)).Elem()
}

type KeyRingCryptoKeyInput interface {
	pulumi.Input

	ToKeyRingCryptoKeyOutput() KeyRingCryptoKeyOutput
	ToKeyRingCryptoKeyOutputWithContext(ctx context.Context) KeyRingCryptoKeyOutput
}

func (*KeyRingCryptoKey) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingCryptoKey)(nil))
}

func (i *KeyRingCryptoKey) ToKeyRingCryptoKeyOutput() KeyRingCryptoKeyOutput {
	return i.ToKeyRingCryptoKeyOutputWithContext(context.Background())
}

func (i *KeyRingCryptoKey) ToKeyRingCryptoKeyOutputWithContext(ctx context.Context) KeyRingCryptoKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingCryptoKeyOutput)
}

type KeyRingCryptoKeyOutput struct {
	*pulumi.OutputState
}

func (KeyRingCryptoKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingCryptoKey)(nil))
}

func (o KeyRingCryptoKeyOutput) ToKeyRingCryptoKeyOutput() KeyRingCryptoKeyOutput {
	return o
}

func (o KeyRingCryptoKeyOutput) ToKeyRingCryptoKeyOutputWithContext(ctx context.Context) KeyRingCryptoKeyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KeyRingCryptoKeyOutput{})
}
