// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type KeyRingImportJobIamPolicy struct {
	pulumi.CustomResourceState
}

// NewKeyRingImportJobIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewKeyRingImportJobIamPolicy(ctx *pulumi.Context,
	name string, args *KeyRingImportJobIamPolicyArgs, opts ...pulumi.ResourceOption) (*KeyRingImportJobIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImportJobsId == nil {
		return nil, errors.New("invalid value for required argument 'ImportJobsId'")
	}
	if args.KeyRingsId == nil {
		return nil, errors.New("invalid value for required argument 'KeyRingsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource KeyRingImportJobIamPolicy
	err := ctx.RegisterResource("google-cloud:cloudkms/v1:KeyRingImportJobIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyRingImportJobIamPolicy gets an existing KeyRingImportJobIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyRingImportJobIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyRingImportJobIamPolicyState, opts ...pulumi.ResourceOption) (*KeyRingImportJobIamPolicy, error) {
	var resource KeyRingImportJobIamPolicy
	err := ctx.ReadResource("google-cloud:cloudkms/v1:KeyRingImportJobIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyRingImportJobIamPolicy resources.
type keyRingImportJobIamPolicyState struct {
}

type KeyRingImportJobIamPolicyState struct {
}

func (KeyRingImportJobIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingImportJobIamPolicyState)(nil)).Elem()
}

type keyRingImportJobIamPolicyArgs struct {
	ImportJobsId string `pulumi:"importJobsId"`
	KeyRingsId   string `pulumi:"keyRingsId"`
	LocationsId  string `pulumi:"locationsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a KeyRingImportJobIamPolicy resource.
type KeyRingImportJobIamPolicyArgs struct {
	ImportJobsId pulumi.StringInput
	KeyRingsId   pulumi.StringInput
	LocationsId  pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (KeyRingImportJobIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingImportJobIamPolicyArgs)(nil)).Elem()
}

type KeyRingImportJobIamPolicyInput interface {
	pulumi.Input

	ToKeyRingImportJobIamPolicyOutput() KeyRingImportJobIamPolicyOutput
	ToKeyRingImportJobIamPolicyOutputWithContext(ctx context.Context) KeyRingImportJobIamPolicyOutput
}

func (*KeyRingImportJobIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJobIamPolicy)(nil))
}

func (i *KeyRingImportJobIamPolicy) ToKeyRingImportJobIamPolicyOutput() KeyRingImportJobIamPolicyOutput {
	return i.ToKeyRingImportJobIamPolicyOutputWithContext(context.Background())
}

func (i *KeyRingImportJobIamPolicy) ToKeyRingImportJobIamPolicyOutputWithContext(ctx context.Context) KeyRingImportJobIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingImportJobIamPolicyOutput)
}

type KeyRingImportJobIamPolicyOutput struct {
	*pulumi.OutputState
}

func (KeyRingImportJobIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJobIamPolicy)(nil))
}

func (o KeyRingImportJobIamPolicyOutput) ToKeyRingImportJobIamPolicyOutput() KeyRingImportJobIamPolicyOutput {
	return o
}

func (o KeyRingImportJobIamPolicyOutput) ToKeyRingImportJobIamPolicyOutputWithContext(ctx context.Context) KeyRingImportJobIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KeyRingImportJobIamPolicyOutput{})
}
