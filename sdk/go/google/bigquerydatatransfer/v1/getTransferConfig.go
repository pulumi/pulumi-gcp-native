// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns information about a data transfer config.
func LookupTransferConfig(ctx *pulumi.Context, args *LookupTransferConfigArgs, opts ...pulumi.InvokeOption) (*LookupTransferConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTransferConfigResult
	err := ctx.Invoke("google-native:bigquerydatatransfer/v1:getTransferConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTransferConfigArgs struct {
	Location         string  `pulumi:"location"`
	Project          *string `pulumi:"project"`
	TransferConfigId string  `pulumi:"transferConfigId"`
}

type LookupTransferConfigResult struct {
	// The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
	DataRefreshWindowDays int `pulumi:"dataRefreshWindowDays"`
	// Data source ID. This cannot be changed once data transfer is created. The full list of available data source IDs can be returned through an API call: https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list
	DataSourceId string `pulumi:"dataSourceId"`
	// Region in which BigQuery dataset is located.
	DatasetRegion string `pulumi:"datasetRegion"`
	// The BigQuery target dataset id.
	DestinationDatasetId string `pulumi:"destinationDatasetId"`
	// Is this config disabled. When set to true, no runs are scheduled for a given transfer.
	Disabled bool `pulumi:"disabled"`
	// User specified display name for the data transfer.
	DisplayName string `pulumi:"displayName"`
	// Email notifications will be sent according to these preferences to the email address of the user who owns this transfer config.
	EmailPreferences EmailPreferencesResponse `pulumi:"emailPreferences"`
	// The encryption configuration part. Currently, it is only used for the optional KMS key name. The BigQuery service account of your project must be granted permissions to use the key. Read methods will return the key name applied in effect. Write methods will apply the key if it is present, or otherwise try to apply project default keys if it is absent.
	EncryptionConfiguration EncryptionConfigurationResponse `pulumi:"encryptionConfiguration"`
	// The resource name of the transfer config. Transfer config names have the form either `projects/{project_id}/locations/{region}/transferConfigs/{config_id}` or `projects/{project_id}/transferConfigs/{config_id}`, where `config_id` is usually a UUID, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
	Name string `pulumi:"name"`
	// Next time when data transfer will run.
	NextRunTime string `pulumi:"nextRunTime"`
	// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
	NotificationPubsubTopic string `pulumi:"notificationPubsubTopic"`
	// Information about the user whose credentials are used to transfer data. Populated only for `transferConfigs.get` requests. In case the user information is not available, this field will not be populated.
	OwnerInfo UserInfoResponse `pulumi:"ownerInfo"`
	// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
	Params map[string]interface{} `pulumi:"params"`
	// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
	Schedule string `pulumi:"schedule"`
	// Options customizing the data transfer schedule.
	ScheduleOptions ScheduleOptionsResponse `pulumi:"scheduleOptions"`
	// State of the most recently updated transfer run.
	State string `pulumi:"state"`
	// Data transfer modification time. Ignored by server on input.
	UpdateTime string `pulumi:"updateTime"`
	// Deprecated. Unique ID of the user on whose behalf transfer is done.
	//
	// Deprecated: Deprecated. Unique ID of the user on whose behalf transfer is done.
	UserId string `pulumi:"userId"`
}

func LookupTransferConfigOutput(ctx *pulumi.Context, args LookupTransferConfigOutputArgs, opts ...pulumi.InvokeOption) LookupTransferConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTransferConfigResult, error) {
			args := v.(LookupTransferConfigArgs)
			r, err := LookupTransferConfig(ctx, &args, opts...)
			var s LookupTransferConfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTransferConfigResultOutput)
}

type LookupTransferConfigOutputArgs struct {
	Location         pulumi.StringInput    `pulumi:"location"`
	Project          pulumi.StringPtrInput `pulumi:"project"`
	TransferConfigId pulumi.StringInput    `pulumi:"transferConfigId"`
}

func (LookupTransferConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransferConfigArgs)(nil)).Elem()
}

type LookupTransferConfigResultOutput struct{ *pulumi.OutputState }

func (LookupTransferConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransferConfigResult)(nil)).Elem()
}

func (o LookupTransferConfigResultOutput) ToLookupTransferConfigResultOutput() LookupTransferConfigResultOutput {
	return o
}

func (o LookupTransferConfigResultOutput) ToLookupTransferConfigResultOutputWithContext(ctx context.Context) LookupTransferConfigResultOutput {
	return o
}

// The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
func (o LookupTransferConfigResultOutput) DataRefreshWindowDays() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) int { return v.DataRefreshWindowDays }).(pulumi.IntOutput)
}

// Data source ID. This cannot be changed once data transfer is created. The full list of available data source IDs can be returned through an API call: https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list
func (o LookupTransferConfigResultOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// Region in which BigQuery dataset is located.
func (o LookupTransferConfigResultOutput) DatasetRegion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.DatasetRegion }).(pulumi.StringOutput)
}

// The BigQuery target dataset id.
func (o LookupTransferConfigResultOutput) DestinationDatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.DestinationDatasetId }).(pulumi.StringOutput)
}

// Is this config disabled. When set to true, no runs are scheduled for a given transfer.
func (o LookupTransferConfigResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// User specified display name for the data transfer.
func (o LookupTransferConfigResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Email notifications will be sent according to these preferences to the email address of the user who owns this transfer config.
func (o LookupTransferConfigResultOutput) EmailPreferences() EmailPreferencesResponseOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) EmailPreferencesResponse { return v.EmailPreferences }).(EmailPreferencesResponseOutput)
}

// The encryption configuration part. Currently, it is only used for the optional KMS key name. The BigQuery service account of your project must be granted permissions to use the key. Read methods will return the key name applied in effect. Write methods will apply the key if it is present, or otherwise try to apply project default keys if it is absent.
func (o LookupTransferConfigResultOutput) EncryptionConfiguration() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) EncryptionConfigurationResponse { return v.EncryptionConfiguration }).(EncryptionConfigurationResponseOutput)
}

// The resource name of the transfer config. Transfer config names have the form either `projects/{project_id}/locations/{region}/transferConfigs/{config_id}` or `projects/{project_id}/transferConfigs/{config_id}`, where `config_id` is usually a UUID, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
func (o LookupTransferConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// Next time when data transfer will run.
func (o LookupTransferConfigResultOutput) NextRunTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.NextRunTime }).(pulumi.StringOutput)
}

// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
func (o LookupTransferConfigResultOutput) NotificationPubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.NotificationPubsubTopic }).(pulumi.StringOutput)
}

// Information about the user whose credentials are used to transfer data. Populated only for `transferConfigs.get` requests. In case the user information is not available, this field will not be populated.
func (o LookupTransferConfigResultOutput) OwnerInfo() UserInfoResponseOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) UserInfoResponse { return v.OwnerInfo }).(UserInfoResponseOutput)
}

// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
func (o LookupTransferConfigResultOutput) Params() pulumi.MapOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) map[string]interface{} { return v.Params }).(pulumi.MapOutput)
}

// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
func (o LookupTransferConfigResultOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.Schedule }).(pulumi.StringOutput)
}

// Options customizing the data transfer schedule.
func (o LookupTransferConfigResultOutput) ScheduleOptions() ScheduleOptionsResponseOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) ScheduleOptionsResponse { return v.ScheduleOptions }).(ScheduleOptionsResponseOutput)
}

// State of the most recently updated transfer run.
func (o LookupTransferConfigResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.State }).(pulumi.StringOutput)
}

// Data transfer modification time. Ignored by server on input.
func (o LookupTransferConfigResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Deprecated. Unique ID of the user on whose behalf transfer is done.
//
// Deprecated: Deprecated. Unique ID of the user on whose behalf transfer is done.
func (o LookupTransferConfigResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransferConfigResult) string { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTransferConfigResultOutput{})
}
