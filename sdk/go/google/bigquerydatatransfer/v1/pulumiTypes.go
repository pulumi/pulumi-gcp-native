// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Represents preferences for sending email notifications for transfer run events.
type EmailPreferences struct {
	// If true, email notifications will be sent on transfer run failures.
	EnableFailureEmail *bool `pulumi:"enableFailureEmail"`
}

// EmailPreferencesInput is an input type that accepts EmailPreferencesArgs and EmailPreferencesOutput values.
// You can construct a concrete instance of `EmailPreferencesInput` via:
//
//	EmailPreferencesArgs{...}
type EmailPreferencesInput interface {
	pulumi.Input

	ToEmailPreferencesOutput() EmailPreferencesOutput
	ToEmailPreferencesOutputWithContext(context.Context) EmailPreferencesOutput
}

// Represents preferences for sending email notifications for transfer run events.
type EmailPreferencesArgs struct {
	// If true, email notifications will be sent on transfer run failures.
	EnableFailureEmail pulumi.BoolPtrInput `pulumi:"enableFailureEmail"`
}

func (EmailPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailPreferences)(nil)).Elem()
}

func (i EmailPreferencesArgs) ToEmailPreferencesOutput() EmailPreferencesOutput {
	return i.ToEmailPreferencesOutputWithContext(context.Background())
}

func (i EmailPreferencesArgs) ToEmailPreferencesOutputWithContext(ctx context.Context) EmailPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailPreferencesOutput)
}

func (i EmailPreferencesArgs) ToEmailPreferencesPtrOutput() EmailPreferencesPtrOutput {
	return i.ToEmailPreferencesPtrOutputWithContext(context.Background())
}

func (i EmailPreferencesArgs) ToEmailPreferencesPtrOutputWithContext(ctx context.Context) EmailPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailPreferencesOutput).ToEmailPreferencesPtrOutputWithContext(ctx)
}

// EmailPreferencesPtrInput is an input type that accepts EmailPreferencesArgs, EmailPreferencesPtr and EmailPreferencesPtrOutput values.
// You can construct a concrete instance of `EmailPreferencesPtrInput` via:
//
//	        EmailPreferencesArgs{...}
//
//	or:
//
//	        nil
type EmailPreferencesPtrInput interface {
	pulumi.Input

	ToEmailPreferencesPtrOutput() EmailPreferencesPtrOutput
	ToEmailPreferencesPtrOutputWithContext(context.Context) EmailPreferencesPtrOutput
}

type emailPreferencesPtrType EmailPreferencesArgs

func EmailPreferencesPtr(v *EmailPreferencesArgs) EmailPreferencesPtrInput {
	return (*emailPreferencesPtrType)(v)
}

func (*emailPreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailPreferences)(nil)).Elem()
}

func (i *emailPreferencesPtrType) ToEmailPreferencesPtrOutput() EmailPreferencesPtrOutput {
	return i.ToEmailPreferencesPtrOutputWithContext(context.Background())
}

func (i *emailPreferencesPtrType) ToEmailPreferencesPtrOutputWithContext(ctx context.Context) EmailPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailPreferencesPtrOutput)
}

// Represents preferences for sending email notifications for transfer run events.
type EmailPreferencesOutput struct{ *pulumi.OutputState }

func (EmailPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailPreferences)(nil)).Elem()
}

func (o EmailPreferencesOutput) ToEmailPreferencesOutput() EmailPreferencesOutput {
	return o
}

func (o EmailPreferencesOutput) ToEmailPreferencesOutputWithContext(ctx context.Context) EmailPreferencesOutput {
	return o
}

func (o EmailPreferencesOutput) ToEmailPreferencesPtrOutput() EmailPreferencesPtrOutput {
	return o.ToEmailPreferencesPtrOutputWithContext(context.Background())
}

func (o EmailPreferencesOutput) ToEmailPreferencesPtrOutputWithContext(ctx context.Context) EmailPreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EmailPreferences) *EmailPreferences {
		return &v
	}).(EmailPreferencesPtrOutput)
}

// If true, email notifications will be sent on transfer run failures.
func (o EmailPreferencesOutput) EnableFailureEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EmailPreferences) *bool { return v.EnableFailureEmail }).(pulumi.BoolPtrOutput)
}

type EmailPreferencesPtrOutput struct{ *pulumi.OutputState }

func (EmailPreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailPreferences)(nil)).Elem()
}

func (o EmailPreferencesPtrOutput) ToEmailPreferencesPtrOutput() EmailPreferencesPtrOutput {
	return o
}

func (o EmailPreferencesPtrOutput) ToEmailPreferencesPtrOutputWithContext(ctx context.Context) EmailPreferencesPtrOutput {
	return o
}

func (o EmailPreferencesPtrOutput) Elem() EmailPreferencesOutput {
	return o.ApplyT(func(v *EmailPreferences) EmailPreferences {
		if v != nil {
			return *v
		}
		var ret EmailPreferences
		return ret
	}).(EmailPreferencesOutput)
}

// If true, email notifications will be sent on transfer run failures.
func (o EmailPreferencesPtrOutput) EnableFailureEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailPreferences) *bool {
		if v == nil {
			return nil
		}
		return v.EnableFailureEmail
	}).(pulumi.BoolPtrOutput)
}

// Represents preferences for sending email notifications for transfer run events.
type EmailPreferencesResponse struct {
	// If true, email notifications will be sent on transfer run failures.
	EnableFailureEmail bool `pulumi:"enableFailureEmail"`
}

// Represents preferences for sending email notifications for transfer run events.
type EmailPreferencesResponseOutput struct{ *pulumi.OutputState }

func (EmailPreferencesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailPreferencesResponse)(nil)).Elem()
}

func (o EmailPreferencesResponseOutput) ToEmailPreferencesResponseOutput() EmailPreferencesResponseOutput {
	return o
}

func (o EmailPreferencesResponseOutput) ToEmailPreferencesResponseOutputWithContext(ctx context.Context) EmailPreferencesResponseOutput {
	return o
}

// If true, email notifications will be sent on transfer run failures.
func (o EmailPreferencesResponseOutput) EnableFailureEmail() pulumi.BoolOutput {
	return o.ApplyT(func(v EmailPreferencesResponse) bool { return v.EnableFailureEmail }).(pulumi.BoolOutput)
}

// Represents the encryption configuration for a transfer.
type EncryptionConfiguration struct {
	// The name of the KMS key used for encrypting BigQuery data.
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigurationInput is an input type that accepts EncryptionConfigurationArgs and EncryptionConfigurationOutput values.
// You can construct a concrete instance of `EncryptionConfigurationInput` via:
//
//	EncryptionConfigurationArgs{...}
type EncryptionConfigurationInput interface {
	pulumi.Input

	ToEncryptionConfigurationOutput() EncryptionConfigurationOutput
	ToEncryptionConfigurationOutputWithContext(context.Context) EncryptionConfigurationOutput
}

// Represents the encryption configuration for a transfer.
type EncryptionConfigurationArgs struct {
	// The name of the KMS key used for encrypting BigQuery data.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return i.ToEncryptionConfigurationOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput)
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput).ToEncryptionConfigurationPtrOutputWithContext(ctx)
}

// EncryptionConfigurationPtrInput is an input type that accepts EncryptionConfigurationArgs, EncryptionConfigurationPtr and EncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigurationPtrInput` via:
//
//	        EncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput
	ToEncryptionConfigurationPtrOutputWithContext(context.Context) EncryptionConfigurationPtrOutput
}

type encryptionConfigurationPtrType EncryptionConfigurationArgs

func EncryptionConfigurationPtr(v *EncryptionConfigurationArgs) EncryptionConfigurationPtrInput {
	return (*encryptionConfigurationPtrType)(v)
}

func (*encryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationPtrOutput)
}

// Represents the encryption configuration for a transfer.
type EncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfiguration) *EncryptionConfiguration {
		return &v
	}).(EncryptionConfigurationPtrOutput)
}

// The name of the KMS key used for encrypting BigQuery data.
func (o EncryptionConfigurationOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) Elem() EncryptionConfigurationOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) EncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret EncryptionConfiguration
		return ret
	}).(EncryptionConfigurationOutput)
}

// The name of the KMS key used for encrypting BigQuery data.
func (o EncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Represents the encryption configuration for a transfer.
type EncryptionConfigurationResponse struct {
	// The name of the KMS key used for encrypting BigQuery data.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// Represents the encryption configuration for a transfer.
type EncryptionConfigurationResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigurationResponse)(nil)).Elem()
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutput() EncryptionConfigurationResponseOutput {
	return o
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutputWithContext(ctx context.Context) EncryptionConfigurationResponseOutput {
	return o
}

// The name of the KMS key used for encrypting BigQuery data.
func (o EncryptionConfigurationResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Options customizing the data transfer schedule.
type ScheduleOptions struct {
	// If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.
	DisableAutoScheduling *bool `pulumi:"disableAutoScheduling"`
	// Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
	EndTime *string `pulumi:"endTime"`
	// Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
	StartTime *string `pulumi:"startTime"`
}

// ScheduleOptionsInput is an input type that accepts ScheduleOptionsArgs and ScheduleOptionsOutput values.
// You can construct a concrete instance of `ScheduleOptionsInput` via:
//
//	ScheduleOptionsArgs{...}
type ScheduleOptionsInput interface {
	pulumi.Input

	ToScheduleOptionsOutput() ScheduleOptionsOutput
	ToScheduleOptionsOutputWithContext(context.Context) ScheduleOptionsOutput
}

// Options customizing the data transfer schedule.
type ScheduleOptionsArgs struct {
	// If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.
	DisableAutoScheduling pulumi.BoolPtrInput `pulumi:"disableAutoScheduling"`
	// Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (ScheduleOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleOptions)(nil)).Elem()
}

func (i ScheduleOptionsArgs) ToScheduleOptionsOutput() ScheduleOptionsOutput {
	return i.ToScheduleOptionsOutputWithContext(context.Background())
}

func (i ScheduleOptionsArgs) ToScheduleOptionsOutputWithContext(ctx context.Context) ScheduleOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOptionsOutput)
}

func (i ScheduleOptionsArgs) ToScheduleOptionsPtrOutput() ScheduleOptionsPtrOutput {
	return i.ToScheduleOptionsPtrOutputWithContext(context.Background())
}

func (i ScheduleOptionsArgs) ToScheduleOptionsPtrOutputWithContext(ctx context.Context) ScheduleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOptionsOutput).ToScheduleOptionsPtrOutputWithContext(ctx)
}

// ScheduleOptionsPtrInput is an input type that accepts ScheduleOptionsArgs, ScheduleOptionsPtr and ScheduleOptionsPtrOutput values.
// You can construct a concrete instance of `ScheduleOptionsPtrInput` via:
//
//	        ScheduleOptionsArgs{...}
//
//	or:
//
//	        nil
type ScheduleOptionsPtrInput interface {
	pulumi.Input

	ToScheduleOptionsPtrOutput() ScheduleOptionsPtrOutput
	ToScheduleOptionsPtrOutputWithContext(context.Context) ScheduleOptionsPtrOutput
}

type scheduleOptionsPtrType ScheduleOptionsArgs

func ScheduleOptionsPtr(v *ScheduleOptionsArgs) ScheduleOptionsPtrInput {
	return (*scheduleOptionsPtrType)(v)
}

func (*scheduleOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleOptions)(nil)).Elem()
}

func (i *scheduleOptionsPtrType) ToScheduleOptionsPtrOutput() ScheduleOptionsPtrOutput {
	return i.ToScheduleOptionsPtrOutputWithContext(context.Background())
}

func (i *scheduleOptionsPtrType) ToScheduleOptionsPtrOutputWithContext(ctx context.Context) ScheduleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOptionsPtrOutput)
}

// Options customizing the data transfer schedule.
type ScheduleOptionsOutput struct{ *pulumi.OutputState }

func (ScheduleOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleOptions)(nil)).Elem()
}

func (o ScheduleOptionsOutput) ToScheduleOptionsOutput() ScheduleOptionsOutput {
	return o
}

func (o ScheduleOptionsOutput) ToScheduleOptionsOutputWithContext(ctx context.Context) ScheduleOptionsOutput {
	return o
}

func (o ScheduleOptionsOutput) ToScheduleOptionsPtrOutput() ScheduleOptionsPtrOutput {
	return o.ToScheduleOptionsPtrOutputWithContext(context.Background())
}

func (o ScheduleOptionsOutput) ToScheduleOptionsPtrOutputWithContext(ctx context.Context) ScheduleOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleOptions) *ScheduleOptions {
		return &v
	}).(ScheduleOptionsPtrOutput)
}

// If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.
func (o ScheduleOptionsOutput) DisableAutoScheduling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleOptions) *bool { return v.DisableAutoScheduling }).(pulumi.BoolPtrOutput)
}

// Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
func (o ScheduleOptionsOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleOptions) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
func (o ScheduleOptionsOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleOptions) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type ScheduleOptionsPtrOutput struct{ *pulumi.OutputState }

func (ScheduleOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleOptions)(nil)).Elem()
}

func (o ScheduleOptionsPtrOutput) ToScheduleOptionsPtrOutput() ScheduleOptionsPtrOutput {
	return o
}

func (o ScheduleOptionsPtrOutput) ToScheduleOptionsPtrOutputWithContext(ctx context.Context) ScheduleOptionsPtrOutput {
	return o
}

func (o ScheduleOptionsPtrOutput) Elem() ScheduleOptionsOutput {
	return o.ApplyT(func(v *ScheduleOptions) ScheduleOptions {
		if v != nil {
			return *v
		}
		var ret ScheduleOptions
		return ret
	}).(ScheduleOptionsOutput)
}

// If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.
func (o ScheduleOptionsPtrOutput) DisableAutoScheduling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduleOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DisableAutoScheduling
	}).(pulumi.BoolPtrOutput)
}

// Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
func (o ScheduleOptionsPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleOptions) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
func (o ScheduleOptionsPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleOptions) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Options customizing the data transfer schedule.
type ScheduleOptionsResponse struct {
	// If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.
	DisableAutoScheduling bool `pulumi:"disableAutoScheduling"`
	// Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
	EndTime string `pulumi:"endTime"`
	// Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
	StartTime string `pulumi:"startTime"`
}

// Options customizing the data transfer schedule.
type ScheduleOptionsResponseOutput struct{ *pulumi.OutputState }

func (ScheduleOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleOptionsResponse)(nil)).Elem()
}

func (o ScheduleOptionsResponseOutput) ToScheduleOptionsResponseOutput() ScheduleOptionsResponseOutput {
	return o
}

func (o ScheduleOptionsResponseOutput) ToScheduleOptionsResponseOutputWithContext(ctx context.Context) ScheduleOptionsResponseOutput {
	return o
}

// If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.
func (o ScheduleOptionsResponseOutput) DisableAutoScheduling() pulumi.BoolOutput {
	return o.ApplyT(func(v ScheduleOptionsResponse) bool { return v.DisableAutoScheduling }).(pulumi.BoolOutput)
}

// Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
func (o ScheduleOptionsResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleOptionsResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
func (o ScheduleOptionsResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleOptionsResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Information about a user.
type UserInfoResponse struct {
	// E-mail address of the user.
	Email string `pulumi:"email"`
}

// Information about a user.
type UserInfoResponseOutput struct{ *pulumi.OutputState }

func (UserInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfoResponse)(nil)).Elem()
}

func (o UserInfoResponseOutput) ToUserInfoResponseOutput() UserInfoResponseOutput {
	return o
}

func (o UserInfoResponseOutput) ToUserInfoResponseOutputWithContext(ctx context.Context) UserInfoResponseOutput {
	return o
}

// E-mail address of the user.
func (o UserInfoResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v UserInfoResponse) string { return v.Email }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailPreferencesInput)(nil)).Elem(), EmailPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailPreferencesPtrInput)(nil)).Elem(), EmailPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigurationInput)(nil)).Elem(), EncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigurationPtrInput)(nil)).Elem(), EncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleOptionsInput)(nil)).Elem(), ScheduleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleOptionsPtrInput)(nil)).Elem(), ScheduleOptionsArgs{})
	pulumi.RegisterOutputType(EmailPreferencesOutput{})
	pulumi.RegisterOutputType(EmailPreferencesPtrOutput{})
	pulumi.RegisterOutputType(EmailPreferencesResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ScheduleOptionsOutput{})
	pulumi.RegisterOutputType(ScheduleOptionsPtrOutput{})
	pulumi.RegisterOutputType(ScheduleOptionsResponseOutput{})
	pulumi.RegisterOutputType(UserInfoResponseOutput{})
}
