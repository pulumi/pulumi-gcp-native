// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Specification for the BigQuery connection.
type GoogleCloudDatacatalogV1BigQueryConnectionSpec struct {
	// Specification for the BigQuery connection to a Cloud SQL instance.
	CloudSql *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec `pulumi:"cloudSql"`
	// The type of the BigQuery connection.
	ConnectionType *GoogleCloudDatacatalogV1BigQueryConnectionSpecConnectionType `pulumi:"connectionType"`
	// True if there are credentials attached to the BigQuery connection; false otherwise.
	HasCredential *bool `pulumi:"hasCredential"`
}

// GoogleCloudDatacatalogV1BigQueryConnectionSpecInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs and GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryConnectionSpecInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs{...}
type GoogleCloudDatacatalogV1BigQueryConnectionSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryConnectionSpecOutput() GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput
	ToGoogleCloudDatacatalogV1BigQueryConnectionSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput
}

// Specification for the BigQuery connection.
type GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs struct {
	// Specification for the BigQuery connection to a Cloud SQL instance.
	CloudSql GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrInput `pulumi:"cloudSql"`
	// The type of the BigQuery connection.
	ConnectionType GoogleCloudDatacatalogV1BigQueryConnectionSpecConnectionTypePtrInput `pulumi:"connectionType"`
	// True if there are credentials attached to the BigQuery connection; false otherwise.
	HasCredential pulumi.BoolPtrInput `pulumi:"hasCredential"`
}

func (GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryConnectionSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecOutput() GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryConnectionSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput)
}

func (i GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput).ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs, GoogleCloudDatacatalogV1BigQueryConnectionSpecPtr and GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput
	ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput
}

type googleCloudDatacatalogV1BigQueryConnectionSpecPtrType GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs

func GoogleCloudDatacatalogV1BigQueryConnectionSpecPtr(v *GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs) GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrInput {
	return (*googleCloudDatacatalogV1BigQueryConnectionSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1BigQueryConnectionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryConnectionSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1BigQueryConnectionSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1BigQueryConnectionSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput)
}

// Specification for the BigQuery connection.
type GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryConnectionSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecOutput() GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1BigQueryConnectionSpec) *GoogleCloudDatacatalogV1BigQueryConnectionSpec {
		return &v
	}).(GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput)
}

// Specification for the BigQuery connection to a Cloud SQL instance.
func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput) CloudSql() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryConnectionSpec) *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec {
		return v.CloudSql
	}).(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput)
}

// The type of the BigQuery connection.
func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput) ConnectionType() GoogleCloudDatacatalogV1BigQueryConnectionSpecConnectionTypePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryConnectionSpec) *GoogleCloudDatacatalogV1BigQueryConnectionSpecConnectionType {
		return v.ConnectionType
	}).(GoogleCloudDatacatalogV1BigQueryConnectionSpecConnectionTypePtrOutput)
}

// True if there are credentials attached to the BigQuery connection; false otherwise.
func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput) HasCredential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryConnectionSpec) *bool { return v.HasCredential }).(pulumi.BoolPtrOutput)
}

type GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryConnectionSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput) Elem() GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryConnectionSpec) GoogleCloudDatacatalogV1BigQueryConnectionSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1BigQueryConnectionSpec
		return ret
	}).(GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput)
}

// Specification for the BigQuery connection to a Cloud SQL instance.
func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput) CloudSql() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryConnectionSpec) *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec {
		if v == nil {
			return nil
		}
		return v.CloudSql
	}).(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput)
}

// The type of the BigQuery connection.
func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput) ConnectionType() GoogleCloudDatacatalogV1BigQueryConnectionSpecConnectionTypePtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryConnectionSpec) *GoogleCloudDatacatalogV1BigQueryConnectionSpecConnectionType {
		if v == nil {
			return nil
		}
		return v.ConnectionType
	}).(GoogleCloudDatacatalogV1BigQueryConnectionSpecConnectionTypePtrOutput)
}

// True if there are credentials attached to the BigQuery connection; false otherwise.
func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput) HasCredential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryConnectionSpec) *bool {
		if v == nil {
			return nil
		}
		return v.HasCredential
	}).(pulumi.BoolPtrOutput)
}

// Specification for the BigQuery connection.
type GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse struct {
	// Specification for the BigQuery connection to a Cloud SQL instance.
	CloudSql GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse `pulumi:"cloudSql"`
	// The type of the BigQuery connection.
	ConnectionType string `pulumi:"connectionType"`
	// True if there are credentials attached to the BigQuery connection; false otherwise.
	HasCredential bool `pulumi:"hasCredential"`
}

// Specification for the BigQuery connection.
type GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput() GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput {
	return o
}

// Specification for the BigQuery connection to a Cloud SQL instance.
func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput) CloudSql() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse {
		return v.CloudSql
	}).(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput)
}

// The type of the BigQuery connection.
func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse) string { return v.ConnectionType }).(pulumi.StringOutput)
}

// True if there are credentials attached to the BigQuery connection; false otherwise.
func (o GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput) HasCredential() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse) bool { return v.HasCredential }).(pulumi.BoolOutput)
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpec struct {
}

// GoogleCloudDatacatalogV1BigQueryDateShardedSpecInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs and GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryDateShardedSpecInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs{...}
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput
	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs struct {
}

func (GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryDateShardedSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput)
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput).ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs, GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtr and GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput
	ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput
}

type googleCloudDatacatalogV1BigQueryDateShardedSpecPtrType GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs

func GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtr(v *GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrInput {
	return (*googleCloudDatacatalogV1BigQueryDateShardedSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1BigQueryDateShardedSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryDateShardedSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1BigQueryDateShardedSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1BigQueryDateShardedSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput)
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryDateShardedSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1BigQueryDateShardedSpec) *GoogleCloudDatacatalogV1BigQueryDateShardedSpec {
		return &v
	}).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput)
}

type GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryDateShardedSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput) Elem() GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryDateShardedSpec) GoogleCloudDatacatalogV1BigQueryDateShardedSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1BigQueryDateShardedSpec
		return ret
	}).(GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput)
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse struct {
	// The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.
	Dataset string `pulumi:"dataset"`
	// BigQuery resource name of the latest shard.
	LatestShardResource string `pulumi:"latestShardResource"`
	// Total number of shards.
	ShardCount string `pulumi:"shardCount"`
	// The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.
	TablePrefix string `pulumi:"tablePrefix"`
}

// Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
type GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput() GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput {
	return o
}

// The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.
func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) string { return v.Dataset }).(pulumi.StringOutput)
}

// BigQuery resource name of the latest shard.
func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) LatestShardResource() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) string { return v.LatestShardResource }).(pulumi.StringOutput)
}

// Total number of shards.
func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) ShardCount() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) string { return v.ShardCount }).(pulumi.StringOutput)
}

// The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.
func (o GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput) TablePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse) string { return v.TablePrefix }).(pulumi.StringOutput)
}

// Fields specific for BigQuery routines.
type GoogleCloudDatacatalogV1BigQueryRoutineSpec struct {
	// Paths of the imported libraries.
	ImportedLibraries []string `pulumi:"importedLibraries"`
}

// GoogleCloudDatacatalogV1BigQueryRoutineSpecInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs and GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryRoutineSpecInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs{...}
type GoogleCloudDatacatalogV1BigQueryRoutineSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryRoutineSpecOutput() GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput
	ToGoogleCloudDatacatalogV1BigQueryRoutineSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput
}

// Fields specific for BigQuery routines.
type GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs struct {
	// Paths of the imported libraries.
	ImportedLibraries pulumi.StringArrayInput `pulumi:"importedLibraries"`
}

func (GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryRoutineSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecOutput() GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryRoutineSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput)
}

func (i GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput).ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs, GoogleCloudDatacatalogV1BigQueryRoutineSpecPtr and GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput
	ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput
}

type googleCloudDatacatalogV1BigQueryRoutineSpecPtrType GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs

func GoogleCloudDatacatalogV1BigQueryRoutineSpecPtr(v *GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs) GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrInput {
	return (*googleCloudDatacatalogV1BigQueryRoutineSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1BigQueryRoutineSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryRoutineSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1BigQueryRoutineSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1BigQueryRoutineSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput)
}

// Fields specific for BigQuery routines.
type GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryRoutineSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecOutput() GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1BigQueryRoutineSpec) *GoogleCloudDatacatalogV1BigQueryRoutineSpec {
		return &v
	}).(GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput)
}

// Paths of the imported libraries.
func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput) ImportedLibraries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryRoutineSpec) []string { return v.ImportedLibraries }).(pulumi.StringArrayOutput)
}

type GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryRoutineSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput) Elem() GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryRoutineSpec) GoogleCloudDatacatalogV1BigQueryRoutineSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1BigQueryRoutineSpec
		return ret
	}).(GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput)
}

// Paths of the imported libraries.
func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput) ImportedLibraries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryRoutineSpec) []string {
		if v == nil {
			return nil
		}
		return v.ImportedLibraries
	}).(pulumi.StringArrayOutput)
}

// Fields specific for BigQuery routines.
type GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse struct {
	// Paths of the imported libraries.
	ImportedLibraries []string `pulumi:"importedLibraries"`
}

// Fields specific for BigQuery routines.
type GoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput() GoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput {
	return o
}

// Paths of the imported libraries.
func (o GoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput) ImportedLibraries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse) []string { return v.ImportedLibraries }).(pulumi.StringArrayOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpec struct {
	// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec *GoogleCloudDatacatalogV1TableSpec `pulumi:"tableSpec"`
	// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec *GoogleCloudDatacatalogV1ViewSpec `pulumi:"viewSpec"`
}

// GoogleCloudDatacatalogV1BigQueryTableSpecInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryTableSpecArgs and GoogleCloudDatacatalogV1BigQueryTableSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryTableSpecInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryTableSpecArgs{...}
type GoogleCloudDatacatalogV1BigQueryTableSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1BigQueryTableSpecOutput
	ToGoogleCloudDatacatalogV1BigQueryTableSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecOutput
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpecArgs struct {
	// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec GoogleCloudDatacatalogV1TableSpecPtrInput `pulumi:"tableSpec"`
	// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec GoogleCloudDatacatalogV1ViewSpecPtrInput `pulumi:"viewSpec"`
}

func (GoogleCloudDatacatalogV1BigQueryTableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryTableSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1BigQueryTableSpecOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryTableSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryTableSpecOutput)
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryTableSpecOutput).ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1BigQueryTableSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1BigQueryTableSpecArgs, GoogleCloudDatacatalogV1BigQueryTableSpecPtr and GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BigQueryTableSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1BigQueryTableSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1BigQueryTableSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput
	ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput
}

type googleCloudDatacatalogV1BigQueryTableSpecPtrType GoogleCloudDatacatalogV1BigQueryTableSpecArgs

func GoogleCloudDatacatalogV1BigQueryTableSpecPtr(v *GoogleCloudDatacatalogV1BigQueryTableSpecArgs) GoogleCloudDatacatalogV1BigQueryTableSpecPtrInput {
	return (*googleCloudDatacatalogV1BigQueryTableSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1BigQueryTableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryTableSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1BigQueryTableSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1BigQueryTableSpecPtrType) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1BigQueryTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1BigQueryTableSpec) *GoogleCloudDatacatalogV1BigQueryTableSpec {
		return &v
	}).(GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput)
}

// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) TableSpec() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpec) *GoogleCloudDatacatalogV1TableSpec {
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1TableSpecPtrOutput)
}

// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecOutput) ViewSpec() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpec) *GoogleCloudDatacatalogV1ViewSpec { return v.ViewSpec }).(GoogleCloudDatacatalogV1ViewSpecPtrOutput)
}

type GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BigQueryTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) Elem() GoogleCloudDatacatalogV1BigQueryTableSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryTableSpec) GoogleCloudDatacatalogV1BigQueryTableSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1BigQueryTableSpec
		return ret
	}).(GoogleCloudDatacatalogV1BigQueryTableSpecOutput)
}

// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) TableSpec() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryTableSpec) *GoogleCloudDatacatalogV1TableSpec {
		if v == nil {
			return nil
		}
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1TableSpecPtrOutput)
}

// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput) ViewSpec() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BigQueryTableSpec) *GoogleCloudDatacatalogV1ViewSpec {
		if v == nil {
			return nil
		}
		return v.ViewSpec
	}).(GoogleCloudDatacatalogV1ViewSpecPtrOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpecResponse struct {
	// The table source type.
	TableSourceType string `pulumi:"tableSourceType"`
	// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec GoogleCloudDatacatalogV1TableSpecResponse `pulumi:"tableSpec"`
	// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec GoogleCloudDatacatalogV1ViewSpecResponse `pulumi:"viewSpec"`
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryTableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput() GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) ToGoogleCloudDatacatalogV1BigQueryTableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput {
	return o
}

// The table source type.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) TableSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpecResponse) string { return v.TableSourceType }).(pulumi.StringOutput)
}

// Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) TableSpec() GoogleCloudDatacatalogV1TableSpecResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpecResponse) GoogleCloudDatacatalogV1TableSpecResponse {
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1TableSpecResponseOutput)
}

// Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput) ViewSpec() GoogleCloudDatacatalogV1ViewSpecResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BigQueryTableSpecResponse) GoogleCloudDatacatalogV1ViewSpecResponse {
		return v.ViewSpec
	}).(GoogleCloudDatacatalogV1ViewSpecResponseOutput)
}

// Business Context of the entry.
type GoogleCloudDatacatalogV1BusinessContext struct {
	// Contact people for the entry.
	Contacts *GoogleCloudDatacatalogV1Contacts `pulumi:"contacts"`
	// Entry overview fields for rich text descriptions of entries.
	EntryOverview *GoogleCloudDatacatalogV1EntryOverview `pulumi:"entryOverview"`
}

// GoogleCloudDatacatalogV1BusinessContextInput is an input type that accepts GoogleCloudDatacatalogV1BusinessContextArgs and GoogleCloudDatacatalogV1BusinessContextOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BusinessContextInput` via:
//
//          GoogleCloudDatacatalogV1BusinessContextArgs{...}
type GoogleCloudDatacatalogV1BusinessContextInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BusinessContextOutput() GoogleCloudDatacatalogV1BusinessContextOutput
	ToGoogleCloudDatacatalogV1BusinessContextOutputWithContext(context.Context) GoogleCloudDatacatalogV1BusinessContextOutput
}

// Business Context of the entry.
type GoogleCloudDatacatalogV1BusinessContextArgs struct {
	// Contact people for the entry.
	Contacts GoogleCloudDatacatalogV1ContactsPtrInput `pulumi:"contacts"`
	// Entry overview fields for rich text descriptions of entries.
	EntryOverview GoogleCloudDatacatalogV1EntryOverviewPtrInput `pulumi:"entryOverview"`
}

func (GoogleCloudDatacatalogV1BusinessContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BusinessContext)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1BusinessContextArgs) ToGoogleCloudDatacatalogV1BusinessContextOutput() GoogleCloudDatacatalogV1BusinessContextOutput {
	return i.ToGoogleCloudDatacatalogV1BusinessContextOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BusinessContextArgs) ToGoogleCloudDatacatalogV1BusinessContextOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BusinessContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BusinessContextOutput)
}

func (i GoogleCloudDatacatalogV1BusinessContextArgs) ToGoogleCloudDatacatalogV1BusinessContextPtrOutput() GoogleCloudDatacatalogV1BusinessContextPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BusinessContextPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1BusinessContextArgs) ToGoogleCloudDatacatalogV1BusinessContextPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BusinessContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BusinessContextOutput).ToGoogleCloudDatacatalogV1BusinessContextPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1BusinessContextPtrInput is an input type that accepts GoogleCloudDatacatalogV1BusinessContextArgs, GoogleCloudDatacatalogV1BusinessContextPtr and GoogleCloudDatacatalogV1BusinessContextPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1BusinessContextPtrInput` via:
//
//          GoogleCloudDatacatalogV1BusinessContextArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1BusinessContextPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1BusinessContextPtrOutput() GoogleCloudDatacatalogV1BusinessContextPtrOutput
	ToGoogleCloudDatacatalogV1BusinessContextPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1BusinessContextPtrOutput
}

type googleCloudDatacatalogV1BusinessContextPtrType GoogleCloudDatacatalogV1BusinessContextArgs

func GoogleCloudDatacatalogV1BusinessContextPtr(v *GoogleCloudDatacatalogV1BusinessContextArgs) GoogleCloudDatacatalogV1BusinessContextPtrInput {
	return (*googleCloudDatacatalogV1BusinessContextPtrType)(v)
}

func (*googleCloudDatacatalogV1BusinessContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BusinessContext)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1BusinessContextPtrType) ToGoogleCloudDatacatalogV1BusinessContextPtrOutput() GoogleCloudDatacatalogV1BusinessContextPtrOutput {
	return i.ToGoogleCloudDatacatalogV1BusinessContextPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1BusinessContextPtrType) ToGoogleCloudDatacatalogV1BusinessContextPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BusinessContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1BusinessContextPtrOutput)
}

// Business Context of the entry.
type GoogleCloudDatacatalogV1BusinessContextOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BusinessContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BusinessContext)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BusinessContextOutput) ToGoogleCloudDatacatalogV1BusinessContextOutput() GoogleCloudDatacatalogV1BusinessContextOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BusinessContextOutput) ToGoogleCloudDatacatalogV1BusinessContextOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BusinessContextOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BusinessContextOutput) ToGoogleCloudDatacatalogV1BusinessContextPtrOutput() GoogleCloudDatacatalogV1BusinessContextPtrOutput {
	return o.ToGoogleCloudDatacatalogV1BusinessContextPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1BusinessContextOutput) ToGoogleCloudDatacatalogV1BusinessContextPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BusinessContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1BusinessContext) *GoogleCloudDatacatalogV1BusinessContext {
		return &v
	}).(GoogleCloudDatacatalogV1BusinessContextPtrOutput)
}

// Contact people for the entry.
func (o GoogleCloudDatacatalogV1BusinessContextOutput) Contacts() GoogleCloudDatacatalogV1ContactsPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BusinessContext) *GoogleCloudDatacatalogV1Contacts { return v.Contacts }).(GoogleCloudDatacatalogV1ContactsPtrOutput)
}

// Entry overview fields for rich text descriptions of entries.
func (o GoogleCloudDatacatalogV1BusinessContextOutput) EntryOverview() GoogleCloudDatacatalogV1EntryOverviewPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BusinessContext) *GoogleCloudDatacatalogV1EntryOverview {
		return v.EntryOverview
	}).(GoogleCloudDatacatalogV1EntryOverviewPtrOutput)
}

type GoogleCloudDatacatalogV1BusinessContextPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BusinessContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1BusinessContext)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BusinessContextPtrOutput) ToGoogleCloudDatacatalogV1BusinessContextPtrOutput() GoogleCloudDatacatalogV1BusinessContextPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BusinessContextPtrOutput) ToGoogleCloudDatacatalogV1BusinessContextPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BusinessContextPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BusinessContextPtrOutput) Elem() GoogleCloudDatacatalogV1BusinessContextOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BusinessContext) GoogleCloudDatacatalogV1BusinessContext {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1BusinessContext
		return ret
	}).(GoogleCloudDatacatalogV1BusinessContextOutput)
}

// Contact people for the entry.
func (o GoogleCloudDatacatalogV1BusinessContextPtrOutput) Contacts() GoogleCloudDatacatalogV1ContactsPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BusinessContext) *GoogleCloudDatacatalogV1Contacts {
		if v == nil {
			return nil
		}
		return v.Contacts
	}).(GoogleCloudDatacatalogV1ContactsPtrOutput)
}

// Entry overview fields for rich text descriptions of entries.
func (o GoogleCloudDatacatalogV1BusinessContextPtrOutput) EntryOverview() GoogleCloudDatacatalogV1EntryOverviewPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1BusinessContext) *GoogleCloudDatacatalogV1EntryOverview {
		if v == nil {
			return nil
		}
		return v.EntryOverview
	}).(GoogleCloudDatacatalogV1EntryOverviewPtrOutput)
}

// Business Context of the entry.
type GoogleCloudDatacatalogV1BusinessContextResponse struct {
	// Contact people for the entry.
	Contacts GoogleCloudDatacatalogV1ContactsResponse `pulumi:"contacts"`
	// Entry overview fields for rich text descriptions of entries.
	EntryOverview GoogleCloudDatacatalogV1EntryOverviewResponse `pulumi:"entryOverview"`
}

// Business Context of the entry.
type GoogleCloudDatacatalogV1BusinessContextResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1BusinessContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1BusinessContextResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1BusinessContextResponseOutput) ToGoogleCloudDatacatalogV1BusinessContextResponseOutput() GoogleCloudDatacatalogV1BusinessContextResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1BusinessContextResponseOutput) ToGoogleCloudDatacatalogV1BusinessContextResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1BusinessContextResponseOutput {
	return o
}

// Contact people for the entry.
func (o GoogleCloudDatacatalogV1BusinessContextResponseOutput) Contacts() GoogleCloudDatacatalogV1ContactsResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BusinessContextResponse) GoogleCloudDatacatalogV1ContactsResponse {
		return v.Contacts
	}).(GoogleCloudDatacatalogV1ContactsResponseOutput)
}

// Entry overview fields for rich text descriptions of entries.
func (o GoogleCloudDatacatalogV1BusinessContextResponseOutput) EntryOverview() GoogleCloudDatacatalogV1EntryOverviewResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1BusinessContextResponse) GoogleCloudDatacatalogV1EntryOverviewResponse {
		return v.EntryOverview
	}).(GoogleCloudDatacatalogV1EntryOverviewResponseOutput)
}

// Specification for the BigQuery connection to a Cloud SQL instance.
type GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec struct {
	// Database name.
	Database *string `pulumi:"database"`
	// Cloud SQL instance ID in the format of `project:location:instance`.
	InstanceId *string `pulumi:"instanceId"`
	// Type of the Cloud SQL database.
	Type *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecType `pulumi:"type"`
}

// GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecInput is an input type that accepts GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs and GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecInput` via:
//
//          GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs{...}
type GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput
	ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput
}

// Specification for the BigQuery connection to a Cloud SQL instance.
type GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs struct {
	// Database name.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Cloud SQL instance ID in the format of `project:location:instance`.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// Type of the Cloud SQL database.
	Type GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecTypePtrInput `pulumi:"type"`
}

func (GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput {
	return i.ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput)
}

func (i GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput).ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs, GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtr and GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput
	ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput
}

type googleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrType GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs

func GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtr(v *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrInput {
	return (*googleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrType) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrType) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput)
}

// Specification for the BigQuery connection to a Cloud SQL instance.
type GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec) *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec {
		return &v
	}).(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput)
}

// Database name.
func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Cloud SQL instance ID in the format of `project:location:instance`.
func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// Type of the Cloud SQL database.
func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput) Type() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecTypePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec) *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecType {
		return v.Type
	}).(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecTypePtrOutput)
}

type GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput) Elem() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec
		return ret
	}).(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput)
}

// Database name.
func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// Cloud SQL instance ID in the format of `project:location:instance`.
func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec) *string {
		if v == nil {
			return nil
		}
		return v.InstanceId
	}).(pulumi.StringPtrOutput)
}

// Type of the Cloud SQL database.
func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput) Type() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecTypePtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec) *GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecTypePtrOutput)
}

// Specification for the BigQuery connection to a Cloud SQL instance.
type GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse struct {
	// Database name.
	Database string `pulumi:"database"`
	// Cloud SQL instance ID in the format of `project:location:instance`.
	InstanceId string `pulumi:"instanceId"`
	// Type of the Cloud SQL database.
	Type string `pulumi:"type"`
}

// Specification for the BigQuery connection to a Cloud SQL instance.
type GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput() GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput) ToGoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput {
	return o
}

// Database name.
func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse) string { return v.Database }).(pulumi.StringOutput)
}

// Cloud SQL instance ID in the format of `project:location:instance`.
func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Type of the Cloud SQL database.
func (o GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchema struct {
	// Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
	Column string `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
	Description *string `pulumi:"description"`
	// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
	Mode *string `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns []GoogleCloudDatacatalogV1ColumnSchema `pulumi:"subcolumns"`
	// Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
	Type string `pulumi:"type"`
}

// GoogleCloudDatacatalogV1ColumnSchemaInput is an input type that accepts GoogleCloudDatacatalogV1ColumnSchemaArgs and GoogleCloudDatacatalogV1ColumnSchemaOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ColumnSchemaInput` via:
//
//          GoogleCloudDatacatalogV1ColumnSchemaArgs{...}
type GoogleCloudDatacatalogV1ColumnSchemaInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ColumnSchemaOutput() GoogleCloudDatacatalogV1ColumnSchemaOutput
	ToGoogleCloudDatacatalogV1ColumnSchemaOutputWithContext(context.Context) GoogleCloudDatacatalogV1ColumnSchemaOutput
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchemaArgs struct {
	// Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
	Column pulumi.StringInput `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns GoogleCloudDatacatalogV1ColumnSchemaArrayInput `pulumi:"subcolumns"`
	// Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleCloudDatacatalogV1ColumnSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ColumnSchema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ColumnSchemaArgs) ToGoogleCloudDatacatalogV1ColumnSchemaOutput() GoogleCloudDatacatalogV1ColumnSchemaOutput {
	return i.ToGoogleCloudDatacatalogV1ColumnSchemaOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ColumnSchemaArgs) ToGoogleCloudDatacatalogV1ColumnSchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ColumnSchemaOutput)
}

// GoogleCloudDatacatalogV1ColumnSchemaArrayInput is an input type that accepts GoogleCloudDatacatalogV1ColumnSchemaArray and GoogleCloudDatacatalogV1ColumnSchemaArrayOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ColumnSchemaArrayInput` via:
//
//          GoogleCloudDatacatalogV1ColumnSchemaArray{ GoogleCloudDatacatalogV1ColumnSchemaArgs{...} }
type GoogleCloudDatacatalogV1ColumnSchemaArrayInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput
	ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutputWithContext(context.Context) GoogleCloudDatacatalogV1ColumnSchemaArrayOutput
}

type GoogleCloudDatacatalogV1ColumnSchemaArray []GoogleCloudDatacatalogV1ColumnSchemaInput

func (GoogleCloudDatacatalogV1ColumnSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1ColumnSchema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ColumnSchemaArray) ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return i.ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ColumnSchemaArray) ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ColumnSchemaArrayOutput)
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchemaOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ColumnSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ColumnSchema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) ToGoogleCloudDatacatalogV1ColumnSchemaOutput() GoogleCloudDatacatalogV1ColumnSchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) ToGoogleCloudDatacatalogV1ColumnSchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaOutput {
	return o
}

// Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchema) string { return v.Column }).(pulumi.StringOutput)
}

// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchema) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchema) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) Subcolumns() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchema) []GoogleCloudDatacatalogV1ColumnSchema {
		return v.Subcolumns
	}).(GoogleCloudDatacatalogV1ColumnSchemaArrayOutput)
}

// Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchema) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1ColumnSchemaArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ColumnSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1ColumnSchema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ColumnSchemaArrayOutput) ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaArrayOutput) ToGoogleCloudDatacatalogV1ColumnSchemaArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1ColumnSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1ColumnSchema {
		return vs[0].([]GoogleCloudDatacatalogV1ColumnSchema)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1ColumnSchemaOutput)
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchemaResponse struct {
	// Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
	Column string `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
	Description string `pulumi:"description"`
	// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
	Mode string `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns []GoogleCloudDatacatalogV1ColumnSchemaResponse `pulumi:"subcolumns"`
	// Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
	Type string `pulumi:"type"`
}

// A column within a schema. Columns can be nested inside other columns.
type GoogleCloudDatacatalogV1ColumnSchemaResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ColumnSchemaResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) ToGoogleCloudDatacatalogV1ColumnSchemaResponseOutput() GoogleCloudDatacatalogV1ColumnSchemaResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) ToGoogleCloudDatacatalogV1ColumnSchemaResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaResponseOutput {
	return o
}

// Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchemaResponse) string { return v.Column }).(pulumi.StringOutput)
}

// Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchemaResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchemaResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) Subcolumns() GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchemaResponse) []GoogleCloudDatacatalogV1ColumnSchemaResponse {
		return v.Subcolumns
	}).(GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput)
}

// Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
func (o GoogleCloudDatacatalogV1ColumnSchemaResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ColumnSchemaResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1ColumnSchemaResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput) ToGoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput() GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput) ToGoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1ColumnSchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1ColumnSchemaResponse {
		return vs[0].([]GoogleCloudDatacatalogV1ColumnSchemaResponse)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1ColumnSchemaResponseOutput)
}

// Contact people for the entry.
type GoogleCloudDatacatalogV1Contacts struct {
	// The list of contact people for the entry.
	People []GoogleCloudDatacatalogV1ContactsPerson `pulumi:"people"`
}

// GoogleCloudDatacatalogV1ContactsInput is an input type that accepts GoogleCloudDatacatalogV1ContactsArgs and GoogleCloudDatacatalogV1ContactsOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ContactsInput` via:
//
//          GoogleCloudDatacatalogV1ContactsArgs{...}
type GoogleCloudDatacatalogV1ContactsInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ContactsOutput() GoogleCloudDatacatalogV1ContactsOutput
	ToGoogleCloudDatacatalogV1ContactsOutputWithContext(context.Context) GoogleCloudDatacatalogV1ContactsOutput
}

// Contact people for the entry.
type GoogleCloudDatacatalogV1ContactsArgs struct {
	// The list of contact people for the entry.
	People GoogleCloudDatacatalogV1ContactsPersonArrayInput `pulumi:"people"`
}

func (GoogleCloudDatacatalogV1ContactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1Contacts)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ContactsArgs) ToGoogleCloudDatacatalogV1ContactsOutput() GoogleCloudDatacatalogV1ContactsOutput {
	return i.ToGoogleCloudDatacatalogV1ContactsOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ContactsArgs) ToGoogleCloudDatacatalogV1ContactsOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ContactsOutput)
}

func (i GoogleCloudDatacatalogV1ContactsArgs) ToGoogleCloudDatacatalogV1ContactsPtrOutput() GoogleCloudDatacatalogV1ContactsPtrOutput {
	return i.ToGoogleCloudDatacatalogV1ContactsPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ContactsArgs) ToGoogleCloudDatacatalogV1ContactsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ContactsOutput).ToGoogleCloudDatacatalogV1ContactsPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1ContactsPtrInput is an input type that accepts GoogleCloudDatacatalogV1ContactsArgs, GoogleCloudDatacatalogV1ContactsPtr and GoogleCloudDatacatalogV1ContactsPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ContactsPtrInput` via:
//
//          GoogleCloudDatacatalogV1ContactsArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1ContactsPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ContactsPtrOutput() GoogleCloudDatacatalogV1ContactsPtrOutput
	ToGoogleCloudDatacatalogV1ContactsPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1ContactsPtrOutput
}

type googleCloudDatacatalogV1ContactsPtrType GoogleCloudDatacatalogV1ContactsArgs

func GoogleCloudDatacatalogV1ContactsPtr(v *GoogleCloudDatacatalogV1ContactsArgs) GoogleCloudDatacatalogV1ContactsPtrInput {
	return (*googleCloudDatacatalogV1ContactsPtrType)(v)
}

func (*googleCloudDatacatalogV1ContactsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1Contacts)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1ContactsPtrType) ToGoogleCloudDatacatalogV1ContactsPtrOutput() GoogleCloudDatacatalogV1ContactsPtrOutput {
	return i.ToGoogleCloudDatacatalogV1ContactsPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1ContactsPtrType) ToGoogleCloudDatacatalogV1ContactsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ContactsPtrOutput)
}

// Contact people for the entry.
type GoogleCloudDatacatalogV1ContactsOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ContactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1Contacts)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ContactsOutput) ToGoogleCloudDatacatalogV1ContactsOutput() GoogleCloudDatacatalogV1ContactsOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsOutput) ToGoogleCloudDatacatalogV1ContactsOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsOutput) ToGoogleCloudDatacatalogV1ContactsPtrOutput() GoogleCloudDatacatalogV1ContactsPtrOutput {
	return o.ToGoogleCloudDatacatalogV1ContactsPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1ContactsOutput) ToGoogleCloudDatacatalogV1ContactsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1Contacts) *GoogleCloudDatacatalogV1Contacts {
		return &v
	}).(GoogleCloudDatacatalogV1ContactsPtrOutput)
}

// The list of contact people for the entry.
func (o GoogleCloudDatacatalogV1ContactsOutput) People() GoogleCloudDatacatalogV1ContactsPersonArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1Contacts) []GoogleCloudDatacatalogV1ContactsPerson { return v.People }).(GoogleCloudDatacatalogV1ContactsPersonArrayOutput)
}

type GoogleCloudDatacatalogV1ContactsPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ContactsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1Contacts)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ContactsPtrOutput) ToGoogleCloudDatacatalogV1ContactsPtrOutput() GoogleCloudDatacatalogV1ContactsPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsPtrOutput) ToGoogleCloudDatacatalogV1ContactsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsPtrOutput) Elem() GoogleCloudDatacatalogV1ContactsOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1Contacts) GoogleCloudDatacatalogV1Contacts {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1Contacts
		return ret
	}).(GoogleCloudDatacatalogV1ContactsOutput)
}

// The list of contact people for the entry.
func (o GoogleCloudDatacatalogV1ContactsPtrOutput) People() GoogleCloudDatacatalogV1ContactsPersonArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1Contacts) []GoogleCloudDatacatalogV1ContactsPerson {
		if v == nil {
			return nil
		}
		return v.People
	}).(GoogleCloudDatacatalogV1ContactsPersonArrayOutput)
}

// A contact person for the entry.
type GoogleCloudDatacatalogV1ContactsPerson struct {
	// Designation of the person, for example, Data Steward.
	Designation *string `pulumi:"designation"`
	// Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
	Email *string `pulumi:"email"`
}

// GoogleCloudDatacatalogV1ContactsPersonInput is an input type that accepts GoogleCloudDatacatalogV1ContactsPersonArgs and GoogleCloudDatacatalogV1ContactsPersonOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ContactsPersonInput` via:
//
//          GoogleCloudDatacatalogV1ContactsPersonArgs{...}
type GoogleCloudDatacatalogV1ContactsPersonInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ContactsPersonOutput() GoogleCloudDatacatalogV1ContactsPersonOutput
	ToGoogleCloudDatacatalogV1ContactsPersonOutputWithContext(context.Context) GoogleCloudDatacatalogV1ContactsPersonOutput
}

// A contact person for the entry.
type GoogleCloudDatacatalogV1ContactsPersonArgs struct {
	// Designation of the person, for example, Data Steward.
	Designation pulumi.StringPtrInput `pulumi:"designation"`
	// Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
	Email pulumi.StringPtrInput `pulumi:"email"`
}

func (GoogleCloudDatacatalogV1ContactsPersonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ContactsPerson)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ContactsPersonArgs) ToGoogleCloudDatacatalogV1ContactsPersonOutput() GoogleCloudDatacatalogV1ContactsPersonOutput {
	return i.ToGoogleCloudDatacatalogV1ContactsPersonOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ContactsPersonArgs) ToGoogleCloudDatacatalogV1ContactsPersonOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsPersonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ContactsPersonOutput)
}

// GoogleCloudDatacatalogV1ContactsPersonArrayInput is an input type that accepts GoogleCloudDatacatalogV1ContactsPersonArray and GoogleCloudDatacatalogV1ContactsPersonArrayOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ContactsPersonArrayInput` via:
//
//          GoogleCloudDatacatalogV1ContactsPersonArray{ GoogleCloudDatacatalogV1ContactsPersonArgs{...} }
type GoogleCloudDatacatalogV1ContactsPersonArrayInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ContactsPersonArrayOutput() GoogleCloudDatacatalogV1ContactsPersonArrayOutput
	ToGoogleCloudDatacatalogV1ContactsPersonArrayOutputWithContext(context.Context) GoogleCloudDatacatalogV1ContactsPersonArrayOutput
}

type GoogleCloudDatacatalogV1ContactsPersonArray []GoogleCloudDatacatalogV1ContactsPersonInput

func (GoogleCloudDatacatalogV1ContactsPersonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1ContactsPerson)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ContactsPersonArray) ToGoogleCloudDatacatalogV1ContactsPersonArrayOutput() GoogleCloudDatacatalogV1ContactsPersonArrayOutput {
	return i.ToGoogleCloudDatacatalogV1ContactsPersonArrayOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ContactsPersonArray) ToGoogleCloudDatacatalogV1ContactsPersonArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsPersonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ContactsPersonArrayOutput)
}

// A contact person for the entry.
type GoogleCloudDatacatalogV1ContactsPersonOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ContactsPersonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ContactsPerson)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ContactsPersonOutput) ToGoogleCloudDatacatalogV1ContactsPersonOutput() GoogleCloudDatacatalogV1ContactsPersonOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsPersonOutput) ToGoogleCloudDatacatalogV1ContactsPersonOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsPersonOutput {
	return o
}

// Designation of the person, for example, Data Steward.
func (o GoogleCloudDatacatalogV1ContactsPersonOutput) Designation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ContactsPerson) *string { return v.Designation }).(pulumi.StringPtrOutput)
}

// Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
func (o GoogleCloudDatacatalogV1ContactsPersonOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ContactsPerson) *string { return v.Email }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1ContactsPersonArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ContactsPersonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1ContactsPerson)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ContactsPersonArrayOutput) ToGoogleCloudDatacatalogV1ContactsPersonArrayOutput() GoogleCloudDatacatalogV1ContactsPersonArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsPersonArrayOutput) ToGoogleCloudDatacatalogV1ContactsPersonArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsPersonArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsPersonArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1ContactsPersonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1ContactsPerson {
		return vs[0].([]GoogleCloudDatacatalogV1ContactsPerson)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1ContactsPersonOutput)
}

// A contact person for the entry.
type GoogleCloudDatacatalogV1ContactsPersonResponse struct {
	// Designation of the person, for example, Data Steward.
	Designation string `pulumi:"designation"`
	// Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
	Email string `pulumi:"email"`
}

// A contact person for the entry.
type GoogleCloudDatacatalogV1ContactsPersonResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ContactsPersonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ContactsPersonResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ContactsPersonResponseOutput) ToGoogleCloudDatacatalogV1ContactsPersonResponseOutput() GoogleCloudDatacatalogV1ContactsPersonResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsPersonResponseOutput) ToGoogleCloudDatacatalogV1ContactsPersonResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsPersonResponseOutput {
	return o
}

// Designation of the person, for example, Data Steward.
func (o GoogleCloudDatacatalogV1ContactsPersonResponseOutput) Designation() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ContactsPersonResponse) string { return v.Designation }).(pulumi.StringOutput)
}

// Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
func (o GoogleCloudDatacatalogV1ContactsPersonResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ContactsPersonResponse) string { return v.Email }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1ContactsPersonResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput) ToGoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput() GoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput) ToGoogleCloudDatacatalogV1ContactsPersonResponseArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1ContactsPersonResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1ContactsPersonResponse {
		return vs[0].([]GoogleCloudDatacatalogV1ContactsPersonResponse)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1ContactsPersonResponseOutput)
}

// Contact people for the entry.
type GoogleCloudDatacatalogV1ContactsResponse struct {
	// The list of contact people for the entry.
	People []GoogleCloudDatacatalogV1ContactsPersonResponse `pulumi:"people"`
}

// Contact people for the entry.
type GoogleCloudDatacatalogV1ContactsResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ContactsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ContactsResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ContactsResponseOutput) ToGoogleCloudDatacatalogV1ContactsResponseOutput() GoogleCloudDatacatalogV1ContactsResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ContactsResponseOutput) ToGoogleCloudDatacatalogV1ContactsResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ContactsResponseOutput {
	return o
}

// The list of contact people for the entry.
func (o GoogleCloudDatacatalogV1ContactsResponseOutput) People() GoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ContactsResponse) []GoogleCloudDatacatalogV1ContactsPersonResponse {
		return v.People
	}).(GoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput)
}

// Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type.
type GoogleCloudDatacatalogV1DataSourceConnectionSpec struct {
	// Fields specific to BigQuery connections.
	BigqueryConnectionSpec *GoogleCloudDatacatalogV1BigQueryConnectionSpec `pulumi:"bigqueryConnectionSpec"`
}

// GoogleCloudDatacatalogV1DataSourceConnectionSpecInput is an input type that accepts GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs and GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1DataSourceConnectionSpecInput` via:
//
//          GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs{...}
type GoogleCloudDatacatalogV1DataSourceConnectionSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1DataSourceConnectionSpecOutput() GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput
	ToGoogleCloudDatacatalogV1DataSourceConnectionSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput
}

// Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type.
type GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs struct {
	// Fields specific to BigQuery connections.
	BigqueryConnectionSpec GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrInput `pulumi:"bigqueryConnectionSpec"`
}

func (GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DataSourceConnectionSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecOutput() GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput {
	return i.ToGoogleCloudDatacatalogV1DataSourceConnectionSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput)
}

func (i GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput() GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput).ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs, GoogleCloudDatacatalogV1DataSourceConnectionSpecPtr and GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput() GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput
	ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput
}

type googleCloudDatacatalogV1DataSourceConnectionSpecPtrType GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs

func GoogleCloudDatacatalogV1DataSourceConnectionSpecPtr(v *GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs) GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrInput {
	return (*googleCloudDatacatalogV1DataSourceConnectionSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1DataSourceConnectionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1DataSourceConnectionSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1DataSourceConnectionSpecPtrType) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput() GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1DataSourceConnectionSpecPtrType) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput)
}

// Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type.
type GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DataSourceConnectionSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecOutput() GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput() GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1DataSourceConnectionSpec) *GoogleCloudDatacatalogV1DataSourceConnectionSpec {
		return &v
	}).(GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput)
}

// Fields specific to BigQuery connections.
func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput) BigqueryConnectionSpec() GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DataSourceConnectionSpec) *GoogleCloudDatacatalogV1BigQueryConnectionSpec {
		return v.BigqueryConnectionSpec
	}).(GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput)
}

type GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1DataSourceConnectionSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput() GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput) Elem() GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DataSourceConnectionSpec) GoogleCloudDatacatalogV1DataSourceConnectionSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1DataSourceConnectionSpec
		return ret
	}).(GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput)
}

// Fields specific to BigQuery connections.
func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput) BigqueryConnectionSpec() GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DataSourceConnectionSpec) *GoogleCloudDatacatalogV1BigQueryConnectionSpec {
		if v == nil {
			return nil
		}
		return v.BigqueryConnectionSpec
	}).(GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput)
}

// Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type.
type GoogleCloudDatacatalogV1DataSourceConnectionSpecResponse struct {
	// Fields specific to BigQuery connections.
	BigqueryConnectionSpec GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse `pulumi:"bigqueryConnectionSpec"`
}

// Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type.
type GoogleCloudDatacatalogV1DataSourceConnectionSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DataSourceConnectionSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DataSourceConnectionSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecResponseOutput) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecResponseOutput() GoogleCloudDatacatalogV1DataSourceConnectionSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecResponseOutput) ToGoogleCloudDatacatalogV1DataSourceConnectionSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceConnectionSpecResponseOutput {
	return o
}

// Fields specific to BigQuery connections.
func (o GoogleCloudDatacatalogV1DataSourceConnectionSpecResponseOutput) BigqueryConnectionSpec() GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DataSourceConnectionSpecResponse) GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse {
		return v.BigqueryConnectionSpec
	}).(GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput)
}

// Physical location of an entry.
type GoogleCloudDatacatalogV1DataSourceResponse struct {
	// Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
	Resource string `pulumi:"resource"`
	// Service that physically stores the data.
	Service string `pulumi:"service"`
}

// Physical location of an entry.
type GoogleCloudDatacatalogV1DataSourceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DataSourceResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DataSourceResponseOutput) ToGoogleCloudDatacatalogV1DataSourceResponseOutput() GoogleCloudDatacatalogV1DataSourceResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DataSourceResponseOutput) ToGoogleCloudDatacatalogV1DataSourceResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DataSourceResponseOutput {
	return o
}

// Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
func (o GoogleCloudDatacatalogV1DataSourceResponseOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DataSourceResponse) string { return v.Resource }).(pulumi.StringOutput)
}

// Service that physically stores the data.
func (o GoogleCloudDatacatalogV1DataSourceResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DataSourceResponse) string { return v.Service }).(pulumi.StringOutput)
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpec struct {
	// Type of this table.
	Type *GoogleCloudDatacatalogV1DatabaseTableSpecType `pulumi:"type"`
}

// GoogleCloudDatacatalogV1DatabaseTableSpecInput is an input type that accepts GoogleCloudDatacatalogV1DatabaseTableSpecArgs and GoogleCloudDatacatalogV1DatabaseTableSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1DatabaseTableSpecInput` via:
//
//          GoogleCloudDatacatalogV1DatabaseTableSpecArgs{...}
type GoogleCloudDatacatalogV1DatabaseTableSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1DatabaseTableSpecOutput() GoogleCloudDatacatalogV1DatabaseTableSpecOutput
	ToGoogleCloudDatacatalogV1DatabaseTableSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecOutput
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpecArgs struct {
	// Type of this table.
	Type GoogleCloudDatacatalogV1DatabaseTableSpecTypePtrInput `pulumi:"type"`
}

func (GoogleCloudDatacatalogV1DatabaseTableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DatabaseTableSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecOutput() GoogleCloudDatacatalogV1DatabaseTableSpecOutput {
	return i.ToGoogleCloudDatacatalogV1DatabaseTableSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DatabaseTableSpecOutput)
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1DatabaseTableSpecArgs) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DatabaseTableSpecOutput).ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1DatabaseTableSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1DatabaseTableSpecArgs, GoogleCloudDatacatalogV1DatabaseTableSpecPtr and GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1DatabaseTableSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1DatabaseTableSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1DatabaseTableSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput
	ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput
}

type googleCloudDatacatalogV1DatabaseTableSpecPtrType GoogleCloudDatacatalogV1DatabaseTableSpecArgs

func GoogleCloudDatacatalogV1DatabaseTableSpecPtr(v *GoogleCloudDatacatalogV1DatabaseTableSpecArgs) GoogleCloudDatacatalogV1DatabaseTableSpecPtrInput {
	return (*googleCloudDatacatalogV1DatabaseTableSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1DatabaseTableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1DatabaseTableSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1DatabaseTableSpecPtrType) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1DatabaseTableSpecPtrType) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput)
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DatabaseTableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DatabaseTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecOutput() GoogleCloudDatacatalogV1DatabaseTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1DatabaseTableSpec) *GoogleCloudDatacatalogV1DatabaseTableSpec {
		return &v
	}).(GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput)
}

// Type of this table.
func (o GoogleCloudDatacatalogV1DatabaseTableSpecOutput) Type() GoogleCloudDatacatalogV1DatabaseTableSpecTypePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DatabaseTableSpec) *GoogleCloudDatacatalogV1DatabaseTableSpecType {
		return v.Type
	}).(GoogleCloudDatacatalogV1DatabaseTableSpecTypePtrOutput)
}

type GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1DatabaseTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput() GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput) Elem() GoogleCloudDatacatalogV1DatabaseTableSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DatabaseTableSpec) GoogleCloudDatacatalogV1DatabaseTableSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1DatabaseTableSpec
		return ret
	}).(GoogleCloudDatacatalogV1DatabaseTableSpecOutput)
}

// Type of this table.
func (o GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput) Type() GoogleCloudDatacatalogV1DatabaseTableSpecTypePtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1DatabaseTableSpec) *GoogleCloudDatacatalogV1DatabaseTableSpecType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(GoogleCloudDatacatalogV1DatabaseTableSpecTypePtrOutput)
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpecResponse struct {
	// Type of this table.
	Type string `pulumi:"type"`
}

// Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
type GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1DatabaseTableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput() GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput) ToGoogleCloudDatacatalogV1DatabaseTableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput {
	return o
}

// Type of this table.
func (o GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1DatabaseTableSpecResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Entry overview fields for rich text descriptions of entries.
type GoogleCloudDatacatalogV1EntryOverview struct {
	// Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
	Overview *string `pulumi:"overview"`
}

// GoogleCloudDatacatalogV1EntryOverviewInput is an input type that accepts GoogleCloudDatacatalogV1EntryOverviewArgs and GoogleCloudDatacatalogV1EntryOverviewOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1EntryOverviewInput` via:
//
//          GoogleCloudDatacatalogV1EntryOverviewArgs{...}
type GoogleCloudDatacatalogV1EntryOverviewInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1EntryOverviewOutput() GoogleCloudDatacatalogV1EntryOverviewOutput
	ToGoogleCloudDatacatalogV1EntryOverviewOutputWithContext(context.Context) GoogleCloudDatacatalogV1EntryOverviewOutput
}

// Entry overview fields for rich text descriptions of entries.
type GoogleCloudDatacatalogV1EntryOverviewArgs struct {
	// Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
	Overview pulumi.StringPtrInput `pulumi:"overview"`
}

func (GoogleCloudDatacatalogV1EntryOverviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1EntryOverview)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1EntryOverviewArgs) ToGoogleCloudDatacatalogV1EntryOverviewOutput() GoogleCloudDatacatalogV1EntryOverviewOutput {
	return i.ToGoogleCloudDatacatalogV1EntryOverviewOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1EntryOverviewArgs) ToGoogleCloudDatacatalogV1EntryOverviewOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1EntryOverviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1EntryOverviewOutput)
}

func (i GoogleCloudDatacatalogV1EntryOverviewArgs) ToGoogleCloudDatacatalogV1EntryOverviewPtrOutput() GoogleCloudDatacatalogV1EntryOverviewPtrOutput {
	return i.ToGoogleCloudDatacatalogV1EntryOverviewPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1EntryOverviewArgs) ToGoogleCloudDatacatalogV1EntryOverviewPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1EntryOverviewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1EntryOverviewOutput).ToGoogleCloudDatacatalogV1EntryOverviewPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1EntryOverviewPtrInput is an input type that accepts GoogleCloudDatacatalogV1EntryOverviewArgs, GoogleCloudDatacatalogV1EntryOverviewPtr and GoogleCloudDatacatalogV1EntryOverviewPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1EntryOverviewPtrInput` via:
//
//          GoogleCloudDatacatalogV1EntryOverviewArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1EntryOverviewPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1EntryOverviewPtrOutput() GoogleCloudDatacatalogV1EntryOverviewPtrOutput
	ToGoogleCloudDatacatalogV1EntryOverviewPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1EntryOverviewPtrOutput
}

type googleCloudDatacatalogV1EntryOverviewPtrType GoogleCloudDatacatalogV1EntryOverviewArgs

func GoogleCloudDatacatalogV1EntryOverviewPtr(v *GoogleCloudDatacatalogV1EntryOverviewArgs) GoogleCloudDatacatalogV1EntryOverviewPtrInput {
	return (*googleCloudDatacatalogV1EntryOverviewPtrType)(v)
}

func (*googleCloudDatacatalogV1EntryOverviewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1EntryOverview)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1EntryOverviewPtrType) ToGoogleCloudDatacatalogV1EntryOverviewPtrOutput() GoogleCloudDatacatalogV1EntryOverviewPtrOutput {
	return i.ToGoogleCloudDatacatalogV1EntryOverviewPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1EntryOverviewPtrType) ToGoogleCloudDatacatalogV1EntryOverviewPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1EntryOverviewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1EntryOverviewPtrOutput)
}

// Entry overview fields for rich text descriptions of entries.
type GoogleCloudDatacatalogV1EntryOverviewOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1EntryOverviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1EntryOverview)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1EntryOverviewOutput) ToGoogleCloudDatacatalogV1EntryOverviewOutput() GoogleCloudDatacatalogV1EntryOverviewOutput {
	return o
}

func (o GoogleCloudDatacatalogV1EntryOverviewOutput) ToGoogleCloudDatacatalogV1EntryOverviewOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1EntryOverviewOutput {
	return o
}

func (o GoogleCloudDatacatalogV1EntryOverviewOutput) ToGoogleCloudDatacatalogV1EntryOverviewPtrOutput() GoogleCloudDatacatalogV1EntryOverviewPtrOutput {
	return o.ToGoogleCloudDatacatalogV1EntryOverviewPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1EntryOverviewOutput) ToGoogleCloudDatacatalogV1EntryOverviewPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1EntryOverviewPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1EntryOverview) *GoogleCloudDatacatalogV1EntryOverview {
		return &v
	}).(GoogleCloudDatacatalogV1EntryOverviewPtrOutput)
}

// Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
func (o GoogleCloudDatacatalogV1EntryOverviewOutput) Overview() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1EntryOverview) *string { return v.Overview }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1EntryOverviewPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1EntryOverviewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1EntryOverview)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1EntryOverviewPtrOutput) ToGoogleCloudDatacatalogV1EntryOverviewPtrOutput() GoogleCloudDatacatalogV1EntryOverviewPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1EntryOverviewPtrOutput) ToGoogleCloudDatacatalogV1EntryOverviewPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1EntryOverviewPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1EntryOverviewPtrOutput) Elem() GoogleCloudDatacatalogV1EntryOverviewOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1EntryOverview) GoogleCloudDatacatalogV1EntryOverview {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1EntryOverview
		return ret
	}).(GoogleCloudDatacatalogV1EntryOverviewOutput)
}

// Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
func (o GoogleCloudDatacatalogV1EntryOverviewPtrOutput) Overview() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1EntryOverview) *string {
		if v == nil {
			return nil
		}
		return v.Overview
	}).(pulumi.StringPtrOutput)
}

// Entry overview fields for rich text descriptions of entries.
type GoogleCloudDatacatalogV1EntryOverviewResponse struct {
	// Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
	Overview string `pulumi:"overview"`
}

// Entry overview fields for rich text descriptions of entries.
type GoogleCloudDatacatalogV1EntryOverviewResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1EntryOverviewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1EntryOverviewResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1EntryOverviewResponseOutput) ToGoogleCloudDatacatalogV1EntryOverviewResponseOutput() GoogleCloudDatacatalogV1EntryOverviewResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1EntryOverviewResponseOutput) ToGoogleCloudDatacatalogV1EntryOverviewResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1EntryOverviewResponseOutput {
	return o
}

// Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
func (o GoogleCloudDatacatalogV1EntryOverviewResponseOutput) Overview() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1EntryOverviewResponse) string { return v.Overview }).(pulumi.StringOutput)
}

// Specification of a single file in Cloud Storage.
type GoogleCloudDatacatalogV1GcsFileSpecResponse struct {
	// Full file path. Example: `gs://bucket_name/a/b.txt`.
	FilePath string `pulumi:"filePath"`
	// Creation, modification, and expiration timestamps of a Cloud Storage file.
	GcsTimestamps GoogleCloudDatacatalogV1SystemTimestampsResponse `pulumi:"gcsTimestamps"`
	// File size in bytes.
	SizeBytes string `pulumi:"sizeBytes"`
}

// Specification of a single file in Cloud Storage.
type GoogleCloudDatacatalogV1GcsFileSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFileSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) ToGoogleCloudDatacatalogV1GcsFileSpecResponseOutput() GoogleCloudDatacatalogV1GcsFileSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) ToGoogleCloudDatacatalogV1GcsFileSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFileSpecResponseOutput {
	return o
}

// Full file path. Example: `gs://bucket_name/a/b.txt`.
func (o GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFileSpecResponse) string { return v.FilePath }).(pulumi.StringOutput)
}

// Creation, modification, and expiration timestamps of a Cloud Storage file.
func (o GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) GcsTimestamps() GoogleCloudDatacatalogV1SystemTimestampsResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFileSpecResponse) GoogleCloudDatacatalogV1SystemTimestampsResponse {
		return v.GcsTimestamps
	}).(GoogleCloudDatacatalogV1SystemTimestampsResponseOutput)
}

// File size in bytes.
func (o GoogleCloudDatacatalogV1GcsFileSpecResponseOutput) SizeBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFileSpecResponse) string { return v.SizeBytes }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1GcsFileSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput) ToGoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput() GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput) ToGoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1GcsFileSpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1GcsFileSpecResponse {
		return vs[0].([]GoogleCloudDatacatalogV1GcsFileSpecResponse)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1GcsFileSpecResponseOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpec struct {
	// Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
	FilePatterns []string `pulumi:"filePatterns"`
}

// GoogleCloudDatacatalogV1GcsFilesetSpecInput is an input type that accepts GoogleCloudDatacatalogV1GcsFilesetSpecArgs and GoogleCloudDatacatalogV1GcsFilesetSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1GcsFilesetSpecInput` via:
//
//          GoogleCloudDatacatalogV1GcsFilesetSpecArgs{...}
type GoogleCloudDatacatalogV1GcsFilesetSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1GcsFilesetSpecOutput
	ToGoogleCloudDatacatalogV1GcsFilesetSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecOutput
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpecArgs struct {
	// Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
	FilePatterns pulumi.StringArrayInput `pulumi:"filePatterns"`
}

func (GoogleCloudDatacatalogV1GcsFilesetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFilesetSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1GcsFilesetSpecOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFilesetSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFilesetSpecOutput)
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFilesetSpecOutput).ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1GcsFilesetSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1GcsFilesetSpecArgs, GoogleCloudDatacatalogV1GcsFilesetSpecPtr and GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1GcsFilesetSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1GcsFilesetSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1GcsFilesetSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput
	ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput
}

type googleCloudDatacatalogV1GcsFilesetSpecPtrType GoogleCloudDatacatalogV1GcsFilesetSpecArgs

func GoogleCloudDatacatalogV1GcsFilesetSpecPtr(v *GoogleCloudDatacatalogV1GcsFilesetSpecArgs) GoogleCloudDatacatalogV1GcsFilesetSpecPtrInput {
	return (*googleCloudDatacatalogV1GcsFilesetSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1GcsFilesetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1GcsFilesetSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1GcsFilesetSpecPtrType) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1GcsFilesetSpecPtrType) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFilesetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFilesetSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1GcsFilesetSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1GcsFilesetSpec) *GoogleCloudDatacatalogV1GcsFilesetSpec {
		return &v
	}).(GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput)
}

// Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1GcsFilesetSpecOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFilesetSpec) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

type GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1GcsFilesetSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput) Elem() GoogleCloudDatacatalogV1GcsFilesetSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1GcsFilesetSpec) GoogleCloudDatacatalogV1GcsFilesetSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1GcsFilesetSpec
		return ret
	}).(GoogleCloudDatacatalogV1GcsFilesetSpecOutput)
}

// Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1GcsFilesetSpec) []string {
		if v == nil {
			return nil
		}
		return v.FilePatterns
	}).(pulumi.StringArrayOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpecResponse struct {
	// Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
	FilePatterns []string `pulumi:"filePatterns"`
	// Sample files contained in this fileset, not all files contained in this fileset are represented here.
	SampleGcsFileSpecs []GoogleCloudDatacatalogV1GcsFileSpecResponse `pulumi:"sampleGcsFileSpecs"`
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFilesetSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput() GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) ToGoogleCloudDatacatalogV1GcsFilesetSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput {
	return o
}

// Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFilesetSpecResponse) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

// Sample files contained in this fileset, not all files contained in this fileset are represented here.
func (o GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput) SampleGcsFileSpecs() GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1GcsFilesetSpecResponse) []GoogleCloudDatacatalogV1GcsFileSpecResponse {
		return v.SampleGcsFileSpecs
	}).(GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput)
}

// Entry metadata relevant only to the user and private to them.
type GoogleCloudDatacatalogV1PersonalDetailsResponse struct {
	// Set if the entry is starred; unset otherwise.
	StarTime string `pulumi:"starTime"`
	// True if the entry is starred by the user; false otherwise.
	Starred bool `pulumi:"starred"`
}

// Entry metadata relevant only to the user and private to them.
type GoogleCloudDatacatalogV1PersonalDetailsResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1PersonalDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1PersonalDetailsResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1PersonalDetailsResponseOutput) ToGoogleCloudDatacatalogV1PersonalDetailsResponseOutput() GoogleCloudDatacatalogV1PersonalDetailsResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1PersonalDetailsResponseOutput) ToGoogleCloudDatacatalogV1PersonalDetailsResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1PersonalDetailsResponseOutput {
	return o
}

// Set if the entry is starred; unset otherwise.
func (o GoogleCloudDatacatalogV1PersonalDetailsResponseOutput) StarTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1PersonalDetailsResponse) string { return v.StarTime }).(pulumi.StringOutput)
}

// True if the entry is starred by the user; false otherwise.
func (o GoogleCloudDatacatalogV1PersonalDetailsResponseOutput) Starred() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1PersonalDetailsResponse) bool { return v.Starred }).(pulumi.BoolOutput)
}

// Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
type GoogleCloudDatacatalogV1RoutineSpec struct {
	// Fields specific for BigQuery routines.
	BigqueryRoutineSpec *GoogleCloudDatacatalogV1BigQueryRoutineSpec `pulumi:"bigqueryRoutineSpec"`
	// The body of the routine.
	DefinitionBody *string `pulumi:"definitionBody"`
	// The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
	Language *string `pulumi:"language"`
	// Return type of the argument. The exact value depends on the source system and the language.
	ReturnType *string `pulumi:"returnType"`
	// Arguments of the routine.
	RoutineArguments []GoogleCloudDatacatalogV1RoutineSpecArgument `pulumi:"routineArguments"`
	// The type of the routine.
	RoutineType *GoogleCloudDatacatalogV1RoutineSpecRoutineType `pulumi:"routineType"`
}

// GoogleCloudDatacatalogV1RoutineSpecInput is an input type that accepts GoogleCloudDatacatalogV1RoutineSpecArgs and GoogleCloudDatacatalogV1RoutineSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1RoutineSpecInput` via:
//
//          GoogleCloudDatacatalogV1RoutineSpecArgs{...}
type GoogleCloudDatacatalogV1RoutineSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1RoutineSpecOutput() GoogleCloudDatacatalogV1RoutineSpecOutput
	ToGoogleCloudDatacatalogV1RoutineSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1RoutineSpecOutput
}

// Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
type GoogleCloudDatacatalogV1RoutineSpecArgs struct {
	// Fields specific for BigQuery routines.
	BigqueryRoutineSpec GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrInput `pulumi:"bigqueryRoutineSpec"`
	// The body of the routine.
	DefinitionBody pulumi.StringPtrInput `pulumi:"definitionBody"`
	// The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
	Language pulumi.StringPtrInput `pulumi:"language"`
	// Return type of the argument. The exact value depends on the source system and the language.
	ReturnType pulumi.StringPtrInput `pulumi:"returnType"`
	// Arguments of the routine.
	RoutineArguments GoogleCloudDatacatalogV1RoutineSpecArgumentArrayInput `pulumi:"routineArguments"`
	// The type of the routine.
	RoutineType GoogleCloudDatacatalogV1RoutineSpecRoutineTypePtrInput `pulumi:"routineType"`
}

func (GoogleCloudDatacatalogV1RoutineSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1RoutineSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1RoutineSpecArgs) ToGoogleCloudDatacatalogV1RoutineSpecOutput() GoogleCloudDatacatalogV1RoutineSpecOutput {
	return i.ToGoogleCloudDatacatalogV1RoutineSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1RoutineSpecArgs) ToGoogleCloudDatacatalogV1RoutineSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1RoutineSpecOutput)
}

func (i GoogleCloudDatacatalogV1RoutineSpecArgs) ToGoogleCloudDatacatalogV1RoutineSpecPtrOutput() GoogleCloudDatacatalogV1RoutineSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1RoutineSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1RoutineSpecArgs) ToGoogleCloudDatacatalogV1RoutineSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1RoutineSpecOutput).ToGoogleCloudDatacatalogV1RoutineSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1RoutineSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1RoutineSpecArgs, GoogleCloudDatacatalogV1RoutineSpecPtr and GoogleCloudDatacatalogV1RoutineSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1RoutineSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1RoutineSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1RoutineSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1RoutineSpecPtrOutput() GoogleCloudDatacatalogV1RoutineSpecPtrOutput
	ToGoogleCloudDatacatalogV1RoutineSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1RoutineSpecPtrOutput
}

type googleCloudDatacatalogV1RoutineSpecPtrType GoogleCloudDatacatalogV1RoutineSpecArgs

func GoogleCloudDatacatalogV1RoutineSpecPtr(v *GoogleCloudDatacatalogV1RoutineSpecArgs) GoogleCloudDatacatalogV1RoutineSpecPtrInput {
	return (*googleCloudDatacatalogV1RoutineSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1RoutineSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1RoutineSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1RoutineSpecPtrType) ToGoogleCloudDatacatalogV1RoutineSpecPtrOutput() GoogleCloudDatacatalogV1RoutineSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1RoutineSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1RoutineSpecPtrType) ToGoogleCloudDatacatalogV1RoutineSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1RoutineSpecPtrOutput)
}

// Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
type GoogleCloudDatacatalogV1RoutineSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1RoutineSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1RoutineSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1RoutineSpecOutput) ToGoogleCloudDatacatalogV1RoutineSpecOutput() GoogleCloudDatacatalogV1RoutineSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecOutput) ToGoogleCloudDatacatalogV1RoutineSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecOutput) ToGoogleCloudDatacatalogV1RoutineSpecPtrOutput() GoogleCloudDatacatalogV1RoutineSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1RoutineSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1RoutineSpecOutput) ToGoogleCloudDatacatalogV1RoutineSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1RoutineSpec) *GoogleCloudDatacatalogV1RoutineSpec {
		return &v
	}).(GoogleCloudDatacatalogV1RoutineSpecPtrOutput)
}

// Fields specific for BigQuery routines.
func (o GoogleCloudDatacatalogV1RoutineSpecOutput) BigqueryRoutineSpec() GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpec) *GoogleCloudDatacatalogV1BigQueryRoutineSpec {
		return v.BigqueryRoutineSpec
	}).(GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput)
}

// The body of the routine.
func (o GoogleCloudDatacatalogV1RoutineSpecOutput) DefinitionBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpec) *string { return v.DefinitionBody }).(pulumi.StringPtrOutput)
}

// The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
func (o GoogleCloudDatacatalogV1RoutineSpecOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpec) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// Return type of the argument. The exact value depends on the source system and the language.
func (o GoogleCloudDatacatalogV1RoutineSpecOutput) ReturnType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpec) *string { return v.ReturnType }).(pulumi.StringPtrOutput)
}

// Arguments of the routine.
func (o GoogleCloudDatacatalogV1RoutineSpecOutput) RoutineArguments() GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpec) []GoogleCloudDatacatalogV1RoutineSpecArgument {
		return v.RoutineArguments
	}).(GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput)
}

// The type of the routine.
func (o GoogleCloudDatacatalogV1RoutineSpecOutput) RoutineType() GoogleCloudDatacatalogV1RoutineSpecRoutineTypePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpec) *GoogleCloudDatacatalogV1RoutineSpecRoutineType {
		return v.RoutineType
	}).(GoogleCloudDatacatalogV1RoutineSpecRoutineTypePtrOutput)
}

type GoogleCloudDatacatalogV1RoutineSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1RoutineSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1RoutineSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1RoutineSpecPtrOutput) ToGoogleCloudDatacatalogV1RoutineSpecPtrOutput() GoogleCloudDatacatalogV1RoutineSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecPtrOutput) ToGoogleCloudDatacatalogV1RoutineSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecPtrOutput) Elem() GoogleCloudDatacatalogV1RoutineSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1RoutineSpec) GoogleCloudDatacatalogV1RoutineSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1RoutineSpec
		return ret
	}).(GoogleCloudDatacatalogV1RoutineSpecOutput)
}

// Fields specific for BigQuery routines.
func (o GoogleCloudDatacatalogV1RoutineSpecPtrOutput) BigqueryRoutineSpec() GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1RoutineSpec) *GoogleCloudDatacatalogV1BigQueryRoutineSpec {
		if v == nil {
			return nil
		}
		return v.BigqueryRoutineSpec
	}).(GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput)
}

// The body of the routine.
func (o GoogleCloudDatacatalogV1RoutineSpecPtrOutput) DefinitionBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1RoutineSpec) *string {
		if v == nil {
			return nil
		}
		return v.DefinitionBody
	}).(pulumi.StringPtrOutput)
}

// The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
func (o GoogleCloudDatacatalogV1RoutineSpecPtrOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1RoutineSpec) *string {
		if v == nil {
			return nil
		}
		return v.Language
	}).(pulumi.StringPtrOutput)
}

// Return type of the argument. The exact value depends on the source system and the language.
func (o GoogleCloudDatacatalogV1RoutineSpecPtrOutput) ReturnType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1RoutineSpec) *string {
		if v == nil {
			return nil
		}
		return v.ReturnType
	}).(pulumi.StringPtrOutput)
}

// Arguments of the routine.
func (o GoogleCloudDatacatalogV1RoutineSpecPtrOutput) RoutineArguments() GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1RoutineSpec) []GoogleCloudDatacatalogV1RoutineSpecArgument {
		if v == nil {
			return nil
		}
		return v.RoutineArguments
	}).(GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput)
}

// The type of the routine.
func (o GoogleCloudDatacatalogV1RoutineSpecPtrOutput) RoutineType() GoogleCloudDatacatalogV1RoutineSpecRoutineTypePtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1RoutineSpec) *GoogleCloudDatacatalogV1RoutineSpecRoutineType {
		if v == nil {
			return nil
		}
		return v.RoutineType
	}).(GoogleCloudDatacatalogV1RoutineSpecRoutineTypePtrOutput)
}

// Input or output argument of a function or stored procedure.
type GoogleCloudDatacatalogV1RoutineSpecArgument struct {
	// Specifies whether the argument is input or output.
	Mode *GoogleCloudDatacatalogV1RoutineSpecArgumentMode `pulumi:"mode"`
	// The name of the argument. A return argument of a function might not have a name.
	Name *string `pulumi:"name"`
	// Type of the argument. The exact value depends on the source system and the language.
	Type *string `pulumi:"type"`
}

// GoogleCloudDatacatalogV1RoutineSpecArgumentInput is an input type that accepts GoogleCloudDatacatalogV1RoutineSpecArgumentArgs and GoogleCloudDatacatalogV1RoutineSpecArgumentOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1RoutineSpecArgumentInput` via:
//
//          GoogleCloudDatacatalogV1RoutineSpecArgumentArgs{...}
type GoogleCloudDatacatalogV1RoutineSpecArgumentInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1RoutineSpecArgumentOutput() GoogleCloudDatacatalogV1RoutineSpecArgumentOutput
	ToGoogleCloudDatacatalogV1RoutineSpecArgumentOutputWithContext(context.Context) GoogleCloudDatacatalogV1RoutineSpecArgumentOutput
}

// Input or output argument of a function or stored procedure.
type GoogleCloudDatacatalogV1RoutineSpecArgumentArgs struct {
	// Specifies whether the argument is input or output.
	Mode GoogleCloudDatacatalogV1RoutineSpecArgumentModePtrInput `pulumi:"mode"`
	// The name of the argument. A return argument of a function might not have a name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the argument. The exact value depends on the source system and the language.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GoogleCloudDatacatalogV1RoutineSpecArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1RoutineSpecArgument)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1RoutineSpecArgumentArgs) ToGoogleCloudDatacatalogV1RoutineSpecArgumentOutput() GoogleCloudDatacatalogV1RoutineSpecArgumentOutput {
	return i.ToGoogleCloudDatacatalogV1RoutineSpecArgumentOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1RoutineSpecArgumentArgs) ToGoogleCloudDatacatalogV1RoutineSpecArgumentOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1RoutineSpecArgumentOutput)
}

// GoogleCloudDatacatalogV1RoutineSpecArgumentArrayInput is an input type that accepts GoogleCloudDatacatalogV1RoutineSpecArgumentArray and GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1RoutineSpecArgumentArrayInput` via:
//
//          GoogleCloudDatacatalogV1RoutineSpecArgumentArray{ GoogleCloudDatacatalogV1RoutineSpecArgumentArgs{...} }
type GoogleCloudDatacatalogV1RoutineSpecArgumentArrayInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput() GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput
	ToGoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutputWithContext(context.Context) GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput
}

type GoogleCloudDatacatalogV1RoutineSpecArgumentArray []GoogleCloudDatacatalogV1RoutineSpecArgumentInput

func (GoogleCloudDatacatalogV1RoutineSpecArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1RoutineSpecArgument)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1RoutineSpecArgumentArray) ToGoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput() GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput {
	return i.ToGoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1RoutineSpecArgumentArray) ToGoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput)
}

// Input or output argument of a function or stored procedure.
type GoogleCloudDatacatalogV1RoutineSpecArgumentOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1RoutineSpecArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1RoutineSpecArgument)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1RoutineSpecArgumentOutput) ToGoogleCloudDatacatalogV1RoutineSpecArgumentOutput() GoogleCloudDatacatalogV1RoutineSpecArgumentOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecArgumentOutput) ToGoogleCloudDatacatalogV1RoutineSpecArgumentOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecArgumentOutput {
	return o
}

// Specifies whether the argument is input or output.
func (o GoogleCloudDatacatalogV1RoutineSpecArgumentOutput) Mode() GoogleCloudDatacatalogV1RoutineSpecArgumentModePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecArgument) *GoogleCloudDatacatalogV1RoutineSpecArgumentMode {
		return v.Mode
	}).(GoogleCloudDatacatalogV1RoutineSpecArgumentModePtrOutput)
}

// The name of the argument. A return argument of a function might not have a name.
func (o GoogleCloudDatacatalogV1RoutineSpecArgumentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecArgument) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the argument. The exact value depends on the source system and the language.
func (o GoogleCloudDatacatalogV1RoutineSpecArgumentOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecArgument) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1RoutineSpecArgument)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput) ToGoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput() GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput) ToGoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1RoutineSpecArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1RoutineSpecArgument {
		return vs[0].([]GoogleCloudDatacatalogV1RoutineSpecArgument)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1RoutineSpecArgumentOutput)
}

// Input or output argument of a function or stored procedure.
type GoogleCloudDatacatalogV1RoutineSpecArgumentResponse struct {
	// Specifies whether the argument is input or output.
	Mode string `pulumi:"mode"`
	// The name of the argument. A return argument of a function might not have a name.
	Name string `pulumi:"name"`
	// Type of the argument. The exact value depends on the source system and the language.
	Type string `pulumi:"type"`
}

// Input or output argument of a function or stored procedure.
type GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1RoutineSpecArgumentResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput) ToGoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput() GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput) ToGoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput {
	return o
}

// Specifies whether the argument is input or output.
func (o GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecArgumentResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// The name of the argument. A return argument of a function might not have a name.
func (o GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecArgumentResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the argument. The exact value depends on the source system and the language.
func (o GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecArgumentResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1RoutineSpecArgumentResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput) ToGoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput() GoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput) ToGoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1RoutineSpecArgumentResponse {
		return vs[0].([]GoogleCloudDatacatalogV1RoutineSpecArgumentResponse)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput)
}

// Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
type GoogleCloudDatacatalogV1RoutineSpecResponse struct {
	// Fields specific for BigQuery routines.
	BigqueryRoutineSpec GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse `pulumi:"bigqueryRoutineSpec"`
	// The body of the routine.
	DefinitionBody string `pulumi:"definitionBody"`
	// The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
	Language string `pulumi:"language"`
	// Return type of the argument. The exact value depends on the source system and the language.
	ReturnType string `pulumi:"returnType"`
	// Arguments of the routine.
	RoutineArguments []GoogleCloudDatacatalogV1RoutineSpecArgumentResponse `pulumi:"routineArguments"`
	// The type of the routine.
	RoutineType string `pulumi:"routineType"`
}

// Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
type GoogleCloudDatacatalogV1RoutineSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1RoutineSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1RoutineSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1RoutineSpecResponseOutput) ToGoogleCloudDatacatalogV1RoutineSpecResponseOutput() GoogleCloudDatacatalogV1RoutineSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1RoutineSpecResponseOutput) ToGoogleCloudDatacatalogV1RoutineSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1RoutineSpecResponseOutput {
	return o
}

// Fields specific for BigQuery routines.
func (o GoogleCloudDatacatalogV1RoutineSpecResponseOutput) BigqueryRoutineSpec() GoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecResponse) GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse {
		return v.BigqueryRoutineSpec
	}).(GoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput)
}

// The body of the routine.
func (o GoogleCloudDatacatalogV1RoutineSpecResponseOutput) DefinitionBody() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecResponse) string { return v.DefinitionBody }).(pulumi.StringOutput)
}

// The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
func (o GoogleCloudDatacatalogV1RoutineSpecResponseOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecResponse) string { return v.Language }).(pulumi.StringOutput)
}

// Return type of the argument. The exact value depends on the source system and the language.
func (o GoogleCloudDatacatalogV1RoutineSpecResponseOutput) ReturnType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecResponse) string { return v.ReturnType }).(pulumi.StringOutput)
}

// Arguments of the routine.
func (o GoogleCloudDatacatalogV1RoutineSpecResponseOutput) RoutineArguments() GoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecResponse) []GoogleCloudDatacatalogV1RoutineSpecArgumentResponse {
		return v.RoutineArguments
	}).(GoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput)
}

// The type of the routine.
func (o GoogleCloudDatacatalogV1RoutineSpecResponseOutput) RoutineType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1RoutineSpecResponse) string { return v.RoutineType }).(pulumi.StringOutput)
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1Schema struct {
	// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
	Columns []GoogleCloudDatacatalogV1ColumnSchema `pulumi:"columns"`
}

// GoogleCloudDatacatalogV1SchemaInput is an input type that accepts GoogleCloudDatacatalogV1SchemaArgs and GoogleCloudDatacatalogV1SchemaOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SchemaInput` via:
//
//          GoogleCloudDatacatalogV1SchemaArgs{...}
type GoogleCloudDatacatalogV1SchemaInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SchemaOutput() GoogleCloudDatacatalogV1SchemaOutput
	ToGoogleCloudDatacatalogV1SchemaOutputWithContext(context.Context) GoogleCloudDatacatalogV1SchemaOutput
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1SchemaArgs struct {
	// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
	Columns GoogleCloudDatacatalogV1ColumnSchemaArrayInput `pulumi:"columns"`
}

func (GoogleCloudDatacatalogV1SchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1Schema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1SchemaArgs) ToGoogleCloudDatacatalogV1SchemaOutput() GoogleCloudDatacatalogV1SchemaOutput {
	return i.ToGoogleCloudDatacatalogV1SchemaOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SchemaArgs) ToGoogleCloudDatacatalogV1SchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SchemaOutput)
}

func (i GoogleCloudDatacatalogV1SchemaArgs) ToGoogleCloudDatacatalogV1SchemaPtrOutput() GoogleCloudDatacatalogV1SchemaPtrOutput {
	return i.ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SchemaArgs) ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SchemaOutput).ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1SchemaPtrInput is an input type that accepts GoogleCloudDatacatalogV1SchemaArgs, GoogleCloudDatacatalogV1SchemaPtr and GoogleCloudDatacatalogV1SchemaPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SchemaPtrInput` via:
//
//          GoogleCloudDatacatalogV1SchemaArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1SchemaPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SchemaPtrOutput() GoogleCloudDatacatalogV1SchemaPtrOutput
	ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1SchemaPtrOutput
}

type googleCloudDatacatalogV1SchemaPtrType GoogleCloudDatacatalogV1SchemaArgs

func GoogleCloudDatacatalogV1SchemaPtr(v *GoogleCloudDatacatalogV1SchemaArgs) GoogleCloudDatacatalogV1SchemaPtrInput {
	return (*googleCloudDatacatalogV1SchemaPtrType)(v)
}

func (*googleCloudDatacatalogV1SchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1Schema)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1SchemaPtrType) ToGoogleCloudDatacatalogV1SchemaPtrOutput() GoogleCloudDatacatalogV1SchemaPtrOutput {
	return i.ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1SchemaPtrType) ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SchemaPtrOutput)
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1SchemaOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1Schema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SchemaOutput) ToGoogleCloudDatacatalogV1SchemaOutput() GoogleCloudDatacatalogV1SchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaOutput) ToGoogleCloudDatacatalogV1SchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaOutput) ToGoogleCloudDatacatalogV1SchemaPtrOutput() GoogleCloudDatacatalogV1SchemaPtrOutput {
	return o.ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1SchemaOutput) ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1Schema) *GoogleCloudDatacatalogV1Schema {
		return &v
	}).(GoogleCloudDatacatalogV1SchemaPtrOutput)
}

// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
func (o GoogleCloudDatacatalogV1SchemaOutput) Columns() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1Schema) []GoogleCloudDatacatalogV1ColumnSchema { return v.Columns }).(GoogleCloudDatacatalogV1ColumnSchemaArrayOutput)
}

type GoogleCloudDatacatalogV1SchemaPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1Schema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SchemaPtrOutput) ToGoogleCloudDatacatalogV1SchemaPtrOutput() GoogleCloudDatacatalogV1SchemaPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaPtrOutput) ToGoogleCloudDatacatalogV1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaPtrOutput) Elem() GoogleCloudDatacatalogV1SchemaOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1Schema) GoogleCloudDatacatalogV1Schema {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1Schema
		return ret
	}).(GoogleCloudDatacatalogV1SchemaOutput)
}

// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
func (o GoogleCloudDatacatalogV1SchemaPtrOutput) Columns() GoogleCloudDatacatalogV1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1Schema) []GoogleCloudDatacatalogV1ColumnSchema {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(GoogleCloudDatacatalogV1ColumnSchemaArrayOutput)
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1SchemaResponse struct {
	// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
	Columns []GoogleCloudDatacatalogV1ColumnSchemaResponse `pulumi:"columns"`
}

// Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
type GoogleCloudDatacatalogV1SchemaResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1SchemaResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SchemaResponseOutput) ToGoogleCloudDatacatalogV1SchemaResponseOutput() GoogleCloudDatacatalogV1SchemaResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SchemaResponseOutput) ToGoogleCloudDatacatalogV1SchemaResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SchemaResponseOutput {
	return o
}

// The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
func (o GoogleCloudDatacatalogV1SchemaResponseOutput) Columns() GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SchemaResponse) []GoogleCloudDatacatalogV1ColumnSchemaResponse {
		return v.Columns
	}).(GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput)
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestamps struct {
	// Creation timestamp of the resource within the given system.
	CreateTime *string `pulumi:"createTime"`
	// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
	UpdateTime *string `pulumi:"updateTime"`
}

// GoogleCloudDatacatalogV1SystemTimestampsInput is an input type that accepts GoogleCloudDatacatalogV1SystemTimestampsArgs and GoogleCloudDatacatalogV1SystemTimestampsOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SystemTimestampsInput` via:
//
//          GoogleCloudDatacatalogV1SystemTimestampsArgs{...}
type GoogleCloudDatacatalogV1SystemTimestampsInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SystemTimestampsOutput() GoogleCloudDatacatalogV1SystemTimestampsOutput
	ToGoogleCloudDatacatalogV1SystemTimestampsOutputWithContext(context.Context) GoogleCloudDatacatalogV1SystemTimestampsOutput
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestampsArgs struct {
	// Creation timestamp of the resource within the given system.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
}

func (GoogleCloudDatacatalogV1SystemTimestampsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1SystemTimestamps)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1SystemTimestampsOutput() GoogleCloudDatacatalogV1SystemTimestampsOutput {
	return i.ToGoogleCloudDatacatalogV1SystemTimestampsOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1SystemTimestampsOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SystemTimestampsOutput)
}

func (i GoogleCloudDatacatalogV1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return i.ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SystemTimestampsOutput).ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1SystemTimestampsPtrInput is an input type that accepts GoogleCloudDatacatalogV1SystemTimestampsArgs, GoogleCloudDatacatalogV1SystemTimestampsPtr and GoogleCloudDatacatalogV1SystemTimestampsPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1SystemTimestampsPtrInput` via:
//
//          GoogleCloudDatacatalogV1SystemTimestampsArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1SystemTimestampsPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1SystemTimestampsPtrOutput
	ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1SystemTimestampsPtrOutput
}

type googleCloudDatacatalogV1SystemTimestampsPtrType GoogleCloudDatacatalogV1SystemTimestampsArgs

func GoogleCloudDatacatalogV1SystemTimestampsPtr(v *GoogleCloudDatacatalogV1SystemTimestampsArgs) GoogleCloudDatacatalogV1SystemTimestampsPtrInput {
	return (*googleCloudDatacatalogV1SystemTimestampsPtrType)(v)
}

func (*googleCloudDatacatalogV1SystemTimestampsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1SystemTimestamps)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1SystemTimestampsPtrType) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return i.ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1SystemTimestampsPtrType) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1SystemTimestampsPtrOutput)
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestampsOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SystemTimestampsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1SystemTimestamps)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1SystemTimestampsOutput() GoogleCloudDatacatalogV1SystemTimestampsOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1SystemTimestampsOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return o.ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1SystemTimestamps) *GoogleCloudDatacatalogV1SystemTimestamps {
		return &v
	}).(GoogleCloudDatacatalogV1SystemTimestampsPtrOutput)
}

// Creation timestamp of the resource within the given system.
func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestamps) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
func (o GoogleCloudDatacatalogV1SystemTimestampsOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestamps) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1SystemTimestampsPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1SystemTimestamps)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) ToGoogleCloudDatacatalogV1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) Elem() GoogleCloudDatacatalogV1SystemTimestampsOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SystemTimestamps) GoogleCloudDatacatalogV1SystemTimestamps {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1SystemTimestamps
		return ret
	}).(GoogleCloudDatacatalogV1SystemTimestampsOutput)
}

// Creation timestamp of the resource within the given system.
func (o GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SystemTimestamps) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
func (o GoogleCloudDatacatalogV1SystemTimestampsPtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1SystemTimestamps) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestampsResponse struct {
	// Creation timestamp of the resource within the given system.
	CreateTime string `pulumi:"createTime"`
	// Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.
	ExpireTime string `pulumi:"expireTime"`
	// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
	UpdateTime string `pulumi:"updateTime"`
}

// Timestamps associated with this resource in a particular system.
type GoogleCloudDatacatalogV1SystemTimestampsResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1SystemTimestampsResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) ToGoogleCloudDatacatalogV1SystemTimestampsResponseOutput() GoogleCloudDatacatalogV1SystemTimestampsResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) ToGoogleCloudDatacatalogV1SystemTimestampsResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1SystemTimestampsResponseOutput {
	return o
}

// Creation timestamp of the resource within the given system.
func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestampsResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.
func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestampsResponse) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
func (o GoogleCloudDatacatalogV1SystemTimestampsResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1SystemTimestampsResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpec struct {
}

// GoogleCloudDatacatalogV1TableSpecInput is an input type that accepts GoogleCloudDatacatalogV1TableSpecArgs and GoogleCloudDatacatalogV1TableSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1TableSpecInput` via:
//
//          GoogleCloudDatacatalogV1TableSpecArgs{...}
type GoogleCloudDatacatalogV1TableSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1TableSpecOutput() GoogleCloudDatacatalogV1TableSpecOutput
	ToGoogleCloudDatacatalogV1TableSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1TableSpecOutput
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpecArgs struct {
}

func (GoogleCloudDatacatalogV1TableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1TableSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1TableSpecArgs) ToGoogleCloudDatacatalogV1TableSpecOutput() GoogleCloudDatacatalogV1TableSpecOutput {
	return i.ToGoogleCloudDatacatalogV1TableSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1TableSpecArgs) ToGoogleCloudDatacatalogV1TableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1TableSpecOutput)
}

func (i GoogleCloudDatacatalogV1TableSpecArgs) ToGoogleCloudDatacatalogV1TableSpecPtrOutput() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1TableSpecArgs) ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1TableSpecOutput).ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1TableSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1TableSpecArgs, GoogleCloudDatacatalogV1TableSpecPtr and GoogleCloudDatacatalogV1TableSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1TableSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1TableSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1TableSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1TableSpecPtrOutput() GoogleCloudDatacatalogV1TableSpecPtrOutput
	ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1TableSpecPtrOutput
}

type googleCloudDatacatalogV1TableSpecPtrType GoogleCloudDatacatalogV1TableSpecArgs

func GoogleCloudDatacatalogV1TableSpecPtr(v *GoogleCloudDatacatalogV1TableSpecArgs) GoogleCloudDatacatalogV1TableSpecPtrInput {
	return (*googleCloudDatacatalogV1TableSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1TableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1TableSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1TableSpecPtrType) ToGoogleCloudDatacatalogV1TableSpecPtrOutput() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1TableSpecPtrType) ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1TableSpecPtrOutput)
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1TableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1TableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1TableSpecOutput) ToGoogleCloudDatacatalogV1TableSpecOutput() GoogleCloudDatacatalogV1TableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecOutput) ToGoogleCloudDatacatalogV1TableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecOutput) ToGoogleCloudDatacatalogV1TableSpecPtrOutput() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1TableSpecOutput) ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1TableSpec) *GoogleCloudDatacatalogV1TableSpec {
		return &v
	}).(GoogleCloudDatacatalogV1TableSpecPtrOutput)
}

type GoogleCloudDatacatalogV1TableSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1TableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1TableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1TableSpecPtrOutput) ToGoogleCloudDatacatalogV1TableSpecPtrOutput() GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecPtrOutput) ToGoogleCloudDatacatalogV1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecPtrOutput) Elem() GoogleCloudDatacatalogV1TableSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1TableSpec) GoogleCloudDatacatalogV1TableSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1TableSpec
		return ret
	}).(GoogleCloudDatacatalogV1TableSpecOutput)
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpecResponse struct {
	// If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.
	GroupedEntry string `pulumi:"groupedEntry"`
}

// Normal BigQuery table specification.
type GoogleCloudDatacatalogV1TableSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1TableSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1TableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1TableSpecResponseOutput) ToGoogleCloudDatacatalogV1TableSpecResponseOutput() GoogleCloudDatacatalogV1TableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1TableSpecResponseOutput) ToGoogleCloudDatacatalogV1TableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1TableSpecResponseOutput {
	return o
}

// If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.
func (o GoogleCloudDatacatalogV1TableSpecResponseOutput) GroupedEntry() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1TableSpecResponse) string { return v.GroupedEntry }).(pulumi.StringOutput)
}

// The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.
type GoogleCloudDatacatalogV1UsageSignalResponse struct {
	// The end timestamp of the duration of usage statistics.
	UpdateTime string `pulumi:"updateTime"`
	// Usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.
	UsageWithinTimeRange map[string]string `pulumi:"usageWithinTimeRange"`
}

// The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.
type GoogleCloudDatacatalogV1UsageSignalResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1UsageSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1UsageSignalResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1UsageSignalResponseOutput) ToGoogleCloudDatacatalogV1UsageSignalResponseOutput() GoogleCloudDatacatalogV1UsageSignalResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1UsageSignalResponseOutput) ToGoogleCloudDatacatalogV1UsageSignalResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1UsageSignalResponseOutput {
	return o
}

// The end timestamp of the duration of usage statistics.
func (o GoogleCloudDatacatalogV1UsageSignalResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1UsageSignalResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.
func (o GoogleCloudDatacatalogV1UsageSignalResponseOutput) UsageWithinTimeRange() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1UsageSignalResponse) map[string]string { return v.UsageWithinTimeRange }).(pulumi.StringMapOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpec struct {
}

// GoogleCloudDatacatalogV1ViewSpecInput is an input type that accepts GoogleCloudDatacatalogV1ViewSpecArgs and GoogleCloudDatacatalogV1ViewSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ViewSpecInput` via:
//
//          GoogleCloudDatacatalogV1ViewSpecArgs{...}
type GoogleCloudDatacatalogV1ViewSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ViewSpecOutput() GoogleCloudDatacatalogV1ViewSpecOutput
	ToGoogleCloudDatacatalogV1ViewSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1ViewSpecOutput
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpecArgs struct {
}

func (GoogleCloudDatacatalogV1ViewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ViewSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1ViewSpecArgs) ToGoogleCloudDatacatalogV1ViewSpecOutput() GoogleCloudDatacatalogV1ViewSpecOutput {
	return i.ToGoogleCloudDatacatalogV1ViewSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ViewSpecArgs) ToGoogleCloudDatacatalogV1ViewSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ViewSpecOutput)
}

func (i GoogleCloudDatacatalogV1ViewSpecArgs) ToGoogleCloudDatacatalogV1ViewSpecPtrOutput() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1ViewSpecArgs) ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ViewSpecOutput).ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1ViewSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1ViewSpecArgs, GoogleCloudDatacatalogV1ViewSpecPtr and GoogleCloudDatacatalogV1ViewSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1ViewSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1ViewSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1ViewSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1ViewSpecPtrOutput() GoogleCloudDatacatalogV1ViewSpecPtrOutput
	ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1ViewSpecPtrOutput
}

type googleCloudDatacatalogV1ViewSpecPtrType GoogleCloudDatacatalogV1ViewSpecArgs

func GoogleCloudDatacatalogV1ViewSpecPtr(v *GoogleCloudDatacatalogV1ViewSpecArgs) GoogleCloudDatacatalogV1ViewSpecPtrInput {
	return (*googleCloudDatacatalogV1ViewSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1ViewSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1ViewSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1ViewSpecPtrType) ToGoogleCloudDatacatalogV1ViewSpecPtrOutput() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1ViewSpecPtrType) ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1ViewSpecPtrOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ViewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ViewSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ViewSpecOutput) ToGoogleCloudDatacatalogV1ViewSpecOutput() GoogleCloudDatacatalogV1ViewSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecOutput) ToGoogleCloudDatacatalogV1ViewSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecOutput) ToGoogleCloudDatacatalogV1ViewSpecPtrOutput() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1ViewSpecOutput) ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1ViewSpec) *GoogleCloudDatacatalogV1ViewSpec {
		return &v
	}).(GoogleCloudDatacatalogV1ViewSpecPtrOutput)
}

type GoogleCloudDatacatalogV1ViewSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ViewSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1ViewSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ViewSpecPtrOutput) ToGoogleCloudDatacatalogV1ViewSpecPtrOutput() GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecPtrOutput) ToGoogleCloudDatacatalogV1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecPtrOutput) Elem() GoogleCloudDatacatalogV1ViewSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1ViewSpec) GoogleCloudDatacatalogV1ViewSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1ViewSpec
		return ret
	}).(GoogleCloudDatacatalogV1ViewSpecOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpecResponse struct {
	// The query that defines the table view.
	ViewQuery string `pulumi:"viewQuery"`
}

// Table view specification.
type GoogleCloudDatacatalogV1ViewSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1ViewSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1ViewSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1ViewSpecResponseOutput) ToGoogleCloudDatacatalogV1ViewSpecResponseOutput() GoogleCloudDatacatalogV1ViewSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1ViewSpecResponseOutput) ToGoogleCloudDatacatalogV1ViewSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1ViewSpecResponseOutput {
	return o
}

// The query that defines the table view.
func (o GoogleCloudDatacatalogV1ViewSpecResponseOutput) ViewQuery() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1ViewSpecResponse) string { return v.ViewQuery }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryConnectionSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1BigQueryConnectionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryDateShardedSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1BigQueryDateShardedSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryRoutineSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1BigQueryRoutineSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryTableSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1BigQueryTableSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1BigQueryTableSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1BigQueryTableSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1BusinessContextInput)(nil)).Elem(), GoogleCloudDatacatalogV1BusinessContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1BusinessContextPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1BusinessContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1ColumnSchemaInput)(nil)).Elem(), GoogleCloudDatacatalogV1ColumnSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1ColumnSchemaArrayInput)(nil)).Elem(), GoogleCloudDatacatalogV1ColumnSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1ContactsInput)(nil)).Elem(), GoogleCloudDatacatalogV1ContactsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1ContactsPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1ContactsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1ContactsPersonInput)(nil)).Elem(), GoogleCloudDatacatalogV1ContactsPersonArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1ContactsPersonArrayInput)(nil)).Elem(), GoogleCloudDatacatalogV1ContactsPersonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1DataSourceConnectionSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1DataSourceConnectionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1DatabaseTableSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1DatabaseTableSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1DatabaseTableSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1DatabaseTableSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1EntryOverviewInput)(nil)).Elem(), GoogleCloudDatacatalogV1EntryOverviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1EntryOverviewPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1EntryOverviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFilesetSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1GcsFilesetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1GcsFilesetSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1GcsFilesetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1RoutineSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1RoutineSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1RoutineSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1RoutineSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1RoutineSpecArgumentInput)(nil)).Elem(), GoogleCloudDatacatalogV1RoutineSpecArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1RoutineSpecArgumentArrayInput)(nil)).Elem(), GoogleCloudDatacatalogV1RoutineSpecArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1SchemaInput)(nil)).Elem(), GoogleCloudDatacatalogV1SchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1SchemaPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1SchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1SystemTimestampsInput)(nil)).Elem(), GoogleCloudDatacatalogV1SystemTimestampsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1SystemTimestampsPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1SystemTimestampsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1TableSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1TableSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1TableSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1TableSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1ViewSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1ViewSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1ViewSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1ViewSpecArgs{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryConnectionSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryConnectionSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryConnectionSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryDateShardedSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryDateShardedSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryRoutineSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryRoutineSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryRoutineSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryTableSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryTableSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BigQueryTableSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BusinessContextOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BusinessContextPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1BusinessContextResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ColumnSchemaOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ColumnSchemaArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ColumnSchemaResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ColumnSchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ContactsOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ContactsPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ContactsPersonOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ContactsPersonArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ContactsPersonResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ContactsPersonResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ContactsResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DataSourceConnectionSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DataSourceConnectionSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DataSourceConnectionSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DataSourceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DatabaseTableSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DatabaseTableSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1DatabaseTableSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1EntryOverviewOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1EntryOverviewPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1EntryOverviewResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFileSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFileSpecResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFilesetSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFilesetSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1GcsFilesetSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1PersonalDetailsResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1RoutineSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1RoutineSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1RoutineSpecArgumentOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1RoutineSpecArgumentArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1RoutineSpecArgumentResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1RoutineSpecArgumentResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1RoutineSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SchemaOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SchemaPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SchemaResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SystemTimestampsOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SystemTimestampsPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1SystemTimestampsResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1TableSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1TableSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1TableSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1UsageSignalResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ViewSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ViewSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1ViewSpecResponseOutput{})
}
