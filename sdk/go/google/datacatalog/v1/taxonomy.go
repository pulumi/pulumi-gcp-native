// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a taxonomy in a specified project. The taxonomy is initially empty, that is, it doesn't contain policy tags.
// Auto-naming is currently not supported for this resource.
type Taxonomy struct {
	pulumi.CustomResourceState

	// Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.
	ActivatedPolicyTypes pulumi.StringArrayOutput `pulumi:"activatedPolicyTypes"`
	// Optional. Description of this taxonomy. If not set, defaults to empty. The description must contain only Unicode characters, tabs, newlines, carriage returns, and page breaks, and be at most 2000 bytes long when encoded in UTF-8.
	Description pulumi.StringOutput `pulumi:"description"`
	// User-defined name of this taxonomy. The name can't start or end with spaces, must contain only Unicode letters, numbers, underscores, dashes, and spaces, and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// Resource name of this taxonomy in URL format. Note: Policy tag manager generates unique taxonomy IDs.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of policy tags in this taxonomy.
	PolicyTagCount pulumi.IntOutput    `pulumi:"policyTagCount"`
	Project        pulumi.StringOutput `pulumi:"project"`
	// Identity of the service which owns the Taxonomy. This field is only populated when the taxonomy is created by a Google Cloud service. Currently only 'DATAPLEX' is supported.
	Service GoogleCloudDatacatalogV1TaxonomyServiceResponseOutput `pulumi:"service"`
	// Creation and modification timestamps of this taxonomy.
	TaxonomyTimestamps GoogleCloudDatacatalogV1SystemTimestampsResponseOutput `pulumi:"taxonomyTimestamps"`
}

// NewTaxonomy registers a new resource with the given unique name, arguments, and options.
func NewTaxonomy(ctx *pulumi.Context,
	name string, args *TaxonomyArgs, opts ...pulumi.ResourceOption) (*Taxonomy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Taxonomy
	err := ctx.RegisterResource("google-native:datacatalog/v1:Taxonomy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaxonomy gets an existing Taxonomy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaxonomy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaxonomyState, opts ...pulumi.ResourceOption) (*Taxonomy, error) {
	var resource Taxonomy
	err := ctx.ReadResource("google-native:datacatalog/v1:Taxonomy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Taxonomy resources.
type taxonomyState struct {
}

type TaxonomyState struct {
}

func (TaxonomyState) ElementType() reflect.Type {
	return reflect.TypeOf((*taxonomyState)(nil)).Elem()
}

type taxonomyArgs struct {
	// Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.
	ActivatedPolicyTypes []TaxonomyActivatedPolicyTypesItem `pulumi:"activatedPolicyTypes"`
	// Optional. Description of this taxonomy. If not set, defaults to empty. The description must contain only Unicode characters, tabs, newlines, carriage returns, and page breaks, and be at most 2000 bytes long when encoded in UTF-8.
	Description *string `pulumi:"description"`
	// User-defined name of this taxonomy. The name can't start or end with spaces, must contain only Unicode letters, numbers, underscores, dashes, and spaces, and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.
	DisplayName string  `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	Project     *string `pulumi:"project"`
}

// The set of arguments for constructing a Taxonomy resource.
type TaxonomyArgs struct {
	// Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.
	ActivatedPolicyTypes TaxonomyActivatedPolicyTypesItemArrayInput
	// Optional. Description of this taxonomy. If not set, defaults to empty. The description must contain only Unicode characters, tabs, newlines, carriage returns, and page breaks, and be at most 2000 bytes long when encoded in UTF-8.
	Description pulumi.StringPtrInput
	// User-defined name of this taxonomy. The name can't start or end with spaces, must contain only Unicode letters, numbers, underscores, dashes, and spaces, and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.
	DisplayName pulumi.StringInput
	Location    pulumi.StringPtrInput
	Project     pulumi.StringPtrInput
}

func (TaxonomyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taxonomyArgs)(nil)).Elem()
}

type TaxonomyInput interface {
	pulumi.Input

	ToTaxonomyOutput() TaxonomyOutput
	ToTaxonomyOutputWithContext(ctx context.Context) TaxonomyOutput
}

func (*Taxonomy) ElementType() reflect.Type {
	return reflect.TypeOf((**Taxonomy)(nil)).Elem()
}

func (i *Taxonomy) ToTaxonomyOutput() TaxonomyOutput {
	return i.ToTaxonomyOutputWithContext(context.Background())
}

func (i *Taxonomy) ToTaxonomyOutputWithContext(ctx context.Context) TaxonomyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaxonomyOutput)
}

func (i *Taxonomy) ToOutput(ctx context.Context) pulumix.Output[*Taxonomy] {
	return pulumix.Output[*Taxonomy]{
		OutputState: i.ToTaxonomyOutputWithContext(ctx).OutputState,
	}
}

type TaxonomyOutput struct{ *pulumi.OutputState }

func (TaxonomyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Taxonomy)(nil)).Elem()
}

func (o TaxonomyOutput) ToTaxonomyOutput() TaxonomyOutput {
	return o
}

func (o TaxonomyOutput) ToTaxonomyOutputWithContext(ctx context.Context) TaxonomyOutput {
	return o
}

func (o TaxonomyOutput) ToOutput(ctx context.Context) pulumix.Output[*Taxonomy] {
	return pulumix.Output[*Taxonomy]{
		OutputState: o.OutputState,
	}
}

// Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.
func (o TaxonomyOutput) ActivatedPolicyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Taxonomy) pulumi.StringArrayOutput { return v.ActivatedPolicyTypes }).(pulumi.StringArrayOutput)
}

// Optional. Description of this taxonomy. If not set, defaults to empty. The description must contain only Unicode characters, tabs, newlines, carriage returns, and page breaks, and be at most 2000 bytes long when encoded in UTF-8.
func (o TaxonomyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Taxonomy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// User-defined name of this taxonomy. The name can't start or end with spaces, must contain only Unicode letters, numbers, underscores, dashes, and spaces, and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.
func (o TaxonomyOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Taxonomy) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o TaxonomyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Taxonomy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name of this taxonomy in URL format. Note: Policy tag manager generates unique taxonomy IDs.
func (o TaxonomyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Taxonomy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of policy tags in this taxonomy.
func (o TaxonomyOutput) PolicyTagCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Taxonomy) pulumi.IntOutput { return v.PolicyTagCount }).(pulumi.IntOutput)
}

func (o TaxonomyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Taxonomy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Identity of the service which owns the Taxonomy. This field is only populated when the taxonomy is created by a Google Cloud service. Currently only 'DATAPLEX' is supported.
func (o TaxonomyOutput) Service() GoogleCloudDatacatalogV1TaxonomyServiceResponseOutput {
	return o.ApplyT(func(v *Taxonomy) GoogleCloudDatacatalogV1TaxonomyServiceResponseOutput { return v.Service }).(GoogleCloudDatacatalogV1TaxonomyServiceResponseOutput)
}

// Creation and modification timestamps of this taxonomy.
func (o TaxonomyOutput) TaxonomyTimestamps() GoogleCloudDatacatalogV1SystemTimestampsResponseOutput {
	return o.ApplyT(func(v *Taxonomy) GoogleCloudDatacatalogV1SystemTimestampsResponseOutput { return v.TaxonomyTimestamps }).(GoogleCloudDatacatalogV1SystemTimestampsResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaxonomyInput)(nil)).Elem(), &Taxonomy{})
	pulumi.RegisterOutputType(TaxonomyOutput{})
}
