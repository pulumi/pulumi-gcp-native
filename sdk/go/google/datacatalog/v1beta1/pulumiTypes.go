// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

func (i BindingArgs) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: i.ToBindingOutputWithContext(ctx).OutputState,
	}
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

func (i BindingArray) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: i.ToBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

func (o BindingOutput) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: o.OutputState,
	}
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BindingResponse] {
	return pulumix.Output[BindingResponse]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BindingResponse] {
	return pulumix.Output[[]BindingResponse]{
		OutputState: o.OutputState,
	}
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: i.ToExprOutputWithContext(ctx).OutputState,
	}
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

func (i *exprPtrType) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: i.ToExprPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

func (o ExprOutput) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: o.OutputState,
	}
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExprResponse] {
	return pulumix.Output[ExprResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Spec for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec struct {
}

// GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs and GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecInput` via:
//
//	GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs{...}
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput
	ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput
}

// Spec for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs struct {
}

func (GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput)
}

func (i GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput).ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs, GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtr and GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrInput` via:
//
//	        GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput
	ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput
}

type googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs

func GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtr(v *GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrInput {
	return (*googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput)
}

func (i *googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx).OutputState,
	}
}

// Spec for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec) *GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec {
		return &v
	}).(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput)
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec]{
		OutputState: o.OutputState,
	}
}

type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec]{
		OutputState: o.OutputState,
	}
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) Elem() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec
		return ret
	}).(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput)
}

// Spec for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponse struct {
	// The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`.
	Dataset string `pulumi:"dataset"`
	// Total number of shards.
	ShardCount string `pulumi:"shardCount"`
	// The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`.
	TablePrefix string `pulumi:"tablePrefix"`
}

// Spec for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponse]{
		OutputState: o.OutputState,
	}
}

// The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`.
func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponse) string { return v.Dataset }).(pulumi.StringOutput)
}

// Total number of shards.
func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput) ShardCount() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponse) string { return v.ShardCount }).(pulumi.StringOutput)
}

// The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`.
func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput) TablePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponse) string { return v.TablePrefix }).(pulumi.StringOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1beta1BigQueryTableSpec struct {
	// Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec *GoogleCloudDatacatalogV1beta1TableSpec `pulumi:"tableSpec"`
	// Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec *GoogleCloudDatacatalogV1beta1ViewSpec `pulumi:"viewSpec"`
}

// GoogleCloudDatacatalogV1beta1BigQueryTableSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs and GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1BigQueryTableSpecInput` via:
//
//	GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs{...}
type GoogleCloudDatacatalogV1beta1BigQueryTableSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput
	ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs struct {
	// Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec GoogleCloudDatacatalogV1beta1TableSpecPtrInput `pulumi:"tableSpec"`
	// Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec GoogleCloudDatacatalogV1beta1ViewSpecPtrInput `pulumi:"viewSpec"`
}

func (GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryTableSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput)
}

func (i GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryTableSpec] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryTableSpec]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput).ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs, GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtr and GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrInput` via:
//
//	        GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput
	ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput
}

type googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs

func GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtr(v *GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrInput {
	return (*googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1BigQueryTableSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput)
}

func (i *googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1BigQueryTableSpec] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1BigQueryTableSpec]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *GoogleCloudDatacatalogV1beta1BigQueryTableSpec {
		return &v
	}).(GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput)
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryTableSpec] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryTableSpec]{
		OutputState: o.OutputState,
	}
}

// Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) TableSpec() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *GoogleCloudDatacatalogV1beta1TableSpec {
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1beta1TableSpecPtrOutput)
}

// Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ViewSpec() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *GoogleCloudDatacatalogV1beta1ViewSpec {
		return v.ViewSpec
	}).(GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput)
}

type GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1BigQueryTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1BigQueryTableSpec] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1BigQueryTableSpec]{
		OutputState: o.OutputState,
	}
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) Elem() GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryTableSpec) GoogleCloudDatacatalogV1beta1BigQueryTableSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1beta1BigQueryTableSpec
		return ret
	}).(GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput)
}

// Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) TableSpec() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *GoogleCloudDatacatalogV1beta1TableSpec {
		if v == nil {
			return nil
		}
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1beta1TableSpecPtrOutput)
}

// Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) ViewSpec() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *GoogleCloudDatacatalogV1beta1ViewSpec {
		if v == nil {
			return nil
		}
		return v.ViewSpec
	}).(GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponse struct {
	// The table source type.
	TableSourceType string `pulumi:"tableSourceType"`
	// Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec GoogleCloudDatacatalogV1beta1TableSpecResponse `pulumi:"tableSpec"`
	// Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec GoogleCloudDatacatalogV1beta1ViewSpecResponse `pulumi:"viewSpec"`
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponse]{
		OutputState: o.OutputState,
	}
}

// The table source type.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput) TableSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponse) string { return v.TableSourceType }).(pulumi.StringOutput)
}

// Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput) TableSpec() GoogleCloudDatacatalogV1beta1TableSpecResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponse) GoogleCloudDatacatalogV1beta1TableSpecResponse {
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1beta1TableSpecResponseOutput)
}

// Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput) ViewSpec() GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponse) GoogleCloudDatacatalogV1beta1ViewSpecResponse {
		return v.ViewSpec
	}).(GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput)
}

// Representation of a column within a schema. Columns could be nested inside other columns.
type GoogleCloudDatacatalogV1beta1ColumnSchema struct {
	// Name of the column.
	Column string `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string.
	Description *string `pulumi:"description"`
	// Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
	Mode *string `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns []GoogleCloudDatacatalogV1beta1ColumnSchema `pulumi:"subcolumns"`
	// Type of the column.
	Type string `pulumi:"type"`
}

// GoogleCloudDatacatalogV1beta1ColumnSchemaInput is an input type that accepts GoogleCloudDatacatalogV1beta1ColumnSchemaArgs and GoogleCloudDatacatalogV1beta1ColumnSchemaOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1ColumnSchemaInput` via:
//
//	GoogleCloudDatacatalogV1beta1ColumnSchemaArgs{...}
type GoogleCloudDatacatalogV1beta1ColumnSchemaInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaOutput
	ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaOutput
}

// Representation of a column within a schema. Columns could be nested inside other columns.
type GoogleCloudDatacatalogV1beta1ColumnSchemaArgs struct {
	// Name of the column.
	Column pulumi.StringInput `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput `pulumi:"subcolumns"`
	// Type of the column.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleCloudDatacatalogV1beta1ColumnSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ColumnSchema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1ColumnSchemaArgs) ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaOutput {
	return i.ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1ColumnSchemaArgs) ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1ColumnSchemaOutput)
}

func (i GoogleCloudDatacatalogV1beta1ColumnSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1ColumnSchema] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1ColumnSchema]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutputWithContext(ctx).OutputState,
	}
}

// GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput is an input type that accepts GoogleCloudDatacatalogV1beta1ColumnSchemaArray and GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput` via:
//
//	GoogleCloudDatacatalogV1beta1ColumnSchemaArray{ GoogleCloudDatacatalogV1beta1ColumnSchemaArgs{...} }
type GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput
	ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput
}

type GoogleCloudDatacatalogV1beta1ColumnSchemaArray []GoogleCloudDatacatalogV1beta1ColumnSchemaInput

func (GoogleCloudDatacatalogV1beta1ColumnSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1beta1ColumnSchema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1ColumnSchemaArray) ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return i.ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1ColumnSchemaArray) ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput)
}

func (i GoogleCloudDatacatalogV1beta1ColumnSchemaArray) ToOutput(ctx context.Context) pulumix.Output[[]GoogleCloudDatacatalogV1beta1ColumnSchema] {
	return pulumix.Output[[]GoogleCloudDatacatalogV1beta1ColumnSchema]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutputWithContext(ctx).OutputState,
	}
}

// Representation of a column within a schema. Columns could be nested inside other columns.
type GoogleCloudDatacatalogV1beta1ColumnSchemaOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ColumnSchema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1ColumnSchema] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1ColumnSchema]{
		OutputState: o.OutputState,
	}
}

// Name of the column.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchema) string { return v.Column }).(pulumi.StringOutput)
}

// Optional. Description of the column. Default value is an empty string.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchema) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchema) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) Subcolumns() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchema) []GoogleCloudDatacatalogV1beta1ColumnSchema {
		return v.Subcolumns
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput)
}

// Type of the column.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchema) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1beta1ColumnSchema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GoogleCloudDatacatalogV1beta1ColumnSchema] {
	return pulumix.Output[[]GoogleCloudDatacatalogV1beta1ColumnSchema]{
		OutputState: o.OutputState,
	}
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1beta1ColumnSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1beta1ColumnSchema {
		return vs[0].([]GoogleCloudDatacatalogV1beta1ColumnSchema)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaOutput)
}

// Representation of a column within a schema. Columns could be nested inside other columns.
type GoogleCloudDatacatalogV1beta1ColumnSchemaResponse struct {
	// Name of the column.
	Column string `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string.
	Description string `pulumi:"description"`
	// Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
	Mode string `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns []GoogleCloudDatacatalogV1beta1ColumnSchemaResponse `pulumi:"subcolumns"`
	// Type of the column.
	Type string `pulumi:"type"`
}

// Representation of a column within a schema. Columns could be nested inside other columns.
type GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ColumnSchemaResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1ColumnSchemaResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1ColumnSchemaResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the column.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchemaResponse) string { return v.Column }).(pulumi.StringOutput)
}

// Optional. Description of the column. Default value is an empty string.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchemaResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchemaResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput) Subcolumns() GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchemaResponse) []GoogleCloudDatacatalogV1beta1ColumnSchemaResponse {
		return v.Subcolumns
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput)
}

// Type of the column.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchemaResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1beta1ColumnSchemaResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GoogleCloudDatacatalogV1beta1ColumnSchemaResponse] {
	return pulumix.Output[[]GoogleCloudDatacatalogV1beta1ColumnSchemaResponse]{
		OutputState: o.OutputState,
	}
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1beta1ColumnSchemaResponse {
		return vs[0].([]GoogleCloudDatacatalogV1beta1ColumnSchemaResponse)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput)
}

// Specifications of a single file in Cloud Storage.
type GoogleCloudDatacatalogV1beta1GcsFileSpecResponse struct {
	// The full file path. Example: `gs://bucket_name/a/b.txt`.
	FilePath string `pulumi:"filePath"`
	// Timestamps about the Cloud Storage file.
	GcsTimestamps GoogleCloudDatacatalogV1beta1SystemTimestampsResponse `pulumi:"gcsTimestamps"`
	// The size of the file, in bytes.
	SizeBytes string `pulumi:"sizeBytes"`
}

// Specifications of a single file in Cloud Storage.
type GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1GcsFileSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput() GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1GcsFileSpecResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1GcsFileSpecResponse]{
		OutputState: o.OutputState,
	}
}

// The full file path. Example: `gs://bucket_name/a/b.txt`.
func (o GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFileSpecResponse) string { return v.FilePath }).(pulumi.StringOutput)
}

// Timestamps about the Cloud Storage file.
func (o GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput) GcsTimestamps() GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFileSpecResponse) GoogleCloudDatacatalogV1beta1SystemTimestampsResponse {
		return v.GcsTimestamps
	}).(GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput)
}

// The size of the file, in bytes.
func (o GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput) SizeBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFileSpecResponse) string { return v.SizeBytes }).(pulumi.StringOutput)
}

type GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1beta1GcsFileSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput) ToGoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput() GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput) ToGoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GoogleCloudDatacatalogV1beta1GcsFileSpecResponse] {
	return pulumix.Output[[]GoogleCloudDatacatalogV1beta1GcsFileSpecResponse]{
		OutputState: o.OutputState,
	}
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1beta1GcsFileSpecResponse {
		return vs[0].([]GoogleCloudDatacatalogV1beta1GcsFileSpecResponse)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1beta1GcsFilesetSpec struct {
	// Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
	FilePatterns []string `pulumi:"filePatterns"`
}

// GoogleCloudDatacatalogV1beta1GcsFilesetSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs and GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1GcsFilesetSpecInput` via:
//
//	GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs{...}
type GoogleCloudDatacatalogV1beta1GcsFilesetSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput
	ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs struct {
	// Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
	FilePatterns pulumi.StringArrayInput `pulumi:"filePatterns"`
}

func (GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1GcsFilesetSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput)
}

func (i GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1GcsFilesetSpec] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1GcsFilesetSpec]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput).ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs, GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtr and GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrInput` via:
//
//	        GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput
	ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput
}

type googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs

func GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtr(v *GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrInput {
	return (*googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1GcsFilesetSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput)
}

func (i *googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1GcsFilesetSpec] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1GcsFilesetSpec]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1GcsFilesetSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1beta1GcsFilesetSpec) *GoogleCloudDatacatalogV1beta1GcsFilesetSpec {
		return &v
	}).(GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput)
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1GcsFilesetSpec] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1GcsFilesetSpec]{
		OutputState: o.OutputState,
	}
}

// Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFilesetSpec) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

type GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1GcsFilesetSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1GcsFilesetSpec] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1GcsFilesetSpec]{
		OutputState: o.OutputState,
	}
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) Elem() GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1GcsFilesetSpec) GoogleCloudDatacatalogV1beta1GcsFilesetSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1beta1GcsFilesetSpec
		return ret
	}).(GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput)
}

// Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1GcsFilesetSpec) []string {
		if v == nil {
			return nil
		}
		return v.FilePatterns
	}).(pulumi.StringArrayOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponse struct {
	// Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
	FilePatterns []string `pulumi:"filePatterns"`
	// Sample files contained in this fileset, not all files contained in this fileset are represented here.
	SampleGcsFileSpecs []GoogleCloudDatacatalogV1beta1GcsFileSpecResponse `pulumi:"sampleGcsFileSpecs"`
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponse]{
		OutputState: o.OutputState,
	}
}

// Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponse) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

// Sample files contained in this fileset, not all files contained in this fileset are represented here.
func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput) SampleGcsFileSpecs() GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponse) []GoogleCloudDatacatalogV1beta1GcsFileSpecResponse {
		return v.SampleGcsFileSpecs
	}).(GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput)
}

// Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).
type GoogleCloudDatacatalogV1beta1Schema struct {
	// Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
	Columns []GoogleCloudDatacatalogV1beta1ColumnSchema `pulumi:"columns"`
}

// GoogleCloudDatacatalogV1beta1SchemaInput is an input type that accepts GoogleCloudDatacatalogV1beta1SchemaArgs and GoogleCloudDatacatalogV1beta1SchemaOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1SchemaInput` via:
//
//	GoogleCloudDatacatalogV1beta1SchemaArgs{...}
type GoogleCloudDatacatalogV1beta1SchemaInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1SchemaOutput() GoogleCloudDatacatalogV1beta1SchemaOutput
	ToGoogleCloudDatacatalogV1beta1SchemaOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1SchemaOutput
}

// Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).
type GoogleCloudDatacatalogV1beta1SchemaArgs struct {
	// Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
	Columns GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput `pulumi:"columns"`
}

func (GoogleCloudDatacatalogV1beta1SchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1Schema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1SchemaArgs) ToGoogleCloudDatacatalogV1beta1SchemaOutput() GoogleCloudDatacatalogV1beta1SchemaOutput {
	return i.ToGoogleCloudDatacatalogV1beta1SchemaOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1SchemaArgs) ToGoogleCloudDatacatalogV1beta1SchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1SchemaOutput)
}

func (i GoogleCloudDatacatalogV1beta1SchemaArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1Schema] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1Schema]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1SchemaOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleCloudDatacatalogV1beta1SchemaArgs) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutput() GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1SchemaArgs) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1SchemaOutput).ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1SchemaPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1SchemaArgs, GoogleCloudDatacatalogV1beta1SchemaPtr and GoogleCloudDatacatalogV1beta1SchemaPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1SchemaPtrInput` via:
//
//	        GoogleCloudDatacatalogV1beta1SchemaArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudDatacatalogV1beta1SchemaPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1SchemaPtrOutput() GoogleCloudDatacatalogV1beta1SchemaPtrOutput
	ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1SchemaPtrOutput
}

type googleCloudDatacatalogV1beta1SchemaPtrType GoogleCloudDatacatalogV1beta1SchemaArgs

func GoogleCloudDatacatalogV1beta1SchemaPtr(v *GoogleCloudDatacatalogV1beta1SchemaArgs) GoogleCloudDatacatalogV1beta1SchemaPtrInput {
	return (*googleCloudDatacatalogV1beta1SchemaPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1SchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1Schema)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1SchemaPtrType) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutput() GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1SchemaPtrType) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1SchemaPtrOutput)
}

func (i *googleCloudDatacatalogV1beta1SchemaPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1Schema] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1Schema]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).
type GoogleCloudDatacatalogV1beta1SchemaOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1SchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1Schema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1SchemaOutput) ToGoogleCloudDatacatalogV1beta1SchemaOutput() GoogleCloudDatacatalogV1beta1SchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SchemaOutput) ToGoogleCloudDatacatalogV1beta1SchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SchemaOutput) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutput() GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1SchemaOutput) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1beta1Schema) *GoogleCloudDatacatalogV1beta1Schema {
		return &v
	}).(GoogleCloudDatacatalogV1beta1SchemaPtrOutput)
}

func (o GoogleCloudDatacatalogV1beta1SchemaOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1Schema] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1Schema]{
		OutputState: o.OutputState,
	}
}

// Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
func (o GoogleCloudDatacatalogV1beta1SchemaOutput) Columns() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1Schema) []GoogleCloudDatacatalogV1beta1ColumnSchema {
		return v.Columns
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput)
}

type GoogleCloudDatacatalogV1beta1SchemaPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1SchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1Schema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1SchemaPtrOutput) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutput() GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SchemaPtrOutput) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SchemaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1Schema] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1Schema]{
		OutputState: o.OutputState,
	}
}

func (o GoogleCloudDatacatalogV1beta1SchemaPtrOutput) Elem() GoogleCloudDatacatalogV1beta1SchemaOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1Schema) GoogleCloudDatacatalogV1beta1Schema {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1beta1Schema
		return ret
	}).(GoogleCloudDatacatalogV1beta1SchemaOutput)
}

// Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
func (o GoogleCloudDatacatalogV1beta1SchemaPtrOutput) Columns() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1Schema) []GoogleCloudDatacatalogV1beta1ColumnSchema {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput)
}

// Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).
type GoogleCloudDatacatalogV1beta1SchemaResponse struct {
	// Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
	Columns []GoogleCloudDatacatalogV1beta1ColumnSchemaResponse `pulumi:"columns"`
}

// Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).
type GoogleCloudDatacatalogV1beta1SchemaResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1SchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1SchemaResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1SchemaResponseOutput) ToGoogleCloudDatacatalogV1beta1SchemaResponseOutput() GoogleCloudDatacatalogV1beta1SchemaResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SchemaResponseOutput) ToGoogleCloudDatacatalogV1beta1SchemaResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SchemaResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1SchemaResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1SchemaResponse]{
		OutputState: o.OutputState,
	}
}

// Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
func (o GoogleCloudDatacatalogV1beta1SchemaResponseOutput) Columns() GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1SchemaResponse) []GoogleCloudDatacatalogV1beta1ColumnSchemaResponse {
		return v.Columns
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput)
}

// Timestamps about this resource according to a particular system.
type GoogleCloudDatacatalogV1beta1SystemTimestampsResponse struct {
	// The creation time of the resource within the given system.
	CreateTime string `pulumi:"createTime"`
	// The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources.
	ExpireTime string `pulumi:"expireTime"`
	// The last-modified time of the resource within the given system.
	UpdateTime string `pulumi:"updateTime"`
}

// Timestamps about this resource according to a particular system.
type GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1SystemTimestampsResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput) ToGoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput() GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput) ToGoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1SystemTimestampsResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1SystemTimestampsResponse]{
		OutputState: o.OutputState,
	}
}

// The creation time of the resource within the given system.
func (o GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1SystemTimestampsResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources.
func (o GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1SystemTimestampsResponse) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// The last-modified time of the resource within the given system.
func (o GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1SystemTimestampsResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Normal BigQuery table spec.
type GoogleCloudDatacatalogV1beta1TableSpec struct {
}

// GoogleCloudDatacatalogV1beta1TableSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1TableSpecArgs and GoogleCloudDatacatalogV1beta1TableSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1TableSpecInput` via:
//
//	GoogleCloudDatacatalogV1beta1TableSpecArgs{...}
type GoogleCloudDatacatalogV1beta1TableSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1TableSpecOutput() GoogleCloudDatacatalogV1beta1TableSpecOutput
	ToGoogleCloudDatacatalogV1beta1TableSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1TableSpecOutput
}

// Normal BigQuery table spec.
type GoogleCloudDatacatalogV1beta1TableSpecArgs struct {
}

func (GoogleCloudDatacatalogV1beta1TableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1TableSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1TableSpecArgs) ToGoogleCloudDatacatalogV1beta1TableSpecOutput() GoogleCloudDatacatalogV1beta1TableSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1TableSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1TableSpecArgs) ToGoogleCloudDatacatalogV1beta1TableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1TableSpecOutput)
}

func (i GoogleCloudDatacatalogV1beta1TableSpecArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1TableSpec] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1TableSpec]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1TableSpecOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleCloudDatacatalogV1beta1TableSpecArgs) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutput() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1TableSpecArgs) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1TableSpecOutput).ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1TableSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1TableSpecArgs, GoogleCloudDatacatalogV1beta1TableSpecPtr and GoogleCloudDatacatalogV1beta1TableSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1TableSpecPtrInput` via:
//
//	        GoogleCloudDatacatalogV1beta1TableSpecArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudDatacatalogV1beta1TableSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutput() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput
	ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1TableSpecPtrOutput
}

type googleCloudDatacatalogV1beta1TableSpecPtrType GoogleCloudDatacatalogV1beta1TableSpecArgs

func GoogleCloudDatacatalogV1beta1TableSpecPtr(v *GoogleCloudDatacatalogV1beta1TableSpecArgs) GoogleCloudDatacatalogV1beta1TableSpecPtrInput {
	return (*googleCloudDatacatalogV1beta1TableSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1TableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1TableSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1TableSpecPtrType) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutput() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1TableSpecPtrType) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1TableSpecPtrOutput)
}

func (i *googleCloudDatacatalogV1beta1TableSpecPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1TableSpec] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1TableSpec]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx).OutputState,
	}
}

// Normal BigQuery table spec.
type GoogleCloudDatacatalogV1beta1TableSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1TableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1TableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1TableSpecOutput) ToGoogleCloudDatacatalogV1beta1TableSpecOutput() GoogleCloudDatacatalogV1beta1TableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TableSpecOutput) ToGoogleCloudDatacatalogV1beta1TableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TableSpecOutput) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutput() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1TableSpecOutput) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1beta1TableSpec) *GoogleCloudDatacatalogV1beta1TableSpec {
		return &v
	}).(GoogleCloudDatacatalogV1beta1TableSpecPtrOutput)
}

func (o GoogleCloudDatacatalogV1beta1TableSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1TableSpec] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1TableSpec]{
		OutputState: o.OutputState,
	}
}

type GoogleCloudDatacatalogV1beta1TableSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1TableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1TableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1TableSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutput() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TableSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TableSpecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1TableSpec] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1TableSpec]{
		OutputState: o.OutputState,
	}
}

func (o GoogleCloudDatacatalogV1beta1TableSpecPtrOutput) Elem() GoogleCloudDatacatalogV1beta1TableSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1TableSpec) GoogleCloudDatacatalogV1beta1TableSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1beta1TableSpec
		return ret
	}).(GoogleCloudDatacatalogV1beta1TableSpecOutput)
}

// Normal BigQuery table spec.
type GoogleCloudDatacatalogV1beta1TableSpecResponse struct {
	// If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty.
	GroupedEntry string `pulumi:"groupedEntry"`
}

// Normal BigQuery table spec.
type GoogleCloudDatacatalogV1beta1TableSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1TableSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1TableSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1TableSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1TableSpecResponseOutput() GoogleCloudDatacatalogV1beta1TableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TableSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1TableSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TableSpecResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1TableSpecResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1TableSpecResponse]{
		OutputState: o.OutputState,
	}
}

// If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty.
func (o GoogleCloudDatacatalogV1beta1TableSpecResponseOutput) GroupedEntry() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1TableSpecResponse) string { return v.GroupedEntry }).(pulumi.StringOutput)
}

// The source system of the Taxonomy.
type GoogleCloudDatacatalogV1beta1TaxonomyServiceResponse struct {
	// The service agent for the service.
	Identity string `pulumi:"identity"`
	// The Google Cloud service name.
	Name string `pulumi:"name"`
}

// The source system of the Taxonomy.
type GoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1TaxonomyServiceResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput) ToGoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput() GoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput) ToGoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1TaxonomyServiceResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1TaxonomyServiceResponse]{
		OutputState: o.OutputState,
	}
}

// The service agent for the service.
func (o GoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1TaxonomyServiceResponse) string { return v.Identity }).(pulumi.StringOutput)
}

// The Google Cloud service name.
func (o GoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1TaxonomyServiceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The set of all usage signals that we store in Data Catalog.
type GoogleCloudDatacatalogV1beta1UsageSignalResponse struct {
	// The timestamp of the end of the usage statistics duration.
	UpdateTime string `pulumi:"updateTime"`
	// Usage statistics over each of the pre-defined time ranges, supported strings for time ranges are {"24H", "7D", "30D"}.
	UsageWithinTimeRange map[string]string `pulumi:"usageWithinTimeRange"`
}

// The set of all usage signals that we store in Data Catalog.
type GoogleCloudDatacatalogV1beta1UsageSignalResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1UsageSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1UsageSignalResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1UsageSignalResponseOutput) ToGoogleCloudDatacatalogV1beta1UsageSignalResponseOutput() GoogleCloudDatacatalogV1beta1UsageSignalResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1UsageSignalResponseOutput) ToGoogleCloudDatacatalogV1beta1UsageSignalResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1UsageSignalResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1UsageSignalResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1UsageSignalResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1UsageSignalResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of the end of the usage statistics duration.
func (o GoogleCloudDatacatalogV1beta1UsageSignalResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1UsageSignalResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Usage statistics over each of the pre-defined time ranges, supported strings for time ranges are {"24H", "7D", "30D"}.
func (o GoogleCloudDatacatalogV1beta1UsageSignalResponseOutput) UsageWithinTimeRange() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1UsageSignalResponse) map[string]string {
		return v.UsageWithinTimeRange
	}).(pulumi.StringMapOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1beta1ViewSpec struct {
}

// GoogleCloudDatacatalogV1beta1ViewSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1ViewSpecArgs and GoogleCloudDatacatalogV1beta1ViewSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1ViewSpecInput` via:
//
//	GoogleCloudDatacatalogV1beta1ViewSpecArgs{...}
type GoogleCloudDatacatalogV1beta1ViewSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1ViewSpecOutput() GoogleCloudDatacatalogV1beta1ViewSpecOutput
	ToGoogleCloudDatacatalogV1beta1ViewSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1ViewSpecOutput
}

// Table view specification.
type GoogleCloudDatacatalogV1beta1ViewSpecArgs struct {
}

func (GoogleCloudDatacatalogV1beta1ViewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ViewSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1ViewSpecArgs) ToGoogleCloudDatacatalogV1beta1ViewSpecOutput() GoogleCloudDatacatalogV1beta1ViewSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1ViewSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1ViewSpecArgs) ToGoogleCloudDatacatalogV1beta1ViewSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1ViewSpecOutput)
}

func (i GoogleCloudDatacatalogV1beta1ViewSpecArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1ViewSpec] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1ViewSpec]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1ViewSpecOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleCloudDatacatalogV1beta1ViewSpecArgs) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutput() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1ViewSpecArgs) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1ViewSpecOutput).ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1ViewSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1ViewSpecArgs, GoogleCloudDatacatalogV1beta1ViewSpecPtr and GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1ViewSpecPtrInput` via:
//
//	        GoogleCloudDatacatalogV1beta1ViewSpecArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudDatacatalogV1beta1ViewSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutput() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput
	ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput
}

type googleCloudDatacatalogV1beta1ViewSpecPtrType GoogleCloudDatacatalogV1beta1ViewSpecArgs

func GoogleCloudDatacatalogV1beta1ViewSpecPtr(v *GoogleCloudDatacatalogV1beta1ViewSpecArgs) GoogleCloudDatacatalogV1beta1ViewSpecPtrInput {
	return (*googleCloudDatacatalogV1beta1ViewSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1ViewSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1ViewSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1ViewSpecPtrType) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutput() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1ViewSpecPtrType) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput)
}

func (i *googleCloudDatacatalogV1beta1ViewSpecPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1ViewSpec] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1ViewSpec]{
		OutputState: i.ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx).OutputState,
	}
}

// Table view specification.
type GoogleCloudDatacatalogV1beta1ViewSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ViewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ViewSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecOutput() GoogleCloudDatacatalogV1beta1ViewSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutput() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudDatacatalogV1beta1ViewSpec) *GoogleCloudDatacatalogV1beta1ViewSpec {
		return &v
	}).(GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput)
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1ViewSpec] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1ViewSpec]{
		OutputState: o.OutputState,
	}
}

type GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1ViewSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutput() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleCloudDatacatalogV1beta1ViewSpec] {
	return pulumix.Output[*GoogleCloudDatacatalogV1beta1ViewSpec]{
		OutputState: o.OutputState,
	}
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput) Elem() GoogleCloudDatacatalogV1beta1ViewSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1ViewSpec) GoogleCloudDatacatalogV1beta1ViewSpec {
		if v != nil {
			return *v
		}
		var ret GoogleCloudDatacatalogV1beta1ViewSpec
		return ret
	}).(GoogleCloudDatacatalogV1beta1ViewSpecOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1beta1ViewSpecResponse struct {
	// The query that defines the table view.
	ViewQuery string `pulumi:"viewQuery"`
}

// Table view specification.
type GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ViewSpecResponse)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecResponseOutput() GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecResponseOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleCloudDatacatalogV1beta1ViewSpecResponse] {
	return pulumix.Output[GoogleCloudDatacatalogV1beta1ViewSpecResponse]{
		OutputState: o.OutputState,
	}
}

// The query that defines the table view.
func (o GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput) ViewQuery() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ViewSpecResponse) string { return v.ViewQuery }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryTableSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ColumnSchemaInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1ColumnSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1ColumnSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1GcsFilesetSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1SchemaInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1SchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1SchemaPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1SchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1TableSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1TableSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1TableSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1TableSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ViewSpecInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1ViewSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ViewSpecPtrInput)(nil)).Elem(), GoogleCloudDatacatalogV1beta1ViewSpecArgs{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ColumnSchemaOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ColumnSchemaResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ColumnSchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1GcsFileSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1GcsFileSpecResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1SchemaOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1SchemaPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1SchemaResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1SystemTimestampsResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1TableSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1TableSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1TableSpecResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1TaxonomyServiceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1UsageSignalResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ViewSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ViewSpecResponseOutput{})
}
