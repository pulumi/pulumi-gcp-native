// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Spec for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec struct {
	// Output only. The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`.
	Dataset *string `pulumi:"dataset"`
	// Output only. Total number of shards.
	ShardCount *string `pulumi:"shardCount"`
	// Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`.
	TablePrefix *string `pulumi:"tablePrefix"`
}

// GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs and GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecInput` via:
//
//          GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs{...}
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput
	ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput
}

// Spec for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs struct {
	// Output only. The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`.
	Dataset pulumi.StringPtrInput `pulumi:"dataset"`
	// Output only. Total number of shards.
	ShardCount pulumi.StringPtrInput `pulumi:"shardCount"`
	// Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`.
	TablePrefix pulumi.StringPtrInput `pulumi:"tablePrefix"`
}

func (GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput)
}

func (i GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput).ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs, GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtr and GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput
	ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput
}

type googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs

func GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtr(v *GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecArgs) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrInput {
	return (*googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrType) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput)
}

// Spec for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding
type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec) *GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec {
		return &v
	}).(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput)
}

// Output only. The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`.
func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec) *string { return v.Dataset }).(pulumi.StringPtrOutput)
}

// Output only. Total number of shards.
func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) ShardCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec) *string { return v.ShardCount }).(pulumi.StringPtrOutput)
}

// Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`.
func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput) TablePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec) *string { return v.TablePrefix }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) Elem() GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec) GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec {
		return *v
	}).(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput)
}

// Output only. The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`.
func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec) *string {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(pulumi.StringPtrOutput)
}

// Output only. Total number of shards.
func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) ShardCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec) *string {
		if v == nil {
			return nil
		}
		return v.ShardCount
	}).(pulumi.StringPtrOutput)
}

// Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`.
func (o GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput) TablePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec) *string {
		if v == nil {
			return nil
		}
		return v.TablePrefix
	}).(pulumi.StringPtrOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1beta1BigQueryTableSpec struct {
	// Output only. The table source type.
	TableSourceType *string `pulumi:"tableSourceType"`
	// Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec *GoogleCloudDatacatalogV1beta1TableSpec `pulumi:"tableSpec"`
	// Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec *GoogleCloudDatacatalogV1beta1ViewSpec `pulumi:"viewSpec"`
}

// GoogleCloudDatacatalogV1beta1BigQueryTableSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs and GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1BigQueryTableSpecInput` via:
//
//          GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs{...}
type GoogleCloudDatacatalogV1beta1BigQueryTableSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput
	ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs struct {
	// Output only. The table source type.
	TableSourceType pulumi.StringPtrInput `pulumi:"tableSourceType"`
	// Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
	TableSpec GoogleCloudDatacatalogV1beta1TableSpecPtrInput `pulumi:"tableSpec"`
	// Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
	ViewSpec GoogleCloudDatacatalogV1beta1ViewSpecPtrInput `pulumi:"viewSpec"`
}

func (GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryTableSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput)
}

func (i GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput).ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs, GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtr and GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput
	ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput
}

type googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs

func GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtr(v *GoogleCloudDatacatalogV1beta1BigQueryTableSpecArgs) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrInput {
	return (*googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1BigQueryTableSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1BigQueryTableSpecPtrType) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput)
}

// Describes a BigQuery table.
type GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1BigQueryTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *GoogleCloudDatacatalogV1beta1BigQueryTableSpec {
		return &v
	}).(GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput)
}

// Output only. The table source type.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) TableSourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *string { return v.TableSourceType }).(pulumi.StringPtrOutput)
}

// Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) TableSpec() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *GoogleCloudDatacatalogV1beta1TableSpec {
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1beta1TableSpecPtrOutput)
}

// Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput) ViewSpec() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *GoogleCloudDatacatalogV1beta1ViewSpec {
		return v.ViewSpec
	}).(GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput)
}

type GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1BigQueryTableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput() GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) Elem() GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryTableSpec) GoogleCloudDatacatalogV1beta1BigQueryTableSpec {
		return *v
	}).(GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput)
}

// Output only. The table source type.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) TableSourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *string {
		if v == nil {
			return nil
		}
		return v.TableSourceType
	}).(pulumi.StringPtrOutput)
}

// Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) TableSpec() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *GoogleCloudDatacatalogV1beta1TableSpec {
		if v == nil {
			return nil
		}
		return v.TableSpec
	}).(GoogleCloudDatacatalogV1beta1TableSpecPtrOutput)
}

// Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
func (o GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput) ViewSpec() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1BigQueryTableSpec) *GoogleCloudDatacatalogV1beta1ViewSpec {
		if v == nil {
			return nil
		}
		return v.ViewSpec
	}).(GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput)
}

// Representation of a column within a schema. Columns could be nested inside other columns.
type GoogleCloudDatacatalogV1beta1ColumnSchema struct {
	// Required. Name of the column.
	Column *string `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string.
	Description *string `pulumi:"description"`
	// Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
	Mode *string `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns []GoogleCloudDatacatalogV1beta1ColumnSchema `pulumi:"subcolumns"`
	// Required. Type of the column.
	Type *string `pulumi:"type"`
}

// GoogleCloudDatacatalogV1beta1ColumnSchemaInput is an input type that accepts GoogleCloudDatacatalogV1beta1ColumnSchemaArgs and GoogleCloudDatacatalogV1beta1ColumnSchemaOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1ColumnSchemaInput` via:
//
//          GoogleCloudDatacatalogV1beta1ColumnSchemaArgs{...}
type GoogleCloudDatacatalogV1beta1ColumnSchemaInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaOutput
	ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaOutput
}

// Representation of a column within a schema. Columns could be nested inside other columns.
type GoogleCloudDatacatalogV1beta1ColumnSchemaArgs struct {
	// Required. Name of the column.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// Optional. Description of the column. Default value is an empty string.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
	Subcolumns GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput `pulumi:"subcolumns"`
	// Required. Type of the column.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GoogleCloudDatacatalogV1beta1ColumnSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ColumnSchema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1ColumnSchemaArgs) ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaOutput {
	return i.ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1ColumnSchemaArgs) ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1ColumnSchemaOutput)
}

// GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput is an input type that accepts GoogleCloudDatacatalogV1beta1ColumnSchemaArray and GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput` via:
//
//          GoogleCloudDatacatalogV1beta1ColumnSchemaArray{ GoogleCloudDatacatalogV1beta1ColumnSchemaArgs{...} }
type GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput
	ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput
}

type GoogleCloudDatacatalogV1beta1ColumnSchemaArray []GoogleCloudDatacatalogV1beta1ColumnSchemaInput

func (GoogleCloudDatacatalogV1beta1ColumnSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1beta1ColumnSchema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1ColumnSchemaArray) ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return i.ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1ColumnSchemaArray) ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput)
}

// Representation of a column within a schema. Columns could be nested inside other columns.
type GoogleCloudDatacatalogV1beta1ColumnSchemaOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ColumnSchema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaOutput {
	return o
}

// Required. Name of the column.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchema) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// Optional. Description of the column. Default value is an empty string.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchema) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchema) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Optional. Schema of sub-columns. A column can have zero or more sub-columns.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) Subcolumns() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchema) []GoogleCloudDatacatalogV1beta1ColumnSchema {
		return v.Subcolumns
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput)
}

// Required. Type of the column.
func (o GoogleCloudDatacatalogV1beta1ColumnSchemaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ColumnSchema) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1beta1ColumnSchema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput) ToGoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1beta1ColumnSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1beta1ColumnSchema {
		return vs[0].([]GoogleCloudDatacatalogV1beta1ColumnSchema)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaOutput)
}

type GoogleCloudDatacatalogV1beta1FieldType struct {
	// Represents an enum type.
	EnumType *GoogleCloudDatacatalogV1beta1FieldTypeEnumType `pulumi:"enumType"`
	// Represents primitive types - string, bool etc.
	PrimitiveType *string `pulumi:"primitiveType"`
}

// GoogleCloudDatacatalogV1beta1FieldTypeInput is an input type that accepts GoogleCloudDatacatalogV1beta1FieldTypeArgs and GoogleCloudDatacatalogV1beta1FieldTypeOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1FieldTypeInput` via:
//
//          GoogleCloudDatacatalogV1beta1FieldTypeArgs{...}
type GoogleCloudDatacatalogV1beta1FieldTypeInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1FieldTypeOutput() GoogleCloudDatacatalogV1beta1FieldTypeOutput
	ToGoogleCloudDatacatalogV1beta1FieldTypeOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1FieldTypeOutput
}

type GoogleCloudDatacatalogV1beta1FieldTypeArgs struct {
	// Represents an enum type.
	EnumType GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrInput `pulumi:"enumType"`
	// Represents primitive types - string, bool etc.
	PrimitiveType pulumi.StringPtrInput `pulumi:"primitiveType"`
}

func (GoogleCloudDatacatalogV1beta1FieldTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1FieldType)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeArgs) ToGoogleCloudDatacatalogV1beta1FieldTypeOutput() GoogleCloudDatacatalogV1beta1FieldTypeOutput {
	return i.ToGoogleCloudDatacatalogV1beta1FieldTypeOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeArgs) ToGoogleCloudDatacatalogV1beta1FieldTypeOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1FieldTypeOutput)
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeArgs) ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutput() GoogleCloudDatacatalogV1beta1FieldTypePtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeArgs) ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1FieldTypeOutput).ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1FieldTypePtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1FieldTypeArgs, GoogleCloudDatacatalogV1beta1FieldTypePtr and GoogleCloudDatacatalogV1beta1FieldTypePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1FieldTypePtrInput` via:
//
//          GoogleCloudDatacatalogV1beta1FieldTypeArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1beta1FieldTypePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutput() GoogleCloudDatacatalogV1beta1FieldTypePtrOutput
	ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1FieldTypePtrOutput
}

type googleCloudDatacatalogV1beta1FieldTypePtrType GoogleCloudDatacatalogV1beta1FieldTypeArgs

func GoogleCloudDatacatalogV1beta1FieldTypePtr(v *GoogleCloudDatacatalogV1beta1FieldTypeArgs) GoogleCloudDatacatalogV1beta1FieldTypePtrInput {
	return (*googleCloudDatacatalogV1beta1FieldTypePtrType)(v)
}

func (*googleCloudDatacatalogV1beta1FieldTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1FieldType)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1FieldTypePtrType) ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutput() GoogleCloudDatacatalogV1beta1FieldTypePtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1FieldTypePtrType) ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1FieldTypePtrOutput)
}

type GoogleCloudDatacatalogV1beta1FieldTypeOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1FieldTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1FieldType)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeOutput() GoogleCloudDatacatalogV1beta1FieldTypeOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeOutput) ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutput() GoogleCloudDatacatalogV1beta1FieldTypePtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeOutput) ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1FieldType) *GoogleCloudDatacatalogV1beta1FieldType {
		return &v
	}).(GoogleCloudDatacatalogV1beta1FieldTypePtrOutput)
}

// Represents an enum type.
func (o GoogleCloudDatacatalogV1beta1FieldTypeOutput) EnumType() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1FieldType) *GoogleCloudDatacatalogV1beta1FieldTypeEnumType {
		return v.EnumType
	}).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput)
}

// Represents primitive types - string, bool etc.
func (o GoogleCloudDatacatalogV1beta1FieldTypeOutput) PrimitiveType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1FieldType) *string { return v.PrimitiveType }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1beta1FieldTypePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1FieldTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1FieldType)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1FieldTypePtrOutput) ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutput() GoogleCloudDatacatalogV1beta1FieldTypePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypePtrOutput) ToGoogleCloudDatacatalogV1beta1FieldTypePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypePtrOutput) Elem() GoogleCloudDatacatalogV1beta1FieldTypeOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1FieldType) GoogleCloudDatacatalogV1beta1FieldType { return *v }).(GoogleCloudDatacatalogV1beta1FieldTypeOutput)
}

// Represents an enum type.
func (o GoogleCloudDatacatalogV1beta1FieldTypePtrOutput) EnumType() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1FieldType) *GoogleCloudDatacatalogV1beta1FieldTypeEnumType {
		if v == nil {
			return nil
		}
		return v.EnumType
	}).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput)
}

// Represents primitive types - string, bool etc.
func (o GoogleCloudDatacatalogV1beta1FieldTypePtrOutput) PrimitiveType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1FieldType) *string {
		if v == nil {
			return nil
		}
		return v.PrimitiveType
	}).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1beta1FieldTypeEnumType struct {
	AllowedValues []GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue `pulumi:"allowedValues"`
}

// GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeInput is an input type that accepts GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs and GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeInput` via:
//
//          GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs{...}
type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput
	ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput
}

type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs struct {
	AllowedValues GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayInput `pulumi:"allowedValues"`
}

func (GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1FieldTypeEnumType)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput {
	return i.ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput)
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput).ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs, GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtr and GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrInput` via:
//
//          GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput
	ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput
}

type googleCloudDatacatalogV1beta1FieldTypeEnumTypePtrType GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs

func GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtr(v *GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeArgs) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrInput {
	return (*googleCloudDatacatalogV1beta1FieldTypeEnumTypePtrType)(v)
}

func (*googleCloudDatacatalogV1beta1FieldTypeEnumTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1FieldTypeEnumType)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1FieldTypeEnumTypePtrType) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1FieldTypeEnumTypePtrType) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput)
}

type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1FieldTypeEnumType)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1FieldTypeEnumType) *GoogleCloudDatacatalogV1beta1FieldTypeEnumType {
		return &v
	}).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput)
}
func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput) AllowedValues() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1FieldTypeEnumType) []GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue {
		return v.AllowedValues
	}).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput)
}

type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1FieldTypeEnumType)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput) Elem() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1FieldTypeEnumType) GoogleCloudDatacatalogV1beta1FieldTypeEnumType {
		return *v
	}).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput)
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput) AllowedValues() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1FieldTypeEnumType) []GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue {
		if v == nil {
			return nil
		}
		return v.AllowedValues
	}).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput)
}

type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue struct {
	// Required. The display name of the enum value. Must not be an empty string.
	DisplayName *string `pulumi:"displayName"`
}

// GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueInput is an input type that accepts GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArgs and GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueInput` via:
//
//          GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArgs{...}
type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput
	ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput
}

type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArgs struct {
	// Required. The display name of the enum value. Must not be an empty string.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
}

func (GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArgs) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput {
	return i.ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArgs) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput)
}

// GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayInput is an input type that accepts GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArray and GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayInput` via:
//
//          GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArray{ GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArgs{...} }
type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput
	ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput
}

type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArray []GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueInput

func (GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArray) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput {
	return i.ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArray) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput)
}

type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput {
	return o
}

// Required. The display name of the enum value. Must not be an empty string.
func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput() GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput) ToGoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue {
		return vs[0].([]GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput)
}

// Specifications of a single file in Cloud Storage.
type GoogleCloudDatacatalogV1beta1GcsFileSpec struct {
	// Required. The full file path. Example: `gs://bucket_name/a/b.txt`.
	FilePath *string `pulumi:"filePath"`
	// Output only. Timestamps about the Cloud Storage file.
	GcsTimestamps *GoogleCloudDatacatalogV1beta1SystemTimestamps `pulumi:"gcsTimestamps"`
	// Output only. The size of the file, in bytes.
	SizeBytes *string `pulumi:"sizeBytes"`
}

// GoogleCloudDatacatalogV1beta1GcsFileSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1GcsFileSpecArgs and GoogleCloudDatacatalogV1beta1GcsFileSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1GcsFileSpecInput` via:
//
//          GoogleCloudDatacatalogV1beta1GcsFileSpecArgs{...}
type GoogleCloudDatacatalogV1beta1GcsFileSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1GcsFileSpecOutput() GoogleCloudDatacatalogV1beta1GcsFileSpecOutput
	ToGoogleCloudDatacatalogV1beta1GcsFileSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1GcsFileSpecOutput
}

// Specifications of a single file in Cloud Storage.
type GoogleCloudDatacatalogV1beta1GcsFileSpecArgs struct {
	// Required. The full file path. Example: `gs://bucket_name/a/b.txt`.
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// Output only. Timestamps about the Cloud Storage file.
	GcsTimestamps GoogleCloudDatacatalogV1beta1SystemTimestampsPtrInput `pulumi:"gcsTimestamps"`
	// Output only. The size of the file, in bytes.
	SizeBytes pulumi.StringPtrInput `pulumi:"sizeBytes"`
}

func (GoogleCloudDatacatalogV1beta1GcsFileSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1GcsFileSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1GcsFileSpecArgs) ToGoogleCloudDatacatalogV1beta1GcsFileSpecOutput() GoogleCloudDatacatalogV1beta1GcsFileSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1GcsFileSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1GcsFileSpecArgs) ToGoogleCloudDatacatalogV1beta1GcsFileSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFileSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1GcsFileSpecOutput)
}

// GoogleCloudDatacatalogV1beta1GcsFileSpecArrayInput is an input type that accepts GoogleCloudDatacatalogV1beta1GcsFileSpecArray and GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1GcsFileSpecArrayInput` via:
//
//          GoogleCloudDatacatalogV1beta1GcsFileSpecArray{ GoogleCloudDatacatalogV1beta1GcsFileSpecArgs{...} }
type GoogleCloudDatacatalogV1beta1GcsFileSpecArrayInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput() GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput
	ToGoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput
}

type GoogleCloudDatacatalogV1beta1GcsFileSpecArray []GoogleCloudDatacatalogV1beta1GcsFileSpecInput

func (GoogleCloudDatacatalogV1beta1GcsFileSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1beta1GcsFileSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1GcsFileSpecArray) ToGoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput() GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput {
	return i.ToGoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1GcsFileSpecArray) ToGoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput)
}

// Specifications of a single file in Cloud Storage.
type GoogleCloudDatacatalogV1beta1GcsFileSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1GcsFileSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1GcsFileSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecOutput) ToGoogleCloudDatacatalogV1beta1GcsFileSpecOutput() GoogleCloudDatacatalogV1beta1GcsFileSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecOutput) ToGoogleCloudDatacatalogV1beta1GcsFileSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFileSpecOutput {
	return o
}

// Required. The full file path. Example: `gs://bucket_name/a/b.txt`.
func (o GoogleCloudDatacatalogV1beta1GcsFileSpecOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFileSpec) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Output only. Timestamps about the Cloud Storage file.
func (o GoogleCloudDatacatalogV1beta1GcsFileSpecOutput) GcsTimestamps() GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFileSpec) *GoogleCloudDatacatalogV1beta1SystemTimestamps {
		return v.GcsTimestamps
	}).(GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput)
}

// Output only. The size of the file, in bytes.
func (o GoogleCloudDatacatalogV1beta1GcsFileSpecOutput) SizeBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFileSpec) *string { return v.SizeBytes }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudDatacatalogV1beta1GcsFileSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput) ToGoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput() GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput) ToGoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput) Index(i pulumi.IntInput) GoogleCloudDatacatalogV1beta1GcsFileSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudDatacatalogV1beta1GcsFileSpec {
		return vs[0].([]GoogleCloudDatacatalogV1beta1GcsFileSpec)[vs[1].(int)]
	}).(GoogleCloudDatacatalogV1beta1GcsFileSpecOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1beta1GcsFilesetSpec struct {
	// Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
	FilePatterns []string `pulumi:"filePatterns"`
	// Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.
	SampleGcsFileSpecs []GoogleCloudDatacatalogV1beta1GcsFileSpec `pulumi:"sampleGcsFileSpecs"`
}

// GoogleCloudDatacatalogV1beta1GcsFilesetSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs and GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1GcsFilesetSpecInput` via:
//
//          GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs{...}
type GoogleCloudDatacatalogV1beta1GcsFilesetSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput
	ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs struct {
	// Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
	FilePatterns pulumi.StringArrayInput `pulumi:"filePatterns"`
	// Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.
	SampleGcsFileSpecs GoogleCloudDatacatalogV1beta1GcsFileSpecArrayInput `pulumi:"sampleGcsFileSpecs"`
}

func (GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1GcsFilesetSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput)
}

func (i GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput).ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs, GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtr and GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput
	ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput
}

type googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs

func GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtr(v *GoogleCloudDatacatalogV1beta1GcsFilesetSpecArgs) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrInput {
	return (*googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1GcsFilesetSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1GcsFilesetSpecPtrType) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput)
}

// Describes a Cloud Storage fileset entry.
type GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1GcsFilesetSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFilesetSpec) *GoogleCloudDatacatalogV1beta1GcsFilesetSpec {
		return &v
	}).(GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput)
}

// Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFilesetSpec) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

// Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.
func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput) SampleGcsFileSpecs() GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1GcsFilesetSpec) []GoogleCloudDatacatalogV1beta1GcsFileSpec {
		return v.SampleGcsFileSpecs
	}).(GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput)
}

type GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1GcsFilesetSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput() GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) Elem() GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1GcsFilesetSpec) GoogleCloudDatacatalogV1beta1GcsFilesetSpec {
		return *v
	}).(GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput)
}

// Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1GcsFilesetSpec) []string {
		if v == nil {
			return nil
		}
		return v.FilePatterns
	}).(pulumi.StringArrayOutput)
}

// Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.
func (o GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput) SampleGcsFileSpecs() GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1GcsFilesetSpec) []GoogleCloudDatacatalogV1beta1GcsFileSpec {
		if v == nil {
			return nil
		}
		return v.SampleGcsFileSpecs
	}).(GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput)
}

// Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).
type GoogleCloudDatacatalogV1beta1Schema struct {
	// Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
	Columns []GoogleCloudDatacatalogV1beta1ColumnSchema `pulumi:"columns"`
}

// GoogleCloudDatacatalogV1beta1SchemaInput is an input type that accepts GoogleCloudDatacatalogV1beta1SchemaArgs and GoogleCloudDatacatalogV1beta1SchemaOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1SchemaInput` via:
//
//          GoogleCloudDatacatalogV1beta1SchemaArgs{...}
type GoogleCloudDatacatalogV1beta1SchemaInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1SchemaOutput() GoogleCloudDatacatalogV1beta1SchemaOutput
	ToGoogleCloudDatacatalogV1beta1SchemaOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1SchemaOutput
}

// Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).
type GoogleCloudDatacatalogV1beta1SchemaArgs struct {
	// Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
	Columns GoogleCloudDatacatalogV1beta1ColumnSchemaArrayInput `pulumi:"columns"`
}

func (GoogleCloudDatacatalogV1beta1SchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1Schema)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1SchemaArgs) ToGoogleCloudDatacatalogV1beta1SchemaOutput() GoogleCloudDatacatalogV1beta1SchemaOutput {
	return i.ToGoogleCloudDatacatalogV1beta1SchemaOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1SchemaArgs) ToGoogleCloudDatacatalogV1beta1SchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1SchemaOutput)
}

func (i GoogleCloudDatacatalogV1beta1SchemaArgs) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutput() GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1SchemaArgs) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1SchemaOutput).ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1SchemaPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1SchemaArgs, GoogleCloudDatacatalogV1beta1SchemaPtr and GoogleCloudDatacatalogV1beta1SchemaPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1SchemaPtrInput` via:
//
//          GoogleCloudDatacatalogV1beta1SchemaArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1beta1SchemaPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1SchemaPtrOutput() GoogleCloudDatacatalogV1beta1SchemaPtrOutput
	ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1SchemaPtrOutput
}

type googleCloudDatacatalogV1beta1SchemaPtrType GoogleCloudDatacatalogV1beta1SchemaArgs

func GoogleCloudDatacatalogV1beta1SchemaPtr(v *GoogleCloudDatacatalogV1beta1SchemaArgs) GoogleCloudDatacatalogV1beta1SchemaPtrInput {
	return (*googleCloudDatacatalogV1beta1SchemaPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1SchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1Schema)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1SchemaPtrType) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutput() GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1SchemaPtrType) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1SchemaPtrOutput)
}

// Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).
type GoogleCloudDatacatalogV1beta1SchemaOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1SchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1Schema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1SchemaOutput) ToGoogleCloudDatacatalogV1beta1SchemaOutput() GoogleCloudDatacatalogV1beta1SchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SchemaOutput) ToGoogleCloudDatacatalogV1beta1SchemaOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SchemaOutput) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutput() GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1SchemaOutput) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1Schema) *GoogleCloudDatacatalogV1beta1Schema {
		return &v
	}).(GoogleCloudDatacatalogV1beta1SchemaPtrOutput)
}

// Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
func (o GoogleCloudDatacatalogV1beta1SchemaOutput) Columns() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1Schema) []GoogleCloudDatacatalogV1beta1ColumnSchema {
		return v.Columns
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput)
}

type GoogleCloudDatacatalogV1beta1SchemaPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1SchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1Schema)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1SchemaPtrOutput) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutput() GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SchemaPtrOutput) ToGoogleCloudDatacatalogV1beta1SchemaPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SchemaPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SchemaPtrOutput) Elem() GoogleCloudDatacatalogV1beta1SchemaOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1Schema) GoogleCloudDatacatalogV1beta1Schema { return *v }).(GoogleCloudDatacatalogV1beta1SchemaOutput)
}

// Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
func (o GoogleCloudDatacatalogV1beta1SchemaPtrOutput) Columns() GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1Schema) []GoogleCloudDatacatalogV1beta1ColumnSchema {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput)
}

// Timestamps about this resource according to a particular system.
type GoogleCloudDatacatalogV1beta1SystemTimestamps struct {
	// The creation time of the resource within the given system.
	CreateTime *string `pulumi:"createTime"`
	// Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources.
	ExpireTime *string `pulumi:"expireTime"`
	// The last-modified time of the resource within the given system.
	UpdateTime *string `pulumi:"updateTime"`
}

// GoogleCloudDatacatalogV1beta1SystemTimestampsInput is an input type that accepts GoogleCloudDatacatalogV1beta1SystemTimestampsArgs and GoogleCloudDatacatalogV1beta1SystemTimestampsOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1SystemTimestampsInput` via:
//
//          GoogleCloudDatacatalogV1beta1SystemTimestampsArgs{...}
type GoogleCloudDatacatalogV1beta1SystemTimestampsInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1SystemTimestampsOutput() GoogleCloudDatacatalogV1beta1SystemTimestampsOutput
	ToGoogleCloudDatacatalogV1beta1SystemTimestampsOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1SystemTimestampsOutput
}

// Timestamps about this resource according to a particular system.
type GoogleCloudDatacatalogV1beta1SystemTimestampsArgs struct {
	// The creation time of the resource within the given system.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources.
	ExpireTime pulumi.StringPtrInput `pulumi:"expireTime"`
	// The last-modified time of the resource within the given system.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
}

func (GoogleCloudDatacatalogV1beta1SystemTimestampsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1SystemTimestamps)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1beta1SystemTimestampsOutput() GoogleCloudDatacatalogV1beta1SystemTimestampsOutput {
	return i.ToGoogleCloudDatacatalogV1beta1SystemTimestampsOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1beta1SystemTimestampsOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SystemTimestampsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1SystemTimestampsOutput)
}

func (i GoogleCloudDatacatalogV1beta1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1SystemTimestampsArgs) ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1SystemTimestampsOutput).ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1SystemTimestampsPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1SystemTimestampsArgs, GoogleCloudDatacatalogV1beta1SystemTimestampsPtr and GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1SystemTimestampsPtrInput` via:
//
//          GoogleCloudDatacatalogV1beta1SystemTimestampsArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1beta1SystemTimestampsPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput
	ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput
}

type googleCloudDatacatalogV1beta1SystemTimestampsPtrType GoogleCloudDatacatalogV1beta1SystemTimestampsArgs

func GoogleCloudDatacatalogV1beta1SystemTimestampsPtr(v *GoogleCloudDatacatalogV1beta1SystemTimestampsArgs) GoogleCloudDatacatalogV1beta1SystemTimestampsPtrInput {
	return (*googleCloudDatacatalogV1beta1SystemTimestampsPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1SystemTimestampsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1SystemTimestamps)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1SystemTimestampsPtrType) ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1SystemTimestampsPtrType) ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput)
}

// Timestamps about this resource according to a particular system.
type GoogleCloudDatacatalogV1beta1SystemTimestampsOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1SystemTimestampsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1SystemTimestamps)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1beta1SystemTimestampsOutput() GoogleCloudDatacatalogV1beta1SystemTimestampsOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1beta1SystemTimestampsOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SystemTimestampsOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1SystemTimestampsOutput) ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1SystemTimestamps) *GoogleCloudDatacatalogV1beta1SystemTimestamps {
		return &v
	}).(GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput)
}

// The creation time of the resource within the given system.
func (o GoogleCloudDatacatalogV1beta1SystemTimestampsOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1SystemTimestamps) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources.
func (o GoogleCloudDatacatalogV1beta1SystemTimestampsOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1SystemTimestamps) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

// The last-modified time of the resource within the given system.
func (o GoogleCloudDatacatalogV1beta1SystemTimestampsOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1SystemTimestamps) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1SystemTimestamps)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput) ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput() GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput) ToGoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput) Elem() GoogleCloudDatacatalogV1beta1SystemTimestampsOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1SystemTimestamps) GoogleCloudDatacatalogV1beta1SystemTimestamps {
		return *v
	}).(GoogleCloudDatacatalogV1beta1SystemTimestampsOutput)
}

// The creation time of the resource within the given system.
func (o GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1SystemTimestamps) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources.
func (o GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1SystemTimestamps) *string {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.StringPtrOutput)
}

// The last-modified time of the resource within the given system.
func (o GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1SystemTimestamps) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

// Normal BigQuery table spec.
type GoogleCloudDatacatalogV1beta1TableSpec struct {
	// Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty.
	GroupedEntry *string `pulumi:"groupedEntry"`
}

// GoogleCloudDatacatalogV1beta1TableSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1TableSpecArgs and GoogleCloudDatacatalogV1beta1TableSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1TableSpecInput` via:
//
//          GoogleCloudDatacatalogV1beta1TableSpecArgs{...}
type GoogleCloudDatacatalogV1beta1TableSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1TableSpecOutput() GoogleCloudDatacatalogV1beta1TableSpecOutput
	ToGoogleCloudDatacatalogV1beta1TableSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1TableSpecOutput
}

// Normal BigQuery table spec.
type GoogleCloudDatacatalogV1beta1TableSpecArgs struct {
	// Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty.
	GroupedEntry pulumi.StringPtrInput `pulumi:"groupedEntry"`
}

func (GoogleCloudDatacatalogV1beta1TableSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1TableSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1TableSpecArgs) ToGoogleCloudDatacatalogV1beta1TableSpecOutput() GoogleCloudDatacatalogV1beta1TableSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1TableSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1TableSpecArgs) ToGoogleCloudDatacatalogV1beta1TableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1TableSpecOutput)
}

func (i GoogleCloudDatacatalogV1beta1TableSpecArgs) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutput() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1TableSpecArgs) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1TableSpecOutput).ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1TableSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1TableSpecArgs, GoogleCloudDatacatalogV1beta1TableSpecPtr and GoogleCloudDatacatalogV1beta1TableSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1TableSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1beta1TableSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1beta1TableSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutput() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput
	ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1TableSpecPtrOutput
}

type googleCloudDatacatalogV1beta1TableSpecPtrType GoogleCloudDatacatalogV1beta1TableSpecArgs

func GoogleCloudDatacatalogV1beta1TableSpecPtr(v *GoogleCloudDatacatalogV1beta1TableSpecArgs) GoogleCloudDatacatalogV1beta1TableSpecPtrInput {
	return (*googleCloudDatacatalogV1beta1TableSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1TableSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1TableSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1TableSpecPtrType) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutput() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1TableSpecPtrType) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1TableSpecPtrOutput)
}

// Normal BigQuery table spec.
type GoogleCloudDatacatalogV1beta1TableSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1TableSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1TableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1TableSpecOutput) ToGoogleCloudDatacatalogV1beta1TableSpecOutput() GoogleCloudDatacatalogV1beta1TableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TableSpecOutput) ToGoogleCloudDatacatalogV1beta1TableSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TableSpecOutput) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutput() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1TableSpecOutput) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1TableSpec) *GoogleCloudDatacatalogV1beta1TableSpec {
		return &v
	}).(GoogleCloudDatacatalogV1beta1TableSpecPtrOutput)
}

// Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty.
func (o GoogleCloudDatacatalogV1beta1TableSpecOutput) GroupedEntry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1TableSpec) *string { return v.GroupedEntry }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1beta1TableSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1TableSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1TableSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1TableSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutput() GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TableSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1TableSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1TableSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1TableSpecPtrOutput) Elem() GoogleCloudDatacatalogV1beta1TableSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1TableSpec) GoogleCloudDatacatalogV1beta1TableSpec { return *v }).(GoogleCloudDatacatalogV1beta1TableSpecOutput)
}

// Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty.
func (o GoogleCloudDatacatalogV1beta1TableSpecPtrOutput) GroupedEntry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1TableSpec) *string {
		if v == nil {
			return nil
		}
		return v.GroupedEntry
	}).(pulumi.StringPtrOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1beta1ViewSpec struct {
	// Output only. The query that defines the table view.
	ViewQuery *string `pulumi:"viewQuery"`
}

// GoogleCloudDatacatalogV1beta1ViewSpecInput is an input type that accepts GoogleCloudDatacatalogV1beta1ViewSpecArgs and GoogleCloudDatacatalogV1beta1ViewSpecOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1ViewSpecInput` via:
//
//          GoogleCloudDatacatalogV1beta1ViewSpecArgs{...}
type GoogleCloudDatacatalogV1beta1ViewSpecInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1ViewSpecOutput() GoogleCloudDatacatalogV1beta1ViewSpecOutput
	ToGoogleCloudDatacatalogV1beta1ViewSpecOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1ViewSpecOutput
}

// Table view specification.
type GoogleCloudDatacatalogV1beta1ViewSpecArgs struct {
	// Output only. The query that defines the table view.
	ViewQuery pulumi.StringPtrInput `pulumi:"viewQuery"`
}

func (GoogleCloudDatacatalogV1beta1ViewSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ViewSpec)(nil)).Elem()
}

func (i GoogleCloudDatacatalogV1beta1ViewSpecArgs) ToGoogleCloudDatacatalogV1beta1ViewSpecOutput() GoogleCloudDatacatalogV1beta1ViewSpecOutput {
	return i.ToGoogleCloudDatacatalogV1beta1ViewSpecOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1ViewSpecArgs) ToGoogleCloudDatacatalogV1beta1ViewSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1ViewSpecOutput)
}

func (i GoogleCloudDatacatalogV1beta1ViewSpecArgs) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutput() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(context.Background())
}

func (i GoogleCloudDatacatalogV1beta1ViewSpecArgs) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1ViewSpecOutput).ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx)
}

// GoogleCloudDatacatalogV1beta1ViewSpecPtrInput is an input type that accepts GoogleCloudDatacatalogV1beta1ViewSpecArgs, GoogleCloudDatacatalogV1beta1ViewSpecPtr and GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput values.
// You can construct a concrete instance of `GoogleCloudDatacatalogV1beta1ViewSpecPtrInput` via:
//
//          GoogleCloudDatacatalogV1beta1ViewSpecArgs{...}
//
//  or:
//
//          nil
type GoogleCloudDatacatalogV1beta1ViewSpecPtrInput interface {
	pulumi.Input

	ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutput() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput
	ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(context.Context) GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput
}

type googleCloudDatacatalogV1beta1ViewSpecPtrType GoogleCloudDatacatalogV1beta1ViewSpecArgs

func GoogleCloudDatacatalogV1beta1ViewSpecPtr(v *GoogleCloudDatacatalogV1beta1ViewSpecArgs) GoogleCloudDatacatalogV1beta1ViewSpecPtrInput {
	return (*googleCloudDatacatalogV1beta1ViewSpecPtrType)(v)
}

func (*googleCloudDatacatalogV1beta1ViewSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1ViewSpec)(nil)).Elem()
}

func (i *googleCloudDatacatalogV1beta1ViewSpecPtrType) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutput() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return i.ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(context.Background())
}

func (i *googleCloudDatacatalogV1beta1ViewSpecPtrType) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput)
}

// Table view specification.
type GoogleCloudDatacatalogV1beta1ViewSpecOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ViewSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudDatacatalogV1beta1ViewSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecOutput() GoogleCloudDatacatalogV1beta1ViewSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutput() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o.ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(context.Background())
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ViewSpec) *GoogleCloudDatacatalogV1beta1ViewSpec {
		return &v
	}).(GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput)
}

// Output only. The query that defines the table view.
func (o GoogleCloudDatacatalogV1beta1ViewSpecOutput) ViewQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudDatacatalogV1beta1ViewSpec) *string { return v.ViewQuery }).(pulumi.StringPtrOutput)
}

type GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudDatacatalogV1beta1ViewSpec)(nil)).Elem()
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutput() GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput) ToGoogleCloudDatacatalogV1beta1ViewSpecPtrOutputWithContext(ctx context.Context) GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput {
	return o
}

func (o GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput) Elem() GoogleCloudDatacatalogV1beta1ViewSpecOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1ViewSpec) GoogleCloudDatacatalogV1beta1ViewSpec { return *v }).(GoogleCloudDatacatalogV1beta1ViewSpecOutput)
}

// Output only. The query that defines the table view.
func (o GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput) ViewQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudDatacatalogV1beta1ViewSpec) *string {
		if v == nil {
			return nil
		}
		return v.ViewQuery
	}).(pulumi.StringPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1BigQueryTableSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1BigQueryTableSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ColumnSchemaOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ColumnSchemaArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1FieldTypeOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1FieldTypePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValueArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1GcsFileSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1GcsFileSpecArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1GcsFilesetSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1GcsFilesetSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1SchemaOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1SchemaPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1SystemTimestampsOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1SystemTimestampsPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1TableSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1TableSpecPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ViewSpecOutput{})
	pulumi.RegisterOutputType(GoogleCloudDatacatalogV1beta1ViewSpecPtrOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
}
