// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the IAM policy for a taxonomy or a policy tag.
type TaxonomyPolicyTagIamPolicy struct {
	pulumi.CustomResourceState
}

// NewTaxonomyPolicyTagIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTaxonomyPolicyTagIamPolicy(ctx *pulumi.Context,
	name string, args *TaxonomyPolicyTagIamPolicyArgs, opts ...pulumi.ResourceOption) (*TaxonomyPolicyTagIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.PolicyTagsId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyTagsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.TaxonomiesId == nil {
		return nil, errors.New("invalid value for required argument 'TaxonomiesId'")
	}
	var resource TaxonomyPolicyTagIamPolicy
	err := ctx.RegisterResource("google-cloud:datacatalog/v1beta1:TaxonomyPolicyTagIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaxonomyPolicyTagIamPolicy gets an existing TaxonomyPolicyTagIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaxonomyPolicyTagIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaxonomyPolicyTagIamPolicyState, opts ...pulumi.ResourceOption) (*TaxonomyPolicyTagIamPolicy, error) {
	var resource TaxonomyPolicyTagIamPolicy
	err := ctx.ReadResource("google-cloud:datacatalog/v1beta1:TaxonomyPolicyTagIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaxonomyPolicyTagIamPolicy resources.
type taxonomyPolicyTagIamPolicyState struct {
}

type TaxonomyPolicyTagIamPolicyState struct {
}

func (TaxonomyPolicyTagIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*taxonomyPolicyTagIamPolicyState)(nil)).Elem()
}

type taxonomyPolicyTagIamPolicyArgs struct {
	LocationsId string `pulumi:"locationsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy       *Policy `pulumi:"policy"`
	PolicyTagsId string  `pulumi:"policyTagsId"`
	ProjectsId   string  `pulumi:"projectsId"`
	TaxonomiesId string  `pulumi:"taxonomiesId"`
}

// The set of arguments for constructing a TaxonomyPolicyTagIamPolicy resource.
type TaxonomyPolicyTagIamPolicyArgs struct {
	LocationsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy       PolicyPtrInput
	PolicyTagsId pulumi.StringInput
	ProjectsId   pulumi.StringInput
	TaxonomiesId pulumi.StringInput
}

func (TaxonomyPolicyTagIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taxonomyPolicyTagIamPolicyArgs)(nil)).Elem()
}

type TaxonomyPolicyTagIamPolicyInput interface {
	pulumi.Input

	ToTaxonomyPolicyTagIamPolicyOutput() TaxonomyPolicyTagIamPolicyOutput
	ToTaxonomyPolicyTagIamPolicyOutputWithContext(ctx context.Context) TaxonomyPolicyTagIamPolicyOutput
}

func (*TaxonomyPolicyTagIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*TaxonomyPolicyTagIamPolicy)(nil))
}

func (i *TaxonomyPolicyTagIamPolicy) ToTaxonomyPolicyTagIamPolicyOutput() TaxonomyPolicyTagIamPolicyOutput {
	return i.ToTaxonomyPolicyTagIamPolicyOutputWithContext(context.Background())
}

func (i *TaxonomyPolicyTagIamPolicy) ToTaxonomyPolicyTagIamPolicyOutputWithContext(ctx context.Context) TaxonomyPolicyTagIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaxonomyPolicyTagIamPolicyOutput)
}

type TaxonomyPolicyTagIamPolicyOutput struct {
	*pulumi.OutputState
}

func (TaxonomyPolicyTagIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaxonomyPolicyTagIamPolicy)(nil))
}

func (o TaxonomyPolicyTagIamPolicyOutput) ToTaxonomyPolicyTagIamPolicyOutput() TaxonomyPolicyTagIamPolicyOutput {
	return o
}

func (o TaxonomyPolicyTagIamPolicyOutput) ToTaxonomyPolicyTagIamPolicyOutputWithContext(ctx context.Context) TaxonomyPolicyTagIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TaxonomyPolicyTagIamPolicyOutput{})
}
