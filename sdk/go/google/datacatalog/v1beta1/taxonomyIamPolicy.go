// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the IAM policy for a taxonomy or a policy tag.
type TaxonomyIamPolicy struct {
	pulumi.CustomResourceState
}

// NewTaxonomyIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTaxonomyIamPolicy(ctx *pulumi.Context,
	name string, args *TaxonomyIamPolicyArgs, opts ...pulumi.ResourceOption) (*TaxonomyIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.TaxonomiesId == nil {
		return nil, errors.New("invalid value for required argument 'TaxonomiesId'")
	}
	var resource TaxonomyIamPolicy
	err := ctx.RegisterResource("google-cloud:datacatalog/v1beta1:TaxonomyIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaxonomyIamPolicy gets an existing TaxonomyIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaxonomyIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaxonomyIamPolicyState, opts ...pulumi.ResourceOption) (*TaxonomyIamPolicy, error) {
	var resource TaxonomyIamPolicy
	err := ctx.ReadResource("google-cloud:datacatalog/v1beta1:TaxonomyIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaxonomyIamPolicy resources.
type taxonomyIamPolicyState struct {
}

type TaxonomyIamPolicyState struct {
}

func (TaxonomyIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*taxonomyIamPolicyState)(nil)).Elem()
}

type taxonomyIamPolicyArgs struct {
	LocationsId string `pulumi:"locationsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy       *Policy `pulumi:"policy"`
	ProjectsId   string  `pulumi:"projectsId"`
	TaxonomiesId string  `pulumi:"taxonomiesId"`
}

// The set of arguments for constructing a TaxonomyIamPolicy resource.
type TaxonomyIamPolicyArgs struct {
	LocationsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy       PolicyPtrInput
	ProjectsId   pulumi.StringInput
	TaxonomiesId pulumi.StringInput
}

func (TaxonomyIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taxonomyIamPolicyArgs)(nil)).Elem()
}

type TaxonomyIamPolicyInput interface {
	pulumi.Input

	ToTaxonomyIamPolicyOutput() TaxonomyIamPolicyOutput
	ToTaxonomyIamPolicyOutputWithContext(ctx context.Context) TaxonomyIamPolicyOutput
}

func (*TaxonomyIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*TaxonomyIamPolicy)(nil))
}

func (i *TaxonomyIamPolicy) ToTaxonomyIamPolicyOutput() TaxonomyIamPolicyOutput {
	return i.ToTaxonomyIamPolicyOutputWithContext(context.Background())
}

func (i *TaxonomyIamPolicy) ToTaxonomyIamPolicyOutputWithContext(ctx context.Context) TaxonomyIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaxonomyIamPolicyOutput)
}

type TaxonomyIamPolicyOutput struct {
	*pulumi.OutputState
}

func (TaxonomyIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaxonomyIamPolicy)(nil))
}

func (o TaxonomyIamPolicyOutput) ToTaxonomyIamPolicyOutput() TaxonomyIamPolicyOutput {
	return o
}

func (o TaxonomyIamPolicyOutput) ToTaxonomyIamPolicyOutputWithContext(ctx context.Context) TaxonomyIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TaxonomyIamPolicyOutput{})
}
