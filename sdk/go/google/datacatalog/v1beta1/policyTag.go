// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a policy tag in the specified taxonomy.
// Auto-naming is currently not supported for this resource.
type PolicyTag struct {
	pulumi.CustomResourceState

	// Resource names of child policy tags of this policy tag.
	ChildPolicyTags pulumi.StringArrayOutput `pulumi:"childPolicyTags"`
	// Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description.
	Description pulumi.StringOutput `pulumi:"description"`
	// User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// Resource name of this policy tag, whose format is: "projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}".
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource name of this policy tag's parent policy tag (e.g. for the "LatLong" policy tag in the example above, this field contains the resource name of the "Geolocation" policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the "Geolocation" policy tag in the example above). If not set, defaults to an empty string.
	ParentPolicyTag pulumi.StringOutput `pulumi:"parentPolicyTag"`
	Project         pulumi.StringOutput `pulumi:"project"`
	TaxonomyId      pulumi.StringOutput `pulumi:"taxonomyId"`
}

// NewPolicyTag registers a new resource with the given unique name, arguments, and options.
func NewPolicyTag(ctx *pulumi.Context,
	name string, args *PolicyTagArgs, opts ...pulumi.ResourceOption) (*PolicyTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.TaxonomyId == nil {
		return nil, errors.New("invalid value for required argument 'TaxonomyId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"taxonomyId",
	})
	opts = append(opts, replaceOnChanges)
	var resource PolicyTag
	err := ctx.RegisterResource("google-native:datacatalog/v1beta1:PolicyTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyTag gets an existing PolicyTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyTagState, opts ...pulumi.ResourceOption) (*PolicyTag, error) {
	var resource PolicyTag
	err := ctx.ReadResource("google-native:datacatalog/v1beta1:PolicyTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyTag resources.
type policyTagState struct {
}

type PolicyTagState struct {
}

func (PolicyTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyTagState)(nil)).Elem()
}

type policyTagArgs struct {
	// Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description.
	Description *string `pulumi:"description"`
	// User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.
	DisplayName string  `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	// Resource name of this policy tag's parent policy tag (e.g. for the "LatLong" policy tag in the example above, this field contains the resource name of the "Geolocation" policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the "Geolocation" policy tag in the example above). If not set, defaults to an empty string.
	ParentPolicyTag *string `pulumi:"parentPolicyTag"`
	Project         *string `pulumi:"project"`
	TaxonomyId      string  `pulumi:"taxonomyId"`
}

// The set of arguments for constructing a PolicyTag resource.
type PolicyTagArgs struct {
	// Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description.
	Description pulumi.StringPtrInput
	// User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.
	DisplayName pulumi.StringInput
	Location    pulumi.StringPtrInput
	// Resource name of this policy tag's parent policy tag (e.g. for the "LatLong" policy tag in the example above, this field contains the resource name of the "Geolocation" policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the "Geolocation" policy tag in the example above). If not set, defaults to an empty string.
	ParentPolicyTag pulumi.StringPtrInput
	Project         pulumi.StringPtrInput
	TaxonomyId      pulumi.StringInput
}

func (PolicyTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyTagArgs)(nil)).Elem()
}

type PolicyTagInput interface {
	pulumi.Input

	ToPolicyTagOutput() PolicyTagOutput
	ToPolicyTagOutputWithContext(ctx context.Context) PolicyTagOutput
}

func (*PolicyTag) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyTag)(nil)).Elem()
}

func (i *PolicyTag) ToPolicyTagOutput() PolicyTagOutput {
	return i.ToPolicyTagOutputWithContext(context.Background())
}

func (i *PolicyTag) ToPolicyTagOutputWithContext(ctx context.Context) PolicyTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTagOutput)
}

type PolicyTagOutput struct{ *pulumi.OutputState }

func (PolicyTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyTag)(nil)).Elem()
}

func (o PolicyTagOutput) ToPolicyTagOutput() PolicyTagOutput {
	return o
}

func (o PolicyTagOutput) ToPolicyTagOutputWithContext(ctx context.Context) PolicyTagOutput {
	return o
}

// Resource names of child policy tags of this policy tag.
func (o PolicyTagOutput) ChildPolicyTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyTag) pulumi.StringArrayOutput { return v.ChildPolicyTags }).(pulumi.StringArrayOutput)
}

// Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description.
func (o PolicyTagOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTag) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.
func (o PolicyTagOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTag) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o PolicyTagOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTag) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name of this policy tag, whose format is: "projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}".
func (o PolicyTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource name of this policy tag's parent policy tag (e.g. for the "LatLong" policy tag in the example above, this field contains the resource name of the "Geolocation" policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the "Geolocation" policy tag in the example above). If not set, defaults to an empty string.
func (o PolicyTagOutput) ParentPolicyTag() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTag) pulumi.StringOutput { return v.ParentPolicyTag }).(pulumi.StringOutput)
}

func (o PolicyTagOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTag) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o PolicyTagOutput) TaxonomyId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyTag) pulumi.StringOutput { return v.TaxonomyId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyTagInput)(nil)).Elem(), &PolicyTag{})
	pulumi.RegisterOutputType(PolicyTagOutput{})
}
