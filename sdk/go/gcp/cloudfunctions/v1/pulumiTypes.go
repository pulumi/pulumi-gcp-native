// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// AuditConfigResponseInput is an input type that accepts AuditConfigResponseArgs and AuditConfigResponseOutput values.
// You can construct a concrete instance of `AuditConfigResponseInput` via:
//
//          AuditConfigResponseArgs{...}
type AuditConfigResponseInput interface {
	pulumi.Input

	ToAuditConfigResponseOutput() AuditConfigResponseOutput
	ToAuditConfigResponseOutputWithContext(context.Context) AuditConfigResponseOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigResponseArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringInput `pulumi:"service"`
}

func (AuditConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return i.ToAuditConfigResponseOutputWithContext(context.Background())
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseOutput)
}

// AuditConfigResponseArrayInput is an input type that accepts AuditConfigResponseArray and AuditConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditConfigResponseArrayInput` via:
//
//          AuditConfigResponseArray{ AuditConfigResponseArgs{...} }
type AuditConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput
	ToAuditConfigResponseArrayOutputWithContext(context.Context) AuditConfigResponseArrayOutput
}

type AuditConfigResponseArray []AuditConfigResponseInput

func (AuditConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return i.ToAuditConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// AuditLogConfigResponseInput is an input type that accepts AuditLogConfigResponseArgs and AuditLogConfigResponseOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseInput` via:
//
//          AuditLogConfigResponseArgs{...}
type AuditLogConfigResponseInput interface {
	pulumi.Input

	ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput
	ToAuditLogConfigResponseOutputWithContext(context.Context) AuditLogConfigResponseOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringInput `pulumi:"logType"`
}

func (AuditLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return i.ToAuditLogConfigResponseOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseOutput)
}

// AuditLogConfigResponseArrayInput is an input type that accepts AuditLogConfigResponseArray and AuditLogConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseArrayInput` via:
//
//          AuditLogConfigResponseArray{ AuditLogConfigResponseArgs{...} }
type AuditLogConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput
	ToAuditLogConfigResponseArrayOutputWithContext(context.Context) AuditLogConfigResponseArrayOutput
}

type AuditLogConfigResponseArray []AuditLogConfigResponseInput

func (AuditLogConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return i.ToAuditLogConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members` with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// BindingResponseInput is an input type that accepts BindingResponseArgs and BindingResponseOutput values.
// You can construct a concrete instance of `BindingResponseInput` via:
//
//          BindingResponseArgs{...}
type BindingResponseInput interface {
	pulumi.Input

	ToBindingResponseOutput() BindingResponseOutput
	ToBindingResponseOutputWithContext(context.Context) BindingResponseOutput
}

// Associates `members` with a `role`.
type BindingResponseArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponseInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringInput `pulumi:"role"`
}

func (BindingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (i BindingResponseArgs) ToBindingResponseOutput() BindingResponseOutput {
	return i.ToBindingResponseOutputWithContext(context.Background())
}

func (i BindingResponseArgs) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseOutput)
}

// BindingResponseArrayInput is an input type that accepts BindingResponseArray and BindingResponseArrayOutput values.
// You can construct a concrete instance of `BindingResponseArrayInput` via:
//
//          BindingResponseArray{ BindingResponseArgs{...} }
type BindingResponseArrayInput interface {
	pulumi.Input

	ToBindingResponseArrayOutput() BindingResponseArrayOutput
	ToBindingResponseArrayOutputWithContext(context.Context) BindingResponseArrayOutput
}

type BindingResponseArray []BindingResponseInput

func (BindingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (i BindingResponseArray) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return i.ToBindingResponseArrayOutputWithContext(context.Background())
}

func (i BindingResponseArray) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseArrayOutput)
}

// Associates `members` with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTrigger struct {
	// Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
	EventType *string `pulumi:"eventType"`
	// Specifies policy for failed executions.
	FailurePolicy *FailurePolicy `pulumi:"failurePolicy"`
	// Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
	Resource *string `pulumi:"resource"`
	// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
	Service *string `pulumi:"service"`
}

// EventTriggerInput is an input type that accepts EventTriggerArgs and EventTriggerOutput values.
// You can construct a concrete instance of `EventTriggerInput` via:
//
//          EventTriggerArgs{...}
type EventTriggerInput interface {
	pulumi.Input

	ToEventTriggerOutput() EventTriggerOutput
	ToEventTriggerOutputWithContext(context.Context) EventTriggerOutput
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTriggerArgs struct {
	// Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies policy for failed executions.
	FailurePolicy FailurePolicyPtrInput `pulumi:"failurePolicy"`
	// Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (EventTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTrigger)(nil)).Elem()
}

func (i EventTriggerArgs) ToEventTriggerOutput() EventTriggerOutput {
	return i.ToEventTriggerOutputWithContext(context.Background())
}

func (i EventTriggerArgs) ToEventTriggerOutputWithContext(ctx context.Context) EventTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerOutput)
}

func (i EventTriggerArgs) ToEventTriggerPtrOutput() EventTriggerPtrOutput {
	return i.ToEventTriggerPtrOutputWithContext(context.Background())
}

func (i EventTriggerArgs) ToEventTriggerPtrOutputWithContext(ctx context.Context) EventTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerOutput).ToEventTriggerPtrOutputWithContext(ctx)
}

// EventTriggerPtrInput is an input type that accepts EventTriggerArgs, EventTriggerPtr and EventTriggerPtrOutput values.
// You can construct a concrete instance of `EventTriggerPtrInput` via:
//
//          EventTriggerArgs{...}
//
//  or:
//
//          nil
type EventTriggerPtrInput interface {
	pulumi.Input

	ToEventTriggerPtrOutput() EventTriggerPtrOutput
	ToEventTriggerPtrOutputWithContext(context.Context) EventTriggerPtrOutput
}

type eventTriggerPtrType EventTriggerArgs

func EventTriggerPtr(v *EventTriggerArgs) EventTriggerPtrInput {
	return (*eventTriggerPtrType)(v)
}

func (*eventTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTrigger)(nil)).Elem()
}

func (i *eventTriggerPtrType) ToEventTriggerPtrOutput() EventTriggerPtrOutput {
	return i.ToEventTriggerPtrOutputWithContext(context.Background())
}

func (i *eventTriggerPtrType) ToEventTriggerPtrOutputWithContext(ctx context.Context) EventTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerPtrOutput)
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTriggerOutput struct{ *pulumi.OutputState }

func (EventTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTrigger)(nil)).Elem()
}

func (o EventTriggerOutput) ToEventTriggerOutput() EventTriggerOutput {
	return o
}

func (o EventTriggerOutput) ToEventTriggerOutputWithContext(ctx context.Context) EventTriggerOutput {
	return o
}

func (o EventTriggerOutput) ToEventTriggerPtrOutput() EventTriggerPtrOutput {
	return o.ToEventTriggerPtrOutputWithContext(context.Background())
}

func (o EventTriggerOutput) ToEventTriggerPtrOutputWithContext(ctx context.Context) EventTriggerPtrOutput {
	return o.ApplyT(func(v EventTrigger) *EventTrigger {
		return &v
	}).(EventTriggerPtrOutput)
}

// Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
func (o EventTriggerOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTrigger) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies policy for failed executions.
func (o EventTriggerOutput) FailurePolicy() FailurePolicyPtrOutput {
	return o.ApplyT(func(v EventTrigger) *FailurePolicy { return v.FailurePolicy }).(FailurePolicyPtrOutput)
}

// Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
func (o EventTriggerOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTrigger) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
func (o EventTriggerOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTrigger) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type EventTriggerPtrOutput struct{ *pulumi.OutputState }

func (EventTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTrigger)(nil)).Elem()
}

func (o EventTriggerPtrOutput) ToEventTriggerPtrOutput() EventTriggerPtrOutput {
	return o
}

func (o EventTriggerPtrOutput) ToEventTriggerPtrOutputWithContext(ctx context.Context) EventTriggerPtrOutput {
	return o
}

func (o EventTriggerPtrOutput) Elem() EventTriggerOutput {
	return o.ApplyT(func(v *EventTrigger) EventTrigger { return *v }).(EventTriggerOutput)
}

// Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
func (o EventTriggerPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTrigger) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies policy for failed executions.
func (o EventTriggerPtrOutput) FailurePolicy() FailurePolicyPtrOutput {
	return o.ApplyT(func(v *EventTrigger) *FailurePolicy {
		if v == nil {
			return nil
		}
		return v.FailurePolicy
	}).(FailurePolicyPtrOutput)
}

// Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
func (o EventTriggerPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTrigger) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
func (o EventTriggerPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTrigger) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTriggerResponse struct {
	// Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
	EventType string `pulumi:"eventType"`
	// Specifies policy for failed executions.
	FailurePolicy FailurePolicyResponse `pulumi:"failurePolicy"`
	// Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
	Resource string `pulumi:"resource"`
	// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
	Service string `pulumi:"service"`
}

// EventTriggerResponseInput is an input type that accepts EventTriggerResponseArgs and EventTriggerResponseOutput values.
// You can construct a concrete instance of `EventTriggerResponseInput` via:
//
//          EventTriggerResponseArgs{...}
type EventTriggerResponseInput interface {
	pulumi.Input

	ToEventTriggerResponseOutput() EventTriggerResponseOutput
	ToEventTriggerResponseOutputWithContext(context.Context) EventTriggerResponseOutput
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTriggerResponseArgs struct {
	// Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
	EventType pulumi.StringInput `pulumi:"eventType"`
	// Specifies policy for failed executions.
	FailurePolicy FailurePolicyResponseInput `pulumi:"failurePolicy"`
	// Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
	Resource pulumi.StringInput `pulumi:"resource"`
	// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
	Service pulumi.StringInput `pulumi:"service"`
}

func (EventTriggerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTriggerResponse)(nil)).Elem()
}

func (i EventTriggerResponseArgs) ToEventTriggerResponseOutput() EventTriggerResponseOutput {
	return i.ToEventTriggerResponseOutputWithContext(context.Background())
}

func (i EventTriggerResponseArgs) ToEventTriggerResponseOutputWithContext(ctx context.Context) EventTriggerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerResponseOutput)
}

func (i EventTriggerResponseArgs) ToEventTriggerResponsePtrOutput() EventTriggerResponsePtrOutput {
	return i.ToEventTriggerResponsePtrOutputWithContext(context.Background())
}

func (i EventTriggerResponseArgs) ToEventTriggerResponsePtrOutputWithContext(ctx context.Context) EventTriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerResponseOutput).ToEventTriggerResponsePtrOutputWithContext(ctx)
}

// EventTriggerResponsePtrInput is an input type that accepts EventTriggerResponseArgs, EventTriggerResponsePtr and EventTriggerResponsePtrOutput values.
// You can construct a concrete instance of `EventTriggerResponsePtrInput` via:
//
//          EventTriggerResponseArgs{...}
//
//  or:
//
//          nil
type EventTriggerResponsePtrInput interface {
	pulumi.Input

	ToEventTriggerResponsePtrOutput() EventTriggerResponsePtrOutput
	ToEventTriggerResponsePtrOutputWithContext(context.Context) EventTriggerResponsePtrOutput
}

type eventTriggerResponsePtrType EventTriggerResponseArgs

func EventTriggerResponsePtr(v *EventTriggerResponseArgs) EventTriggerResponsePtrInput {
	return (*eventTriggerResponsePtrType)(v)
}

func (*eventTriggerResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTriggerResponse)(nil)).Elem()
}

func (i *eventTriggerResponsePtrType) ToEventTriggerResponsePtrOutput() EventTriggerResponsePtrOutput {
	return i.ToEventTriggerResponsePtrOutputWithContext(context.Background())
}

func (i *eventTriggerResponsePtrType) ToEventTriggerResponsePtrOutputWithContext(ctx context.Context) EventTriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerResponsePtrOutput)
}

// Describes EventTrigger, used to request events be sent from another service.
type EventTriggerResponseOutput struct{ *pulumi.OutputState }

func (EventTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTriggerResponse)(nil)).Elem()
}

func (o EventTriggerResponseOutput) ToEventTriggerResponseOutput() EventTriggerResponseOutput {
	return o
}

func (o EventTriggerResponseOutput) ToEventTriggerResponseOutputWithContext(ctx context.Context) EventTriggerResponseOutput {
	return o
}

func (o EventTriggerResponseOutput) ToEventTriggerResponsePtrOutput() EventTriggerResponsePtrOutput {
	return o.ToEventTriggerResponsePtrOutputWithContext(context.Background())
}

func (o EventTriggerResponseOutput) ToEventTriggerResponsePtrOutputWithContext(ctx context.Context) EventTriggerResponsePtrOutput {
	return o.ApplyT(func(v EventTriggerResponse) *EventTriggerResponse {
		return &v
	}).(EventTriggerResponsePtrOutput)
}

// Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
func (o EventTriggerResponseOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v EventTriggerResponse) string { return v.EventType }).(pulumi.StringOutput)
}

// Specifies policy for failed executions.
func (o EventTriggerResponseOutput) FailurePolicy() FailurePolicyResponseOutput {
	return o.ApplyT(func(v EventTriggerResponse) FailurePolicyResponse { return v.FailurePolicy }).(FailurePolicyResponseOutput)
}

// Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
func (o EventTriggerResponseOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v EventTriggerResponse) string { return v.Resource }).(pulumi.StringOutput)
}

// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
func (o EventTriggerResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v EventTriggerResponse) string { return v.Service }).(pulumi.StringOutput)
}

type EventTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (EventTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTriggerResponse)(nil)).Elem()
}

func (o EventTriggerResponsePtrOutput) ToEventTriggerResponsePtrOutput() EventTriggerResponsePtrOutput {
	return o
}

func (o EventTriggerResponsePtrOutput) ToEventTriggerResponsePtrOutputWithContext(ctx context.Context) EventTriggerResponsePtrOutput {
	return o
}

func (o EventTriggerResponsePtrOutput) Elem() EventTriggerResponseOutput {
	return o.ApplyT(func(v *EventTriggerResponse) EventTriggerResponse { return *v }).(EventTriggerResponseOutput)
}

// Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.
func (o EventTriggerResponsePtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies policy for failed executions.
func (o EventTriggerResponsePtrOutput) FailurePolicy() FailurePolicyResponsePtrOutput {
	return o.ApplyT(func(v *EventTriggerResponse) *FailurePolicyResponse {
		if v == nil {
			return nil
		}
		return &v.FailurePolicy
	}).(FailurePolicyResponsePtrOutput)
}

// Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of "google.pubsub.topic.publish" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized "long" format. See each *service's* documentation for supported formats.
func (o EventTriggerResponsePtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.
func (o EventTriggerResponsePtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// ExprResponseInput is an input type that accepts ExprResponseArgs and ExprResponseOutput values.
// You can construct a concrete instance of `ExprResponseInput` via:
//
//          ExprResponseArgs{...}
type ExprResponseInput interface {
	pulumi.Input

	ToExprResponseOutput() ExprResponseOutput
	ToExprResponseOutputWithContext(context.Context) ExprResponseOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ExprResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (i ExprResponseArgs) ToExprResponseOutput() ExprResponseOutput {
	return i.ToExprResponseOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicy struct {
	// If specified, then the function will be retried in case of a failure.
	Retry *Retry `pulumi:"retry"`
}

// FailurePolicyInput is an input type that accepts FailurePolicyArgs and FailurePolicyOutput values.
// You can construct a concrete instance of `FailurePolicyInput` via:
//
//          FailurePolicyArgs{...}
type FailurePolicyInput interface {
	pulumi.Input

	ToFailurePolicyOutput() FailurePolicyOutput
	ToFailurePolicyOutputWithContext(context.Context) FailurePolicyOutput
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicyArgs struct {
	// If specified, then the function will be retried in case of a failure.
	Retry RetryPtrInput `pulumi:"retry"`
}

func (FailurePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailurePolicy)(nil)).Elem()
}

func (i FailurePolicyArgs) ToFailurePolicyOutput() FailurePolicyOutput {
	return i.ToFailurePolicyOutputWithContext(context.Background())
}

func (i FailurePolicyArgs) ToFailurePolicyOutputWithContext(ctx context.Context) FailurePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailurePolicyOutput)
}

func (i FailurePolicyArgs) ToFailurePolicyPtrOutput() FailurePolicyPtrOutput {
	return i.ToFailurePolicyPtrOutputWithContext(context.Background())
}

func (i FailurePolicyArgs) ToFailurePolicyPtrOutputWithContext(ctx context.Context) FailurePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailurePolicyOutput).ToFailurePolicyPtrOutputWithContext(ctx)
}

// FailurePolicyPtrInput is an input type that accepts FailurePolicyArgs, FailurePolicyPtr and FailurePolicyPtrOutput values.
// You can construct a concrete instance of `FailurePolicyPtrInput` via:
//
//          FailurePolicyArgs{...}
//
//  or:
//
//          nil
type FailurePolicyPtrInput interface {
	pulumi.Input

	ToFailurePolicyPtrOutput() FailurePolicyPtrOutput
	ToFailurePolicyPtrOutputWithContext(context.Context) FailurePolicyPtrOutput
}

type failurePolicyPtrType FailurePolicyArgs

func FailurePolicyPtr(v *FailurePolicyArgs) FailurePolicyPtrInput {
	return (*failurePolicyPtrType)(v)
}

func (*failurePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailurePolicy)(nil)).Elem()
}

func (i *failurePolicyPtrType) ToFailurePolicyPtrOutput() FailurePolicyPtrOutput {
	return i.ToFailurePolicyPtrOutputWithContext(context.Background())
}

func (i *failurePolicyPtrType) ToFailurePolicyPtrOutputWithContext(ctx context.Context) FailurePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailurePolicyPtrOutput)
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicyOutput struct{ *pulumi.OutputState }

func (FailurePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailurePolicy)(nil)).Elem()
}

func (o FailurePolicyOutput) ToFailurePolicyOutput() FailurePolicyOutput {
	return o
}

func (o FailurePolicyOutput) ToFailurePolicyOutputWithContext(ctx context.Context) FailurePolicyOutput {
	return o
}

func (o FailurePolicyOutput) ToFailurePolicyPtrOutput() FailurePolicyPtrOutput {
	return o.ToFailurePolicyPtrOutputWithContext(context.Background())
}

func (o FailurePolicyOutput) ToFailurePolicyPtrOutputWithContext(ctx context.Context) FailurePolicyPtrOutput {
	return o.ApplyT(func(v FailurePolicy) *FailurePolicy {
		return &v
	}).(FailurePolicyPtrOutput)
}

// If specified, then the function will be retried in case of a failure.
func (o FailurePolicyOutput) Retry() RetryPtrOutput {
	return o.ApplyT(func(v FailurePolicy) *Retry { return v.Retry }).(RetryPtrOutput)
}

type FailurePolicyPtrOutput struct{ *pulumi.OutputState }

func (FailurePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailurePolicy)(nil)).Elem()
}

func (o FailurePolicyPtrOutput) ToFailurePolicyPtrOutput() FailurePolicyPtrOutput {
	return o
}

func (o FailurePolicyPtrOutput) ToFailurePolicyPtrOutputWithContext(ctx context.Context) FailurePolicyPtrOutput {
	return o
}

func (o FailurePolicyPtrOutput) Elem() FailurePolicyOutput {
	return o.ApplyT(func(v *FailurePolicy) FailurePolicy { return *v }).(FailurePolicyOutput)
}

// If specified, then the function will be retried in case of a failure.
func (o FailurePolicyPtrOutput) Retry() RetryPtrOutput {
	return o.ApplyT(func(v *FailurePolicy) *Retry {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(RetryPtrOutput)
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicyResponse struct {
	// If specified, then the function will be retried in case of a failure.
	Retry RetryResponse `pulumi:"retry"`
}

// FailurePolicyResponseInput is an input type that accepts FailurePolicyResponseArgs and FailurePolicyResponseOutput values.
// You can construct a concrete instance of `FailurePolicyResponseInput` via:
//
//          FailurePolicyResponseArgs{...}
type FailurePolicyResponseInput interface {
	pulumi.Input

	ToFailurePolicyResponseOutput() FailurePolicyResponseOutput
	ToFailurePolicyResponseOutputWithContext(context.Context) FailurePolicyResponseOutput
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicyResponseArgs struct {
	// If specified, then the function will be retried in case of a failure.
	Retry RetryResponseInput `pulumi:"retry"`
}

func (FailurePolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailurePolicyResponse)(nil)).Elem()
}

func (i FailurePolicyResponseArgs) ToFailurePolicyResponseOutput() FailurePolicyResponseOutput {
	return i.ToFailurePolicyResponseOutputWithContext(context.Background())
}

func (i FailurePolicyResponseArgs) ToFailurePolicyResponseOutputWithContext(ctx context.Context) FailurePolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailurePolicyResponseOutput)
}

func (i FailurePolicyResponseArgs) ToFailurePolicyResponsePtrOutput() FailurePolicyResponsePtrOutput {
	return i.ToFailurePolicyResponsePtrOutputWithContext(context.Background())
}

func (i FailurePolicyResponseArgs) ToFailurePolicyResponsePtrOutputWithContext(ctx context.Context) FailurePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailurePolicyResponseOutput).ToFailurePolicyResponsePtrOutputWithContext(ctx)
}

// FailurePolicyResponsePtrInput is an input type that accepts FailurePolicyResponseArgs, FailurePolicyResponsePtr and FailurePolicyResponsePtrOutput values.
// You can construct a concrete instance of `FailurePolicyResponsePtrInput` via:
//
//          FailurePolicyResponseArgs{...}
//
//  or:
//
//          nil
type FailurePolicyResponsePtrInput interface {
	pulumi.Input

	ToFailurePolicyResponsePtrOutput() FailurePolicyResponsePtrOutput
	ToFailurePolicyResponsePtrOutputWithContext(context.Context) FailurePolicyResponsePtrOutput
}

type failurePolicyResponsePtrType FailurePolicyResponseArgs

func FailurePolicyResponsePtr(v *FailurePolicyResponseArgs) FailurePolicyResponsePtrInput {
	return (*failurePolicyResponsePtrType)(v)
}

func (*failurePolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailurePolicyResponse)(nil)).Elem()
}

func (i *failurePolicyResponsePtrType) ToFailurePolicyResponsePtrOutput() FailurePolicyResponsePtrOutput {
	return i.ToFailurePolicyResponsePtrOutputWithContext(context.Background())
}

func (i *failurePolicyResponsePtrType) ToFailurePolicyResponsePtrOutputWithContext(ctx context.Context) FailurePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailurePolicyResponsePtrOutput)
}

// Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).
type FailurePolicyResponseOutput struct{ *pulumi.OutputState }

func (FailurePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailurePolicyResponse)(nil)).Elem()
}

func (o FailurePolicyResponseOutput) ToFailurePolicyResponseOutput() FailurePolicyResponseOutput {
	return o
}

func (o FailurePolicyResponseOutput) ToFailurePolicyResponseOutputWithContext(ctx context.Context) FailurePolicyResponseOutput {
	return o
}

func (o FailurePolicyResponseOutput) ToFailurePolicyResponsePtrOutput() FailurePolicyResponsePtrOutput {
	return o.ToFailurePolicyResponsePtrOutputWithContext(context.Background())
}

func (o FailurePolicyResponseOutput) ToFailurePolicyResponsePtrOutputWithContext(ctx context.Context) FailurePolicyResponsePtrOutput {
	return o.ApplyT(func(v FailurePolicyResponse) *FailurePolicyResponse {
		return &v
	}).(FailurePolicyResponsePtrOutput)
}

// If specified, then the function will be retried in case of a failure.
func (o FailurePolicyResponseOutput) Retry() RetryResponseOutput {
	return o.ApplyT(func(v FailurePolicyResponse) RetryResponse { return v.Retry }).(RetryResponseOutput)
}

type FailurePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (FailurePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailurePolicyResponse)(nil)).Elem()
}

func (o FailurePolicyResponsePtrOutput) ToFailurePolicyResponsePtrOutput() FailurePolicyResponsePtrOutput {
	return o
}

func (o FailurePolicyResponsePtrOutput) ToFailurePolicyResponsePtrOutputWithContext(ctx context.Context) FailurePolicyResponsePtrOutput {
	return o
}

func (o FailurePolicyResponsePtrOutput) Elem() FailurePolicyResponseOutput {
	return o.ApplyT(func(v *FailurePolicyResponse) FailurePolicyResponse { return *v }).(FailurePolicyResponseOutput)
}

// If specified, then the function will be retried in case of a failure.
func (o FailurePolicyResponsePtrOutput) Retry() RetryResponsePtrOutput {
	return o.ApplyT(func(v *FailurePolicyResponse) *RetryResponse {
		if v == nil {
			return nil
		}
		return &v.Retry
	}).(RetryResponsePtrOutput)
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTrigger struct {
	// The security level for the function.
	SecurityLevel *string `pulumi:"securityLevel"`
}

// HttpsTriggerInput is an input type that accepts HttpsTriggerArgs and HttpsTriggerOutput values.
// You can construct a concrete instance of `HttpsTriggerInput` via:
//
//          HttpsTriggerArgs{...}
type HttpsTriggerInput interface {
	pulumi.Input

	ToHttpsTriggerOutput() HttpsTriggerOutput
	ToHttpsTriggerOutputWithContext(context.Context) HttpsTriggerOutput
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTriggerArgs struct {
	// The security level for the function.
	SecurityLevel pulumi.StringPtrInput `pulumi:"securityLevel"`
}

func (HttpsTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpsTrigger)(nil)).Elem()
}

func (i HttpsTriggerArgs) ToHttpsTriggerOutput() HttpsTriggerOutput {
	return i.ToHttpsTriggerOutputWithContext(context.Background())
}

func (i HttpsTriggerArgs) ToHttpsTriggerOutputWithContext(ctx context.Context) HttpsTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsTriggerOutput)
}

func (i HttpsTriggerArgs) ToHttpsTriggerPtrOutput() HttpsTriggerPtrOutput {
	return i.ToHttpsTriggerPtrOutputWithContext(context.Background())
}

func (i HttpsTriggerArgs) ToHttpsTriggerPtrOutputWithContext(ctx context.Context) HttpsTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsTriggerOutput).ToHttpsTriggerPtrOutputWithContext(ctx)
}

// HttpsTriggerPtrInput is an input type that accepts HttpsTriggerArgs, HttpsTriggerPtr and HttpsTriggerPtrOutput values.
// You can construct a concrete instance of `HttpsTriggerPtrInput` via:
//
//          HttpsTriggerArgs{...}
//
//  or:
//
//          nil
type HttpsTriggerPtrInput interface {
	pulumi.Input

	ToHttpsTriggerPtrOutput() HttpsTriggerPtrOutput
	ToHttpsTriggerPtrOutputWithContext(context.Context) HttpsTriggerPtrOutput
}

type httpsTriggerPtrType HttpsTriggerArgs

func HttpsTriggerPtr(v *HttpsTriggerArgs) HttpsTriggerPtrInput {
	return (*httpsTriggerPtrType)(v)
}

func (*httpsTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpsTrigger)(nil)).Elem()
}

func (i *httpsTriggerPtrType) ToHttpsTriggerPtrOutput() HttpsTriggerPtrOutput {
	return i.ToHttpsTriggerPtrOutputWithContext(context.Background())
}

func (i *httpsTriggerPtrType) ToHttpsTriggerPtrOutputWithContext(ctx context.Context) HttpsTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsTriggerPtrOutput)
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTriggerOutput struct{ *pulumi.OutputState }

func (HttpsTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpsTrigger)(nil)).Elem()
}

func (o HttpsTriggerOutput) ToHttpsTriggerOutput() HttpsTriggerOutput {
	return o
}

func (o HttpsTriggerOutput) ToHttpsTriggerOutputWithContext(ctx context.Context) HttpsTriggerOutput {
	return o
}

func (o HttpsTriggerOutput) ToHttpsTriggerPtrOutput() HttpsTriggerPtrOutput {
	return o.ToHttpsTriggerPtrOutputWithContext(context.Background())
}

func (o HttpsTriggerOutput) ToHttpsTriggerPtrOutputWithContext(ctx context.Context) HttpsTriggerPtrOutput {
	return o.ApplyT(func(v HttpsTrigger) *HttpsTrigger {
		return &v
	}).(HttpsTriggerPtrOutput)
}

// The security level for the function.
func (o HttpsTriggerOutput) SecurityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpsTrigger) *string { return v.SecurityLevel }).(pulumi.StringPtrOutput)
}

type HttpsTriggerPtrOutput struct{ *pulumi.OutputState }

func (HttpsTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpsTrigger)(nil)).Elem()
}

func (o HttpsTriggerPtrOutput) ToHttpsTriggerPtrOutput() HttpsTriggerPtrOutput {
	return o
}

func (o HttpsTriggerPtrOutput) ToHttpsTriggerPtrOutputWithContext(ctx context.Context) HttpsTriggerPtrOutput {
	return o
}

func (o HttpsTriggerPtrOutput) Elem() HttpsTriggerOutput {
	return o.ApplyT(func(v *HttpsTrigger) HttpsTrigger { return *v }).(HttpsTriggerOutput)
}

// The security level for the function.
func (o HttpsTriggerPtrOutput) SecurityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsTrigger) *string {
		if v == nil {
			return nil
		}
		return v.SecurityLevel
	}).(pulumi.StringPtrOutput)
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTriggerResponse struct {
	// The security level for the function.
	SecurityLevel string `pulumi:"securityLevel"`
	// The deployed url for the function.
	Url string `pulumi:"url"`
}

// HttpsTriggerResponseInput is an input type that accepts HttpsTriggerResponseArgs and HttpsTriggerResponseOutput values.
// You can construct a concrete instance of `HttpsTriggerResponseInput` via:
//
//          HttpsTriggerResponseArgs{...}
type HttpsTriggerResponseInput interface {
	pulumi.Input

	ToHttpsTriggerResponseOutput() HttpsTriggerResponseOutput
	ToHttpsTriggerResponseOutputWithContext(context.Context) HttpsTriggerResponseOutput
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTriggerResponseArgs struct {
	// The security level for the function.
	SecurityLevel pulumi.StringInput `pulumi:"securityLevel"`
	// The deployed url for the function.
	Url pulumi.StringInput `pulumi:"url"`
}

func (HttpsTriggerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpsTriggerResponse)(nil)).Elem()
}

func (i HttpsTriggerResponseArgs) ToHttpsTriggerResponseOutput() HttpsTriggerResponseOutput {
	return i.ToHttpsTriggerResponseOutputWithContext(context.Background())
}

func (i HttpsTriggerResponseArgs) ToHttpsTriggerResponseOutputWithContext(ctx context.Context) HttpsTriggerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsTriggerResponseOutput)
}

func (i HttpsTriggerResponseArgs) ToHttpsTriggerResponsePtrOutput() HttpsTriggerResponsePtrOutput {
	return i.ToHttpsTriggerResponsePtrOutputWithContext(context.Background())
}

func (i HttpsTriggerResponseArgs) ToHttpsTriggerResponsePtrOutputWithContext(ctx context.Context) HttpsTriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsTriggerResponseOutput).ToHttpsTriggerResponsePtrOutputWithContext(ctx)
}

// HttpsTriggerResponsePtrInput is an input type that accepts HttpsTriggerResponseArgs, HttpsTriggerResponsePtr and HttpsTriggerResponsePtrOutput values.
// You can construct a concrete instance of `HttpsTriggerResponsePtrInput` via:
//
//          HttpsTriggerResponseArgs{...}
//
//  or:
//
//          nil
type HttpsTriggerResponsePtrInput interface {
	pulumi.Input

	ToHttpsTriggerResponsePtrOutput() HttpsTriggerResponsePtrOutput
	ToHttpsTriggerResponsePtrOutputWithContext(context.Context) HttpsTriggerResponsePtrOutput
}

type httpsTriggerResponsePtrType HttpsTriggerResponseArgs

func HttpsTriggerResponsePtr(v *HttpsTriggerResponseArgs) HttpsTriggerResponsePtrInput {
	return (*httpsTriggerResponsePtrType)(v)
}

func (*httpsTriggerResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpsTriggerResponse)(nil)).Elem()
}

func (i *httpsTriggerResponsePtrType) ToHttpsTriggerResponsePtrOutput() HttpsTriggerResponsePtrOutput {
	return i.ToHttpsTriggerResponsePtrOutputWithContext(context.Background())
}

func (i *httpsTriggerResponsePtrType) ToHttpsTriggerResponsePtrOutputWithContext(ctx context.Context) HttpsTriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsTriggerResponsePtrOutput)
}

// Describes HttpsTrigger, could be used to connect web hooks to function.
type HttpsTriggerResponseOutput struct{ *pulumi.OutputState }

func (HttpsTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpsTriggerResponse)(nil)).Elem()
}

func (o HttpsTriggerResponseOutput) ToHttpsTriggerResponseOutput() HttpsTriggerResponseOutput {
	return o
}

func (o HttpsTriggerResponseOutput) ToHttpsTriggerResponseOutputWithContext(ctx context.Context) HttpsTriggerResponseOutput {
	return o
}

func (o HttpsTriggerResponseOutput) ToHttpsTriggerResponsePtrOutput() HttpsTriggerResponsePtrOutput {
	return o.ToHttpsTriggerResponsePtrOutputWithContext(context.Background())
}

func (o HttpsTriggerResponseOutput) ToHttpsTriggerResponsePtrOutputWithContext(ctx context.Context) HttpsTriggerResponsePtrOutput {
	return o.ApplyT(func(v HttpsTriggerResponse) *HttpsTriggerResponse {
		return &v
	}).(HttpsTriggerResponsePtrOutput)
}

// The security level for the function.
func (o HttpsTriggerResponseOutput) SecurityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v HttpsTriggerResponse) string { return v.SecurityLevel }).(pulumi.StringOutput)
}

// The deployed url for the function.
func (o HttpsTriggerResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v HttpsTriggerResponse) string { return v.Url }).(pulumi.StringOutput)
}

type HttpsTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpsTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpsTriggerResponse)(nil)).Elem()
}

func (o HttpsTriggerResponsePtrOutput) ToHttpsTriggerResponsePtrOutput() HttpsTriggerResponsePtrOutput {
	return o
}

func (o HttpsTriggerResponsePtrOutput) ToHttpsTriggerResponsePtrOutputWithContext(ctx context.Context) HttpsTriggerResponsePtrOutput {
	return o
}

func (o HttpsTriggerResponsePtrOutput) Elem() HttpsTriggerResponseOutput {
	return o.ApplyT(func(v *HttpsTriggerResponse) HttpsTriggerResponse { return *v }).(HttpsTriggerResponseOutput)
}

// The security level for the function.
func (o HttpsTriggerResponsePtrOutput) SecurityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecurityLevel
	}).(pulumi.StringPtrOutput)
}

// The deployed url for the function.
func (o HttpsTriggerResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpsTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type Retry struct {
}

// RetryInput is an input type that accepts RetryArgs and RetryOutput values.
// You can construct a concrete instance of `RetryInput` via:
//
//          RetryArgs{...}
type RetryInput interface {
	pulumi.Input

	ToRetryOutput() RetryOutput
	ToRetryOutputWithContext(context.Context) RetryOutput
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type RetryArgs struct {
}

func (RetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Retry)(nil)).Elem()
}

func (i RetryArgs) ToRetryOutput() RetryOutput {
	return i.ToRetryOutputWithContext(context.Background())
}

func (i RetryArgs) ToRetryOutputWithContext(ctx context.Context) RetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryOutput)
}

func (i RetryArgs) ToRetryPtrOutput() RetryPtrOutput {
	return i.ToRetryPtrOutputWithContext(context.Background())
}

func (i RetryArgs) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryOutput).ToRetryPtrOutputWithContext(ctx)
}

// RetryPtrInput is an input type that accepts RetryArgs, RetryPtr and RetryPtrOutput values.
// You can construct a concrete instance of `RetryPtrInput` via:
//
//          RetryArgs{...}
//
//  or:
//
//          nil
type RetryPtrInput interface {
	pulumi.Input

	ToRetryPtrOutput() RetryPtrOutput
	ToRetryPtrOutputWithContext(context.Context) RetryPtrOutput
}

type retryPtrType RetryArgs

func RetryPtr(v *RetryArgs) RetryPtrInput {
	return (*retryPtrType)(v)
}

func (*retryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Retry)(nil)).Elem()
}

func (i *retryPtrType) ToRetryPtrOutput() RetryPtrOutput {
	return i.ToRetryPtrOutputWithContext(context.Background())
}

func (i *retryPtrType) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPtrOutput)
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type RetryOutput struct{ *pulumi.OutputState }

func (RetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Retry)(nil)).Elem()
}

func (o RetryOutput) ToRetryOutput() RetryOutput {
	return o
}

func (o RetryOutput) ToRetryOutputWithContext(ctx context.Context) RetryOutput {
	return o
}

func (o RetryOutput) ToRetryPtrOutput() RetryPtrOutput {
	return o.ToRetryPtrOutputWithContext(context.Background())
}

func (o RetryOutput) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return o.ApplyT(func(v Retry) *Retry {
		return &v
	}).(RetryPtrOutput)
}

type RetryPtrOutput struct{ *pulumi.OutputState }

func (RetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Retry)(nil)).Elem()
}

func (o RetryPtrOutput) ToRetryPtrOutput() RetryPtrOutput {
	return o
}

func (o RetryPtrOutput) ToRetryPtrOutputWithContext(ctx context.Context) RetryPtrOutput {
	return o
}

func (o RetryPtrOutput) Elem() RetryOutput {
	return o.ApplyT(func(v *Retry) Retry { return *v }).(RetryOutput)
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type RetryResponse struct {
}

// RetryResponseInput is an input type that accepts RetryResponseArgs and RetryResponseOutput values.
// You can construct a concrete instance of `RetryResponseInput` via:
//
//          RetryResponseArgs{...}
type RetryResponseInput interface {
	pulumi.Input

	ToRetryResponseOutput() RetryResponseOutput
	ToRetryResponseOutputWithContext(context.Context) RetryResponseOutput
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type RetryResponseArgs struct {
}

func (RetryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryResponse)(nil)).Elem()
}

func (i RetryResponseArgs) ToRetryResponseOutput() RetryResponseOutput {
	return i.ToRetryResponseOutputWithContext(context.Background())
}

func (i RetryResponseArgs) ToRetryResponseOutputWithContext(ctx context.Context) RetryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryResponseOutput)
}

func (i RetryResponseArgs) ToRetryResponsePtrOutput() RetryResponsePtrOutput {
	return i.ToRetryResponsePtrOutputWithContext(context.Background())
}

func (i RetryResponseArgs) ToRetryResponsePtrOutputWithContext(ctx context.Context) RetryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryResponseOutput).ToRetryResponsePtrOutputWithContext(ctx)
}

// RetryResponsePtrInput is an input type that accepts RetryResponseArgs, RetryResponsePtr and RetryResponsePtrOutput values.
// You can construct a concrete instance of `RetryResponsePtrInput` via:
//
//          RetryResponseArgs{...}
//
//  or:
//
//          nil
type RetryResponsePtrInput interface {
	pulumi.Input

	ToRetryResponsePtrOutput() RetryResponsePtrOutput
	ToRetryResponsePtrOutputWithContext(context.Context) RetryResponsePtrOutput
}

type retryResponsePtrType RetryResponseArgs

func RetryResponsePtr(v *RetryResponseArgs) RetryResponsePtrInput {
	return (*retryResponsePtrType)(v)
}

func (*retryResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryResponse)(nil)).Elem()
}

func (i *retryResponsePtrType) ToRetryResponsePtrOutput() RetryResponsePtrOutput {
	return i.ToRetryResponsePtrOutputWithContext(context.Background())
}

func (i *retryResponsePtrType) ToRetryResponsePtrOutputWithContext(ctx context.Context) RetryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryResponsePtrOutput)
}

// Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.
type RetryResponseOutput struct{ *pulumi.OutputState }

func (RetryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryResponse)(nil)).Elem()
}

func (o RetryResponseOutput) ToRetryResponseOutput() RetryResponseOutput {
	return o
}

func (o RetryResponseOutput) ToRetryResponseOutputWithContext(ctx context.Context) RetryResponseOutput {
	return o
}

func (o RetryResponseOutput) ToRetryResponsePtrOutput() RetryResponsePtrOutput {
	return o.ToRetryResponsePtrOutputWithContext(context.Background())
}

func (o RetryResponseOutput) ToRetryResponsePtrOutputWithContext(ctx context.Context) RetryResponsePtrOutput {
	return o.ApplyT(func(v RetryResponse) *RetryResponse {
		return &v
	}).(RetryResponsePtrOutput)
}

type RetryResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryResponse)(nil)).Elem()
}

func (o RetryResponsePtrOutput) ToRetryResponsePtrOutput() RetryResponsePtrOutput {
	return o
}

func (o RetryResponsePtrOutput) ToRetryResponsePtrOutputWithContext(ctx context.Context) RetryResponsePtrOutput {
	return o
}

func (o RetryResponsePtrOutput) Elem() RetryResponseOutput {
	return o.ApplyT(func(v *RetryResponse) RetryResponse { return *v }).(RetryResponseOutput)
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepository struct {
	// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
	Url *string `pulumi:"url"`
}

// SourceRepositoryInput is an input type that accepts SourceRepositoryArgs and SourceRepositoryOutput values.
// You can construct a concrete instance of `SourceRepositoryInput` via:
//
//          SourceRepositoryArgs{...}
type SourceRepositoryInput interface {
	pulumi.Input

	ToSourceRepositoryOutput() SourceRepositoryOutput
	ToSourceRepositoryOutputWithContext(context.Context) SourceRepositoryOutput
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepositoryArgs struct {
	// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (SourceRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepository)(nil)).Elem()
}

func (i SourceRepositoryArgs) ToSourceRepositoryOutput() SourceRepositoryOutput {
	return i.ToSourceRepositoryOutputWithContext(context.Background())
}

func (i SourceRepositoryArgs) ToSourceRepositoryOutputWithContext(ctx context.Context) SourceRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryOutput)
}

func (i SourceRepositoryArgs) ToSourceRepositoryPtrOutput() SourceRepositoryPtrOutput {
	return i.ToSourceRepositoryPtrOutputWithContext(context.Background())
}

func (i SourceRepositoryArgs) ToSourceRepositoryPtrOutputWithContext(ctx context.Context) SourceRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryOutput).ToSourceRepositoryPtrOutputWithContext(ctx)
}

// SourceRepositoryPtrInput is an input type that accepts SourceRepositoryArgs, SourceRepositoryPtr and SourceRepositoryPtrOutput values.
// You can construct a concrete instance of `SourceRepositoryPtrInput` via:
//
//          SourceRepositoryArgs{...}
//
//  or:
//
//          nil
type SourceRepositoryPtrInput interface {
	pulumi.Input

	ToSourceRepositoryPtrOutput() SourceRepositoryPtrOutput
	ToSourceRepositoryPtrOutputWithContext(context.Context) SourceRepositoryPtrOutput
}

type sourceRepositoryPtrType SourceRepositoryArgs

func SourceRepositoryPtr(v *SourceRepositoryArgs) SourceRepositoryPtrInput {
	return (*sourceRepositoryPtrType)(v)
}

func (*sourceRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepository)(nil)).Elem()
}

func (i *sourceRepositoryPtrType) ToSourceRepositoryPtrOutput() SourceRepositoryPtrOutput {
	return i.ToSourceRepositoryPtrOutputWithContext(context.Background())
}

func (i *sourceRepositoryPtrType) ToSourceRepositoryPtrOutputWithContext(ctx context.Context) SourceRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPtrOutput)
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepositoryOutput struct{ *pulumi.OutputState }

func (SourceRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepository)(nil)).Elem()
}

func (o SourceRepositoryOutput) ToSourceRepositoryOutput() SourceRepositoryOutput {
	return o
}

func (o SourceRepositoryOutput) ToSourceRepositoryOutputWithContext(ctx context.Context) SourceRepositoryOutput {
	return o
}

func (o SourceRepositoryOutput) ToSourceRepositoryPtrOutput() SourceRepositoryPtrOutput {
	return o.ToSourceRepositoryPtrOutputWithContext(context.Background())
}

func (o SourceRepositoryOutput) ToSourceRepositoryPtrOutputWithContext(ctx context.Context) SourceRepositoryPtrOutput {
	return o.ApplyT(func(v SourceRepository) *SourceRepository {
		return &v
	}).(SourceRepositoryPtrOutput)
}

// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
func (o SourceRepositoryOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceRepository) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type SourceRepositoryPtrOutput struct{ *pulumi.OutputState }

func (SourceRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepository)(nil)).Elem()
}

func (o SourceRepositoryPtrOutput) ToSourceRepositoryPtrOutput() SourceRepositoryPtrOutput {
	return o
}

func (o SourceRepositoryPtrOutput) ToSourceRepositoryPtrOutputWithContext(ctx context.Context) SourceRepositoryPtrOutput {
	return o
}

func (o SourceRepositoryPtrOutput) Elem() SourceRepositoryOutput {
	return o.ApplyT(func(v *SourceRepository) SourceRepository { return *v }).(SourceRepositoryOutput)
}

// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
func (o SourceRepositoryPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRepository) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepositoryResponse struct {
	// The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.
	DeployedUrl string `pulumi:"deployedUrl"`
	// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
	Url string `pulumi:"url"`
}

// SourceRepositoryResponseInput is an input type that accepts SourceRepositoryResponseArgs and SourceRepositoryResponseOutput values.
// You can construct a concrete instance of `SourceRepositoryResponseInput` via:
//
//          SourceRepositoryResponseArgs{...}
type SourceRepositoryResponseInput interface {
	pulumi.Input

	ToSourceRepositoryResponseOutput() SourceRepositoryResponseOutput
	ToSourceRepositoryResponseOutputWithContext(context.Context) SourceRepositoryResponseOutput
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepositoryResponseArgs struct {
	// The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.
	DeployedUrl pulumi.StringInput `pulumi:"deployedUrl"`
	// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
	Url pulumi.StringInput `pulumi:"url"`
}

func (SourceRepositoryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryResponse)(nil)).Elem()
}

func (i SourceRepositoryResponseArgs) ToSourceRepositoryResponseOutput() SourceRepositoryResponseOutput {
	return i.ToSourceRepositoryResponseOutputWithContext(context.Background())
}

func (i SourceRepositoryResponseArgs) ToSourceRepositoryResponseOutputWithContext(ctx context.Context) SourceRepositoryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryResponseOutput)
}

func (i SourceRepositoryResponseArgs) ToSourceRepositoryResponsePtrOutput() SourceRepositoryResponsePtrOutput {
	return i.ToSourceRepositoryResponsePtrOutputWithContext(context.Background())
}

func (i SourceRepositoryResponseArgs) ToSourceRepositoryResponsePtrOutputWithContext(ctx context.Context) SourceRepositoryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryResponseOutput).ToSourceRepositoryResponsePtrOutputWithContext(ctx)
}

// SourceRepositoryResponsePtrInput is an input type that accepts SourceRepositoryResponseArgs, SourceRepositoryResponsePtr and SourceRepositoryResponsePtrOutput values.
// You can construct a concrete instance of `SourceRepositoryResponsePtrInput` via:
//
//          SourceRepositoryResponseArgs{...}
//
//  or:
//
//          nil
type SourceRepositoryResponsePtrInput interface {
	pulumi.Input

	ToSourceRepositoryResponsePtrOutput() SourceRepositoryResponsePtrOutput
	ToSourceRepositoryResponsePtrOutputWithContext(context.Context) SourceRepositoryResponsePtrOutput
}

type sourceRepositoryResponsePtrType SourceRepositoryResponseArgs

func SourceRepositoryResponsePtr(v *SourceRepositoryResponseArgs) SourceRepositoryResponsePtrInput {
	return (*sourceRepositoryResponsePtrType)(v)
}

func (*sourceRepositoryResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepositoryResponse)(nil)).Elem()
}

func (i *sourceRepositoryResponsePtrType) ToSourceRepositoryResponsePtrOutput() SourceRepositoryResponsePtrOutput {
	return i.ToSourceRepositoryResponsePtrOutputWithContext(context.Background())
}

func (i *sourceRepositoryResponsePtrType) ToSourceRepositoryResponsePtrOutputWithContext(ctx context.Context) SourceRepositoryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryResponsePtrOutput)
}

// Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.
type SourceRepositoryResponseOutput struct{ *pulumi.OutputState }

func (SourceRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryResponse)(nil)).Elem()
}

func (o SourceRepositoryResponseOutput) ToSourceRepositoryResponseOutput() SourceRepositoryResponseOutput {
	return o
}

func (o SourceRepositoryResponseOutput) ToSourceRepositoryResponseOutputWithContext(ctx context.Context) SourceRepositoryResponseOutput {
	return o
}

func (o SourceRepositoryResponseOutput) ToSourceRepositoryResponsePtrOutput() SourceRepositoryResponsePtrOutput {
	return o.ToSourceRepositoryResponsePtrOutputWithContext(context.Background())
}

func (o SourceRepositoryResponseOutput) ToSourceRepositoryResponsePtrOutputWithContext(ctx context.Context) SourceRepositoryResponsePtrOutput {
	return o.ApplyT(func(v SourceRepositoryResponse) *SourceRepositoryResponse {
		return &v
	}).(SourceRepositoryResponsePtrOutput)
}

// The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.
func (o SourceRepositoryResponseOutput) DeployedUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryResponse) string { return v.DeployedUrl }).(pulumi.StringOutput)
}

// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
func (o SourceRepositoryResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryResponse) string { return v.Url }).(pulumi.StringOutput)
}

type SourceRepositoryResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceRepositoryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepositoryResponse)(nil)).Elem()
}

func (o SourceRepositoryResponsePtrOutput) ToSourceRepositoryResponsePtrOutput() SourceRepositoryResponsePtrOutput {
	return o
}

func (o SourceRepositoryResponsePtrOutput) ToSourceRepositoryResponsePtrOutputWithContext(ctx context.Context) SourceRepositoryResponsePtrOutput {
	return o
}

func (o SourceRepositoryResponsePtrOutput) Elem() SourceRepositoryResponseOutput {
	return o.ApplyT(func(v *SourceRepositoryResponse) SourceRepositoryResponse { return *v }).(SourceRepositoryResponseOutput)
}

// The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.
func (o SourceRepositoryResponsePtrOutput) DeployedUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DeployedUrl
	}).(pulumi.StringPtrOutput)
}

// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.
func (o SourceRepositoryResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(EventTriggerOutput{})
	pulumi.RegisterOutputType(EventTriggerPtrOutput{})
	pulumi.RegisterOutputType(EventTriggerResponseOutput{})
	pulumi.RegisterOutputType(EventTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FailurePolicyOutput{})
	pulumi.RegisterOutputType(FailurePolicyPtrOutput{})
	pulumi.RegisterOutputType(FailurePolicyResponseOutput{})
	pulumi.RegisterOutputType(FailurePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpsTriggerOutput{})
	pulumi.RegisterOutputType(HttpsTriggerPtrOutput{})
	pulumi.RegisterOutputType(HttpsTriggerResponseOutput{})
	pulumi.RegisterOutputType(HttpsTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(RetryOutput{})
	pulumi.RegisterOutputType(RetryPtrOutput{})
	pulumi.RegisterOutputType(RetryResponseOutput{})
	pulumi.RegisterOutputType(RetryResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceRepositoryOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPtrOutput{})
	pulumi.RegisterOutputType(SourceRepositoryResponseOutput{})
	pulumi.RegisterOutputType(SourceRepositoryResponsePtrOutput{})
}
