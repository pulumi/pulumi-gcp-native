// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// ExprResponseInput is an input type that accepts ExprResponseArgs and ExprResponseOutput values.
// You can construct a concrete instance of `ExprResponseInput` via:
//
//          ExprResponseArgs{...}
type ExprResponseInput interface {
	pulumi.Input

	ToExprResponseOutput() ExprResponseOutput
	ToExprResponseOutputWithContext(context.Context) ExprResponseOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ExprResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (i ExprResponseArgs) ToExprResponseOutput() ExprResponseOutput {
	return i.ToExprResponseOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput)
}

func (i ExprResponseArgs) ToExprResponsePtrOutput() ExprResponsePtrOutput {
	return i.ToExprResponsePtrOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponsePtrOutputWithContext(ctx context.Context) ExprResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput).ToExprResponsePtrOutputWithContext(ctx)
}

// ExprResponsePtrInput is an input type that accepts ExprResponseArgs, ExprResponsePtr and ExprResponsePtrOutput values.
// You can construct a concrete instance of `ExprResponsePtrInput` via:
//
//          ExprResponseArgs{...}
//
//  or:
//
//          nil
type ExprResponsePtrInput interface {
	pulumi.Input

	ToExprResponsePtrOutput() ExprResponsePtrOutput
	ToExprResponsePtrOutputWithContext(context.Context) ExprResponsePtrOutput
}

type exprResponsePtrType ExprResponseArgs

func ExprResponsePtr(v *ExprResponseArgs) ExprResponsePtrInput {
	return (*exprResponsePtrType)(v)
}

func (*exprResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExprResponse)(nil)).Elem()
}

func (i *exprResponsePtrType) ToExprResponsePtrOutput() ExprResponsePtrOutput {
	return i.ToExprResponsePtrOutputWithContext(context.Background())
}

func (i *exprResponsePtrType) ToExprResponsePtrOutputWithContext(ctx context.Context) ExprResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponsePtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponsePtrOutput() ExprResponsePtrOutput {
	return o.ToExprResponsePtrOutputWithContext(context.Background())
}

func (o ExprResponseOutput) ToExprResponsePtrOutputWithContext(ctx context.Context) ExprResponsePtrOutput {
	return o.ApplyT(func(v ExprResponse) *ExprResponse {
		return &v
	}).(ExprResponsePtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

type ExprResponsePtrOutput struct{ *pulumi.OutputState }

func (ExprResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExprResponse)(nil)).Elem()
}

func (o ExprResponsePtrOutput) ToExprResponsePtrOutput() ExprResponsePtrOutput {
	return o
}

func (o ExprResponsePtrOutput) ToExprResponsePtrOutputWithContext(ctx context.Context) ExprResponsePtrOutput {
	return o
}

func (o ExprResponsePtrOutput) Elem() ExprResponseOutput {
	return o.ApplyT(func(v *ExprResponse) ExprResponse { return *v }).(ExprResponseOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExprResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponsePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExprResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExprResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponsePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExprResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

// Output configuration for asset feed destination.
type FeedOutputConfig struct {
	// Destination on Pub/Sub.
	PubsubDestination *PubsubDestination `pulumi:"pubsubDestination"`
}

// FeedOutputConfigInput is an input type that accepts FeedOutputConfigArgs and FeedOutputConfigOutput values.
// You can construct a concrete instance of `FeedOutputConfigInput` via:
//
//          FeedOutputConfigArgs{...}
type FeedOutputConfigInput interface {
	pulumi.Input

	ToFeedOutputConfigOutput() FeedOutputConfigOutput
	ToFeedOutputConfigOutputWithContext(context.Context) FeedOutputConfigOutput
}

// Output configuration for asset feed destination.
type FeedOutputConfigArgs struct {
	// Destination on Pub/Sub.
	PubsubDestination PubsubDestinationPtrInput `pulumi:"pubsubDestination"`
}

func (FeedOutputConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeedOutputConfig)(nil)).Elem()
}

func (i FeedOutputConfigArgs) ToFeedOutputConfigOutput() FeedOutputConfigOutput {
	return i.ToFeedOutputConfigOutputWithContext(context.Background())
}

func (i FeedOutputConfigArgs) ToFeedOutputConfigOutputWithContext(ctx context.Context) FeedOutputConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedOutputConfigOutput)
}

func (i FeedOutputConfigArgs) ToFeedOutputConfigPtrOutput() FeedOutputConfigPtrOutput {
	return i.ToFeedOutputConfigPtrOutputWithContext(context.Background())
}

func (i FeedOutputConfigArgs) ToFeedOutputConfigPtrOutputWithContext(ctx context.Context) FeedOutputConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedOutputConfigOutput).ToFeedOutputConfigPtrOutputWithContext(ctx)
}

// FeedOutputConfigPtrInput is an input type that accepts FeedOutputConfigArgs, FeedOutputConfigPtr and FeedOutputConfigPtrOutput values.
// You can construct a concrete instance of `FeedOutputConfigPtrInput` via:
//
//          FeedOutputConfigArgs{...}
//
//  or:
//
//          nil
type FeedOutputConfigPtrInput interface {
	pulumi.Input

	ToFeedOutputConfigPtrOutput() FeedOutputConfigPtrOutput
	ToFeedOutputConfigPtrOutputWithContext(context.Context) FeedOutputConfigPtrOutput
}

type feedOutputConfigPtrType FeedOutputConfigArgs

func FeedOutputConfigPtr(v *FeedOutputConfigArgs) FeedOutputConfigPtrInput {
	return (*feedOutputConfigPtrType)(v)
}

func (*feedOutputConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeedOutputConfig)(nil)).Elem()
}

func (i *feedOutputConfigPtrType) ToFeedOutputConfigPtrOutput() FeedOutputConfigPtrOutput {
	return i.ToFeedOutputConfigPtrOutputWithContext(context.Background())
}

func (i *feedOutputConfigPtrType) ToFeedOutputConfigPtrOutputWithContext(ctx context.Context) FeedOutputConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedOutputConfigPtrOutput)
}

// Output configuration for asset feed destination.
type FeedOutputConfigOutput struct{ *pulumi.OutputState }

func (FeedOutputConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeedOutputConfig)(nil)).Elem()
}

func (o FeedOutputConfigOutput) ToFeedOutputConfigOutput() FeedOutputConfigOutput {
	return o
}

func (o FeedOutputConfigOutput) ToFeedOutputConfigOutputWithContext(ctx context.Context) FeedOutputConfigOutput {
	return o
}

func (o FeedOutputConfigOutput) ToFeedOutputConfigPtrOutput() FeedOutputConfigPtrOutput {
	return o.ToFeedOutputConfigPtrOutputWithContext(context.Background())
}

func (o FeedOutputConfigOutput) ToFeedOutputConfigPtrOutputWithContext(ctx context.Context) FeedOutputConfigPtrOutput {
	return o.ApplyT(func(v FeedOutputConfig) *FeedOutputConfig {
		return &v
	}).(FeedOutputConfigPtrOutput)
}

// Destination on Pub/Sub.
func (o FeedOutputConfigOutput) PubsubDestination() PubsubDestinationPtrOutput {
	return o.ApplyT(func(v FeedOutputConfig) *PubsubDestination { return v.PubsubDestination }).(PubsubDestinationPtrOutput)
}

type FeedOutputConfigPtrOutput struct{ *pulumi.OutputState }

func (FeedOutputConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeedOutputConfig)(nil)).Elem()
}

func (o FeedOutputConfigPtrOutput) ToFeedOutputConfigPtrOutput() FeedOutputConfigPtrOutput {
	return o
}

func (o FeedOutputConfigPtrOutput) ToFeedOutputConfigPtrOutputWithContext(ctx context.Context) FeedOutputConfigPtrOutput {
	return o
}

func (o FeedOutputConfigPtrOutput) Elem() FeedOutputConfigOutput {
	return o.ApplyT(func(v *FeedOutputConfig) FeedOutputConfig { return *v }).(FeedOutputConfigOutput)
}

// Destination on Pub/Sub.
func (o FeedOutputConfigPtrOutput) PubsubDestination() PubsubDestinationPtrOutput {
	return o.ApplyT(func(v *FeedOutputConfig) *PubsubDestination {
		if v == nil {
			return nil
		}
		return v.PubsubDestination
	}).(PubsubDestinationPtrOutput)
}

// Output configuration for asset feed destination.
type FeedOutputConfigResponse struct {
	// Destination on Pub/Sub.
	PubsubDestination PubsubDestinationResponse `pulumi:"pubsubDestination"`
}

// FeedOutputConfigResponseInput is an input type that accepts FeedOutputConfigResponseArgs and FeedOutputConfigResponseOutput values.
// You can construct a concrete instance of `FeedOutputConfigResponseInput` via:
//
//          FeedOutputConfigResponseArgs{...}
type FeedOutputConfigResponseInput interface {
	pulumi.Input

	ToFeedOutputConfigResponseOutput() FeedOutputConfigResponseOutput
	ToFeedOutputConfigResponseOutputWithContext(context.Context) FeedOutputConfigResponseOutput
}

// Output configuration for asset feed destination.
type FeedOutputConfigResponseArgs struct {
	// Destination on Pub/Sub.
	PubsubDestination PubsubDestinationResponseInput `pulumi:"pubsubDestination"`
}

func (FeedOutputConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeedOutputConfigResponse)(nil)).Elem()
}

func (i FeedOutputConfigResponseArgs) ToFeedOutputConfigResponseOutput() FeedOutputConfigResponseOutput {
	return i.ToFeedOutputConfigResponseOutputWithContext(context.Background())
}

func (i FeedOutputConfigResponseArgs) ToFeedOutputConfigResponseOutputWithContext(ctx context.Context) FeedOutputConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedOutputConfigResponseOutput)
}

func (i FeedOutputConfigResponseArgs) ToFeedOutputConfigResponsePtrOutput() FeedOutputConfigResponsePtrOutput {
	return i.ToFeedOutputConfigResponsePtrOutputWithContext(context.Background())
}

func (i FeedOutputConfigResponseArgs) ToFeedOutputConfigResponsePtrOutputWithContext(ctx context.Context) FeedOutputConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedOutputConfigResponseOutput).ToFeedOutputConfigResponsePtrOutputWithContext(ctx)
}

// FeedOutputConfigResponsePtrInput is an input type that accepts FeedOutputConfigResponseArgs, FeedOutputConfigResponsePtr and FeedOutputConfigResponsePtrOutput values.
// You can construct a concrete instance of `FeedOutputConfigResponsePtrInput` via:
//
//          FeedOutputConfigResponseArgs{...}
//
//  or:
//
//          nil
type FeedOutputConfigResponsePtrInput interface {
	pulumi.Input

	ToFeedOutputConfigResponsePtrOutput() FeedOutputConfigResponsePtrOutput
	ToFeedOutputConfigResponsePtrOutputWithContext(context.Context) FeedOutputConfigResponsePtrOutput
}

type feedOutputConfigResponsePtrType FeedOutputConfigResponseArgs

func FeedOutputConfigResponsePtr(v *FeedOutputConfigResponseArgs) FeedOutputConfigResponsePtrInput {
	return (*feedOutputConfigResponsePtrType)(v)
}

func (*feedOutputConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeedOutputConfigResponse)(nil)).Elem()
}

func (i *feedOutputConfigResponsePtrType) ToFeedOutputConfigResponsePtrOutput() FeedOutputConfigResponsePtrOutput {
	return i.ToFeedOutputConfigResponsePtrOutputWithContext(context.Background())
}

func (i *feedOutputConfigResponsePtrType) ToFeedOutputConfigResponsePtrOutputWithContext(ctx context.Context) FeedOutputConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedOutputConfigResponsePtrOutput)
}

// Output configuration for asset feed destination.
type FeedOutputConfigResponseOutput struct{ *pulumi.OutputState }

func (FeedOutputConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeedOutputConfigResponse)(nil)).Elem()
}

func (o FeedOutputConfigResponseOutput) ToFeedOutputConfigResponseOutput() FeedOutputConfigResponseOutput {
	return o
}

func (o FeedOutputConfigResponseOutput) ToFeedOutputConfigResponseOutputWithContext(ctx context.Context) FeedOutputConfigResponseOutput {
	return o
}

func (o FeedOutputConfigResponseOutput) ToFeedOutputConfigResponsePtrOutput() FeedOutputConfigResponsePtrOutput {
	return o.ToFeedOutputConfigResponsePtrOutputWithContext(context.Background())
}

func (o FeedOutputConfigResponseOutput) ToFeedOutputConfigResponsePtrOutputWithContext(ctx context.Context) FeedOutputConfigResponsePtrOutput {
	return o.ApplyT(func(v FeedOutputConfigResponse) *FeedOutputConfigResponse {
		return &v
	}).(FeedOutputConfigResponsePtrOutput)
}

// Destination on Pub/Sub.
func (o FeedOutputConfigResponseOutput) PubsubDestination() PubsubDestinationResponseOutput {
	return o.ApplyT(func(v FeedOutputConfigResponse) PubsubDestinationResponse { return v.PubsubDestination }).(PubsubDestinationResponseOutput)
}

type FeedOutputConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (FeedOutputConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeedOutputConfigResponse)(nil)).Elem()
}

func (o FeedOutputConfigResponsePtrOutput) ToFeedOutputConfigResponsePtrOutput() FeedOutputConfigResponsePtrOutput {
	return o
}

func (o FeedOutputConfigResponsePtrOutput) ToFeedOutputConfigResponsePtrOutputWithContext(ctx context.Context) FeedOutputConfigResponsePtrOutput {
	return o
}

func (o FeedOutputConfigResponsePtrOutput) Elem() FeedOutputConfigResponseOutput {
	return o.ApplyT(func(v *FeedOutputConfigResponse) FeedOutputConfigResponse { return *v }).(FeedOutputConfigResponseOutput)
}

// Destination on Pub/Sub.
func (o FeedOutputConfigResponsePtrOutput) PubsubDestination() PubsubDestinationResponsePtrOutput {
	return o.ApplyT(func(v *FeedOutputConfigResponse) *PubsubDestinationResponse {
		if v == nil {
			return nil
		}
		return &v.PubsubDestination
	}).(PubsubDestinationResponsePtrOutput)
}

// A Pub/Sub destination.
type PubsubDestination struct {
	// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
	Topic *string `pulumi:"topic"`
}

// PubsubDestinationInput is an input type that accepts PubsubDestinationArgs and PubsubDestinationOutput values.
// You can construct a concrete instance of `PubsubDestinationInput` via:
//
//          PubsubDestinationArgs{...}
type PubsubDestinationInput interface {
	pulumi.Input

	ToPubsubDestinationOutput() PubsubDestinationOutput
	ToPubsubDestinationOutputWithContext(context.Context) PubsubDestinationOutput
}

// A Pub/Sub destination.
type PubsubDestinationArgs struct {
	// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PubsubDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestination)(nil)).Elem()
}

func (i PubsubDestinationArgs) ToPubsubDestinationOutput() PubsubDestinationOutput {
	return i.ToPubsubDestinationOutputWithContext(context.Background())
}

func (i PubsubDestinationArgs) ToPubsubDestinationOutputWithContext(ctx context.Context) PubsubDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationOutput)
}

func (i PubsubDestinationArgs) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return i.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (i PubsubDestinationArgs) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationOutput).ToPubsubDestinationPtrOutputWithContext(ctx)
}

// PubsubDestinationPtrInput is an input type that accepts PubsubDestinationArgs, PubsubDestinationPtr and PubsubDestinationPtrOutput values.
// You can construct a concrete instance of `PubsubDestinationPtrInput` via:
//
//          PubsubDestinationArgs{...}
//
//  or:
//
//          nil
type PubsubDestinationPtrInput interface {
	pulumi.Input

	ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput
	ToPubsubDestinationPtrOutputWithContext(context.Context) PubsubDestinationPtrOutput
}

type pubsubDestinationPtrType PubsubDestinationArgs

func PubsubDestinationPtr(v *PubsubDestinationArgs) PubsubDestinationPtrInput {
	return (*pubsubDestinationPtrType)(v)
}

func (*pubsubDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestination)(nil)).Elem()
}

func (i *pubsubDestinationPtrType) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return i.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (i *pubsubDestinationPtrType) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationPtrOutput)
}

// A Pub/Sub destination.
type PubsubDestinationOutput struct{ *pulumi.OutputState }

func (PubsubDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestination)(nil)).Elem()
}

func (o PubsubDestinationOutput) ToPubsubDestinationOutput() PubsubDestinationOutput {
	return o
}

func (o PubsubDestinationOutput) ToPubsubDestinationOutputWithContext(ctx context.Context) PubsubDestinationOutput {
	return o
}

func (o PubsubDestinationOutput) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return o.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (o PubsubDestinationOutput) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return o.ApplyT(func(v PubsubDestination) *PubsubDestination {
		return &v
	}).(PubsubDestinationPtrOutput)
}

// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
func (o PubsubDestinationOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubsubDestination) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type PubsubDestinationPtrOutput struct{ *pulumi.OutputState }

func (PubsubDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestination)(nil)).Elem()
}

func (o PubsubDestinationPtrOutput) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return o
}

func (o PubsubDestinationPtrOutput) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return o
}

func (o PubsubDestinationPtrOutput) Elem() PubsubDestinationOutput {
	return o.ApplyT(func(v *PubsubDestination) PubsubDestination { return *v }).(PubsubDestinationOutput)
}

// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
func (o PubsubDestinationPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubDestination) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// A Pub/Sub destination.
type PubsubDestinationResponse struct {
	// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
	Topic string `pulumi:"topic"`
}

// PubsubDestinationResponseInput is an input type that accepts PubsubDestinationResponseArgs and PubsubDestinationResponseOutput values.
// You can construct a concrete instance of `PubsubDestinationResponseInput` via:
//
//          PubsubDestinationResponseArgs{...}
type PubsubDestinationResponseInput interface {
	pulumi.Input

	ToPubsubDestinationResponseOutput() PubsubDestinationResponseOutput
	ToPubsubDestinationResponseOutputWithContext(context.Context) PubsubDestinationResponseOutput
}

// A Pub/Sub destination.
type PubsubDestinationResponseArgs struct {
	// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (PubsubDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestinationResponse)(nil)).Elem()
}

func (i PubsubDestinationResponseArgs) ToPubsubDestinationResponseOutput() PubsubDestinationResponseOutput {
	return i.ToPubsubDestinationResponseOutputWithContext(context.Background())
}

func (i PubsubDestinationResponseArgs) ToPubsubDestinationResponseOutputWithContext(ctx context.Context) PubsubDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationResponseOutput)
}

func (i PubsubDestinationResponseArgs) ToPubsubDestinationResponsePtrOutput() PubsubDestinationResponsePtrOutput {
	return i.ToPubsubDestinationResponsePtrOutputWithContext(context.Background())
}

func (i PubsubDestinationResponseArgs) ToPubsubDestinationResponsePtrOutputWithContext(ctx context.Context) PubsubDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationResponseOutput).ToPubsubDestinationResponsePtrOutputWithContext(ctx)
}

// PubsubDestinationResponsePtrInput is an input type that accepts PubsubDestinationResponseArgs, PubsubDestinationResponsePtr and PubsubDestinationResponsePtrOutput values.
// You can construct a concrete instance of `PubsubDestinationResponsePtrInput` via:
//
//          PubsubDestinationResponseArgs{...}
//
//  or:
//
//          nil
type PubsubDestinationResponsePtrInput interface {
	pulumi.Input

	ToPubsubDestinationResponsePtrOutput() PubsubDestinationResponsePtrOutput
	ToPubsubDestinationResponsePtrOutputWithContext(context.Context) PubsubDestinationResponsePtrOutput
}

type pubsubDestinationResponsePtrType PubsubDestinationResponseArgs

func PubsubDestinationResponsePtr(v *PubsubDestinationResponseArgs) PubsubDestinationResponsePtrInput {
	return (*pubsubDestinationResponsePtrType)(v)
}

func (*pubsubDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestinationResponse)(nil)).Elem()
}

func (i *pubsubDestinationResponsePtrType) ToPubsubDestinationResponsePtrOutput() PubsubDestinationResponsePtrOutput {
	return i.ToPubsubDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *pubsubDestinationResponsePtrType) ToPubsubDestinationResponsePtrOutputWithContext(ctx context.Context) PubsubDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationResponsePtrOutput)
}

// A Pub/Sub destination.
type PubsubDestinationResponseOutput struct{ *pulumi.OutputState }

func (PubsubDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestinationResponse)(nil)).Elem()
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponseOutput() PubsubDestinationResponseOutput {
	return o
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponseOutputWithContext(ctx context.Context) PubsubDestinationResponseOutput {
	return o
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponsePtrOutput() PubsubDestinationResponsePtrOutput {
	return o.ToPubsubDestinationResponsePtrOutputWithContext(context.Background())
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponsePtrOutputWithContext(ctx context.Context) PubsubDestinationResponsePtrOutput {
	return o.ApplyT(func(v PubsubDestinationResponse) *PubsubDestinationResponse {
		return &v
	}).(PubsubDestinationResponsePtrOutput)
}

// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
func (o PubsubDestinationResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubDestinationResponse) string { return v.Topic }).(pulumi.StringOutput)
}

type PubsubDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (PubsubDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestinationResponse)(nil)).Elem()
}

func (o PubsubDestinationResponsePtrOutput) ToPubsubDestinationResponsePtrOutput() PubsubDestinationResponsePtrOutput {
	return o
}

func (o PubsubDestinationResponsePtrOutput) ToPubsubDestinationResponsePtrOutputWithContext(ctx context.Context) PubsubDestinationResponsePtrOutput {
	return o
}

func (o PubsubDestinationResponsePtrOutput) Elem() PubsubDestinationResponseOutput {
	return o.ApplyT(func(v *PubsubDestinationResponse) PubsubDestinationResponse { return *v }).(PubsubDestinationResponseOutput)
}

// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
func (o PubsubDestinationResponsePtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Topic
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(ExprResponsePtrOutput{})
	pulumi.RegisterOutputType(FeedOutputConfigOutput{})
	pulumi.RegisterOutputType(FeedOutputConfigPtrOutput{})
	pulumi.RegisterOutputType(FeedOutputConfigResponseOutput{})
	pulumi.RegisterOutputType(FeedOutputConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(PubsubDestinationOutput{})
	pulumi.RegisterOutputType(PubsubDestinationPtrOutput{})
	pulumi.RegisterOutputType(PubsubDestinationResponseOutput{})
	pulumi.RegisterOutputType(PubsubDestinationResponsePtrOutput{})
}
