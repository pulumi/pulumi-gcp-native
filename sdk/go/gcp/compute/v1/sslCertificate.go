// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a SslCertificate resource in the specified project using the data included in the request.
type SslCertificate struct {
	pulumi.CustomResourceState

	// A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// [Output Only] Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// [Output Only] Expire time of the certificate. RFC3339
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Configuration and status of a managed SSL certificate.
	Managed SslCertificateManagedSslCertificateResponseOutput `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
	Region pulumi.StringOutput `pulumi:"region"`
	// [Output only] Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Configuration and status of a self-managed SSL certificate.
	SelfManaged SslCertificateSelfManagedSslCertificateResponseOutput `pulumi:"selfManaged"`
	// [Output Only] Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames pulumi.StringArrayOutput `pulumi:"subjectAlternativeNames"`
	// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSslCertificate registers a new resource with the given unique name, arguments, and options.
func NewSslCertificate(ctx *pulumi.Context,
	name string, args *SslCertificateArgs, opts ...pulumi.ResourceOption) (*SslCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.SslCertificate == nil {
		return nil, errors.New("invalid value for required argument 'SslCertificate'")
	}
	var resource SslCertificate
	err := ctx.RegisterResource("gcp-native:compute/v1:SslCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslCertificate gets an existing SslCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslCertificateState, opts ...pulumi.ResourceOption) (*SslCertificate, error) {
	var resource SslCertificate
	err := ctx.ReadResource("gcp-native:compute/v1:SslCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SslCertificate resources.
type sslCertificateState struct {
	// A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate *string `pulumi:"certificate"`
	// [Output Only] Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// [Output Only] Expire time of the certificate. RFC3339
	ExpireTime *string `pulumi:"expireTime"`
	// [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates.
	Kind *string `pulumi:"kind"`
	// Configuration and status of a managed SSL certificate.
	Managed *SslCertificateManagedSslCertificateResponse `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
	PrivateKey *string `pulumi:"privateKey"`
	// [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
	Region *string `pulumi:"region"`
	// [Output only] Server-defined URL for the resource.
	SelfLink *string `pulumi:"selfLink"`
	// Configuration and status of a self-managed SSL certificate.
	SelfManaged *SslCertificateSelfManagedSslCertificateResponse `pulumi:"selfManaged"`
	// [Output Only] Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
	Type *string `pulumi:"type"`
}

type SslCertificateState struct {
	// A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate pulumi.StringPtrInput
	// [Output Only] Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// [Output Only] Expire time of the certificate. RFC3339
	ExpireTime pulumi.StringPtrInput
	// [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates.
	Kind pulumi.StringPtrInput
	// Configuration and status of a managed SSL certificate.
	Managed SslCertificateManagedSslCertificateResponsePtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
	PrivateKey pulumi.StringPtrInput
	// [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
	Region pulumi.StringPtrInput
	// [Output only] Server-defined URL for the resource.
	SelfLink pulumi.StringPtrInput
	// Configuration and status of a self-managed SSL certificate.
	SelfManaged SslCertificateSelfManagedSslCertificateResponsePtrInput
	// [Output Only] Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames pulumi.StringArrayInput
	// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
	Type pulumi.StringPtrInput
}

func (SslCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslCertificateState)(nil)).Elem()
}

type sslCertificateArgs struct {
	// A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate *string `pulumi:"certificate"`
	// [Output Only] Creation timestamp in RFC3339 text format.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// [Output Only] Expire time of the certificate. RFC3339
	ExpireTime *string `pulumi:"expireTime"`
	// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
	Id *string `pulumi:"id"`
	// [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates.
	Kind *string `pulumi:"kind"`
	// Configuration and status of a managed SSL certificate.
	Managed *SslCertificateManagedSslCertificate `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
	PrivateKey *string `pulumi:"privateKey"`
	Project    string  `pulumi:"project"`
	// [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
	Region *string `pulumi:"region"`
	// [Output only] Server-defined URL for the resource.
	SelfLink *string `pulumi:"selfLink"`
	// Configuration and status of a self-managed SSL certificate.
	SelfManaged    *SslCertificateSelfManagedSslCertificate `pulumi:"selfManaged"`
	SslCertificate string                                   `pulumi:"sslCertificate"`
	// [Output Only] Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a SslCertificate resource.
type SslCertificateArgs struct {
	// A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate pulumi.StringPtrInput
	// [Output Only] Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringPtrInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// [Output Only] Expire time of the certificate. RFC3339
	ExpireTime pulumi.StringPtrInput
	// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
	Id pulumi.StringPtrInput
	// [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates.
	Kind pulumi.StringPtrInput
	// Configuration and status of a managed SSL certificate.
	Managed SslCertificateManagedSslCertificatePtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
	PrivateKey pulumi.StringPtrInput
	Project    pulumi.StringInput
	// [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
	Region pulumi.StringPtrInput
	// [Output only] Server-defined URL for the resource.
	SelfLink pulumi.StringPtrInput
	// Configuration and status of a self-managed SSL certificate.
	SelfManaged    SslCertificateSelfManagedSslCertificatePtrInput
	SslCertificate pulumi.StringInput
	// [Output Only] Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames pulumi.StringArrayInput
	// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
	Type pulumi.StringPtrInput
}

func (SslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslCertificateArgs)(nil)).Elem()
}

type SslCertificateInput interface {
	pulumi.Input

	ToSslCertificateOutput() SslCertificateOutput
	ToSslCertificateOutputWithContext(ctx context.Context) SslCertificateOutput
}

func (*SslCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificate)(nil))
}

func (i *SslCertificate) ToSslCertificateOutput() SslCertificateOutput {
	return i.ToSslCertificateOutputWithContext(context.Background())
}

func (i *SslCertificate) ToSslCertificateOutputWithContext(ctx context.Context) SslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateOutput)
}

type SslCertificateOutput struct {
	*pulumi.OutputState
}

func (SslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificate)(nil))
}

func (o SslCertificateOutput) ToSslCertificateOutput() SslCertificateOutput {
	return o
}

func (o SslCertificateOutput) ToSslCertificateOutputWithContext(ctx context.Context) SslCertificateOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SslCertificateOutput{})
}
