// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-gcp-native/sdk/go/gcp"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "gcp-native:compute/v1:Address":
		r = &Address{}
	case "gcp-native:compute/v1:Autoscaler":
		r = &Autoscaler{}
	case "gcp-native:compute/v1:BackendBucket":
		r = &BackendBucket{}
	case "gcp-native:compute/v1:BackendService":
		r = &BackendService{}
	case "gcp-native:compute/v1:Disk":
		r = &Disk{}
	case "gcp-native:compute/v1:DiskIamPolicy":
		r = &DiskIamPolicy{}
	case "gcp-native:compute/v1:ExternalVpnGateway":
		r = &ExternalVpnGateway{}
	case "gcp-native:compute/v1:Firewall":
		r = &Firewall{}
	case "gcp-native:compute/v1:FirewallPolicy":
		r = &FirewallPolicy{}
	case "gcp-native:compute/v1:FirewallPolicyIamPolicy":
		r = &FirewallPolicyIamPolicy{}
	case "gcp-native:compute/v1:ForwardingRule":
		r = &ForwardingRule{}
	case "gcp-native:compute/v1:GlobalAddress":
		r = &GlobalAddress{}
	case "gcp-native:compute/v1:GlobalForwardingRule":
		r = &GlobalForwardingRule{}
	case "gcp-native:compute/v1:GlobalNetworkEndpointGroup":
		r = &GlobalNetworkEndpointGroup{}
	case "gcp-native:compute/v1:GlobalPublicDelegatedPrefix":
		r = &GlobalPublicDelegatedPrefix{}
	case "gcp-native:compute/v1:HealthCheck":
		r = &HealthCheck{}
	case "gcp-native:compute/v1:HttpHealthCheck":
		r = &HttpHealthCheck{}
	case "gcp-native:compute/v1:HttpsHealthCheck":
		r = &HttpsHealthCheck{}
	case "gcp-native:compute/v1:Image":
		r = &Image{}
	case "gcp-native:compute/v1:ImageIamPolicy":
		r = &ImageIamPolicy{}
	case "gcp-native:compute/v1:Instance":
		r = &Instance{}
	case "gcp-native:compute/v1:InstanceGroup":
		r = &InstanceGroup{}
	case "gcp-native:compute/v1:InstanceGroupManager":
		r = &InstanceGroupManager{}
	case "gcp-native:compute/v1:InstanceIamPolicy":
		r = &InstanceIamPolicy{}
	case "gcp-native:compute/v1:InstanceTemplate":
		r = &InstanceTemplate{}
	case "gcp-native:compute/v1:InstanceTemplateIamPolicy":
		r = &InstanceTemplateIamPolicy{}
	case "gcp-native:compute/v1:Interconnect":
		r = &Interconnect{}
	case "gcp-native:compute/v1:InterconnectAttachment":
		r = &InterconnectAttachment{}
	case "gcp-native:compute/v1:License":
		r = &License{}
	case "gcp-native:compute/v1:LicenseIamPolicy":
		r = &LicenseIamPolicy{}
	case "gcp-native:compute/v1:Network":
		r = &Network{}
	case "gcp-native:compute/v1:NetworkEndpointGroup":
		r = &NetworkEndpointGroup{}
	case "gcp-native:compute/v1:NodeGroup":
		r = &NodeGroup{}
	case "gcp-native:compute/v1:NodeGroupIamPolicy":
		r = &NodeGroupIamPolicy{}
	case "gcp-native:compute/v1:NodeTemplate":
		r = &NodeTemplate{}
	case "gcp-native:compute/v1:NodeTemplateIamPolicy":
		r = &NodeTemplateIamPolicy{}
	case "gcp-native:compute/v1:PacketMirroring":
		r = &PacketMirroring{}
	case "gcp-native:compute/v1:PublicAdvertisedPrefix":
		r = &PublicAdvertisedPrefix{}
	case "gcp-native:compute/v1:PublicDelegatedPrefix":
		r = &PublicDelegatedPrefix{}
	case "gcp-native:compute/v1:RegionAutoscaler":
		r = &RegionAutoscaler{}
	case "gcp-native:compute/v1:RegionBackendService":
		r = &RegionBackendService{}
	case "gcp-native:compute/v1:RegionCommitment":
		r = &RegionCommitment{}
	case "gcp-native:compute/v1:RegionDisk":
		r = &RegionDisk{}
	case "gcp-native:compute/v1:RegionDiskIamPolicy":
		r = &RegionDiskIamPolicy{}
	case "gcp-native:compute/v1:RegionHealthCheck":
		r = &RegionHealthCheck{}
	case "gcp-native:compute/v1:RegionHealthCheckService":
		r = &RegionHealthCheckService{}
	case "gcp-native:compute/v1:RegionInstanceGroupManager":
		r = &RegionInstanceGroupManager{}
	case "gcp-native:compute/v1:RegionNetworkEndpointGroup":
		r = &RegionNetworkEndpointGroup{}
	case "gcp-native:compute/v1:RegionNotificationEndpoint":
		r = &RegionNotificationEndpoint{}
	case "gcp-native:compute/v1:RegionSslCertificate":
		r = &RegionSslCertificate{}
	case "gcp-native:compute/v1:RegionTargetHttpProxy":
		r = &RegionTargetHttpProxy{}
	case "gcp-native:compute/v1:RegionTargetHttpsProxy":
		r = &RegionTargetHttpsProxy{}
	case "gcp-native:compute/v1:RegionUrlMap":
		r = &RegionUrlMap{}
	case "gcp-native:compute/v1:Reservation":
		r = &Reservation{}
	case "gcp-native:compute/v1:ReservationIamPolicy":
		r = &ReservationIamPolicy{}
	case "gcp-native:compute/v1:ResourcePolicy":
		r = &ResourcePolicy{}
	case "gcp-native:compute/v1:ResourcePolicyIamPolicy":
		r = &ResourcePolicyIamPolicy{}
	case "gcp-native:compute/v1:Route":
		r = &Route{}
	case "gcp-native:compute/v1:Router":
		r = &Router{}
	case "gcp-native:compute/v1:SecurityPolicy":
		r = &SecurityPolicy{}
	case "gcp-native:compute/v1:SnapshotIamPolicy":
		r = &SnapshotIamPolicy{}
	case "gcp-native:compute/v1:SslCertificate":
		r = &SslCertificate{}
	case "gcp-native:compute/v1:SslPolicy":
		r = &SslPolicy{}
	case "gcp-native:compute/v1:Subnetwork":
		r = &Subnetwork{}
	case "gcp-native:compute/v1:SubnetworkIamPolicy":
		r = &SubnetworkIamPolicy{}
	case "gcp-native:compute/v1:TargetGrpcProxy":
		r = &TargetGrpcProxy{}
	case "gcp-native:compute/v1:TargetHttpProxy":
		r = &TargetHttpProxy{}
	case "gcp-native:compute/v1:TargetHttpsProxy":
		r = &TargetHttpsProxy{}
	case "gcp-native:compute/v1:TargetInstance":
		r = &TargetInstance{}
	case "gcp-native:compute/v1:TargetPool":
		r = &TargetPool{}
	case "gcp-native:compute/v1:TargetSslProxy":
		r = &TargetSslProxy{}
	case "gcp-native:compute/v1:TargetTcpProxy":
		r = &TargetTcpProxy{}
	case "gcp-native:compute/v1:TargetVpnGateway":
		r = &TargetVpnGateway{}
	case "gcp-native:compute/v1:UrlMap":
		r = &UrlMap{}
	case "gcp-native:compute/v1:VpnGateway":
		r = &VpnGateway{}
	case "gcp-native:compute/v1:VpnTunnel":
		r = &VpnTunnel{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := gcp.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"gcp-native",
		"compute/v1",
		&module{version},
	)
}
