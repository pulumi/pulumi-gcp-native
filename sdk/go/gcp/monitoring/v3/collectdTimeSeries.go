// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Stackdriver Monitoring Agent only: Creates a new time series.This method is only for use by the Stackdriver Monitoring Agent. Use projects.timeSeries.create instead.
type CollectdTimeSeries struct {
	pulumi.CustomResourceState
}

// NewCollectdTimeSeries registers a new resource with the given unique name, arguments, and options.
func NewCollectdTimeSeries(ctx *pulumi.Context,
	name string, args *CollectdTimeSeriesArgs, opts ...pulumi.ResourceOption) (*CollectdTimeSeries, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource CollectdTimeSeries
	err := ctx.RegisterResource("gcp-native:monitoring/v3:CollectdTimeSeries", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCollectdTimeSeries gets an existing CollectdTimeSeries resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCollectdTimeSeries(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CollectdTimeSeriesState, opts ...pulumi.ResourceOption) (*CollectdTimeSeries, error) {
	var resource CollectdTimeSeries
	err := ctx.ReadResource("gcp-native:monitoring/v3:CollectdTimeSeries", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CollectdTimeSeries resources.
type collectdTimeSeriesState struct {
}

type CollectdTimeSeriesState struct {
}

func (CollectdTimeSeriesState) ElementType() reflect.Type {
	return reflect.TypeOf((*collectdTimeSeriesState)(nil)).Elem()
}

type collectdTimeSeriesArgs struct {
	// The collectd payloads representing the time series data. You must not include more than a single point for each time series, so no two payloads can have the same values for all of the fields plugin, plugin_instance, type, and type_instance.
	CollectdPayloads []CollectdPayload `pulumi:"collectdPayloads"`
	// The version of collectd that collected the data. Example: "5.3.0-192.el6".
	CollectdVersion *string `pulumi:"collectdVersion"`
	ProjectsId      string  `pulumi:"projectsId"`
	// The monitored resource associated with the time series.
	Resource *MonitoredResource `pulumi:"resource"`
}

// The set of arguments for constructing a CollectdTimeSeries resource.
type CollectdTimeSeriesArgs struct {
	// The collectd payloads representing the time series data. You must not include more than a single point for each time series, so no two payloads can have the same values for all of the fields plugin, plugin_instance, type, and type_instance.
	CollectdPayloads CollectdPayloadArrayInput
	// The version of collectd that collected the data. Example: "5.3.0-192.el6".
	CollectdVersion pulumi.StringPtrInput
	ProjectsId      pulumi.StringInput
	// The monitored resource associated with the time series.
	Resource MonitoredResourcePtrInput
}

func (CollectdTimeSeriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*collectdTimeSeriesArgs)(nil)).Elem()
}

type CollectdTimeSeriesInput interface {
	pulumi.Input

	ToCollectdTimeSeriesOutput() CollectdTimeSeriesOutput
	ToCollectdTimeSeriesOutputWithContext(ctx context.Context) CollectdTimeSeriesOutput
}

func (*CollectdTimeSeries) ElementType() reflect.Type {
	return reflect.TypeOf((*CollectdTimeSeries)(nil))
}

func (i *CollectdTimeSeries) ToCollectdTimeSeriesOutput() CollectdTimeSeriesOutput {
	return i.ToCollectdTimeSeriesOutputWithContext(context.Background())
}

func (i *CollectdTimeSeries) ToCollectdTimeSeriesOutputWithContext(ctx context.Context) CollectdTimeSeriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectdTimeSeriesOutput)
}

type CollectdTimeSeriesOutput struct {
	*pulumi.OutputState
}

func (CollectdTimeSeriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollectdTimeSeries)(nil))
}

func (o CollectdTimeSeriesOutput) ToCollectdTimeSeriesOutput() CollectdTimeSeriesOutput {
	return o
}

func (o CollectdTimeSeriesOutput) ToCollectdTimeSeriesOutputWithContext(ctx context.Context) CollectdTimeSeriesOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CollectdTimeSeriesOutput{})
}
