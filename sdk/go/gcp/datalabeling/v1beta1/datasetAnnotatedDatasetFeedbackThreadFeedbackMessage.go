// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Create a FeedbackMessage object.
type DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage struct {
	pulumi.CustomResourceState

	// String content of the feedback. Maximum of 10000 characters.
	Body pulumi.StringOutput `pulumi:"body"`
	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The image storing this feedback if the feedback is an image representing operator's comments.
	Image pulumi.StringOutput `pulumi:"image"`
	// Name of the feedback message in a feedback thread. Format: 'project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}'
	Name                      pulumi.StringOutput                                                   `pulumi:"name"`
	OperatorFeedbackMetadata  GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataResponseOutput  `pulumi:"operatorFeedbackMetadata"`
	RequesterFeedbackMetadata GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataResponseOutput `pulumi:"requesterFeedbackMetadata"`
}

// NewDatasetAnnotatedDatasetFeedbackThreadFeedbackMessage registers a new resource with the given unique name, arguments, and options.
func NewDatasetAnnotatedDatasetFeedbackThreadFeedbackMessage(ctx *pulumi.Context,
	name string, args *DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageArgs, opts ...pulumi.ResourceOption) (*DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnnotatedDatasetsId == nil {
		return nil, errors.New("invalid value for required argument 'AnnotatedDatasetsId'")
	}
	if args.DatasetsId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetsId'")
	}
	if args.FeedbackMessagesId == nil {
		return nil, errors.New("invalid value for required argument 'FeedbackMessagesId'")
	}
	if args.FeedbackThreadsId == nil {
		return nil, errors.New("invalid value for required argument 'FeedbackThreadsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage
	err := ctx.RegisterResource("gcp-native:datalabeling/v1beta1:DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetAnnotatedDatasetFeedbackThreadFeedbackMessage gets an existing DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetAnnotatedDatasetFeedbackThreadFeedbackMessage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageState, opts ...pulumi.ResourceOption) (*DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage, error) {
	var resource DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage
	err := ctx.ReadResource("gcp-native:datalabeling/v1beta1:DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage resources.
type datasetAnnotatedDatasetFeedbackThreadFeedbackMessageState struct {
	// String content of the feedback. Maximum of 10000 characters.
	Body *string `pulumi:"body"`
	// Create time.
	CreateTime *string `pulumi:"createTime"`
	// The image storing this feedback if the feedback is an image representing operator's comments.
	Image *string `pulumi:"image"`
	// Name of the feedback message in a feedback thread. Format: 'project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}'
	Name                      *string                                                          `pulumi:"name"`
	OperatorFeedbackMetadata  *GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataResponse  `pulumi:"operatorFeedbackMetadata"`
	RequesterFeedbackMetadata *GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataResponse `pulumi:"requesterFeedbackMetadata"`
}

type DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageState struct {
	// String content of the feedback. Maximum of 10000 characters.
	Body pulumi.StringPtrInput
	// Create time.
	CreateTime pulumi.StringPtrInput
	// The image storing this feedback if the feedback is an image representing operator's comments.
	Image pulumi.StringPtrInput
	// Name of the feedback message in a feedback thread. Format: 'project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}'
	Name                      pulumi.StringPtrInput
	OperatorFeedbackMetadata  GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataResponsePtrInput
	RequesterFeedbackMetadata GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataResponsePtrInput
}

func (DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetAnnotatedDatasetFeedbackThreadFeedbackMessageState)(nil)).Elem()
}

type datasetAnnotatedDatasetFeedbackThreadFeedbackMessageArgs struct {
	AnnotatedDatasetsId string `pulumi:"annotatedDatasetsId"`
	// String content of the feedback. Maximum of 10000 characters.
	Body *string `pulumi:"body"`
	// Create time.
	CreateTime         *string `pulumi:"createTime"`
	DatasetsId         string  `pulumi:"datasetsId"`
	FeedbackMessagesId string  `pulumi:"feedbackMessagesId"`
	FeedbackThreadsId  string  `pulumi:"feedbackThreadsId"`
	// The image storing this feedback if the feedback is an image representing operator's comments.
	Image *string `pulumi:"image"`
	// Name of the feedback message in a feedback thread. Format: 'project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}'
	Name                      *string                                                  `pulumi:"name"`
	OperatorFeedbackMetadata  *GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadata  `pulumi:"operatorFeedbackMetadata"`
	ProjectsId                string                                                   `pulumi:"projectsId"`
	RequesterFeedbackMetadata *GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadata `pulumi:"requesterFeedbackMetadata"`
}

// The set of arguments for constructing a DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage resource.
type DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageArgs struct {
	AnnotatedDatasetsId pulumi.StringInput
	// String content of the feedback. Maximum of 10000 characters.
	Body pulumi.StringPtrInput
	// Create time.
	CreateTime         pulumi.StringPtrInput
	DatasetsId         pulumi.StringInput
	FeedbackMessagesId pulumi.StringInput
	FeedbackThreadsId  pulumi.StringInput
	// The image storing this feedback if the feedback is an image representing operator's comments.
	Image pulumi.StringPtrInput
	// Name of the feedback message in a feedback thread. Format: 'project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}'
	Name                      pulumi.StringPtrInput
	OperatorFeedbackMetadata  GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataPtrInput
	ProjectsId                pulumi.StringInput
	RequesterFeedbackMetadata GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataPtrInput
}

func (DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetAnnotatedDatasetFeedbackThreadFeedbackMessageArgs)(nil)).Elem()
}

type DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageInput interface {
	pulumi.Input

	ToDatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput() DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput
	ToDatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutputWithContext(ctx context.Context) DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput
}

func (*DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage)(nil))
}

func (i *DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage) ToDatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput() DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput {
	return i.ToDatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutputWithContext(context.Background())
}

func (i *DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage) ToDatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutputWithContext(ctx context.Context) DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput)
}

type DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput struct {
	*pulumi.OutputState
}

func (DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAnnotatedDatasetFeedbackThreadFeedbackMessage)(nil))
}

func (o DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput) ToDatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput() DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput {
	return o
}

func (o DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput) ToDatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutputWithContext(ctx context.Context) DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DatasetAnnotatedDatasetFeedbackThreadFeedbackMessageOutput{})
}
