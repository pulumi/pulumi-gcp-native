// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
type OrganizationStoredInfoType struct {
	pulumi.CustomResourceState

	// Current version of the stored info type.
	CurrentVersion GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput `pulumi:"currentVersion"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Pending versions of the stored info type. Empty if no versions are pending.
	PendingVersions GooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutput `pulumi:"pendingVersions"`
}

// NewOrganizationStoredInfoType registers a new resource with the given unique name, arguments, and options.
func NewOrganizationStoredInfoType(ctx *pulumi.Context,
	name string, args *OrganizationStoredInfoTypeArgs, opts ...pulumi.ResourceOption) (*OrganizationStoredInfoType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationsId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationsId'")
	}
	if args.StoredInfoTypesId == nil {
		return nil, errors.New("invalid value for required argument 'StoredInfoTypesId'")
	}
	var resource OrganizationStoredInfoType
	err := ctx.RegisterResource("gcp-native:dlp/v2:OrganizationStoredInfoType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationStoredInfoType gets an existing OrganizationStoredInfoType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationStoredInfoType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationStoredInfoTypeState, opts ...pulumi.ResourceOption) (*OrganizationStoredInfoType, error) {
	var resource OrganizationStoredInfoType
	err := ctx.ReadResource("gcp-native:dlp/v2:OrganizationStoredInfoType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationStoredInfoType resources.
type organizationStoredInfoTypeState struct {
	// Current version of the stored info type.
	CurrentVersion *GooglePrivacyDlpV2StoredInfoTypeVersionResponse `pulumi:"currentVersion"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Pending versions of the stored info type. Empty if no versions are pending.
	PendingVersions []GooglePrivacyDlpV2StoredInfoTypeVersionResponse `pulumi:"pendingVersions"`
}

type OrganizationStoredInfoTypeState struct {
	// Current version of the stored info type.
	CurrentVersion GooglePrivacyDlpV2StoredInfoTypeVersionResponsePtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// Pending versions of the stored info type. Empty if no versions are pending.
	PendingVersions GooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayInput
}

func (OrganizationStoredInfoTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationStoredInfoTypeState)(nil)).Elem()
}

type organizationStoredInfoTypeArgs struct {
	// Required. Configuration of the storedInfoType to create.
	Config          *GooglePrivacyDlpV2StoredInfoTypeConfig `pulumi:"config"`
	OrganizationsId string                                  `pulumi:"organizationsId"`
	// The storedInfoType ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: `[a-zA-Z\d-_]+`. The maximum length is 100 characters. Can be empty to allow the system to generate one.
	StoredInfoTypeId  *string `pulumi:"storedInfoTypeId"`
	StoredInfoTypesId string  `pulumi:"storedInfoTypesId"`
}

// The set of arguments for constructing a OrganizationStoredInfoType resource.
type OrganizationStoredInfoTypeArgs struct {
	// Required. Configuration of the storedInfoType to create.
	Config          GooglePrivacyDlpV2StoredInfoTypeConfigPtrInput
	OrganizationsId pulumi.StringInput
	// The storedInfoType ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: `[a-zA-Z\d-_]+`. The maximum length is 100 characters. Can be empty to allow the system to generate one.
	StoredInfoTypeId  pulumi.StringPtrInput
	StoredInfoTypesId pulumi.StringInput
}

func (OrganizationStoredInfoTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationStoredInfoTypeArgs)(nil)).Elem()
}

type OrganizationStoredInfoTypeInput interface {
	pulumi.Input

	ToOrganizationStoredInfoTypeOutput() OrganizationStoredInfoTypeOutput
	ToOrganizationStoredInfoTypeOutputWithContext(ctx context.Context) OrganizationStoredInfoTypeOutput
}

func (*OrganizationStoredInfoType) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationStoredInfoType)(nil))
}

func (i *OrganizationStoredInfoType) ToOrganizationStoredInfoTypeOutput() OrganizationStoredInfoTypeOutput {
	return i.ToOrganizationStoredInfoTypeOutputWithContext(context.Background())
}

func (i *OrganizationStoredInfoType) ToOrganizationStoredInfoTypeOutputWithContext(ctx context.Context) OrganizationStoredInfoTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationStoredInfoTypeOutput)
}

type OrganizationStoredInfoTypeOutput struct {
	*pulumi.OutputState
}

func (OrganizationStoredInfoTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationStoredInfoType)(nil))
}

func (o OrganizationStoredInfoTypeOutput) ToOrganizationStoredInfoTypeOutput() OrganizationStoredInfoTypeOutput {
	return o
}

func (o OrganizationStoredInfoTypeOutput) ToOrganizationStoredInfoTypeOutputWithContext(ctx context.Context) OrganizationStoredInfoTypeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OrganizationStoredInfoTypeOutput{})
}
