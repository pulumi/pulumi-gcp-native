// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Submits a URI suspected of containing malicious content to be reviewed. Returns a google.longrunning.Operation which, once the review is complete, is updated with its result. You can use the [Pub/Sub API] (https://cloud.google.com/pubsub) to receive notifications for the returned Operation. If the result verifies the existence of malicious content, the site will be added to the [Google's Social Engineering lists] (https://support.google.com/webmasters/answer/6350487/) in order to protect users that could get exposed to this threat in the future. Only allowlisted projects can use this method during Early Access. Please reach out to Sales or your customer engineer to obtain access.
type Uri struct {
	pulumi.CustomResourceState
}

// NewUri registers a new resource with the given unique name, arguments, and options.
func NewUri(ctx *pulumi.Context,
	name string, args *UriArgs, opts ...pulumi.ResourceOption) (*Uri, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource Uri
	err := ctx.RegisterResource("gcp-native:webrisk/v1:Uri", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUri gets an existing Uri resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUri(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UriState, opts ...pulumi.ResourceOption) (*Uri, error) {
	var resource Uri
	err := ctx.ReadResource("gcp-native:webrisk/v1:Uri", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Uri resources.
type uriState struct {
}

type UriState struct {
}

func (UriState) ElementType() reflect.Type {
	return reflect.TypeOf((*uriState)(nil)).Elem()
}

type uriArgs struct {
	ProjectsId string `pulumi:"projectsId"`
	// Required. The submission that contains the URI to be scanned.
	Submission *GoogleCloudWebriskV1Submission `pulumi:"submission"`
}

// The set of arguments for constructing a Uri resource.
type UriArgs struct {
	ProjectsId pulumi.StringInput
	// Required. The submission that contains the URI to be scanned.
	Submission GoogleCloudWebriskV1SubmissionPtrInput
}

func (UriArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*uriArgs)(nil)).Elem()
}

type UriInput interface {
	pulumi.Input

	ToUriOutput() UriOutput
	ToUriOutputWithContext(ctx context.Context) UriOutput
}

func (*Uri) ElementType() reflect.Type {
	return reflect.TypeOf((*Uri)(nil))
}

func (i *Uri) ToUriOutput() UriOutput {
	return i.ToUriOutputWithContext(context.Background())
}

func (i *Uri) ToUriOutputWithContext(ctx context.Context) UriOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriOutput)
}

type UriOutput struct {
	*pulumi.OutputState
}

func (UriOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Uri)(nil))
}

func (o UriOutput) ToUriOutput() UriOutput {
	return o
}

func (o UriOutput) ToUriOutputWithContext(ctx context.Context) UriOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(UriOutput{})
}
