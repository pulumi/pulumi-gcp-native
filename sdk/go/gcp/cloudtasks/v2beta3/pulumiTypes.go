// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// App Engine HTTP queue. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpQueue and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpQueue requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
type AppEngineHttpQueue struct {
	// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRoutingOverride *AppEngineRouting `pulumi:"appEngineRoutingOverride"`
}

// AppEngineHttpQueueInput is an input type that accepts AppEngineHttpQueueArgs and AppEngineHttpQueueOutput values.
// You can construct a concrete instance of `AppEngineHttpQueueInput` via:
//
//          AppEngineHttpQueueArgs{...}
type AppEngineHttpQueueInput interface {
	pulumi.Input

	ToAppEngineHttpQueueOutput() AppEngineHttpQueueOutput
	ToAppEngineHttpQueueOutputWithContext(context.Context) AppEngineHttpQueueOutput
}

// App Engine HTTP queue. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpQueue and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpQueue requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
type AppEngineHttpQueueArgs struct {
	// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRoutingOverride AppEngineRoutingPtrInput `pulumi:"appEngineRoutingOverride"`
}

func (AppEngineHttpQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpQueue)(nil)).Elem()
}

func (i AppEngineHttpQueueArgs) ToAppEngineHttpQueueOutput() AppEngineHttpQueueOutput {
	return i.ToAppEngineHttpQueueOutputWithContext(context.Background())
}

func (i AppEngineHttpQueueArgs) ToAppEngineHttpQueueOutputWithContext(ctx context.Context) AppEngineHttpQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpQueueOutput)
}

func (i AppEngineHttpQueueArgs) ToAppEngineHttpQueuePtrOutput() AppEngineHttpQueuePtrOutput {
	return i.ToAppEngineHttpQueuePtrOutputWithContext(context.Background())
}

func (i AppEngineHttpQueueArgs) ToAppEngineHttpQueuePtrOutputWithContext(ctx context.Context) AppEngineHttpQueuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpQueueOutput).ToAppEngineHttpQueuePtrOutputWithContext(ctx)
}

// AppEngineHttpQueuePtrInput is an input type that accepts AppEngineHttpQueueArgs, AppEngineHttpQueuePtr and AppEngineHttpQueuePtrOutput values.
// You can construct a concrete instance of `AppEngineHttpQueuePtrInput` via:
//
//          AppEngineHttpQueueArgs{...}
//
//  or:
//
//          nil
type AppEngineHttpQueuePtrInput interface {
	pulumi.Input

	ToAppEngineHttpQueuePtrOutput() AppEngineHttpQueuePtrOutput
	ToAppEngineHttpQueuePtrOutputWithContext(context.Context) AppEngineHttpQueuePtrOutput
}

type appEngineHttpQueuePtrType AppEngineHttpQueueArgs

func AppEngineHttpQueuePtr(v *AppEngineHttpQueueArgs) AppEngineHttpQueuePtrInput {
	return (*appEngineHttpQueuePtrType)(v)
}

func (*appEngineHttpQueuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpQueue)(nil)).Elem()
}

func (i *appEngineHttpQueuePtrType) ToAppEngineHttpQueuePtrOutput() AppEngineHttpQueuePtrOutput {
	return i.ToAppEngineHttpQueuePtrOutputWithContext(context.Background())
}

func (i *appEngineHttpQueuePtrType) ToAppEngineHttpQueuePtrOutputWithContext(ctx context.Context) AppEngineHttpQueuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpQueuePtrOutput)
}

// App Engine HTTP queue. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpQueue and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpQueue requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
type AppEngineHttpQueueOutput struct{ *pulumi.OutputState }

func (AppEngineHttpQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpQueue)(nil)).Elem()
}

func (o AppEngineHttpQueueOutput) ToAppEngineHttpQueueOutput() AppEngineHttpQueueOutput {
	return o
}

func (o AppEngineHttpQueueOutput) ToAppEngineHttpQueueOutputWithContext(ctx context.Context) AppEngineHttpQueueOutput {
	return o
}

func (o AppEngineHttpQueueOutput) ToAppEngineHttpQueuePtrOutput() AppEngineHttpQueuePtrOutput {
	return o.ToAppEngineHttpQueuePtrOutputWithContext(context.Background())
}

func (o AppEngineHttpQueueOutput) ToAppEngineHttpQueuePtrOutputWithContext(ctx context.Context) AppEngineHttpQueuePtrOutput {
	return o.ApplyT(func(v AppEngineHttpQueue) *AppEngineHttpQueue {
		return &v
	}).(AppEngineHttpQueuePtrOutput)
}

// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpQueueOutput) AppEngineRoutingOverride() AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v AppEngineHttpQueue) *AppEngineRouting { return v.AppEngineRoutingOverride }).(AppEngineRoutingPtrOutput)
}

type AppEngineHttpQueuePtrOutput struct{ *pulumi.OutputState }

func (AppEngineHttpQueuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpQueue)(nil)).Elem()
}

func (o AppEngineHttpQueuePtrOutput) ToAppEngineHttpQueuePtrOutput() AppEngineHttpQueuePtrOutput {
	return o
}

func (o AppEngineHttpQueuePtrOutput) ToAppEngineHttpQueuePtrOutputWithContext(ctx context.Context) AppEngineHttpQueuePtrOutput {
	return o
}

func (o AppEngineHttpQueuePtrOutput) Elem() AppEngineHttpQueueOutput {
	return o.ApplyT(func(v *AppEngineHttpQueue) AppEngineHttpQueue { return *v }).(AppEngineHttpQueueOutput)
}

// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpQueuePtrOutput) AppEngineRoutingOverride() AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpQueue) *AppEngineRouting {
		if v == nil {
			return nil
		}
		return v.AppEngineRoutingOverride
	}).(AppEngineRoutingPtrOutput)
}

// App Engine HTTP queue. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpQueue and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpQueue requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
type AppEngineHttpQueueResponse struct {
	// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRoutingOverride AppEngineRoutingResponse `pulumi:"appEngineRoutingOverride"`
}

// AppEngineHttpQueueResponseInput is an input type that accepts AppEngineHttpQueueResponseArgs and AppEngineHttpQueueResponseOutput values.
// You can construct a concrete instance of `AppEngineHttpQueueResponseInput` via:
//
//          AppEngineHttpQueueResponseArgs{...}
type AppEngineHttpQueueResponseInput interface {
	pulumi.Input

	ToAppEngineHttpQueueResponseOutput() AppEngineHttpQueueResponseOutput
	ToAppEngineHttpQueueResponseOutputWithContext(context.Context) AppEngineHttpQueueResponseOutput
}

// App Engine HTTP queue. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpQueue and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpQueue requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
type AppEngineHttpQueueResponseArgs struct {
	// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRoutingOverride AppEngineRoutingResponseInput `pulumi:"appEngineRoutingOverride"`
}

func (AppEngineHttpQueueResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpQueueResponse)(nil)).Elem()
}

func (i AppEngineHttpQueueResponseArgs) ToAppEngineHttpQueueResponseOutput() AppEngineHttpQueueResponseOutput {
	return i.ToAppEngineHttpQueueResponseOutputWithContext(context.Background())
}

func (i AppEngineHttpQueueResponseArgs) ToAppEngineHttpQueueResponseOutputWithContext(ctx context.Context) AppEngineHttpQueueResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpQueueResponseOutput)
}

func (i AppEngineHttpQueueResponseArgs) ToAppEngineHttpQueueResponsePtrOutput() AppEngineHttpQueueResponsePtrOutput {
	return i.ToAppEngineHttpQueueResponsePtrOutputWithContext(context.Background())
}

func (i AppEngineHttpQueueResponseArgs) ToAppEngineHttpQueueResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpQueueResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpQueueResponseOutput).ToAppEngineHttpQueueResponsePtrOutputWithContext(ctx)
}

// AppEngineHttpQueueResponsePtrInput is an input type that accepts AppEngineHttpQueueResponseArgs, AppEngineHttpQueueResponsePtr and AppEngineHttpQueueResponsePtrOutput values.
// You can construct a concrete instance of `AppEngineHttpQueueResponsePtrInput` via:
//
//          AppEngineHttpQueueResponseArgs{...}
//
//  or:
//
//          nil
type AppEngineHttpQueueResponsePtrInput interface {
	pulumi.Input

	ToAppEngineHttpQueueResponsePtrOutput() AppEngineHttpQueueResponsePtrOutput
	ToAppEngineHttpQueueResponsePtrOutputWithContext(context.Context) AppEngineHttpQueueResponsePtrOutput
}

type appEngineHttpQueueResponsePtrType AppEngineHttpQueueResponseArgs

func AppEngineHttpQueueResponsePtr(v *AppEngineHttpQueueResponseArgs) AppEngineHttpQueueResponsePtrInput {
	return (*appEngineHttpQueueResponsePtrType)(v)
}

func (*appEngineHttpQueueResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpQueueResponse)(nil)).Elem()
}

func (i *appEngineHttpQueueResponsePtrType) ToAppEngineHttpQueueResponsePtrOutput() AppEngineHttpQueueResponsePtrOutput {
	return i.ToAppEngineHttpQueueResponsePtrOutputWithContext(context.Background())
}

func (i *appEngineHttpQueueResponsePtrType) ToAppEngineHttpQueueResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpQueueResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpQueueResponsePtrOutput)
}

// App Engine HTTP queue. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpQueue and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpQueue requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
type AppEngineHttpQueueResponseOutput struct{ *pulumi.OutputState }

func (AppEngineHttpQueueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpQueueResponse)(nil)).Elem()
}

func (o AppEngineHttpQueueResponseOutput) ToAppEngineHttpQueueResponseOutput() AppEngineHttpQueueResponseOutput {
	return o
}

func (o AppEngineHttpQueueResponseOutput) ToAppEngineHttpQueueResponseOutputWithContext(ctx context.Context) AppEngineHttpQueueResponseOutput {
	return o
}

func (o AppEngineHttpQueueResponseOutput) ToAppEngineHttpQueueResponsePtrOutput() AppEngineHttpQueueResponsePtrOutput {
	return o.ToAppEngineHttpQueueResponsePtrOutputWithContext(context.Background())
}

func (o AppEngineHttpQueueResponseOutput) ToAppEngineHttpQueueResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpQueueResponsePtrOutput {
	return o.ApplyT(func(v AppEngineHttpQueueResponse) *AppEngineHttpQueueResponse {
		return &v
	}).(AppEngineHttpQueueResponsePtrOutput)
}

// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpQueueResponseOutput) AppEngineRoutingOverride() AppEngineRoutingResponseOutput {
	return o.ApplyT(func(v AppEngineHttpQueueResponse) AppEngineRoutingResponse { return v.AppEngineRoutingOverride }).(AppEngineRoutingResponseOutput)
}

type AppEngineHttpQueueResponsePtrOutput struct{ *pulumi.OutputState }

func (AppEngineHttpQueueResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpQueueResponse)(nil)).Elem()
}

func (o AppEngineHttpQueueResponsePtrOutput) ToAppEngineHttpQueueResponsePtrOutput() AppEngineHttpQueueResponsePtrOutput {
	return o
}

func (o AppEngineHttpQueueResponsePtrOutput) ToAppEngineHttpQueueResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpQueueResponsePtrOutput {
	return o
}

func (o AppEngineHttpQueueResponsePtrOutput) Elem() AppEngineHttpQueueResponseOutput {
	return o.ApplyT(func(v *AppEngineHttpQueueResponse) AppEngineHttpQueueResponse { return *v }).(AppEngineHttpQueueResponseOutput)
}

// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpQueueResponsePtrOutput) AppEngineRoutingOverride() AppEngineRoutingResponsePtrOutput {
	return o.ApplyT(func(v *AppEngineHttpQueueResponse) *AppEngineRoutingResponse {
		if v == nil {
			return nil
		}
		return &v.AppEngineRoutingOverride
	}).(AppEngineRoutingResponsePtrOutput)
}

// App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. Using AppEngineHttpRequest requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform` The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The `url` that the task will be sent to is: * `url =` host `+` relative_uri Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [`login: admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [`login: required`](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app's request handler returns an HTTP response code in the range [`200` - `299`]. The task attempt has failed if the app's handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. `503` (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks' traffic congestion control to temporarily throttle the queue's dispatches. Unlike other types of task targets, a `429` (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
type AppEngineHttpRequest struct {
	// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRouting *AppEngineRouting `pulumi:"appEngineRouting"`
	// HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It is an error to set a body on a task with an incompatible HttpMethod.
	Body *string `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a body, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
	Headers map[string]string `pulumi:"headers"`
	// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
	HttpMethod *string `pulumi:"httpMethod"`
	// The relative URI. The relative URI must begin with "/" and must be a valid HTTP relative URI. It can contain a path and query string arguments. If the relative URI is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUri *string `pulumi:"relativeUri"`
}

// AppEngineHttpRequestInput is an input type that accepts AppEngineHttpRequestArgs and AppEngineHttpRequestOutput values.
// You can construct a concrete instance of `AppEngineHttpRequestInput` via:
//
//          AppEngineHttpRequestArgs{...}
type AppEngineHttpRequestInput interface {
	pulumi.Input

	ToAppEngineHttpRequestOutput() AppEngineHttpRequestOutput
	ToAppEngineHttpRequestOutputWithContext(context.Context) AppEngineHttpRequestOutput
}

// App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. Using AppEngineHttpRequest requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform` The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The `url` that the task will be sent to is: * `url =` host `+` relative_uri Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [`login: admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [`login: required`](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app's request handler returns an HTTP response code in the range [`200` - `299`]. The task attempt has failed if the app's handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. `503` (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks' traffic congestion control to temporarily throttle the queue's dispatches. Unlike other types of task targets, a `429` (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
type AppEngineHttpRequestArgs struct {
	// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRouting AppEngineRoutingPtrInput `pulumi:"appEngineRouting"`
	// HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It is an error to set a body on a task with an incompatible HttpMethod.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a body, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// The relative URI. The relative URI must begin with "/" and must be a valid HTTP relative URI. It can contain a path and query string arguments. If the relative URI is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUri pulumi.StringPtrInput `pulumi:"relativeUri"`
}

func (AppEngineHttpRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpRequest)(nil)).Elem()
}

func (i AppEngineHttpRequestArgs) ToAppEngineHttpRequestOutput() AppEngineHttpRequestOutput {
	return i.ToAppEngineHttpRequestOutputWithContext(context.Background())
}

func (i AppEngineHttpRequestArgs) ToAppEngineHttpRequestOutputWithContext(ctx context.Context) AppEngineHttpRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpRequestOutput)
}

func (i AppEngineHttpRequestArgs) ToAppEngineHttpRequestPtrOutput() AppEngineHttpRequestPtrOutput {
	return i.ToAppEngineHttpRequestPtrOutputWithContext(context.Background())
}

func (i AppEngineHttpRequestArgs) ToAppEngineHttpRequestPtrOutputWithContext(ctx context.Context) AppEngineHttpRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpRequestOutput).ToAppEngineHttpRequestPtrOutputWithContext(ctx)
}

// AppEngineHttpRequestPtrInput is an input type that accepts AppEngineHttpRequestArgs, AppEngineHttpRequestPtr and AppEngineHttpRequestPtrOutput values.
// You can construct a concrete instance of `AppEngineHttpRequestPtrInput` via:
//
//          AppEngineHttpRequestArgs{...}
//
//  or:
//
//          nil
type AppEngineHttpRequestPtrInput interface {
	pulumi.Input

	ToAppEngineHttpRequestPtrOutput() AppEngineHttpRequestPtrOutput
	ToAppEngineHttpRequestPtrOutputWithContext(context.Context) AppEngineHttpRequestPtrOutput
}

type appEngineHttpRequestPtrType AppEngineHttpRequestArgs

func AppEngineHttpRequestPtr(v *AppEngineHttpRequestArgs) AppEngineHttpRequestPtrInput {
	return (*appEngineHttpRequestPtrType)(v)
}

func (*appEngineHttpRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpRequest)(nil)).Elem()
}

func (i *appEngineHttpRequestPtrType) ToAppEngineHttpRequestPtrOutput() AppEngineHttpRequestPtrOutput {
	return i.ToAppEngineHttpRequestPtrOutputWithContext(context.Background())
}

func (i *appEngineHttpRequestPtrType) ToAppEngineHttpRequestPtrOutputWithContext(ctx context.Context) AppEngineHttpRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpRequestPtrOutput)
}

// App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. Using AppEngineHttpRequest requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform` The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The `url` that the task will be sent to is: * `url =` host `+` relative_uri Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [`login: admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [`login: required`](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app's request handler returns an HTTP response code in the range [`200` - `299`]. The task attempt has failed if the app's handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. `503` (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks' traffic congestion control to temporarily throttle the queue's dispatches. Unlike other types of task targets, a `429` (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
type AppEngineHttpRequestOutput struct{ *pulumi.OutputState }

func (AppEngineHttpRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpRequest)(nil)).Elem()
}

func (o AppEngineHttpRequestOutput) ToAppEngineHttpRequestOutput() AppEngineHttpRequestOutput {
	return o
}

func (o AppEngineHttpRequestOutput) ToAppEngineHttpRequestOutputWithContext(ctx context.Context) AppEngineHttpRequestOutput {
	return o
}

func (o AppEngineHttpRequestOutput) ToAppEngineHttpRequestPtrOutput() AppEngineHttpRequestPtrOutput {
	return o.ToAppEngineHttpRequestPtrOutputWithContext(context.Background())
}

func (o AppEngineHttpRequestOutput) ToAppEngineHttpRequestPtrOutputWithContext(ctx context.Context) AppEngineHttpRequestPtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) *AppEngineHttpRequest {
		return &v
	}).(AppEngineHttpRequestPtrOutput)
}

// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpRequestOutput) AppEngineRouting() AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) *AppEngineRouting { return v.AppEngineRouting }).(AppEngineRoutingPtrOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It is an error to set a body on a task with an incompatible HttpMethod.
func (o AppEngineHttpRequestOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a body, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
func (o AppEngineHttpRequestOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
func (o AppEngineHttpRequestOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// The relative URI. The relative URI must begin with "/" and must be a valid HTTP relative URI. It can contain a path and query string arguments. If the relative URI is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
func (o AppEngineHttpRequestOutput) RelativeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) *string { return v.RelativeUri }).(pulumi.StringPtrOutput)
}

type AppEngineHttpRequestPtrOutput struct{ *pulumi.OutputState }

func (AppEngineHttpRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpRequest)(nil)).Elem()
}

func (o AppEngineHttpRequestPtrOutput) ToAppEngineHttpRequestPtrOutput() AppEngineHttpRequestPtrOutput {
	return o
}

func (o AppEngineHttpRequestPtrOutput) ToAppEngineHttpRequestPtrOutputWithContext(ctx context.Context) AppEngineHttpRequestPtrOutput {
	return o
}

func (o AppEngineHttpRequestPtrOutput) Elem() AppEngineHttpRequestOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) AppEngineHttpRequest { return *v }).(AppEngineHttpRequestOutput)
}

// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpRequestPtrOutput) AppEngineRouting() AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) *AppEngineRouting {
		if v == nil {
			return nil
		}
		return v.AppEngineRouting
	}).(AppEngineRoutingPtrOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It is an error to set a body on a task with an incompatible HttpMethod.
func (o AppEngineHttpRequestPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a body, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
func (o AppEngineHttpRequestPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
func (o AppEngineHttpRequestPtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) *string {
		if v == nil {
			return nil
		}
		return v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// The relative URI. The relative URI must begin with "/" and must be a valid HTTP relative URI. It can contain a path and query string arguments. If the relative URI is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
func (o AppEngineHttpRequestPtrOutput) RelativeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) *string {
		if v == nil {
			return nil
		}
		return v.RelativeUri
	}).(pulumi.StringPtrOutput)
}

// App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. Using AppEngineHttpRequest requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform` The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The `url` that the task will be sent to is: * `url =` host `+` relative_uri Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [`login: admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [`login: required`](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app's request handler returns an HTTP response code in the range [`200` - `299`]. The task attempt has failed if the app's handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. `503` (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks' traffic congestion control to temporarily throttle the queue's dispatches. Unlike other types of task targets, a `429` (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
type AppEngineHttpRequestResponse struct {
	// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRouting AppEngineRoutingResponse `pulumi:"appEngineRouting"`
	// HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It is an error to set a body on a task with an incompatible HttpMethod.
	Body string `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a body, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
	Headers map[string]string `pulumi:"headers"`
	// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
	HttpMethod string `pulumi:"httpMethod"`
	// The relative URI. The relative URI must begin with "/" and must be a valid HTTP relative URI. It can contain a path and query string arguments. If the relative URI is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUri string `pulumi:"relativeUri"`
}

// AppEngineHttpRequestResponseInput is an input type that accepts AppEngineHttpRequestResponseArgs and AppEngineHttpRequestResponseOutput values.
// You can construct a concrete instance of `AppEngineHttpRequestResponseInput` via:
//
//          AppEngineHttpRequestResponseArgs{...}
type AppEngineHttpRequestResponseInput interface {
	pulumi.Input

	ToAppEngineHttpRequestResponseOutput() AppEngineHttpRequestResponseOutput
	ToAppEngineHttpRequestResponseOutputWithContext(context.Context) AppEngineHttpRequestResponseOutput
}

// App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. Using AppEngineHttpRequest requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform` The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The `url` that the task will be sent to is: * `url =` host `+` relative_uri Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [`login: admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [`login: required`](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app's request handler returns an HTTP response code in the range [`200` - `299`]. The task attempt has failed if the app's handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. `503` (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks' traffic congestion control to temporarily throttle the queue's dispatches. Unlike other types of task targets, a `429` (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
type AppEngineHttpRequestResponseArgs struct {
	// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRouting AppEngineRoutingResponseInput `pulumi:"appEngineRouting"`
	// HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It is an error to set a body on a task with an incompatible HttpMethod.
	Body pulumi.StringInput `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a body, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
	HttpMethod pulumi.StringInput `pulumi:"httpMethod"`
	// The relative URI. The relative URI must begin with "/" and must be a valid HTTP relative URI. It can contain a path and query string arguments. If the relative URI is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUri pulumi.StringInput `pulumi:"relativeUri"`
}

func (AppEngineHttpRequestResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpRequestResponse)(nil)).Elem()
}

func (i AppEngineHttpRequestResponseArgs) ToAppEngineHttpRequestResponseOutput() AppEngineHttpRequestResponseOutput {
	return i.ToAppEngineHttpRequestResponseOutputWithContext(context.Background())
}

func (i AppEngineHttpRequestResponseArgs) ToAppEngineHttpRequestResponseOutputWithContext(ctx context.Context) AppEngineHttpRequestResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpRequestResponseOutput)
}

func (i AppEngineHttpRequestResponseArgs) ToAppEngineHttpRequestResponsePtrOutput() AppEngineHttpRequestResponsePtrOutput {
	return i.ToAppEngineHttpRequestResponsePtrOutputWithContext(context.Background())
}

func (i AppEngineHttpRequestResponseArgs) ToAppEngineHttpRequestResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpRequestResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpRequestResponseOutput).ToAppEngineHttpRequestResponsePtrOutputWithContext(ctx)
}

// AppEngineHttpRequestResponsePtrInput is an input type that accepts AppEngineHttpRequestResponseArgs, AppEngineHttpRequestResponsePtr and AppEngineHttpRequestResponsePtrOutput values.
// You can construct a concrete instance of `AppEngineHttpRequestResponsePtrInput` via:
//
//          AppEngineHttpRequestResponseArgs{...}
//
//  or:
//
//          nil
type AppEngineHttpRequestResponsePtrInput interface {
	pulumi.Input

	ToAppEngineHttpRequestResponsePtrOutput() AppEngineHttpRequestResponsePtrOutput
	ToAppEngineHttpRequestResponsePtrOutputWithContext(context.Context) AppEngineHttpRequestResponsePtrOutput
}

type appEngineHttpRequestResponsePtrType AppEngineHttpRequestResponseArgs

func AppEngineHttpRequestResponsePtr(v *AppEngineHttpRequestResponseArgs) AppEngineHttpRequestResponsePtrInput {
	return (*appEngineHttpRequestResponsePtrType)(v)
}

func (*appEngineHttpRequestResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpRequestResponse)(nil)).Elem()
}

func (i *appEngineHttpRequestResponsePtrType) ToAppEngineHttpRequestResponsePtrOutput() AppEngineHttpRequestResponsePtrOutput {
	return i.ToAppEngineHttpRequestResponsePtrOutputWithContext(context.Background())
}

func (i *appEngineHttpRequestResponsePtrType) ToAppEngineHttpRequestResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpRequestResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpRequestResponsePtrOutput)
}

// App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. Using AppEngineHttpRequest requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform` The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The `url` that the task will be sent to is: * `url =` host `+` relative_uri Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [`login: admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [`login: required`](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app's request handler returns an HTTP response code in the range [`200` - `299`]. The task attempt has failed if the app's handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. `503` (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks' traffic congestion control to temporarily throttle the queue's dispatches. Unlike other types of task targets, a `429` (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
type AppEngineHttpRequestResponseOutput struct{ *pulumi.OutputState }

func (AppEngineHttpRequestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpRequestResponse)(nil)).Elem()
}

func (o AppEngineHttpRequestResponseOutput) ToAppEngineHttpRequestResponseOutput() AppEngineHttpRequestResponseOutput {
	return o
}

func (o AppEngineHttpRequestResponseOutput) ToAppEngineHttpRequestResponseOutputWithContext(ctx context.Context) AppEngineHttpRequestResponseOutput {
	return o
}

func (o AppEngineHttpRequestResponseOutput) ToAppEngineHttpRequestResponsePtrOutput() AppEngineHttpRequestResponsePtrOutput {
	return o.ToAppEngineHttpRequestResponsePtrOutputWithContext(context.Background())
}

func (o AppEngineHttpRequestResponseOutput) ToAppEngineHttpRequestResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpRequestResponsePtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequestResponse) *AppEngineHttpRequestResponse {
		return &v
	}).(AppEngineHttpRequestResponsePtrOutput)
}

// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpRequestResponseOutput) AppEngineRouting() AppEngineRoutingResponseOutput {
	return o.ApplyT(func(v AppEngineHttpRequestResponse) AppEngineRoutingResponse { return v.AppEngineRouting }).(AppEngineRoutingResponseOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It is an error to set a body on a task with an incompatible HttpMethod.
func (o AppEngineHttpRequestResponseOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineHttpRequestResponse) string { return v.Body }).(pulumi.StringOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a body, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
func (o AppEngineHttpRequestResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AppEngineHttpRequestResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
func (o AppEngineHttpRequestResponseOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineHttpRequestResponse) string { return v.HttpMethod }).(pulumi.StringOutput)
}

// The relative URI. The relative URI must begin with "/" and must be a valid HTTP relative URI. It can contain a path and query string arguments. If the relative URI is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
func (o AppEngineHttpRequestResponseOutput) RelativeUri() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineHttpRequestResponse) string { return v.RelativeUri }).(pulumi.StringOutput)
}

type AppEngineHttpRequestResponsePtrOutput struct{ *pulumi.OutputState }

func (AppEngineHttpRequestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpRequestResponse)(nil)).Elem()
}

func (o AppEngineHttpRequestResponsePtrOutput) ToAppEngineHttpRequestResponsePtrOutput() AppEngineHttpRequestResponsePtrOutput {
	return o
}

func (o AppEngineHttpRequestResponsePtrOutput) ToAppEngineHttpRequestResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpRequestResponsePtrOutput {
	return o
}

func (o AppEngineHttpRequestResponsePtrOutput) Elem() AppEngineHttpRequestResponseOutput {
	return o.ApplyT(func(v *AppEngineHttpRequestResponse) AppEngineHttpRequestResponse { return *v }).(AppEngineHttpRequestResponseOutput)
}

// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpRequestResponsePtrOutput) AppEngineRouting() AppEngineRoutingResponsePtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequestResponse) *AppEngineRoutingResponse {
		if v == nil {
			return nil
		}
		return &v.AppEngineRouting
	}).(AppEngineRoutingResponsePtrOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It is an error to set a body on a task with an incompatible HttpMethod.
func (o AppEngineHttpRequestResponsePtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Body
	}).(pulumi.StringPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a body, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
func (o AppEngineHttpRequestResponsePtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppEngineHttpRequestResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
func (o AppEngineHttpRequestResponsePtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// The relative URI. The relative URI must begin with "/" and must be a valid HTTP relative URI. It can contain a path and query string arguments. If the relative URI is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
func (o AppEngineHttpRequestResponsePtrOutput) RelativeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeUri
	}).(pulumi.StringPtrOutput)
}

// App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRouting struct {
	// The host that the task is sent to. The host is constructed from the domain name of the app associated with the queue's project ID (for example .appspot.com), and the service, version, and instance. Tasks which were created using the App Engine SDK might have a custom domain name. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
	Host *string `pulumi:"host"`
	// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance *string `pulumi:"instance"`
	// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Service *string `pulumi:"service"`
	// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Version *string `pulumi:"version"`
}

// AppEngineRoutingInput is an input type that accepts AppEngineRoutingArgs and AppEngineRoutingOutput values.
// You can construct a concrete instance of `AppEngineRoutingInput` via:
//
//          AppEngineRoutingArgs{...}
type AppEngineRoutingInput interface {
	pulumi.Input

	ToAppEngineRoutingOutput() AppEngineRoutingOutput
	ToAppEngineRoutingOutputWithContext(context.Context) AppEngineRoutingOutput
}

// App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingArgs struct {
	// The host that the task is sent to. The host is constructed from the domain name of the app associated with the queue's project ID (for example .appspot.com), and the service, version, and instance. Tasks which were created using the App Engine SDK might have a custom domain name. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
	Host pulumi.StringPtrInput `pulumi:"host"`
	// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (AppEngineRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineRouting)(nil)).Elem()
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingOutput() AppEngineRoutingOutput {
	return i.ToAppEngineRoutingOutputWithContext(context.Background())
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingOutputWithContext(ctx context.Context) AppEngineRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingOutput)
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return i.ToAppEngineRoutingPtrOutputWithContext(context.Background())
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingOutput).ToAppEngineRoutingPtrOutputWithContext(ctx)
}

// AppEngineRoutingPtrInput is an input type that accepts AppEngineRoutingArgs, AppEngineRoutingPtr and AppEngineRoutingPtrOutput values.
// You can construct a concrete instance of `AppEngineRoutingPtrInput` via:
//
//          AppEngineRoutingArgs{...}
//
//  or:
//
//          nil
type AppEngineRoutingPtrInput interface {
	pulumi.Input

	ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput
	ToAppEngineRoutingPtrOutputWithContext(context.Context) AppEngineRoutingPtrOutput
}

type appEngineRoutingPtrType AppEngineRoutingArgs

func AppEngineRoutingPtr(v *AppEngineRoutingArgs) AppEngineRoutingPtrInput {
	return (*appEngineRoutingPtrType)(v)
}

func (*appEngineRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineRouting)(nil)).Elem()
}

func (i *appEngineRoutingPtrType) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return i.ToAppEngineRoutingPtrOutputWithContext(context.Background())
}

func (i *appEngineRoutingPtrType) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingPtrOutput)
}

// App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingOutput struct{ *pulumi.OutputState }

func (AppEngineRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineRouting)(nil)).Elem()
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingOutput() AppEngineRoutingOutput {
	return o
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingOutputWithContext(ctx context.Context) AppEngineRoutingOutput {
	return o
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return o.ToAppEngineRoutingPtrOutputWithContext(context.Background())
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *AppEngineRouting {
		return &v
	}).(AppEngineRoutingPtrOutput)
}

// The host that the task is sent to. The host is constructed from the domain name of the app associated with the queue's project ID (for example .appspot.com), and the service, version, and instance. Tasks which were created using the App Engine SDK might have a custom domain name. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
func (o AppEngineRoutingOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
func (o AppEngineRoutingOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type AppEngineRoutingPtrOutput struct{ *pulumi.OutputState }

func (AppEngineRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineRouting)(nil)).Elem()
}

func (o AppEngineRoutingPtrOutput) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return o
}

func (o AppEngineRoutingPtrOutput) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return o
}

func (o AppEngineRoutingPtrOutput) Elem() AppEngineRoutingOutput {
	return o.ApplyT(func(v *AppEngineRouting) AppEngineRouting { return *v }).(AppEngineRoutingOutput)
}

// The host that the task is sent to. The host is constructed from the domain name of the app associated with the queue's project ID (for example .appspot.com), and the service, version, and instance. Tasks which were created using the App Engine SDK might have a custom domain name. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
func (o AppEngineRoutingPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
func (o AppEngineRoutingPtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingResponse struct {
	// The host that the task is sent to. The host is constructed from the domain name of the app associated with the queue's project ID (for example .appspot.com), and the service, version, and instance. Tasks which were created using the App Engine SDK might have a custom domain name. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
	Host string `pulumi:"host"`
	// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance string `pulumi:"instance"`
	// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Service string `pulumi:"service"`
	// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Version string `pulumi:"version"`
}

// AppEngineRoutingResponseInput is an input type that accepts AppEngineRoutingResponseArgs and AppEngineRoutingResponseOutput values.
// You can construct a concrete instance of `AppEngineRoutingResponseInput` via:
//
//          AppEngineRoutingResponseArgs{...}
type AppEngineRoutingResponseInput interface {
	pulumi.Input

	ToAppEngineRoutingResponseOutput() AppEngineRoutingResponseOutput
	ToAppEngineRoutingResponseOutputWithContext(context.Context) AppEngineRoutingResponseOutput
}

// App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingResponseArgs struct {
	// The host that the task is sent to. The host is constructed from the domain name of the app associated with the queue's project ID (for example .appspot.com), and the service, version, and instance. Tasks which were created using the App Engine SDK might have a custom domain name. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
	Host pulumi.StringInput `pulumi:"host"`
	// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance pulumi.StringInput `pulumi:"instance"`
	// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Service pulumi.StringInput `pulumi:"service"`
	// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Version pulumi.StringInput `pulumi:"version"`
}

func (AppEngineRoutingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineRoutingResponse)(nil)).Elem()
}

func (i AppEngineRoutingResponseArgs) ToAppEngineRoutingResponseOutput() AppEngineRoutingResponseOutput {
	return i.ToAppEngineRoutingResponseOutputWithContext(context.Background())
}

func (i AppEngineRoutingResponseArgs) ToAppEngineRoutingResponseOutputWithContext(ctx context.Context) AppEngineRoutingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingResponseOutput)
}

func (i AppEngineRoutingResponseArgs) ToAppEngineRoutingResponsePtrOutput() AppEngineRoutingResponsePtrOutput {
	return i.ToAppEngineRoutingResponsePtrOutputWithContext(context.Background())
}

func (i AppEngineRoutingResponseArgs) ToAppEngineRoutingResponsePtrOutputWithContext(ctx context.Context) AppEngineRoutingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingResponseOutput).ToAppEngineRoutingResponsePtrOutputWithContext(ctx)
}

// AppEngineRoutingResponsePtrInput is an input type that accepts AppEngineRoutingResponseArgs, AppEngineRoutingResponsePtr and AppEngineRoutingResponsePtrOutput values.
// You can construct a concrete instance of `AppEngineRoutingResponsePtrInput` via:
//
//          AppEngineRoutingResponseArgs{...}
//
//  or:
//
//          nil
type AppEngineRoutingResponsePtrInput interface {
	pulumi.Input

	ToAppEngineRoutingResponsePtrOutput() AppEngineRoutingResponsePtrOutput
	ToAppEngineRoutingResponsePtrOutputWithContext(context.Context) AppEngineRoutingResponsePtrOutput
}

type appEngineRoutingResponsePtrType AppEngineRoutingResponseArgs

func AppEngineRoutingResponsePtr(v *AppEngineRoutingResponseArgs) AppEngineRoutingResponsePtrInput {
	return (*appEngineRoutingResponsePtrType)(v)
}

func (*appEngineRoutingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineRoutingResponse)(nil)).Elem()
}

func (i *appEngineRoutingResponsePtrType) ToAppEngineRoutingResponsePtrOutput() AppEngineRoutingResponsePtrOutput {
	return i.ToAppEngineRoutingResponsePtrOutputWithContext(context.Background())
}

func (i *appEngineRoutingResponsePtrType) ToAppEngineRoutingResponsePtrOutputWithContext(ctx context.Context) AppEngineRoutingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingResponsePtrOutput)
}

// App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingResponseOutput struct{ *pulumi.OutputState }

func (AppEngineRoutingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineRoutingResponse)(nil)).Elem()
}

func (o AppEngineRoutingResponseOutput) ToAppEngineRoutingResponseOutput() AppEngineRoutingResponseOutput {
	return o
}

func (o AppEngineRoutingResponseOutput) ToAppEngineRoutingResponseOutputWithContext(ctx context.Context) AppEngineRoutingResponseOutput {
	return o
}

func (o AppEngineRoutingResponseOutput) ToAppEngineRoutingResponsePtrOutput() AppEngineRoutingResponsePtrOutput {
	return o.ToAppEngineRoutingResponsePtrOutputWithContext(context.Background())
}

func (o AppEngineRoutingResponseOutput) ToAppEngineRoutingResponsePtrOutputWithContext(ctx context.Context) AppEngineRoutingResponsePtrOutput {
	return o.ApplyT(func(v AppEngineRoutingResponse) *AppEngineRoutingResponse {
		return &v
	}).(AppEngineRoutingResponsePtrOutput)
}

// The host that the task is sent to. The host is constructed from the domain name of the app associated with the queue's project ID (for example .appspot.com), and the service, version, and instance. Tasks which were created using the App Engine SDK might have a custom domain name. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
func (o AppEngineRoutingResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineRoutingResponse) string { return v.Host }).(pulumi.StringOutput)
}

// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
func (o AppEngineRoutingResponseOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineRoutingResponse) string { return v.Instance }).(pulumi.StringOutput)
}

// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineRoutingResponse) string { return v.Service }).(pulumi.StringOutput)
}

// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineRoutingResponse) string { return v.Version }).(pulumi.StringOutput)
}

type AppEngineRoutingResponsePtrOutput struct{ *pulumi.OutputState }

func (AppEngineRoutingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineRoutingResponse)(nil)).Elem()
}

func (o AppEngineRoutingResponsePtrOutput) ToAppEngineRoutingResponsePtrOutput() AppEngineRoutingResponsePtrOutput {
	return o
}

func (o AppEngineRoutingResponsePtrOutput) ToAppEngineRoutingResponsePtrOutputWithContext(ctx context.Context) AppEngineRoutingResponsePtrOutput {
	return o
}

func (o AppEngineRoutingResponsePtrOutput) Elem() AppEngineRoutingResponseOutput {
	return o.ApplyT(func(v *AppEngineRoutingResponse) AppEngineRoutingResponse { return *v }).(AppEngineRoutingResponseOutput)
}

// The host that the task is sent to. The host is constructed from the domain name of the app associated with the queue's project ID (for example .appspot.com), and the service, version, and instance. Tasks which were created using the App Engine SDK might have a custom domain name. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
func (o AppEngineRoutingResponsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRoutingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
func (o AppEngineRoutingResponsePtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRoutingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Instance
	}).(pulumi.StringPtrOutput)
}

// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingResponsePtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRoutingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRoutingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// The status of a task attempt.
type Attempt struct {
	// The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
	DispatchTime *string `pulumi:"dispatchTime"`
	// The response from the worker for this attempt. If `response_time` is unset, then the task has not been attempted or is currently running and the `response_status` field is meaningless.
	ResponseStatus *Status `pulumi:"responseStatus"`
	// The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
	ResponseTime *string `pulumi:"responseTime"`
	// The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime *string `pulumi:"scheduleTime"`
}

// AttemptInput is an input type that accepts AttemptArgs and AttemptOutput values.
// You can construct a concrete instance of `AttemptInput` via:
//
//          AttemptArgs{...}
type AttemptInput interface {
	pulumi.Input

	ToAttemptOutput() AttemptOutput
	ToAttemptOutputWithContext(context.Context) AttemptOutput
}

// The status of a task attempt.
type AttemptArgs struct {
	// The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
	DispatchTime pulumi.StringPtrInput `pulumi:"dispatchTime"`
	// The response from the worker for this attempt. If `response_time` is unset, then the task has not been attempted or is currently running and the `response_status` field is meaningless.
	ResponseStatus StatusPtrInput `pulumi:"responseStatus"`
	// The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
	ResponseTime pulumi.StringPtrInput `pulumi:"responseTime"`
	// The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime pulumi.StringPtrInput `pulumi:"scheduleTime"`
}

func (AttemptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Attempt)(nil)).Elem()
}

func (i AttemptArgs) ToAttemptOutput() AttemptOutput {
	return i.ToAttemptOutputWithContext(context.Background())
}

func (i AttemptArgs) ToAttemptOutputWithContext(ctx context.Context) AttemptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttemptOutput)
}

func (i AttemptArgs) ToAttemptPtrOutput() AttemptPtrOutput {
	return i.ToAttemptPtrOutputWithContext(context.Background())
}

func (i AttemptArgs) ToAttemptPtrOutputWithContext(ctx context.Context) AttemptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttemptOutput).ToAttemptPtrOutputWithContext(ctx)
}

// AttemptPtrInput is an input type that accepts AttemptArgs, AttemptPtr and AttemptPtrOutput values.
// You can construct a concrete instance of `AttemptPtrInput` via:
//
//          AttemptArgs{...}
//
//  or:
//
//          nil
type AttemptPtrInput interface {
	pulumi.Input

	ToAttemptPtrOutput() AttemptPtrOutput
	ToAttemptPtrOutputWithContext(context.Context) AttemptPtrOutput
}

type attemptPtrType AttemptArgs

func AttemptPtr(v *AttemptArgs) AttemptPtrInput {
	return (*attemptPtrType)(v)
}

func (*attemptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Attempt)(nil)).Elem()
}

func (i *attemptPtrType) ToAttemptPtrOutput() AttemptPtrOutput {
	return i.ToAttemptPtrOutputWithContext(context.Background())
}

func (i *attemptPtrType) ToAttemptPtrOutputWithContext(ctx context.Context) AttemptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttemptPtrOutput)
}

// The status of a task attempt.
type AttemptOutput struct{ *pulumi.OutputState }

func (AttemptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Attempt)(nil)).Elem()
}

func (o AttemptOutput) ToAttemptOutput() AttemptOutput {
	return o
}

func (o AttemptOutput) ToAttemptOutputWithContext(ctx context.Context) AttemptOutput {
	return o
}

func (o AttemptOutput) ToAttemptPtrOutput() AttemptPtrOutput {
	return o.ToAttemptPtrOutputWithContext(context.Background())
}

func (o AttemptOutput) ToAttemptPtrOutputWithContext(ctx context.Context) AttemptPtrOutput {
	return o.ApplyT(func(v Attempt) *Attempt {
		return &v
	}).(AttemptPtrOutput)
}

// The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
func (o AttemptOutput) DispatchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Attempt) *string { return v.DispatchTime }).(pulumi.StringPtrOutput)
}

// The response from the worker for this attempt. If `response_time` is unset, then the task has not been attempted or is currently running and the `response_status` field is meaningless.
func (o AttemptOutput) ResponseStatus() StatusPtrOutput {
	return o.ApplyT(func(v Attempt) *Status { return v.ResponseStatus }).(StatusPtrOutput)
}

// The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
func (o AttemptOutput) ResponseTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Attempt) *string { return v.ResponseTime }).(pulumi.StringPtrOutput)
}

// The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
func (o AttemptOutput) ScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Attempt) *string { return v.ScheduleTime }).(pulumi.StringPtrOutput)
}

type AttemptPtrOutput struct{ *pulumi.OutputState }

func (AttemptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attempt)(nil)).Elem()
}

func (o AttemptPtrOutput) ToAttemptPtrOutput() AttemptPtrOutput {
	return o
}

func (o AttemptPtrOutput) ToAttemptPtrOutputWithContext(ctx context.Context) AttemptPtrOutput {
	return o
}

func (o AttemptPtrOutput) Elem() AttemptOutput {
	return o.ApplyT(func(v *Attempt) Attempt { return *v }).(AttemptOutput)
}

// The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
func (o AttemptPtrOutput) DispatchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Attempt) *string {
		if v == nil {
			return nil
		}
		return v.DispatchTime
	}).(pulumi.StringPtrOutput)
}

// The response from the worker for this attempt. If `response_time` is unset, then the task has not been attempted or is currently running and the `response_status` field is meaningless.
func (o AttemptPtrOutput) ResponseStatus() StatusPtrOutput {
	return o.ApplyT(func(v *Attempt) *Status {
		if v == nil {
			return nil
		}
		return v.ResponseStatus
	}).(StatusPtrOutput)
}

// The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
func (o AttemptPtrOutput) ResponseTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Attempt) *string {
		if v == nil {
			return nil
		}
		return v.ResponseTime
	}).(pulumi.StringPtrOutput)
}

// The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
func (o AttemptPtrOutput) ScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Attempt) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleTime
	}).(pulumi.StringPtrOutput)
}

// The status of a task attempt.
type AttemptResponse struct {
	// The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
	DispatchTime string `pulumi:"dispatchTime"`
	// The response from the worker for this attempt. If `response_time` is unset, then the task has not been attempted or is currently running and the `response_status` field is meaningless.
	ResponseStatus StatusResponse `pulumi:"responseStatus"`
	// The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
	ResponseTime string `pulumi:"responseTime"`
	// The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime string `pulumi:"scheduleTime"`
}

// AttemptResponseInput is an input type that accepts AttemptResponseArgs and AttemptResponseOutput values.
// You can construct a concrete instance of `AttemptResponseInput` via:
//
//          AttemptResponseArgs{...}
type AttemptResponseInput interface {
	pulumi.Input

	ToAttemptResponseOutput() AttemptResponseOutput
	ToAttemptResponseOutputWithContext(context.Context) AttemptResponseOutput
}

// The status of a task attempt.
type AttemptResponseArgs struct {
	// The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
	DispatchTime pulumi.StringInput `pulumi:"dispatchTime"`
	// The response from the worker for this attempt. If `response_time` is unset, then the task has not been attempted or is currently running and the `response_status` field is meaningless.
	ResponseStatus StatusResponseInput `pulumi:"responseStatus"`
	// The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
	ResponseTime pulumi.StringInput `pulumi:"responseTime"`
	// The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime pulumi.StringInput `pulumi:"scheduleTime"`
}

func (AttemptResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttemptResponse)(nil)).Elem()
}

func (i AttemptResponseArgs) ToAttemptResponseOutput() AttemptResponseOutput {
	return i.ToAttemptResponseOutputWithContext(context.Background())
}

func (i AttemptResponseArgs) ToAttemptResponseOutputWithContext(ctx context.Context) AttemptResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttemptResponseOutput)
}

func (i AttemptResponseArgs) ToAttemptResponsePtrOutput() AttemptResponsePtrOutput {
	return i.ToAttemptResponsePtrOutputWithContext(context.Background())
}

func (i AttemptResponseArgs) ToAttemptResponsePtrOutputWithContext(ctx context.Context) AttemptResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttemptResponseOutput).ToAttemptResponsePtrOutputWithContext(ctx)
}

// AttemptResponsePtrInput is an input type that accepts AttemptResponseArgs, AttemptResponsePtr and AttemptResponsePtrOutput values.
// You can construct a concrete instance of `AttemptResponsePtrInput` via:
//
//          AttemptResponseArgs{...}
//
//  or:
//
//          nil
type AttemptResponsePtrInput interface {
	pulumi.Input

	ToAttemptResponsePtrOutput() AttemptResponsePtrOutput
	ToAttemptResponsePtrOutputWithContext(context.Context) AttemptResponsePtrOutput
}

type attemptResponsePtrType AttemptResponseArgs

func AttemptResponsePtr(v *AttemptResponseArgs) AttemptResponsePtrInput {
	return (*attemptResponsePtrType)(v)
}

func (*attemptResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AttemptResponse)(nil)).Elem()
}

func (i *attemptResponsePtrType) ToAttemptResponsePtrOutput() AttemptResponsePtrOutput {
	return i.ToAttemptResponsePtrOutputWithContext(context.Background())
}

func (i *attemptResponsePtrType) ToAttemptResponsePtrOutputWithContext(ctx context.Context) AttemptResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttemptResponsePtrOutput)
}

// The status of a task attempt.
type AttemptResponseOutput struct{ *pulumi.OutputState }

func (AttemptResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttemptResponse)(nil)).Elem()
}

func (o AttemptResponseOutput) ToAttemptResponseOutput() AttemptResponseOutput {
	return o
}

func (o AttemptResponseOutput) ToAttemptResponseOutputWithContext(ctx context.Context) AttemptResponseOutput {
	return o
}

func (o AttemptResponseOutput) ToAttemptResponsePtrOutput() AttemptResponsePtrOutput {
	return o.ToAttemptResponsePtrOutputWithContext(context.Background())
}

func (o AttemptResponseOutput) ToAttemptResponsePtrOutputWithContext(ctx context.Context) AttemptResponsePtrOutput {
	return o.ApplyT(func(v AttemptResponse) *AttemptResponse {
		return &v
	}).(AttemptResponsePtrOutput)
}

// The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
func (o AttemptResponseOutput) DispatchTime() pulumi.StringOutput {
	return o.ApplyT(func(v AttemptResponse) string { return v.DispatchTime }).(pulumi.StringOutput)
}

// The response from the worker for this attempt. If `response_time` is unset, then the task has not been attempted or is currently running and the `response_status` field is meaningless.
func (o AttemptResponseOutput) ResponseStatus() StatusResponseOutput {
	return o.ApplyT(func(v AttemptResponse) StatusResponse { return v.ResponseStatus }).(StatusResponseOutput)
}

// The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
func (o AttemptResponseOutput) ResponseTime() pulumi.StringOutput {
	return o.ApplyT(func(v AttemptResponse) string { return v.ResponseTime }).(pulumi.StringOutput)
}

// The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
func (o AttemptResponseOutput) ScheduleTime() pulumi.StringOutput {
	return o.ApplyT(func(v AttemptResponse) string { return v.ScheduleTime }).(pulumi.StringOutput)
}

type AttemptResponsePtrOutput struct{ *pulumi.OutputState }

func (AttemptResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttemptResponse)(nil)).Elem()
}

func (o AttemptResponsePtrOutput) ToAttemptResponsePtrOutput() AttemptResponsePtrOutput {
	return o
}

func (o AttemptResponsePtrOutput) ToAttemptResponsePtrOutputWithContext(ctx context.Context) AttemptResponsePtrOutput {
	return o
}

func (o AttemptResponsePtrOutput) Elem() AttemptResponseOutput {
	return o.ApplyT(func(v *AttemptResponse) AttemptResponse { return *v }).(AttemptResponseOutput)
}

// The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
func (o AttemptResponsePtrOutput) DispatchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttemptResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DispatchTime
	}).(pulumi.StringPtrOutput)
}

// The response from the worker for this attempt. If `response_time` is unset, then the task has not been attempted or is currently running and the `response_status` field is meaningless.
func (o AttemptResponsePtrOutput) ResponseStatus() StatusResponsePtrOutput {
	return o.ApplyT(func(v *AttemptResponse) *StatusResponse {
		if v == nil {
			return nil
		}
		return &v.ResponseStatus
	}).(StatusResponsePtrOutput)
}

// The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
func (o AttemptResponsePtrOutput) ResponseTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttemptResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResponseTime
	}).(pulumi.StringPtrOutput)
}

// The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
func (o AttemptResponsePtrOutput) ScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttemptResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduleTime
	}).(pulumi.StringPtrOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members` with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// BindingResponseInput is an input type that accepts BindingResponseArgs and BindingResponseOutput values.
// You can construct a concrete instance of `BindingResponseInput` via:
//
//          BindingResponseArgs{...}
type BindingResponseInput interface {
	pulumi.Input

	ToBindingResponseOutput() BindingResponseOutput
	ToBindingResponseOutputWithContext(context.Context) BindingResponseOutput
}

// Associates `members` with a `role`.
type BindingResponseArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponseInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringInput `pulumi:"role"`
}

func (BindingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (i BindingResponseArgs) ToBindingResponseOutput() BindingResponseOutput {
	return i.ToBindingResponseOutputWithContext(context.Background())
}

func (i BindingResponseArgs) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseOutput)
}

// BindingResponseArrayInput is an input type that accepts BindingResponseArray and BindingResponseArrayOutput values.
// You can construct a concrete instance of `BindingResponseArrayInput` via:
//
//          BindingResponseArray{ BindingResponseArgs{...} }
type BindingResponseArrayInput interface {
	pulumi.Input

	ToBindingResponseArrayOutput() BindingResponseArrayOutput
	ToBindingResponseArrayOutputWithContext(context.Context) BindingResponseArrayOutput
}

type BindingResponseArray []BindingResponseInput

func (BindingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (i BindingResponseArray) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return i.ToBindingResponseArrayOutputWithContext(context.Background())
}

func (i BindingResponseArray) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseArrayOutput)
}

// Associates `members` with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// ExprResponseInput is an input type that accepts ExprResponseArgs and ExprResponseOutput values.
// You can construct a concrete instance of `ExprResponseInput` via:
//
//          ExprResponseArgs{...}
type ExprResponseInput interface {
	pulumi.Input

	ToExprResponseOutput() ExprResponseOutput
	ToExprResponseOutputWithContext(context.Context) ExprResponseOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ExprResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (i ExprResponseArgs) ToExprResponseOutput() ExprResponseOutput {
	return i.ToExprResponseOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// HTTP request. The task will be pushed to the worker as an HTTP request. If the worker or the redirected worker acknowledges the task by returning a successful HTTP response code ([`200` - `299`]), the task will be removed from the queue. If any other HTTP response code is returned or no response is received, the task will be retried according to the following: * User-specified throttling: retry configuration, rate limits, and the queue's state. * System throttling: To prevent the worker from overloading, Cloud Tasks may temporarily reduce the queue's effective rate. User-specified settings will not be changed. System throttling happens because: * Cloud Tasks backs off on all errors. Normally the backoff specified in rate limits will be used. But if the worker returns `429` (Too Many Requests), `503` (Service Unavailable), or the rate of errors is high, Cloud Tasks will use a higher backoff rate. The retry specified in the `Retry-After` HTTP response header is considered. * To prevent traffic spikes and to smooth sudden increases in traffic, dispatches ramp up slowly when the queue is newly created or idle and if large numbers of tasks suddenly become available to dispatch (due to spikes in create task rates, the queue being unpaused, or many tasks that are scheduled at the same time).
type HttpRequest struct {
	// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
	Body *string `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. * X-Google-*: Google use only. * X-AppEngine-*: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `"application/octet-stream"` or `"application/json"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
	Headers map[string]string `pulumi:"headers"`
	// The HTTP method to use for the request. The default is POST.
	HttpMethod *string `pulumi:"httpMethod"`
	// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
	OauthToken *OAuthToken `pulumi:"oauthToken"`
	// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
	OidcToken *OidcToken `pulumi:"oidcToken"`
	// Required. The full url path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.
	Url *string `pulumi:"url"`
}

// HttpRequestInput is an input type that accepts HttpRequestArgs and HttpRequestOutput values.
// You can construct a concrete instance of `HttpRequestInput` via:
//
//          HttpRequestArgs{...}
type HttpRequestInput interface {
	pulumi.Input

	ToHttpRequestOutput() HttpRequestOutput
	ToHttpRequestOutputWithContext(context.Context) HttpRequestOutput
}

// HTTP request. The task will be pushed to the worker as an HTTP request. If the worker or the redirected worker acknowledges the task by returning a successful HTTP response code ([`200` - `299`]), the task will be removed from the queue. If any other HTTP response code is returned or no response is received, the task will be retried according to the following: * User-specified throttling: retry configuration, rate limits, and the queue's state. * System throttling: To prevent the worker from overloading, Cloud Tasks may temporarily reduce the queue's effective rate. User-specified settings will not be changed. System throttling happens because: * Cloud Tasks backs off on all errors. Normally the backoff specified in rate limits will be used. But if the worker returns `429` (Too Many Requests), `503` (Service Unavailable), or the rate of errors is high, Cloud Tasks will use a higher backoff rate. The retry specified in the `Retry-After` HTTP response header is considered. * To prevent traffic spikes and to smooth sudden increases in traffic, dispatches ramp up slowly when the queue is newly created or idle and if large numbers of tasks suddenly become available to dispatch (due to spikes in create task rates, the queue being unpaused, or many tasks that are scheduled at the same time).
type HttpRequestArgs struct {
	// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. * X-Google-*: Google use only. * X-AppEngine-*: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `"application/octet-stream"` or `"application/json"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// The HTTP method to use for the request. The default is POST.
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
	OauthToken OAuthTokenPtrInput `pulumi:"oauthToken"`
	// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
	OidcToken OidcTokenPtrInput `pulumi:"oidcToken"`
	// Required. The full url path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HttpRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRequest)(nil)).Elem()
}

func (i HttpRequestArgs) ToHttpRequestOutput() HttpRequestOutput {
	return i.ToHttpRequestOutputWithContext(context.Background())
}

func (i HttpRequestArgs) ToHttpRequestOutputWithContext(ctx context.Context) HttpRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRequestOutput)
}

func (i HttpRequestArgs) ToHttpRequestPtrOutput() HttpRequestPtrOutput {
	return i.ToHttpRequestPtrOutputWithContext(context.Background())
}

func (i HttpRequestArgs) ToHttpRequestPtrOutputWithContext(ctx context.Context) HttpRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRequestOutput).ToHttpRequestPtrOutputWithContext(ctx)
}

// HttpRequestPtrInput is an input type that accepts HttpRequestArgs, HttpRequestPtr and HttpRequestPtrOutput values.
// You can construct a concrete instance of `HttpRequestPtrInput` via:
//
//          HttpRequestArgs{...}
//
//  or:
//
//          nil
type HttpRequestPtrInput interface {
	pulumi.Input

	ToHttpRequestPtrOutput() HttpRequestPtrOutput
	ToHttpRequestPtrOutputWithContext(context.Context) HttpRequestPtrOutput
}

type httpRequestPtrType HttpRequestArgs

func HttpRequestPtr(v *HttpRequestArgs) HttpRequestPtrInput {
	return (*httpRequestPtrType)(v)
}

func (*httpRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRequest)(nil)).Elem()
}

func (i *httpRequestPtrType) ToHttpRequestPtrOutput() HttpRequestPtrOutput {
	return i.ToHttpRequestPtrOutputWithContext(context.Background())
}

func (i *httpRequestPtrType) ToHttpRequestPtrOutputWithContext(ctx context.Context) HttpRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRequestPtrOutput)
}

// HTTP request. The task will be pushed to the worker as an HTTP request. If the worker or the redirected worker acknowledges the task by returning a successful HTTP response code ([`200` - `299`]), the task will be removed from the queue. If any other HTTP response code is returned or no response is received, the task will be retried according to the following: * User-specified throttling: retry configuration, rate limits, and the queue's state. * System throttling: To prevent the worker from overloading, Cloud Tasks may temporarily reduce the queue's effective rate. User-specified settings will not be changed. System throttling happens because: * Cloud Tasks backs off on all errors. Normally the backoff specified in rate limits will be used. But if the worker returns `429` (Too Many Requests), `503` (Service Unavailable), or the rate of errors is high, Cloud Tasks will use a higher backoff rate. The retry specified in the `Retry-After` HTTP response header is considered. * To prevent traffic spikes and to smooth sudden increases in traffic, dispatches ramp up slowly when the queue is newly created or idle and if large numbers of tasks suddenly become available to dispatch (due to spikes in create task rates, the queue being unpaused, or many tasks that are scheduled at the same time).
type HttpRequestOutput struct{ *pulumi.OutputState }

func (HttpRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRequest)(nil)).Elem()
}

func (o HttpRequestOutput) ToHttpRequestOutput() HttpRequestOutput {
	return o
}

func (o HttpRequestOutput) ToHttpRequestOutputWithContext(ctx context.Context) HttpRequestOutput {
	return o
}

func (o HttpRequestOutput) ToHttpRequestPtrOutput() HttpRequestPtrOutput {
	return o.ToHttpRequestPtrOutputWithContext(context.Background())
}

func (o HttpRequestOutput) ToHttpRequestPtrOutputWithContext(ctx context.Context) HttpRequestPtrOutput {
	return o.ApplyT(func(v HttpRequest) *HttpRequest {
		return &v
	}).(HttpRequestPtrOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
func (o HttpRequestOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRequest) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. * X-Google-*: Google use only. * X-AppEngine-*: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `"application/octet-stream"` or `"application/json"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
func (o HttpRequestOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpRequest) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. The default is POST.
func (o HttpRequestOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRequest) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
func (o HttpRequestOutput) OauthToken() OAuthTokenPtrOutput {
	return o.ApplyT(func(v HttpRequest) *OAuthToken { return v.OauthToken }).(OAuthTokenPtrOutput)
}

// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
func (o HttpRequestOutput) OidcToken() OidcTokenPtrOutput {
	return o.ApplyT(func(v HttpRequest) *OidcToken { return v.OidcToken }).(OidcTokenPtrOutput)
}

// Required. The full url path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.
func (o HttpRequestOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRequest) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HttpRequestPtrOutput struct{ *pulumi.OutputState }

func (HttpRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRequest)(nil)).Elem()
}

func (o HttpRequestPtrOutput) ToHttpRequestPtrOutput() HttpRequestPtrOutput {
	return o
}

func (o HttpRequestPtrOutput) ToHttpRequestPtrOutputWithContext(ctx context.Context) HttpRequestPtrOutput {
	return o
}

func (o HttpRequestPtrOutput) Elem() HttpRequestOutput {
	return o.ApplyT(func(v *HttpRequest) HttpRequest { return *v }).(HttpRequestOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
func (o HttpRequestPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRequest) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. * X-Google-*: Google use only. * X-AppEngine-*: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `"application/octet-stream"` or `"application/json"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
func (o HttpRequestPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. The default is POST.
func (o HttpRequestPtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRequest) *string {
		if v == nil {
			return nil
		}
		return v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
func (o HttpRequestPtrOutput) OauthToken() OAuthTokenPtrOutput {
	return o.ApplyT(func(v *HttpRequest) *OAuthToken {
		if v == nil {
			return nil
		}
		return v.OauthToken
	}).(OAuthTokenPtrOutput)
}

// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
func (o HttpRequestPtrOutput) OidcToken() OidcTokenPtrOutput {
	return o.ApplyT(func(v *HttpRequest) *OidcToken {
		if v == nil {
			return nil
		}
		return v.OidcToken
	}).(OidcTokenPtrOutput)
}

// Required. The full url path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.
func (o HttpRequestPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRequest) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// HTTP request. The task will be pushed to the worker as an HTTP request. If the worker or the redirected worker acknowledges the task by returning a successful HTTP response code ([`200` - `299`]), the task will be removed from the queue. If any other HTTP response code is returned or no response is received, the task will be retried according to the following: * User-specified throttling: retry configuration, rate limits, and the queue's state. * System throttling: To prevent the worker from overloading, Cloud Tasks may temporarily reduce the queue's effective rate. User-specified settings will not be changed. System throttling happens because: * Cloud Tasks backs off on all errors. Normally the backoff specified in rate limits will be used. But if the worker returns `429` (Too Many Requests), `503` (Service Unavailable), or the rate of errors is high, Cloud Tasks will use a higher backoff rate. The retry specified in the `Retry-After` HTTP response header is considered. * To prevent traffic spikes and to smooth sudden increases in traffic, dispatches ramp up slowly when the queue is newly created or idle and if large numbers of tasks suddenly become available to dispatch (due to spikes in create task rates, the queue being unpaused, or many tasks that are scheduled at the same time).
type HttpRequestResponse struct {
	// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
	Body string `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. * X-Google-*: Google use only. * X-AppEngine-*: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `"application/octet-stream"` or `"application/json"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
	Headers map[string]string `pulumi:"headers"`
	// The HTTP method to use for the request. The default is POST.
	HttpMethod string `pulumi:"httpMethod"`
	// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
	OauthToken OAuthTokenResponse `pulumi:"oauthToken"`
	// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
	OidcToken OidcTokenResponse `pulumi:"oidcToken"`
	// Required. The full url path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.
	Url string `pulumi:"url"`
}

// HttpRequestResponseInput is an input type that accepts HttpRequestResponseArgs and HttpRequestResponseOutput values.
// You can construct a concrete instance of `HttpRequestResponseInput` via:
//
//          HttpRequestResponseArgs{...}
type HttpRequestResponseInput interface {
	pulumi.Input

	ToHttpRequestResponseOutput() HttpRequestResponseOutput
	ToHttpRequestResponseOutputWithContext(context.Context) HttpRequestResponseOutput
}

// HTTP request. The task will be pushed to the worker as an HTTP request. If the worker or the redirected worker acknowledges the task by returning a successful HTTP response code ([`200` - `299`]), the task will be removed from the queue. If any other HTTP response code is returned or no response is received, the task will be retried according to the following: * User-specified throttling: retry configuration, rate limits, and the queue's state. * System throttling: To prevent the worker from overloading, Cloud Tasks may temporarily reduce the queue's effective rate. User-specified settings will not be changed. System throttling happens because: * Cloud Tasks backs off on all errors. Normally the backoff specified in rate limits will be used. But if the worker returns `429` (Too Many Requests), `503` (Service Unavailable), or the rate of errors is high, Cloud Tasks will use a higher backoff rate. The retry specified in the `Retry-After` HTTP response header is considered. * To prevent traffic spikes and to smooth sudden increases in traffic, dispatches ramp up slowly when the queue is newly created or idle and if large numbers of tasks suddenly become available to dispatch (due to spikes in create task rates, the queue being unpaused, or many tasks that are scheduled at the same time).
type HttpRequestResponseArgs struct {
	// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
	Body pulumi.StringInput `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. * X-Google-*: Google use only. * X-AppEngine-*: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `"application/octet-stream"` or `"application/json"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// The HTTP method to use for the request. The default is POST.
	HttpMethod pulumi.StringInput `pulumi:"httpMethod"`
	// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
	OauthToken OAuthTokenResponseInput `pulumi:"oauthToken"`
	// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
	OidcToken OidcTokenResponseInput `pulumi:"oidcToken"`
	// Required. The full url path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.
	Url pulumi.StringInput `pulumi:"url"`
}

func (HttpRequestResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRequestResponse)(nil)).Elem()
}

func (i HttpRequestResponseArgs) ToHttpRequestResponseOutput() HttpRequestResponseOutput {
	return i.ToHttpRequestResponseOutputWithContext(context.Background())
}

func (i HttpRequestResponseArgs) ToHttpRequestResponseOutputWithContext(ctx context.Context) HttpRequestResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRequestResponseOutput)
}

func (i HttpRequestResponseArgs) ToHttpRequestResponsePtrOutput() HttpRequestResponsePtrOutput {
	return i.ToHttpRequestResponsePtrOutputWithContext(context.Background())
}

func (i HttpRequestResponseArgs) ToHttpRequestResponsePtrOutputWithContext(ctx context.Context) HttpRequestResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRequestResponseOutput).ToHttpRequestResponsePtrOutputWithContext(ctx)
}

// HttpRequestResponsePtrInput is an input type that accepts HttpRequestResponseArgs, HttpRequestResponsePtr and HttpRequestResponsePtrOutput values.
// You can construct a concrete instance of `HttpRequestResponsePtrInput` via:
//
//          HttpRequestResponseArgs{...}
//
//  or:
//
//          nil
type HttpRequestResponsePtrInput interface {
	pulumi.Input

	ToHttpRequestResponsePtrOutput() HttpRequestResponsePtrOutput
	ToHttpRequestResponsePtrOutputWithContext(context.Context) HttpRequestResponsePtrOutput
}

type httpRequestResponsePtrType HttpRequestResponseArgs

func HttpRequestResponsePtr(v *HttpRequestResponseArgs) HttpRequestResponsePtrInput {
	return (*httpRequestResponsePtrType)(v)
}

func (*httpRequestResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRequestResponse)(nil)).Elem()
}

func (i *httpRequestResponsePtrType) ToHttpRequestResponsePtrOutput() HttpRequestResponsePtrOutput {
	return i.ToHttpRequestResponsePtrOutputWithContext(context.Background())
}

func (i *httpRequestResponsePtrType) ToHttpRequestResponsePtrOutputWithContext(ctx context.Context) HttpRequestResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRequestResponsePtrOutput)
}

// HTTP request. The task will be pushed to the worker as an HTTP request. If the worker or the redirected worker acknowledges the task by returning a successful HTTP response code ([`200` - `299`]), the task will be removed from the queue. If any other HTTP response code is returned or no response is received, the task will be retried according to the following: * User-specified throttling: retry configuration, rate limits, and the queue's state. * System throttling: To prevent the worker from overloading, Cloud Tasks may temporarily reduce the queue's effective rate. User-specified settings will not be changed. System throttling happens because: * Cloud Tasks backs off on all errors. Normally the backoff specified in rate limits will be used. But if the worker returns `429` (Too Many Requests), `503` (Service Unavailable), or the rate of errors is high, Cloud Tasks will use a higher backoff rate. The retry specified in the `Retry-After` HTTP response header is considered. * To prevent traffic spikes and to smooth sudden increases in traffic, dispatches ramp up slowly when the queue is newly created or idle and if large numbers of tasks suddenly become available to dispatch (due to spikes in create task rates, the queue being unpaused, or many tasks that are scheduled at the same time).
type HttpRequestResponseOutput struct{ *pulumi.OutputState }

func (HttpRequestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRequestResponse)(nil)).Elem()
}

func (o HttpRequestResponseOutput) ToHttpRequestResponseOutput() HttpRequestResponseOutput {
	return o
}

func (o HttpRequestResponseOutput) ToHttpRequestResponseOutputWithContext(ctx context.Context) HttpRequestResponseOutput {
	return o
}

func (o HttpRequestResponseOutput) ToHttpRequestResponsePtrOutput() HttpRequestResponsePtrOutput {
	return o.ToHttpRequestResponsePtrOutputWithContext(context.Background())
}

func (o HttpRequestResponseOutput) ToHttpRequestResponsePtrOutputWithContext(ctx context.Context) HttpRequestResponsePtrOutput {
	return o.ApplyT(func(v HttpRequestResponse) *HttpRequestResponse {
		return &v
	}).(HttpRequestResponsePtrOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
func (o HttpRequestResponseOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRequestResponse) string { return v.Body }).(pulumi.StringOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. * X-Google-*: Google use only. * X-AppEngine-*: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `"application/octet-stream"` or `"application/json"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
func (o HttpRequestResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpRequestResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. The default is POST.
func (o HttpRequestResponseOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRequestResponse) string { return v.HttpMethod }).(pulumi.StringOutput)
}

// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
func (o HttpRequestResponseOutput) OauthToken() OAuthTokenResponseOutput {
	return o.ApplyT(func(v HttpRequestResponse) OAuthTokenResponse { return v.OauthToken }).(OAuthTokenResponseOutput)
}

// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
func (o HttpRequestResponseOutput) OidcToken() OidcTokenResponseOutput {
	return o.ApplyT(func(v HttpRequestResponse) OidcTokenResponse { return v.OidcToken }).(OidcTokenResponseOutput)
}

// Required. The full url path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.
func (o HttpRequestResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRequestResponse) string { return v.Url }).(pulumi.StringOutput)
}

type HttpRequestResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpRequestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRequestResponse)(nil)).Elem()
}

func (o HttpRequestResponsePtrOutput) ToHttpRequestResponsePtrOutput() HttpRequestResponsePtrOutput {
	return o
}

func (o HttpRequestResponsePtrOutput) ToHttpRequestResponsePtrOutputWithContext(ctx context.Context) HttpRequestResponsePtrOutput {
	return o
}

func (o HttpRequestResponsePtrOutput) Elem() HttpRequestResponseOutput {
	return o.ApplyT(func(v *HttpRequestResponse) HttpRequestResponse { return *v }).(HttpRequestResponseOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.
func (o HttpRequestResponsePtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Body
	}).(pulumi.StringPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. * X-Google-*: Google use only. * X-AppEngine-*: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `"application/octet-stream"` or `"application/json"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.
func (o HttpRequestResponsePtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpRequestResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. The default is POST.
func (o HttpRequestResponsePtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
func (o HttpRequestResponsePtrOutput) OauthToken() OAuthTokenResponsePtrOutput {
	return o.ApplyT(func(v *HttpRequestResponse) *OAuthTokenResponse {
		if v == nil {
			return nil
		}
		return &v.OauthToken
	}).(OAuthTokenResponsePtrOutput)
}

// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
func (o HttpRequestResponsePtrOutput) OidcToken() OidcTokenResponsePtrOutput {
	return o.ApplyT(func(v *HttpRequestResponse) *OidcTokenResponse {
		if v == nil {
			return nil
		}
		return &v.OidcToken
	}).(OidcTokenResponsePtrOutput)
}

// Required. The full url path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.
func (o HttpRequestResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRequestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthToken struct {
	// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
	Scope *string `pulumi:"scope"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
}

// OAuthTokenInput is an input type that accepts OAuthTokenArgs and OAuthTokenOutput values.
// You can construct a concrete instance of `OAuthTokenInput` via:
//
//          OAuthTokenArgs{...}
type OAuthTokenInput interface {
	pulumi.Input

	ToOAuthTokenOutput() OAuthTokenOutput
	ToOAuthTokenOutputWithContext(context.Context) OAuthTokenOutput
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthTokenArgs struct {
	// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail pulumi.StringPtrInput `pulumi:"serviceAccountEmail"`
}

func (OAuthTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthToken)(nil)).Elem()
}

func (i OAuthTokenArgs) ToOAuthTokenOutput() OAuthTokenOutput {
	return i.ToOAuthTokenOutputWithContext(context.Background())
}

func (i OAuthTokenArgs) ToOAuthTokenOutputWithContext(ctx context.Context) OAuthTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenOutput)
}

func (i OAuthTokenArgs) ToOAuthTokenPtrOutput() OAuthTokenPtrOutput {
	return i.ToOAuthTokenPtrOutputWithContext(context.Background())
}

func (i OAuthTokenArgs) ToOAuthTokenPtrOutputWithContext(ctx context.Context) OAuthTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenOutput).ToOAuthTokenPtrOutputWithContext(ctx)
}

// OAuthTokenPtrInput is an input type that accepts OAuthTokenArgs, OAuthTokenPtr and OAuthTokenPtrOutput values.
// You can construct a concrete instance of `OAuthTokenPtrInput` via:
//
//          OAuthTokenArgs{...}
//
//  or:
//
//          nil
type OAuthTokenPtrInput interface {
	pulumi.Input

	ToOAuthTokenPtrOutput() OAuthTokenPtrOutput
	ToOAuthTokenPtrOutputWithContext(context.Context) OAuthTokenPtrOutput
}

type oauthTokenPtrType OAuthTokenArgs

func OAuthTokenPtr(v *OAuthTokenArgs) OAuthTokenPtrInput {
	return (*oauthTokenPtrType)(v)
}

func (*oauthTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthToken)(nil)).Elem()
}

func (i *oauthTokenPtrType) ToOAuthTokenPtrOutput() OAuthTokenPtrOutput {
	return i.ToOAuthTokenPtrOutputWithContext(context.Background())
}

func (i *oauthTokenPtrType) ToOAuthTokenPtrOutputWithContext(ctx context.Context) OAuthTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenPtrOutput)
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthTokenOutput struct{ *pulumi.OutputState }

func (OAuthTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthToken)(nil)).Elem()
}

func (o OAuthTokenOutput) ToOAuthTokenOutput() OAuthTokenOutput {
	return o
}

func (o OAuthTokenOutput) ToOAuthTokenOutputWithContext(ctx context.Context) OAuthTokenOutput {
	return o
}

func (o OAuthTokenOutput) ToOAuthTokenPtrOutput() OAuthTokenPtrOutput {
	return o.ToOAuthTokenPtrOutputWithContext(context.Background())
}

func (o OAuthTokenOutput) ToOAuthTokenPtrOutputWithContext(ctx context.Context) OAuthTokenPtrOutput {
	return o.ApplyT(func(v OAuthToken) *OAuthToken {
		return &v
	}).(OAuthTokenPtrOutput)
}

// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
func (o OAuthTokenOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthToken) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OAuthTokenOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthToken) *string { return v.ServiceAccountEmail }).(pulumi.StringPtrOutput)
}

type OAuthTokenPtrOutput struct{ *pulumi.OutputState }

func (OAuthTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthToken)(nil)).Elem()
}

func (o OAuthTokenPtrOutput) ToOAuthTokenPtrOutput() OAuthTokenPtrOutput {
	return o
}

func (o OAuthTokenPtrOutput) ToOAuthTokenPtrOutputWithContext(ctx context.Context) OAuthTokenPtrOutput {
	return o
}

func (o OAuthTokenPtrOutput) Elem() OAuthTokenOutput {
	return o.ApplyT(func(v *OAuthToken) OAuthToken { return *v }).(OAuthTokenOutput)
}

// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
func (o OAuthTokenPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthToken) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OAuthTokenPtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthToken) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthTokenResponse struct {
	// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
	Scope string `pulumi:"scope"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
}

// OAuthTokenResponseInput is an input type that accepts OAuthTokenResponseArgs and OAuthTokenResponseOutput values.
// You can construct a concrete instance of `OAuthTokenResponseInput` via:
//
//          OAuthTokenResponseArgs{...}
type OAuthTokenResponseInput interface {
	pulumi.Input

	ToOAuthTokenResponseOutput() OAuthTokenResponseOutput
	ToOAuthTokenResponseOutputWithContext(context.Context) OAuthTokenResponseOutput
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthTokenResponseArgs struct {
	// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
	Scope pulumi.StringInput `pulumi:"scope"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail pulumi.StringInput `pulumi:"serviceAccountEmail"`
}

func (OAuthTokenResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthTokenResponse)(nil)).Elem()
}

func (i OAuthTokenResponseArgs) ToOAuthTokenResponseOutput() OAuthTokenResponseOutput {
	return i.ToOAuthTokenResponseOutputWithContext(context.Background())
}

func (i OAuthTokenResponseArgs) ToOAuthTokenResponseOutputWithContext(ctx context.Context) OAuthTokenResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenResponseOutput)
}

func (i OAuthTokenResponseArgs) ToOAuthTokenResponsePtrOutput() OAuthTokenResponsePtrOutput {
	return i.ToOAuthTokenResponsePtrOutputWithContext(context.Background())
}

func (i OAuthTokenResponseArgs) ToOAuthTokenResponsePtrOutputWithContext(ctx context.Context) OAuthTokenResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenResponseOutput).ToOAuthTokenResponsePtrOutputWithContext(ctx)
}

// OAuthTokenResponsePtrInput is an input type that accepts OAuthTokenResponseArgs, OAuthTokenResponsePtr and OAuthTokenResponsePtrOutput values.
// You can construct a concrete instance of `OAuthTokenResponsePtrInput` via:
//
//          OAuthTokenResponseArgs{...}
//
//  or:
//
//          nil
type OAuthTokenResponsePtrInput interface {
	pulumi.Input

	ToOAuthTokenResponsePtrOutput() OAuthTokenResponsePtrOutput
	ToOAuthTokenResponsePtrOutputWithContext(context.Context) OAuthTokenResponsePtrOutput
}

type oauthTokenResponsePtrType OAuthTokenResponseArgs

func OAuthTokenResponsePtr(v *OAuthTokenResponseArgs) OAuthTokenResponsePtrInput {
	return (*oauthTokenResponsePtrType)(v)
}

func (*oauthTokenResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthTokenResponse)(nil)).Elem()
}

func (i *oauthTokenResponsePtrType) ToOAuthTokenResponsePtrOutput() OAuthTokenResponsePtrOutput {
	return i.ToOAuthTokenResponsePtrOutputWithContext(context.Background())
}

func (i *oauthTokenResponsePtrType) ToOAuthTokenResponsePtrOutputWithContext(ctx context.Context) OAuthTokenResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenResponsePtrOutput)
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthTokenResponseOutput struct{ *pulumi.OutputState }

func (OAuthTokenResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthTokenResponse)(nil)).Elem()
}

func (o OAuthTokenResponseOutput) ToOAuthTokenResponseOutput() OAuthTokenResponseOutput {
	return o
}

func (o OAuthTokenResponseOutput) ToOAuthTokenResponseOutputWithContext(ctx context.Context) OAuthTokenResponseOutput {
	return o
}

func (o OAuthTokenResponseOutput) ToOAuthTokenResponsePtrOutput() OAuthTokenResponsePtrOutput {
	return o.ToOAuthTokenResponsePtrOutputWithContext(context.Background())
}

func (o OAuthTokenResponseOutput) ToOAuthTokenResponsePtrOutputWithContext(ctx context.Context) OAuthTokenResponsePtrOutput {
	return o.ApplyT(func(v OAuthTokenResponse) *OAuthTokenResponse {
		return &v
	}).(OAuthTokenResponsePtrOutput)
}

// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
func (o OAuthTokenResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthTokenResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OAuthTokenResponseOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthTokenResponse) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

type OAuthTokenResponsePtrOutput struct{ *pulumi.OutputState }

func (OAuthTokenResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthTokenResponse)(nil)).Elem()
}

func (o OAuthTokenResponsePtrOutput) ToOAuthTokenResponsePtrOutput() OAuthTokenResponsePtrOutput {
	return o
}

func (o OAuthTokenResponsePtrOutput) ToOAuthTokenResponsePtrOutputWithContext(ctx context.Context) OAuthTokenResponsePtrOutput {
	return o
}

func (o OAuthTokenResponsePtrOutput) Elem() OAuthTokenResponseOutput {
	return o.ApplyT(func(v *OAuthTokenResponse) OAuthTokenResponse { return *v }).(OAuthTokenResponseOutput)
}

// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
func (o OAuthTokenResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Scope
	}).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OAuthTokenResponsePtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcToken struct {
	// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
	Audience *string `pulumi:"audience"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
}

// OidcTokenInput is an input type that accepts OidcTokenArgs and OidcTokenOutput values.
// You can construct a concrete instance of `OidcTokenInput` via:
//
//          OidcTokenArgs{...}
type OidcTokenInput interface {
	pulumi.Input

	ToOidcTokenOutput() OidcTokenOutput
	ToOidcTokenOutputWithContext(context.Context) OidcTokenOutput
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcTokenArgs struct {
	// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail pulumi.StringPtrInput `pulumi:"serviceAccountEmail"`
}

func (OidcTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcToken)(nil)).Elem()
}

func (i OidcTokenArgs) ToOidcTokenOutput() OidcTokenOutput {
	return i.ToOidcTokenOutputWithContext(context.Background())
}

func (i OidcTokenArgs) ToOidcTokenOutputWithContext(ctx context.Context) OidcTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenOutput)
}

func (i OidcTokenArgs) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return i.ToOidcTokenPtrOutputWithContext(context.Background())
}

func (i OidcTokenArgs) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenOutput).ToOidcTokenPtrOutputWithContext(ctx)
}

// OidcTokenPtrInput is an input type that accepts OidcTokenArgs, OidcTokenPtr and OidcTokenPtrOutput values.
// You can construct a concrete instance of `OidcTokenPtrInput` via:
//
//          OidcTokenArgs{...}
//
//  or:
//
//          nil
type OidcTokenPtrInput interface {
	pulumi.Input

	ToOidcTokenPtrOutput() OidcTokenPtrOutput
	ToOidcTokenPtrOutputWithContext(context.Context) OidcTokenPtrOutput
}

type oidcTokenPtrType OidcTokenArgs

func OidcTokenPtr(v *OidcTokenArgs) OidcTokenPtrInput {
	return (*oidcTokenPtrType)(v)
}

func (*oidcTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcToken)(nil)).Elem()
}

func (i *oidcTokenPtrType) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return i.ToOidcTokenPtrOutputWithContext(context.Background())
}

func (i *oidcTokenPtrType) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenPtrOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcTokenOutput struct{ *pulumi.OutputState }

func (OidcTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcToken)(nil)).Elem()
}

func (o OidcTokenOutput) ToOidcTokenOutput() OidcTokenOutput {
	return o
}

func (o OidcTokenOutput) ToOidcTokenOutputWithContext(ctx context.Context) OidcTokenOutput {
	return o
}

func (o OidcTokenOutput) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return o.ToOidcTokenPtrOutputWithContext(context.Background())
}

func (o OidcTokenOutput) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return o.ApplyT(func(v OidcToken) *OidcToken {
		return &v
	}).(OidcTokenPtrOutput)
}

// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
func (o OidcTokenOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OidcToken) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OidcTokenOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OidcToken) *string { return v.ServiceAccountEmail }).(pulumi.StringPtrOutput)
}

type OidcTokenPtrOutput struct{ *pulumi.OutputState }

func (OidcTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcToken)(nil)).Elem()
}

func (o OidcTokenPtrOutput) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return o
}

func (o OidcTokenPtrOutput) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return o
}

func (o OidcTokenPtrOutput) Elem() OidcTokenOutput {
	return o.ApplyT(func(v *OidcToken) OidcToken { return *v }).(OidcTokenOutput)
}

// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
func (o OidcTokenPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcToken) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OidcTokenPtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcToken) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcTokenResponse struct {
	// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
	Audience string `pulumi:"audience"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
}

// OidcTokenResponseInput is an input type that accepts OidcTokenResponseArgs and OidcTokenResponseOutput values.
// You can construct a concrete instance of `OidcTokenResponseInput` via:
//
//          OidcTokenResponseArgs{...}
type OidcTokenResponseInput interface {
	pulumi.Input

	ToOidcTokenResponseOutput() OidcTokenResponseOutput
	ToOidcTokenResponseOutputWithContext(context.Context) OidcTokenResponseOutput
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcTokenResponseArgs struct {
	// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
	Audience pulumi.StringInput `pulumi:"audience"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail pulumi.StringInput `pulumi:"serviceAccountEmail"`
}

func (OidcTokenResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcTokenResponse)(nil)).Elem()
}

func (i OidcTokenResponseArgs) ToOidcTokenResponseOutput() OidcTokenResponseOutput {
	return i.ToOidcTokenResponseOutputWithContext(context.Background())
}

func (i OidcTokenResponseArgs) ToOidcTokenResponseOutputWithContext(ctx context.Context) OidcTokenResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenResponseOutput)
}

func (i OidcTokenResponseArgs) ToOidcTokenResponsePtrOutput() OidcTokenResponsePtrOutput {
	return i.ToOidcTokenResponsePtrOutputWithContext(context.Background())
}

func (i OidcTokenResponseArgs) ToOidcTokenResponsePtrOutputWithContext(ctx context.Context) OidcTokenResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenResponseOutput).ToOidcTokenResponsePtrOutputWithContext(ctx)
}

// OidcTokenResponsePtrInput is an input type that accepts OidcTokenResponseArgs, OidcTokenResponsePtr and OidcTokenResponsePtrOutput values.
// You can construct a concrete instance of `OidcTokenResponsePtrInput` via:
//
//          OidcTokenResponseArgs{...}
//
//  or:
//
//          nil
type OidcTokenResponsePtrInput interface {
	pulumi.Input

	ToOidcTokenResponsePtrOutput() OidcTokenResponsePtrOutput
	ToOidcTokenResponsePtrOutputWithContext(context.Context) OidcTokenResponsePtrOutput
}

type oidcTokenResponsePtrType OidcTokenResponseArgs

func OidcTokenResponsePtr(v *OidcTokenResponseArgs) OidcTokenResponsePtrInput {
	return (*oidcTokenResponsePtrType)(v)
}

func (*oidcTokenResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcTokenResponse)(nil)).Elem()
}

func (i *oidcTokenResponsePtrType) ToOidcTokenResponsePtrOutput() OidcTokenResponsePtrOutput {
	return i.ToOidcTokenResponsePtrOutputWithContext(context.Background())
}

func (i *oidcTokenResponsePtrType) ToOidcTokenResponsePtrOutputWithContext(ctx context.Context) OidcTokenResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenResponsePtrOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcTokenResponseOutput struct{ *pulumi.OutputState }

func (OidcTokenResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcTokenResponse)(nil)).Elem()
}

func (o OidcTokenResponseOutput) ToOidcTokenResponseOutput() OidcTokenResponseOutput {
	return o
}

func (o OidcTokenResponseOutput) ToOidcTokenResponseOutputWithContext(ctx context.Context) OidcTokenResponseOutput {
	return o
}

func (o OidcTokenResponseOutput) ToOidcTokenResponsePtrOutput() OidcTokenResponsePtrOutput {
	return o.ToOidcTokenResponsePtrOutputWithContext(context.Background())
}

func (o OidcTokenResponseOutput) ToOidcTokenResponsePtrOutputWithContext(ctx context.Context) OidcTokenResponsePtrOutput {
	return o.ApplyT(func(v OidcTokenResponse) *OidcTokenResponse {
		return &v
	}).(OidcTokenResponsePtrOutput)
}

// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
func (o OidcTokenResponseOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v OidcTokenResponse) string { return v.Audience }).(pulumi.StringOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OidcTokenResponseOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v OidcTokenResponse) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

type OidcTokenResponsePtrOutput struct{ *pulumi.OutputState }

func (OidcTokenResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcTokenResponse)(nil)).Elem()
}

func (o OidcTokenResponsePtrOutput) ToOidcTokenResponsePtrOutput() OidcTokenResponsePtrOutput {
	return o
}

func (o OidcTokenResponsePtrOutput) ToOidcTokenResponsePtrOutputWithContext(ctx context.Context) OidcTokenResponsePtrOutput {
	return o
}

func (o OidcTokenResponsePtrOutput) Elem() OidcTokenResponseOutput {
	return o.ApplyT(func(v *OidcTokenResponse) OidcTokenResponse { return *v }).(OidcTokenResponseOutput)
}

// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
func (o OidcTokenResponsePtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Audience
	}).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OidcTokenResponsePtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Pull Message. This proto can only be used for tasks in a queue which has PULL type. It currently exists for backwards compatibility with the App Engine Task Queue SDK. This message type maybe returned with methods list and get, when the response view is FULL.
type PullMessage struct {
	// A data payload consumed by the worker to execute the task.
	Payload *string `pulumi:"payload"`
	// The tasks's tag. The tag is less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
	Tag *string `pulumi:"tag"`
}

// PullMessageInput is an input type that accepts PullMessageArgs and PullMessageOutput values.
// You can construct a concrete instance of `PullMessageInput` via:
//
//          PullMessageArgs{...}
type PullMessageInput interface {
	pulumi.Input

	ToPullMessageOutput() PullMessageOutput
	ToPullMessageOutputWithContext(context.Context) PullMessageOutput
}

// Pull Message. This proto can only be used for tasks in a queue which has PULL type. It currently exists for backwards compatibility with the App Engine Task Queue SDK. This message type maybe returned with methods list and get, when the response view is FULL.
type PullMessageArgs struct {
	// A data payload consumed by the worker to execute the task.
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// The tasks's tag. The tag is less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (PullMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PullMessage)(nil)).Elem()
}

func (i PullMessageArgs) ToPullMessageOutput() PullMessageOutput {
	return i.ToPullMessageOutputWithContext(context.Background())
}

func (i PullMessageArgs) ToPullMessageOutputWithContext(ctx context.Context) PullMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullMessageOutput)
}

func (i PullMessageArgs) ToPullMessagePtrOutput() PullMessagePtrOutput {
	return i.ToPullMessagePtrOutputWithContext(context.Background())
}

func (i PullMessageArgs) ToPullMessagePtrOutputWithContext(ctx context.Context) PullMessagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullMessageOutput).ToPullMessagePtrOutputWithContext(ctx)
}

// PullMessagePtrInput is an input type that accepts PullMessageArgs, PullMessagePtr and PullMessagePtrOutput values.
// You can construct a concrete instance of `PullMessagePtrInput` via:
//
//          PullMessageArgs{...}
//
//  or:
//
//          nil
type PullMessagePtrInput interface {
	pulumi.Input

	ToPullMessagePtrOutput() PullMessagePtrOutput
	ToPullMessagePtrOutputWithContext(context.Context) PullMessagePtrOutput
}

type pullMessagePtrType PullMessageArgs

func PullMessagePtr(v *PullMessageArgs) PullMessagePtrInput {
	return (*pullMessagePtrType)(v)
}

func (*pullMessagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PullMessage)(nil)).Elem()
}

func (i *pullMessagePtrType) ToPullMessagePtrOutput() PullMessagePtrOutput {
	return i.ToPullMessagePtrOutputWithContext(context.Background())
}

func (i *pullMessagePtrType) ToPullMessagePtrOutputWithContext(ctx context.Context) PullMessagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullMessagePtrOutput)
}

// Pull Message. This proto can only be used for tasks in a queue which has PULL type. It currently exists for backwards compatibility with the App Engine Task Queue SDK. This message type maybe returned with methods list and get, when the response view is FULL.
type PullMessageOutput struct{ *pulumi.OutputState }

func (PullMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullMessage)(nil)).Elem()
}

func (o PullMessageOutput) ToPullMessageOutput() PullMessageOutput {
	return o
}

func (o PullMessageOutput) ToPullMessageOutputWithContext(ctx context.Context) PullMessageOutput {
	return o
}

func (o PullMessageOutput) ToPullMessagePtrOutput() PullMessagePtrOutput {
	return o.ToPullMessagePtrOutputWithContext(context.Background())
}

func (o PullMessageOutput) ToPullMessagePtrOutputWithContext(ctx context.Context) PullMessagePtrOutput {
	return o.ApplyT(func(v PullMessage) *PullMessage {
		return &v
	}).(PullMessagePtrOutput)
}

// A data payload consumed by the worker to execute the task.
func (o PullMessageOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PullMessage) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

// The tasks's tag. The tag is less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
func (o PullMessageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PullMessage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type PullMessagePtrOutput struct{ *pulumi.OutputState }

func (PullMessagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullMessage)(nil)).Elem()
}

func (o PullMessagePtrOutput) ToPullMessagePtrOutput() PullMessagePtrOutput {
	return o
}

func (o PullMessagePtrOutput) ToPullMessagePtrOutputWithContext(ctx context.Context) PullMessagePtrOutput {
	return o
}

func (o PullMessagePtrOutput) Elem() PullMessageOutput {
	return o.ApplyT(func(v *PullMessage) PullMessage { return *v }).(PullMessageOutput)
}

// A data payload consumed by the worker to execute the task.
func (o PullMessagePtrOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullMessage) *string {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(pulumi.StringPtrOutput)
}

// The tasks's tag. The tag is less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
func (o PullMessagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullMessage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Pull Message. This proto can only be used for tasks in a queue which has PULL type. It currently exists for backwards compatibility with the App Engine Task Queue SDK. This message type maybe returned with methods list and get, when the response view is FULL.
type PullMessageResponse struct {
	// A data payload consumed by the worker to execute the task.
	Payload string `pulumi:"payload"`
	// The tasks's tag. The tag is less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
	Tag string `pulumi:"tag"`
}

// PullMessageResponseInput is an input type that accepts PullMessageResponseArgs and PullMessageResponseOutput values.
// You can construct a concrete instance of `PullMessageResponseInput` via:
//
//          PullMessageResponseArgs{...}
type PullMessageResponseInput interface {
	pulumi.Input

	ToPullMessageResponseOutput() PullMessageResponseOutput
	ToPullMessageResponseOutputWithContext(context.Context) PullMessageResponseOutput
}

// Pull Message. This proto can only be used for tasks in a queue which has PULL type. It currently exists for backwards compatibility with the App Engine Task Queue SDK. This message type maybe returned with methods list and get, when the response view is FULL.
type PullMessageResponseArgs struct {
	// A data payload consumed by the worker to execute the task.
	Payload pulumi.StringInput `pulumi:"payload"`
	// The tasks's tag. The tag is less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (PullMessageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PullMessageResponse)(nil)).Elem()
}

func (i PullMessageResponseArgs) ToPullMessageResponseOutput() PullMessageResponseOutput {
	return i.ToPullMessageResponseOutputWithContext(context.Background())
}

func (i PullMessageResponseArgs) ToPullMessageResponseOutputWithContext(ctx context.Context) PullMessageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullMessageResponseOutput)
}

func (i PullMessageResponseArgs) ToPullMessageResponsePtrOutput() PullMessageResponsePtrOutput {
	return i.ToPullMessageResponsePtrOutputWithContext(context.Background())
}

func (i PullMessageResponseArgs) ToPullMessageResponsePtrOutputWithContext(ctx context.Context) PullMessageResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullMessageResponseOutput).ToPullMessageResponsePtrOutputWithContext(ctx)
}

// PullMessageResponsePtrInput is an input type that accepts PullMessageResponseArgs, PullMessageResponsePtr and PullMessageResponsePtrOutput values.
// You can construct a concrete instance of `PullMessageResponsePtrInput` via:
//
//          PullMessageResponseArgs{...}
//
//  or:
//
//          nil
type PullMessageResponsePtrInput interface {
	pulumi.Input

	ToPullMessageResponsePtrOutput() PullMessageResponsePtrOutput
	ToPullMessageResponsePtrOutputWithContext(context.Context) PullMessageResponsePtrOutput
}

type pullMessageResponsePtrType PullMessageResponseArgs

func PullMessageResponsePtr(v *PullMessageResponseArgs) PullMessageResponsePtrInput {
	return (*pullMessageResponsePtrType)(v)
}

func (*pullMessageResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PullMessageResponse)(nil)).Elem()
}

func (i *pullMessageResponsePtrType) ToPullMessageResponsePtrOutput() PullMessageResponsePtrOutput {
	return i.ToPullMessageResponsePtrOutputWithContext(context.Background())
}

func (i *pullMessageResponsePtrType) ToPullMessageResponsePtrOutputWithContext(ctx context.Context) PullMessageResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullMessageResponsePtrOutput)
}

// Pull Message. This proto can only be used for tasks in a queue which has PULL type. It currently exists for backwards compatibility with the App Engine Task Queue SDK. This message type maybe returned with methods list and get, when the response view is FULL.
type PullMessageResponseOutput struct{ *pulumi.OutputState }

func (PullMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullMessageResponse)(nil)).Elem()
}

func (o PullMessageResponseOutput) ToPullMessageResponseOutput() PullMessageResponseOutput {
	return o
}

func (o PullMessageResponseOutput) ToPullMessageResponseOutputWithContext(ctx context.Context) PullMessageResponseOutput {
	return o
}

func (o PullMessageResponseOutput) ToPullMessageResponsePtrOutput() PullMessageResponsePtrOutput {
	return o.ToPullMessageResponsePtrOutputWithContext(context.Background())
}

func (o PullMessageResponseOutput) ToPullMessageResponsePtrOutputWithContext(ctx context.Context) PullMessageResponsePtrOutput {
	return o.ApplyT(func(v PullMessageResponse) *PullMessageResponse {
		return &v
	}).(PullMessageResponsePtrOutput)
}

// A data payload consumed by the worker to execute the task.
func (o PullMessageResponseOutput) Payload() pulumi.StringOutput {
	return o.ApplyT(func(v PullMessageResponse) string { return v.Payload }).(pulumi.StringOutput)
}

// The tasks's tag. The tag is less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
func (o PullMessageResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v PullMessageResponse) string { return v.Tag }).(pulumi.StringOutput)
}

type PullMessageResponsePtrOutput struct{ *pulumi.OutputState }

func (PullMessageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullMessageResponse)(nil)).Elem()
}

func (o PullMessageResponsePtrOutput) ToPullMessageResponsePtrOutput() PullMessageResponsePtrOutput {
	return o
}

func (o PullMessageResponsePtrOutput) ToPullMessageResponsePtrOutputWithContext(ctx context.Context) PullMessageResponsePtrOutput {
	return o
}

func (o PullMessageResponsePtrOutput) Elem() PullMessageResponseOutput {
	return o.ApplyT(func(v *PullMessageResponse) PullMessageResponse { return *v }).(PullMessageResponseOutput)
}

// A data payload consumed by the worker to execute the task.
func (o PullMessageResponsePtrOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullMessageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Payload
	}).(pulumi.StringPtrOutput)
}

// The tasks's tag. The tag is less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
func (o PullMessageResponsePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullMessageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tag
	}).(pulumi.StringPtrOutput)
}

// Statistics for a queue.
type QueueStatsResponse struct {
	// The number of requests that the queue has dispatched but has not received a reply for yet.
	ConcurrentDispatchesCount string `pulumi:"concurrentDispatchesCount"`
	// The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.
	EffectiveExecutionRate float64 `pulumi:"effectiveExecutionRate"`
	// The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.
	ExecutedLastMinuteCount string `pulumi:"executedLastMinuteCount"`
	// An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.
	OldestEstimatedArrivalTime string `pulumi:"oldestEstimatedArrivalTime"`
	// An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.
	TasksCount string `pulumi:"tasksCount"`
}

// QueueStatsResponseInput is an input type that accepts QueueStatsResponseArgs and QueueStatsResponseOutput values.
// You can construct a concrete instance of `QueueStatsResponseInput` via:
//
//          QueueStatsResponseArgs{...}
type QueueStatsResponseInput interface {
	pulumi.Input

	ToQueueStatsResponseOutput() QueueStatsResponseOutput
	ToQueueStatsResponseOutputWithContext(context.Context) QueueStatsResponseOutput
}

// Statistics for a queue.
type QueueStatsResponseArgs struct {
	// The number of requests that the queue has dispatched but has not received a reply for yet.
	ConcurrentDispatchesCount pulumi.StringInput `pulumi:"concurrentDispatchesCount"`
	// The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.
	EffectiveExecutionRate pulumi.Float64Input `pulumi:"effectiveExecutionRate"`
	// The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.
	ExecutedLastMinuteCount pulumi.StringInput `pulumi:"executedLastMinuteCount"`
	// An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.
	OldestEstimatedArrivalTime pulumi.StringInput `pulumi:"oldestEstimatedArrivalTime"`
	// An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.
	TasksCount pulumi.StringInput `pulumi:"tasksCount"`
}

func (QueueStatsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueStatsResponse)(nil)).Elem()
}

func (i QueueStatsResponseArgs) ToQueueStatsResponseOutput() QueueStatsResponseOutput {
	return i.ToQueueStatsResponseOutputWithContext(context.Background())
}

func (i QueueStatsResponseArgs) ToQueueStatsResponseOutputWithContext(ctx context.Context) QueueStatsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueStatsResponseOutput)
}

func (i QueueStatsResponseArgs) ToQueueStatsResponsePtrOutput() QueueStatsResponsePtrOutput {
	return i.ToQueueStatsResponsePtrOutputWithContext(context.Background())
}

func (i QueueStatsResponseArgs) ToQueueStatsResponsePtrOutputWithContext(ctx context.Context) QueueStatsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueStatsResponseOutput).ToQueueStatsResponsePtrOutputWithContext(ctx)
}

// QueueStatsResponsePtrInput is an input type that accepts QueueStatsResponseArgs, QueueStatsResponsePtr and QueueStatsResponsePtrOutput values.
// You can construct a concrete instance of `QueueStatsResponsePtrInput` via:
//
//          QueueStatsResponseArgs{...}
//
//  or:
//
//          nil
type QueueStatsResponsePtrInput interface {
	pulumi.Input

	ToQueueStatsResponsePtrOutput() QueueStatsResponsePtrOutput
	ToQueueStatsResponsePtrOutputWithContext(context.Context) QueueStatsResponsePtrOutput
}

type queueStatsResponsePtrType QueueStatsResponseArgs

func QueueStatsResponsePtr(v *QueueStatsResponseArgs) QueueStatsResponsePtrInput {
	return (*queueStatsResponsePtrType)(v)
}

func (*queueStatsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueStatsResponse)(nil)).Elem()
}

func (i *queueStatsResponsePtrType) ToQueueStatsResponsePtrOutput() QueueStatsResponsePtrOutput {
	return i.ToQueueStatsResponsePtrOutputWithContext(context.Background())
}

func (i *queueStatsResponsePtrType) ToQueueStatsResponsePtrOutputWithContext(ctx context.Context) QueueStatsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueStatsResponsePtrOutput)
}

// Statistics for a queue.
type QueueStatsResponseOutput struct{ *pulumi.OutputState }

func (QueueStatsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueStatsResponse)(nil)).Elem()
}

func (o QueueStatsResponseOutput) ToQueueStatsResponseOutput() QueueStatsResponseOutput {
	return o
}

func (o QueueStatsResponseOutput) ToQueueStatsResponseOutputWithContext(ctx context.Context) QueueStatsResponseOutput {
	return o
}

func (o QueueStatsResponseOutput) ToQueueStatsResponsePtrOutput() QueueStatsResponsePtrOutput {
	return o.ToQueueStatsResponsePtrOutputWithContext(context.Background())
}

func (o QueueStatsResponseOutput) ToQueueStatsResponsePtrOutputWithContext(ctx context.Context) QueueStatsResponsePtrOutput {
	return o.ApplyT(func(v QueueStatsResponse) *QueueStatsResponse {
		return &v
	}).(QueueStatsResponsePtrOutput)
}

// The number of requests that the queue has dispatched but has not received a reply for yet.
func (o QueueStatsResponseOutput) ConcurrentDispatchesCount() pulumi.StringOutput {
	return o.ApplyT(func(v QueueStatsResponse) string { return v.ConcurrentDispatchesCount }).(pulumi.StringOutput)
}

// The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.
func (o QueueStatsResponseOutput) EffectiveExecutionRate() pulumi.Float64Output {
	return o.ApplyT(func(v QueueStatsResponse) float64 { return v.EffectiveExecutionRate }).(pulumi.Float64Output)
}

// The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.
func (o QueueStatsResponseOutput) ExecutedLastMinuteCount() pulumi.StringOutput {
	return o.ApplyT(func(v QueueStatsResponse) string { return v.ExecutedLastMinuteCount }).(pulumi.StringOutput)
}

// An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.
func (o QueueStatsResponseOutput) OldestEstimatedArrivalTime() pulumi.StringOutput {
	return o.ApplyT(func(v QueueStatsResponse) string { return v.OldestEstimatedArrivalTime }).(pulumi.StringOutput)
}

// An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.
func (o QueueStatsResponseOutput) TasksCount() pulumi.StringOutput {
	return o.ApplyT(func(v QueueStatsResponse) string { return v.TasksCount }).(pulumi.StringOutput)
}

type QueueStatsResponsePtrOutput struct{ *pulumi.OutputState }

func (QueueStatsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueStatsResponse)(nil)).Elem()
}

func (o QueueStatsResponsePtrOutput) ToQueueStatsResponsePtrOutput() QueueStatsResponsePtrOutput {
	return o
}

func (o QueueStatsResponsePtrOutput) ToQueueStatsResponsePtrOutputWithContext(ctx context.Context) QueueStatsResponsePtrOutput {
	return o
}

func (o QueueStatsResponsePtrOutput) Elem() QueueStatsResponseOutput {
	return o.ApplyT(func(v *QueueStatsResponse) QueueStatsResponse { return *v }).(QueueStatsResponseOutput)
}

// The number of requests that the queue has dispatched but has not received a reply for yet.
func (o QueueStatsResponsePtrOutput) ConcurrentDispatchesCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueStatsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConcurrentDispatchesCount
	}).(pulumi.StringPtrOutput)
}

// The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.
func (o QueueStatsResponsePtrOutput) EffectiveExecutionRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *QueueStatsResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.EffectiveExecutionRate
	}).(pulumi.Float64PtrOutput)
}

// The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.
func (o QueueStatsResponsePtrOutput) ExecutedLastMinuteCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueStatsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ExecutedLastMinuteCount
	}).(pulumi.StringPtrOutput)
}

// An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.
func (o QueueStatsResponsePtrOutput) OldestEstimatedArrivalTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueStatsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OldestEstimatedArrivalTime
	}).(pulumi.StringPtrOutput)
}

// An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.
func (o QueueStatsResponsePtrOutput) TasksCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueStatsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TasksCount
	}).(pulumi.StringPtrOutput)
}

// Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
type RateLimits struct {
	// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
	MaxBurstSize *int `pulumi:"maxBurstSize"`
	// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
	MaxConcurrentDispatches *int `pulumi:"maxConcurrentDispatches"`
	// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
	MaxDispatchesPerSecond *float64 `pulumi:"maxDispatchesPerSecond"`
}

// RateLimitsInput is an input type that accepts RateLimitsArgs and RateLimitsOutput values.
// You can construct a concrete instance of `RateLimitsInput` via:
//
//          RateLimitsArgs{...}
type RateLimitsInput interface {
	pulumi.Input

	ToRateLimitsOutput() RateLimitsOutput
	ToRateLimitsOutputWithContext(context.Context) RateLimitsOutput
}

// Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
type RateLimitsArgs struct {
	// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
	MaxBurstSize pulumi.IntPtrInput `pulumi:"maxBurstSize"`
	// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
	MaxConcurrentDispatches pulumi.IntPtrInput `pulumi:"maxConcurrentDispatches"`
	// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
	MaxDispatchesPerSecond pulumi.Float64PtrInput `pulumi:"maxDispatchesPerSecond"`
}

func (RateLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimits)(nil)).Elem()
}

func (i RateLimitsArgs) ToRateLimitsOutput() RateLimitsOutput {
	return i.ToRateLimitsOutputWithContext(context.Background())
}

func (i RateLimitsArgs) ToRateLimitsOutputWithContext(ctx context.Context) RateLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitsOutput)
}

func (i RateLimitsArgs) ToRateLimitsPtrOutput() RateLimitsPtrOutput {
	return i.ToRateLimitsPtrOutputWithContext(context.Background())
}

func (i RateLimitsArgs) ToRateLimitsPtrOutputWithContext(ctx context.Context) RateLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitsOutput).ToRateLimitsPtrOutputWithContext(ctx)
}

// RateLimitsPtrInput is an input type that accepts RateLimitsArgs, RateLimitsPtr and RateLimitsPtrOutput values.
// You can construct a concrete instance of `RateLimitsPtrInput` via:
//
//          RateLimitsArgs{...}
//
//  or:
//
//          nil
type RateLimitsPtrInput interface {
	pulumi.Input

	ToRateLimitsPtrOutput() RateLimitsPtrOutput
	ToRateLimitsPtrOutputWithContext(context.Context) RateLimitsPtrOutput
}

type rateLimitsPtrType RateLimitsArgs

func RateLimitsPtr(v *RateLimitsArgs) RateLimitsPtrInput {
	return (*rateLimitsPtrType)(v)
}

func (*rateLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimits)(nil)).Elem()
}

func (i *rateLimitsPtrType) ToRateLimitsPtrOutput() RateLimitsPtrOutput {
	return i.ToRateLimitsPtrOutputWithContext(context.Background())
}

func (i *rateLimitsPtrType) ToRateLimitsPtrOutputWithContext(ctx context.Context) RateLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitsPtrOutput)
}

// Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
type RateLimitsOutput struct{ *pulumi.OutputState }

func (RateLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimits)(nil)).Elem()
}

func (o RateLimitsOutput) ToRateLimitsOutput() RateLimitsOutput {
	return o
}

func (o RateLimitsOutput) ToRateLimitsOutputWithContext(ctx context.Context) RateLimitsOutput {
	return o
}

func (o RateLimitsOutput) ToRateLimitsPtrOutput() RateLimitsPtrOutput {
	return o.ToRateLimitsPtrOutputWithContext(context.Background())
}

func (o RateLimitsOutput) ToRateLimitsPtrOutputWithContext(ctx context.Context) RateLimitsPtrOutput {
	return o.ApplyT(func(v RateLimits) *RateLimits {
		return &v
	}).(RateLimitsPtrOutput)
}

// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
func (o RateLimitsOutput) MaxBurstSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RateLimits) *int { return v.MaxBurstSize }).(pulumi.IntPtrOutput)
}

// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
func (o RateLimitsOutput) MaxConcurrentDispatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RateLimits) *int { return v.MaxConcurrentDispatches }).(pulumi.IntPtrOutput)
}

// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
func (o RateLimitsOutput) MaxDispatchesPerSecond() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RateLimits) *float64 { return v.MaxDispatchesPerSecond }).(pulumi.Float64PtrOutput)
}

type RateLimitsPtrOutput struct{ *pulumi.OutputState }

func (RateLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimits)(nil)).Elem()
}

func (o RateLimitsPtrOutput) ToRateLimitsPtrOutput() RateLimitsPtrOutput {
	return o
}

func (o RateLimitsPtrOutput) ToRateLimitsPtrOutputWithContext(ctx context.Context) RateLimitsPtrOutput {
	return o
}

func (o RateLimitsPtrOutput) Elem() RateLimitsOutput {
	return o.ApplyT(func(v *RateLimits) RateLimits { return *v }).(RateLimitsOutput)
}

// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
func (o RateLimitsPtrOutput) MaxBurstSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RateLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxBurstSize
	}).(pulumi.IntPtrOutput)
}

// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
func (o RateLimitsPtrOutput) MaxConcurrentDispatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RateLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentDispatches
	}).(pulumi.IntPtrOutput)
}

// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
func (o RateLimitsPtrOutput) MaxDispatchesPerSecond() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RateLimits) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxDispatchesPerSecond
	}).(pulumi.Float64PtrOutput)
}

// Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
type RateLimitsResponse struct {
	// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
	MaxBurstSize int `pulumi:"maxBurstSize"`
	// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
	MaxConcurrentDispatches int `pulumi:"maxConcurrentDispatches"`
	// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
	MaxDispatchesPerSecond float64 `pulumi:"maxDispatchesPerSecond"`
}

// RateLimitsResponseInput is an input type that accepts RateLimitsResponseArgs and RateLimitsResponseOutput values.
// You can construct a concrete instance of `RateLimitsResponseInput` via:
//
//          RateLimitsResponseArgs{...}
type RateLimitsResponseInput interface {
	pulumi.Input

	ToRateLimitsResponseOutput() RateLimitsResponseOutput
	ToRateLimitsResponseOutputWithContext(context.Context) RateLimitsResponseOutput
}

// Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
type RateLimitsResponseArgs struct {
	// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
	MaxBurstSize pulumi.IntInput `pulumi:"maxBurstSize"`
	// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
	MaxConcurrentDispatches pulumi.IntInput `pulumi:"maxConcurrentDispatches"`
	// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
	MaxDispatchesPerSecond pulumi.Float64Input `pulumi:"maxDispatchesPerSecond"`
}

func (RateLimitsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimitsResponse)(nil)).Elem()
}

func (i RateLimitsResponseArgs) ToRateLimitsResponseOutput() RateLimitsResponseOutput {
	return i.ToRateLimitsResponseOutputWithContext(context.Background())
}

func (i RateLimitsResponseArgs) ToRateLimitsResponseOutputWithContext(ctx context.Context) RateLimitsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitsResponseOutput)
}

func (i RateLimitsResponseArgs) ToRateLimitsResponsePtrOutput() RateLimitsResponsePtrOutput {
	return i.ToRateLimitsResponsePtrOutputWithContext(context.Background())
}

func (i RateLimitsResponseArgs) ToRateLimitsResponsePtrOutputWithContext(ctx context.Context) RateLimitsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitsResponseOutput).ToRateLimitsResponsePtrOutputWithContext(ctx)
}

// RateLimitsResponsePtrInput is an input type that accepts RateLimitsResponseArgs, RateLimitsResponsePtr and RateLimitsResponsePtrOutput values.
// You can construct a concrete instance of `RateLimitsResponsePtrInput` via:
//
//          RateLimitsResponseArgs{...}
//
//  or:
//
//          nil
type RateLimitsResponsePtrInput interface {
	pulumi.Input

	ToRateLimitsResponsePtrOutput() RateLimitsResponsePtrOutput
	ToRateLimitsResponsePtrOutputWithContext(context.Context) RateLimitsResponsePtrOutput
}

type rateLimitsResponsePtrType RateLimitsResponseArgs

func RateLimitsResponsePtr(v *RateLimitsResponseArgs) RateLimitsResponsePtrInput {
	return (*rateLimitsResponsePtrType)(v)
}

func (*rateLimitsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimitsResponse)(nil)).Elem()
}

func (i *rateLimitsResponsePtrType) ToRateLimitsResponsePtrOutput() RateLimitsResponsePtrOutput {
	return i.ToRateLimitsResponsePtrOutputWithContext(context.Background())
}

func (i *rateLimitsResponsePtrType) ToRateLimitsResponsePtrOutputWithContext(ctx context.Context) RateLimitsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitsResponsePtrOutput)
}

// Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
type RateLimitsResponseOutput struct{ *pulumi.OutputState }

func (RateLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimitsResponse)(nil)).Elem()
}

func (o RateLimitsResponseOutput) ToRateLimitsResponseOutput() RateLimitsResponseOutput {
	return o
}

func (o RateLimitsResponseOutput) ToRateLimitsResponseOutputWithContext(ctx context.Context) RateLimitsResponseOutput {
	return o
}

func (o RateLimitsResponseOutput) ToRateLimitsResponsePtrOutput() RateLimitsResponsePtrOutput {
	return o.ToRateLimitsResponsePtrOutputWithContext(context.Background())
}

func (o RateLimitsResponseOutput) ToRateLimitsResponsePtrOutputWithContext(ctx context.Context) RateLimitsResponsePtrOutput {
	return o.ApplyT(func(v RateLimitsResponse) *RateLimitsResponse {
		return &v
	}).(RateLimitsResponsePtrOutput)
}

// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
func (o RateLimitsResponseOutput) MaxBurstSize() pulumi.IntOutput {
	return o.ApplyT(func(v RateLimitsResponse) int { return v.MaxBurstSize }).(pulumi.IntOutput)
}

// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
func (o RateLimitsResponseOutput) MaxConcurrentDispatches() pulumi.IntOutput {
	return o.ApplyT(func(v RateLimitsResponse) int { return v.MaxConcurrentDispatches }).(pulumi.IntOutput)
}

// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
func (o RateLimitsResponseOutput) MaxDispatchesPerSecond() pulumi.Float64Output {
	return o.ApplyT(func(v RateLimitsResponse) float64 { return v.MaxDispatchesPerSecond }).(pulumi.Float64Output)
}

type RateLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (RateLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimitsResponse)(nil)).Elem()
}

func (o RateLimitsResponsePtrOutput) ToRateLimitsResponsePtrOutput() RateLimitsResponsePtrOutput {
	return o
}

func (o RateLimitsResponsePtrOutput) ToRateLimitsResponsePtrOutputWithContext(ctx context.Context) RateLimitsResponsePtrOutput {
	return o
}

func (o RateLimitsResponsePtrOutput) Elem() RateLimitsResponseOutput {
	return o.ApplyT(func(v *RateLimitsResponse) RateLimitsResponse { return *v }).(RateLimitsResponseOutput)
}

// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
func (o RateLimitsResponsePtrOutput) MaxBurstSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RateLimitsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxBurstSize
	}).(pulumi.IntPtrOutput)
}

// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
func (o RateLimitsResponsePtrOutput) MaxConcurrentDispatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RateLimitsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxConcurrentDispatches
	}).(pulumi.IntPtrOutput)
}

// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
func (o RateLimitsResponsePtrOutput) MaxDispatchesPerSecond() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RateLimitsResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaxDispatchesPerSecond
	}).(pulumi.Float64PtrOutput)
}

// Retry config. These settings determine when a failed task attempt is retried.
type RetryConfig struct {
	// Number of attempts per task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be >= -1. If unspecified when the queue is created, Cloud Tasks will pick the default. -1 indicates unlimited attempts. This field has the same meaning as [task_retry_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxAttempts *int `pulumi:"maxAttempts"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxBackoff *string `pulumi:"maxBackoff"`
	// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxDoublings *int `pulumi:"maxDoublings"`
	// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxRetryDuration *string `pulumi:"maxRetryDuration"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MinBackoff *string `pulumi:"minBackoff"`
}

// RetryConfigInput is an input type that accepts RetryConfigArgs and RetryConfigOutput values.
// You can construct a concrete instance of `RetryConfigInput` via:
//
//          RetryConfigArgs{...}
type RetryConfigInput interface {
	pulumi.Input

	ToRetryConfigOutput() RetryConfigOutput
	ToRetryConfigOutputWithContext(context.Context) RetryConfigOutput
}

// Retry config. These settings determine when a failed task attempt is retried.
type RetryConfigArgs struct {
	// Number of attempts per task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be >= -1. If unspecified when the queue is created, Cloud Tasks will pick the default. -1 indicates unlimited attempts. This field has the same meaning as [task_retry_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxAttempts pulumi.IntPtrInput `pulumi:"maxAttempts"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxBackoff pulumi.StringPtrInput `pulumi:"maxBackoff"`
	// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxDoublings pulumi.IntPtrInput `pulumi:"maxDoublings"`
	// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxRetryDuration pulumi.StringPtrInput `pulumi:"maxRetryDuration"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MinBackoff pulumi.StringPtrInput `pulumi:"minBackoff"`
}

func (RetryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryConfig)(nil)).Elem()
}

func (i RetryConfigArgs) ToRetryConfigOutput() RetryConfigOutput {
	return i.ToRetryConfigOutputWithContext(context.Background())
}

func (i RetryConfigArgs) ToRetryConfigOutputWithContext(ctx context.Context) RetryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigOutput)
}

func (i RetryConfigArgs) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return i.ToRetryConfigPtrOutputWithContext(context.Background())
}

func (i RetryConfigArgs) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigOutput).ToRetryConfigPtrOutputWithContext(ctx)
}

// RetryConfigPtrInput is an input type that accepts RetryConfigArgs, RetryConfigPtr and RetryConfigPtrOutput values.
// You can construct a concrete instance of `RetryConfigPtrInput` via:
//
//          RetryConfigArgs{...}
//
//  or:
//
//          nil
type RetryConfigPtrInput interface {
	pulumi.Input

	ToRetryConfigPtrOutput() RetryConfigPtrOutput
	ToRetryConfigPtrOutputWithContext(context.Context) RetryConfigPtrOutput
}

type retryConfigPtrType RetryConfigArgs

func RetryConfigPtr(v *RetryConfigArgs) RetryConfigPtrInput {
	return (*retryConfigPtrType)(v)
}

func (*retryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryConfig)(nil)).Elem()
}

func (i *retryConfigPtrType) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return i.ToRetryConfigPtrOutputWithContext(context.Background())
}

func (i *retryConfigPtrType) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigPtrOutput)
}

// Retry config. These settings determine when a failed task attempt is retried.
type RetryConfigOutput struct{ *pulumi.OutputState }

func (RetryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryConfig)(nil)).Elem()
}

func (o RetryConfigOutput) ToRetryConfigOutput() RetryConfigOutput {
	return o
}

func (o RetryConfigOutput) ToRetryConfigOutputWithContext(ctx context.Context) RetryConfigOutput {
	return o
}

func (o RetryConfigOutput) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return o.ToRetryConfigPtrOutputWithContext(context.Background())
}

func (o RetryConfigOutput) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return o.ApplyT(func(v RetryConfig) *RetryConfig {
		return &v
	}).(RetryConfigPtrOutput)
}

// Number of attempts per task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be >= -1. If unspecified when the queue is created, Cloud Tasks will pick the default. -1 indicates unlimited attempts. This field has the same meaning as [task_retry_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigOutput) MaxAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryConfig) *int { return v.MaxAttempts }).(pulumi.IntPtrOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigOutput) MaxBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryConfig) *string { return v.MaxBackoff }).(pulumi.StringPtrOutput)
}

// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigOutput) MaxDoublings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryConfig) *int { return v.MaxDoublings }).(pulumi.IntPtrOutput)
}

// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigOutput) MaxRetryDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryConfig) *string { return v.MaxRetryDuration }).(pulumi.StringPtrOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigOutput) MinBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryConfig) *string { return v.MinBackoff }).(pulumi.StringPtrOutput)
}

type RetryConfigPtrOutput struct{ *pulumi.OutputState }

func (RetryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryConfig)(nil)).Elem()
}

func (o RetryConfigPtrOutput) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return o
}

func (o RetryConfigPtrOutput) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return o
}

func (o RetryConfigPtrOutput) Elem() RetryConfigOutput {
	return o.ApplyT(func(v *RetryConfig) RetryConfig { return *v }).(RetryConfigOutput)
}

// Number of attempts per task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be >= -1. If unspecified when the queue is created, Cloud Tasks will pick the default. -1 indicates unlimited attempts. This field has the same meaning as [task_retry_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigPtrOutput) MaxAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxAttempts
	}).(pulumi.IntPtrOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigPtrOutput) MaxBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxBackoff
	}).(pulumi.StringPtrOutput)
}

// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigPtrOutput) MaxDoublings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxDoublings
	}).(pulumi.IntPtrOutput)
}

// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigPtrOutput) MaxRetryDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxRetryDuration
	}).(pulumi.StringPtrOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigPtrOutput) MinBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.MinBackoff
	}).(pulumi.StringPtrOutput)
}

// Retry config. These settings determine when a failed task attempt is retried.
type RetryConfigResponse struct {
	// Number of attempts per task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be >= -1. If unspecified when the queue is created, Cloud Tasks will pick the default. -1 indicates unlimited attempts. This field has the same meaning as [task_retry_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxAttempts int `pulumi:"maxAttempts"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxBackoff string `pulumi:"maxBackoff"`
	// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxDoublings int `pulumi:"maxDoublings"`
	// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxRetryDuration string `pulumi:"maxRetryDuration"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MinBackoff string `pulumi:"minBackoff"`
}

// RetryConfigResponseInput is an input type that accepts RetryConfigResponseArgs and RetryConfigResponseOutput values.
// You can construct a concrete instance of `RetryConfigResponseInput` via:
//
//          RetryConfigResponseArgs{...}
type RetryConfigResponseInput interface {
	pulumi.Input

	ToRetryConfigResponseOutput() RetryConfigResponseOutput
	ToRetryConfigResponseOutputWithContext(context.Context) RetryConfigResponseOutput
}

// Retry config. These settings determine when a failed task attempt is retried.
type RetryConfigResponseArgs struct {
	// Number of attempts per task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be >= -1. If unspecified when the queue is created, Cloud Tasks will pick the default. -1 indicates unlimited attempts. This field has the same meaning as [task_retry_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxAttempts pulumi.IntInput `pulumi:"maxAttempts"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxBackoff pulumi.StringInput `pulumi:"maxBackoff"`
	// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxDoublings pulumi.IntInput `pulumi:"maxDoublings"`
	// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxRetryDuration pulumi.StringInput `pulumi:"maxRetryDuration"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MinBackoff pulumi.StringInput `pulumi:"minBackoff"`
}

func (RetryConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryConfigResponse)(nil)).Elem()
}

func (i RetryConfigResponseArgs) ToRetryConfigResponseOutput() RetryConfigResponseOutput {
	return i.ToRetryConfigResponseOutputWithContext(context.Background())
}

func (i RetryConfigResponseArgs) ToRetryConfigResponseOutputWithContext(ctx context.Context) RetryConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigResponseOutput)
}

func (i RetryConfigResponseArgs) ToRetryConfigResponsePtrOutput() RetryConfigResponsePtrOutput {
	return i.ToRetryConfigResponsePtrOutputWithContext(context.Background())
}

func (i RetryConfigResponseArgs) ToRetryConfigResponsePtrOutputWithContext(ctx context.Context) RetryConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigResponseOutput).ToRetryConfigResponsePtrOutputWithContext(ctx)
}

// RetryConfigResponsePtrInput is an input type that accepts RetryConfigResponseArgs, RetryConfigResponsePtr and RetryConfigResponsePtrOutput values.
// You can construct a concrete instance of `RetryConfigResponsePtrInput` via:
//
//          RetryConfigResponseArgs{...}
//
//  or:
//
//          nil
type RetryConfigResponsePtrInput interface {
	pulumi.Input

	ToRetryConfigResponsePtrOutput() RetryConfigResponsePtrOutput
	ToRetryConfigResponsePtrOutputWithContext(context.Context) RetryConfigResponsePtrOutput
}

type retryConfigResponsePtrType RetryConfigResponseArgs

func RetryConfigResponsePtr(v *RetryConfigResponseArgs) RetryConfigResponsePtrInput {
	return (*retryConfigResponsePtrType)(v)
}

func (*retryConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryConfigResponse)(nil)).Elem()
}

func (i *retryConfigResponsePtrType) ToRetryConfigResponsePtrOutput() RetryConfigResponsePtrOutput {
	return i.ToRetryConfigResponsePtrOutputWithContext(context.Background())
}

func (i *retryConfigResponsePtrType) ToRetryConfigResponsePtrOutputWithContext(ctx context.Context) RetryConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigResponsePtrOutput)
}

// Retry config. These settings determine when a failed task attempt is retried.
type RetryConfigResponseOutput struct{ *pulumi.OutputState }

func (RetryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryConfigResponse)(nil)).Elem()
}

func (o RetryConfigResponseOutput) ToRetryConfigResponseOutput() RetryConfigResponseOutput {
	return o
}

func (o RetryConfigResponseOutput) ToRetryConfigResponseOutputWithContext(ctx context.Context) RetryConfigResponseOutput {
	return o
}

func (o RetryConfigResponseOutput) ToRetryConfigResponsePtrOutput() RetryConfigResponsePtrOutput {
	return o.ToRetryConfigResponsePtrOutputWithContext(context.Background())
}

func (o RetryConfigResponseOutput) ToRetryConfigResponsePtrOutputWithContext(ctx context.Context) RetryConfigResponsePtrOutput {
	return o.ApplyT(func(v RetryConfigResponse) *RetryConfigResponse {
		return &v
	}).(RetryConfigResponsePtrOutput)
}

// Number of attempts per task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be >= -1. If unspecified when the queue is created, Cloud Tasks will pick the default. -1 indicates unlimited attempts. This field has the same meaning as [task_retry_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigResponseOutput) MaxAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v RetryConfigResponse) int { return v.MaxAttempts }).(pulumi.IntOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigResponseOutput) MaxBackoff() pulumi.StringOutput {
	return o.ApplyT(func(v RetryConfigResponse) string { return v.MaxBackoff }).(pulumi.StringOutput)
}

// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigResponseOutput) MaxDoublings() pulumi.IntOutput {
	return o.ApplyT(func(v RetryConfigResponse) int { return v.MaxDoublings }).(pulumi.IntOutput)
}

// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigResponseOutput) MaxRetryDuration() pulumi.StringOutput {
	return o.ApplyT(func(v RetryConfigResponse) string { return v.MaxRetryDuration }).(pulumi.StringOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigResponseOutput) MinBackoff() pulumi.StringOutput {
	return o.ApplyT(func(v RetryConfigResponse) string { return v.MinBackoff }).(pulumi.StringOutput)
}

type RetryConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryConfigResponse)(nil)).Elem()
}

func (o RetryConfigResponsePtrOutput) ToRetryConfigResponsePtrOutput() RetryConfigResponsePtrOutput {
	return o
}

func (o RetryConfigResponsePtrOutput) ToRetryConfigResponsePtrOutputWithContext(ctx context.Context) RetryConfigResponsePtrOutput {
	return o
}

func (o RetryConfigResponsePtrOutput) Elem() RetryConfigResponseOutput {
	return o.ApplyT(func(v *RetryConfigResponse) RetryConfigResponse { return *v }).(RetryConfigResponseOutput)
}

// Number of attempts per task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be >= -1. If unspecified when the queue is created, Cloud Tasks will pick the default. -1 indicates unlimited attempts. This field has the same meaning as [task_retry_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigResponsePtrOutput) MaxAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxAttempts
	}).(pulumi.IntPtrOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigResponsePtrOutput) MaxBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MaxBackoff
	}).(pulumi.StringPtrOutput)
}

// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigResponsePtrOutput) MaxDoublings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxDoublings
	}).(pulumi.IntPtrOutput)
}

// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigResponsePtrOutput) MaxRetryDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MaxRetryDuration
	}).(pulumi.StringPtrOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigResponsePtrOutput) MinBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MinBackoff
	}).(pulumi.StringPtrOutput)
}

// Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/).
type StackdriverLoggingConfig struct {
	// Specifies the fraction of operations to write to [Stackdriver Logging](https://cloud.google.com/logging/docs/). This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the default and means that no operations are logged.
	SamplingRatio *float64 `pulumi:"samplingRatio"`
}

// StackdriverLoggingConfigInput is an input type that accepts StackdriverLoggingConfigArgs and StackdriverLoggingConfigOutput values.
// You can construct a concrete instance of `StackdriverLoggingConfigInput` via:
//
//          StackdriverLoggingConfigArgs{...}
type StackdriverLoggingConfigInput interface {
	pulumi.Input

	ToStackdriverLoggingConfigOutput() StackdriverLoggingConfigOutput
	ToStackdriverLoggingConfigOutputWithContext(context.Context) StackdriverLoggingConfigOutput
}

// Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/).
type StackdriverLoggingConfigArgs struct {
	// Specifies the fraction of operations to write to [Stackdriver Logging](https://cloud.google.com/logging/docs/). This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the default and means that no operations are logged.
	SamplingRatio pulumi.Float64PtrInput `pulumi:"samplingRatio"`
}

func (StackdriverLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackdriverLoggingConfig)(nil)).Elem()
}

func (i StackdriverLoggingConfigArgs) ToStackdriverLoggingConfigOutput() StackdriverLoggingConfigOutput {
	return i.ToStackdriverLoggingConfigOutputWithContext(context.Background())
}

func (i StackdriverLoggingConfigArgs) ToStackdriverLoggingConfigOutputWithContext(ctx context.Context) StackdriverLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackdriverLoggingConfigOutput)
}

func (i StackdriverLoggingConfigArgs) ToStackdriverLoggingConfigPtrOutput() StackdriverLoggingConfigPtrOutput {
	return i.ToStackdriverLoggingConfigPtrOutputWithContext(context.Background())
}

func (i StackdriverLoggingConfigArgs) ToStackdriverLoggingConfigPtrOutputWithContext(ctx context.Context) StackdriverLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackdriverLoggingConfigOutput).ToStackdriverLoggingConfigPtrOutputWithContext(ctx)
}

// StackdriverLoggingConfigPtrInput is an input type that accepts StackdriverLoggingConfigArgs, StackdriverLoggingConfigPtr and StackdriverLoggingConfigPtrOutput values.
// You can construct a concrete instance of `StackdriverLoggingConfigPtrInput` via:
//
//          StackdriverLoggingConfigArgs{...}
//
//  or:
//
//          nil
type StackdriverLoggingConfigPtrInput interface {
	pulumi.Input

	ToStackdriverLoggingConfigPtrOutput() StackdriverLoggingConfigPtrOutput
	ToStackdriverLoggingConfigPtrOutputWithContext(context.Context) StackdriverLoggingConfigPtrOutput
}

type stackdriverLoggingConfigPtrType StackdriverLoggingConfigArgs

func StackdriverLoggingConfigPtr(v *StackdriverLoggingConfigArgs) StackdriverLoggingConfigPtrInput {
	return (*stackdriverLoggingConfigPtrType)(v)
}

func (*stackdriverLoggingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackdriverLoggingConfig)(nil)).Elem()
}

func (i *stackdriverLoggingConfigPtrType) ToStackdriverLoggingConfigPtrOutput() StackdriverLoggingConfigPtrOutput {
	return i.ToStackdriverLoggingConfigPtrOutputWithContext(context.Background())
}

func (i *stackdriverLoggingConfigPtrType) ToStackdriverLoggingConfigPtrOutputWithContext(ctx context.Context) StackdriverLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackdriverLoggingConfigPtrOutput)
}

// Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/).
type StackdriverLoggingConfigOutput struct{ *pulumi.OutputState }

func (StackdriverLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackdriverLoggingConfig)(nil)).Elem()
}

func (o StackdriverLoggingConfigOutput) ToStackdriverLoggingConfigOutput() StackdriverLoggingConfigOutput {
	return o
}

func (o StackdriverLoggingConfigOutput) ToStackdriverLoggingConfigOutputWithContext(ctx context.Context) StackdriverLoggingConfigOutput {
	return o
}

func (o StackdriverLoggingConfigOutput) ToStackdriverLoggingConfigPtrOutput() StackdriverLoggingConfigPtrOutput {
	return o.ToStackdriverLoggingConfigPtrOutputWithContext(context.Background())
}

func (o StackdriverLoggingConfigOutput) ToStackdriverLoggingConfigPtrOutputWithContext(ctx context.Context) StackdriverLoggingConfigPtrOutput {
	return o.ApplyT(func(v StackdriverLoggingConfig) *StackdriverLoggingConfig {
		return &v
	}).(StackdriverLoggingConfigPtrOutput)
}

// Specifies the fraction of operations to write to [Stackdriver Logging](https://cloud.google.com/logging/docs/). This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the default and means that no operations are logged.
func (o StackdriverLoggingConfigOutput) SamplingRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StackdriverLoggingConfig) *float64 { return v.SamplingRatio }).(pulumi.Float64PtrOutput)
}

type StackdriverLoggingConfigPtrOutput struct{ *pulumi.OutputState }

func (StackdriverLoggingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackdriverLoggingConfig)(nil)).Elem()
}

func (o StackdriverLoggingConfigPtrOutput) ToStackdriverLoggingConfigPtrOutput() StackdriverLoggingConfigPtrOutput {
	return o
}

func (o StackdriverLoggingConfigPtrOutput) ToStackdriverLoggingConfigPtrOutputWithContext(ctx context.Context) StackdriverLoggingConfigPtrOutput {
	return o
}

func (o StackdriverLoggingConfigPtrOutput) Elem() StackdriverLoggingConfigOutput {
	return o.ApplyT(func(v *StackdriverLoggingConfig) StackdriverLoggingConfig { return *v }).(StackdriverLoggingConfigOutput)
}

// Specifies the fraction of operations to write to [Stackdriver Logging](https://cloud.google.com/logging/docs/). This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the default and means that no operations are logged.
func (o StackdriverLoggingConfigPtrOutput) SamplingRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StackdriverLoggingConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.SamplingRatio
	}).(pulumi.Float64PtrOutput)
}

// Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/).
type StackdriverLoggingConfigResponse struct {
	// Specifies the fraction of operations to write to [Stackdriver Logging](https://cloud.google.com/logging/docs/). This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the default and means that no operations are logged.
	SamplingRatio float64 `pulumi:"samplingRatio"`
}

// StackdriverLoggingConfigResponseInput is an input type that accepts StackdriverLoggingConfigResponseArgs and StackdriverLoggingConfigResponseOutput values.
// You can construct a concrete instance of `StackdriverLoggingConfigResponseInput` via:
//
//          StackdriverLoggingConfigResponseArgs{...}
type StackdriverLoggingConfigResponseInput interface {
	pulumi.Input

	ToStackdriverLoggingConfigResponseOutput() StackdriverLoggingConfigResponseOutput
	ToStackdriverLoggingConfigResponseOutputWithContext(context.Context) StackdriverLoggingConfigResponseOutput
}

// Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/).
type StackdriverLoggingConfigResponseArgs struct {
	// Specifies the fraction of operations to write to [Stackdriver Logging](https://cloud.google.com/logging/docs/). This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the default and means that no operations are logged.
	SamplingRatio pulumi.Float64Input `pulumi:"samplingRatio"`
}

func (StackdriverLoggingConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackdriverLoggingConfigResponse)(nil)).Elem()
}

func (i StackdriverLoggingConfigResponseArgs) ToStackdriverLoggingConfigResponseOutput() StackdriverLoggingConfigResponseOutput {
	return i.ToStackdriverLoggingConfigResponseOutputWithContext(context.Background())
}

func (i StackdriverLoggingConfigResponseArgs) ToStackdriverLoggingConfigResponseOutputWithContext(ctx context.Context) StackdriverLoggingConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackdriverLoggingConfigResponseOutput)
}

func (i StackdriverLoggingConfigResponseArgs) ToStackdriverLoggingConfigResponsePtrOutput() StackdriverLoggingConfigResponsePtrOutput {
	return i.ToStackdriverLoggingConfigResponsePtrOutputWithContext(context.Background())
}

func (i StackdriverLoggingConfigResponseArgs) ToStackdriverLoggingConfigResponsePtrOutputWithContext(ctx context.Context) StackdriverLoggingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackdriverLoggingConfigResponseOutput).ToStackdriverLoggingConfigResponsePtrOutputWithContext(ctx)
}

// StackdriverLoggingConfigResponsePtrInput is an input type that accepts StackdriverLoggingConfigResponseArgs, StackdriverLoggingConfigResponsePtr and StackdriverLoggingConfigResponsePtrOutput values.
// You can construct a concrete instance of `StackdriverLoggingConfigResponsePtrInput` via:
//
//          StackdriverLoggingConfigResponseArgs{...}
//
//  or:
//
//          nil
type StackdriverLoggingConfigResponsePtrInput interface {
	pulumi.Input

	ToStackdriverLoggingConfigResponsePtrOutput() StackdriverLoggingConfigResponsePtrOutput
	ToStackdriverLoggingConfigResponsePtrOutputWithContext(context.Context) StackdriverLoggingConfigResponsePtrOutput
}

type stackdriverLoggingConfigResponsePtrType StackdriverLoggingConfigResponseArgs

func StackdriverLoggingConfigResponsePtr(v *StackdriverLoggingConfigResponseArgs) StackdriverLoggingConfigResponsePtrInput {
	return (*stackdriverLoggingConfigResponsePtrType)(v)
}

func (*stackdriverLoggingConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackdriverLoggingConfigResponse)(nil)).Elem()
}

func (i *stackdriverLoggingConfigResponsePtrType) ToStackdriverLoggingConfigResponsePtrOutput() StackdriverLoggingConfigResponsePtrOutput {
	return i.ToStackdriverLoggingConfigResponsePtrOutputWithContext(context.Background())
}

func (i *stackdriverLoggingConfigResponsePtrType) ToStackdriverLoggingConfigResponsePtrOutputWithContext(ctx context.Context) StackdriverLoggingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackdriverLoggingConfigResponsePtrOutput)
}

// Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/).
type StackdriverLoggingConfigResponseOutput struct{ *pulumi.OutputState }

func (StackdriverLoggingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackdriverLoggingConfigResponse)(nil)).Elem()
}

func (o StackdriverLoggingConfigResponseOutput) ToStackdriverLoggingConfigResponseOutput() StackdriverLoggingConfigResponseOutput {
	return o
}

func (o StackdriverLoggingConfigResponseOutput) ToStackdriverLoggingConfigResponseOutputWithContext(ctx context.Context) StackdriverLoggingConfigResponseOutput {
	return o
}

func (o StackdriverLoggingConfigResponseOutput) ToStackdriverLoggingConfigResponsePtrOutput() StackdriverLoggingConfigResponsePtrOutput {
	return o.ToStackdriverLoggingConfigResponsePtrOutputWithContext(context.Background())
}

func (o StackdriverLoggingConfigResponseOutput) ToStackdriverLoggingConfigResponsePtrOutputWithContext(ctx context.Context) StackdriverLoggingConfigResponsePtrOutput {
	return o.ApplyT(func(v StackdriverLoggingConfigResponse) *StackdriverLoggingConfigResponse {
		return &v
	}).(StackdriverLoggingConfigResponsePtrOutput)
}

// Specifies the fraction of operations to write to [Stackdriver Logging](https://cloud.google.com/logging/docs/). This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the default and means that no operations are logged.
func (o StackdriverLoggingConfigResponseOutput) SamplingRatio() pulumi.Float64Output {
	return o.ApplyT(func(v StackdriverLoggingConfigResponse) float64 { return v.SamplingRatio }).(pulumi.Float64Output)
}

type StackdriverLoggingConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (StackdriverLoggingConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackdriverLoggingConfigResponse)(nil)).Elem()
}

func (o StackdriverLoggingConfigResponsePtrOutput) ToStackdriverLoggingConfigResponsePtrOutput() StackdriverLoggingConfigResponsePtrOutput {
	return o
}

func (o StackdriverLoggingConfigResponsePtrOutput) ToStackdriverLoggingConfigResponsePtrOutputWithContext(ctx context.Context) StackdriverLoggingConfigResponsePtrOutput {
	return o
}

func (o StackdriverLoggingConfigResponsePtrOutput) Elem() StackdriverLoggingConfigResponseOutput {
	return o.ApplyT(func(v *StackdriverLoggingConfigResponse) StackdriverLoggingConfigResponse { return *v }).(StackdriverLoggingConfigResponseOutput)
}

// Specifies the fraction of operations to write to [Stackdriver Logging](https://cloud.google.com/logging/docs/). This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the default and means that no operations are logged.
func (o StackdriverLoggingConfigResponsePtrOutput) SamplingRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StackdriverLoggingConfigResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.SamplingRatio
	}).(pulumi.Float64PtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//          StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

func (i StatusArgs) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput).ToStatusPtrOutputWithContext(ctx)
}

// StatusPtrInput is an input type that accepts StatusArgs, StatusPtr and StatusPtrOutput values.
// You can construct a concrete instance of `StatusPtrInput` via:
//
//          StatusArgs{...}
//
//  or:
//
//          nil
type StatusPtrInput interface {
	pulumi.Input

	ToStatusPtrOutput() StatusPtrOutput
	ToStatusPtrOutputWithContext(context.Context) StatusPtrOutput
}

type statusPtrType StatusArgs

func StatusPtr(v *StatusArgs) StatusPtrInput {
	return (*statusPtrType)(v)
}

func (*statusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (i *statusPtrType) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i *statusPtrType) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyT(func(v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v Status) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status { return *v }).(StatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Status) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusPtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *Status) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Status) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// StatusResponseInput is an input type that accepts StatusResponseArgs and StatusResponseOutput values.
// You can construct a concrete instance of `StatusResponseInput` via:
//
//          StatusResponseArgs{...}
type StatusResponseInput interface {
	pulumi.Input

	ToStatusResponseOutput() StatusResponseOutput
	ToStatusResponseOutputWithContext(context.Context) StatusResponseOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringInput `pulumi:"message"`
}

func (StatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (i StatusResponseArgs) ToStatusResponseOutput() StatusResponseOutput {
	return i.ToStatusResponseOutputWithContext(context.Background())
}

func (i StatusResponseArgs) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponseOutput)
}

func (i StatusResponseArgs) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return i.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (i StatusResponseArgs) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponseOutput).ToStatusResponsePtrOutputWithContext(ctx)
}

// StatusResponsePtrInput is an input type that accepts StatusResponseArgs, StatusResponsePtr and StatusResponsePtrOutput values.
// You can construct a concrete instance of `StatusResponsePtrInput` via:
//
//          StatusResponseArgs{...}
//
//  or:
//
//          nil
type StatusResponsePtrInput interface {
	pulumi.Input

	ToStatusResponsePtrOutput() StatusResponsePtrOutput
	ToStatusResponsePtrOutputWithContext(context.Context) StatusResponsePtrOutput
}

type statusResponsePtrType StatusResponseArgs

func StatusResponsePtr(v *StatusResponseArgs) StatusResponsePtrInput {
	return (*statusResponsePtrType)(v)
}

func (*statusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusResponse)(nil)).Elem()
}

func (i *statusResponsePtrType) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return i.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (i *statusResponsePtrType) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponsePtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return o.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (o StatusResponseOutput) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return o.ApplyT(func(v StatusResponse) *StatusResponse {
		return &v
	}).(StatusResponsePtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusResponsePtrOutput struct{ *pulumi.OutputState }

func (StatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusResponse)(nil)).Elem()
}

func (o StatusResponsePtrOutput) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return o
}

func (o StatusResponsePtrOutput) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return o
}

func (o StatusResponsePtrOutput) Elem() StatusResponseOutput {
	return o.ApplyT(func(v *StatusResponse) StatusResponse { return *v }).(StatusResponseOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponsePtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatusResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponsePtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *StatusResponse) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AppEngineHttpQueueOutput{})
	pulumi.RegisterOutputType(AppEngineHttpQueuePtrOutput{})
	pulumi.RegisterOutputType(AppEngineHttpQueueResponseOutput{})
	pulumi.RegisterOutputType(AppEngineHttpQueueResponsePtrOutput{})
	pulumi.RegisterOutputType(AppEngineHttpRequestOutput{})
	pulumi.RegisterOutputType(AppEngineHttpRequestPtrOutput{})
	pulumi.RegisterOutputType(AppEngineHttpRequestResponseOutput{})
	pulumi.RegisterOutputType(AppEngineHttpRequestResponsePtrOutput{})
	pulumi.RegisterOutputType(AppEngineRoutingOutput{})
	pulumi.RegisterOutputType(AppEngineRoutingPtrOutput{})
	pulumi.RegisterOutputType(AppEngineRoutingResponseOutput{})
	pulumi.RegisterOutputType(AppEngineRoutingResponsePtrOutput{})
	pulumi.RegisterOutputType(AttemptOutput{})
	pulumi.RegisterOutputType(AttemptPtrOutput{})
	pulumi.RegisterOutputType(AttemptResponseOutput{})
	pulumi.RegisterOutputType(AttemptResponsePtrOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(HttpRequestOutput{})
	pulumi.RegisterOutputType(HttpRequestPtrOutput{})
	pulumi.RegisterOutputType(HttpRequestResponseOutput{})
	pulumi.RegisterOutputType(HttpRequestResponsePtrOutput{})
	pulumi.RegisterOutputType(OAuthTokenOutput{})
	pulumi.RegisterOutputType(OAuthTokenPtrOutput{})
	pulumi.RegisterOutputType(OAuthTokenResponseOutput{})
	pulumi.RegisterOutputType(OAuthTokenResponsePtrOutput{})
	pulumi.RegisterOutputType(OidcTokenOutput{})
	pulumi.RegisterOutputType(OidcTokenPtrOutput{})
	pulumi.RegisterOutputType(OidcTokenResponseOutput{})
	pulumi.RegisterOutputType(OidcTokenResponsePtrOutput{})
	pulumi.RegisterOutputType(PullMessageOutput{})
	pulumi.RegisterOutputType(PullMessagePtrOutput{})
	pulumi.RegisterOutputType(PullMessageResponseOutput{})
	pulumi.RegisterOutputType(PullMessageResponsePtrOutput{})
	pulumi.RegisterOutputType(QueueStatsResponseOutput{})
	pulumi.RegisterOutputType(QueueStatsResponsePtrOutput{})
	pulumi.RegisterOutputType(RateLimitsOutput{})
	pulumi.RegisterOutputType(RateLimitsPtrOutput{})
	pulumi.RegisterOutputType(RateLimitsResponseOutput{})
	pulumi.RegisterOutputType(RateLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(RetryConfigOutput{})
	pulumi.RegisterOutputType(RetryConfigPtrOutput{})
	pulumi.RegisterOutputType(RetryConfigResponseOutput{})
	pulumi.RegisterOutputType(RetryConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(StackdriverLoggingConfigOutput{})
	pulumi.RegisterOutputType(StackdriverLoggingConfigPtrOutput{})
	pulumi.RegisterOutputType(StackdriverLoggingConfigResponseOutput{})
	pulumi.RegisterOutputType(StackdriverLoggingConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StatusResponsePtrOutput{})
}
