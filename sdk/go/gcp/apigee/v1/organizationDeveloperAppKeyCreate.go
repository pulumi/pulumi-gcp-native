// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee hybrid from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API.
type OrganizationDeveloperAppKeyCreate struct {
	pulumi.CustomResourceState
}

// NewOrganizationDeveloperAppKeyCreate registers a new resource with the given unique name, arguments, and options.
func NewOrganizationDeveloperAppKeyCreate(ctx *pulumi.Context,
	name string, args *OrganizationDeveloperAppKeyCreateArgs, opts ...pulumi.ResourceOption) (*OrganizationDeveloperAppKeyCreate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppsId == nil {
		return nil, errors.New("invalid value for required argument 'AppsId'")
	}
	if args.DevelopersId == nil {
		return nil, errors.New("invalid value for required argument 'DevelopersId'")
	}
	if args.OrganizationsId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationsId'")
	}
	var resource OrganizationDeveloperAppKeyCreate
	err := ctx.RegisterResource("gcp-native:apigee/v1:OrganizationDeveloperAppKeyCreate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationDeveloperAppKeyCreate gets an existing OrganizationDeveloperAppKeyCreate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationDeveloperAppKeyCreate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationDeveloperAppKeyCreateState, opts ...pulumi.ResourceOption) (*OrganizationDeveloperAppKeyCreate, error) {
	var resource OrganizationDeveloperAppKeyCreate
	err := ctx.ReadResource("gcp-native:apigee/v1:OrganizationDeveloperAppKeyCreate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationDeveloperAppKeyCreate resources.
type organizationDeveloperAppKeyCreateState struct {
}

type OrganizationDeveloperAppKeyCreateState struct {
}

func (OrganizationDeveloperAppKeyCreateState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationDeveloperAppKeyCreateState)(nil)).Elem()
}

type organizationDeveloperAppKeyCreateArgs struct {
	// List of API products for which the credential can be used. **Note**: Do not specify the list of API products when creating a consumer key and secret for a developer app. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created.
	ApiProducts []interface{} `pulumi:"apiProducts"`
	AppsId      string        `pulumi:"appsId"`
	// List of attributes associated with the credential.
	Attributes []GoogleCloudApigeeV1Attribute `pulumi:"attributes"`
	// Consumer key.
	ConsumerKey *string `pulumi:"consumerKey"`
	// Secret key.
	ConsumerSecret *string `pulumi:"consumerSecret"`
	DevelopersId   string  `pulumi:"developersId"`
	// Time the developer app expires in milliseconds since epoch.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Input only. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
	ExpiresInSeconds *string `pulumi:"expiresInSeconds"`
	// Time the developer app was created in milliseconds since epoch.
	IssuedAt        *string `pulumi:"issuedAt"`
	OrganizationsId string  `pulumi:"organizationsId"`
	// Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.
	Scopes []string `pulumi:"scopes"`
	// Status of the credential. Valid values include `approved` or `revoked`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a OrganizationDeveloperAppKeyCreate resource.
type OrganizationDeveloperAppKeyCreateArgs struct {
	// List of API products for which the credential can be used. **Note**: Do not specify the list of API products when creating a consumer key and secret for a developer app. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created.
	ApiProducts pulumi.ArrayInput
	AppsId      pulumi.StringInput
	// List of attributes associated with the credential.
	Attributes GoogleCloudApigeeV1AttributeArrayInput
	// Consumer key.
	ConsumerKey pulumi.StringPtrInput
	// Secret key.
	ConsumerSecret pulumi.StringPtrInput
	DevelopersId   pulumi.StringInput
	// Time the developer app expires in milliseconds since epoch.
	ExpiresAt pulumi.StringPtrInput
	// Input only. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
	ExpiresInSeconds pulumi.StringPtrInput
	// Time the developer app was created in milliseconds since epoch.
	IssuedAt        pulumi.StringPtrInput
	OrganizationsId pulumi.StringInput
	// Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.
	Scopes pulumi.StringArrayInput
	// Status of the credential. Valid values include `approved` or `revoked`.
	Status pulumi.StringPtrInput
}

func (OrganizationDeveloperAppKeyCreateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationDeveloperAppKeyCreateArgs)(nil)).Elem()
}

type OrganizationDeveloperAppKeyCreateInput interface {
	pulumi.Input

	ToOrganizationDeveloperAppKeyCreateOutput() OrganizationDeveloperAppKeyCreateOutput
	ToOrganizationDeveloperAppKeyCreateOutputWithContext(ctx context.Context) OrganizationDeveloperAppKeyCreateOutput
}

func (*OrganizationDeveloperAppKeyCreate) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationDeveloperAppKeyCreate)(nil))
}

func (i *OrganizationDeveloperAppKeyCreate) ToOrganizationDeveloperAppKeyCreateOutput() OrganizationDeveloperAppKeyCreateOutput {
	return i.ToOrganizationDeveloperAppKeyCreateOutputWithContext(context.Background())
}

func (i *OrganizationDeveloperAppKeyCreate) ToOrganizationDeveloperAppKeyCreateOutputWithContext(ctx context.Context) OrganizationDeveloperAppKeyCreateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationDeveloperAppKeyCreateOutput)
}

type OrganizationDeveloperAppKeyCreateOutput struct {
	*pulumi.OutputState
}

func (OrganizationDeveloperAppKeyCreateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationDeveloperAppKeyCreate)(nil))
}

func (o OrganizationDeveloperAppKeyCreateOutput) ToOrganizationDeveloperAppKeyCreateOutput() OrganizationDeveloperAppKeyCreateOutput {
	return o
}

func (o OrganizationDeveloperAppKeyCreateOutput) ToOrganizationDeveloperAppKeyCreateOutputWithContext(ctx context.Context) OrganizationDeveloperAppKeyCreateOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OrganizationDeveloperAppKeyCreateOutput{})
}
