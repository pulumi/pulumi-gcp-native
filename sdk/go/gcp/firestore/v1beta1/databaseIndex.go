// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single field cannot be created.
type DatabaseIndex struct {
	pulumi.CustomResourceState

	// The collection ID to which this index applies. Required.
	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	// The fields to index.
	Fields GoogleFirestoreAdminV1beta1IndexFieldResponseArrayOutput `pulumi:"fields"`
	// The resource name of the index. Output only.
	Name pulumi.StringOutput `pulumi:"name"`
	// The state of the index. Output only.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewDatabaseIndex registers a new resource with the given unique name, arguments, and options.
func NewDatabaseIndex(ctx *pulumi.Context,
	name string, args *DatabaseIndexArgs, opts ...pulumi.ResourceOption) (*DatabaseIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabasesId == nil {
		return nil, errors.New("invalid value for required argument 'DatabasesId'")
	}
	if args.IndexesId == nil {
		return nil, errors.New("invalid value for required argument 'IndexesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource DatabaseIndex
	err := ctx.RegisterResource("gcp-native:firestore/v1beta1:DatabaseIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseIndex gets an existing DatabaseIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseIndexState, opts ...pulumi.ResourceOption) (*DatabaseIndex, error) {
	var resource DatabaseIndex
	err := ctx.ReadResource("gcp-native:firestore/v1beta1:DatabaseIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseIndex resources.
type databaseIndexState struct {
	// The collection ID to which this index applies. Required.
	CollectionId *string `pulumi:"collectionId"`
	// The fields to index.
	Fields []GoogleFirestoreAdminV1beta1IndexFieldResponse `pulumi:"fields"`
	// The resource name of the index. Output only.
	Name *string `pulumi:"name"`
	// The state of the index. Output only.
	State *string `pulumi:"state"`
}

type DatabaseIndexState struct {
	// The collection ID to which this index applies. Required.
	CollectionId pulumi.StringPtrInput
	// The fields to index.
	Fields GoogleFirestoreAdminV1beta1IndexFieldResponseArrayInput
	// The resource name of the index. Output only.
	Name pulumi.StringPtrInput
	// The state of the index. Output only.
	State pulumi.StringPtrInput
}

func (DatabaseIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseIndexState)(nil)).Elem()
}

type databaseIndexArgs struct {
	// The collection ID to which this index applies. Required.
	CollectionId *string `pulumi:"collectionId"`
	DatabasesId  string  `pulumi:"databasesId"`
	// The fields to index.
	Fields    []GoogleFirestoreAdminV1beta1IndexField `pulumi:"fields"`
	IndexesId string                                  `pulumi:"indexesId"`
	// The resource name of the index. Output only.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// The state of the index. Output only.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a DatabaseIndex resource.
type DatabaseIndexArgs struct {
	// The collection ID to which this index applies. Required.
	CollectionId pulumi.StringPtrInput
	DatabasesId  pulumi.StringInput
	// The fields to index.
	Fields    GoogleFirestoreAdminV1beta1IndexFieldArrayInput
	IndexesId pulumi.StringInput
	// The resource name of the index. Output only.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// The state of the index. Output only.
	State pulumi.StringPtrInput
}

func (DatabaseIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseIndexArgs)(nil)).Elem()
}

type DatabaseIndexInput interface {
	pulumi.Input

	ToDatabaseIndexOutput() DatabaseIndexOutput
	ToDatabaseIndexOutputWithContext(ctx context.Context) DatabaseIndexOutput
}

func (*DatabaseIndex) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIndex)(nil))
}

func (i *DatabaseIndex) ToDatabaseIndexOutput() DatabaseIndexOutput {
	return i.ToDatabaseIndexOutputWithContext(context.Background())
}

func (i *DatabaseIndex) ToDatabaseIndexOutputWithContext(ctx context.Context) DatabaseIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIndexOutput)
}

type DatabaseIndexOutput struct {
	*pulumi.OutputState
}

func (DatabaseIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIndex)(nil))
}

func (o DatabaseIndexOutput) ToDatabaseIndexOutput() DatabaseIndexOutput {
	return o
}

func (o DatabaseIndexOutput) ToDatabaseIndexOutputWithContext(ctx context.Context) DatabaseIndexOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DatabaseIndexOutput{})
}
