// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjects struct {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
	Location *string `pulumi:"location"`
	// Path globs used to match files in the build's workspace.
	Paths []string `pulumi:"paths"`
}

// ArtifactObjectsInput is an input type that accepts ArtifactObjectsArgs and ArtifactObjectsOutput values.
// You can construct a concrete instance of `ArtifactObjectsInput` via:
//
//          ArtifactObjectsArgs{...}
type ArtifactObjectsInput interface {
	pulumi.Input

	ToArtifactObjectsOutput() ArtifactObjectsOutput
	ToArtifactObjectsOutputWithContext(context.Context) ArtifactObjectsOutput
}

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjectsArgs struct {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Path globs used to match files in the build's workspace.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
}

func (ArtifactObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactObjects)(nil)).Elem()
}

func (i ArtifactObjectsArgs) ToArtifactObjectsOutput() ArtifactObjectsOutput {
	return i.ToArtifactObjectsOutputWithContext(context.Background())
}

func (i ArtifactObjectsArgs) ToArtifactObjectsOutputWithContext(ctx context.Context) ArtifactObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactObjectsOutput)
}

func (i ArtifactObjectsArgs) ToArtifactObjectsPtrOutput() ArtifactObjectsPtrOutput {
	return i.ToArtifactObjectsPtrOutputWithContext(context.Background())
}

func (i ArtifactObjectsArgs) ToArtifactObjectsPtrOutputWithContext(ctx context.Context) ArtifactObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactObjectsOutput).ToArtifactObjectsPtrOutputWithContext(ctx)
}

// ArtifactObjectsPtrInput is an input type that accepts ArtifactObjectsArgs, ArtifactObjectsPtr and ArtifactObjectsPtrOutput values.
// You can construct a concrete instance of `ArtifactObjectsPtrInput` via:
//
//          ArtifactObjectsArgs{...}
//
//  or:
//
//          nil
type ArtifactObjectsPtrInput interface {
	pulumi.Input

	ToArtifactObjectsPtrOutput() ArtifactObjectsPtrOutput
	ToArtifactObjectsPtrOutputWithContext(context.Context) ArtifactObjectsPtrOutput
}

type artifactObjectsPtrType ArtifactObjectsArgs

func ArtifactObjectsPtr(v *ArtifactObjectsArgs) ArtifactObjectsPtrInput {
	return (*artifactObjectsPtrType)(v)
}

func (*artifactObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactObjects)(nil)).Elem()
}

func (i *artifactObjectsPtrType) ToArtifactObjectsPtrOutput() ArtifactObjectsPtrOutput {
	return i.ToArtifactObjectsPtrOutputWithContext(context.Background())
}

func (i *artifactObjectsPtrType) ToArtifactObjectsPtrOutputWithContext(ctx context.Context) ArtifactObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactObjectsPtrOutput)
}

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjectsOutput struct{ *pulumi.OutputState }

func (ArtifactObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactObjects)(nil)).Elem()
}

func (o ArtifactObjectsOutput) ToArtifactObjectsOutput() ArtifactObjectsOutput {
	return o
}

func (o ArtifactObjectsOutput) ToArtifactObjectsOutputWithContext(ctx context.Context) ArtifactObjectsOutput {
	return o
}

func (o ArtifactObjectsOutput) ToArtifactObjectsPtrOutput() ArtifactObjectsPtrOutput {
	return o.ToArtifactObjectsPtrOutputWithContext(context.Background())
}

func (o ArtifactObjectsOutput) ToArtifactObjectsPtrOutputWithContext(ctx context.Context) ArtifactObjectsPtrOutput {
	return o.ApplyT(func(v ArtifactObjects) *ArtifactObjects {
		return &v
	}).(ArtifactObjectsPtrOutput)
}

// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
func (o ArtifactObjectsOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactObjects) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Path globs used to match files in the build's workspace.
func (o ArtifactObjectsOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactObjects) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type ArtifactObjectsPtrOutput struct{ *pulumi.OutputState }

func (ArtifactObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactObjects)(nil)).Elem()
}

func (o ArtifactObjectsPtrOutput) ToArtifactObjectsPtrOutput() ArtifactObjectsPtrOutput {
	return o
}

func (o ArtifactObjectsPtrOutput) ToArtifactObjectsPtrOutputWithContext(ctx context.Context) ArtifactObjectsPtrOutput {
	return o
}

func (o ArtifactObjectsPtrOutput) Elem() ArtifactObjectsOutput {
	return o.ApplyT(func(v *ArtifactObjects) ArtifactObjects { return *v }).(ArtifactObjectsOutput)
}

// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
func (o ArtifactObjectsPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactObjects) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Path globs used to match files in the build's workspace.
func (o ArtifactObjectsPtrOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactObjects) []string {
		if v == nil {
			return nil
		}
		return v.Paths
	}).(pulumi.StringArrayOutput)
}

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjectsResponse struct {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
	Location string `pulumi:"location"`
	// Path globs used to match files in the build's workspace.
	Paths []string `pulumi:"paths"`
	// Stores timing information for pushing all artifact objects.
	Timing TimeSpanResponse `pulumi:"timing"`
}

// ArtifactObjectsResponseInput is an input type that accepts ArtifactObjectsResponseArgs and ArtifactObjectsResponseOutput values.
// You can construct a concrete instance of `ArtifactObjectsResponseInput` via:
//
//          ArtifactObjectsResponseArgs{...}
type ArtifactObjectsResponseInput interface {
	pulumi.Input

	ToArtifactObjectsResponseOutput() ArtifactObjectsResponseOutput
	ToArtifactObjectsResponseOutputWithContext(context.Context) ArtifactObjectsResponseOutput
}

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjectsResponseArgs struct {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
	Location pulumi.StringInput `pulumi:"location"`
	// Path globs used to match files in the build's workspace.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// Stores timing information for pushing all artifact objects.
	Timing TimeSpanResponseInput `pulumi:"timing"`
}

func (ArtifactObjectsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactObjectsResponse)(nil)).Elem()
}

func (i ArtifactObjectsResponseArgs) ToArtifactObjectsResponseOutput() ArtifactObjectsResponseOutput {
	return i.ToArtifactObjectsResponseOutputWithContext(context.Background())
}

func (i ArtifactObjectsResponseArgs) ToArtifactObjectsResponseOutputWithContext(ctx context.Context) ArtifactObjectsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactObjectsResponseOutput)
}

func (i ArtifactObjectsResponseArgs) ToArtifactObjectsResponsePtrOutput() ArtifactObjectsResponsePtrOutput {
	return i.ToArtifactObjectsResponsePtrOutputWithContext(context.Background())
}

func (i ArtifactObjectsResponseArgs) ToArtifactObjectsResponsePtrOutputWithContext(ctx context.Context) ArtifactObjectsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactObjectsResponseOutput).ToArtifactObjectsResponsePtrOutputWithContext(ctx)
}

// ArtifactObjectsResponsePtrInput is an input type that accepts ArtifactObjectsResponseArgs, ArtifactObjectsResponsePtr and ArtifactObjectsResponsePtrOutput values.
// You can construct a concrete instance of `ArtifactObjectsResponsePtrInput` via:
//
//          ArtifactObjectsResponseArgs{...}
//
//  or:
//
//          nil
type ArtifactObjectsResponsePtrInput interface {
	pulumi.Input

	ToArtifactObjectsResponsePtrOutput() ArtifactObjectsResponsePtrOutput
	ToArtifactObjectsResponsePtrOutputWithContext(context.Context) ArtifactObjectsResponsePtrOutput
}

type artifactObjectsResponsePtrType ArtifactObjectsResponseArgs

func ArtifactObjectsResponsePtr(v *ArtifactObjectsResponseArgs) ArtifactObjectsResponsePtrInput {
	return (*artifactObjectsResponsePtrType)(v)
}

func (*artifactObjectsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactObjectsResponse)(nil)).Elem()
}

func (i *artifactObjectsResponsePtrType) ToArtifactObjectsResponsePtrOutput() ArtifactObjectsResponsePtrOutput {
	return i.ToArtifactObjectsResponsePtrOutputWithContext(context.Background())
}

func (i *artifactObjectsResponsePtrType) ToArtifactObjectsResponsePtrOutputWithContext(ctx context.Context) ArtifactObjectsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactObjectsResponsePtrOutput)
}

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjectsResponseOutput struct{ *pulumi.OutputState }

func (ArtifactObjectsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactObjectsResponse)(nil)).Elem()
}

func (o ArtifactObjectsResponseOutput) ToArtifactObjectsResponseOutput() ArtifactObjectsResponseOutput {
	return o
}

func (o ArtifactObjectsResponseOutput) ToArtifactObjectsResponseOutputWithContext(ctx context.Context) ArtifactObjectsResponseOutput {
	return o
}

func (o ArtifactObjectsResponseOutput) ToArtifactObjectsResponsePtrOutput() ArtifactObjectsResponsePtrOutput {
	return o.ToArtifactObjectsResponsePtrOutputWithContext(context.Background())
}

func (o ArtifactObjectsResponseOutput) ToArtifactObjectsResponsePtrOutputWithContext(ctx context.Context) ArtifactObjectsResponsePtrOutput {
	return o.ApplyT(func(v ArtifactObjectsResponse) *ArtifactObjectsResponse {
		return &v
	}).(ArtifactObjectsResponsePtrOutput)
}

// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
func (o ArtifactObjectsResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ArtifactObjectsResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Path globs used to match files in the build's workspace.
func (o ArtifactObjectsResponseOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactObjectsResponse) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Stores timing information for pushing all artifact objects.
func (o ArtifactObjectsResponseOutput) Timing() TimeSpanResponseOutput {
	return o.ApplyT(func(v ArtifactObjectsResponse) TimeSpanResponse { return v.Timing }).(TimeSpanResponseOutput)
}

type ArtifactObjectsResponsePtrOutput struct{ *pulumi.OutputState }

func (ArtifactObjectsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactObjectsResponse)(nil)).Elem()
}

func (o ArtifactObjectsResponsePtrOutput) ToArtifactObjectsResponsePtrOutput() ArtifactObjectsResponsePtrOutput {
	return o
}

func (o ArtifactObjectsResponsePtrOutput) ToArtifactObjectsResponsePtrOutputWithContext(ctx context.Context) ArtifactObjectsResponsePtrOutput {
	return o
}

func (o ArtifactObjectsResponsePtrOutput) Elem() ArtifactObjectsResponseOutput {
	return o.ApplyT(func(v *ArtifactObjectsResponse) ArtifactObjectsResponse { return *v }).(ArtifactObjectsResponseOutput)
}

// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
func (o ArtifactObjectsResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactObjectsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Path globs used to match files in the build's workspace.
func (o ArtifactObjectsResponsePtrOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactObjectsResponse) []string {
		if v == nil {
			return nil
		}
		return v.Paths
	}).(pulumi.StringArrayOutput)
}

// Stores timing information for pushing all artifact objects.
func (o ArtifactObjectsResponsePtrOutput) Timing() TimeSpanResponsePtrOutput {
	return o.ApplyT(func(v *ArtifactObjectsResponse) *TimeSpanResponse {
		if v == nil {
			return nil
		}
		return &v.Timing
	}).(TimeSpanResponsePtrOutput)
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type Artifacts struct {
	// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
	Images []string `pulumi:"images"`
	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
	Objects *ArtifactObjects `pulumi:"objects"`
}

// ArtifactsInput is an input type that accepts ArtifactsArgs and ArtifactsOutput values.
// You can construct a concrete instance of `ArtifactsInput` via:
//
//          ArtifactsArgs{...}
type ArtifactsInput interface {
	pulumi.Input

	ToArtifactsOutput() ArtifactsOutput
	ToArtifactsOutputWithContext(context.Context) ArtifactsOutput
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type ArtifactsArgs struct {
	// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
	Images pulumi.StringArrayInput `pulumi:"images"`
	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
	Objects ArtifactObjectsPtrInput `pulumi:"objects"`
}

func (ArtifactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifacts)(nil)).Elem()
}

func (i ArtifactsArgs) ToArtifactsOutput() ArtifactsOutput {
	return i.ToArtifactsOutputWithContext(context.Background())
}

func (i ArtifactsArgs) ToArtifactsOutputWithContext(ctx context.Context) ArtifactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsOutput)
}

func (i ArtifactsArgs) ToArtifactsPtrOutput() ArtifactsPtrOutput {
	return i.ToArtifactsPtrOutputWithContext(context.Background())
}

func (i ArtifactsArgs) ToArtifactsPtrOutputWithContext(ctx context.Context) ArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsOutput).ToArtifactsPtrOutputWithContext(ctx)
}

// ArtifactsPtrInput is an input type that accepts ArtifactsArgs, ArtifactsPtr and ArtifactsPtrOutput values.
// You can construct a concrete instance of `ArtifactsPtrInput` via:
//
//          ArtifactsArgs{...}
//
//  or:
//
//          nil
type ArtifactsPtrInput interface {
	pulumi.Input

	ToArtifactsPtrOutput() ArtifactsPtrOutput
	ToArtifactsPtrOutputWithContext(context.Context) ArtifactsPtrOutput
}

type artifactsPtrType ArtifactsArgs

func ArtifactsPtr(v *ArtifactsArgs) ArtifactsPtrInput {
	return (*artifactsPtrType)(v)
}

func (*artifactsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifacts)(nil)).Elem()
}

func (i *artifactsPtrType) ToArtifactsPtrOutput() ArtifactsPtrOutput {
	return i.ToArtifactsPtrOutputWithContext(context.Background())
}

func (i *artifactsPtrType) ToArtifactsPtrOutputWithContext(ctx context.Context) ArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsPtrOutput)
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type ArtifactsOutput struct{ *pulumi.OutputState }

func (ArtifactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifacts)(nil)).Elem()
}

func (o ArtifactsOutput) ToArtifactsOutput() ArtifactsOutput {
	return o
}

func (o ArtifactsOutput) ToArtifactsOutputWithContext(ctx context.Context) ArtifactsOutput {
	return o
}

func (o ArtifactsOutput) ToArtifactsPtrOutput() ArtifactsPtrOutput {
	return o.ToArtifactsPtrOutputWithContext(context.Background())
}

func (o ArtifactsOutput) ToArtifactsPtrOutputWithContext(ctx context.Context) ArtifactsPtrOutput {
	return o.ApplyT(func(v Artifacts) *Artifacts {
		return &v
	}).(ArtifactsPtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
func (o ArtifactsOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Artifacts) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
func (o ArtifactsOutput) Objects() ArtifactObjectsPtrOutput {
	return o.ApplyT(func(v Artifacts) *ArtifactObjects { return v.Objects }).(ArtifactObjectsPtrOutput)
}

type ArtifactsPtrOutput struct{ *pulumi.OutputState }

func (ArtifactsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifacts)(nil)).Elem()
}

func (o ArtifactsPtrOutput) ToArtifactsPtrOutput() ArtifactsPtrOutput {
	return o
}

func (o ArtifactsPtrOutput) ToArtifactsPtrOutputWithContext(ctx context.Context) ArtifactsPtrOutput {
	return o
}

func (o ArtifactsPtrOutput) Elem() ArtifactsOutput {
	return o.ApplyT(func(v *Artifacts) Artifacts { return *v }).(ArtifactsOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
func (o ArtifactsPtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Artifacts) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
func (o ArtifactsPtrOutput) Objects() ArtifactObjectsPtrOutput {
	return o.ApplyT(func(v *Artifacts) *ArtifactObjects {
		if v == nil {
			return nil
		}
		return v.Objects
	}).(ArtifactObjectsPtrOutput)
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type ArtifactsResponse struct {
	// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
	Images []string `pulumi:"images"`
	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
	Objects ArtifactObjectsResponse `pulumi:"objects"`
}

// ArtifactsResponseInput is an input type that accepts ArtifactsResponseArgs and ArtifactsResponseOutput values.
// You can construct a concrete instance of `ArtifactsResponseInput` via:
//
//          ArtifactsResponseArgs{...}
type ArtifactsResponseInput interface {
	pulumi.Input

	ToArtifactsResponseOutput() ArtifactsResponseOutput
	ToArtifactsResponseOutputWithContext(context.Context) ArtifactsResponseOutput
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type ArtifactsResponseArgs struct {
	// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
	Images pulumi.StringArrayInput `pulumi:"images"`
	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
	Objects ArtifactObjectsResponseInput `pulumi:"objects"`
}

func (ArtifactsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactsResponse)(nil)).Elem()
}

func (i ArtifactsResponseArgs) ToArtifactsResponseOutput() ArtifactsResponseOutput {
	return i.ToArtifactsResponseOutputWithContext(context.Background())
}

func (i ArtifactsResponseArgs) ToArtifactsResponseOutputWithContext(ctx context.Context) ArtifactsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsResponseOutput)
}

func (i ArtifactsResponseArgs) ToArtifactsResponsePtrOutput() ArtifactsResponsePtrOutput {
	return i.ToArtifactsResponsePtrOutputWithContext(context.Background())
}

func (i ArtifactsResponseArgs) ToArtifactsResponsePtrOutputWithContext(ctx context.Context) ArtifactsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsResponseOutput).ToArtifactsResponsePtrOutputWithContext(ctx)
}

// ArtifactsResponsePtrInput is an input type that accepts ArtifactsResponseArgs, ArtifactsResponsePtr and ArtifactsResponsePtrOutput values.
// You can construct a concrete instance of `ArtifactsResponsePtrInput` via:
//
//          ArtifactsResponseArgs{...}
//
//  or:
//
//          nil
type ArtifactsResponsePtrInput interface {
	pulumi.Input

	ToArtifactsResponsePtrOutput() ArtifactsResponsePtrOutput
	ToArtifactsResponsePtrOutputWithContext(context.Context) ArtifactsResponsePtrOutput
}

type artifactsResponsePtrType ArtifactsResponseArgs

func ArtifactsResponsePtr(v *ArtifactsResponseArgs) ArtifactsResponsePtrInput {
	return (*artifactsResponsePtrType)(v)
}

func (*artifactsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactsResponse)(nil)).Elem()
}

func (i *artifactsResponsePtrType) ToArtifactsResponsePtrOutput() ArtifactsResponsePtrOutput {
	return i.ToArtifactsResponsePtrOutputWithContext(context.Background())
}

func (i *artifactsResponsePtrType) ToArtifactsResponsePtrOutputWithContext(ctx context.Context) ArtifactsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsResponsePtrOutput)
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type ArtifactsResponseOutput struct{ *pulumi.OutputState }

func (ArtifactsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactsResponse)(nil)).Elem()
}

func (o ArtifactsResponseOutput) ToArtifactsResponseOutput() ArtifactsResponseOutput {
	return o
}

func (o ArtifactsResponseOutput) ToArtifactsResponseOutputWithContext(ctx context.Context) ArtifactsResponseOutput {
	return o
}

func (o ArtifactsResponseOutput) ToArtifactsResponsePtrOutput() ArtifactsResponsePtrOutput {
	return o.ToArtifactsResponsePtrOutputWithContext(context.Background())
}

func (o ArtifactsResponseOutput) ToArtifactsResponsePtrOutputWithContext(ctx context.Context) ArtifactsResponsePtrOutput {
	return o.ApplyT(func(v ArtifactsResponse) *ArtifactsResponse {
		return &v
	}).(ArtifactsResponsePtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
func (o ArtifactsResponseOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactsResponse) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
func (o ArtifactsResponseOutput) Objects() ArtifactObjectsResponseOutput {
	return o.ApplyT(func(v ArtifactsResponse) ArtifactObjectsResponse { return v.Objects }).(ArtifactObjectsResponseOutput)
}

type ArtifactsResponsePtrOutput struct{ *pulumi.OutputState }

func (ArtifactsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactsResponse)(nil)).Elem()
}

func (o ArtifactsResponsePtrOutput) ToArtifactsResponsePtrOutput() ArtifactsResponsePtrOutput {
	return o
}

func (o ArtifactsResponsePtrOutput) ToArtifactsResponsePtrOutputWithContext(ctx context.Context) ArtifactsResponsePtrOutput {
	return o
}

func (o ArtifactsResponsePtrOutput) Elem() ArtifactsResponseOutput {
	return o.ApplyT(func(v *ArtifactsResponse) ArtifactsResponse { return *v }).(ArtifactsResponseOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
func (o ArtifactsResponsePtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactsResponse) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
func (o ArtifactsResponsePtrOutput) Objects() ArtifactObjectsResponsePtrOutput {
	return o.ApplyT(func(v *ArtifactsResponse) *ArtifactObjectsResponse {
		if v == nil {
			return nil
		}
		return &v.Objects
	}).(ArtifactObjectsResponsePtrOutput)
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildType struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts *Artifacts `pulumi:"artifacts"`
	// Secrets and secret environment variables.
	AvailableSecrets *Secrets `pulumi:"availableSecrets"`
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images []string `pulumi:"images"`
	// Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket *string `pulumi:"logsBucket"`
	// Special options for this build.
	Options *BuildOptions `pulumi:"options"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl *string `pulumi:"queueTtl"`
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets []Secret `pulumi:"secrets"`
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in beta.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The location of the source files to build.
	Source *Source `pulumi:"source"`
	// Required. The operations to be performed on the workspace.
	Steps []BuildStep `pulumi:"steps"`
	// Substitutions data for `Build` resource.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags []string `pulumi:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
	Timeout *string `pulumi:"timeout"`
}

// BuildTypeInput is an input type that accepts BuildTypeArgs and BuildTypeOutput values.
// You can construct a concrete instance of `BuildTypeInput` via:
//
//          BuildTypeArgs{...}
type BuildTypeInput interface {
	pulumi.Input

	ToBuildTypeOutput() BuildTypeOutput
	ToBuildTypeOutputWithContext(context.Context) BuildTypeOutput
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildTypeArgs struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts ArtifactsPtrInput `pulumi:"artifacts"`
	// Secrets and secret environment variables.
	AvailableSecrets SecretsPtrInput `pulumi:"availableSecrets"`
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images pulumi.StringArrayInput `pulumi:"images"`
	// Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket pulumi.StringPtrInput `pulumi:"logsBucket"`
	// Special options for this build.
	Options BuildOptionsPtrInput `pulumi:"options"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl pulumi.StringPtrInput `pulumi:"queueTtl"`
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets SecretArrayInput `pulumi:"secrets"`
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in beta.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The location of the source files to build.
	Source SourcePtrInput `pulumi:"source"`
	// Required. The operations to be performed on the workspace.
	Steps BuildStepArrayInput `pulumi:"steps"`
	// Substitutions data for `Build` resource.
	Substitutions pulumi.StringMapInput `pulumi:"substitutions"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (BuildTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildType)(nil)).Elem()
}

func (i BuildTypeArgs) ToBuildTypeOutput() BuildTypeOutput {
	return i.ToBuildTypeOutputWithContext(context.Background())
}

func (i BuildTypeArgs) ToBuildTypeOutputWithContext(ctx context.Context) BuildTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypeOutput)
}

func (i BuildTypeArgs) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return i.ToBuildTypePtrOutputWithContext(context.Background())
}

func (i BuildTypeArgs) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypeOutput).ToBuildTypePtrOutputWithContext(ctx)
}

// BuildTypePtrInput is an input type that accepts BuildTypeArgs, BuildTypePtr and BuildTypePtrOutput values.
// You can construct a concrete instance of `BuildTypePtrInput` via:
//
//          BuildTypeArgs{...}
//
//  or:
//
//          nil
type BuildTypePtrInput interface {
	pulumi.Input

	ToBuildTypePtrOutput() BuildTypePtrOutput
	ToBuildTypePtrOutputWithContext(context.Context) BuildTypePtrOutput
}

type buildTypePtrType BuildTypeArgs

func BuildTypePtr(v *BuildTypeArgs) BuildTypePtrInput {
	return (*buildTypePtrType)(v)
}

func (*buildTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildType)(nil)).Elem()
}

func (i *buildTypePtrType) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return i.ToBuildTypePtrOutputWithContext(context.Background())
}

func (i *buildTypePtrType) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypePtrOutput)
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildTypeOutput struct{ *pulumi.OutputState }

func (BuildTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildType)(nil)).Elem()
}

func (o BuildTypeOutput) ToBuildTypeOutput() BuildTypeOutput {
	return o
}

func (o BuildTypeOutput) ToBuildTypeOutputWithContext(ctx context.Context) BuildTypeOutput {
	return o
}

func (o BuildTypeOutput) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return o.ToBuildTypePtrOutputWithContext(context.Background())
}

func (o BuildTypeOutput) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return o.ApplyT(func(v BuildType) *BuildType {
		return &v
	}).(BuildTypePtrOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
func (o BuildTypeOutput) Artifacts() ArtifactsPtrOutput {
	return o.ApplyT(func(v BuildType) *Artifacts { return v.Artifacts }).(ArtifactsPtrOutput)
}

// Secrets and secret environment variables.
func (o BuildTypeOutput) AvailableSecrets() SecretsPtrOutput {
	return o.ApplyT(func(v BuildType) *Secrets { return v.AvailableSecrets }).(SecretsPtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
func (o BuildTypeOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildType) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
func (o BuildTypeOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildType) *string { return v.LogsBucket }).(pulumi.StringPtrOutput)
}

// Special options for this build.
func (o BuildTypeOutput) Options() BuildOptionsPtrOutput {
	return o.ApplyT(func(v BuildType) *BuildOptions { return v.Options }).(BuildOptionsPtrOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
func (o BuildTypeOutput) QueueTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildType) *string { return v.QueueTtl }).(pulumi.StringPtrOutput)
}

// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
func (o BuildTypeOutput) Secrets() SecretArrayOutput {
	return o.ApplyT(func(v BuildType) []Secret { return v.Secrets }).(SecretArrayOutput)
}

// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in beta.
func (o BuildTypeOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildType) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The location of the source files to build.
func (o BuildTypeOutput) Source() SourcePtrOutput {
	return o.ApplyT(func(v BuildType) *Source { return v.Source }).(SourcePtrOutput)
}

// Required. The operations to be performed on the workspace.
func (o BuildTypeOutput) Steps() BuildStepArrayOutput {
	return o.ApplyT(func(v BuildType) []BuildStep { return v.Steps }).(BuildStepArrayOutput)
}

// Substitutions data for `Build` resource.
func (o BuildTypeOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildType) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Tags for annotation of a `Build`. These are not docker tags.
func (o BuildTypeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildType) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
func (o BuildTypeOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildType) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BuildTypePtrOutput struct{ *pulumi.OutputState }

func (BuildTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildType)(nil)).Elem()
}

func (o BuildTypePtrOutput) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return o
}

func (o BuildTypePtrOutput) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return o
}

func (o BuildTypePtrOutput) Elem() BuildTypeOutput {
	return o.ApplyT(func(v *BuildType) BuildType { return *v }).(BuildTypeOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
func (o BuildTypePtrOutput) Artifacts() ArtifactsPtrOutput {
	return o.ApplyT(func(v *BuildType) *Artifacts {
		if v == nil {
			return nil
		}
		return v.Artifacts
	}).(ArtifactsPtrOutput)
}

// Secrets and secret environment variables.
func (o BuildTypePtrOutput) AvailableSecrets() SecretsPtrOutput {
	return o.ApplyT(func(v *BuildType) *Secrets {
		if v == nil {
			return nil
		}
		return v.AvailableSecrets
	}).(SecretsPtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
func (o BuildTypePtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildType) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
func (o BuildTypePtrOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildType) *string {
		if v == nil {
			return nil
		}
		return v.LogsBucket
	}).(pulumi.StringPtrOutput)
}

// Special options for this build.
func (o BuildTypePtrOutput) Options() BuildOptionsPtrOutput {
	return o.ApplyT(func(v *BuildType) *BuildOptions {
		if v == nil {
			return nil
		}
		return v.Options
	}).(BuildOptionsPtrOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
func (o BuildTypePtrOutput) QueueTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildType) *string {
		if v == nil {
			return nil
		}
		return v.QueueTtl
	}).(pulumi.StringPtrOutput)
}

// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
func (o BuildTypePtrOutput) Secrets() SecretArrayOutput {
	return o.ApplyT(func(v *BuildType) []Secret {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretArrayOutput)
}

// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in beta.
func (o BuildTypePtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildType) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The location of the source files to build.
func (o BuildTypePtrOutput) Source() SourcePtrOutput {
	return o.ApplyT(func(v *BuildType) *Source {
		if v == nil {
			return nil
		}
		return v.Source
	}).(SourcePtrOutput)
}

// Required. The operations to be performed on the workspace.
func (o BuildTypePtrOutput) Steps() BuildStepArrayOutput {
	return o.ApplyT(func(v *BuildType) []BuildStep {
		if v == nil {
			return nil
		}
		return v.Steps
	}).(BuildStepArrayOutput)
}

// Substitutions data for `Build` resource.
func (o BuildTypePtrOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildType) map[string]string {
		if v == nil {
			return nil
		}
		return v.Substitutions
	}).(pulumi.StringMapOutput)
}

// Tags for annotation of a `Build`. These are not docker tags.
func (o BuildTypePtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildType) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
func (o BuildTypePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildType) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Optional arguments to enable specific features of builds.
type BuildOptions struct {
	// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions *bool `pulumi:"dynamicSubstitutions"`
	// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env []string `pulumi:"env"`
	// Option to define build log streaming behavior to Google Cloud Storage.
	LogStreamingOption *string `pulumi:"logStreamingOption"`
	// Option to specify the logging mode, which determines if and where build logs are stored.
	Logging *string `pulumi:"logging"`
	// Compute Engine machine type on which to run the build.
	MachineType *string `pulumi:"machineType"`
	// Requested verifiability options.
	RequestedVerifyOption *string `pulumi:"requestedVerifyOption"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
	SecretEnv []string `pulumi:"secretEnv"`
	// Requested hash for SourceProvenance.
	SourceProvenanceHash []string `pulumi:"sourceProvenanceHash"`
	// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
	SubstitutionOption *string `pulumi:"substitutionOption"`
	// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes []Volume `pulumi:"volumes"`
	// Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool} This field is in beta and is available only to restricted users.
	WorkerPool *string `pulumi:"workerPool"`
}

// BuildOptionsInput is an input type that accepts BuildOptionsArgs and BuildOptionsOutput values.
// You can construct a concrete instance of `BuildOptionsInput` via:
//
//          BuildOptionsArgs{...}
type BuildOptionsInput interface {
	pulumi.Input

	ToBuildOptionsOutput() BuildOptionsOutput
	ToBuildOptionsOutputWithContext(context.Context) BuildOptionsOutput
}

// Optional arguments to enable specific features of builds.
type BuildOptionsArgs struct {
	// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions pulumi.BoolPtrInput `pulumi:"dynamicSubstitutions"`
	// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Option to define build log streaming behavior to Google Cloud Storage.
	LogStreamingOption pulumi.StringPtrInput `pulumi:"logStreamingOption"`
	// Option to specify the logging mode, which determines if and where build logs are stored.
	Logging pulumi.StringPtrInput `pulumi:"logging"`
	// Compute Engine machine type on which to run the build.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// Requested verifiability options.
	RequestedVerifyOption pulumi.StringPtrInput `pulumi:"requestedVerifyOption"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
	SecretEnv pulumi.StringArrayInput `pulumi:"secretEnv"`
	// Requested hash for SourceProvenance.
	SourceProvenanceHash pulumi.StringArrayInput `pulumi:"sourceProvenanceHash"`
	// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
	SubstitutionOption pulumi.StringPtrInput `pulumi:"substitutionOption"`
	// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes VolumeArrayInput `pulumi:"volumes"`
	// Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool} This field is in beta and is available only to restricted users.
	WorkerPool pulumi.StringPtrInput `pulumi:"workerPool"`
}

func (BuildOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildOptions)(nil)).Elem()
}

func (i BuildOptionsArgs) ToBuildOptionsOutput() BuildOptionsOutput {
	return i.ToBuildOptionsOutputWithContext(context.Background())
}

func (i BuildOptionsArgs) ToBuildOptionsOutputWithContext(ctx context.Context) BuildOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOptionsOutput)
}

func (i BuildOptionsArgs) ToBuildOptionsPtrOutput() BuildOptionsPtrOutput {
	return i.ToBuildOptionsPtrOutputWithContext(context.Background())
}

func (i BuildOptionsArgs) ToBuildOptionsPtrOutputWithContext(ctx context.Context) BuildOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOptionsOutput).ToBuildOptionsPtrOutputWithContext(ctx)
}

// BuildOptionsPtrInput is an input type that accepts BuildOptionsArgs, BuildOptionsPtr and BuildOptionsPtrOutput values.
// You can construct a concrete instance of `BuildOptionsPtrInput` via:
//
//          BuildOptionsArgs{...}
//
//  or:
//
//          nil
type BuildOptionsPtrInput interface {
	pulumi.Input

	ToBuildOptionsPtrOutput() BuildOptionsPtrOutput
	ToBuildOptionsPtrOutputWithContext(context.Context) BuildOptionsPtrOutput
}

type buildOptionsPtrType BuildOptionsArgs

func BuildOptionsPtr(v *BuildOptionsArgs) BuildOptionsPtrInput {
	return (*buildOptionsPtrType)(v)
}

func (*buildOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildOptions)(nil)).Elem()
}

func (i *buildOptionsPtrType) ToBuildOptionsPtrOutput() BuildOptionsPtrOutput {
	return i.ToBuildOptionsPtrOutputWithContext(context.Background())
}

func (i *buildOptionsPtrType) ToBuildOptionsPtrOutputWithContext(ctx context.Context) BuildOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOptionsPtrOutput)
}

// Optional arguments to enable specific features of builds.
type BuildOptionsOutput struct{ *pulumi.OutputState }

func (BuildOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildOptions)(nil)).Elem()
}

func (o BuildOptionsOutput) ToBuildOptionsOutput() BuildOptionsOutput {
	return o
}

func (o BuildOptionsOutput) ToBuildOptionsOutputWithContext(ctx context.Context) BuildOptionsOutput {
	return o
}

func (o BuildOptionsOutput) ToBuildOptionsPtrOutput() BuildOptionsPtrOutput {
	return o.ToBuildOptionsPtrOutputWithContext(context.Background())
}

func (o BuildOptionsOutput) ToBuildOptionsPtrOutputWithContext(ctx context.Context) BuildOptionsPtrOutput {
	return o.ApplyT(func(v BuildOptions) *BuildOptions {
		return &v
	}).(BuildOptionsPtrOutput)
}

// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
func (o BuildOptionsOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildOptions) *string { return v.DiskSizeGb }).(pulumi.StringPtrOutput)
}

// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsOutput) DynamicSubstitutions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildOptions) *bool { return v.DynamicSubstitutions }).(pulumi.BoolPtrOutput)
}

// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildOptionsOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptions) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Option to define build log streaming behavior to Google Cloud Storage.
func (o BuildOptionsOutput) LogStreamingOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildOptions) *string { return v.LogStreamingOption }).(pulumi.StringPtrOutput)
}

// Option to specify the logging mode, which determines if and where build logs are stored.
func (o BuildOptionsOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildOptions) *string { return v.Logging }).(pulumi.StringPtrOutput)
}

// Compute Engine machine type on which to run the build.
func (o BuildOptionsOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildOptions) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Requested verifiability options.
func (o BuildOptionsOutput) RequestedVerifyOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildOptions) *string { return v.RequestedVerifyOption }).(pulumi.StringPtrOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
func (o BuildOptionsOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptions) []string { return v.SecretEnv }).(pulumi.StringArrayOutput)
}

// Requested hash for SourceProvenance.
func (o BuildOptionsOutput) SourceProvenanceHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptions) []string { return v.SourceProvenanceHash }).(pulumi.StringArrayOutput)
}

// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsOutput) SubstitutionOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildOptions) *string { return v.SubstitutionOption }).(pulumi.StringPtrOutput)
}

// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildOptionsOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v BuildOptions) []Volume { return v.Volumes }).(VolumeArrayOutput)
}

// Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool} This field is in beta and is available only to restricted users.
func (o BuildOptionsOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildOptions) *string { return v.WorkerPool }).(pulumi.StringPtrOutput)
}

type BuildOptionsPtrOutput struct{ *pulumi.OutputState }

func (BuildOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildOptions)(nil)).Elem()
}

func (o BuildOptionsPtrOutput) ToBuildOptionsPtrOutput() BuildOptionsPtrOutput {
	return o
}

func (o BuildOptionsPtrOutput) ToBuildOptionsPtrOutputWithContext(ctx context.Context) BuildOptionsPtrOutput {
	return o
}

func (o BuildOptionsPtrOutput) Elem() BuildOptionsOutput {
	return o.ApplyT(func(v *BuildOptions) BuildOptions { return *v }).(BuildOptionsOutput)
}

// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
func (o BuildOptionsPtrOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsPtrOutput) DynamicSubstitutions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DynamicSubstitutions
	}).(pulumi.BoolPtrOutput)
}

// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildOptionsPtrOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildOptions) []string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringArrayOutput)
}

// Option to define build log streaming behavior to Google Cloud Storage.
func (o BuildOptionsPtrOutput) LogStreamingOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.LogStreamingOption
	}).(pulumi.StringPtrOutput)
}

// Option to specify the logging mode, which determines if and where build logs are stored.
func (o BuildOptionsPtrOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.Logging
	}).(pulumi.StringPtrOutput)
}

// Compute Engine machine type on which to run the build.
func (o BuildOptionsPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Requested verifiability options.
func (o BuildOptionsPtrOutput) RequestedVerifyOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.RequestedVerifyOption
	}).(pulumi.StringPtrOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
func (o BuildOptionsPtrOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildOptions) []string {
		if v == nil {
			return nil
		}
		return v.SecretEnv
	}).(pulumi.StringArrayOutput)
}

// Requested hash for SourceProvenance.
func (o BuildOptionsPtrOutput) SourceProvenanceHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildOptions) []string {
		if v == nil {
			return nil
		}
		return v.SourceProvenanceHash
	}).(pulumi.StringArrayOutput)
}

// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsPtrOutput) SubstitutionOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.SubstitutionOption
	}).(pulumi.StringPtrOutput)
}

// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildOptionsPtrOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v *BuildOptions) []Volume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeArrayOutput)
}

// Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool} This field is in beta and is available only to restricted users.
func (o BuildOptionsPtrOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.WorkerPool
	}).(pulumi.StringPtrOutput)
}

// Optional arguments to enable specific features of builds.
type BuildOptionsResponse struct {
	// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions bool `pulumi:"dynamicSubstitutions"`
	// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env []string `pulumi:"env"`
	// Option to define build log streaming behavior to Google Cloud Storage.
	LogStreamingOption string `pulumi:"logStreamingOption"`
	// Option to specify the logging mode, which determines if and where build logs are stored.
	Logging string `pulumi:"logging"`
	// Compute Engine machine type on which to run the build.
	MachineType string `pulumi:"machineType"`
	// Requested verifiability options.
	RequestedVerifyOption string `pulumi:"requestedVerifyOption"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
	SecretEnv []string `pulumi:"secretEnv"`
	// Requested hash for SourceProvenance.
	SourceProvenanceHash []string `pulumi:"sourceProvenanceHash"`
	// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
	SubstitutionOption string `pulumi:"substitutionOption"`
	// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes []VolumeResponse `pulumi:"volumes"`
	// Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool} This field is in beta and is available only to restricted users.
	WorkerPool string `pulumi:"workerPool"`
}

// BuildOptionsResponseInput is an input type that accepts BuildOptionsResponseArgs and BuildOptionsResponseOutput values.
// You can construct a concrete instance of `BuildOptionsResponseInput` via:
//
//          BuildOptionsResponseArgs{...}
type BuildOptionsResponseInput interface {
	pulumi.Input

	ToBuildOptionsResponseOutput() BuildOptionsResponseOutput
	ToBuildOptionsResponseOutputWithContext(context.Context) BuildOptionsResponseOutput
}

// Optional arguments to enable specific features of builds.
type BuildOptionsResponseArgs struct {
	// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb pulumi.StringInput `pulumi:"diskSizeGb"`
	// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions pulumi.BoolInput `pulumi:"dynamicSubstitutions"`
	// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Option to define build log streaming behavior to Google Cloud Storage.
	LogStreamingOption pulumi.StringInput `pulumi:"logStreamingOption"`
	// Option to specify the logging mode, which determines if and where build logs are stored.
	Logging pulumi.StringInput `pulumi:"logging"`
	// Compute Engine machine type on which to run the build.
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// Requested verifiability options.
	RequestedVerifyOption pulumi.StringInput `pulumi:"requestedVerifyOption"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
	SecretEnv pulumi.StringArrayInput `pulumi:"secretEnv"`
	// Requested hash for SourceProvenance.
	SourceProvenanceHash pulumi.StringArrayInput `pulumi:"sourceProvenanceHash"`
	// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
	SubstitutionOption pulumi.StringInput `pulumi:"substitutionOption"`
	// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes VolumeResponseArrayInput `pulumi:"volumes"`
	// Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool} This field is in beta and is available only to restricted users.
	WorkerPool pulumi.StringInput `pulumi:"workerPool"`
}

func (BuildOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildOptionsResponse)(nil)).Elem()
}

func (i BuildOptionsResponseArgs) ToBuildOptionsResponseOutput() BuildOptionsResponseOutput {
	return i.ToBuildOptionsResponseOutputWithContext(context.Background())
}

func (i BuildOptionsResponseArgs) ToBuildOptionsResponseOutputWithContext(ctx context.Context) BuildOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOptionsResponseOutput)
}

func (i BuildOptionsResponseArgs) ToBuildOptionsResponsePtrOutput() BuildOptionsResponsePtrOutput {
	return i.ToBuildOptionsResponsePtrOutputWithContext(context.Background())
}

func (i BuildOptionsResponseArgs) ToBuildOptionsResponsePtrOutputWithContext(ctx context.Context) BuildOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOptionsResponseOutput).ToBuildOptionsResponsePtrOutputWithContext(ctx)
}

// BuildOptionsResponsePtrInput is an input type that accepts BuildOptionsResponseArgs, BuildOptionsResponsePtr and BuildOptionsResponsePtrOutput values.
// You can construct a concrete instance of `BuildOptionsResponsePtrInput` via:
//
//          BuildOptionsResponseArgs{...}
//
//  or:
//
//          nil
type BuildOptionsResponsePtrInput interface {
	pulumi.Input

	ToBuildOptionsResponsePtrOutput() BuildOptionsResponsePtrOutput
	ToBuildOptionsResponsePtrOutputWithContext(context.Context) BuildOptionsResponsePtrOutput
}

type buildOptionsResponsePtrType BuildOptionsResponseArgs

func BuildOptionsResponsePtr(v *BuildOptionsResponseArgs) BuildOptionsResponsePtrInput {
	return (*buildOptionsResponsePtrType)(v)
}

func (*buildOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildOptionsResponse)(nil)).Elem()
}

func (i *buildOptionsResponsePtrType) ToBuildOptionsResponsePtrOutput() BuildOptionsResponsePtrOutput {
	return i.ToBuildOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *buildOptionsResponsePtrType) ToBuildOptionsResponsePtrOutputWithContext(ctx context.Context) BuildOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOptionsResponsePtrOutput)
}

// Optional arguments to enable specific features of builds.
type BuildOptionsResponseOutput struct{ *pulumi.OutputState }

func (BuildOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildOptionsResponse)(nil)).Elem()
}

func (o BuildOptionsResponseOutput) ToBuildOptionsResponseOutput() BuildOptionsResponseOutput {
	return o
}

func (o BuildOptionsResponseOutput) ToBuildOptionsResponseOutputWithContext(ctx context.Context) BuildOptionsResponseOutput {
	return o
}

func (o BuildOptionsResponseOutput) ToBuildOptionsResponsePtrOutput() BuildOptionsResponsePtrOutput {
	return o.ToBuildOptionsResponsePtrOutputWithContext(context.Background())
}

func (o BuildOptionsResponseOutput) ToBuildOptionsResponsePtrOutputWithContext(ctx context.Context) BuildOptionsResponsePtrOutput {
	return o.ApplyT(func(v BuildOptionsResponse) *BuildOptionsResponse {
		return &v
	}).(BuildOptionsResponsePtrOutput)
}

// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
func (o BuildOptionsResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsResponseOutput) DynamicSubstitutions() pulumi.BoolOutput {
	return o.ApplyT(func(v BuildOptionsResponse) bool { return v.DynamicSubstitutions }).(pulumi.BoolOutput)
}

// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildOptionsResponseOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptionsResponse) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Option to define build log streaming behavior to Google Cloud Storage.
func (o BuildOptionsResponseOutput) LogStreamingOption() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.LogStreamingOption }).(pulumi.StringOutput)
}

// Option to specify the logging mode, which determines if and where build logs are stored.
func (o BuildOptionsResponseOutput) Logging() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.Logging }).(pulumi.StringOutput)
}

// Compute Engine machine type on which to run the build.
func (o BuildOptionsResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// Requested verifiability options.
func (o BuildOptionsResponseOutput) RequestedVerifyOption() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.RequestedVerifyOption }).(pulumi.StringOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
func (o BuildOptionsResponseOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptionsResponse) []string { return v.SecretEnv }).(pulumi.StringArrayOutput)
}

// Requested hash for SourceProvenance.
func (o BuildOptionsResponseOutput) SourceProvenanceHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptionsResponse) []string { return v.SourceProvenanceHash }).(pulumi.StringArrayOutput)
}

// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsResponseOutput) SubstitutionOption() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.SubstitutionOption }).(pulumi.StringOutput)
}

// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildOptionsResponseOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v BuildOptionsResponse) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

// Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool} This field is in beta and is available only to restricted users.
func (o BuildOptionsResponseOutput) WorkerPool() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.WorkerPool }).(pulumi.StringOutput)
}

type BuildOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (BuildOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildOptionsResponse)(nil)).Elem()
}

func (o BuildOptionsResponsePtrOutput) ToBuildOptionsResponsePtrOutput() BuildOptionsResponsePtrOutput {
	return o
}

func (o BuildOptionsResponsePtrOutput) ToBuildOptionsResponsePtrOutputWithContext(ctx context.Context) BuildOptionsResponsePtrOutput {
	return o
}

func (o BuildOptionsResponsePtrOutput) Elem() BuildOptionsResponseOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) BuildOptionsResponse { return *v }).(BuildOptionsResponseOutput)
}

// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
func (o BuildOptionsResponsePtrOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsResponsePtrOutput) DynamicSubstitutions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.DynamicSubstitutions
	}).(pulumi.BoolPtrOutput)
}

// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildOptionsResponsePtrOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) []string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringArrayOutput)
}

// Option to define build log streaming behavior to Google Cloud Storage.
func (o BuildOptionsResponsePtrOutput) LogStreamingOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LogStreamingOption
	}).(pulumi.StringPtrOutput)
}

// Option to specify the logging mode, which determines if and where build logs are stored.
func (o BuildOptionsResponsePtrOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Logging
	}).(pulumi.StringPtrOutput)
}

// Compute Engine machine type on which to run the build.
func (o BuildOptionsResponsePtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Requested verifiability options.
func (o BuildOptionsResponsePtrOutput) RequestedVerifyOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RequestedVerifyOption
	}).(pulumi.StringPtrOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
func (o BuildOptionsResponsePtrOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) []string {
		if v == nil {
			return nil
		}
		return v.SecretEnv
	}).(pulumi.StringArrayOutput)
}

// Requested hash for SourceProvenance.
func (o BuildOptionsResponsePtrOutput) SourceProvenanceHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) []string {
		if v == nil {
			return nil
		}
		return v.SourceProvenanceHash
	}).(pulumi.StringArrayOutput)
}

// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsResponsePtrOutput) SubstitutionOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SubstitutionOption
	}).(pulumi.StringPtrOutput)
}

// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildOptionsResponsePtrOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) []VolumeResponse {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeResponseArrayOutput)
}

// Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool} This field is in beta and is available only to restricted users.
func (o BuildOptionsResponsePtrOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkerPool
	}).(pulumi.StringPtrOutput)
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildResponse struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts ArtifactsResponse `pulumi:"artifacts"`
	// Secrets and secret environment variables.
	AvailableSecrets SecretsResponse `pulumi:"availableSecrets"`
	// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
	BuildTriggerId string `pulumi:"buildTriggerId"`
	// Time at which the request to create the build was received.
	CreateTime string `pulumi:"createTime"`
	// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
	FinishTime string `pulumi:"finishTime"`
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images []string `pulumi:"images"`
	// URL to logs for this build in Google Cloud Console.
	LogUrl string `pulumi:"logUrl"`
	// Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket string `pulumi:"logsBucket"`
	// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
	Name string `pulumi:"name"`
	// Special options for this build.
	Options BuildOptionsResponse `pulumi:"options"`
	// ID of the project.
	ProjectId string `pulumi:"projectId"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl string `pulumi:"queueTtl"`
	// Results of the build.
	Results ResultsResponse `pulumi:"results"`
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets []SecretResponse `pulumi:"secrets"`
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in beta.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The location of the source files to build.
	Source SourceResponse `pulumi:"source"`
	// A permanent fixed identifier for source.
	SourceProvenance SourceProvenanceResponse `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime string `pulumi:"startTime"`
	// Status of the build.
	Status string `pulumi:"status"`
	// Customer-readable message about the current status.
	StatusDetail string `pulumi:"statusDetail"`
	// Required. The operations to be performed on the workspace.
	Steps []BuildStepResponse `pulumi:"steps"`
	// Substitutions data for `Build` resource.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags []string `pulumi:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
	Timeout string `pulumi:"timeout"`
	// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. If the build does not specify source or images, these keys will not be included.
	Timing map[string]string `pulumi:"timing"`
}

// BuildResponseInput is an input type that accepts BuildResponseArgs and BuildResponseOutput values.
// You can construct a concrete instance of `BuildResponseInput` via:
//
//          BuildResponseArgs{...}
type BuildResponseInput interface {
	pulumi.Input

	ToBuildResponseOutput() BuildResponseOutput
	ToBuildResponseOutputWithContext(context.Context) BuildResponseOutput
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildResponseArgs struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts ArtifactsResponseInput `pulumi:"artifacts"`
	// Secrets and secret environment variables.
	AvailableSecrets SecretsResponseInput `pulumi:"availableSecrets"`
	// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
	BuildTriggerId pulumi.StringInput `pulumi:"buildTriggerId"`
	// Time at which the request to create the build was received.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
	FinishTime pulumi.StringInput `pulumi:"finishTime"`
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images pulumi.StringArrayInput `pulumi:"images"`
	// URL to logs for this build in Google Cloud Console.
	LogUrl pulumi.StringInput `pulumi:"logUrl"`
	// Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket pulumi.StringInput `pulumi:"logsBucket"`
	// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
	Name pulumi.StringInput `pulumi:"name"`
	// Special options for this build.
	Options BuildOptionsResponseInput `pulumi:"options"`
	// ID of the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl pulumi.StringInput `pulumi:"queueTtl"`
	// Results of the build.
	Results ResultsResponseInput `pulumi:"results"`
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets SecretResponseArrayInput `pulumi:"secrets"`
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in beta.
	ServiceAccount pulumi.StringInput `pulumi:"serviceAccount"`
	// The location of the source files to build.
	Source SourceResponseInput `pulumi:"source"`
	// A permanent fixed identifier for source.
	SourceProvenance SourceProvenanceResponseInput `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Status of the build.
	Status pulumi.StringInput `pulumi:"status"`
	// Customer-readable message about the current status.
	StatusDetail pulumi.StringInput `pulumi:"statusDetail"`
	// Required. The operations to be performed on the workspace.
	Steps BuildStepResponseArrayInput `pulumi:"steps"`
	// Substitutions data for `Build` resource.
	Substitutions pulumi.StringMapInput `pulumi:"substitutions"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
	Timeout pulumi.StringInput `pulumi:"timeout"`
	// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. If the build does not specify source or images, these keys will not be included.
	Timing pulumi.StringMapInput `pulumi:"timing"`
}

func (BuildResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildResponse)(nil)).Elem()
}

func (i BuildResponseArgs) ToBuildResponseOutput() BuildResponseOutput {
	return i.ToBuildResponseOutputWithContext(context.Background())
}

func (i BuildResponseArgs) ToBuildResponseOutputWithContext(ctx context.Context) BuildResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildResponseOutput)
}

func (i BuildResponseArgs) ToBuildResponsePtrOutput() BuildResponsePtrOutput {
	return i.ToBuildResponsePtrOutputWithContext(context.Background())
}

func (i BuildResponseArgs) ToBuildResponsePtrOutputWithContext(ctx context.Context) BuildResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildResponseOutput).ToBuildResponsePtrOutputWithContext(ctx)
}

// BuildResponsePtrInput is an input type that accepts BuildResponseArgs, BuildResponsePtr and BuildResponsePtrOutput values.
// You can construct a concrete instance of `BuildResponsePtrInput` via:
//
//          BuildResponseArgs{...}
//
//  or:
//
//          nil
type BuildResponsePtrInput interface {
	pulumi.Input

	ToBuildResponsePtrOutput() BuildResponsePtrOutput
	ToBuildResponsePtrOutputWithContext(context.Context) BuildResponsePtrOutput
}

type buildResponsePtrType BuildResponseArgs

func BuildResponsePtr(v *BuildResponseArgs) BuildResponsePtrInput {
	return (*buildResponsePtrType)(v)
}

func (*buildResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildResponse)(nil)).Elem()
}

func (i *buildResponsePtrType) ToBuildResponsePtrOutput() BuildResponsePtrOutput {
	return i.ToBuildResponsePtrOutputWithContext(context.Background())
}

func (i *buildResponsePtrType) ToBuildResponsePtrOutputWithContext(ctx context.Context) BuildResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildResponsePtrOutput)
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildResponseOutput struct{ *pulumi.OutputState }

func (BuildResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildResponse)(nil)).Elem()
}

func (o BuildResponseOutput) ToBuildResponseOutput() BuildResponseOutput {
	return o
}

func (o BuildResponseOutput) ToBuildResponseOutputWithContext(ctx context.Context) BuildResponseOutput {
	return o
}

func (o BuildResponseOutput) ToBuildResponsePtrOutput() BuildResponsePtrOutput {
	return o.ToBuildResponsePtrOutputWithContext(context.Background())
}

func (o BuildResponseOutput) ToBuildResponsePtrOutputWithContext(ctx context.Context) BuildResponsePtrOutput {
	return o.ApplyT(func(v BuildResponse) *BuildResponse {
		return &v
	}).(BuildResponsePtrOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
func (o BuildResponseOutput) Artifacts() ArtifactsResponseOutput {
	return o.ApplyT(func(v BuildResponse) ArtifactsResponse { return v.Artifacts }).(ArtifactsResponseOutput)
}

// Secrets and secret environment variables.
func (o BuildResponseOutput) AvailableSecrets() SecretsResponseOutput {
	return o.ApplyT(func(v BuildResponse) SecretsResponse { return v.AvailableSecrets }).(SecretsResponseOutput)
}

// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
func (o BuildResponseOutput) BuildTriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.BuildTriggerId }).(pulumi.StringOutput)
}

// Time at which the request to create the build was received.
func (o BuildResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
func (o BuildResponseOutput) FinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.FinishTime }).(pulumi.StringOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
func (o BuildResponseOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildResponse) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// URL to logs for this build in Google Cloud Console.
func (o BuildResponseOutput) LogUrl() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.LogUrl }).(pulumi.StringOutput)
}

// Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
func (o BuildResponseOutput) LogsBucket() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.LogsBucket }).(pulumi.StringOutput)
}

// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
func (o BuildResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Special options for this build.
func (o BuildResponseOutput) Options() BuildOptionsResponseOutput {
	return o.ApplyT(func(v BuildResponse) BuildOptionsResponse { return v.Options }).(BuildOptionsResponseOutput)
}

// ID of the project.
func (o BuildResponseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.ProjectId }).(pulumi.StringOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
func (o BuildResponseOutput) QueueTtl() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.QueueTtl }).(pulumi.StringOutput)
}

// Results of the build.
func (o BuildResponseOutput) Results() ResultsResponseOutput {
	return o.ApplyT(func(v BuildResponse) ResultsResponse { return v.Results }).(ResultsResponseOutput)
}

// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
func (o BuildResponseOutput) Secrets() SecretResponseArrayOutput {
	return o.ApplyT(func(v BuildResponse) []SecretResponse { return v.Secrets }).(SecretResponseArrayOutput)
}

// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in beta.
func (o BuildResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The location of the source files to build.
func (o BuildResponseOutput) Source() SourceResponseOutput {
	return o.ApplyT(func(v BuildResponse) SourceResponse { return v.Source }).(SourceResponseOutput)
}

// A permanent fixed identifier for source.
func (o BuildResponseOutput) SourceProvenance() SourceProvenanceResponseOutput {
	return o.ApplyT(func(v BuildResponse) SourceProvenanceResponse { return v.SourceProvenance }).(SourceProvenanceResponseOutput)
}

// Time at which execution of the build was started.
func (o BuildResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Status of the build.
func (o BuildResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Customer-readable message about the current status.
func (o BuildResponseOutput) StatusDetail() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.StatusDetail }).(pulumi.StringOutput)
}

// Required. The operations to be performed on the workspace.
func (o BuildResponseOutput) Steps() BuildStepResponseArrayOutput {
	return o.ApplyT(func(v BuildResponse) []BuildStepResponse { return v.Steps }).(BuildStepResponseArrayOutput)
}

// Substitutions data for `Build` resource.
func (o BuildResponseOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildResponse) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Tags for annotation of a `Build`. These are not docker tags.
func (o BuildResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
func (o BuildResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. If the build does not specify source or images, these keys will not be included.
func (o BuildResponseOutput) Timing() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildResponse) map[string]string { return v.Timing }).(pulumi.StringMapOutput)
}

type BuildResponsePtrOutput struct{ *pulumi.OutputState }

func (BuildResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildResponse)(nil)).Elem()
}

func (o BuildResponsePtrOutput) ToBuildResponsePtrOutput() BuildResponsePtrOutput {
	return o
}

func (o BuildResponsePtrOutput) ToBuildResponsePtrOutputWithContext(ctx context.Context) BuildResponsePtrOutput {
	return o
}

func (o BuildResponsePtrOutput) Elem() BuildResponseOutput {
	return o.ApplyT(func(v *BuildResponse) BuildResponse { return *v }).(BuildResponseOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
func (o BuildResponsePtrOutput) Artifacts() ArtifactsResponsePtrOutput {
	return o.ApplyT(func(v *BuildResponse) *ArtifactsResponse {
		if v == nil {
			return nil
		}
		return &v.Artifacts
	}).(ArtifactsResponsePtrOutput)
}

// Secrets and secret environment variables.
func (o BuildResponsePtrOutput) AvailableSecrets() SecretsResponsePtrOutput {
	return o.ApplyT(func(v *BuildResponse) *SecretsResponse {
		if v == nil {
			return nil
		}
		return &v.AvailableSecrets
	}).(SecretsResponsePtrOutput)
}

// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
func (o BuildResponsePtrOutput) BuildTriggerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BuildTriggerId
	}).(pulumi.StringPtrOutput)
}

// Time at which the request to create the build was received.
func (o BuildResponsePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
func (o BuildResponsePtrOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FinishTime
	}).(pulumi.StringPtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
func (o BuildResponsePtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildResponse) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// URL to logs for this build in Google Cloud Console.
func (o BuildResponsePtrOutput) LogUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LogUrl
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
func (o BuildResponsePtrOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LogsBucket
	}).(pulumi.StringPtrOutput)
}

// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
func (o BuildResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Special options for this build.
func (o BuildResponsePtrOutput) Options() BuildOptionsResponsePtrOutput {
	return o.ApplyT(func(v *BuildResponse) *BuildOptionsResponse {
		if v == nil {
			return nil
		}
		return &v.Options
	}).(BuildOptionsResponsePtrOutput)
}

// ID of the project.
func (o BuildResponsePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
func (o BuildResponsePtrOutput) QueueTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.QueueTtl
	}).(pulumi.StringPtrOutput)
}

// Results of the build.
func (o BuildResponsePtrOutput) Results() ResultsResponsePtrOutput {
	return o.ApplyT(func(v *BuildResponse) *ResultsResponse {
		if v == nil {
			return nil
		}
		return &v.Results
	}).(ResultsResponsePtrOutput)
}

// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
func (o BuildResponsePtrOutput) Secrets() SecretResponseArrayOutput {
	return o.ApplyT(func(v *BuildResponse) []SecretResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretResponseArrayOutput)
}

// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in beta.
func (o BuildResponsePtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The location of the source files to build.
func (o BuildResponsePtrOutput) Source() SourceResponsePtrOutput {
	return o.ApplyT(func(v *BuildResponse) *SourceResponse {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(SourceResponsePtrOutput)
}

// A permanent fixed identifier for source.
func (o BuildResponsePtrOutput) SourceProvenance() SourceProvenanceResponsePtrOutput {
	return o.ApplyT(func(v *BuildResponse) *SourceProvenanceResponse {
		if v == nil {
			return nil
		}
		return &v.SourceProvenance
	}).(SourceProvenanceResponsePtrOutput)
}

// Time at which execution of the build was started.
func (o BuildResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Status of the build.
func (o BuildResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Customer-readable message about the current status.
func (o BuildResponsePtrOutput) StatusDetail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StatusDetail
	}).(pulumi.StringPtrOutput)
}

// Required. The operations to be performed on the workspace.
func (o BuildResponsePtrOutput) Steps() BuildStepResponseArrayOutput {
	return o.ApplyT(func(v *BuildResponse) []BuildStepResponse {
		if v == nil {
			return nil
		}
		return v.Steps
	}).(BuildStepResponseArrayOutput)
}

// Substitutions data for `Build` resource.
func (o BuildResponsePtrOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Substitutions
	}).(pulumi.StringMapOutput)
}

// Tags for annotation of a `Build`. These are not docker tags.
func (o BuildResponsePtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildResponse) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
func (o BuildResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. If the build does not specify source or images, these keys will not be included.
func (o BuildResponsePtrOutput) Timing() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Timing
	}).(pulumi.StringMapOutput)
}

// A step in the build pipeline.
type BuildStep struct {
	// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
	Args []string `pulumi:"args"`
	// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
	Dir *string `pulumi:"dir"`
	// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
	Entrypoint *string `pulumi:"entrypoint"`
	// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env []string `pulumi:"env"`
	// Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
	Id *string `pulumi:"id"`
	// Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
	Name *string `pulumi:"name"`
	// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
	SecretEnv []string `pulumi:"secretEnv"`
	// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
	Timeout *string `pulumi:"timeout"`
	// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes []Volume `pulumi:"volumes"`
	// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
	WaitFor []string `pulumi:"waitFor"`
}

// BuildStepInput is an input type that accepts BuildStepArgs and BuildStepOutput values.
// You can construct a concrete instance of `BuildStepInput` via:
//
//          BuildStepArgs{...}
type BuildStepInput interface {
	pulumi.Input

	ToBuildStepOutput() BuildStepOutput
	ToBuildStepOutputWithContext(context.Context) BuildStepOutput
}

// A step in the build pipeline.
type BuildStepArgs struct {
	// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
	Entrypoint pulumi.StringPtrInput `pulumi:"entrypoint"`
	// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
	SecretEnv pulumi.StringArrayInput `pulumi:"secretEnv"`
	// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes VolumeArrayInput `pulumi:"volumes"`
	// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
	WaitFor pulumi.StringArrayInput `pulumi:"waitFor"`
}

func (BuildStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildStep)(nil)).Elem()
}

func (i BuildStepArgs) ToBuildStepOutput() BuildStepOutput {
	return i.ToBuildStepOutputWithContext(context.Background())
}

func (i BuildStepArgs) ToBuildStepOutputWithContext(ctx context.Context) BuildStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildStepOutput)
}

// BuildStepArrayInput is an input type that accepts BuildStepArray and BuildStepArrayOutput values.
// You can construct a concrete instance of `BuildStepArrayInput` via:
//
//          BuildStepArray{ BuildStepArgs{...} }
type BuildStepArrayInput interface {
	pulumi.Input

	ToBuildStepArrayOutput() BuildStepArrayOutput
	ToBuildStepArrayOutputWithContext(context.Context) BuildStepArrayOutput
}

type BuildStepArray []BuildStepInput

func (BuildStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildStep)(nil)).Elem()
}

func (i BuildStepArray) ToBuildStepArrayOutput() BuildStepArrayOutput {
	return i.ToBuildStepArrayOutputWithContext(context.Background())
}

func (i BuildStepArray) ToBuildStepArrayOutputWithContext(ctx context.Context) BuildStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildStepArrayOutput)
}

// A step in the build pipeline.
type BuildStepOutput struct{ *pulumi.OutputState }

func (BuildStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildStep)(nil)).Elem()
}

func (o BuildStepOutput) ToBuildStepOutput() BuildStepOutput {
	return o
}

func (o BuildStepOutput) ToBuildStepOutputWithContext(ctx context.Context) BuildStepOutput {
	return o
}

// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
func (o BuildStepOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStep) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
func (o BuildStepOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildStep) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
func (o BuildStepOutput) Entrypoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildStep) *string { return v.Entrypoint }).(pulumi.StringPtrOutput)
}

// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildStepOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStep) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
func (o BuildStepOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildStep) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
func (o BuildStepOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildStep) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
func (o BuildStepOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStep) []string { return v.SecretEnv }).(pulumi.StringArrayOutput)
}

// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
func (o BuildStepOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildStep) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildStepOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v BuildStep) []Volume { return v.Volumes }).(VolumeArrayOutput)
}

// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
func (o BuildStepOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStep) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type BuildStepArrayOutput struct{ *pulumi.OutputState }

func (BuildStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildStep)(nil)).Elem()
}

func (o BuildStepArrayOutput) ToBuildStepArrayOutput() BuildStepArrayOutput {
	return o
}

func (o BuildStepArrayOutput) ToBuildStepArrayOutputWithContext(ctx context.Context) BuildStepArrayOutput {
	return o
}

func (o BuildStepArrayOutput) Index(i pulumi.IntInput) BuildStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildStep {
		return vs[0].([]BuildStep)[vs[1].(int)]
	}).(BuildStepOutput)
}

// A step in the build pipeline.
type BuildStepResponse struct {
	// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
	Args []string `pulumi:"args"`
	// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
	Dir string `pulumi:"dir"`
	// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
	Entrypoint string `pulumi:"entrypoint"`
	// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env []string `pulumi:"env"`
	// Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
	Name string `pulumi:"name"`
	// Stores timing information for pulling this build step's builder image only.
	PullTiming TimeSpanResponse `pulumi:"pullTiming"`
	// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
	SecretEnv []string `pulumi:"secretEnv"`
	// Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
	Status string `pulumi:"status"`
	// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
	Timeout string `pulumi:"timeout"`
	// Stores timing information for executing this build step.
	Timing TimeSpanResponse `pulumi:"timing"`
	// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes []VolumeResponse `pulumi:"volumes"`
	// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
	WaitFor []string `pulumi:"waitFor"`
}

// BuildStepResponseInput is an input type that accepts BuildStepResponseArgs and BuildStepResponseOutput values.
// You can construct a concrete instance of `BuildStepResponseInput` via:
//
//          BuildStepResponseArgs{...}
type BuildStepResponseInput interface {
	pulumi.Input

	ToBuildStepResponseOutput() BuildStepResponseOutput
	ToBuildStepResponseOutputWithContext(context.Context) BuildStepResponseOutput
}

// A step in the build pipeline.
type BuildStepResponseArgs struct {
	// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
	Dir pulumi.StringInput `pulumi:"dir"`
	// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
	Entrypoint pulumi.StringInput `pulumi:"entrypoint"`
	// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
	Name pulumi.StringInput `pulumi:"name"`
	// Stores timing information for pulling this build step's builder image only.
	PullTiming TimeSpanResponseInput `pulumi:"pullTiming"`
	// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
	SecretEnv pulumi.StringArrayInput `pulumi:"secretEnv"`
	// Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
	Status pulumi.StringInput `pulumi:"status"`
	// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
	Timeout pulumi.StringInput `pulumi:"timeout"`
	// Stores timing information for executing this build step.
	Timing TimeSpanResponseInput `pulumi:"timing"`
	// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes VolumeResponseArrayInput `pulumi:"volumes"`
	// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
	WaitFor pulumi.StringArrayInput `pulumi:"waitFor"`
}

func (BuildStepResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildStepResponse)(nil)).Elem()
}

func (i BuildStepResponseArgs) ToBuildStepResponseOutput() BuildStepResponseOutput {
	return i.ToBuildStepResponseOutputWithContext(context.Background())
}

func (i BuildStepResponseArgs) ToBuildStepResponseOutputWithContext(ctx context.Context) BuildStepResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildStepResponseOutput)
}

// BuildStepResponseArrayInput is an input type that accepts BuildStepResponseArray and BuildStepResponseArrayOutput values.
// You can construct a concrete instance of `BuildStepResponseArrayInput` via:
//
//          BuildStepResponseArray{ BuildStepResponseArgs{...} }
type BuildStepResponseArrayInput interface {
	pulumi.Input

	ToBuildStepResponseArrayOutput() BuildStepResponseArrayOutput
	ToBuildStepResponseArrayOutputWithContext(context.Context) BuildStepResponseArrayOutput
}

type BuildStepResponseArray []BuildStepResponseInput

func (BuildStepResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildStepResponse)(nil)).Elem()
}

func (i BuildStepResponseArray) ToBuildStepResponseArrayOutput() BuildStepResponseArrayOutput {
	return i.ToBuildStepResponseArrayOutputWithContext(context.Background())
}

func (i BuildStepResponseArray) ToBuildStepResponseArrayOutputWithContext(ctx context.Context) BuildStepResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildStepResponseArrayOutput)
}

// A step in the build pipeline.
type BuildStepResponseOutput struct{ *pulumi.OutputState }

func (BuildStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildStepResponse)(nil)).Elem()
}

func (o BuildStepResponseOutput) ToBuildStepResponseOutput() BuildStepResponseOutput {
	return o
}

func (o BuildStepResponseOutput) ToBuildStepResponseOutputWithContext(ctx context.Context) BuildStepResponseOutput {
	return o
}

// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
func (o BuildStepResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
func (o BuildStepResponseOutput) Dir() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Dir }).(pulumi.StringOutput)
}

// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
func (o BuildStepResponseOutput) Entrypoint() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Entrypoint }).(pulumi.StringOutput)
}

// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildStepResponseOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
func (o BuildStepResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Stores timing information for pulling this build step's builder image only.
func (o BuildStepResponseOutput) PullTiming() TimeSpanResponseOutput {
	return o.ApplyT(func(v BuildStepResponse) TimeSpanResponse { return v.PullTiming }).(TimeSpanResponseOutput)
}

// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
func (o BuildStepResponseOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []string { return v.SecretEnv }).(pulumi.StringArrayOutput)
}

// Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
func (o BuildStepResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
func (o BuildStepResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// Stores timing information for executing this build step.
func (o BuildStepResponseOutput) Timing() TimeSpanResponseOutput {
	return o.ApplyT(func(v BuildStepResponse) TimeSpanResponse { return v.Timing }).(TimeSpanResponseOutput)
}

// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildStepResponseOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
func (o BuildStepResponseOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type BuildStepResponseArrayOutput struct{ *pulumi.OutputState }

func (BuildStepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildStepResponse)(nil)).Elem()
}

func (o BuildStepResponseArrayOutput) ToBuildStepResponseArrayOutput() BuildStepResponseArrayOutput {
	return o
}

func (o BuildStepResponseArrayOutput) ToBuildStepResponseArrayOutputWithContext(ctx context.Context) BuildStepResponseArrayOutput {
	return o
}

func (o BuildStepResponseArrayOutput) Index(i pulumi.IntInput) BuildStepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildStepResponse {
		return vs[0].([]BuildStepResponse)[vs[1].(int)]
	}).(BuildStepResponseOutput)
}

// An image built by the pipeline.
type BuiltImageResponse struct {
	// Docker Registry 2.0 digest.
	Digest string `pulumi:"digest"`
	// Name used to push the container image to Google Container Registry, as presented to `docker push`.
	Name string `pulumi:"name"`
	// Stores timing information for pushing the specified image.
	PushTiming TimeSpanResponse `pulumi:"pushTiming"`
}

// BuiltImageResponseInput is an input type that accepts BuiltImageResponseArgs and BuiltImageResponseOutput values.
// You can construct a concrete instance of `BuiltImageResponseInput` via:
//
//          BuiltImageResponseArgs{...}
type BuiltImageResponseInput interface {
	pulumi.Input

	ToBuiltImageResponseOutput() BuiltImageResponseOutput
	ToBuiltImageResponseOutputWithContext(context.Context) BuiltImageResponseOutput
}

// An image built by the pipeline.
type BuiltImageResponseArgs struct {
	// Docker Registry 2.0 digest.
	Digest pulumi.StringInput `pulumi:"digest"`
	// Name used to push the container image to Google Container Registry, as presented to `docker push`.
	Name pulumi.StringInput `pulumi:"name"`
	// Stores timing information for pushing the specified image.
	PushTiming TimeSpanResponseInput `pulumi:"pushTiming"`
}

func (BuiltImageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuiltImageResponse)(nil)).Elem()
}

func (i BuiltImageResponseArgs) ToBuiltImageResponseOutput() BuiltImageResponseOutput {
	return i.ToBuiltImageResponseOutputWithContext(context.Background())
}

func (i BuiltImageResponseArgs) ToBuiltImageResponseOutputWithContext(ctx context.Context) BuiltImageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuiltImageResponseOutput)
}

// BuiltImageResponseArrayInput is an input type that accepts BuiltImageResponseArray and BuiltImageResponseArrayOutput values.
// You can construct a concrete instance of `BuiltImageResponseArrayInput` via:
//
//          BuiltImageResponseArray{ BuiltImageResponseArgs{...} }
type BuiltImageResponseArrayInput interface {
	pulumi.Input

	ToBuiltImageResponseArrayOutput() BuiltImageResponseArrayOutput
	ToBuiltImageResponseArrayOutputWithContext(context.Context) BuiltImageResponseArrayOutput
}

type BuiltImageResponseArray []BuiltImageResponseInput

func (BuiltImageResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuiltImageResponse)(nil)).Elem()
}

func (i BuiltImageResponseArray) ToBuiltImageResponseArrayOutput() BuiltImageResponseArrayOutput {
	return i.ToBuiltImageResponseArrayOutputWithContext(context.Background())
}

func (i BuiltImageResponseArray) ToBuiltImageResponseArrayOutputWithContext(ctx context.Context) BuiltImageResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuiltImageResponseArrayOutput)
}

// An image built by the pipeline.
type BuiltImageResponseOutput struct{ *pulumi.OutputState }

func (BuiltImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuiltImageResponse)(nil)).Elem()
}

func (o BuiltImageResponseOutput) ToBuiltImageResponseOutput() BuiltImageResponseOutput {
	return o
}

func (o BuiltImageResponseOutput) ToBuiltImageResponseOutputWithContext(ctx context.Context) BuiltImageResponseOutput {
	return o
}

// Docker Registry 2.0 digest.
func (o BuiltImageResponseOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v BuiltImageResponse) string { return v.Digest }).(pulumi.StringOutput)
}

// Name used to push the container image to Google Container Registry, as presented to `docker push`.
func (o BuiltImageResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuiltImageResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Stores timing information for pushing the specified image.
func (o BuiltImageResponseOutput) PushTiming() TimeSpanResponseOutput {
	return o.ApplyT(func(v BuiltImageResponse) TimeSpanResponse { return v.PushTiming }).(TimeSpanResponseOutput)
}

type BuiltImageResponseArrayOutput struct{ *pulumi.OutputState }

func (BuiltImageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuiltImageResponse)(nil)).Elem()
}

func (o BuiltImageResponseArrayOutput) ToBuiltImageResponseArrayOutput() BuiltImageResponseArrayOutput {
	return o
}

func (o BuiltImageResponseArrayOutput) ToBuiltImageResponseArrayOutputWithContext(ctx context.Context) BuiltImageResponseArrayOutput {
	return o
}

func (o BuiltImageResponseArrayOutput) Index(i pulumi.IntInput) BuiltImageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuiltImageResponse {
		return vs[0].([]BuiltImageResponse)[vs[1].(int)]
	}).(BuiltImageResponseOutput)
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. This message is experimental.
type GitHubEventsConfig struct {
	// The installationID that emits the GitHub event.
	InstallationId *string `pulumi:"installationId"`
	// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	Name *string `pulumi:"name"`
	// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner *string `pulumi:"owner"`
	// filter to match changes in pull requests.
	PullRequest *PullRequestFilter `pulumi:"pullRequest"`
	// filter to match changes in refs like branches, tags.
	Push *PushFilter `pulumi:"push"`
}

// GitHubEventsConfigInput is an input type that accepts GitHubEventsConfigArgs and GitHubEventsConfigOutput values.
// You can construct a concrete instance of `GitHubEventsConfigInput` via:
//
//          GitHubEventsConfigArgs{...}
type GitHubEventsConfigInput interface {
	pulumi.Input

	ToGitHubEventsConfigOutput() GitHubEventsConfigOutput
	ToGitHubEventsConfigOutputWithContext(context.Context) GitHubEventsConfigOutput
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. This message is experimental.
type GitHubEventsConfigArgs struct {
	// The installationID that emits the GitHub event.
	InstallationId pulumi.StringPtrInput `pulumi:"installationId"`
	// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner pulumi.StringPtrInput `pulumi:"owner"`
	// filter to match changes in pull requests.
	PullRequest PullRequestFilterPtrInput `pulumi:"pullRequest"`
	// filter to match changes in refs like branches, tags.
	Push PushFilterPtrInput `pulumi:"push"`
}

func (GitHubEventsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubEventsConfig)(nil)).Elem()
}

func (i GitHubEventsConfigArgs) ToGitHubEventsConfigOutput() GitHubEventsConfigOutput {
	return i.ToGitHubEventsConfigOutputWithContext(context.Background())
}

func (i GitHubEventsConfigArgs) ToGitHubEventsConfigOutputWithContext(ctx context.Context) GitHubEventsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEventsConfigOutput)
}

func (i GitHubEventsConfigArgs) ToGitHubEventsConfigPtrOutput() GitHubEventsConfigPtrOutput {
	return i.ToGitHubEventsConfigPtrOutputWithContext(context.Background())
}

func (i GitHubEventsConfigArgs) ToGitHubEventsConfigPtrOutputWithContext(ctx context.Context) GitHubEventsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEventsConfigOutput).ToGitHubEventsConfigPtrOutputWithContext(ctx)
}

// GitHubEventsConfigPtrInput is an input type that accepts GitHubEventsConfigArgs, GitHubEventsConfigPtr and GitHubEventsConfigPtrOutput values.
// You can construct a concrete instance of `GitHubEventsConfigPtrInput` via:
//
//          GitHubEventsConfigArgs{...}
//
//  or:
//
//          nil
type GitHubEventsConfigPtrInput interface {
	pulumi.Input

	ToGitHubEventsConfigPtrOutput() GitHubEventsConfigPtrOutput
	ToGitHubEventsConfigPtrOutputWithContext(context.Context) GitHubEventsConfigPtrOutput
}

type gitHubEventsConfigPtrType GitHubEventsConfigArgs

func GitHubEventsConfigPtr(v *GitHubEventsConfigArgs) GitHubEventsConfigPtrInput {
	return (*gitHubEventsConfigPtrType)(v)
}

func (*gitHubEventsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubEventsConfig)(nil)).Elem()
}

func (i *gitHubEventsConfigPtrType) ToGitHubEventsConfigPtrOutput() GitHubEventsConfigPtrOutput {
	return i.ToGitHubEventsConfigPtrOutputWithContext(context.Background())
}

func (i *gitHubEventsConfigPtrType) ToGitHubEventsConfigPtrOutputWithContext(ctx context.Context) GitHubEventsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEventsConfigPtrOutput)
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. This message is experimental.
type GitHubEventsConfigOutput struct{ *pulumi.OutputState }

func (GitHubEventsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubEventsConfig)(nil)).Elem()
}

func (o GitHubEventsConfigOutput) ToGitHubEventsConfigOutput() GitHubEventsConfigOutput {
	return o
}

func (o GitHubEventsConfigOutput) ToGitHubEventsConfigOutputWithContext(ctx context.Context) GitHubEventsConfigOutput {
	return o
}

func (o GitHubEventsConfigOutput) ToGitHubEventsConfigPtrOutput() GitHubEventsConfigPtrOutput {
	return o.ToGitHubEventsConfigPtrOutputWithContext(context.Background())
}

func (o GitHubEventsConfigOutput) ToGitHubEventsConfigPtrOutputWithContext(ctx context.Context) GitHubEventsConfigPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *GitHubEventsConfig {
		return &v
	}).(GitHubEventsConfigPtrOutput)
}

// The installationID that emits the GitHub event.
func (o GitHubEventsConfigOutput) InstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *string { return v.InstallationId }).(pulumi.StringPtrOutput)
}

// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
func (o GitHubEventsConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
func (o GitHubEventsConfigOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

// filter to match changes in pull requests.
func (o GitHubEventsConfigOutput) PullRequest() PullRequestFilterPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *PullRequestFilter { return v.PullRequest }).(PullRequestFilterPtrOutput)
}

// filter to match changes in refs like branches, tags.
func (o GitHubEventsConfigOutput) Push() PushFilterPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *PushFilter { return v.Push }).(PushFilterPtrOutput)
}

type GitHubEventsConfigPtrOutput struct{ *pulumi.OutputState }

func (GitHubEventsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubEventsConfig)(nil)).Elem()
}

func (o GitHubEventsConfigPtrOutput) ToGitHubEventsConfigPtrOutput() GitHubEventsConfigPtrOutput {
	return o
}

func (o GitHubEventsConfigPtrOutput) ToGitHubEventsConfigPtrOutputWithContext(ctx context.Context) GitHubEventsConfigPtrOutput {
	return o
}

func (o GitHubEventsConfigPtrOutput) Elem() GitHubEventsConfigOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) GitHubEventsConfig { return *v }).(GitHubEventsConfigOutput)
}

// The installationID that emits the GitHub event.
func (o GitHubEventsConfigPtrOutput) InstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *string {
		if v == nil {
			return nil
		}
		return v.InstallationId
	}).(pulumi.StringPtrOutput)
}

// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
func (o GitHubEventsConfigPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
func (o GitHubEventsConfigPtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *string {
		if v == nil {
			return nil
		}
		return v.Owner
	}).(pulumi.StringPtrOutput)
}

// filter to match changes in pull requests.
func (o GitHubEventsConfigPtrOutput) PullRequest() PullRequestFilterPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *PullRequestFilter {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(PullRequestFilterPtrOutput)
}

// filter to match changes in refs like branches, tags.
func (o GitHubEventsConfigPtrOutput) Push() PushFilterPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *PushFilter {
		if v == nil {
			return nil
		}
		return v.Push
	}).(PushFilterPtrOutput)
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. This message is experimental.
type GitHubEventsConfigResponse struct {
	// The installationID that emits the GitHub event.
	InstallationId string `pulumi:"installationId"`
	// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	Name string `pulumi:"name"`
	// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner string `pulumi:"owner"`
	// filter to match changes in pull requests.
	PullRequest PullRequestFilterResponse `pulumi:"pullRequest"`
	// filter to match changes in refs like branches, tags.
	Push PushFilterResponse `pulumi:"push"`
}

// GitHubEventsConfigResponseInput is an input type that accepts GitHubEventsConfigResponseArgs and GitHubEventsConfigResponseOutput values.
// You can construct a concrete instance of `GitHubEventsConfigResponseInput` via:
//
//          GitHubEventsConfigResponseArgs{...}
type GitHubEventsConfigResponseInput interface {
	pulumi.Input

	ToGitHubEventsConfigResponseOutput() GitHubEventsConfigResponseOutput
	ToGitHubEventsConfigResponseOutputWithContext(context.Context) GitHubEventsConfigResponseOutput
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. This message is experimental.
type GitHubEventsConfigResponseArgs struct {
	// The installationID that emits the GitHub event.
	InstallationId pulumi.StringInput `pulumi:"installationId"`
	// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	Name pulumi.StringInput `pulumi:"name"`
	// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner pulumi.StringInput `pulumi:"owner"`
	// filter to match changes in pull requests.
	PullRequest PullRequestFilterResponseInput `pulumi:"pullRequest"`
	// filter to match changes in refs like branches, tags.
	Push PushFilterResponseInput `pulumi:"push"`
}

func (GitHubEventsConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubEventsConfigResponse)(nil)).Elem()
}

func (i GitHubEventsConfigResponseArgs) ToGitHubEventsConfigResponseOutput() GitHubEventsConfigResponseOutput {
	return i.ToGitHubEventsConfigResponseOutputWithContext(context.Background())
}

func (i GitHubEventsConfigResponseArgs) ToGitHubEventsConfigResponseOutputWithContext(ctx context.Context) GitHubEventsConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEventsConfigResponseOutput)
}

func (i GitHubEventsConfigResponseArgs) ToGitHubEventsConfigResponsePtrOutput() GitHubEventsConfigResponsePtrOutput {
	return i.ToGitHubEventsConfigResponsePtrOutputWithContext(context.Background())
}

func (i GitHubEventsConfigResponseArgs) ToGitHubEventsConfigResponsePtrOutputWithContext(ctx context.Context) GitHubEventsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEventsConfigResponseOutput).ToGitHubEventsConfigResponsePtrOutputWithContext(ctx)
}

// GitHubEventsConfigResponsePtrInput is an input type that accepts GitHubEventsConfigResponseArgs, GitHubEventsConfigResponsePtr and GitHubEventsConfigResponsePtrOutput values.
// You can construct a concrete instance of `GitHubEventsConfigResponsePtrInput` via:
//
//          GitHubEventsConfigResponseArgs{...}
//
//  or:
//
//          nil
type GitHubEventsConfigResponsePtrInput interface {
	pulumi.Input

	ToGitHubEventsConfigResponsePtrOutput() GitHubEventsConfigResponsePtrOutput
	ToGitHubEventsConfigResponsePtrOutputWithContext(context.Context) GitHubEventsConfigResponsePtrOutput
}

type gitHubEventsConfigResponsePtrType GitHubEventsConfigResponseArgs

func GitHubEventsConfigResponsePtr(v *GitHubEventsConfigResponseArgs) GitHubEventsConfigResponsePtrInput {
	return (*gitHubEventsConfigResponsePtrType)(v)
}

func (*gitHubEventsConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubEventsConfigResponse)(nil)).Elem()
}

func (i *gitHubEventsConfigResponsePtrType) ToGitHubEventsConfigResponsePtrOutput() GitHubEventsConfigResponsePtrOutput {
	return i.ToGitHubEventsConfigResponsePtrOutputWithContext(context.Background())
}

func (i *gitHubEventsConfigResponsePtrType) ToGitHubEventsConfigResponsePtrOutputWithContext(ctx context.Context) GitHubEventsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEventsConfigResponsePtrOutput)
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. This message is experimental.
type GitHubEventsConfigResponseOutput struct{ *pulumi.OutputState }

func (GitHubEventsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubEventsConfigResponse)(nil)).Elem()
}

func (o GitHubEventsConfigResponseOutput) ToGitHubEventsConfigResponseOutput() GitHubEventsConfigResponseOutput {
	return o
}

func (o GitHubEventsConfigResponseOutput) ToGitHubEventsConfigResponseOutputWithContext(ctx context.Context) GitHubEventsConfigResponseOutput {
	return o
}

func (o GitHubEventsConfigResponseOutput) ToGitHubEventsConfigResponsePtrOutput() GitHubEventsConfigResponsePtrOutput {
	return o.ToGitHubEventsConfigResponsePtrOutputWithContext(context.Background())
}

func (o GitHubEventsConfigResponseOutput) ToGitHubEventsConfigResponsePtrOutputWithContext(ctx context.Context) GitHubEventsConfigResponsePtrOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) *GitHubEventsConfigResponse {
		return &v
	}).(GitHubEventsConfigResponsePtrOutput)
}

// The installationID that emits the GitHub event.
func (o GitHubEventsConfigResponseOutput) InstallationId() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) string { return v.InstallationId }).(pulumi.StringOutput)
}

// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
func (o GitHubEventsConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
func (o GitHubEventsConfigResponseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) string { return v.Owner }).(pulumi.StringOutput)
}

// filter to match changes in pull requests.
func (o GitHubEventsConfigResponseOutput) PullRequest() PullRequestFilterResponseOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) PullRequestFilterResponse { return v.PullRequest }).(PullRequestFilterResponseOutput)
}

// filter to match changes in refs like branches, tags.
func (o GitHubEventsConfigResponseOutput) Push() PushFilterResponseOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) PushFilterResponse { return v.Push }).(PushFilterResponseOutput)
}

type GitHubEventsConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (GitHubEventsConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubEventsConfigResponse)(nil)).Elem()
}

func (o GitHubEventsConfigResponsePtrOutput) ToGitHubEventsConfigResponsePtrOutput() GitHubEventsConfigResponsePtrOutput {
	return o
}

func (o GitHubEventsConfigResponsePtrOutput) ToGitHubEventsConfigResponsePtrOutputWithContext(ctx context.Context) GitHubEventsConfigResponsePtrOutput {
	return o
}

func (o GitHubEventsConfigResponsePtrOutput) Elem() GitHubEventsConfigResponseOutput {
	return o.ApplyT(func(v *GitHubEventsConfigResponse) GitHubEventsConfigResponse { return *v }).(GitHubEventsConfigResponseOutput)
}

// The installationID that emits the GitHub event.
func (o GitHubEventsConfigResponsePtrOutput) InstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InstallationId
	}).(pulumi.StringPtrOutput)
}

// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
func (o GitHubEventsConfigResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
func (o GitHubEventsConfigResponsePtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Owner
	}).(pulumi.StringPtrOutput)
}

// filter to match changes in pull requests.
func (o GitHubEventsConfigResponsePtrOutput) PullRequest() PullRequestFilterResponsePtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfigResponse) *PullRequestFilterResponse {
		if v == nil {
			return nil
		}
		return &v.PullRequest
	}).(PullRequestFilterResponsePtrOutput)
}

// filter to match changes in refs like branches, tags.
func (o GitHubEventsConfigResponsePtrOutput) Push() PushFilterResponsePtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfigResponse) *PushFilterResponse {
		if v == nil {
			return nil
		}
		return &v.Push
	}).(PushFilterResponsePtrOutput)
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecret struct {
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	EnvMap map[string]string `pulumi:"envMap"`
	// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// InlineSecretInput is an input type that accepts InlineSecretArgs and InlineSecretOutput values.
// You can construct a concrete instance of `InlineSecretInput` via:
//
//          InlineSecretArgs{...}
type InlineSecretInput interface {
	pulumi.Input

	ToInlineSecretOutput() InlineSecretOutput
	ToInlineSecretOutputWithContext(context.Context) InlineSecretOutput
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecretArgs struct {
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	EnvMap pulumi.StringMapInput `pulumi:"envMap"`
	// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (InlineSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InlineSecret)(nil)).Elem()
}

func (i InlineSecretArgs) ToInlineSecretOutput() InlineSecretOutput {
	return i.ToInlineSecretOutputWithContext(context.Background())
}

func (i InlineSecretArgs) ToInlineSecretOutputWithContext(ctx context.Context) InlineSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlineSecretOutput)
}

// InlineSecretArrayInput is an input type that accepts InlineSecretArray and InlineSecretArrayOutput values.
// You can construct a concrete instance of `InlineSecretArrayInput` via:
//
//          InlineSecretArray{ InlineSecretArgs{...} }
type InlineSecretArrayInput interface {
	pulumi.Input

	ToInlineSecretArrayOutput() InlineSecretArrayOutput
	ToInlineSecretArrayOutputWithContext(context.Context) InlineSecretArrayOutput
}

type InlineSecretArray []InlineSecretInput

func (InlineSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InlineSecret)(nil)).Elem()
}

func (i InlineSecretArray) ToInlineSecretArrayOutput() InlineSecretArrayOutput {
	return i.ToInlineSecretArrayOutputWithContext(context.Background())
}

func (i InlineSecretArray) ToInlineSecretArrayOutputWithContext(ctx context.Context) InlineSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlineSecretArrayOutput)
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecretOutput struct{ *pulumi.OutputState }

func (InlineSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InlineSecret)(nil)).Elem()
}

func (o InlineSecretOutput) ToInlineSecretOutput() InlineSecretOutput {
	return o
}

func (o InlineSecretOutput) ToInlineSecretOutputWithContext(ctx context.Context) InlineSecretOutput {
	return o
}

// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
func (o InlineSecretOutput) EnvMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v InlineSecret) map[string]string { return v.EnvMap }).(pulumi.StringMapOutput)
}

// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
func (o InlineSecretOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InlineSecret) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type InlineSecretArrayOutput struct{ *pulumi.OutputState }

func (InlineSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InlineSecret)(nil)).Elem()
}

func (o InlineSecretArrayOutput) ToInlineSecretArrayOutput() InlineSecretArrayOutput {
	return o
}

func (o InlineSecretArrayOutput) ToInlineSecretArrayOutputWithContext(ctx context.Context) InlineSecretArrayOutput {
	return o
}

func (o InlineSecretArrayOutput) Index(i pulumi.IntInput) InlineSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InlineSecret {
		return vs[0].([]InlineSecret)[vs[1].(int)]
	}).(InlineSecretOutput)
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecretResponse struct {
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	EnvMap map[string]string `pulumi:"envMap"`
	// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// InlineSecretResponseInput is an input type that accepts InlineSecretResponseArgs and InlineSecretResponseOutput values.
// You can construct a concrete instance of `InlineSecretResponseInput` via:
//
//          InlineSecretResponseArgs{...}
type InlineSecretResponseInput interface {
	pulumi.Input

	ToInlineSecretResponseOutput() InlineSecretResponseOutput
	ToInlineSecretResponseOutputWithContext(context.Context) InlineSecretResponseOutput
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecretResponseArgs struct {
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	EnvMap pulumi.StringMapInput `pulumi:"envMap"`
	// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (InlineSecretResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InlineSecretResponse)(nil)).Elem()
}

func (i InlineSecretResponseArgs) ToInlineSecretResponseOutput() InlineSecretResponseOutput {
	return i.ToInlineSecretResponseOutputWithContext(context.Background())
}

func (i InlineSecretResponseArgs) ToInlineSecretResponseOutputWithContext(ctx context.Context) InlineSecretResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlineSecretResponseOutput)
}

// InlineSecretResponseArrayInput is an input type that accepts InlineSecretResponseArray and InlineSecretResponseArrayOutput values.
// You can construct a concrete instance of `InlineSecretResponseArrayInput` via:
//
//          InlineSecretResponseArray{ InlineSecretResponseArgs{...} }
type InlineSecretResponseArrayInput interface {
	pulumi.Input

	ToInlineSecretResponseArrayOutput() InlineSecretResponseArrayOutput
	ToInlineSecretResponseArrayOutputWithContext(context.Context) InlineSecretResponseArrayOutput
}

type InlineSecretResponseArray []InlineSecretResponseInput

func (InlineSecretResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InlineSecretResponse)(nil)).Elem()
}

func (i InlineSecretResponseArray) ToInlineSecretResponseArrayOutput() InlineSecretResponseArrayOutput {
	return i.ToInlineSecretResponseArrayOutputWithContext(context.Background())
}

func (i InlineSecretResponseArray) ToInlineSecretResponseArrayOutputWithContext(ctx context.Context) InlineSecretResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlineSecretResponseArrayOutput)
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecretResponseOutput struct{ *pulumi.OutputState }

func (InlineSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InlineSecretResponse)(nil)).Elem()
}

func (o InlineSecretResponseOutput) ToInlineSecretResponseOutput() InlineSecretResponseOutput {
	return o
}

func (o InlineSecretResponseOutput) ToInlineSecretResponseOutputWithContext(ctx context.Context) InlineSecretResponseOutput {
	return o
}

// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
func (o InlineSecretResponseOutput) EnvMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v InlineSecretResponse) map[string]string { return v.EnvMap }).(pulumi.StringMapOutput)
}

// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
func (o InlineSecretResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v InlineSecretResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type InlineSecretResponseArrayOutput struct{ *pulumi.OutputState }

func (InlineSecretResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InlineSecretResponse)(nil)).Elem()
}

func (o InlineSecretResponseArrayOutput) ToInlineSecretResponseArrayOutput() InlineSecretResponseArrayOutput {
	return o
}

func (o InlineSecretResponseArrayOutput) ToInlineSecretResponseArrayOutputWithContext(ctx context.Context) InlineSecretResponseArrayOutput {
	return o
}

func (o InlineSecretResponseArrayOutput) Index(i pulumi.IntInput) InlineSecretResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InlineSecretResponse {
		return vs[0].([]InlineSecretResponse)[vs[1].(int)]
	}).(InlineSecretResponseOutput)
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilter struct {
	// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `pulumi:"branch"`
	// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
	CommentControl *string `pulumi:"commentControl"`
	// If true, branches that do NOT match the git_ref will trigger a build.
	InvertRegex *bool `pulumi:"invertRegex"`
}

// PullRequestFilterInput is an input type that accepts PullRequestFilterArgs and PullRequestFilterOutput values.
// You can construct a concrete instance of `PullRequestFilterInput` via:
//
//          PullRequestFilterArgs{...}
type PullRequestFilterInput interface {
	pulumi.Input

	ToPullRequestFilterOutput() PullRequestFilterOutput
	ToPullRequestFilterOutputWithContext(context.Context) PullRequestFilterOutput
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilterArgs struct {
	// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
	CommentControl pulumi.StringPtrInput `pulumi:"commentControl"`
	// If true, branches that do NOT match the git_ref will trigger a build.
	InvertRegex pulumi.BoolPtrInput `pulumi:"invertRegex"`
}

func (PullRequestFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PullRequestFilter)(nil)).Elem()
}

func (i PullRequestFilterArgs) ToPullRequestFilterOutput() PullRequestFilterOutput {
	return i.ToPullRequestFilterOutputWithContext(context.Background())
}

func (i PullRequestFilterArgs) ToPullRequestFilterOutputWithContext(ctx context.Context) PullRequestFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullRequestFilterOutput)
}

func (i PullRequestFilterArgs) ToPullRequestFilterPtrOutput() PullRequestFilterPtrOutput {
	return i.ToPullRequestFilterPtrOutputWithContext(context.Background())
}

func (i PullRequestFilterArgs) ToPullRequestFilterPtrOutputWithContext(ctx context.Context) PullRequestFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullRequestFilterOutput).ToPullRequestFilterPtrOutputWithContext(ctx)
}

// PullRequestFilterPtrInput is an input type that accepts PullRequestFilterArgs, PullRequestFilterPtr and PullRequestFilterPtrOutput values.
// You can construct a concrete instance of `PullRequestFilterPtrInput` via:
//
//          PullRequestFilterArgs{...}
//
//  or:
//
//          nil
type PullRequestFilterPtrInput interface {
	pulumi.Input

	ToPullRequestFilterPtrOutput() PullRequestFilterPtrOutput
	ToPullRequestFilterPtrOutputWithContext(context.Context) PullRequestFilterPtrOutput
}

type pullRequestFilterPtrType PullRequestFilterArgs

func PullRequestFilterPtr(v *PullRequestFilterArgs) PullRequestFilterPtrInput {
	return (*pullRequestFilterPtrType)(v)
}

func (*pullRequestFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PullRequestFilter)(nil)).Elem()
}

func (i *pullRequestFilterPtrType) ToPullRequestFilterPtrOutput() PullRequestFilterPtrOutput {
	return i.ToPullRequestFilterPtrOutputWithContext(context.Background())
}

func (i *pullRequestFilterPtrType) ToPullRequestFilterPtrOutputWithContext(ctx context.Context) PullRequestFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullRequestFilterPtrOutput)
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilterOutput struct{ *pulumi.OutputState }

func (PullRequestFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullRequestFilter)(nil)).Elem()
}

func (o PullRequestFilterOutput) ToPullRequestFilterOutput() PullRequestFilterOutput {
	return o
}

func (o PullRequestFilterOutput) ToPullRequestFilterOutputWithContext(ctx context.Context) PullRequestFilterOutput {
	return o
}

func (o PullRequestFilterOutput) ToPullRequestFilterPtrOutput() PullRequestFilterPtrOutput {
	return o.ToPullRequestFilterPtrOutputWithContext(context.Background())
}

func (o PullRequestFilterOutput) ToPullRequestFilterPtrOutputWithContext(ctx context.Context) PullRequestFilterPtrOutput {
	return o.ApplyT(func(v PullRequestFilter) *PullRequestFilter {
		return &v
	}).(PullRequestFilterPtrOutput)
}

// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PullRequestFilterOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PullRequestFilter) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
func (o PullRequestFilterOutput) CommentControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PullRequestFilter) *string { return v.CommentControl }).(pulumi.StringPtrOutput)
}

// If true, branches that do NOT match the git_ref will trigger a build.
func (o PullRequestFilterOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PullRequestFilter) *bool { return v.InvertRegex }).(pulumi.BoolPtrOutput)
}

type PullRequestFilterPtrOutput struct{ *pulumi.OutputState }

func (PullRequestFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullRequestFilter)(nil)).Elem()
}

func (o PullRequestFilterPtrOutput) ToPullRequestFilterPtrOutput() PullRequestFilterPtrOutput {
	return o
}

func (o PullRequestFilterPtrOutput) ToPullRequestFilterPtrOutputWithContext(ctx context.Context) PullRequestFilterPtrOutput {
	return o
}

func (o PullRequestFilterPtrOutput) Elem() PullRequestFilterOutput {
	return o.ApplyT(func(v *PullRequestFilter) PullRequestFilter { return *v }).(PullRequestFilterOutput)
}

// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PullRequestFilterPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullRequestFilter) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
func (o PullRequestFilterPtrOutput) CommentControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullRequestFilter) *string {
		if v == nil {
			return nil
		}
		return v.CommentControl
	}).(pulumi.StringPtrOutput)
}

// If true, branches that do NOT match the git_ref will trigger a build.
func (o PullRequestFilterPtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PullRequestFilter) *bool {
		if v == nil {
			return nil
		}
		return v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilterResponse struct {
	// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch string `pulumi:"branch"`
	// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
	CommentControl string `pulumi:"commentControl"`
	// If true, branches that do NOT match the git_ref will trigger a build.
	InvertRegex bool `pulumi:"invertRegex"`
}

// PullRequestFilterResponseInput is an input type that accepts PullRequestFilterResponseArgs and PullRequestFilterResponseOutput values.
// You can construct a concrete instance of `PullRequestFilterResponseInput` via:
//
//          PullRequestFilterResponseArgs{...}
type PullRequestFilterResponseInput interface {
	pulumi.Input

	ToPullRequestFilterResponseOutput() PullRequestFilterResponseOutput
	ToPullRequestFilterResponseOutputWithContext(context.Context) PullRequestFilterResponseOutput
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilterResponseArgs struct {
	// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch pulumi.StringInput `pulumi:"branch"`
	// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
	CommentControl pulumi.StringInput `pulumi:"commentControl"`
	// If true, branches that do NOT match the git_ref will trigger a build.
	InvertRegex pulumi.BoolInput `pulumi:"invertRegex"`
}

func (PullRequestFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PullRequestFilterResponse)(nil)).Elem()
}

func (i PullRequestFilterResponseArgs) ToPullRequestFilterResponseOutput() PullRequestFilterResponseOutput {
	return i.ToPullRequestFilterResponseOutputWithContext(context.Background())
}

func (i PullRequestFilterResponseArgs) ToPullRequestFilterResponseOutputWithContext(ctx context.Context) PullRequestFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullRequestFilterResponseOutput)
}

func (i PullRequestFilterResponseArgs) ToPullRequestFilterResponsePtrOutput() PullRequestFilterResponsePtrOutput {
	return i.ToPullRequestFilterResponsePtrOutputWithContext(context.Background())
}

func (i PullRequestFilterResponseArgs) ToPullRequestFilterResponsePtrOutputWithContext(ctx context.Context) PullRequestFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullRequestFilterResponseOutput).ToPullRequestFilterResponsePtrOutputWithContext(ctx)
}

// PullRequestFilterResponsePtrInput is an input type that accepts PullRequestFilterResponseArgs, PullRequestFilterResponsePtr and PullRequestFilterResponsePtrOutput values.
// You can construct a concrete instance of `PullRequestFilterResponsePtrInput` via:
//
//          PullRequestFilterResponseArgs{...}
//
//  or:
//
//          nil
type PullRequestFilterResponsePtrInput interface {
	pulumi.Input

	ToPullRequestFilterResponsePtrOutput() PullRequestFilterResponsePtrOutput
	ToPullRequestFilterResponsePtrOutputWithContext(context.Context) PullRequestFilterResponsePtrOutput
}

type pullRequestFilterResponsePtrType PullRequestFilterResponseArgs

func PullRequestFilterResponsePtr(v *PullRequestFilterResponseArgs) PullRequestFilterResponsePtrInput {
	return (*pullRequestFilterResponsePtrType)(v)
}

func (*pullRequestFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PullRequestFilterResponse)(nil)).Elem()
}

func (i *pullRequestFilterResponsePtrType) ToPullRequestFilterResponsePtrOutput() PullRequestFilterResponsePtrOutput {
	return i.ToPullRequestFilterResponsePtrOutputWithContext(context.Background())
}

func (i *pullRequestFilterResponsePtrType) ToPullRequestFilterResponsePtrOutputWithContext(ctx context.Context) PullRequestFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullRequestFilterResponsePtrOutput)
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilterResponseOutput struct{ *pulumi.OutputState }

func (PullRequestFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullRequestFilterResponse)(nil)).Elem()
}

func (o PullRequestFilterResponseOutput) ToPullRequestFilterResponseOutput() PullRequestFilterResponseOutput {
	return o
}

func (o PullRequestFilterResponseOutput) ToPullRequestFilterResponseOutputWithContext(ctx context.Context) PullRequestFilterResponseOutput {
	return o
}

func (o PullRequestFilterResponseOutput) ToPullRequestFilterResponsePtrOutput() PullRequestFilterResponsePtrOutput {
	return o.ToPullRequestFilterResponsePtrOutputWithContext(context.Background())
}

func (o PullRequestFilterResponseOutput) ToPullRequestFilterResponsePtrOutputWithContext(ctx context.Context) PullRequestFilterResponsePtrOutput {
	return o.ApplyT(func(v PullRequestFilterResponse) *PullRequestFilterResponse {
		return &v
	}).(PullRequestFilterResponsePtrOutput)
}

// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PullRequestFilterResponseOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v PullRequestFilterResponse) string { return v.Branch }).(pulumi.StringOutput)
}

// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
func (o PullRequestFilterResponseOutput) CommentControl() pulumi.StringOutput {
	return o.ApplyT(func(v PullRequestFilterResponse) string { return v.CommentControl }).(pulumi.StringOutput)
}

// If true, branches that do NOT match the git_ref will trigger a build.
func (o PullRequestFilterResponseOutput) InvertRegex() pulumi.BoolOutput {
	return o.ApplyT(func(v PullRequestFilterResponse) bool { return v.InvertRegex }).(pulumi.BoolOutput)
}

type PullRequestFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (PullRequestFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullRequestFilterResponse)(nil)).Elem()
}

func (o PullRequestFilterResponsePtrOutput) ToPullRequestFilterResponsePtrOutput() PullRequestFilterResponsePtrOutput {
	return o
}

func (o PullRequestFilterResponsePtrOutput) ToPullRequestFilterResponsePtrOutputWithContext(ctx context.Context) PullRequestFilterResponsePtrOutput {
	return o
}

func (o PullRequestFilterResponsePtrOutput) Elem() PullRequestFilterResponseOutput {
	return o.ApplyT(func(v *PullRequestFilterResponse) PullRequestFilterResponse { return *v }).(PullRequestFilterResponseOutput)
}

// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PullRequestFilterResponsePtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullRequestFilterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Branch
	}).(pulumi.StringPtrOutput)
}

// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
func (o PullRequestFilterResponsePtrOutput) CommentControl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullRequestFilterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CommentControl
	}).(pulumi.StringPtrOutput)
}

// If true, branches that do NOT match the git_ref will trigger a build.
func (o PullRequestFilterResponsePtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PullRequestFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilter struct {
	// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `pulumi:"branch"`
	// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
	InvertRegex *bool `pulumi:"invertRegex"`
	// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag *string `pulumi:"tag"`
}

// PushFilterInput is an input type that accepts PushFilterArgs and PushFilterOutput values.
// You can construct a concrete instance of `PushFilterInput` via:
//
//          PushFilterArgs{...}
type PushFilterInput interface {
	pulumi.Input

	ToPushFilterOutput() PushFilterOutput
	ToPushFilterOutputWithContext(context.Context) PushFilterOutput
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilterArgs struct {
	// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
	InvertRegex pulumi.BoolPtrInput `pulumi:"invertRegex"`
	// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (PushFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PushFilter)(nil)).Elem()
}

func (i PushFilterArgs) ToPushFilterOutput() PushFilterOutput {
	return i.ToPushFilterOutputWithContext(context.Background())
}

func (i PushFilterArgs) ToPushFilterOutputWithContext(ctx context.Context) PushFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushFilterOutput)
}

func (i PushFilterArgs) ToPushFilterPtrOutput() PushFilterPtrOutput {
	return i.ToPushFilterPtrOutputWithContext(context.Background())
}

func (i PushFilterArgs) ToPushFilterPtrOutputWithContext(ctx context.Context) PushFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushFilterOutput).ToPushFilterPtrOutputWithContext(ctx)
}

// PushFilterPtrInput is an input type that accepts PushFilterArgs, PushFilterPtr and PushFilterPtrOutput values.
// You can construct a concrete instance of `PushFilterPtrInput` via:
//
//          PushFilterArgs{...}
//
//  or:
//
//          nil
type PushFilterPtrInput interface {
	pulumi.Input

	ToPushFilterPtrOutput() PushFilterPtrOutput
	ToPushFilterPtrOutputWithContext(context.Context) PushFilterPtrOutput
}

type pushFilterPtrType PushFilterArgs

func PushFilterPtr(v *PushFilterArgs) PushFilterPtrInput {
	return (*pushFilterPtrType)(v)
}

func (*pushFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PushFilter)(nil)).Elem()
}

func (i *pushFilterPtrType) ToPushFilterPtrOutput() PushFilterPtrOutput {
	return i.ToPushFilterPtrOutputWithContext(context.Background())
}

func (i *pushFilterPtrType) ToPushFilterPtrOutputWithContext(ctx context.Context) PushFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushFilterPtrOutput)
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilterOutput struct{ *pulumi.OutputState }

func (PushFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushFilter)(nil)).Elem()
}

func (o PushFilterOutput) ToPushFilterOutput() PushFilterOutput {
	return o
}

func (o PushFilterOutput) ToPushFilterOutputWithContext(ctx context.Context) PushFilterOutput {
	return o
}

func (o PushFilterOutput) ToPushFilterPtrOutput() PushFilterPtrOutput {
	return o.ToPushFilterPtrOutputWithContext(context.Background())
}

func (o PushFilterOutput) ToPushFilterPtrOutputWithContext(ctx context.Context) PushFilterPtrOutput {
	return o.ApplyT(func(v PushFilter) *PushFilter {
		return &v
	}).(PushFilterPtrOutput)
}

// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushFilter) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
func (o PushFilterOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushFilter) *bool { return v.InvertRegex }).(pulumi.BoolPtrOutput)
}

// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushFilter) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type PushFilterPtrOutput struct{ *pulumi.OutputState }

func (PushFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PushFilter)(nil)).Elem()
}

func (o PushFilterPtrOutput) ToPushFilterPtrOutput() PushFilterPtrOutput {
	return o
}

func (o PushFilterPtrOutput) ToPushFilterPtrOutputWithContext(ctx context.Context) PushFilterPtrOutput {
	return o
}

func (o PushFilterPtrOutput) Elem() PushFilterOutput {
	return o.ApplyT(func(v *PushFilter) PushFilter { return *v }).(PushFilterOutput)
}

// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PushFilter) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
func (o PushFilterPtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PushFilter) *bool {
		if v == nil {
			return nil
		}
		return v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PushFilter) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilterResponse struct {
	// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch string `pulumi:"branch"`
	// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
	InvertRegex bool `pulumi:"invertRegex"`
	// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag string `pulumi:"tag"`
}

// PushFilterResponseInput is an input type that accepts PushFilterResponseArgs and PushFilterResponseOutput values.
// You can construct a concrete instance of `PushFilterResponseInput` via:
//
//          PushFilterResponseArgs{...}
type PushFilterResponseInput interface {
	pulumi.Input

	ToPushFilterResponseOutput() PushFilterResponseOutput
	ToPushFilterResponseOutputWithContext(context.Context) PushFilterResponseOutput
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilterResponseArgs struct {
	// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch pulumi.StringInput `pulumi:"branch"`
	// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
	InvertRegex pulumi.BoolInput `pulumi:"invertRegex"`
	// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (PushFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PushFilterResponse)(nil)).Elem()
}

func (i PushFilterResponseArgs) ToPushFilterResponseOutput() PushFilterResponseOutput {
	return i.ToPushFilterResponseOutputWithContext(context.Background())
}

func (i PushFilterResponseArgs) ToPushFilterResponseOutputWithContext(ctx context.Context) PushFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushFilterResponseOutput)
}

func (i PushFilterResponseArgs) ToPushFilterResponsePtrOutput() PushFilterResponsePtrOutput {
	return i.ToPushFilterResponsePtrOutputWithContext(context.Background())
}

func (i PushFilterResponseArgs) ToPushFilterResponsePtrOutputWithContext(ctx context.Context) PushFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushFilterResponseOutput).ToPushFilterResponsePtrOutputWithContext(ctx)
}

// PushFilterResponsePtrInput is an input type that accepts PushFilterResponseArgs, PushFilterResponsePtr and PushFilterResponsePtrOutput values.
// You can construct a concrete instance of `PushFilterResponsePtrInput` via:
//
//          PushFilterResponseArgs{...}
//
//  or:
//
//          nil
type PushFilterResponsePtrInput interface {
	pulumi.Input

	ToPushFilterResponsePtrOutput() PushFilterResponsePtrOutput
	ToPushFilterResponsePtrOutputWithContext(context.Context) PushFilterResponsePtrOutput
}

type pushFilterResponsePtrType PushFilterResponseArgs

func PushFilterResponsePtr(v *PushFilterResponseArgs) PushFilterResponsePtrInput {
	return (*pushFilterResponsePtrType)(v)
}

func (*pushFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PushFilterResponse)(nil)).Elem()
}

func (i *pushFilterResponsePtrType) ToPushFilterResponsePtrOutput() PushFilterResponsePtrOutput {
	return i.ToPushFilterResponsePtrOutputWithContext(context.Background())
}

func (i *pushFilterResponsePtrType) ToPushFilterResponsePtrOutputWithContext(ctx context.Context) PushFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushFilterResponsePtrOutput)
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilterResponseOutput struct{ *pulumi.OutputState }

func (PushFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushFilterResponse)(nil)).Elem()
}

func (o PushFilterResponseOutput) ToPushFilterResponseOutput() PushFilterResponseOutput {
	return o
}

func (o PushFilterResponseOutput) ToPushFilterResponseOutputWithContext(ctx context.Context) PushFilterResponseOutput {
	return o
}

func (o PushFilterResponseOutput) ToPushFilterResponsePtrOutput() PushFilterResponsePtrOutput {
	return o.ToPushFilterResponsePtrOutputWithContext(context.Background())
}

func (o PushFilterResponseOutput) ToPushFilterResponsePtrOutputWithContext(ctx context.Context) PushFilterResponsePtrOutput {
	return o.ApplyT(func(v PushFilterResponse) *PushFilterResponse {
		return &v
	}).(PushFilterResponsePtrOutput)
}

// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterResponseOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v PushFilterResponse) string { return v.Branch }).(pulumi.StringOutput)
}

// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
func (o PushFilterResponseOutput) InvertRegex() pulumi.BoolOutput {
	return o.ApplyT(func(v PushFilterResponse) bool { return v.InvertRegex }).(pulumi.BoolOutput)
}

// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v PushFilterResponse) string { return v.Tag }).(pulumi.StringOutput)
}

type PushFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (PushFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PushFilterResponse)(nil)).Elem()
}

func (o PushFilterResponsePtrOutput) ToPushFilterResponsePtrOutput() PushFilterResponsePtrOutput {
	return o
}

func (o PushFilterResponsePtrOutput) ToPushFilterResponsePtrOutputWithContext(ctx context.Context) PushFilterResponsePtrOutput {
	return o
}

func (o PushFilterResponsePtrOutput) Elem() PushFilterResponseOutput {
	return o.ApplyT(func(v *PushFilterResponse) PushFilterResponse { return *v }).(PushFilterResponseOutput)
}

// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterResponsePtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PushFilterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Branch
	}).(pulumi.StringPtrOutput)
}

// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
func (o PushFilterResponsePtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PushFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterResponsePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PushFilterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tag
	}).(pulumi.StringPtrOutput)
}

// Location of the source in a Google Cloud Source Repository.
type RepoSource struct {
	// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	BranchName *string `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha *string `pulumi:"commitSha"`
	// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
	Dir *string `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
	ProjectId *string `pulumi:"projectId"`
	// Name of the Cloud Source Repository.
	RepoName *string `pulumi:"repoName"`
	// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
	Substitutions map[string]string `pulumi:"substitutions"`
	// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	TagName *string `pulumi:"tagName"`
}

// RepoSourceInput is an input type that accepts RepoSourceArgs and RepoSourceOutput values.
// You can construct a concrete instance of `RepoSourceInput` via:
//
//          RepoSourceArgs{...}
type RepoSourceInput interface {
	pulumi.Input

	ToRepoSourceOutput() RepoSourceOutput
	ToRepoSourceOutputWithContext(context.Context) RepoSourceOutput
}

// Location of the source in a Google Cloud Source Repository.
type RepoSourceArgs struct {
	// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha pulumi.StringPtrInput `pulumi:"commitSha"`
	// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex pulumi.BoolPtrInput `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Name of the Cloud Source Repository.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
	// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
	Substitutions pulumi.StringMapInput `pulumi:"substitutions"`
	// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
}

func (RepoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSource)(nil)).Elem()
}

func (i RepoSourceArgs) ToRepoSourceOutput() RepoSourceOutput {
	return i.ToRepoSourceOutputWithContext(context.Background())
}

func (i RepoSourceArgs) ToRepoSourceOutputWithContext(ctx context.Context) RepoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceOutput)
}

func (i RepoSourceArgs) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return i.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (i RepoSourceArgs) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceOutput).ToRepoSourcePtrOutputWithContext(ctx)
}

// RepoSourcePtrInput is an input type that accepts RepoSourceArgs, RepoSourcePtr and RepoSourcePtrOutput values.
// You can construct a concrete instance of `RepoSourcePtrInput` via:
//
//          RepoSourceArgs{...}
//
//  or:
//
//          nil
type RepoSourcePtrInput interface {
	pulumi.Input

	ToRepoSourcePtrOutput() RepoSourcePtrOutput
	ToRepoSourcePtrOutputWithContext(context.Context) RepoSourcePtrOutput
}

type repoSourcePtrType RepoSourceArgs

func RepoSourcePtr(v *RepoSourceArgs) RepoSourcePtrInput {
	return (*repoSourcePtrType)(v)
}

func (*repoSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoSource)(nil)).Elem()
}

func (i *repoSourcePtrType) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return i.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (i *repoSourcePtrType) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourcePtrOutput)
}

// Location of the source in a Google Cloud Source Repository.
type RepoSourceOutput struct{ *pulumi.OutputState }

func (RepoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSource)(nil)).Elem()
}

func (o RepoSourceOutput) ToRepoSourceOutput() RepoSourceOutput {
	return o
}

func (o RepoSourceOutput) ToRepoSourceOutputWithContext(ctx context.Context) RepoSourceOutput {
	return o
}

func (o RepoSourceOutput) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return o.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (o RepoSourceOutput) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return o.ApplyT(func(v RepoSource) *RepoSource {
		return &v
	}).(RepoSourcePtrOutput)
}

// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourceOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build.
func (o RepoSourceOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.CommitSha }).(pulumi.StringPtrOutput)
}

// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
func (o RepoSourceOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o RepoSourceOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepoSource) *bool { return v.InvertRegex }).(pulumi.BoolPtrOutput)
}

// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
func (o RepoSourceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Name of the Cloud Source Repository.
func (o RepoSourceOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
func (o RepoSourceOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v RepoSource) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourceOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type RepoSourcePtrOutput struct{ *pulumi.OutputState }

func (RepoSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoSource)(nil)).Elem()
}

func (o RepoSourcePtrOutput) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return o
}

func (o RepoSourcePtrOutput) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return o
}

func (o RepoSourcePtrOutput) Elem() RepoSourceOutput {
	return o.ApplyT(func(v *RepoSource) RepoSource { return *v }).(RepoSourceOutput)
}

// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourcePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build.
func (o RepoSourcePtrOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.CommitSha
	}).(pulumi.StringPtrOutput)
}

// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
func (o RepoSourcePtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o RepoSourcePtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepoSource) *bool {
		if v == nil {
			return nil
		}
		return v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
func (o RepoSourcePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Name of the Cloud Source Repository.
func (o RepoSourcePtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
func (o RepoSourcePtrOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepoSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.Substitutions
	}).(pulumi.StringMapOutput)
}

// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourcePtrOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.TagName
	}).(pulumi.StringPtrOutput)
}

// Location of the source in a Google Cloud Source Repository.
type RepoSourceResponse struct {
	// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	BranchName string `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha string `pulumi:"commitSha"`
	// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
	Dir string `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex bool `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
	ProjectId string `pulumi:"projectId"`
	// Name of the Cloud Source Repository.
	RepoName string `pulumi:"repoName"`
	// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
	Substitutions map[string]string `pulumi:"substitutions"`
	// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	TagName string `pulumi:"tagName"`
}

// RepoSourceResponseInput is an input type that accepts RepoSourceResponseArgs and RepoSourceResponseOutput values.
// You can construct a concrete instance of `RepoSourceResponseInput` via:
//
//          RepoSourceResponseArgs{...}
type RepoSourceResponseInput interface {
	pulumi.Input

	ToRepoSourceResponseOutput() RepoSourceResponseOutput
	ToRepoSourceResponseOutputWithContext(context.Context) RepoSourceResponseOutput
}

// Location of the source in a Google Cloud Source Repository.
type RepoSourceResponseArgs struct {
	// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha pulumi.StringInput `pulumi:"commitSha"`
	// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
	Dir pulumi.StringInput `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex pulumi.BoolInput `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Name of the Cloud Source Repository.
	RepoName pulumi.StringInput `pulumi:"repoName"`
	// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
	Substitutions pulumi.StringMapInput `pulumi:"substitutions"`
	// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	TagName pulumi.StringInput `pulumi:"tagName"`
}

func (RepoSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSourceResponse)(nil)).Elem()
}

func (i RepoSourceResponseArgs) ToRepoSourceResponseOutput() RepoSourceResponseOutput {
	return i.ToRepoSourceResponseOutputWithContext(context.Background())
}

func (i RepoSourceResponseArgs) ToRepoSourceResponseOutputWithContext(ctx context.Context) RepoSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceResponseOutput)
}

func (i RepoSourceResponseArgs) ToRepoSourceResponsePtrOutput() RepoSourceResponsePtrOutput {
	return i.ToRepoSourceResponsePtrOutputWithContext(context.Background())
}

func (i RepoSourceResponseArgs) ToRepoSourceResponsePtrOutputWithContext(ctx context.Context) RepoSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceResponseOutput).ToRepoSourceResponsePtrOutputWithContext(ctx)
}

// RepoSourceResponsePtrInput is an input type that accepts RepoSourceResponseArgs, RepoSourceResponsePtr and RepoSourceResponsePtrOutput values.
// You can construct a concrete instance of `RepoSourceResponsePtrInput` via:
//
//          RepoSourceResponseArgs{...}
//
//  or:
//
//          nil
type RepoSourceResponsePtrInput interface {
	pulumi.Input

	ToRepoSourceResponsePtrOutput() RepoSourceResponsePtrOutput
	ToRepoSourceResponsePtrOutputWithContext(context.Context) RepoSourceResponsePtrOutput
}

type repoSourceResponsePtrType RepoSourceResponseArgs

func RepoSourceResponsePtr(v *RepoSourceResponseArgs) RepoSourceResponsePtrInput {
	return (*repoSourceResponsePtrType)(v)
}

func (*repoSourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoSourceResponse)(nil)).Elem()
}

func (i *repoSourceResponsePtrType) ToRepoSourceResponsePtrOutput() RepoSourceResponsePtrOutput {
	return i.ToRepoSourceResponsePtrOutputWithContext(context.Background())
}

func (i *repoSourceResponsePtrType) ToRepoSourceResponsePtrOutputWithContext(ctx context.Context) RepoSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceResponsePtrOutput)
}

// Location of the source in a Google Cloud Source Repository.
type RepoSourceResponseOutput struct{ *pulumi.OutputState }

func (RepoSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSourceResponse)(nil)).Elem()
}

func (o RepoSourceResponseOutput) ToRepoSourceResponseOutput() RepoSourceResponseOutput {
	return o
}

func (o RepoSourceResponseOutput) ToRepoSourceResponseOutputWithContext(ctx context.Context) RepoSourceResponseOutput {
	return o
}

func (o RepoSourceResponseOutput) ToRepoSourceResponsePtrOutput() RepoSourceResponsePtrOutput {
	return o.ToRepoSourceResponsePtrOutputWithContext(context.Background())
}

func (o RepoSourceResponseOutput) ToRepoSourceResponsePtrOutputWithContext(ctx context.Context) RepoSourceResponsePtrOutput {
	return o.ApplyT(func(v RepoSourceResponse) *RepoSourceResponse {
		return &v
	}).(RepoSourceResponsePtrOutput)
}

// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourceResponseOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.BranchName }).(pulumi.StringOutput)
}

// Explicit commit SHA to build.
func (o RepoSourceResponseOutput) CommitSha() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.CommitSha }).(pulumi.StringOutput)
}

// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
func (o RepoSourceResponseOutput) Dir() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.Dir }).(pulumi.StringOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o RepoSourceResponseOutput) InvertRegex() pulumi.BoolOutput {
	return o.ApplyT(func(v RepoSourceResponse) bool { return v.InvertRegex }).(pulumi.BoolOutput)
}

// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
func (o RepoSourceResponseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Name of the Cloud Source Repository.
func (o RepoSourceResponseOutput) RepoName() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.RepoName }).(pulumi.StringOutput)
}

// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
func (o RepoSourceResponseOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v RepoSourceResponse) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourceResponseOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.TagName }).(pulumi.StringOutput)
}

type RepoSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (RepoSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoSourceResponse)(nil)).Elem()
}

func (o RepoSourceResponsePtrOutput) ToRepoSourceResponsePtrOutput() RepoSourceResponsePtrOutput {
	return o
}

func (o RepoSourceResponsePtrOutput) ToRepoSourceResponsePtrOutputWithContext(ctx context.Context) RepoSourceResponsePtrOutput {
	return o
}

func (o RepoSourceResponsePtrOutput) Elem() RepoSourceResponseOutput {
	return o.ApplyT(func(v *RepoSourceResponse) RepoSourceResponse { return *v }).(RepoSourceResponseOutput)
}

// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourceResponsePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build.
func (o RepoSourceResponsePtrOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CommitSha
	}).(pulumi.StringPtrOutput)
}

// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
func (o RepoSourceResponsePtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Dir
	}).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o RepoSourceResponsePtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepoSourceResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
func (o RepoSourceResponsePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Name of the Cloud Source Repository.
func (o RepoSourceResponsePtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
func (o RepoSourceResponsePtrOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepoSourceResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Substitutions
	}).(pulumi.StringMapOutput)
}

// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourceResponsePtrOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TagName
	}).(pulumi.StringPtrOutput)
}

// Artifacts created by the build pipeline.
type ResultsResponse struct {
	// Path to the artifact manifest. Only populated when artifacts are uploaded.
	ArtifactManifest string `pulumi:"artifactManifest"`
	// Time to push all non-container artifacts.
	ArtifactTiming TimeSpanResponse `pulumi:"artifactTiming"`
	// List of build step digests, in the order corresponding to build step indices.
	BuildStepImages []string `pulumi:"buildStepImages"`
	// List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
	BuildStepOutputs []string `pulumi:"buildStepOutputs"`
	// Container images that were built as a part of the build.
	Images []BuiltImageResponse `pulumi:"images"`
	// Number of artifacts uploaded. Only populated when artifacts are uploaded.
	NumArtifacts string `pulumi:"numArtifacts"`
}

// ResultsResponseInput is an input type that accepts ResultsResponseArgs and ResultsResponseOutput values.
// You can construct a concrete instance of `ResultsResponseInput` via:
//
//          ResultsResponseArgs{...}
type ResultsResponseInput interface {
	pulumi.Input

	ToResultsResponseOutput() ResultsResponseOutput
	ToResultsResponseOutputWithContext(context.Context) ResultsResponseOutput
}

// Artifacts created by the build pipeline.
type ResultsResponseArgs struct {
	// Path to the artifact manifest. Only populated when artifacts are uploaded.
	ArtifactManifest pulumi.StringInput `pulumi:"artifactManifest"`
	// Time to push all non-container artifacts.
	ArtifactTiming TimeSpanResponseInput `pulumi:"artifactTiming"`
	// List of build step digests, in the order corresponding to build step indices.
	BuildStepImages pulumi.StringArrayInput `pulumi:"buildStepImages"`
	// List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
	BuildStepOutputs pulumi.StringArrayInput `pulumi:"buildStepOutputs"`
	// Container images that were built as a part of the build.
	Images BuiltImageResponseArrayInput `pulumi:"images"`
	// Number of artifacts uploaded. Only populated when artifacts are uploaded.
	NumArtifacts pulumi.StringInput `pulumi:"numArtifacts"`
}

func (ResultsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResultsResponse)(nil)).Elem()
}

func (i ResultsResponseArgs) ToResultsResponseOutput() ResultsResponseOutput {
	return i.ToResultsResponseOutputWithContext(context.Background())
}

func (i ResultsResponseArgs) ToResultsResponseOutputWithContext(ctx context.Context) ResultsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResultsResponseOutput)
}

func (i ResultsResponseArgs) ToResultsResponsePtrOutput() ResultsResponsePtrOutput {
	return i.ToResultsResponsePtrOutputWithContext(context.Background())
}

func (i ResultsResponseArgs) ToResultsResponsePtrOutputWithContext(ctx context.Context) ResultsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResultsResponseOutput).ToResultsResponsePtrOutputWithContext(ctx)
}

// ResultsResponsePtrInput is an input type that accepts ResultsResponseArgs, ResultsResponsePtr and ResultsResponsePtrOutput values.
// You can construct a concrete instance of `ResultsResponsePtrInput` via:
//
//          ResultsResponseArgs{...}
//
//  or:
//
//          nil
type ResultsResponsePtrInput interface {
	pulumi.Input

	ToResultsResponsePtrOutput() ResultsResponsePtrOutput
	ToResultsResponsePtrOutputWithContext(context.Context) ResultsResponsePtrOutput
}

type resultsResponsePtrType ResultsResponseArgs

func ResultsResponsePtr(v *ResultsResponseArgs) ResultsResponsePtrInput {
	return (*resultsResponsePtrType)(v)
}

func (*resultsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResultsResponse)(nil)).Elem()
}

func (i *resultsResponsePtrType) ToResultsResponsePtrOutput() ResultsResponsePtrOutput {
	return i.ToResultsResponsePtrOutputWithContext(context.Background())
}

func (i *resultsResponsePtrType) ToResultsResponsePtrOutputWithContext(ctx context.Context) ResultsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResultsResponsePtrOutput)
}

// Artifacts created by the build pipeline.
type ResultsResponseOutput struct{ *pulumi.OutputState }

func (ResultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResultsResponse)(nil)).Elem()
}

func (o ResultsResponseOutput) ToResultsResponseOutput() ResultsResponseOutput {
	return o
}

func (o ResultsResponseOutput) ToResultsResponseOutputWithContext(ctx context.Context) ResultsResponseOutput {
	return o
}

func (o ResultsResponseOutput) ToResultsResponsePtrOutput() ResultsResponsePtrOutput {
	return o.ToResultsResponsePtrOutputWithContext(context.Background())
}

func (o ResultsResponseOutput) ToResultsResponsePtrOutputWithContext(ctx context.Context) ResultsResponsePtrOutput {
	return o.ApplyT(func(v ResultsResponse) *ResultsResponse {
		return &v
	}).(ResultsResponsePtrOutput)
}

// Path to the artifact manifest. Only populated when artifacts are uploaded.
func (o ResultsResponseOutput) ArtifactManifest() pulumi.StringOutput {
	return o.ApplyT(func(v ResultsResponse) string { return v.ArtifactManifest }).(pulumi.StringOutput)
}

// Time to push all non-container artifacts.
func (o ResultsResponseOutput) ArtifactTiming() TimeSpanResponseOutput {
	return o.ApplyT(func(v ResultsResponse) TimeSpanResponse { return v.ArtifactTiming }).(TimeSpanResponseOutput)
}

// List of build step digests, in the order corresponding to build step indices.
func (o ResultsResponseOutput) BuildStepImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResultsResponse) []string { return v.BuildStepImages }).(pulumi.StringArrayOutput)
}

// List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
func (o ResultsResponseOutput) BuildStepOutputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResultsResponse) []string { return v.BuildStepOutputs }).(pulumi.StringArrayOutput)
}

// Container images that were built as a part of the build.
func (o ResultsResponseOutput) Images() BuiltImageResponseArrayOutput {
	return o.ApplyT(func(v ResultsResponse) []BuiltImageResponse { return v.Images }).(BuiltImageResponseArrayOutput)
}

// Number of artifacts uploaded. Only populated when artifacts are uploaded.
func (o ResultsResponseOutput) NumArtifacts() pulumi.StringOutput {
	return o.ApplyT(func(v ResultsResponse) string { return v.NumArtifacts }).(pulumi.StringOutput)
}

type ResultsResponsePtrOutput struct{ *pulumi.OutputState }

func (ResultsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResultsResponse)(nil)).Elem()
}

func (o ResultsResponsePtrOutput) ToResultsResponsePtrOutput() ResultsResponsePtrOutput {
	return o
}

func (o ResultsResponsePtrOutput) ToResultsResponsePtrOutputWithContext(ctx context.Context) ResultsResponsePtrOutput {
	return o
}

func (o ResultsResponsePtrOutput) Elem() ResultsResponseOutput {
	return o.ApplyT(func(v *ResultsResponse) ResultsResponse { return *v }).(ResultsResponseOutput)
}

// Path to the artifact manifest. Only populated when artifacts are uploaded.
func (o ResultsResponsePtrOutput) ArtifactManifest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResultsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ArtifactManifest
	}).(pulumi.StringPtrOutput)
}

// Time to push all non-container artifacts.
func (o ResultsResponsePtrOutput) ArtifactTiming() TimeSpanResponsePtrOutput {
	return o.ApplyT(func(v *ResultsResponse) *TimeSpanResponse {
		if v == nil {
			return nil
		}
		return &v.ArtifactTiming
	}).(TimeSpanResponsePtrOutput)
}

// List of build step digests, in the order corresponding to build step indices.
func (o ResultsResponsePtrOutput) BuildStepImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResultsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BuildStepImages
	}).(pulumi.StringArrayOutput)
}

// List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
func (o ResultsResponsePtrOutput) BuildStepOutputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResultsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BuildStepOutputs
	}).(pulumi.StringArrayOutput)
}

// Container images that were built as a part of the build.
func (o ResultsResponsePtrOutput) Images() BuiltImageResponseArrayOutput {
	return o.ApplyT(func(v *ResultsResponse) []BuiltImageResponse {
		if v == nil {
			return nil
		}
		return v.Images
	}).(BuiltImageResponseArrayOutput)
}

// Number of artifacts uploaded. Only populated when artifacts are uploaded.
func (o ResultsResponsePtrOutput) NumArtifacts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResultsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NumArtifacts
	}).(pulumi.StringPtrOutput)
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type Secret struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	SecretEnv map[string]string `pulumi:"secretEnv"`
}

// SecretInput is an input type that accepts SecretArgs and SecretOutput values.
// You can construct a concrete instance of `SecretInput` via:
//
//          SecretArgs{...}
type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(context.Context) SecretOutput
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type SecretArgs struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	SecretEnv pulumi.StringMapInput `pulumi:"secretEnv"`
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (i SecretArgs) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

// SecretArrayInput is an input type that accepts SecretArray and SecretArrayOutput values.
// You can construct a concrete instance of `SecretArrayInput` via:
//
//          SecretArray{ SecretArgs{...} }
type SecretArrayInput interface {
	pulumi.Input

	ToSecretArrayOutput() SecretArrayOutput
	ToSecretArrayOutputWithContext(context.Context) SecretArrayOutput
}

type SecretArray []SecretInput

func (SecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Secret)(nil)).Elem()
}

func (i SecretArray) ToSecretArrayOutput() SecretArrayOutput {
	return i.ToSecretArrayOutputWithContext(context.Background())
}

func (i SecretArray) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretArrayOutput)
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

// Cloud KMS key name to use to decrypt these envs.
func (o SecretOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secret) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
func (o SecretOutput) SecretEnv() pulumi.StringMapOutput {
	return o.ApplyT(func(v Secret) map[string]string { return v.SecretEnv }).(pulumi.StringMapOutput)
}

type SecretArrayOutput struct{ *pulumi.OutputState }

func (SecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Secret)(nil)).Elem()
}

func (o SecretArrayOutput) ToSecretArrayOutput() SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) Index(i pulumi.IntInput) SecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Secret {
		return vs[0].([]Secret)[vs[1].(int)]
	}).(SecretOutput)
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecret struct {
	// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
	Env *string `pulumi:"env"`
	// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
	VersionName *string `pulumi:"versionName"`
}

// SecretManagerSecretInput is an input type that accepts SecretManagerSecretArgs and SecretManagerSecretOutput values.
// You can construct a concrete instance of `SecretManagerSecretInput` via:
//
//          SecretManagerSecretArgs{...}
type SecretManagerSecretInput interface {
	pulumi.Input

	ToSecretManagerSecretOutput() SecretManagerSecretOutput
	ToSecretManagerSecretOutputWithContext(context.Context) SecretManagerSecretOutput
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecretArgs struct {
	// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
	Env pulumi.StringPtrInput `pulumi:"env"`
	// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
	VersionName pulumi.StringPtrInput `pulumi:"versionName"`
}

func (SecretManagerSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretManagerSecret)(nil)).Elem()
}

func (i SecretManagerSecretArgs) ToSecretManagerSecretOutput() SecretManagerSecretOutput {
	return i.ToSecretManagerSecretOutputWithContext(context.Background())
}

func (i SecretManagerSecretArgs) ToSecretManagerSecretOutputWithContext(ctx context.Context) SecretManagerSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretManagerSecretOutput)
}

// SecretManagerSecretArrayInput is an input type that accepts SecretManagerSecretArray and SecretManagerSecretArrayOutput values.
// You can construct a concrete instance of `SecretManagerSecretArrayInput` via:
//
//          SecretManagerSecretArray{ SecretManagerSecretArgs{...} }
type SecretManagerSecretArrayInput interface {
	pulumi.Input

	ToSecretManagerSecretArrayOutput() SecretManagerSecretArrayOutput
	ToSecretManagerSecretArrayOutputWithContext(context.Context) SecretManagerSecretArrayOutput
}

type SecretManagerSecretArray []SecretManagerSecretInput

func (SecretManagerSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretManagerSecret)(nil)).Elem()
}

func (i SecretManagerSecretArray) ToSecretManagerSecretArrayOutput() SecretManagerSecretArrayOutput {
	return i.ToSecretManagerSecretArrayOutputWithContext(context.Background())
}

func (i SecretManagerSecretArray) ToSecretManagerSecretArrayOutputWithContext(ctx context.Context) SecretManagerSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretManagerSecretArrayOutput)
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecretOutput struct{ *pulumi.OutputState }

func (SecretManagerSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretManagerSecret)(nil)).Elem()
}

func (o SecretManagerSecretOutput) ToSecretManagerSecretOutput() SecretManagerSecretOutput {
	return o
}

func (o SecretManagerSecretOutput) ToSecretManagerSecretOutputWithContext(ctx context.Context) SecretManagerSecretOutput {
	return o
}

// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
func (o SecretManagerSecretOutput) Env() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretManagerSecret) *string { return v.Env }).(pulumi.StringPtrOutput)
}

// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
func (o SecretManagerSecretOutput) VersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretManagerSecret) *string { return v.VersionName }).(pulumi.StringPtrOutput)
}

type SecretManagerSecretArrayOutput struct{ *pulumi.OutputState }

func (SecretManagerSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretManagerSecret)(nil)).Elem()
}

func (o SecretManagerSecretArrayOutput) ToSecretManagerSecretArrayOutput() SecretManagerSecretArrayOutput {
	return o
}

func (o SecretManagerSecretArrayOutput) ToSecretManagerSecretArrayOutputWithContext(ctx context.Context) SecretManagerSecretArrayOutput {
	return o
}

func (o SecretManagerSecretArrayOutput) Index(i pulumi.IntInput) SecretManagerSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretManagerSecret {
		return vs[0].([]SecretManagerSecret)[vs[1].(int)]
	}).(SecretManagerSecretOutput)
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecretResponse struct {
	// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
	Env string `pulumi:"env"`
	// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
	VersionName string `pulumi:"versionName"`
}

// SecretManagerSecretResponseInput is an input type that accepts SecretManagerSecretResponseArgs and SecretManagerSecretResponseOutput values.
// You can construct a concrete instance of `SecretManagerSecretResponseInput` via:
//
//          SecretManagerSecretResponseArgs{...}
type SecretManagerSecretResponseInput interface {
	pulumi.Input

	ToSecretManagerSecretResponseOutput() SecretManagerSecretResponseOutput
	ToSecretManagerSecretResponseOutputWithContext(context.Context) SecretManagerSecretResponseOutput
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecretResponseArgs struct {
	// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
	Env pulumi.StringInput `pulumi:"env"`
	// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
	VersionName pulumi.StringInput `pulumi:"versionName"`
}

func (SecretManagerSecretResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretManagerSecretResponse)(nil)).Elem()
}

func (i SecretManagerSecretResponseArgs) ToSecretManagerSecretResponseOutput() SecretManagerSecretResponseOutput {
	return i.ToSecretManagerSecretResponseOutputWithContext(context.Background())
}

func (i SecretManagerSecretResponseArgs) ToSecretManagerSecretResponseOutputWithContext(ctx context.Context) SecretManagerSecretResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretManagerSecretResponseOutput)
}

// SecretManagerSecretResponseArrayInput is an input type that accepts SecretManagerSecretResponseArray and SecretManagerSecretResponseArrayOutput values.
// You can construct a concrete instance of `SecretManagerSecretResponseArrayInput` via:
//
//          SecretManagerSecretResponseArray{ SecretManagerSecretResponseArgs{...} }
type SecretManagerSecretResponseArrayInput interface {
	pulumi.Input

	ToSecretManagerSecretResponseArrayOutput() SecretManagerSecretResponseArrayOutput
	ToSecretManagerSecretResponseArrayOutputWithContext(context.Context) SecretManagerSecretResponseArrayOutput
}

type SecretManagerSecretResponseArray []SecretManagerSecretResponseInput

func (SecretManagerSecretResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretManagerSecretResponse)(nil)).Elem()
}

func (i SecretManagerSecretResponseArray) ToSecretManagerSecretResponseArrayOutput() SecretManagerSecretResponseArrayOutput {
	return i.ToSecretManagerSecretResponseArrayOutputWithContext(context.Background())
}

func (i SecretManagerSecretResponseArray) ToSecretManagerSecretResponseArrayOutputWithContext(ctx context.Context) SecretManagerSecretResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretManagerSecretResponseArrayOutput)
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecretResponseOutput struct{ *pulumi.OutputState }

func (SecretManagerSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretManagerSecretResponse)(nil)).Elem()
}

func (o SecretManagerSecretResponseOutput) ToSecretManagerSecretResponseOutput() SecretManagerSecretResponseOutput {
	return o
}

func (o SecretManagerSecretResponseOutput) ToSecretManagerSecretResponseOutputWithContext(ctx context.Context) SecretManagerSecretResponseOutput {
	return o
}

// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
func (o SecretManagerSecretResponseOutput) Env() pulumi.StringOutput {
	return o.ApplyT(func(v SecretManagerSecretResponse) string { return v.Env }).(pulumi.StringOutput)
}

// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
func (o SecretManagerSecretResponseOutput) VersionName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretManagerSecretResponse) string { return v.VersionName }).(pulumi.StringOutput)
}

type SecretManagerSecretResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretManagerSecretResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretManagerSecretResponse)(nil)).Elem()
}

func (o SecretManagerSecretResponseArrayOutput) ToSecretManagerSecretResponseArrayOutput() SecretManagerSecretResponseArrayOutput {
	return o
}

func (o SecretManagerSecretResponseArrayOutput) ToSecretManagerSecretResponseArrayOutputWithContext(ctx context.Context) SecretManagerSecretResponseArrayOutput {
	return o
}

func (o SecretManagerSecretResponseArrayOutput) Index(i pulumi.IntInput) SecretManagerSecretResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretManagerSecretResponse {
		return vs[0].([]SecretManagerSecretResponse)[vs[1].(int)]
	}).(SecretManagerSecretResponseOutput)
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type SecretResponse struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName string `pulumi:"kmsKeyName"`
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	SecretEnv map[string]string `pulumi:"secretEnv"`
}

// SecretResponseInput is an input type that accepts SecretResponseArgs and SecretResponseOutput values.
// You can construct a concrete instance of `SecretResponseInput` via:
//
//          SecretResponseArgs{...}
type SecretResponseInput interface {
	pulumi.Input

	ToSecretResponseOutput() SecretResponseOutput
	ToSecretResponseOutputWithContext(context.Context) SecretResponseOutput
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type SecretResponseArgs struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	SecretEnv pulumi.StringMapInput `pulumi:"secretEnv"`
}

func (SecretResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretResponse)(nil)).Elem()
}

func (i SecretResponseArgs) ToSecretResponseOutput() SecretResponseOutput {
	return i.ToSecretResponseOutputWithContext(context.Background())
}

func (i SecretResponseArgs) ToSecretResponseOutputWithContext(ctx context.Context) SecretResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretResponseOutput)
}

// SecretResponseArrayInput is an input type that accepts SecretResponseArray and SecretResponseArrayOutput values.
// You can construct a concrete instance of `SecretResponseArrayInput` via:
//
//          SecretResponseArray{ SecretResponseArgs{...} }
type SecretResponseArrayInput interface {
	pulumi.Input

	ToSecretResponseArrayOutput() SecretResponseArrayOutput
	ToSecretResponseArrayOutputWithContext(context.Context) SecretResponseArrayOutput
}

type SecretResponseArray []SecretResponseInput

func (SecretResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretResponse)(nil)).Elem()
}

func (i SecretResponseArray) ToSecretResponseArrayOutput() SecretResponseArrayOutput {
	return i.ToSecretResponseArrayOutputWithContext(context.Background())
}

func (i SecretResponseArray) ToSecretResponseArrayOutputWithContext(ctx context.Context) SecretResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretResponseArrayOutput)
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type SecretResponseOutput struct{ *pulumi.OutputState }

func (SecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretResponse)(nil)).Elem()
}

func (o SecretResponseOutput) ToSecretResponseOutput() SecretResponseOutput {
	return o
}

func (o SecretResponseOutput) ToSecretResponseOutputWithContext(ctx context.Context) SecretResponseOutput {
	return o
}

// Cloud KMS key name to use to decrypt these envs.
func (o SecretResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
func (o SecretResponseOutput) SecretEnv() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretResponse) map[string]string { return v.SecretEnv }).(pulumi.StringMapOutput)
}

type SecretResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretResponse)(nil)).Elem()
}

func (o SecretResponseArrayOutput) ToSecretResponseArrayOutput() SecretResponseArrayOutput {
	return o
}

func (o SecretResponseArrayOutput) ToSecretResponseArrayOutputWithContext(ctx context.Context) SecretResponseArrayOutput {
	return o
}

func (o SecretResponseArrayOutput) Index(i pulumi.IntInput) SecretResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretResponse {
		return vs[0].([]SecretResponse)[vs[1].(int)]
	}).(SecretResponseOutput)
}

// Secrets and secret environment variables.
type Secrets struct {
	// Secrets encrypted with KMS key and the associated secret environment variable.
	Inline []InlineSecret `pulumi:"inline"`
	// Secrets in Secret Manager and associated secret environment variable.
	SecretManager []SecretManagerSecret `pulumi:"secretManager"`
}

// SecretsInput is an input type that accepts SecretsArgs and SecretsOutput values.
// You can construct a concrete instance of `SecretsInput` via:
//
//          SecretsArgs{...}
type SecretsInput interface {
	pulumi.Input

	ToSecretsOutput() SecretsOutput
	ToSecretsOutputWithContext(context.Context) SecretsOutput
}

// Secrets and secret environment variables.
type SecretsArgs struct {
	// Secrets encrypted with KMS key and the associated secret environment variable.
	Inline InlineSecretArrayInput `pulumi:"inline"`
	// Secrets in Secret Manager and associated secret environment variable.
	SecretManager SecretManagerSecretArrayInput `pulumi:"secretManager"`
}

func (SecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Secrets)(nil)).Elem()
}

func (i SecretsArgs) ToSecretsOutput() SecretsOutput {
	return i.ToSecretsOutputWithContext(context.Background())
}

func (i SecretsArgs) ToSecretsOutputWithContext(ctx context.Context) SecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsOutput)
}

func (i SecretsArgs) ToSecretsPtrOutput() SecretsPtrOutput {
	return i.ToSecretsPtrOutputWithContext(context.Background())
}

func (i SecretsArgs) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsOutput).ToSecretsPtrOutputWithContext(ctx)
}

// SecretsPtrInput is an input type that accepts SecretsArgs, SecretsPtr and SecretsPtrOutput values.
// You can construct a concrete instance of `SecretsPtrInput` via:
//
//          SecretsArgs{...}
//
//  or:
//
//          nil
type SecretsPtrInput interface {
	pulumi.Input

	ToSecretsPtrOutput() SecretsPtrOutput
	ToSecretsPtrOutputWithContext(context.Context) SecretsPtrOutput
}

type secretsPtrType SecretsArgs

func SecretsPtr(v *SecretsArgs) SecretsPtrInput {
	return (*secretsPtrType)(v)
}

func (*secretsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Secrets)(nil)).Elem()
}

func (i *secretsPtrType) ToSecretsPtrOutput() SecretsPtrOutput {
	return i.ToSecretsPtrOutputWithContext(context.Background())
}

func (i *secretsPtrType) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsPtrOutput)
}

// Secrets and secret environment variables.
type SecretsOutput struct{ *pulumi.OutputState }

func (SecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secrets)(nil)).Elem()
}

func (o SecretsOutput) ToSecretsOutput() SecretsOutput {
	return o
}

func (o SecretsOutput) ToSecretsOutputWithContext(ctx context.Context) SecretsOutput {
	return o
}

func (o SecretsOutput) ToSecretsPtrOutput() SecretsPtrOutput {
	return o.ToSecretsPtrOutputWithContext(context.Background())
}

func (o SecretsOutput) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return o.ApplyT(func(v Secrets) *Secrets {
		return &v
	}).(SecretsPtrOutput)
}

// Secrets encrypted with KMS key and the associated secret environment variable.
func (o SecretsOutput) Inline() InlineSecretArrayOutput {
	return o.ApplyT(func(v Secrets) []InlineSecret { return v.Inline }).(InlineSecretArrayOutput)
}

// Secrets in Secret Manager and associated secret environment variable.
func (o SecretsOutput) SecretManager() SecretManagerSecretArrayOutput {
	return o.ApplyT(func(v Secrets) []SecretManagerSecret { return v.SecretManager }).(SecretManagerSecretArrayOutput)
}

type SecretsPtrOutput struct{ *pulumi.OutputState }

func (SecretsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secrets)(nil)).Elem()
}

func (o SecretsPtrOutput) ToSecretsPtrOutput() SecretsPtrOutput {
	return o
}

func (o SecretsPtrOutput) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return o
}

func (o SecretsPtrOutput) Elem() SecretsOutput {
	return o.ApplyT(func(v *Secrets) Secrets { return *v }).(SecretsOutput)
}

// Secrets encrypted with KMS key and the associated secret environment variable.
func (o SecretsPtrOutput) Inline() InlineSecretArrayOutput {
	return o.ApplyT(func(v *Secrets) []InlineSecret {
		if v == nil {
			return nil
		}
		return v.Inline
	}).(InlineSecretArrayOutput)
}

// Secrets in Secret Manager and associated secret environment variable.
func (o SecretsPtrOutput) SecretManager() SecretManagerSecretArrayOutput {
	return o.ApplyT(func(v *Secrets) []SecretManagerSecret {
		if v == nil {
			return nil
		}
		return v.SecretManager
	}).(SecretManagerSecretArrayOutput)
}

// Secrets and secret environment variables.
type SecretsResponse struct {
	// Secrets encrypted with KMS key and the associated secret environment variable.
	Inline []InlineSecretResponse `pulumi:"inline"`
	// Secrets in Secret Manager and associated secret environment variable.
	SecretManager []SecretManagerSecretResponse `pulumi:"secretManager"`
}

// SecretsResponseInput is an input type that accepts SecretsResponseArgs and SecretsResponseOutput values.
// You can construct a concrete instance of `SecretsResponseInput` via:
//
//          SecretsResponseArgs{...}
type SecretsResponseInput interface {
	pulumi.Input

	ToSecretsResponseOutput() SecretsResponseOutput
	ToSecretsResponseOutputWithContext(context.Context) SecretsResponseOutput
}

// Secrets and secret environment variables.
type SecretsResponseArgs struct {
	// Secrets encrypted with KMS key and the associated secret environment variable.
	Inline InlineSecretResponseArrayInput `pulumi:"inline"`
	// Secrets in Secret Manager and associated secret environment variable.
	SecretManager SecretManagerSecretResponseArrayInput `pulumi:"secretManager"`
}

func (SecretsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsResponse)(nil)).Elem()
}

func (i SecretsResponseArgs) ToSecretsResponseOutput() SecretsResponseOutput {
	return i.ToSecretsResponseOutputWithContext(context.Background())
}

func (i SecretsResponseArgs) ToSecretsResponseOutputWithContext(ctx context.Context) SecretsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsResponseOutput)
}

func (i SecretsResponseArgs) ToSecretsResponsePtrOutput() SecretsResponsePtrOutput {
	return i.ToSecretsResponsePtrOutputWithContext(context.Background())
}

func (i SecretsResponseArgs) ToSecretsResponsePtrOutputWithContext(ctx context.Context) SecretsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsResponseOutput).ToSecretsResponsePtrOutputWithContext(ctx)
}

// SecretsResponsePtrInput is an input type that accepts SecretsResponseArgs, SecretsResponsePtr and SecretsResponsePtrOutput values.
// You can construct a concrete instance of `SecretsResponsePtrInput` via:
//
//          SecretsResponseArgs{...}
//
//  or:
//
//          nil
type SecretsResponsePtrInput interface {
	pulumi.Input

	ToSecretsResponsePtrOutput() SecretsResponsePtrOutput
	ToSecretsResponsePtrOutputWithContext(context.Context) SecretsResponsePtrOutput
}

type secretsResponsePtrType SecretsResponseArgs

func SecretsResponsePtr(v *SecretsResponseArgs) SecretsResponsePtrInput {
	return (*secretsResponsePtrType)(v)
}

func (*secretsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsResponse)(nil)).Elem()
}

func (i *secretsResponsePtrType) ToSecretsResponsePtrOutput() SecretsResponsePtrOutput {
	return i.ToSecretsResponsePtrOutputWithContext(context.Background())
}

func (i *secretsResponsePtrType) ToSecretsResponsePtrOutputWithContext(ctx context.Context) SecretsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsResponsePtrOutput)
}

// Secrets and secret environment variables.
type SecretsResponseOutput struct{ *pulumi.OutputState }

func (SecretsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsResponse)(nil)).Elem()
}

func (o SecretsResponseOutput) ToSecretsResponseOutput() SecretsResponseOutput {
	return o
}

func (o SecretsResponseOutput) ToSecretsResponseOutputWithContext(ctx context.Context) SecretsResponseOutput {
	return o
}

func (o SecretsResponseOutput) ToSecretsResponsePtrOutput() SecretsResponsePtrOutput {
	return o.ToSecretsResponsePtrOutputWithContext(context.Background())
}

func (o SecretsResponseOutput) ToSecretsResponsePtrOutputWithContext(ctx context.Context) SecretsResponsePtrOutput {
	return o.ApplyT(func(v SecretsResponse) *SecretsResponse {
		return &v
	}).(SecretsResponsePtrOutput)
}

// Secrets encrypted with KMS key and the associated secret environment variable.
func (o SecretsResponseOutput) Inline() InlineSecretResponseArrayOutput {
	return o.ApplyT(func(v SecretsResponse) []InlineSecretResponse { return v.Inline }).(InlineSecretResponseArrayOutput)
}

// Secrets in Secret Manager and associated secret environment variable.
func (o SecretsResponseOutput) SecretManager() SecretManagerSecretResponseArrayOutput {
	return o.ApplyT(func(v SecretsResponse) []SecretManagerSecretResponse { return v.SecretManager }).(SecretManagerSecretResponseArrayOutput)
}

type SecretsResponsePtrOutput struct{ *pulumi.OutputState }

func (SecretsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsResponse)(nil)).Elem()
}

func (o SecretsResponsePtrOutput) ToSecretsResponsePtrOutput() SecretsResponsePtrOutput {
	return o
}

func (o SecretsResponsePtrOutput) ToSecretsResponsePtrOutputWithContext(ctx context.Context) SecretsResponsePtrOutput {
	return o
}

func (o SecretsResponsePtrOutput) Elem() SecretsResponseOutput {
	return o.ApplyT(func(v *SecretsResponse) SecretsResponse { return *v }).(SecretsResponseOutput)
}

// Secrets encrypted with KMS key and the associated secret environment variable.
func (o SecretsResponsePtrOutput) Inline() InlineSecretResponseArrayOutput {
	return o.ApplyT(func(v *SecretsResponse) []InlineSecretResponse {
		if v == nil {
			return nil
		}
		return v.Inline
	}).(InlineSecretResponseArrayOutput)
}

// Secrets in Secret Manager and associated secret environment variable.
func (o SecretsResponsePtrOutput) SecretManager() SecretManagerSecretResponseArrayOutput {
	return o.ApplyT(func(v *SecretsResponse) []SecretManagerSecretResponse {
		if v == nil {
			return nil
		}
		return v.SecretManager
	}).(SecretManagerSecretResponseArrayOutput)
}

// Location of the source in a supported storage service.
type Source struct {
	// If provided, get the source from this location in a Cloud Source Repository.
	RepoSource *RepoSource `pulumi:"repoSource"`
	// If provided, get the source from this location in Google Cloud Storage.
	StorageSource *StorageSource `pulumi:"storageSource"`
	// If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview.
	StorageSourceManifest *StorageSourceManifest `pulumi:"storageSourceManifest"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//          SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Location of the source in a supported storage service.
type SourceArgs struct {
	// If provided, get the source from this location in a Cloud Source Repository.
	RepoSource RepoSourcePtrInput `pulumi:"repoSource"`
	// If provided, get the source from this location in Google Cloud Storage.
	StorageSource StorageSourcePtrInput `pulumi:"storageSource"`
	// If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview.
	StorageSourceManifest StorageSourceManifestPtrInput `pulumi:"storageSourceManifest"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//          SourceArgs{...}
//
//  or:
//
//          nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// Location of the source in a supported storage service.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyT(func(v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

// If provided, get the source from this location in a Cloud Source Repository.
func (o SourceOutput) RepoSource() RepoSourcePtrOutput {
	return o.ApplyT(func(v Source) *RepoSource { return v.RepoSource }).(RepoSourcePtrOutput)
}

// If provided, get the source from this location in Google Cloud Storage.
func (o SourceOutput) StorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v Source) *StorageSource { return v.StorageSource }).(StorageSourcePtrOutput)
}

// If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview.
func (o SourceOutput) StorageSourceManifest() StorageSourceManifestPtrOutput {
	return o.ApplyT(func(v Source) *StorageSourceManifest { return v.StorageSourceManifest }).(StorageSourceManifestPtrOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source { return *v }).(SourceOutput)
}

// If provided, get the source from this location in a Cloud Source Repository.
func (o SourcePtrOutput) RepoSource() RepoSourcePtrOutput {
	return o.ApplyT(func(v *Source) *RepoSource {
		if v == nil {
			return nil
		}
		return v.RepoSource
	}).(RepoSourcePtrOutput)
}

// If provided, get the source from this location in Google Cloud Storage.
func (o SourcePtrOutput) StorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v *Source) *StorageSource {
		if v == nil {
			return nil
		}
		return v.StorageSource
	}).(StorageSourcePtrOutput)
}

// If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview.
func (o SourcePtrOutput) StorageSourceManifest() StorageSourceManifestPtrOutput {
	return o.ApplyT(func(v *Source) *StorageSourceManifest {
		if v == nil {
			return nil
		}
		return v.StorageSourceManifest
	}).(StorageSourceManifestPtrOutput)
}

// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
type SourceProvenanceResponse struct {
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
	FileHashes map[string]string `pulumi:"fileHashes"`
	// A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
	ResolvedRepoSource RepoSourceResponse `pulumi:"resolvedRepoSource"`
	// A copy of the build's `source.storage_source`, if exists, with any generations resolved.
	ResolvedStorageSource StorageSourceResponse `pulumi:"resolvedStorageSource"`
	// A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
	ResolvedStorageSourceManifest StorageSourceManifestResponse `pulumi:"resolvedStorageSourceManifest"`
}

// SourceProvenanceResponseInput is an input type that accepts SourceProvenanceResponseArgs and SourceProvenanceResponseOutput values.
// You can construct a concrete instance of `SourceProvenanceResponseInput` via:
//
//          SourceProvenanceResponseArgs{...}
type SourceProvenanceResponseInput interface {
	pulumi.Input

	ToSourceProvenanceResponseOutput() SourceProvenanceResponseOutput
	ToSourceProvenanceResponseOutputWithContext(context.Context) SourceProvenanceResponseOutput
}

// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
type SourceProvenanceResponseArgs struct {
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
	FileHashes pulumi.StringMapInput `pulumi:"fileHashes"`
	// A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
	ResolvedRepoSource RepoSourceResponseInput `pulumi:"resolvedRepoSource"`
	// A copy of the build's `source.storage_source`, if exists, with any generations resolved.
	ResolvedStorageSource StorageSourceResponseInput `pulumi:"resolvedStorageSource"`
	// A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
	ResolvedStorageSourceManifest StorageSourceManifestResponseInput `pulumi:"resolvedStorageSourceManifest"`
}

func (SourceProvenanceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceProvenanceResponse)(nil)).Elem()
}

func (i SourceProvenanceResponseArgs) ToSourceProvenanceResponseOutput() SourceProvenanceResponseOutput {
	return i.ToSourceProvenanceResponseOutputWithContext(context.Background())
}

func (i SourceProvenanceResponseArgs) ToSourceProvenanceResponseOutputWithContext(ctx context.Context) SourceProvenanceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceProvenanceResponseOutput)
}

func (i SourceProvenanceResponseArgs) ToSourceProvenanceResponsePtrOutput() SourceProvenanceResponsePtrOutput {
	return i.ToSourceProvenanceResponsePtrOutputWithContext(context.Background())
}

func (i SourceProvenanceResponseArgs) ToSourceProvenanceResponsePtrOutputWithContext(ctx context.Context) SourceProvenanceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceProvenanceResponseOutput).ToSourceProvenanceResponsePtrOutputWithContext(ctx)
}

// SourceProvenanceResponsePtrInput is an input type that accepts SourceProvenanceResponseArgs, SourceProvenanceResponsePtr and SourceProvenanceResponsePtrOutput values.
// You can construct a concrete instance of `SourceProvenanceResponsePtrInput` via:
//
//          SourceProvenanceResponseArgs{...}
//
//  or:
//
//          nil
type SourceProvenanceResponsePtrInput interface {
	pulumi.Input

	ToSourceProvenanceResponsePtrOutput() SourceProvenanceResponsePtrOutput
	ToSourceProvenanceResponsePtrOutputWithContext(context.Context) SourceProvenanceResponsePtrOutput
}

type sourceProvenanceResponsePtrType SourceProvenanceResponseArgs

func SourceProvenanceResponsePtr(v *SourceProvenanceResponseArgs) SourceProvenanceResponsePtrInput {
	return (*sourceProvenanceResponsePtrType)(v)
}

func (*sourceProvenanceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceProvenanceResponse)(nil)).Elem()
}

func (i *sourceProvenanceResponsePtrType) ToSourceProvenanceResponsePtrOutput() SourceProvenanceResponsePtrOutput {
	return i.ToSourceProvenanceResponsePtrOutputWithContext(context.Background())
}

func (i *sourceProvenanceResponsePtrType) ToSourceProvenanceResponsePtrOutputWithContext(ctx context.Context) SourceProvenanceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceProvenanceResponsePtrOutput)
}

// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
type SourceProvenanceResponseOutput struct{ *pulumi.OutputState }

func (SourceProvenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceProvenanceResponse)(nil)).Elem()
}

func (o SourceProvenanceResponseOutput) ToSourceProvenanceResponseOutput() SourceProvenanceResponseOutput {
	return o
}

func (o SourceProvenanceResponseOutput) ToSourceProvenanceResponseOutputWithContext(ctx context.Context) SourceProvenanceResponseOutput {
	return o
}

func (o SourceProvenanceResponseOutput) ToSourceProvenanceResponsePtrOutput() SourceProvenanceResponsePtrOutput {
	return o.ToSourceProvenanceResponsePtrOutputWithContext(context.Background())
}

func (o SourceProvenanceResponseOutput) ToSourceProvenanceResponsePtrOutputWithContext(ctx context.Context) SourceProvenanceResponsePtrOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) *SourceProvenanceResponse {
		return &v
	}).(SourceProvenanceResponsePtrOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
func (o SourceProvenanceResponseOutput) FileHashes() pulumi.StringMapOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) map[string]string { return v.FileHashes }).(pulumi.StringMapOutput)
}

// A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
func (o SourceProvenanceResponseOutput) ResolvedRepoSource() RepoSourceResponseOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) RepoSourceResponse { return v.ResolvedRepoSource }).(RepoSourceResponseOutput)
}

// A copy of the build's `source.storage_source`, if exists, with any generations resolved.
func (o SourceProvenanceResponseOutput) ResolvedStorageSource() StorageSourceResponseOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) StorageSourceResponse { return v.ResolvedStorageSource }).(StorageSourceResponseOutput)
}

// A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
func (o SourceProvenanceResponseOutput) ResolvedStorageSourceManifest() StorageSourceManifestResponseOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) StorageSourceManifestResponse { return v.ResolvedStorageSourceManifest }).(StorageSourceManifestResponseOutput)
}

type SourceProvenanceResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceProvenanceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceProvenanceResponse)(nil)).Elem()
}

func (o SourceProvenanceResponsePtrOutput) ToSourceProvenanceResponsePtrOutput() SourceProvenanceResponsePtrOutput {
	return o
}

func (o SourceProvenanceResponsePtrOutput) ToSourceProvenanceResponsePtrOutputWithContext(ctx context.Context) SourceProvenanceResponsePtrOutput {
	return o
}

func (o SourceProvenanceResponsePtrOutput) Elem() SourceProvenanceResponseOutput {
	return o.ApplyT(func(v *SourceProvenanceResponse) SourceProvenanceResponse { return *v }).(SourceProvenanceResponseOutput)
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
func (o SourceProvenanceResponsePtrOutput) FileHashes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SourceProvenanceResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.FileHashes
	}).(pulumi.StringMapOutput)
}

// A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
func (o SourceProvenanceResponsePtrOutput) ResolvedRepoSource() RepoSourceResponsePtrOutput {
	return o.ApplyT(func(v *SourceProvenanceResponse) *RepoSourceResponse {
		if v == nil {
			return nil
		}
		return &v.ResolvedRepoSource
	}).(RepoSourceResponsePtrOutput)
}

// A copy of the build's `source.storage_source`, if exists, with any generations resolved.
func (o SourceProvenanceResponsePtrOutput) ResolvedStorageSource() StorageSourceResponsePtrOutput {
	return o.ApplyT(func(v *SourceProvenanceResponse) *StorageSourceResponse {
		if v == nil {
			return nil
		}
		return &v.ResolvedStorageSource
	}).(StorageSourceResponsePtrOutput)
}

// A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
func (o SourceProvenanceResponsePtrOutput) ResolvedStorageSourceManifest() StorageSourceManifestResponsePtrOutput {
	return o.ApplyT(func(v *SourceProvenanceResponse) *StorageSourceManifestResponse {
		if v == nil {
			return nil
		}
		return &v.ResolvedStorageSourceManifest
	}).(StorageSourceManifestResponsePtrOutput)
}

// Location of the source in a supported storage service.
type SourceResponse struct {
	// If provided, get the source from this location in a Cloud Source Repository.
	RepoSource RepoSourceResponse `pulumi:"repoSource"`
	// If provided, get the source from this location in Google Cloud Storage.
	StorageSource StorageSourceResponse `pulumi:"storageSource"`
	// If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview.
	StorageSourceManifest StorageSourceManifestResponse `pulumi:"storageSourceManifest"`
}

// SourceResponseInput is an input type that accepts SourceResponseArgs and SourceResponseOutput values.
// You can construct a concrete instance of `SourceResponseInput` via:
//
//          SourceResponseArgs{...}
type SourceResponseInput interface {
	pulumi.Input

	ToSourceResponseOutput() SourceResponseOutput
	ToSourceResponseOutputWithContext(context.Context) SourceResponseOutput
}

// Location of the source in a supported storage service.
type SourceResponseArgs struct {
	// If provided, get the source from this location in a Cloud Source Repository.
	RepoSource RepoSourceResponseInput `pulumi:"repoSource"`
	// If provided, get the source from this location in Google Cloud Storage.
	StorageSource StorageSourceResponseInput `pulumi:"storageSource"`
	// If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview.
	StorageSourceManifest StorageSourceManifestResponseInput `pulumi:"storageSourceManifest"`
}

func (SourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (i SourceResponseArgs) ToSourceResponseOutput() SourceResponseOutput {
	return i.ToSourceResponseOutputWithContext(context.Background())
}

func (i SourceResponseArgs) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceResponseOutput)
}

func (i SourceResponseArgs) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return i.ToSourceResponsePtrOutputWithContext(context.Background())
}

func (i SourceResponseArgs) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceResponseOutput).ToSourceResponsePtrOutputWithContext(ctx)
}

// SourceResponsePtrInput is an input type that accepts SourceResponseArgs, SourceResponsePtr and SourceResponsePtrOutput values.
// You can construct a concrete instance of `SourceResponsePtrInput` via:
//
//          SourceResponseArgs{...}
//
//  or:
//
//          nil
type SourceResponsePtrInput interface {
	pulumi.Input

	ToSourceResponsePtrOutput() SourceResponsePtrOutput
	ToSourceResponsePtrOutputWithContext(context.Context) SourceResponsePtrOutput
}

type sourceResponsePtrType SourceResponseArgs

func SourceResponsePtr(v *SourceResponseArgs) SourceResponsePtrInput {
	return (*sourceResponsePtrType)(v)
}

func (*sourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceResponse)(nil)).Elem()
}

func (i *sourceResponsePtrType) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return i.ToSourceResponsePtrOutputWithContext(context.Background())
}

func (i *sourceResponsePtrType) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceResponsePtrOutput)
}

// Location of the source in a supported storage service.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return o.ToSourceResponsePtrOutputWithContext(context.Background())
}

func (o SourceResponseOutput) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return o.ApplyT(func(v SourceResponse) *SourceResponse {
		return &v
	}).(SourceResponsePtrOutput)
}

// If provided, get the source from this location in a Cloud Source Repository.
func (o SourceResponseOutput) RepoSource() RepoSourceResponseOutput {
	return o.ApplyT(func(v SourceResponse) RepoSourceResponse { return v.RepoSource }).(RepoSourceResponseOutput)
}

// If provided, get the source from this location in Google Cloud Storage.
func (o SourceResponseOutput) StorageSource() StorageSourceResponseOutput {
	return o.ApplyT(func(v SourceResponse) StorageSourceResponse { return v.StorageSource }).(StorageSourceResponseOutput)
}

// If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview.
func (o SourceResponseOutput) StorageSourceManifest() StorageSourceManifestResponseOutput {
	return o.ApplyT(func(v SourceResponse) StorageSourceManifestResponse { return v.StorageSourceManifest }).(StorageSourceManifestResponseOutput)
}

type SourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceResponse)(nil)).Elem()
}

func (o SourceResponsePtrOutput) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return o
}

func (o SourceResponsePtrOutput) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return o
}

func (o SourceResponsePtrOutput) Elem() SourceResponseOutput {
	return o.ApplyT(func(v *SourceResponse) SourceResponse { return *v }).(SourceResponseOutput)
}

// If provided, get the source from this location in a Cloud Source Repository.
func (o SourceResponsePtrOutput) RepoSource() RepoSourceResponsePtrOutput {
	return o.ApplyT(func(v *SourceResponse) *RepoSourceResponse {
		if v == nil {
			return nil
		}
		return &v.RepoSource
	}).(RepoSourceResponsePtrOutput)
}

// If provided, get the source from this location in Google Cloud Storage.
func (o SourceResponsePtrOutput) StorageSource() StorageSourceResponsePtrOutput {
	return o.ApplyT(func(v *SourceResponse) *StorageSourceResponse {
		if v == nil {
			return nil
		}
		return &v.StorageSource
	}).(StorageSourceResponsePtrOutput)
}

// If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview.
func (o SourceResponsePtrOutput) StorageSourceManifest() StorageSourceManifestResponsePtrOutput {
	return o.ApplyT(func(v *SourceResponse) *StorageSourceManifestResponse {
		if v == nil {
			return nil
		}
		return &v.StorageSourceManifest
	}).(StorageSourceManifestResponsePtrOutput)
}

// Location of the source in an archive file in Google Cloud Storage.
type StorageSource struct {
	// Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket *string `pulumi:"bucket"`
	// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation *string `pulumi:"generation"`
	// Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.
	Object *string `pulumi:"object"`
}

// StorageSourceInput is an input type that accepts StorageSourceArgs and StorageSourceOutput values.
// You can construct a concrete instance of `StorageSourceInput` via:
//
//          StorageSourceArgs{...}
type StorageSourceInput interface {
	pulumi.Input

	ToStorageSourceOutput() StorageSourceOutput
	ToStorageSourceOutputWithContext(context.Context) StorageSourceOutput
}

// Location of the source in an archive file in Google Cloud Storage.
type StorageSourceArgs struct {
	// Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.
	Object pulumi.StringPtrInput `pulumi:"object"`
}

func (StorageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSource)(nil)).Elem()
}

func (i StorageSourceArgs) ToStorageSourceOutput() StorageSourceOutput {
	return i.ToStorageSourceOutputWithContext(context.Background())
}

func (i StorageSourceArgs) ToStorageSourceOutputWithContext(ctx context.Context) StorageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceOutput)
}

func (i StorageSourceArgs) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return i.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (i StorageSourceArgs) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceOutput).ToStorageSourcePtrOutputWithContext(ctx)
}

// StorageSourcePtrInput is an input type that accepts StorageSourceArgs, StorageSourcePtr and StorageSourcePtrOutput values.
// You can construct a concrete instance of `StorageSourcePtrInput` via:
//
//          StorageSourceArgs{...}
//
//  or:
//
//          nil
type StorageSourcePtrInput interface {
	pulumi.Input

	ToStorageSourcePtrOutput() StorageSourcePtrOutput
	ToStorageSourcePtrOutputWithContext(context.Context) StorageSourcePtrOutput
}

type storageSourcePtrType StorageSourceArgs

func StorageSourcePtr(v *StorageSourceArgs) StorageSourcePtrInput {
	return (*storageSourcePtrType)(v)
}

func (*storageSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSource)(nil)).Elem()
}

func (i *storageSourcePtrType) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return i.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (i *storageSourcePtrType) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourcePtrOutput)
}

// Location of the source in an archive file in Google Cloud Storage.
type StorageSourceOutput struct{ *pulumi.OutputState }

func (StorageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSource)(nil)).Elem()
}

func (o StorageSourceOutput) ToStorageSourceOutput() StorageSourceOutput {
	return o
}

func (o StorageSourceOutput) ToStorageSourceOutputWithContext(ctx context.Context) StorageSourceOutput {
	return o
}

func (o StorageSourceOutput) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return o.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (o StorageSourceOutput) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return o.ApplyT(func(v StorageSource) *StorageSource {
		return &v
	}).(StorageSourcePtrOutput)
}

// Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.
func (o StorageSourceOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Object }).(pulumi.StringPtrOutput)
}

type StorageSourcePtrOutput struct{ *pulumi.OutputState }

func (StorageSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSource)(nil)).Elem()
}

func (o StorageSourcePtrOutput) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return o
}

func (o StorageSourcePtrOutput) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return o
}

func (o StorageSourcePtrOutput) Elem() StorageSourceOutput {
	return o.ApplyT(func(v *StorageSource) StorageSource { return *v }).(StorageSourceOutput)
}

// Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourcePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourcePtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.
func (o StorageSourcePtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Object
	}).(pulumi.StringPtrOutput)
}

// Location of the source manifest in Google Cloud Storage. This feature is in Preview.
type StorageSourceManifest struct {
	// Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket *string `pulumi:"bucket"`
	// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation *string `pulumi:"generation"`
	// Google Cloud Storage object containing the source manifest. This object must be a JSON file.
	Object *string `pulumi:"object"`
}

// StorageSourceManifestInput is an input type that accepts StorageSourceManifestArgs and StorageSourceManifestOutput values.
// You can construct a concrete instance of `StorageSourceManifestInput` via:
//
//          StorageSourceManifestArgs{...}
type StorageSourceManifestInput interface {
	pulumi.Input

	ToStorageSourceManifestOutput() StorageSourceManifestOutput
	ToStorageSourceManifestOutputWithContext(context.Context) StorageSourceManifestOutput
}

// Location of the source manifest in Google Cloud Storage. This feature is in Preview.
type StorageSourceManifestArgs struct {
	// Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Google Cloud Storage object containing the source manifest. This object must be a JSON file.
	Object pulumi.StringPtrInput `pulumi:"object"`
}

func (StorageSourceManifestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceManifest)(nil)).Elem()
}

func (i StorageSourceManifestArgs) ToStorageSourceManifestOutput() StorageSourceManifestOutput {
	return i.ToStorageSourceManifestOutputWithContext(context.Background())
}

func (i StorageSourceManifestArgs) ToStorageSourceManifestOutputWithContext(ctx context.Context) StorageSourceManifestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceManifestOutput)
}

func (i StorageSourceManifestArgs) ToStorageSourceManifestPtrOutput() StorageSourceManifestPtrOutput {
	return i.ToStorageSourceManifestPtrOutputWithContext(context.Background())
}

func (i StorageSourceManifestArgs) ToStorageSourceManifestPtrOutputWithContext(ctx context.Context) StorageSourceManifestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceManifestOutput).ToStorageSourceManifestPtrOutputWithContext(ctx)
}

// StorageSourceManifestPtrInput is an input type that accepts StorageSourceManifestArgs, StorageSourceManifestPtr and StorageSourceManifestPtrOutput values.
// You can construct a concrete instance of `StorageSourceManifestPtrInput` via:
//
//          StorageSourceManifestArgs{...}
//
//  or:
//
//          nil
type StorageSourceManifestPtrInput interface {
	pulumi.Input

	ToStorageSourceManifestPtrOutput() StorageSourceManifestPtrOutput
	ToStorageSourceManifestPtrOutputWithContext(context.Context) StorageSourceManifestPtrOutput
}

type storageSourceManifestPtrType StorageSourceManifestArgs

func StorageSourceManifestPtr(v *StorageSourceManifestArgs) StorageSourceManifestPtrInput {
	return (*storageSourceManifestPtrType)(v)
}

func (*storageSourceManifestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSourceManifest)(nil)).Elem()
}

func (i *storageSourceManifestPtrType) ToStorageSourceManifestPtrOutput() StorageSourceManifestPtrOutput {
	return i.ToStorageSourceManifestPtrOutputWithContext(context.Background())
}

func (i *storageSourceManifestPtrType) ToStorageSourceManifestPtrOutputWithContext(ctx context.Context) StorageSourceManifestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceManifestPtrOutput)
}

// Location of the source manifest in Google Cloud Storage. This feature is in Preview.
type StorageSourceManifestOutput struct{ *pulumi.OutputState }

func (StorageSourceManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceManifest)(nil)).Elem()
}

func (o StorageSourceManifestOutput) ToStorageSourceManifestOutput() StorageSourceManifestOutput {
	return o
}

func (o StorageSourceManifestOutput) ToStorageSourceManifestOutputWithContext(ctx context.Context) StorageSourceManifestOutput {
	return o
}

func (o StorageSourceManifestOutput) ToStorageSourceManifestPtrOutput() StorageSourceManifestPtrOutput {
	return o.ToStorageSourceManifestPtrOutputWithContext(context.Background())
}

func (o StorageSourceManifestOutput) ToStorageSourceManifestPtrOutputWithContext(ctx context.Context) StorageSourceManifestPtrOutput {
	return o.ApplyT(func(v StorageSourceManifest) *StorageSourceManifest {
		return &v
	}).(StorageSourceManifestPtrOutput)
}

// Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceManifestOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSourceManifest) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceManifestOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSourceManifest) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing the source manifest. This object must be a JSON file.
func (o StorageSourceManifestOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSourceManifest) *string { return v.Object }).(pulumi.StringPtrOutput)
}

type StorageSourceManifestPtrOutput struct{ *pulumi.OutputState }

func (StorageSourceManifestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSourceManifest)(nil)).Elem()
}

func (o StorageSourceManifestPtrOutput) ToStorageSourceManifestPtrOutput() StorageSourceManifestPtrOutput {
	return o
}

func (o StorageSourceManifestPtrOutput) ToStorageSourceManifestPtrOutputWithContext(ctx context.Context) StorageSourceManifestPtrOutput {
	return o
}

func (o StorageSourceManifestPtrOutput) Elem() StorageSourceManifestOutput {
	return o.ApplyT(func(v *StorageSourceManifest) StorageSourceManifest { return *v }).(StorageSourceManifestOutput)
}

// Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceManifestPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceManifest) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceManifestPtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceManifest) *string {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing the source manifest. This object must be a JSON file.
func (o StorageSourceManifestPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceManifest) *string {
		if v == nil {
			return nil
		}
		return v.Object
	}).(pulumi.StringPtrOutput)
}

// Location of the source manifest in Google Cloud Storage. This feature is in Preview.
type StorageSourceManifestResponse struct {
	// Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket string `pulumi:"bucket"`
	// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation string `pulumi:"generation"`
	// Google Cloud Storage object containing the source manifest. This object must be a JSON file.
	Object string `pulumi:"object"`
}

// StorageSourceManifestResponseInput is an input type that accepts StorageSourceManifestResponseArgs and StorageSourceManifestResponseOutput values.
// You can construct a concrete instance of `StorageSourceManifestResponseInput` via:
//
//          StorageSourceManifestResponseArgs{...}
type StorageSourceManifestResponseInput interface {
	pulumi.Input

	ToStorageSourceManifestResponseOutput() StorageSourceManifestResponseOutput
	ToStorageSourceManifestResponseOutputWithContext(context.Context) StorageSourceManifestResponseOutput
}

// Location of the source manifest in Google Cloud Storage. This feature is in Preview.
type StorageSourceManifestResponseArgs struct {
	// Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation pulumi.StringInput `pulumi:"generation"`
	// Google Cloud Storage object containing the source manifest. This object must be a JSON file.
	Object pulumi.StringInput `pulumi:"object"`
}

func (StorageSourceManifestResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceManifestResponse)(nil)).Elem()
}

func (i StorageSourceManifestResponseArgs) ToStorageSourceManifestResponseOutput() StorageSourceManifestResponseOutput {
	return i.ToStorageSourceManifestResponseOutputWithContext(context.Background())
}

func (i StorageSourceManifestResponseArgs) ToStorageSourceManifestResponseOutputWithContext(ctx context.Context) StorageSourceManifestResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceManifestResponseOutput)
}

func (i StorageSourceManifestResponseArgs) ToStorageSourceManifestResponsePtrOutput() StorageSourceManifestResponsePtrOutput {
	return i.ToStorageSourceManifestResponsePtrOutputWithContext(context.Background())
}

func (i StorageSourceManifestResponseArgs) ToStorageSourceManifestResponsePtrOutputWithContext(ctx context.Context) StorageSourceManifestResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceManifestResponseOutput).ToStorageSourceManifestResponsePtrOutputWithContext(ctx)
}

// StorageSourceManifestResponsePtrInput is an input type that accepts StorageSourceManifestResponseArgs, StorageSourceManifestResponsePtr and StorageSourceManifestResponsePtrOutput values.
// You can construct a concrete instance of `StorageSourceManifestResponsePtrInput` via:
//
//          StorageSourceManifestResponseArgs{...}
//
//  or:
//
//          nil
type StorageSourceManifestResponsePtrInput interface {
	pulumi.Input

	ToStorageSourceManifestResponsePtrOutput() StorageSourceManifestResponsePtrOutput
	ToStorageSourceManifestResponsePtrOutputWithContext(context.Context) StorageSourceManifestResponsePtrOutput
}

type storageSourceManifestResponsePtrType StorageSourceManifestResponseArgs

func StorageSourceManifestResponsePtr(v *StorageSourceManifestResponseArgs) StorageSourceManifestResponsePtrInput {
	return (*storageSourceManifestResponsePtrType)(v)
}

func (*storageSourceManifestResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSourceManifestResponse)(nil)).Elem()
}

func (i *storageSourceManifestResponsePtrType) ToStorageSourceManifestResponsePtrOutput() StorageSourceManifestResponsePtrOutput {
	return i.ToStorageSourceManifestResponsePtrOutputWithContext(context.Background())
}

func (i *storageSourceManifestResponsePtrType) ToStorageSourceManifestResponsePtrOutputWithContext(ctx context.Context) StorageSourceManifestResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceManifestResponsePtrOutput)
}

// Location of the source manifest in Google Cloud Storage. This feature is in Preview.
type StorageSourceManifestResponseOutput struct{ *pulumi.OutputState }

func (StorageSourceManifestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceManifestResponse)(nil)).Elem()
}

func (o StorageSourceManifestResponseOutput) ToStorageSourceManifestResponseOutput() StorageSourceManifestResponseOutput {
	return o
}

func (o StorageSourceManifestResponseOutput) ToStorageSourceManifestResponseOutputWithContext(ctx context.Context) StorageSourceManifestResponseOutput {
	return o
}

func (o StorageSourceManifestResponseOutput) ToStorageSourceManifestResponsePtrOutput() StorageSourceManifestResponsePtrOutput {
	return o.ToStorageSourceManifestResponsePtrOutputWithContext(context.Background())
}

func (o StorageSourceManifestResponseOutput) ToStorageSourceManifestResponsePtrOutputWithContext(ctx context.Context) StorageSourceManifestResponsePtrOutput {
	return o.ApplyT(func(v StorageSourceManifestResponse) *StorageSourceManifestResponse {
		return &v
	}).(StorageSourceManifestResponsePtrOutput)
}

// Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceManifestResponseOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceManifestResponse) string { return v.Bucket }).(pulumi.StringOutput)
}

// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceManifestResponseOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceManifestResponse) string { return v.Generation }).(pulumi.StringOutput)
}

// Google Cloud Storage object containing the source manifest. This object must be a JSON file.
func (o StorageSourceManifestResponseOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceManifestResponse) string { return v.Object }).(pulumi.StringOutput)
}

type StorageSourceManifestResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageSourceManifestResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSourceManifestResponse)(nil)).Elem()
}

func (o StorageSourceManifestResponsePtrOutput) ToStorageSourceManifestResponsePtrOutput() StorageSourceManifestResponsePtrOutput {
	return o
}

func (o StorageSourceManifestResponsePtrOutput) ToStorageSourceManifestResponsePtrOutputWithContext(ctx context.Context) StorageSourceManifestResponsePtrOutput {
	return o
}

func (o StorageSourceManifestResponsePtrOutput) Elem() StorageSourceManifestResponseOutput {
	return o.ApplyT(func(v *StorageSourceManifestResponse) StorageSourceManifestResponse { return *v }).(StorageSourceManifestResponseOutput)
}

// Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceManifestResponsePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceManifestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceManifestResponsePtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceManifestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Generation
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing the source manifest. This object must be a JSON file.
func (o StorageSourceManifestResponsePtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceManifestResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Object
	}).(pulumi.StringPtrOutput)
}

// Location of the source in an archive file in Google Cloud Storage.
type StorageSourceResponse struct {
	// Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket string `pulumi:"bucket"`
	// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation string `pulumi:"generation"`
	// Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.
	Object string `pulumi:"object"`
}

// StorageSourceResponseInput is an input type that accepts StorageSourceResponseArgs and StorageSourceResponseOutput values.
// You can construct a concrete instance of `StorageSourceResponseInput` via:
//
//          StorageSourceResponseArgs{...}
type StorageSourceResponseInput interface {
	pulumi.Input

	ToStorageSourceResponseOutput() StorageSourceResponseOutput
	ToStorageSourceResponseOutputWithContext(context.Context) StorageSourceResponseOutput
}

// Location of the source in an archive file in Google Cloud Storage.
type StorageSourceResponseArgs struct {
	// Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation pulumi.StringInput `pulumi:"generation"`
	// Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.
	Object pulumi.StringInput `pulumi:"object"`
}

func (StorageSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceResponse)(nil)).Elem()
}

func (i StorageSourceResponseArgs) ToStorageSourceResponseOutput() StorageSourceResponseOutput {
	return i.ToStorageSourceResponseOutputWithContext(context.Background())
}

func (i StorageSourceResponseArgs) ToStorageSourceResponseOutputWithContext(ctx context.Context) StorageSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceResponseOutput)
}

func (i StorageSourceResponseArgs) ToStorageSourceResponsePtrOutput() StorageSourceResponsePtrOutput {
	return i.ToStorageSourceResponsePtrOutputWithContext(context.Background())
}

func (i StorageSourceResponseArgs) ToStorageSourceResponsePtrOutputWithContext(ctx context.Context) StorageSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceResponseOutput).ToStorageSourceResponsePtrOutputWithContext(ctx)
}

// StorageSourceResponsePtrInput is an input type that accepts StorageSourceResponseArgs, StorageSourceResponsePtr and StorageSourceResponsePtrOutput values.
// You can construct a concrete instance of `StorageSourceResponsePtrInput` via:
//
//          StorageSourceResponseArgs{...}
//
//  or:
//
//          nil
type StorageSourceResponsePtrInput interface {
	pulumi.Input

	ToStorageSourceResponsePtrOutput() StorageSourceResponsePtrOutput
	ToStorageSourceResponsePtrOutputWithContext(context.Context) StorageSourceResponsePtrOutput
}

type storageSourceResponsePtrType StorageSourceResponseArgs

func StorageSourceResponsePtr(v *StorageSourceResponseArgs) StorageSourceResponsePtrInput {
	return (*storageSourceResponsePtrType)(v)
}

func (*storageSourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSourceResponse)(nil)).Elem()
}

func (i *storageSourceResponsePtrType) ToStorageSourceResponsePtrOutput() StorageSourceResponsePtrOutput {
	return i.ToStorageSourceResponsePtrOutputWithContext(context.Background())
}

func (i *storageSourceResponsePtrType) ToStorageSourceResponsePtrOutputWithContext(ctx context.Context) StorageSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceResponsePtrOutput)
}

// Location of the source in an archive file in Google Cloud Storage.
type StorageSourceResponseOutput struct{ *pulumi.OutputState }

func (StorageSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceResponse)(nil)).Elem()
}

func (o StorageSourceResponseOutput) ToStorageSourceResponseOutput() StorageSourceResponseOutput {
	return o
}

func (o StorageSourceResponseOutput) ToStorageSourceResponseOutputWithContext(ctx context.Context) StorageSourceResponseOutput {
	return o
}

func (o StorageSourceResponseOutput) ToStorageSourceResponsePtrOutput() StorageSourceResponsePtrOutput {
	return o.ToStorageSourceResponsePtrOutputWithContext(context.Background())
}

func (o StorageSourceResponseOutput) ToStorageSourceResponsePtrOutputWithContext(ctx context.Context) StorageSourceResponsePtrOutput {
	return o.ApplyT(func(v StorageSourceResponse) *StorageSourceResponse {
		return &v
	}).(StorageSourceResponsePtrOutput)
}

// Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceResponseOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceResponse) string { return v.Bucket }).(pulumi.StringOutput)
}

// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceResponseOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceResponse) string { return v.Generation }).(pulumi.StringOutput)
}

// Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.
func (o StorageSourceResponseOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceResponse) string { return v.Object }).(pulumi.StringOutput)
}

type StorageSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSourceResponse)(nil)).Elem()
}

func (o StorageSourceResponsePtrOutput) ToStorageSourceResponsePtrOutput() StorageSourceResponsePtrOutput {
	return o
}

func (o StorageSourceResponsePtrOutput) ToStorageSourceResponsePtrOutputWithContext(ctx context.Context) StorageSourceResponsePtrOutput {
	return o
}

func (o StorageSourceResponsePtrOutput) Elem() StorageSourceResponseOutput {
	return o.ApplyT(func(v *StorageSourceResponse) StorageSourceResponse { return *v }).(StorageSourceResponseOutput)
}

// Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceResponsePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceResponsePtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Generation
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.
func (o StorageSourceResponsePtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Object
	}).(pulumi.StringPtrOutput)
}

// Start and end times for a build execution phase.
type TimeSpanResponse struct {
	// End of time span.
	EndTime string `pulumi:"endTime"`
	// Start of time span.
	StartTime string `pulumi:"startTime"`
}

// TimeSpanResponseInput is an input type that accepts TimeSpanResponseArgs and TimeSpanResponseOutput values.
// You can construct a concrete instance of `TimeSpanResponseInput` via:
//
//          TimeSpanResponseArgs{...}
type TimeSpanResponseInput interface {
	pulumi.Input

	ToTimeSpanResponseOutput() TimeSpanResponseOutput
	ToTimeSpanResponseOutputWithContext(context.Context) TimeSpanResponseOutput
}

// Start and end times for a build execution phase.
type TimeSpanResponseArgs struct {
	// End of time span.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Start of time span.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (TimeSpanResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeSpanResponse)(nil)).Elem()
}

func (i TimeSpanResponseArgs) ToTimeSpanResponseOutput() TimeSpanResponseOutput {
	return i.ToTimeSpanResponseOutputWithContext(context.Background())
}

func (i TimeSpanResponseArgs) ToTimeSpanResponseOutputWithContext(ctx context.Context) TimeSpanResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSpanResponseOutput)
}

func (i TimeSpanResponseArgs) ToTimeSpanResponsePtrOutput() TimeSpanResponsePtrOutput {
	return i.ToTimeSpanResponsePtrOutputWithContext(context.Background())
}

func (i TimeSpanResponseArgs) ToTimeSpanResponsePtrOutputWithContext(ctx context.Context) TimeSpanResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSpanResponseOutput).ToTimeSpanResponsePtrOutputWithContext(ctx)
}

// TimeSpanResponsePtrInput is an input type that accepts TimeSpanResponseArgs, TimeSpanResponsePtr and TimeSpanResponsePtrOutput values.
// You can construct a concrete instance of `TimeSpanResponsePtrInput` via:
//
//          TimeSpanResponseArgs{...}
//
//  or:
//
//          nil
type TimeSpanResponsePtrInput interface {
	pulumi.Input

	ToTimeSpanResponsePtrOutput() TimeSpanResponsePtrOutput
	ToTimeSpanResponsePtrOutputWithContext(context.Context) TimeSpanResponsePtrOutput
}

type timeSpanResponsePtrType TimeSpanResponseArgs

func TimeSpanResponsePtr(v *TimeSpanResponseArgs) TimeSpanResponsePtrInput {
	return (*timeSpanResponsePtrType)(v)
}

func (*timeSpanResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeSpanResponse)(nil)).Elem()
}

func (i *timeSpanResponsePtrType) ToTimeSpanResponsePtrOutput() TimeSpanResponsePtrOutput {
	return i.ToTimeSpanResponsePtrOutputWithContext(context.Background())
}

func (i *timeSpanResponsePtrType) ToTimeSpanResponsePtrOutputWithContext(ctx context.Context) TimeSpanResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSpanResponsePtrOutput)
}

// Start and end times for a build execution phase.
type TimeSpanResponseOutput struct{ *pulumi.OutputState }

func (TimeSpanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeSpanResponse)(nil)).Elem()
}

func (o TimeSpanResponseOutput) ToTimeSpanResponseOutput() TimeSpanResponseOutput {
	return o
}

func (o TimeSpanResponseOutput) ToTimeSpanResponseOutputWithContext(ctx context.Context) TimeSpanResponseOutput {
	return o
}

func (o TimeSpanResponseOutput) ToTimeSpanResponsePtrOutput() TimeSpanResponsePtrOutput {
	return o.ToTimeSpanResponsePtrOutputWithContext(context.Background())
}

func (o TimeSpanResponseOutput) ToTimeSpanResponsePtrOutputWithContext(ctx context.Context) TimeSpanResponsePtrOutput {
	return o.ApplyT(func(v TimeSpanResponse) *TimeSpanResponse {
		return &v
	}).(TimeSpanResponsePtrOutput)
}

// End of time span.
func (o TimeSpanResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v TimeSpanResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Start of time span.
func (o TimeSpanResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v TimeSpanResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type TimeSpanResponsePtrOutput struct{ *pulumi.OutputState }

func (TimeSpanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeSpanResponse)(nil)).Elem()
}

func (o TimeSpanResponsePtrOutput) ToTimeSpanResponsePtrOutput() TimeSpanResponsePtrOutput {
	return o
}

func (o TimeSpanResponsePtrOutput) ToTimeSpanResponsePtrOutputWithContext(ctx context.Context) TimeSpanResponsePtrOutput {
	return o
}

func (o TimeSpanResponsePtrOutput) Elem() TimeSpanResponseOutput {
	return o.ApplyT(func(v *TimeSpanResponse) TimeSpanResponse { return *v }).(TimeSpanResponseOutput)
}

// End of time span.
func (o TimeSpanResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeSpanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Start of time span.
func (o TimeSpanResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeSpanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type Volume struct {
	// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
	Name *string `pulumi:"name"`
	// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
	Path *string `pulumi:"path"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//          VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type VolumeArgs struct {
	// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//          VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
func (o VolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
func (o VolumeOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type VolumeResponse struct {
	// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
	Name string `pulumi:"name"`
	// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
	Path string `pulumi:"path"`
}

// VolumeResponseInput is an input type that accepts VolumeResponseArgs and VolumeResponseOutput values.
// You can construct a concrete instance of `VolumeResponseInput` via:
//
//          VolumeResponseArgs{...}
type VolumeResponseInput interface {
	pulumi.Input

	ToVolumeResponseOutput() VolumeResponseOutput
	ToVolumeResponseOutputWithContext(context.Context) VolumeResponseOutput
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type VolumeResponseArgs struct {
	// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
	Name pulumi.StringInput `pulumi:"name"`
	// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
	Path pulumi.StringInput `pulumi:"path"`
}

func (VolumeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (i VolumeResponseArgs) ToVolumeResponseOutput() VolumeResponseOutput {
	return i.ToVolumeResponseOutputWithContext(context.Background())
}

func (i VolumeResponseArgs) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeResponseOutput)
}

// VolumeResponseArrayInput is an input type that accepts VolumeResponseArray and VolumeResponseArrayOutput values.
// You can construct a concrete instance of `VolumeResponseArrayInput` via:
//
//          VolumeResponseArray{ VolumeResponseArgs{...} }
type VolumeResponseArrayInput interface {
	pulumi.Input

	ToVolumeResponseArrayOutput() VolumeResponseArrayOutput
	ToVolumeResponseArrayOutputWithContext(context.Context) VolumeResponseArrayOutput
}

type VolumeResponseArray []VolumeResponseInput

func (VolumeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (i VolumeResponseArray) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return i.ToVolumeResponseArrayOutputWithContext(context.Background())
}

func (i VolumeResponseArray) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeResponseArrayOutput)
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type VolumeResponseOutput struct{ *pulumi.OutputState }

func (VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseOutput) ToVolumeResponseOutput() VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return o
}

// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
func (o VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
func (o VolumeResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Path }).(pulumi.StringOutput)
}

type VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) Index(i pulumi.IntInput) VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeResponse {
		return vs[0].([]VolumeResponse)[vs[1].(int)]
	}).(VolumeResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ArtifactObjectsOutput{})
	pulumi.RegisterOutputType(ArtifactObjectsPtrOutput{})
	pulumi.RegisterOutputType(ArtifactObjectsResponseOutput{})
	pulumi.RegisterOutputType(ArtifactObjectsResponsePtrOutput{})
	pulumi.RegisterOutputType(ArtifactsOutput{})
	pulumi.RegisterOutputType(ArtifactsPtrOutput{})
	pulumi.RegisterOutputType(ArtifactsResponseOutput{})
	pulumi.RegisterOutputType(ArtifactsResponsePtrOutput{})
	pulumi.RegisterOutputType(BuildTypeOutput{})
	pulumi.RegisterOutputType(BuildTypePtrOutput{})
	pulumi.RegisterOutputType(BuildOptionsOutput{})
	pulumi.RegisterOutputType(BuildOptionsPtrOutput{})
	pulumi.RegisterOutputType(BuildOptionsResponseOutput{})
	pulumi.RegisterOutputType(BuildOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(BuildResponseOutput{})
	pulumi.RegisterOutputType(BuildResponsePtrOutput{})
	pulumi.RegisterOutputType(BuildStepOutput{})
	pulumi.RegisterOutputType(BuildStepArrayOutput{})
	pulumi.RegisterOutputType(BuildStepResponseOutput{})
	pulumi.RegisterOutputType(BuildStepResponseArrayOutput{})
	pulumi.RegisterOutputType(BuiltImageResponseOutput{})
	pulumi.RegisterOutputType(BuiltImageResponseArrayOutput{})
	pulumi.RegisterOutputType(GitHubEventsConfigOutput{})
	pulumi.RegisterOutputType(GitHubEventsConfigPtrOutput{})
	pulumi.RegisterOutputType(GitHubEventsConfigResponseOutput{})
	pulumi.RegisterOutputType(GitHubEventsConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(InlineSecretOutput{})
	pulumi.RegisterOutputType(InlineSecretArrayOutput{})
	pulumi.RegisterOutputType(InlineSecretResponseOutput{})
	pulumi.RegisterOutputType(InlineSecretResponseArrayOutput{})
	pulumi.RegisterOutputType(PullRequestFilterOutput{})
	pulumi.RegisterOutputType(PullRequestFilterPtrOutput{})
	pulumi.RegisterOutputType(PullRequestFilterResponseOutput{})
	pulumi.RegisterOutputType(PullRequestFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(PushFilterOutput{})
	pulumi.RegisterOutputType(PushFilterPtrOutput{})
	pulumi.RegisterOutputType(PushFilterResponseOutput{})
	pulumi.RegisterOutputType(PushFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(RepoSourceOutput{})
	pulumi.RegisterOutputType(RepoSourcePtrOutput{})
	pulumi.RegisterOutputType(RepoSourceResponseOutput{})
	pulumi.RegisterOutputType(RepoSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(ResultsResponseOutput{})
	pulumi.RegisterOutputType(ResultsResponsePtrOutput{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretArrayOutput{})
	pulumi.RegisterOutputType(SecretManagerSecretOutput{})
	pulumi.RegisterOutputType(SecretManagerSecretArrayOutput{})
	pulumi.RegisterOutputType(SecretManagerSecretResponseOutput{})
	pulumi.RegisterOutputType(SecretManagerSecretResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretResponseOutput{})
	pulumi.RegisterOutputType(SecretResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretsOutput{})
	pulumi.RegisterOutputType(SecretsPtrOutput{})
	pulumi.RegisterOutputType(SecretsResponseOutput{})
	pulumi.RegisterOutputType(SecretsResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(SourceProvenanceResponseOutput{})
	pulumi.RegisterOutputType(SourceProvenanceResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
	pulumi.RegisterOutputType(SourceResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageSourceOutput{})
	pulumi.RegisterOutputType(StorageSourcePtrOutput{})
	pulumi.RegisterOutputType(StorageSourceManifestOutput{})
	pulumi.RegisterOutputType(StorageSourceManifestPtrOutput{})
	pulumi.RegisterOutputType(StorageSourceManifestResponseOutput{})
	pulumi.RegisterOutputType(StorageSourceManifestResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageSourceResponseOutput{})
	pulumi.RegisterOutputType(StorageSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(TimeSpanResponseOutput{})
	pulumi.RegisterOutputType(TimeSpanResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeResponseOutput{})
	pulumi.RegisterOutputType(VolumeResponseArrayOutput{})
}
