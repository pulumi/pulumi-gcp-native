// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a `WorkerPool` to run the builds, and returns the new worker pool. NOTE: As of now, this method returns an `Operation` that is always complete.
type WorkerPool struct {
	pulumi.CustomResourceState

	// Time at which the request to create the `WorkerPool` was received.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time at which the request to delete the `WorkerPool` was received.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network configuration for the `WorkerPool`.
	NetworkConfig NetworkConfigResponseOutput `pulumi:"networkConfig"`
	// `WorkerPool` state.
	State pulumi.StringOutput `pulumi:"state"`
	// Time at which the request to update the `WorkerPool` was received.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Worker configuration for the `WorkerPool`.
	WorkerConfig WorkerConfigResponseOutput `pulumi:"workerConfig"`
}

// NewWorkerPool registers a new resource with the given unique name, arguments, and options.
func NewWorkerPool(ctx *pulumi.Context,
	name string, args *WorkerPoolArgs, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.WorkerPoolsId == nil {
		return nil, errors.New("invalid value for required argument 'WorkerPoolsId'")
	}
	var resource WorkerPool
	err := ctx.RegisterResource("gcp-native:cloudbuild/v1beta1:WorkerPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerPool gets an existing WorkerPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerPoolState, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	var resource WorkerPool
	err := ctx.ReadResource("gcp-native:cloudbuild/v1beta1:WorkerPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerPool resources.
type workerPoolState struct {
	// Time at which the request to create the `WorkerPool` was received.
	CreateTime *string `pulumi:"createTime"`
	// Time at which the request to delete the `WorkerPool` was received.
	DeleteTime *string `pulumi:"deleteTime"`
	// The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.
	Name *string `pulumi:"name"`
	// Network configuration for the `WorkerPool`.
	NetworkConfig *NetworkConfigResponse `pulumi:"networkConfig"`
	// `WorkerPool` state.
	State *string `pulumi:"state"`
	// Time at which the request to update the `WorkerPool` was received.
	UpdateTime *string `pulumi:"updateTime"`
	// Worker configuration for the `WorkerPool`.
	WorkerConfig *WorkerConfigResponse `pulumi:"workerConfig"`
}

type WorkerPoolState struct {
	// Time at which the request to create the `WorkerPool` was received.
	CreateTime pulumi.StringPtrInput
	// Time at which the request to delete the `WorkerPool` was received.
	DeleteTime pulumi.StringPtrInput
	// The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.
	Name pulumi.StringPtrInput
	// Network configuration for the `WorkerPool`.
	NetworkConfig NetworkConfigResponsePtrInput
	// `WorkerPool` state.
	State pulumi.StringPtrInput
	// Time at which the request to update the `WorkerPool` was received.
	UpdateTime pulumi.StringPtrInput
	// Worker configuration for the `WorkerPool`.
	WorkerConfig WorkerConfigResponsePtrInput
}

func (WorkerPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolState)(nil)).Elem()
}

type workerPoolArgs struct {
	LocationsId string `pulumi:"locationsId"`
	// Network configuration for the `WorkerPool`.
	NetworkConfig *NetworkConfig `pulumi:"networkConfig"`
	ProjectsId    string         `pulumi:"projectsId"`
	// Worker configuration for the `WorkerPool`.
	WorkerConfig  *WorkerConfig `pulumi:"workerConfig"`
	WorkerPoolsId string        `pulumi:"workerPoolsId"`
}

// The set of arguments for constructing a WorkerPool resource.
type WorkerPoolArgs struct {
	LocationsId pulumi.StringInput
	// Network configuration for the `WorkerPool`.
	NetworkConfig NetworkConfigPtrInput
	ProjectsId    pulumi.StringInput
	// Worker configuration for the `WorkerPool`.
	WorkerConfig  WorkerConfigPtrInput
	WorkerPoolsId pulumi.StringInput
}

func (WorkerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolArgs)(nil)).Elem()
}

type WorkerPoolInput interface {
	pulumi.Input

	ToWorkerPoolOutput() WorkerPoolOutput
	ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput
}

func (*WorkerPool) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerPool)(nil))
}

func (i *WorkerPool) ToWorkerPoolOutput() WorkerPoolOutput {
	return i.ToWorkerPoolOutputWithContext(context.Background())
}

func (i *WorkerPool) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolOutput)
}

type WorkerPoolOutput struct {
	*pulumi.OutputState
}

func (WorkerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerPool)(nil))
}

func (o WorkerPoolOutput) ToWorkerPoolOutput() WorkerPoolOutput {
	return o
}

func (o WorkerPoolOutput) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WorkerPoolOutput{})
}
