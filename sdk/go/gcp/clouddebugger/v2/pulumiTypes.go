// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An alias to a repo revision.
type AliasContext struct {
	// The alias kind.
	Kind *string `pulumi:"kind"`
	// The alias name.
	Name *string `pulumi:"name"`
}

// AliasContextInput is an input type that accepts AliasContextArgs and AliasContextOutput values.
// You can construct a concrete instance of `AliasContextInput` via:
//
//          AliasContextArgs{...}
type AliasContextInput interface {
	pulumi.Input

	ToAliasContextOutput() AliasContextOutput
	ToAliasContextOutputWithContext(context.Context) AliasContextOutput
}

// An alias to a repo revision.
type AliasContextArgs struct {
	// The alias kind.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The alias name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AliasContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContext)(nil)).Elem()
}

func (i AliasContextArgs) ToAliasContextOutput() AliasContextOutput {
	return i.ToAliasContextOutputWithContext(context.Background())
}

func (i AliasContextArgs) ToAliasContextOutputWithContext(ctx context.Context) AliasContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextOutput)
}

func (i AliasContextArgs) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return i.ToAliasContextPtrOutputWithContext(context.Background())
}

func (i AliasContextArgs) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextOutput).ToAliasContextPtrOutputWithContext(ctx)
}

// AliasContextPtrInput is an input type that accepts AliasContextArgs, AliasContextPtr and AliasContextPtrOutput values.
// You can construct a concrete instance of `AliasContextPtrInput` via:
//
//          AliasContextArgs{...}
//
//  or:
//
//          nil
type AliasContextPtrInput interface {
	pulumi.Input

	ToAliasContextPtrOutput() AliasContextPtrOutput
	ToAliasContextPtrOutputWithContext(context.Context) AliasContextPtrOutput
}

type aliasContextPtrType AliasContextArgs

func AliasContextPtr(v *AliasContextArgs) AliasContextPtrInput {
	return (*aliasContextPtrType)(v)
}

func (*aliasContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasContext)(nil)).Elem()
}

func (i *aliasContextPtrType) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return i.ToAliasContextPtrOutputWithContext(context.Background())
}

func (i *aliasContextPtrType) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasContextPtrOutput)
}

// An alias to a repo revision.
type AliasContextOutput struct{ *pulumi.OutputState }

func (AliasContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasContext)(nil)).Elem()
}

func (o AliasContextOutput) ToAliasContextOutput() AliasContextOutput {
	return o
}

func (o AliasContextOutput) ToAliasContextOutputWithContext(ctx context.Context) AliasContextOutput {
	return o
}

func (o AliasContextOutput) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return o.ToAliasContextPtrOutputWithContext(context.Background())
}

func (o AliasContextOutput) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return o.ApplyT(func(v AliasContext) *AliasContext {
		return &v
	}).(AliasContextPtrOutput)
}

// The alias kind.
func (o AliasContextOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasContext) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The alias name.
func (o AliasContextOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasContext) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AliasContextPtrOutput struct{ *pulumi.OutputState }

func (AliasContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasContext)(nil)).Elem()
}

func (o AliasContextPtrOutput) ToAliasContextPtrOutput() AliasContextPtrOutput {
	return o
}

func (o AliasContextPtrOutput) ToAliasContextPtrOutputWithContext(ctx context.Context) AliasContextPtrOutput {
	return o
}

func (o AliasContextPtrOutput) Elem() AliasContextOutput {
	return o.ApplyT(func(v *AliasContext) AliasContext { return *v }).(AliasContextOutput)
}

// The alias kind.
func (o AliasContextPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasContext) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The alias name.
func (o AliasContextPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasContext) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform).
type CloudRepoSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *AliasContext `pulumi:"aliasContext"`
	// The name of an alias (branch, tag, etc.).
	AliasName *string `pulumi:"aliasName"`
	// The ID of the repo.
	RepoId *RepoId `pulumi:"repoId"`
	// A revision ID.
	RevisionId *string `pulumi:"revisionId"`
}

// CloudRepoSourceContextInput is an input type that accepts CloudRepoSourceContextArgs and CloudRepoSourceContextOutput values.
// You can construct a concrete instance of `CloudRepoSourceContextInput` via:
//
//          CloudRepoSourceContextArgs{...}
type CloudRepoSourceContextInput interface {
	pulumi.Input

	ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput
	ToCloudRepoSourceContextOutputWithContext(context.Context) CloudRepoSourceContextOutput
}

// A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform).
type CloudRepoSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextPtrInput `pulumi:"aliasContext"`
	// The name of an alias (branch, tag, etc.).
	AliasName pulumi.StringPtrInput `pulumi:"aliasName"`
	// The ID of the repo.
	RepoId RepoIdPtrInput `pulumi:"repoId"`
	// A revision ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (CloudRepoSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRepoSourceContext)(nil)).Elem()
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput {
	return i.ToCloudRepoSourceContextOutputWithContext(context.Background())
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextOutputWithContext(ctx context.Context) CloudRepoSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextOutput)
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return i.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i CloudRepoSourceContextArgs) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextOutput).ToCloudRepoSourceContextPtrOutputWithContext(ctx)
}

// CloudRepoSourceContextPtrInput is an input type that accepts CloudRepoSourceContextArgs, CloudRepoSourceContextPtr and CloudRepoSourceContextPtrOutput values.
// You can construct a concrete instance of `CloudRepoSourceContextPtrInput` via:
//
//          CloudRepoSourceContextArgs{...}
//
//  or:
//
//          nil
type CloudRepoSourceContextPtrInput interface {
	pulumi.Input

	ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput
	ToCloudRepoSourceContextPtrOutputWithContext(context.Context) CloudRepoSourceContextPtrOutput
}

type cloudRepoSourceContextPtrType CloudRepoSourceContextArgs

func CloudRepoSourceContextPtr(v *CloudRepoSourceContextArgs) CloudRepoSourceContextPtrInput {
	return (*cloudRepoSourceContextPtrType)(v)
}

func (*cloudRepoSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRepoSourceContext)(nil)).Elem()
}

func (i *cloudRepoSourceContextPtrType) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return i.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (i *cloudRepoSourceContextPtrType) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRepoSourceContextPtrOutput)
}

// A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform).
type CloudRepoSourceContextOutput struct{ *pulumi.OutputState }

func (CloudRepoSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRepoSourceContext)(nil)).Elem()
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextOutput() CloudRepoSourceContextOutput {
	return o
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextOutputWithContext(ctx context.Context) CloudRepoSourceContextOutput {
	return o
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return o.ToCloudRepoSourceContextPtrOutputWithContext(context.Background())
}

func (o CloudRepoSourceContextOutput) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *CloudRepoSourceContext {
		return &v
	}).(CloudRepoSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o CloudRepoSourceContextOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *AliasContext { return v.AliasContext }).(AliasContextPtrOutput)
}

// The name of an alias (branch, tag, etc.).
func (o CloudRepoSourceContextOutput) AliasName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *string { return v.AliasName }).(pulumi.StringPtrOutput)
}

// The ID of the repo.
func (o CloudRepoSourceContextOutput) RepoId() RepoIdPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *RepoId { return v.RepoId }).(RepoIdPtrOutput)
}

// A revision ID.
func (o CloudRepoSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRepoSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type CloudRepoSourceContextPtrOutput struct{ *pulumi.OutputState }

func (CloudRepoSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRepoSourceContext)(nil)).Elem()
}

func (o CloudRepoSourceContextPtrOutput) ToCloudRepoSourceContextPtrOutput() CloudRepoSourceContextPtrOutput {
	return o
}

func (o CloudRepoSourceContextPtrOutput) ToCloudRepoSourceContextPtrOutputWithContext(ctx context.Context) CloudRepoSourceContextPtrOutput {
	return o
}

func (o CloudRepoSourceContextPtrOutput) Elem() CloudRepoSourceContextOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) CloudRepoSourceContext { return *v }).(CloudRepoSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o CloudRepoSourceContextPtrOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(AliasContextPtrOutput)
}

// The name of an alias (branch, tag, etc.).
func (o CloudRepoSourceContextPtrOutput) AliasName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.AliasName
	}).(pulumi.StringPtrOutput)
}

// The ID of the repo.
func (o CloudRepoSourceContextPtrOutput) RepoId() RepoIdPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *RepoId {
		if v == nil {
			return nil
		}
		return v.RepoId
	}).(RepoIdPtrOutput)
}

// A revision ID.
func (o CloudRepoSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRepoSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed.
type CloudWorkspaceId struct {
	// The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method.
	Name *string `pulumi:"name"`
	// The ID of the repo containing the workspace.
	RepoId *RepoId `pulumi:"repoId"`
}

// CloudWorkspaceIdInput is an input type that accepts CloudWorkspaceIdArgs and CloudWorkspaceIdOutput values.
// You can construct a concrete instance of `CloudWorkspaceIdInput` via:
//
//          CloudWorkspaceIdArgs{...}
type CloudWorkspaceIdInput interface {
	pulumi.Input

	ToCloudWorkspaceIdOutput() CloudWorkspaceIdOutput
	ToCloudWorkspaceIdOutputWithContext(context.Context) CloudWorkspaceIdOutput
}

// A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed.
type CloudWorkspaceIdArgs struct {
	// The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of the repo containing the workspace.
	RepoId RepoIdPtrInput `pulumi:"repoId"`
}

func (CloudWorkspaceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudWorkspaceId)(nil)).Elem()
}

func (i CloudWorkspaceIdArgs) ToCloudWorkspaceIdOutput() CloudWorkspaceIdOutput {
	return i.ToCloudWorkspaceIdOutputWithContext(context.Background())
}

func (i CloudWorkspaceIdArgs) ToCloudWorkspaceIdOutputWithContext(ctx context.Context) CloudWorkspaceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudWorkspaceIdOutput)
}

func (i CloudWorkspaceIdArgs) ToCloudWorkspaceIdPtrOutput() CloudWorkspaceIdPtrOutput {
	return i.ToCloudWorkspaceIdPtrOutputWithContext(context.Background())
}

func (i CloudWorkspaceIdArgs) ToCloudWorkspaceIdPtrOutputWithContext(ctx context.Context) CloudWorkspaceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudWorkspaceIdOutput).ToCloudWorkspaceIdPtrOutputWithContext(ctx)
}

// CloudWorkspaceIdPtrInput is an input type that accepts CloudWorkspaceIdArgs, CloudWorkspaceIdPtr and CloudWorkspaceIdPtrOutput values.
// You can construct a concrete instance of `CloudWorkspaceIdPtrInput` via:
//
//          CloudWorkspaceIdArgs{...}
//
//  or:
//
//          nil
type CloudWorkspaceIdPtrInput interface {
	pulumi.Input

	ToCloudWorkspaceIdPtrOutput() CloudWorkspaceIdPtrOutput
	ToCloudWorkspaceIdPtrOutputWithContext(context.Context) CloudWorkspaceIdPtrOutput
}

type cloudWorkspaceIdPtrType CloudWorkspaceIdArgs

func CloudWorkspaceIdPtr(v *CloudWorkspaceIdArgs) CloudWorkspaceIdPtrInput {
	return (*cloudWorkspaceIdPtrType)(v)
}

func (*cloudWorkspaceIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudWorkspaceId)(nil)).Elem()
}

func (i *cloudWorkspaceIdPtrType) ToCloudWorkspaceIdPtrOutput() CloudWorkspaceIdPtrOutput {
	return i.ToCloudWorkspaceIdPtrOutputWithContext(context.Background())
}

func (i *cloudWorkspaceIdPtrType) ToCloudWorkspaceIdPtrOutputWithContext(ctx context.Context) CloudWorkspaceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudWorkspaceIdPtrOutput)
}

// A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed.
type CloudWorkspaceIdOutput struct{ *pulumi.OutputState }

func (CloudWorkspaceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudWorkspaceId)(nil)).Elem()
}

func (o CloudWorkspaceIdOutput) ToCloudWorkspaceIdOutput() CloudWorkspaceIdOutput {
	return o
}

func (o CloudWorkspaceIdOutput) ToCloudWorkspaceIdOutputWithContext(ctx context.Context) CloudWorkspaceIdOutput {
	return o
}

func (o CloudWorkspaceIdOutput) ToCloudWorkspaceIdPtrOutput() CloudWorkspaceIdPtrOutput {
	return o.ToCloudWorkspaceIdPtrOutputWithContext(context.Background())
}

func (o CloudWorkspaceIdOutput) ToCloudWorkspaceIdPtrOutputWithContext(ctx context.Context) CloudWorkspaceIdPtrOutput {
	return o.ApplyT(func(v CloudWorkspaceId) *CloudWorkspaceId {
		return &v
	}).(CloudWorkspaceIdPtrOutput)
}

// The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method.
func (o CloudWorkspaceIdOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudWorkspaceId) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ID of the repo containing the workspace.
func (o CloudWorkspaceIdOutput) RepoId() RepoIdPtrOutput {
	return o.ApplyT(func(v CloudWorkspaceId) *RepoId { return v.RepoId }).(RepoIdPtrOutput)
}

type CloudWorkspaceIdPtrOutput struct{ *pulumi.OutputState }

func (CloudWorkspaceIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudWorkspaceId)(nil)).Elem()
}

func (o CloudWorkspaceIdPtrOutput) ToCloudWorkspaceIdPtrOutput() CloudWorkspaceIdPtrOutput {
	return o
}

func (o CloudWorkspaceIdPtrOutput) ToCloudWorkspaceIdPtrOutputWithContext(ctx context.Context) CloudWorkspaceIdPtrOutput {
	return o
}

func (o CloudWorkspaceIdPtrOutput) Elem() CloudWorkspaceIdOutput {
	return o.ApplyT(func(v *CloudWorkspaceId) CloudWorkspaceId { return *v }).(CloudWorkspaceIdOutput)
}

// The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method.
func (o CloudWorkspaceIdPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudWorkspaceId) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The ID of the repo containing the workspace.
func (o CloudWorkspaceIdPtrOutput) RepoId() RepoIdPtrOutput {
	return o.ApplyT(func(v *CloudWorkspaceId) *RepoId {
		if v == nil {
			return nil
		}
		return v.RepoId
	}).(RepoIdPtrOutput)
}

// A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
type CloudWorkspaceSourceContext struct {
	// The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// The ID of the workspace.
	WorkspaceId *CloudWorkspaceId `pulumi:"workspaceId"`
}

// CloudWorkspaceSourceContextInput is an input type that accepts CloudWorkspaceSourceContextArgs and CloudWorkspaceSourceContextOutput values.
// You can construct a concrete instance of `CloudWorkspaceSourceContextInput` via:
//
//          CloudWorkspaceSourceContextArgs{...}
type CloudWorkspaceSourceContextInput interface {
	pulumi.Input

	ToCloudWorkspaceSourceContextOutput() CloudWorkspaceSourceContextOutput
	ToCloudWorkspaceSourceContextOutputWithContext(context.Context) CloudWorkspaceSourceContextOutput
}

// A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
type CloudWorkspaceSourceContextArgs struct {
	// The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// The ID of the workspace.
	WorkspaceId CloudWorkspaceIdPtrInput `pulumi:"workspaceId"`
}

func (CloudWorkspaceSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudWorkspaceSourceContext)(nil)).Elem()
}

func (i CloudWorkspaceSourceContextArgs) ToCloudWorkspaceSourceContextOutput() CloudWorkspaceSourceContextOutput {
	return i.ToCloudWorkspaceSourceContextOutputWithContext(context.Background())
}

func (i CloudWorkspaceSourceContextArgs) ToCloudWorkspaceSourceContextOutputWithContext(ctx context.Context) CloudWorkspaceSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudWorkspaceSourceContextOutput)
}

func (i CloudWorkspaceSourceContextArgs) ToCloudWorkspaceSourceContextPtrOutput() CloudWorkspaceSourceContextPtrOutput {
	return i.ToCloudWorkspaceSourceContextPtrOutputWithContext(context.Background())
}

func (i CloudWorkspaceSourceContextArgs) ToCloudWorkspaceSourceContextPtrOutputWithContext(ctx context.Context) CloudWorkspaceSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudWorkspaceSourceContextOutput).ToCloudWorkspaceSourceContextPtrOutputWithContext(ctx)
}

// CloudWorkspaceSourceContextPtrInput is an input type that accepts CloudWorkspaceSourceContextArgs, CloudWorkspaceSourceContextPtr and CloudWorkspaceSourceContextPtrOutput values.
// You can construct a concrete instance of `CloudWorkspaceSourceContextPtrInput` via:
//
//          CloudWorkspaceSourceContextArgs{...}
//
//  or:
//
//          nil
type CloudWorkspaceSourceContextPtrInput interface {
	pulumi.Input

	ToCloudWorkspaceSourceContextPtrOutput() CloudWorkspaceSourceContextPtrOutput
	ToCloudWorkspaceSourceContextPtrOutputWithContext(context.Context) CloudWorkspaceSourceContextPtrOutput
}

type cloudWorkspaceSourceContextPtrType CloudWorkspaceSourceContextArgs

func CloudWorkspaceSourceContextPtr(v *CloudWorkspaceSourceContextArgs) CloudWorkspaceSourceContextPtrInput {
	return (*cloudWorkspaceSourceContextPtrType)(v)
}

func (*cloudWorkspaceSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudWorkspaceSourceContext)(nil)).Elem()
}

func (i *cloudWorkspaceSourceContextPtrType) ToCloudWorkspaceSourceContextPtrOutput() CloudWorkspaceSourceContextPtrOutput {
	return i.ToCloudWorkspaceSourceContextPtrOutputWithContext(context.Background())
}

func (i *cloudWorkspaceSourceContextPtrType) ToCloudWorkspaceSourceContextPtrOutputWithContext(ctx context.Context) CloudWorkspaceSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudWorkspaceSourceContextPtrOutput)
}

// A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
type CloudWorkspaceSourceContextOutput struct{ *pulumi.OutputState }

func (CloudWorkspaceSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudWorkspaceSourceContext)(nil)).Elem()
}

func (o CloudWorkspaceSourceContextOutput) ToCloudWorkspaceSourceContextOutput() CloudWorkspaceSourceContextOutput {
	return o
}

func (o CloudWorkspaceSourceContextOutput) ToCloudWorkspaceSourceContextOutputWithContext(ctx context.Context) CloudWorkspaceSourceContextOutput {
	return o
}

func (o CloudWorkspaceSourceContextOutput) ToCloudWorkspaceSourceContextPtrOutput() CloudWorkspaceSourceContextPtrOutput {
	return o.ToCloudWorkspaceSourceContextPtrOutputWithContext(context.Background())
}

func (o CloudWorkspaceSourceContextOutput) ToCloudWorkspaceSourceContextPtrOutputWithContext(ctx context.Context) CloudWorkspaceSourceContextPtrOutput {
	return o.ApplyT(func(v CloudWorkspaceSourceContext) *CloudWorkspaceSourceContext {
		return &v
	}).(CloudWorkspaceSourceContextPtrOutput)
}

// The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot.
func (o CloudWorkspaceSourceContextOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudWorkspaceSourceContext) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// The ID of the workspace.
func (o CloudWorkspaceSourceContextOutput) WorkspaceId() CloudWorkspaceIdPtrOutput {
	return o.ApplyT(func(v CloudWorkspaceSourceContext) *CloudWorkspaceId { return v.WorkspaceId }).(CloudWorkspaceIdPtrOutput)
}

type CloudWorkspaceSourceContextPtrOutput struct{ *pulumi.OutputState }

func (CloudWorkspaceSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudWorkspaceSourceContext)(nil)).Elem()
}

func (o CloudWorkspaceSourceContextPtrOutput) ToCloudWorkspaceSourceContextPtrOutput() CloudWorkspaceSourceContextPtrOutput {
	return o
}

func (o CloudWorkspaceSourceContextPtrOutput) ToCloudWorkspaceSourceContextPtrOutputWithContext(ctx context.Context) CloudWorkspaceSourceContextPtrOutput {
	return o
}

func (o CloudWorkspaceSourceContextPtrOutput) Elem() CloudWorkspaceSourceContextOutput {
	return o.ApplyT(func(v *CloudWorkspaceSourceContext) CloudWorkspaceSourceContext { return *v }).(CloudWorkspaceSourceContextOutput)
}

// The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot.
func (o CloudWorkspaceSourceContextPtrOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudWorkspaceSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotId
	}).(pulumi.StringPtrOutput)
}

// The ID of the workspace.
func (o CloudWorkspaceSourceContextPtrOutput) WorkspaceId() CloudWorkspaceIdPtrOutput {
	return o.ApplyT(func(v *CloudWorkspaceSourceContext) *CloudWorkspaceId {
		if v == nil {
			return nil
		}
		return v.WorkspaceId
	}).(CloudWorkspaceIdPtrOutput)
}

// Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.
type Debuggee struct {
	// Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).
	AgentVersion *string `pulumi:"agentVersion"`
	// Used when setting breakpoint canary for this debuggee.
	CanaryMode *string `pulumi:"canaryMode"`
	// Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.
	Description *string `pulumi:"description"`
	// References to the locations and revisions of the source code used in the deployed application.
	ExtSourceContexts []ExtendedSourceContext `pulumi:"extSourceContexts"`
	// Unique identifier for the debuggee generated by the controller service.
	Id *string `pulumi:"id"`
	// If set to `true`, indicates that the agent should disable itself and detach from the debuggee.
	IsDisabled *bool `pulumi:"isDisabled"`
	// If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.
	IsInactive *bool `pulumi:"isInactive"`
	// A set of custom debuggee properties, populated by the agent, to be displayed to the user.
	Labels map[string]string `pulumi:"labels"`
	// Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.
	Project *string `pulumi:"project"`
	// References to the locations and revisions of the source code used in the deployed application.
	SourceContexts []SourceContext `pulumi:"sourceContexts"`
	// Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status.
	Status *StatusMessage `pulumi:"status"`
	// Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.
	Uniquifier *string `pulumi:"uniquifier"`
}

// DebuggeeInput is an input type that accepts DebuggeeArgs and DebuggeeOutput values.
// You can construct a concrete instance of `DebuggeeInput` via:
//
//          DebuggeeArgs{...}
type DebuggeeInput interface {
	pulumi.Input

	ToDebuggeeOutput() DebuggeeOutput
	ToDebuggeeOutputWithContext(context.Context) DebuggeeOutput
}

// Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.
type DebuggeeArgs struct {
	// Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).
	AgentVersion pulumi.StringPtrInput `pulumi:"agentVersion"`
	// Used when setting breakpoint canary for this debuggee.
	CanaryMode pulumi.StringPtrInput `pulumi:"canaryMode"`
	// Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// References to the locations and revisions of the source code used in the deployed application.
	ExtSourceContexts ExtendedSourceContextArrayInput `pulumi:"extSourceContexts"`
	// Unique identifier for the debuggee generated by the controller service.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// If set to `true`, indicates that the agent should disable itself and detach from the debuggee.
	IsDisabled pulumi.BoolPtrInput `pulumi:"isDisabled"`
	// If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.
	IsInactive pulumi.BoolPtrInput `pulumi:"isInactive"`
	// A set of custom debuggee properties, populated by the agent, to be displayed to the user.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// References to the locations and revisions of the source code used in the deployed application.
	SourceContexts SourceContextArrayInput `pulumi:"sourceContexts"`
	// Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status.
	Status StatusMessagePtrInput `pulumi:"status"`
	// Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.
	Uniquifier pulumi.StringPtrInput `pulumi:"uniquifier"`
}

func (DebuggeeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Debuggee)(nil)).Elem()
}

func (i DebuggeeArgs) ToDebuggeeOutput() DebuggeeOutput {
	return i.ToDebuggeeOutputWithContext(context.Background())
}

func (i DebuggeeArgs) ToDebuggeeOutputWithContext(ctx context.Context) DebuggeeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DebuggeeOutput)
}

func (i DebuggeeArgs) ToDebuggeePtrOutput() DebuggeePtrOutput {
	return i.ToDebuggeePtrOutputWithContext(context.Background())
}

func (i DebuggeeArgs) ToDebuggeePtrOutputWithContext(ctx context.Context) DebuggeePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DebuggeeOutput).ToDebuggeePtrOutputWithContext(ctx)
}

// DebuggeePtrInput is an input type that accepts DebuggeeArgs, DebuggeePtr and DebuggeePtrOutput values.
// You can construct a concrete instance of `DebuggeePtrInput` via:
//
//          DebuggeeArgs{...}
//
//  or:
//
//          nil
type DebuggeePtrInput interface {
	pulumi.Input

	ToDebuggeePtrOutput() DebuggeePtrOutput
	ToDebuggeePtrOutputWithContext(context.Context) DebuggeePtrOutput
}

type debuggeePtrType DebuggeeArgs

func DebuggeePtr(v *DebuggeeArgs) DebuggeePtrInput {
	return (*debuggeePtrType)(v)
}

func (*debuggeePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Debuggee)(nil)).Elem()
}

func (i *debuggeePtrType) ToDebuggeePtrOutput() DebuggeePtrOutput {
	return i.ToDebuggeePtrOutputWithContext(context.Background())
}

func (i *debuggeePtrType) ToDebuggeePtrOutputWithContext(ctx context.Context) DebuggeePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DebuggeePtrOutput)
}

// Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.
type DebuggeeOutput struct{ *pulumi.OutputState }

func (DebuggeeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Debuggee)(nil)).Elem()
}

func (o DebuggeeOutput) ToDebuggeeOutput() DebuggeeOutput {
	return o
}

func (o DebuggeeOutput) ToDebuggeeOutputWithContext(ctx context.Context) DebuggeeOutput {
	return o
}

func (o DebuggeeOutput) ToDebuggeePtrOutput() DebuggeePtrOutput {
	return o.ToDebuggeePtrOutputWithContext(context.Background())
}

func (o DebuggeeOutput) ToDebuggeePtrOutputWithContext(ctx context.Context) DebuggeePtrOutput {
	return o.ApplyT(func(v Debuggee) *Debuggee {
		return &v
	}).(DebuggeePtrOutput)
}

// Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).
func (o DebuggeeOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Debuggee) *string { return v.AgentVersion }).(pulumi.StringPtrOutput)
}

// Used when setting breakpoint canary for this debuggee.
func (o DebuggeeOutput) CanaryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Debuggee) *string { return v.CanaryMode }).(pulumi.StringPtrOutput)
}

// Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.
func (o DebuggeeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Debuggee) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// References to the locations and revisions of the source code used in the deployed application.
func (o DebuggeeOutput) ExtSourceContexts() ExtendedSourceContextArrayOutput {
	return o.ApplyT(func(v Debuggee) []ExtendedSourceContext { return v.ExtSourceContexts }).(ExtendedSourceContextArrayOutput)
}

// Unique identifier for the debuggee generated by the controller service.
func (o DebuggeeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Debuggee) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// If set to `true`, indicates that the agent should disable itself and detach from the debuggee.
func (o DebuggeeOutput) IsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Debuggee) *bool { return v.IsDisabled }).(pulumi.BoolPtrOutput)
}

// If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.
func (o DebuggeeOutput) IsInactive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Debuggee) *bool { return v.IsInactive }).(pulumi.BoolPtrOutput)
}

// A set of custom debuggee properties, populated by the agent, to be displayed to the user.
func (o DebuggeeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v Debuggee) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.
func (o DebuggeeOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Debuggee) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// References to the locations and revisions of the source code used in the deployed application.
func (o DebuggeeOutput) SourceContexts() SourceContextArrayOutput {
	return o.ApplyT(func(v Debuggee) []SourceContext { return v.SourceContexts }).(SourceContextArrayOutput)
}

// Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status.
func (o DebuggeeOutput) Status() StatusMessagePtrOutput {
	return o.ApplyT(func(v Debuggee) *StatusMessage { return v.Status }).(StatusMessagePtrOutput)
}

// Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.
func (o DebuggeeOutput) Uniquifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Debuggee) *string { return v.Uniquifier }).(pulumi.StringPtrOutput)
}

type DebuggeePtrOutput struct{ *pulumi.OutputState }

func (DebuggeePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Debuggee)(nil)).Elem()
}

func (o DebuggeePtrOutput) ToDebuggeePtrOutput() DebuggeePtrOutput {
	return o
}

func (o DebuggeePtrOutput) ToDebuggeePtrOutputWithContext(ctx context.Context) DebuggeePtrOutput {
	return o
}

func (o DebuggeePtrOutput) Elem() DebuggeeOutput {
	return o.ApplyT(func(v *Debuggee) Debuggee { return *v }).(DebuggeeOutput)
}

// Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).
func (o DebuggeePtrOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Debuggee) *string {
		if v == nil {
			return nil
		}
		return v.AgentVersion
	}).(pulumi.StringPtrOutput)
}

// Used when setting breakpoint canary for this debuggee.
func (o DebuggeePtrOutput) CanaryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Debuggee) *string {
		if v == nil {
			return nil
		}
		return v.CanaryMode
	}).(pulumi.StringPtrOutput)
}

// Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.
func (o DebuggeePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Debuggee) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// References to the locations and revisions of the source code used in the deployed application.
func (o DebuggeePtrOutput) ExtSourceContexts() ExtendedSourceContextArrayOutput {
	return o.ApplyT(func(v *Debuggee) []ExtendedSourceContext {
		if v == nil {
			return nil
		}
		return v.ExtSourceContexts
	}).(ExtendedSourceContextArrayOutput)
}

// Unique identifier for the debuggee generated by the controller service.
func (o DebuggeePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Debuggee) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// If set to `true`, indicates that the agent should disable itself and detach from the debuggee.
func (o DebuggeePtrOutput) IsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Debuggee) *bool {
		if v == nil {
			return nil
		}
		return v.IsDisabled
	}).(pulumi.BoolPtrOutput)
}

// If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.
func (o DebuggeePtrOutput) IsInactive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Debuggee) *bool {
		if v == nil {
			return nil
		}
		return v.IsInactive
	}).(pulumi.BoolPtrOutput)
}

// A set of custom debuggee properties, populated by the agent, to be displayed to the user.
func (o DebuggeePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Debuggee) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.
func (o DebuggeePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Debuggee) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// References to the locations and revisions of the source code used in the deployed application.
func (o DebuggeePtrOutput) SourceContexts() SourceContextArrayOutput {
	return o.ApplyT(func(v *Debuggee) []SourceContext {
		if v == nil {
			return nil
		}
		return v.SourceContexts
	}).(SourceContextArrayOutput)
}

// Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status.
func (o DebuggeePtrOutput) Status() StatusMessagePtrOutput {
	return o.ApplyT(func(v *Debuggee) *StatusMessage {
		if v == nil {
			return nil
		}
		return v.Status
	}).(StatusMessagePtrOutput)
}

// Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.
func (o DebuggeePtrOutput) Uniquifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Debuggee) *string {
		if v == nil {
			return nil
		}
		return v.Uniquifier
	}).(pulumi.StringPtrOutput)
}

// An ExtendedSourceContext is a SourceContext combined with additional details describing the context.
type ExtendedSourceContext struct {
	// Any source context.
	Context *SourceContext `pulumi:"context"`
	// Labels with user defined metadata.
	Labels map[string]string `pulumi:"labels"`
}

// ExtendedSourceContextInput is an input type that accepts ExtendedSourceContextArgs and ExtendedSourceContextOutput values.
// You can construct a concrete instance of `ExtendedSourceContextInput` via:
//
//          ExtendedSourceContextArgs{...}
type ExtendedSourceContextInput interface {
	pulumi.Input

	ToExtendedSourceContextOutput() ExtendedSourceContextOutput
	ToExtendedSourceContextOutputWithContext(context.Context) ExtendedSourceContextOutput
}

// An ExtendedSourceContext is a SourceContext combined with additional details describing the context.
type ExtendedSourceContextArgs struct {
	// Any source context.
	Context SourceContextPtrInput `pulumi:"context"`
	// Labels with user defined metadata.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (ExtendedSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedSourceContext)(nil)).Elem()
}

func (i ExtendedSourceContextArgs) ToExtendedSourceContextOutput() ExtendedSourceContextOutput {
	return i.ToExtendedSourceContextOutputWithContext(context.Background())
}

func (i ExtendedSourceContextArgs) ToExtendedSourceContextOutputWithContext(ctx context.Context) ExtendedSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedSourceContextOutput)
}

// ExtendedSourceContextArrayInput is an input type that accepts ExtendedSourceContextArray and ExtendedSourceContextArrayOutput values.
// You can construct a concrete instance of `ExtendedSourceContextArrayInput` via:
//
//          ExtendedSourceContextArray{ ExtendedSourceContextArgs{...} }
type ExtendedSourceContextArrayInput interface {
	pulumi.Input

	ToExtendedSourceContextArrayOutput() ExtendedSourceContextArrayOutput
	ToExtendedSourceContextArrayOutputWithContext(context.Context) ExtendedSourceContextArrayOutput
}

type ExtendedSourceContextArray []ExtendedSourceContextInput

func (ExtendedSourceContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtendedSourceContext)(nil)).Elem()
}

func (i ExtendedSourceContextArray) ToExtendedSourceContextArrayOutput() ExtendedSourceContextArrayOutput {
	return i.ToExtendedSourceContextArrayOutputWithContext(context.Background())
}

func (i ExtendedSourceContextArray) ToExtendedSourceContextArrayOutputWithContext(ctx context.Context) ExtendedSourceContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedSourceContextArrayOutput)
}

// An ExtendedSourceContext is a SourceContext combined with additional details describing the context.
type ExtendedSourceContextOutput struct{ *pulumi.OutputState }

func (ExtendedSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedSourceContext)(nil)).Elem()
}

func (o ExtendedSourceContextOutput) ToExtendedSourceContextOutput() ExtendedSourceContextOutput {
	return o
}

func (o ExtendedSourceContextOutput) ToExtendedSourceContextOutputWithContext(ctx context.Context) ExtendedSourceContextOutput {
	return o
}

// Any source context.
func (o ExtendedSourceContextOutput) Context() SourceContextPtrOutput {
	return o.ApplyT(func(v ExtendedSourceContext) *SourceContext { return v.Context }).(SourceContextPtrOutput)
}

// Labels with user defined metadata.
func (o ExtendedSourceContextOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExtendedSourceContext) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type ExtendedSourceContextArrayOutput struct{ *pulumi.OutputState }

func (ExtendedSourceContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtendedSourceContext)(nil)).Elem()
}

func (o ExtendedSourceContextArrayOutput) ToExtendedSourceContextArrayOutput() ExtendedSourceContextArrayOutput {
	return o
}

func (o ExtendedSourceContextArrayOutput) ToExtendedSourceContextArrayOutputWithContext(ctx context.Context) ExtendedSourceContextArrayOutput {
	return o
}

func (o ExtendedSourceContextArrayOutput) Index(i pulumi.IntInput) ExtendedSourceContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtendedSourceContext {
		return vs[0].([]ExtendedSourceContext)[vs[1].(int)]
	}).(ExtendedSourceContextOutput)
}

// Represents a message with parameters.
type FormatMessage struct {
	// Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`
	Format *string `pulumi:"format"`
	// Optional parameters to be embedded into the message.
	Parameters []string `pulumi:"parameters"`
}

// FormatMessageInput is an input type that accepts FormatMessageArgs and FormatMessageOutput values.
// You can construct a concrete instance of `FormatMessageInput` via:
//
//          FormatMessageArgs{...}
type FormatMessageInput interface {
	pulumi.Input

	ToFormatMessageOutput() FormatMessageOutput
	ToFormatMessageOutputWithContext(context.Context) FormatMessageOutput
}

// Represents a message with parameters.
type FormatMessageArgs struct {
	// Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`
	Format pulumi.StringPtrInput `pulumi:"format"`
	// Optional parameters to be embedded into the message.
	Parameters pulumi.StringArrayInput `pulumi:"parameters"`
}

func (FormatMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatMessage)(nil)).Elem()
}

func (i FormatMessageArgs) ToFormatMessageOutput() FormatMessageOutput {
	return i.ToFormatMessageOutputWithContext(context.Background())
}

func (i FormatMessageArgs) ToFormatMessageOutputWithContext(ctx context.Context) FormatMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormatMessageOutput)
}

func (i FormatMessageArgs) ToFormatMessagePtrOutput() FormatMessagePtrOutput {
	return i.ToFormatMessagePtrOutputWithContext(context.Background())
}

func (i FormatMessageArgs) ToFormatMessagePtrOutputWithContext(ctx context.Context) FormatMessagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormatMessageOutput).ToFormatMessagePtrOutputWithContext(ctx)
}

// FormatMessagePtrInput is an input type that accepts FormatMessageArgs, FormatMessagePtr and FormatMessagePtrOutput values.
// You can construct a concrete instance of `FormatMessagePtrInput` via:
//
//          FormatMessageArgs{...}
//
//  or:
//
//          nil
type FormatMessagePtrInput interface {
	pulumi.Input

	ToFormatMessagePtrOutput() FormatMessagePtrOutput
	ToFormatMessagePtrOutputWithContext(context.Context) FormatMessagePtrOutput
}

type formatMessagePtrType FormatMessageArgs

func FormatMessagePtr(v *FormatMessageArgs) FormatMessagePtrInput {
	return (*formatMessagePtrType)(v)
}

func (*formatMessagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormatMessage)(nil)).Elem()
}

func (i *formatMessagePtrType) ToFormatMessagePtrOutput() FormatMessagePtrOutput {
	return i.ToFormatMessagePtrOutputWithContext(context.Background())
}

func (i *formatMessagePtrType) ToFormatMessagePtrOutputWithContext(ctx context.Context) FormatMessagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormatMessagePtrOutput)
}

// Represents a message with parameters.
type FormatMessageOutput struct{ *pulumi.OutputState }

func (FormatMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatMessage)(nil)).Elem()
}

func (o FormatMessageOutput) ToFormatMessageOutput() FormatMessageOutput {
	return o
}

func (o FormatMessageOutput) ToFormatMessageOutputWithContext(ctx context.Context) FormatMessageOutput {
	return o
}

func (o FormatMessageOutput) ToFormatMessagePtrOutput() FormatMessagePtrOutput {
	return o.ToFormatMessagePtrOutputWithContext(context.Background())
}

func (o FormatMessageOutput) ToFormatMessagePtrOutputWithContext(ctx context.Context) FormatMessagePtrOutput {
	return o.ApplyT(func(v FormatMessage) *FormatMessage {
		return &v
	}).(FormatMessagePtrOutput)
}

// Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`
func (o FormatMessageOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormatMessage) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// Optional parameters to be embedded into the message.
func (o FormatMessageOutput) Parameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FormatMessage) []string { return v.Parameters }).(pulumi.StringArrayOutput)
}

type FormatMessagePtrOutput struct{ *pulumi.OutputState }

func (FormatMessagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormatMessage)(nil)).Elem()
}

func (o FormatMessagePtrOutput) ToFormatMessagePtrOutput() FormatMessagePtrOutput {
	return o
}

func (o FormatMessagePtrOutput) ToFormatMessagePtrOutputWithContext(ctx context.Context) FormatMessagePtrOutput {
	return o
}

func (o FormatMessagePtrOutput) Elem() FormatMessageOutput {
	return o.ApplyT(func(v *FormatMessage) FormatMessage { return *v }).(FormatMessageOutput)
}

// Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`
func (o FormatMessagePtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormatMessage) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// Optional parameters to be embedded into the message.
func (o FormatMessagePtrOutput) Parameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FormatMessage) []string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringArrayOutput)
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContext struct {
	// An alias, which may be a branch or tag.
	AliasContext *AliasContext `pulumi:"aliasContext"`
	// The name of an alias (branch, tag, etc.).
	AliasName *string `pulumi:"aliasName"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is hostURI/project.
	GerritProject *string `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri *string `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId *string `pulumi:"revisionId"`
}

// GerritSourceContextInput is an input type that accepts GerritSourceContextArgs and GerritSourceContextOutput values.
// You can construct a concrete instance of `GerritSourceContextInput` via:
//
//          GerritSourceContextArgs{...}
type GerritSourceContextInput interface {
	pulumi.Input

	ToGerritSourceContextOutput() GerritSourceContextOutput
	ToGerritSourceContextOutputWithContext(context.Context) GerritSourceContextOutput
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextArgs struct {
	// An alias, which may be a branch or tag.
	AliasContext AliasContextPtrInput `pulumi:"aliasContext"`
	// The name of an alias (branch, tag, etc.).
	AliasName pulumi.StringPtrInput `pulumi:"aliasName"`
	// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is hostURI/project.
	GerritProject pulumi.StringPtrInput `pulumi:"gerritProject"`
	// The URI of a running Gerrit instance.
	HostUri pulumi.StringPtrInput `pulumi:"hostUri"`
	// A revision (commit) ID.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
}

func (GerritSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GerritSourceContext)(nil)).Elem()
}

func (i GerritSourceContextArgs) ToGerritSourceContextOutput() GerritSourceContextOutput {
	return i.ToGerritSourceContextOutputWithContext(context.Background())
}

func (i GerritSourceContextArgs) ToGerritSourceContextOutputWithContext(ctx context.Context) GerritSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextOutput)
}

func (i GerritSourceContextArgs) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return i.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (i GerritSourceContextArgs) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextOutput).ToGerritSourceContextPtrOutputWithContext(ctx)
}

// GerritSourceContextPtrInput is an input type that accepts GerritSourceContextArgs, GerritSourceContextPtr and GerritSourceContextPtrOutput values.
// You can construct a concrete instance of `GerritSourceContextPtrInput` via:
//
//          GerritSourceContextArgs{...}
//
//  or:
//
//          nil
type GerritSourceContextPtrInput interface {
	pulumi.Input

	ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput
	ToGerritSourceContextPtrOutputWithContext(context.Context) GerritSourceContextPtrOutput
}

type gerritSourceContextPtrType GerritSourceContextArgs

func GerritSourceContextPtr(v *GerritSourceContextArgs) GerritSourceContextPtrInput {
	return (*gerritSourceContextPtrType)(v)
}

func (*gerritSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GerritSourceContext)(nil)).Elem()
}

func (i *gerritSourceContextPtrType) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return i.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (i *gerritSourceContextPtrType) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContextOutput struct{ *pulumi.OutputState }

func (GerritSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GerritSourceContext)(nil)).Elem()
}

func (o GerritSourceContextOutput) ToGerritSourceContextOutput() GerritSourceContextOutput {
	return o
}

func (o GerritSourceContextOutput) ToGerritSourceContextOutputWithContext(ctx context.Context) GerritSourceContextOutput {
	return o
}

func (o GerritSourceContextOutput) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return o.ToGerritSourceContextPtrOutputWithContext(context.Background())
}

func (o GerritSourceContextOutput) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *GerritSourceContext {
		return &v
	}).(GerritSourceContextPtrOutput)
}

// An alias, which may be a branch or tag.
func (o GerritSourceContextOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *AliasContext { return v.AliasContext }).(AliasContextPtrOutput)
}

// The name of an alias (branch, tag, etc.).
func (o GerritSourceContextOutput) AliasName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.AliasName }).(pulumi.StringPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is hostURI/project.
func (o GerritSourceContextOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.GerritProject }).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GerritSourceContextOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.HostUri }).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GerritSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GerritSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

type GerritSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GerritSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GerritSourceContext)(nil)).Elem()
}

func (o GerritSourceContextPtrOutput) ToGerritSourceContextPtrOutput() GerritSourceContextPtrOutput {
	return o
}

func (o GerritSourceContextPtrOutput) ToGerritSourceContextPtrOutputWithContext(ctx context.Context) GerritSourceContextPtrOutput {
	return o
}

func (o GerritSourceContextPtrOutput) Elem() GerritSourceContextOutput {
	return o.ApplyT(func(v *GerritSourceContext) GerritSourceContext { return *v }).(GerritSourceContextOutput)
}

// An alias, which may be a branch or tag.
func (o GerritSourceContextPtrOutput) AliasContext() AliasContextPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *AliasContext {
		if v == nil {
			return nil
		}
		return v.AliasContext
	}).(AliasContextPtrOutput)
}

// The name of an alias (branch, tag, etc.).
func (o GerritSourceContextPtrOutput) AliasName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.AliasName
	}).(pulumi.StringPtrOutput)
}

// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is hostURI/project.
func (o GerritSourceContextPtrOutput) GerritProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.GerritProject
	}).(pulumi.StringPtrOutput)
}

// The URI of a running Gerrit instance.
func (o GerritSourceContextPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.HostUri
	}).(pulumi.StringPtrOutput)
}

// A revision (commit) ID.
func (o GerritSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerritSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub).
type GitSourceContext struct {
	// Git commit hash. required.
	RevisionId *string `pulumi:"revisionId"`
	// Git repository URL.
	Url *string `pulumi:"url"`
}

// GitSourceContextInput is an input type that accepts GitSourceContextArgs and GitSourceContextOutput values.
// You can construct a concrete instance of `GitSourceContextInput` via:
//
//          GitSourceContextArgs{...}
type GitSourceContextInput interface {
	pulumi.Input

	ToGitSourceContextOutput() GitSourceContextOutput
	ToGitSourceContextOutputWithContext(context.Context) GitSourceContextOutput
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub).
type GitSourceContextArgs struct {
	// Git commit hash. required.
	RevisionId pulumi.StringPtrInput `pulumi:"revisionId"`
	// Git repository URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitSourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceContext)(nil)).Elem()
}

func (i GitSourceContextArgs) ToGitSourceContextOutput() GitSourceContextOutput {
	return i.ToGitSourceContextOutputWithContext(context.Background())
}

func (i GitSourceContextArgs) ToGitSourceContextOutputWithContext(ctx context.Context) GitSourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextOutput)
}

func (i GitSourceContextArgs) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return i.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (i GitSourceContextArgs) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextOutput).ToGitSourceContextPtrOutputWithContext(ctx)
}

// GitSourceContextPtrInput is an input type that accepts GitSourceContextArgs, GitSourceContextPtr and GitSourceContextPtrOutput values.
// You can construct a concrete instance of `GitSourceContextPtrInput` via:
//
//          GitSourceContextArgs{...}
//
//  or:
//
//          nil
type GitSourceContextPtrInput interface {
	pulumi.Input

	ToGitSourceContextPtrOutput() GitSourceContextPtrOutput
	ToGitSourceContextPtrOutputWithContext(context.Context) GitSourceContextPtrOutput
}

type gitSourceContextPtrType GitSourceContextArgs

func GitSourceContextPtr(v *GitSourceContextArgs) GitSourceContextPtrInput {
	return (*gitSourceContextPtrType)(v)
}

func (*gitSourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSourceContext)(nil)).Elem()
}

func (i *gitSourceContextPtrType) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return i.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (i *gitSourceContextPtrType) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceContextPtrOutput)
}

// A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub).
type GitSourceContextOutput struct{ *pulumi.OutputState }

func (GitSourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceContext)(nil)).Elem()
}

func (o GitSourceContextOutput) ToGitSourceContextOutput() GitSourceContextOutput {
	return o
}

func (o GitSourceContextOutput) ToGitSourceContextOutputWithContext(ctx context.Context) GitSourceContextOutput {
	return o
}

func (o GitSourceContextOutput) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return o.ToGitSourceContextPtrOutputWithContext(context.Background())
}

func (o GitSourceContextOutput) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return o.ApplyT(func(v GitSourceContext) *GitSourceContext {
		return &v
	}).(GitSourceContextPtrOutput)
}

// Git commit hash. required.
func (o GitSourceContextOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSourceContext) *string { return v.RevisionId }).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GitSourceContextOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSourceContext) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitSourceContextPtrOutput struct{ *pulumi.OutputState }

func (GitSourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSourceContext)(nil)).Elem()
}

func (o GitSourceContextPtrOutput) ToGitSourceContextPtrOutput() GitSourceContextPtrOutput {
	return o
}

func (o GitSourceContextPtrOutput) ToGitSourceContextPtrOutputWithContext(ctx context.Context) GitSourceContextPtrOutput {
	return o
}

func (o GitSourceContextPtrOutput) Elem() GitSourceContextOutput {
	return o.ApplyT(func(v *GitSourceContext) GitSourceContext { return *v }).(GitSourceContextOutput)
}

// Git commit hash. required.
func (o GitSourceContextPtrOutput) RevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.RevisionId
	}).(pulumi.StringPtrOutput)
}

// Git repository URL.
func (o GitSourceContextPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSourceContext) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project.
type ProjectRepoId struct {
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The name of the repo. Leave empty for the default repo.
	RepoName *string `pulumi:"repoName"`
}

// ProjectRepoIdInput is an input type that accepts ProjectRepoIdArgs and ProjectRepoIdOutput values.
// You can construct a concrete instance of `ProjectRepoIdInput` via:
//
//          ProjectRepoIdArgs{...}
type ProjectRepoIdInput interface {
	pulumi.Input

	ToProjectRepoIdOutput() ProjectRepoIdOutput
	ToProjectRepoIdOutputWithContext(context.Context) ProjectRepoIdOutput
}

// Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project.
type ProjectRepoIdArgs struct {
	// The ID of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The name of the repo. Leave empty for the default repo.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
}

func (ProjectRepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRepoId)(nil)).Elem()
}

func (i ProjectRepoIdArgs) ToProjectRepoIdOutput() ProjectRepoIdOutput {
	return i.ToProjectRepoIdOutputWithContext(context.Background())
}

func (i ProjectRepoIdArgs) ToProjectRepoIdOutputWithContext(ctx context.Context) ProjectRepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdOutput)
}

func (i ProjectRepoIdArgs) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return i.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i ProjectRepoIdArgs) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdOutput).ToProjectRepoIdPtrOutputWithContext(ctx)
}

// ProjectRepoIdPtrInput is an input type that accepts ProjectRepoIdArgs, ProjectRepoIdPtr and ProjectRepoIdPtrOutput values.
// You can construct a concrete instance of `ProjectRepoIdPtrInput` via:
//
//          ProjectRepoIdArgs{...}
//
//  or:
//
//          nil
type ProjectRepoIdPtrInput interface {
	pulumi.Input

	ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput
	ToProjectRepoIdPtrOutputWithContext(context.Context) ProjectRepoIdPtrOutput
}

type projectRepoIdPtrType ProjectRepoIdArgs

func ProjectRepoIdPtr(v *ProjectRepoIdArgs) ProjectRepoIdPtrInput {
	return (*projectRepoIdPtrType)(v)
}

func (*projectRepoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRepoId)(nil)).Elem()
}

func (i *projectRepoIdPtrType) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return i.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (i *projectRepoIdPtrType) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepoIdPtrOutput)
}

// Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project.
type ProjectRepoIdOutput struct{ *pulumi.OutputState }

func (ProjectRepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectRepoId)(nil)).Elem()
}

func (o ProjectRepoIdOutput) ToProjectRepoIdOutput() ProjectRepoIdOutput {
	return o
}

func (o ProjectRepoIdOutput) ToProjectRepoIdOutputWithContext(ctx context.Context) ProjectRepoIdOutput {
	return o
}

func (o ProjectRepoIdOutput) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return o.ToProjectRepoIdPtrOutputWithContext(context.Background())
}

func (o ProjectRepoIdOutput) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v ProjectRepoId) *ProjectRepoId {
		return &v
	}).(ProjectRepoIdPtrOutput)
}

// The ID of the project.
func (o ProjectRepoIdOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectRepoId) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o ProjectRepoIdOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectRepoId) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

type ProjectRepoIdPtrOutput struct{ *pulumi.OutputState }

func (ProjectRepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRepoId)(nil)).Elem()
}

func (o ProjectRepoIdPtrOutput) ToProjectRepoIdPtrOutput() ProjectRepoIdPtrOutput {
	return o
}

func (o ProjectRepoIdPtrOutput) ToProjectRepoIdPtrOutputWithContext(ctx context.Context) ProjectRepoIdPtrOutput {
	return o
}

func (o ProjectRepoIdPtrOutput) Elem() ProjectRepoIdOutput {
	return o.ApplyT(func(v *ProjectRepoId) ProjectRepoId { return *v }).(ProjectRepoIdOutput)
}

// The ID of the project.
func (o ProjectRepoIdPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// The name of the repo. Leave empty for the default repo.
func (o ProjectRepoIdPtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectRepoId) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for a cloud repo.
type RepoId struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId *ProjectRepoId `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid *string `pulumi:"uid"`
}

// RepoIdInput is an input type that accepts RepoIdArgs and RepoIdOutput values.
// You can construct a concrete instance of `RepoIdInput` via:
//
//          RepoIdArgs{...}
type RepoIdInput interface {
	pulumi.Input

	ToRepoIdOutput() RepoIdOutput
	ToRepoIdOutputWithContext(context.Context) RepoIdOutput
}

// A unique identifier for a cloud repo.
type RepoIdArgs struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId ProjectRepoIdPtrInput `pulumi:"projectRepoId"`
	// A server-assigned, globally unique identifier.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RepoIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoId)(nil)).Elem()
}

func (i RepoIdArgs) ToRepoIdOutput() RepoIdOutput {
	return i.ToRepoIdOutputWithContext(context.Background())
}

func (i RepoIdArgs) ToRepoIdOutputWithContext(ctx context.Context) RepoIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdOutput)
}

func (i RepoIdArgs) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return i.ToRepoIdPtrOutputWithContext(context.Background())
}

func (i RepoIdArgs) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdOutput).ToRepoIdPtrOutputWithContext(ctx)
}

// RepoIdPtrInput is an input type that accepts RepoIdArgs, RepoIdPtr and RepoIdPtrOutput values.
// You can construct a concrete instance of `RepoIdPtrInput` via:
//
//          RepoIdArgs{...}
//
//  or:
//
//          nil
type RepoIdPtrInput interface {
	pulumi.Input

	ToRepoIdPtrOutput() RepoIdPtrOutput
	ToRepoIdPtrOutputWithContext(context.Context) RepoIdPtrOutput
}

type repoIdPtrType RepoIdArgs

func RepoIdPtr(v *RepoIdArgs) RepoIdPtrInput {
	return (*repoIdPtrType)(v)
}

func (*repoIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoId)(nil)).Elem()
}

func (i *repoIdPtrType) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return i.ToRepoIdPtrOutputWithContext(context.Background())
}

func (i *repoIdPtrType) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoIdPtrOutput)
}

// A unique identifier for a cloud repo.
type RepoIdOutput struct{ *pulumi.OutputState }

func (RepoIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoId)(nil)).Elem()
}

func (o RepoIdOutput) ToRepoIdOutput() RepoIdOutput {
	return o
}

func (o RepoIdOutput) ToRepoIdOutputWithContext(ctx context.Context) RepoIdOutput {
	return o
}

func (o RepoIdOutput) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return o.ToRepoIdPtrOutputWithContext(context.Background())
}

func (o RepoIdOutput) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return o.ApplyT(func(v RepoId) *RepoId {
		return &v
	}).(RepoIdPtrOutput)
}

// A combination of a project ID and a repo name.
func (o RepoIdOutput) ProjectRepoId() ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v RepoId) *ProjectRepoId { return v.ProjectRepoId }).(ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o RepoIdOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoId) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RepoIdPtrOutput struct{ *pulumi.OutputState }

func (RepoIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoId)(nil)).Elem()
}

func (o RepoIdPtrOutput) ToRepoIdPtrOutput() RepoIdPtrOutput {
	return o
}

func (o RepoIdPtrOutput) ToRepoIdPtrOutputWithContext(ctx context.Context) RepoIdPtrOutput {
	return o
}

func (o RepoIdPtrOutput) Elem() RepoIdOutput {
	return o.ApplyT(func(v *RepoId) RepoId { return *v }).(RepoIdOutput)
}

// A combination of a project ID and a repo name.
func (o RepoIdPtrOutput) ProjectRepoId() ProjectRepoIdPtrOutput {
	return o.ApplyT(func(v *RepoId) *ProjectRepoId {
		if v == nil {
			return nil
		}
		return v.ProjectRepoId
	}).(ProjectRepoIdPtrOutput)
}

// A server-assigned, globally unique identifier.
func (o RepoIdPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoId) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContext struct {
	// A SourceContext referring to a revision in a cloud repo.
	CloudRepo *CloudRepoSourceContext `pulumi:"cloudRepo"`
	// A SourceContext referring to a snapshot in a cloud workspace.
	CloudWorkspace *CloudWorkspaceSourceContext `pulumi:"cloudWorkspace"`
	// A SourceContext referring to a Gerrit project.
	Gerrit *GerritSourceContext `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g. GitHub).
	Git *GitSourceContext `pulumi:"git"`
}

// SourceContextInput is an input type that accepts SourceContextArgs and SourceContextOutput values.
// You can construct a concrete instance of `SourceContextInput` via:
//
//          SourceContextArgs{...}
type SourceContextInput interface {
	pulumi.Input

	ToSourceContextOutput() SourceContextOutput
	ToSourceContextOutputWithContext(context.Context) SourceContextOutput
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextArgs struct {
	// A SourceContext referring to a revision in a cloud repo.
	CloudRepo CloudRepoSourceContextPtrInput `pulumi:"cloudRepo"`
	// A SourceContext referring to a snapshot in a cloud workspace.
	CloudWorkspace CloudWorkspaceSourceContextPtrInput `pulumi:"cloudWorkspace"`
	// A SourceContext referring to a Gerrit project.
	Gerrit GerritSourceContextPtrInput `pulumi:"gerrit"`
	// A SourceContext referring to any third party Git repo (e.g. GitHub).
	Git GitSourceContextPtrInput `pulumi:"git"`
}

func (SourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContext)(nil)).Elem()
}

func (i SourceContextArgs) ToSourceContextOutput() SourceContextOutput {
	return i.ToSourceContextOutputWithContext(context.Background())
}

func (i SourceContextArgs) ToSourceContextOutputWithContext(ctx context.Context) SourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextOutput)
}

func (i SourceContextArgs) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return i.ToSourceContextPtrOutputWithContext(context.Background())
}

func (i SourceContextArgs) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextOutput).ToSourceContextPtrOutputWithContext(ctx)
}

// SourceContextPtrInput is an input type that accepts SourceContextArgs, SourceContextPtr and SourceContextPtrOutput values.
// You can construct a concrete instance of `SourceContextPtrInput` via:
//
//          SourceContextArgs{...}
//
//  or:
//
//          nil
type SourceContextPtrInput interface {
	pulumi.Input

	ToSourceContextPtrOutput() SourceContextPtrOutput
	ToSourceContextPtrOutputWithContext(context.Context) SourceContextPtrOutput
}

type sourceContextPtrType SourceContextArgs

func SourceContextPtr(v *SourceContextArgs) SourceContextPtrInput {
	return (*sourceContextPtrType)(v)
}

func (*sourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceContext)(nil)).Elem()
}

func (i *sourceContextPtrType) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return i.ToSourceContextPtrOutputWithContext(context.Background())
}

func (i *sourceContextPtrType) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextPtrOutput)
}

// SourceContextArrayInput is an input type that accepts SourceContextArray and SourceContextArrayOutput values.
// You can construct a concrete instance of `SourceContextArrayInput` via:
//
//          SourceContextArray{ SourceContextArgs{...} }
type SourceContextArrayInput interface {
	pulumi.Input

	ToSourceContextArrayOutput() SourceContextArrayOutput
	ToSourceContextArrayOutputWithContext(context.Context) SourceContextArrayOutput
}

type SourceContextArray []SourceContextInput

func (SourceContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceContext)(nil)).Elem()
}

func (i SourceContextArray) ToSourceContextArrayOutput() SourceContextArrayOutput {
	return i.ToSourceContextArrayOutputWithContext(context.Background())
}

func (i SourceContextArray) ToSourceContextArrayOutputWithContext(ctx context.Context) SourceContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextArrayOutput)
}

// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
type SourceContextOutput struct{ *pulumi.OutputState }

func (SourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContext)(nil)).Elem()
}

func (o SourceContextOutput) ToSourceContextOutput() SourceContextOutput {
	return o
}

func (o SourceContextOutput) ToSourceContextOutputWithContext(ctx context.Context) SourceContextOutput {
	return o
}

func (o SourceContextOutput) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return o.ToSourceContextPtrOutputWithContext(context.Background())
}

func (o SourceContextOutput) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *SourceContext {
		return &v
	}).(SourceContextPtrOutput)
}

// A SourceContext referring to a revision in a cloud repo.
func (o SourceContextOutput) CloudRepo() CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *CloudRepoSourceContext { return v.CloudRepo }).(CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a snapshot in a cloud workspace.
func (o SourceContextOutput) CloudWorkspace() CloudWorkspaceSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *CloudWorkspaceSourceContext { return v.CloudWorkspace }).(CloudWorkspaceSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o SourceContextOutput) Gerrit() GerritSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *GerritSourceContext { return v.Gerrit }).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g. GitHub).
func (o SourceContextOutput) Git() GitSourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *GitSourceContext { return v.Git }).(GitSourceContextPtrOutput)
}

type SourceContextPtrOutput struct{ *pulumi.OutputState }

func (SourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceContext)(nil)).Elem()
}

func (o SourceContextPtrOutput) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return o
}

func (o SourceContextPtrOutput) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return o
}

func (o SourceContextPtrOutput) Elem() SourceContextOutput {
	return o.ApplyT(func(v *SourceContext) SourceContext { return *v }).(SourceContextOutput)
}

// A SourceContext referring to a revision in a cloud repo.
func (o SourceContextPtrOutput) CloudRepo() CloudRepoSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *CloudRepoSourceContext {
		if v == nil {
			return nil
		}
		return v.CloudRepo
	}).(CloudRepoSourceContextPtrOutput)
}

// A SourceContext referring to a snapshot in a cloud workspace.
func (o SourceContextPtrOutput) CloudWorkspace() CloudWorkspaceSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *CloudWorkspaceSourceContext {
		if v == nil {
			return nil
		}
		return v.CloudWorkspace
	}).(CloudWorkspaceSourceContextPtrOutput)
}

// A SourceContext referring to a Gerrit project.
func (o SourceContextPtrOutput) Gerrit() GerritSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *GerritSourceContext {
		if v == nil {
			return nil
		}
		return v.Gerrit
	}).(GerritSourceContextPtrOutput)
}

// A SourceContext referring to any third party Git repo (e.g. GitHub).
func (o SourceContextPtrOutput) Git() GitSourceContextPtrOutput {
	return o.ApplyT(func(v *SourceContext) *GitSourceContext {
		if v == nil {
			return nil
		}
		return v.Git
	}).(GitSourceContextPtrOutput)
}

type SourceContextArrayOutput struct{ *pulumi.OutputState }

func (SourceContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceContext)(nil)).Elem()
}

func (o SourceContextArrayOutput) ToSourceContextArrayOutput() SourceContextArrayOutput {
	return o
}

func (o SourceContextArrayOutput) ToSourceContextArrayOutputWithContext(ctx context.Context) SourceContextArrayOutput {
	return o
}

func (o SourceContextArrayOutput) Index(i pulumi.IntInput) SourceContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceContext {
		return vs[0].([]SourceContext)[vs[1].(int)]
	}).(SourceContextOutput)
}

// Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
type StatusMessage struct {
	// Status message text.
	Description *FormatMessage `pulumi:"description"`
	// Distinguishes errors from informational messages.
	IsError *bool `pulumi:"isError"`
	// Reference to which the message applies.
	RefersTo *string `pulumi:"refersTo"`
}

// StatusMessageInput is an input type that accepts StatusMessageArgs and StatusMessageOutput values.
// You can construct a concrete instance of `StatusMessageInput` via:
//
//          StatusMessageArgs{...}
type StatusMessageInput interface {
	pulumi.Input

	ToStatusMessageOutput() StatusMessageOutput
	ToStatusMessageOutputWithContext(context.Context) StatusMessageOutput
}

// Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
type StatusMessageArgs struct {
	// Status message text.
	Description FormatMessagePtrInput `pulumi:"description"`
	// Distinguishes errors from informational messages.
	IsError pulumi.BoolPtrInput `pulumi:"isError"`
	// Reference to which the message applies.
	RefersTo pulumi.StringPtrInput `pulumi:"refersTo"`
}

func (StatusMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusMessage)(nil)).Elem()
}

func (i StatusMessageArgs) ToStatusMessageOutput() StatusMessageOutput {
	return i.ToStatusMessageOutputWithContext(context.Background())
}

func (i StatusMessageArgs) ToStatusMessageOutputWithContext(ctx context.Context) StatusMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusMessageOutput)
}

func (i StatusMessageArgs) ToStatusMessagePtrOutput() StatusMessagePtrOutput {
	return i.ToStatusMessagePtrOutputWithContext(context.Background())
}

func (i StatusMessageArgs) ToStatusMessagePtrOutputWithContext(ctx context.Context) StatusMessagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusMessageOutput).ToStatusMessagePtrOutputWithContext(ctx)
}

// StatusMessagePtrInput is an input type that accepts StatusMessageArgs, StatusMessagePtr and StatusMessagePtrOutput values.
// You can construct a concrete instance of `StatusMessagePtrInput` via:
//
//          StatusMessageArgs{...}
//
//  or:
//
//          nil
type StatusMessagePtrInput interface {
	pulumi.Input

	ToStatusMessagePtrOutput() StatusMessagePtrOutput
	ToStatusMessagePtrOutputWithContext(context.Context) StatusMessagePtrOutput
}

type statusMessagePtrType StatusMessageArgs

func StatusMessagePtr(v *StatusMessageArgs) StatusMessagePtrInput {
	return (*statusMessagePtrType)(v)
}

func (*statusMessagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusMessage)(nil)).Elem()
}

func (i *statusMessagePtrType) ToStatusMessagePtrOutput() StatusMessagePtrOutput {
	return i.ToStatusMessagePtrOutputWithContext(context.Background())
}

func (i *statusMessagePtrType) ToStatusMessagePtrOutputWithContext(ctx context.Context) StatusMessagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusMessagePtrOutput)
}

// Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
type StatusMessageOutput struct{ *pulumi.OutputState }

func (StatusMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusMessage)(nil)).Elem()
}

func (o StatusMessageOutput) ToStatusMessageOutput() StatusMessageOutput {
	return o
}

func (o StatusMessageOutput) ToStatusMessageOutputWithContext(ctx context.Context) StatusMessageOutput {
	return o
}

func (o StatusMessageOutput) ToStatusMessagePtrOutput() StatusMessagePtrOutput {
	return o.ToStatusMessagePtrOutputWithContext(context.Background())
}

func (o StatusMessageOutput) ToStatusMessagePtrOutputWithContext(ctx context.Context) StatusMessagePtrOutput {
	return o.ApplyT(func(v StatusMessage) *StatusMessage {
		return &v
	}).(StatusMessagePtrOutput)
}

// Status message text.
func (o StatusMessageOutput) Description() FormatMessagePtrOutput {
	return o.ApplyT(func(v StatusMessage) *FormatMessage { return v.Description }).(FormatMessagePtrOutput)
}

// Distinguishes errors from informational messages.
func (o StatusMessageOutput) IsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StatusMessage) *bool { return v.IsError }).(pulumi.BoolPtrOutput)
}

// Reference to which the message applies.
func (o StatusMessageOutput) RefersTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusMessage) *string { return v.RefersTo }).(pulumi.StringPtrOutput)
}

type StatusMessagePtrOutput struct{ *pulumi.OutputState }

func (StatusMessagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusMessage)(nil)).Elem()
}

func (o StatusMessagePtrOutput) ToStatusMessagePtrOutput() StatusMessagePtrOutput {
	return o
}

func (o StatusMessagePtrOutput) ToStatusMessagePtrOutputWithContext(ctx context.Context) StatusMessagePtrOutput {
	return o
}

func (o StatusMessagePtrOutput) Elem() StatusMessageOutput {
	return o.ApplyT(func(v *StatusMessage) StatusMessage { return *v }).(StatusMessageOutput)
}

// Status message text.
func (o StatusMessagePtrOutput) Description() FormatMessagePtrOutput {
	return o.ApplyT(func(v *StatusMessage) *FormatMessage {
		if v == nil {
			return nil
		}
		return v.Description
	}).(FormatMessagePtrOutput)
}

// Distinguishes errors from informational messages.
func (o StatusMessagePtrOutput) IsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StatusMessage) *bool {
		if v == nil {
			return nil
		}
		return v.IsError
	}).(pulumi.BoolPtrOutput)
}

// Reference to which the message applies.
func (o StatusMessagePtrOutput) RefersTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusMessage) *string {
		if v == nil {
			return nil
		}
		return v.RefersTo
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AliasContextOutput{})
	pulumi.RegisterOutputType(AliasContextPtrOutput{})
	pulumi.RegisterOutputType(CloudRepoSourceContextOutput{})
	pulumi.RegisterOutputType(CloudRepoSourceContextPtrOutput{})
	pulumi.RegisterOutputType(CloudWorkspaceIdOutput{})
	pulumi.RegisterOutputType(CloudWorkspaceIdPtrOutput{})
	pulumi.RegisterOutputType(CloudWorkspaceSourceContextOutput{})
	pulumi.RegisterOutputType(CloudWorkspaceSourceContextPtrOutput{})
	pulumi.RegisterOutputType(DebuggeeOutput{})
	pulumi.RegisterOutputType(DebuggeePtrOutput{})
	pulumi.RegisterOutputType(ExtendedSourceContextOutput{})
	pulumi.RegisterOutputType(ExtendedSourceContextArrayOutput{})
	pulumi.RegisterOutputType(FormatMessageOutput{})
	pulumi.RegisterOutputType(FormatMessagePtrOutput{})
	pulumi.RegisterOutputType(GerritSourceContextOutput{})
	pulumi.RegisterOutputType(GerritSourceContextPtrOutput{})
	pulumi.RegisterOutputType(GitSourceContextOutput{})
	pulumi.RegisterOutputType(GitSourceContextPtrOutput{})
	pulumi.RegisterOutputType(ProjectRepoIdOutput{})
	pulumi.RegisterOutputType(ProjectRepoIdPtrOutput{})
	pulumi.RegisterOutputType(RepoIdOutput{})
	pulumi.RegisterOutputType(RepoIdPtrOutput{})
	pulumi.RegisterOutputType(SourceContextOutput{})
	pulumi.RegisterOutputType(SourceContextPtrOutput{})
	pulumi.RegisterOutputType(SourceContextArrayOutput{})
	pulumi.RegisterOutputType(StatusMessageOutput{})
	pulumi.RegisterOutputType(StatusMessagePtrOutput{})
}
