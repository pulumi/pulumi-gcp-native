// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registers the debuggee with the controller service. All agents attached to the same application must call this method with exactly the same request content to get back the same stable `debuggee_id`. Agents should call this method again whenever `google.rpc.Code.NOT_FOUND` is returned from any controller method. This protocol allows the controller service to disable debuggees, recover from data loss, or change the `debuggee_id` format. Agents must handle `debuggee_id` value changing upon re-registration.
type ControllerDebuggee struct {
	pulumi.CustomResourceState
}

// NewControllerDebuggee registers a new resource with the given unique name, arguments, and options.
func NewControllerDebuggee(ctx *pulumi.Context,
	name string, args *ControllerDebuggeeArgs, opts ...pulumi.ResourceOption) (*ControllerDebuggee, error) {
	if args == nil {
		args = &ControllerDebuggeeArgs{}
	}

	var resource ControllerDebuggee
	err := ctx.RegisterResource("gcp-native:clouddebugger/v2:ControllerDebuggee", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetControllerDebuggee gets an existing ControllerDebuggee resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetControllerDebuggee(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ControllerDebuggeeState, opts ...pulumi.ResourceOption) (*ControllerDebuggee, error) {
	var resource ControllerDebuggee
	err := ctx.ReadResource("gcp-native:clouddebugger/v2:ControllerDebuggee", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ControllerDebuggee resources.
type controllerDebuggeeState struct {
}

type ControllerDebuggeeState struct {
}

func (ControllerDebuggeeState) ElementType() reflect.Type {
	return reflect.TypeOf((*controllerDebuggeeState)(nil)).Elem()
}

type controllerDebuggeeArgs struct {
	// Required. Debuggee information to register. The fields `project`, `uniquifier`, `description` and `agent_version` of the debuggee must be set.
	Debuggee *Debuggee `pulumi:"debuggee"`
}

// The set of arguments for constructing a ControllerDebuggee resource.
type ControllerDebuggeeArgs struct {
	// Required. Debuggee information to register. The fields `project`, `uniquifier`, `description` and `agent_version` of the debuggee must be set.
	Debuggee DebuggeePtrInput
}

func (ControllerDebuggeeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*controllerDebuggeeArgs)(nil)).Elem()
}

type ControllerDebuggeeInput interface {
	pulumi.Input

	ToControllerDebuggeeOutput() ControllerDebuggeeOutput
	ToControllerDebuggeeOutputWithContext(ctx context.Context) ControllerDebuggeeOutput
}

func (*ControllerDebuggee) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDebuggee)(nil))
}

func (i *ControllerDebuggee) ToControllerDebuggeeOutput() ControllerDebuggeeOutput {
	return i.ToControllerDebuggeeOutputWithContext(context.Background())
}

func (i *ControllerDebuggee) ToControllerDebuggeeOutputWithContext(ctx context.Context) ControllerDebuggeeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDebuggeeOutput)
}

type ControllerDebuggeeOutput struct {
	*pulumi.OutputState
}

func (ControllerDebuggeeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDebuggee)(nil))
}

func (o ControllerDebuggeeOutput) ToControllerDebuggeeOutput() ControllerDebuggeeOutput {
	return o
}

func (o ControllerDebuggeeOutput) ToControllerDebuggeeOutputWithContext(ctx context.Context) ControllerDebuggeeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ControllerDebuggeeOutput{})
}
