// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptions struct {
	// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables *bool `pulumi:"usePartitionedTables"`
}

// BigQueryOptionsInput is an input type that accepts BigQueryOptionsArgs and BigQueryOptionsOutput values.
// You can construct a concrete instance of `BigQueryOptionsInput` via:
//
//          BigQueryOptionsArgs{...}
type BigQueryOptionsInput interface {
	pulumi.Input

	ToBigQueryOptionsOutput() BigQueryOptionsOutput
	ToBigQueryOptionsOutputWithContext(context.Context) BigQueryOptionsOutput
}

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptionsArgs struct {
	// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolPtrInput `pulumi:"usePartitionedTables"`
}

func (BigQueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryOptions)(nil)).Elem()
}

func (i BigQueryOptionsArgs) ToBigQueryOptionsOutput() BigQueryOptionsOutput {
	return i.ToBigQueryOptionsOutputWithContext(context.Background())
}

func (i BigQueryOptionsArgs) ToBigQueryOptionsOutputWithContext(ctx context.Context) BigQueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryOptionsOutput)
}

func (i BigQueryOptionsArgs) ToBigQueryOptionsPtrOutput() BigQueryOptionsPtrOutput {
	return i.ToBigQueryOptionsPtrOutputWithContext(context.Background())
}

func (i BigQueryOptionsArgs) ToBigQueryOptionsPtrOutputWithContext(ctx context.Context) BigQueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryOptionsOutput).ToBigQueryOptionsPtrOutputWithContext(ctx)
}

// BigQueryOptionsPtrInput is an input type that accepts BigQueryOptionsArgs, BigQueryOptionsPtr and BigQueryOptionsPtrOutput values.
// You can construct a concrete instance of `BigQueryOptionsPtrInput` via:
//
//          BigQueryOptionsArgs{...}
//
//  or:
//
//          nil
type BigQueryOptionsPtrInput interface {
	pulumi.Input

	ToBigQueryOptionsPtrOutput() BigQueryOptionsPtrOutput
	ToBigQueryOptionsPtrOutputWithContext(context.Context) BigQueryOptionsPtrOutput
}

type bigQueryOptionsPtrType BigQueryOptionsArgs

func BigQueryOptionsPtr(v *BigQueryOptionsArgs) BigQueryOptionsPtrInput {
	return (*bigQueryOptionsPtrType)(v)
}

func (*bigQueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryOptions)(nil)).Elem()
}

func (i *bigQueryOptionsPtrType) ToBigQueryOptionsPtrOutput() BigQueryOptionsPtrOutput {
	return i.ToBigQueryOptionsPtrOutputWithContext(context.Background())
}

func (i *bigQueryOptionsPtrType) ToBigQueryOptionsPtrOutputWithContext(ctx context.Context) BigQueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryOptionsPtrOutput)
}

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptionsOutput struct{ *pulumi.OutputState }

func (BigQueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryOptions)(nil)).Elem()
}

func (o BigQueryOptionsOutput) ToBigQueryOptionsOutput() BigQueryOptionsOutput {
	return o
}

func (o BigQueryOptionsOutput) ToBigQueryOptionsOutputWithContext(ctx context.Context) BigQueryOptionsOutput {
	return o
}

func (o BigQueryOptionsOutput) ToBigQueryOptionsPtrOutput() BigQueryOptionsPtrOutput {
	return o.ToBigQueryOptionsPtrOutputWithContext(context.Background())
}

func (o BigQueryOptionsOutput) ToBigQueryOptionsPtrOutputWithContext(ctx context.Context) BigQueryOptionsPtrOutput {
	return o.ApplyT(func(v BigQueryOptions) *BigQueryOptions {
		return &v
	}).(BigQueryOptionsPtrOutput)
}

// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BigQueryOptionsOutput) UsePartitionedTables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigQueryOptions) *bool { return v.UsePartitionedTables }).(pulumi.BoolPtrOutput)
}

type BigQueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (BigQueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryOptions)(nil)).Elem()
}

func (o BigQueryOptionsPtrOutput) ToBigQueryOptionsPtrOutput() BigQueryOptionsPtrOutput {
	return o
}

func (o BigQueryOptionsPtrOutput) ToBigQueryOptionsPtrOutputWithContext(ctx context.Context) BigQueryOptionsPtrOutput {
	return o
}

func (o BigQueryOptionsPtrOutput) Elem() BigQueryOptionsOutput {
	return o.ApplyT(func(v *BigQueryOptions) BigQueryOptions { return *v }).(BigQueryOptionsOutput)
}

// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BigQueryOptionsPtrOutput) UsePartitionedTables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigQueryOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UsePartitionedTables
	}).(pulumi.BoolPtrOutput)
}

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptionsResponse struct {
	// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables bool `pulumi:"usePartitionedTables"`
	// True if new timestamp column based partitioning is in use, false if legacy ingestion-time partitioning is in use. All new sinks will have this field set true and will use timestamp column based partitioning. If use_partitioned_tables is false, this value has no meaning and will be false. Legacy sinks using partitioned tables will have this field set to false.
	UsesTimestampColumnPartitioning bool `pulumi:"usesTimestampColumnPartitioning"`
}

// BigQueryOptionsResponseInput is an input type that accepts BigQueryOptionsResponseArgs and BigQueryOptionsResponseOutput values.
// You can construct a concrete instance of `BigQueryOptionsResponseInput` via:
//
//          BigQueryOptionsResponseArgs{...}
type BigQueryOptionsResponseInput interface {
	pulumi.Input

	ToBigQueryOptionsResponseOutput() BigQueryOptionsResponseOutput
	ToBigQueryOptionsResponseOutputWithContext(context.Context) BigQueryOptionsResponseOutput
}

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptionsResponseArgs struct {
	// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
	UsePartitionedTables pulumi.BoolInput `pulumi:"usePartitionedTables"`
	// True if new timestamp column based partitioning is in use, false if legacy ingestion-time partitioning is in use. All new sinks will have this field set true and will use timestamp column based partitioning. If use_partitioned_tables is false, this value has no meaning and will be false. Legacy sinks using partitioned tables will have this field set to false.
	UsesTimestampColumnPartitioning pulumi.BoolInput `pulumi:"usesTimestampColumnPartitioning"`
}

func (BigQueryOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryOptionsResponse)(nil)).Elem()
}

func (i BigQueryOptionsResponseArgs) ToBigQueryOptionsResponseOutput() BigQueryOptionsResponseOutput {
	return i.ToBigQueryOptionsResponseOutputWithContext(context.Background())
}

func (i BigQueryOptionsResponseArgs) ToBigQueryOptionsResponseOutputWithContext(ctx context.Context) BigQueryOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryOptionsResponseOutput)
}

func (i BigQueryOptionsResponseArgs) ToBigQueryOptionsResponsePtrOutput() BigQueryOptionsResponsePtrOutput {
	return i.ToBigQueryOptionsResponsePtrOutputWithContext(context.Background())
}

func (i BigQueryOptionsResponseArgs) ToBigQueryOptionsResponsePtrOutputWithContext(ctx context.Context) BigQueryOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryOptionsResponseOutput).ToBigQueryOptionsResponsePtrOutputWithContext(ctx)
}

// BigQueryOptionsResponsePtrInput is an input type that accepts BigQueryOptionsResponseArgs, BigQueryOptionsResponsePtr and BigQueryOptionsResponsePtrOutput values.
// You can construct a concrete instance of `BigQueryOptionsResponsePtrInput` via:
//
//          BigQueryOptionsResponseArgs{...}
//
//  or:
//
//          nil
type BigQueryOptionsResponsePtrInput interface {
	pulumi.Input

	ToBigQueryOptionsResponsePtrOutput() BigQueryOptionsResponsePtrOutput
	ToBigQueryOptionsResponsePtrOutputWithContext(context.Context) BigQueryOptionsResponsePtrOutput
}

type bigQueryOptionsResponsePtrType BigQueryOptionsResponseArgs

func BigQueryOptionsResponsePtr(v *BigQueryOptionsResponseArgs) BigQueryOptionsResponsePtrInput {
	return (*bigQueryOptionsResponsePtrType)(v)
}

func (*bigQueryOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryOptionsResponse)(nil)).Elem()
}

func (i *bigQueryOptionsResponsePtrType) ToBigQueryOptionsResponsePtrOutput() BigQueryOptionsResponsePtrOutput {
	return i.ToBigQueryOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *bigQueryOptionsResponsePtrType) ToBigQueryOptionsResponsePtrOutputWithContext(ctx context.Context) BigQueryOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryOptionsResponsePtrOutput)
}

// Options that change functionality of a sink exporting data to BigQuery.
type BigQueryOptionsResponseOutput struct{ *pulumi.OutputState }

func (BigQueryOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryOptionsResponse)(nil)).Elem()
}

func (o BigQueryOptionsResponseOutput) ToBigQueryOptionsResponseOutput() BigQueryOptionsResponseOutput {
	return o
}

func (o BigQueryOptionsResponseOutput) ToBigQueryOptionsResponseOutputWithContext(ctx context.Context) BigQueryOptionsResponseOutput {
	return o
}

func (o BigQueryOptionsResponseOutput) ToBigQueryOptionsResponsePtrOutput() BigQueryOptionsResponsePtrOutput {
	return o.ToBigQueryOptionsResponsePtrOutputWithContext(context.Background())
}

func (o BigQueryOptionsResponseOutput) ToBigQueryOptionsResponsePtrOutputWithContext(ctx context.Context) BigQueryOptionsResponsePtrOutput {
	return o.ApplyT(func(v BigQueryOptionsResponse) *BigQueryOptionsResponse {
		return &v
	}).(BigQueryOptionsResponsePtrOutput)
}

// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BigQueryOptionsResponseOutput) UsePartitionedTables() pulumi.BoolOutput {
	return o.ApplyT(func(v BigQueryOptionsResponse) bool { return v.UsePartitionedTables }).(pulumi.BoolOutput)
}

// True if new timestamp column based partitioning is in use, false if legacy ingestion-time partitioning is in use. All new sinks will have this field set true and will use timestamp column based partitioning. If use_partitioned_tables is false, this value has no meaning and will be false. Legacy sinks using partitioned tables will have this field set to false.
func (o BigQueryOptionsResponseOutput) UsesTimestampColumnPartitioning() pulumi.BoolOutput {
	return o.ApplyT(func(v BigQueryOptionsResponse) bool { return v.UsesTimestampColumnPartitioning }).(pulumi.BoolOutput)
}

type BigQueryOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (BigQueryOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryOptionsResponse)(nil)).Elem()
}

func (o BigQueryOptionsResponsePtrOutput) ToBigQueryOptionsResponsePtrOutput() BigQueryOptionsResponsePtrOutput {
	return o
}

func (o BigQueryOptionsResponsePtrOutput) ToBigQueryOptionsResponsePtrOutputWithContext(ctx context.Context) BigQueryOptionsResponsePtrOutput {
	return o
}

func (o BigQueryOptionsResponsePtrOutput) Elem() BigQueryOptionsResponseOutput {
	return o.ApplyT(func(v *BigQueryOptionsResponse) BigQueryOptionsResponse { return *v }).(BigQueryOptionsResponseOutput)
}

// Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
func (o BigQueryOptionsResponsePtrOutput) UsePartitionedTables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigQueryOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UsePartitionedTables
	}).(pulumi.BoolPtrOutput)
}

// True if new timestamp column based partitioning is in use, false if legacy ingestion-time partitioning is in use. All new sinks will have this field set true and will use timestamp column based partitioning. If use_partitioned_tables is false, this value has no meaning and will be false. Legacy sinks using partitioned tables will have this field set to false.
func (o BigQueryOptionsResponsePtrOutput) UsesTimestampColumnPartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigQueryOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UsesTimestampColumnPartitioning
	}).(pulumi.BoolPtrOutput)
}

// BucketOptions describes the bucket boundaries used to create a histogram for the distribution. The buckets can be in a linear sequence, an exponential sequence, or each bucket can be specified explicitly. BucketOptions does not include the number of values in each bucket.A bucket has an inclusive lower bound and exclusive upper bound for the values that are counted for that bucket. The upper bound of a bucket must be strictly greater than the lower bound. The sequence of N buckets for a distribution consists of an underflow bucket (number 0), zero or more finite buckets (number 1 through N - 2) and an overflow bucket (number N - 1). The buckets are contiguous: the lower bound of bucket i (i > 0) is the same as the upper bound of bucket i - 1. The buckets span the whole range of finite values: lower bound of the underflow bucket is -infinity and the upper bound of the overflow bucket is +infinity. The finite buckets are so-called because both bounds are finite.
type BucketOptions struct {
	// The explicit buckets.
	ExplicitBuckets *Explicit `pulumi:"explicitBuckets"`
	// The exponential buckets.
	ExponentialBuckets *Exponential `pulumi:"exponentialBuckets"`
	// The linear bucket.
	LinearBuckets *Linear `pulumi:"linearBuckets"`
}

// BucketOptionsInput is an input type that accepts BucketOptionsArgs and BucketOptionsOutput values.
// You can construct a concrete instance of `BucketOptionsInput` via:
//
//          BucketOptionsArgs{...}
type BucketOptionsInput interface {
	pulumi.Input

	ToBucketOptionsOutput() BucketOptionsOutput
	ToBucketOptionsOutputWithContext(context.Context) BucketOptionsOutput
}

// BucketOptions describes the bucket boundaries used to create a histogram for the distribution. The buckets can be in a linear sequence, an exponential sequence, or each bucket can be specified explicitly. BucketOptions does not include the number of values in each bucket.A bucket has an inclusive lower bound and exclusive upper bound for the values that are counted for that bucket. The upper bound of a bucket must be strictly greater than the lower bound. The sequence of N buckets for a distribution consists of an underflow bucket (number 0), zero or more finite buckets (number 1 through N - 2) and an overflow bucket (number N - 1). The buckets are contiguous: the lower bound of bucket i (i > 0) is the same as the upper bound of bucket i - 1. The buckets span the whole range of finite values: lower bound of the underflow bucket is -infinity and the upper bound of the overflow bucket is +infinity. The finite buckets are so-called because both bounds are finite.
type BucketOptionsArgs struct {
	// The explicit buckets.
	ExplicitBuckets ExplicitPtrInput `pulumi:"explicitBuckets"`
	// The exponential buckets.
	ExponentialBuckets ExponentialPtrInput `pulumi:"exponentialBuckets"`
	// The linear bucket.
	LinearBuckets LinearPtrInput `pulumi:"linearBuckets"`
}

func (BucketOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketOptions)(nil)).Elem()
}

func (i BucketOptionsArgs) ToBucketOptionsOutput() BucketOptionsOutput {
	return i.ToBucketOptionsOutputWithContext(context.Background())
}

func (i BucketOptionsArgs) ToBucketOptionsOutputWithContext(ctx context.Context) BucketOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOptionsOutput)
}

func (i BucketOptionsArgs) ToBucketOptionsPtrOutput() BucketOptionsPtrOutput {
	return i.ToBucketOptionsPtrOutputWithContext(context.Background())
}

func (i BucketOptionsArgs) ToBucketOptionsPtrOutputWithContext(ctx context.Context) BucketOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOptionsOutput).ToBucketOptionsPtrOutputWithContext(ctx)
}

// BucketOptionsPtrInput is an input type that accepts BucketOptionsArgs, BucketOptionsPtr and BucketOptionsPtrOutput values.
// You can construct a concrete instance of `BucketOptionsPtrInput` via:
//
//          BucketOptionsArgs{...}
//
//  or:
//
//          nil
type BucketOptionsPtrInput interface {
	pulumi.Input

	ToBucketOptionsPtrOutput() BucketOptionsPtrOutput
	ToBucketOptionsPtrOutputWithContext(context.Context) BucketOptionsPtrOutput
}

type bucketOptionsPtrType BucketOptionsArgs

func BucketOptionsPtr(v *BucketOptionsArgs) BucketOptionsPtrInput {
	return (*bucketOptionsPtrType)(v)
}

func (*bucketOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketOptions)(nil)).Elem()
}

func (i *bucketOptionsPtrType) ToBucketOptionsPtrOutput() BucketOptionsPtrOutput {
	return i.ToBucketOptionsPtrOutputWithContext(context.Background())
}

func (i *bucketOptionsPtrType) ToBucketOptionsPtrOutputWithContext(ctx context.Context) BucketOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOptionsPtrOutput)
}

// BucketOptions describes the bucket boundaries used to create a histogram for the distribution. The buckets can be in a linear sequence, an exponential sequence, or each bucket can be specified explicitly. BucketOptions does not include the number of values in each bucket.A bucket has an inclusive lower bound and exclusive upper bound for the values that are counted for that bucket. The upper bound of a bucket must be strictly greater than the lower bound. The sequence of N buckets for a distribution consists of an underflow bucket (number 0), zero or more finite buckets (number 1 through N - 2) and an overflow bucket (number N - 1). The buckets are contiguous: the lower bound of bucket i (i > 0) is the same as the upper bound of bucket i - 1. The buckets span the whole range of finite values: lower bound of the underflow bucket is -infinity and the upper bound of the overflow bucket is +infinity. The finite buckets are so-called because both bounds are finite.
type BucketOptionsOutput struct{ *pulumi.OutputState }

func (BucketOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketOptions)(nil)).Elem()
}

func (o BucketOptionsOutput) ToBucketOptionsOutput() BucketOptionsOutput {
	return o
}

func (o BucketOptionsOutput) ToBucketOptionsOutputWithContext(ctx context.Context) BucketOptionsOutput {
	return o
}

func (o BucketOptionsOutput) ToBucketOptionsPtrOutput() BucketOptionsPtrOutput {
	return o.ToBucketOptionsPtrOutputWithContext(context.Background())
}

func (o BucketOptionsOutput) ToBucketOptionsPtrOutputWithContext(ctx context.Context) BucketOptionsPtrOutput {
	return o.ApplyT(func(v BucketOptions) *BucketOptions {
		return &v
	}).(BucketOptionsPtrOutput)
}

// The explicit buckets.
func (o BucketOptionsOutput) ExplicitBuckets() ExplicitPtrOutput {
	return o.ApplyT(func(v BucketOptions) *Explicit { return v.ExplicitBuckets }).(ExplicitPtrOutput)
}

// The exponential buckets.
func (o BucketOptionsOutput) ExponentialBuckets() ExponentialPtrOutput {
	return o.ApplyT(func(v BucketOptions) *Exponential { return v.ExponentialBuckets }).(ExponentialPtrOutput)
}

// The linear bucket.
func (o BucketOptionsOutput) LinearBuckets() LinearPtrOutput {
	return o.ApplyT(func(v BucketOptions) *Linear { return v.LinearBuckets }).(LinearPtrOutput)
}

type BucketOptionsPtrOutput struct{ *pulumi.OutputState }

func (BucketOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketOptions)(nil)).Elem()
}

func (o BucketOptionsPtrOutput) ToBucketOptionsPtrOutput() BucketOptionsPtrOutput {
	return o
}

func (o BucketOptionsPtrOutput) ToBucketOptionsPtrOutputWithContext(ctx context.Context) BucketOptionsPtrOutput {
	return o
}

func (o BucketOptionsPtrOutput) Elem() BucketOptionsOutput {
	return o.ApplyT(func(v *BucketOptions) BucketOptions { return *v }).(BucketOptionsOutput)
}

// The explicit buckets.
func (o BucketOptionsPtrOutput) ExplicitBuckets() ExplicitPtrOutput {
	return o.ApplyT(func(v *BucketOptions) *Explicit {
		if v == nil {
			return nil
		}
		return v.ExplicitBuckets
	}).(ExplicitPtrOutput)
}

// The exponential buckets.
func (o BucketOptionsPtrOutput) ExponentialBuckets() ExponentialPtrOutput {
	return o.ApplyT(func(v *BucketOptions) *Exponential {
		if v == nil {
			return nil
		}
		return v.ExponentialBuckets
	}).(ExponentialPtrOutput)
}

// The linear bucket.
func (o BucketOptionsPtrOutput) LinearBuckets() LinearPtrOutput {
	return o.ApplyT(func(v *BucketOptions) *Linear {
		if v == nil {
			return nil
		}
		return v.LinearBuckets
	}).(LinearPtrOutput)
}

// BucketOptions describes the bucket boundaries used to create a histogram for the distribution. The buckets can be in a linear sequence, an exponential sequence, or each bucket can be specified explicitly. BucketOptions does not include the number of values in each bucket.A bucket has an inclusive lower bound and exclusive upper bound for the values that are counted for that bucket. The upper bound of a bucket must be strictly greater than the lower bound. The sequence of N buckets for a distribution consists of an underflow bucket (number 0), zero or more finite buckets (number 1 through N - 2) and an overflow bucket (number N - 1). The buckets are contiguous: the lower bound of bucket i (i > 0) is the same as the upper bound of bucket i - 1. The buckets span the whole range of finite values: lower bound of the underflow bucket is -infinity and the upper bound of the overflow bucket is +infinity. The finite buckets are so-called because both bounds are finite.
type BucketOptionsResponse struct {
	// The explicit buckets.
	ExplicitBuckets ExplicitResponse `pulumi:"explicitBuckets"`
	// The exponential buckets.
	ExponentialBuckets ExponentialResponse `pulumi:"exponentialBuckets"`
	// The linear bucket.
	LinearBuckets LinearResponse `pulumi:"linearBuckets"`
}

// BucketOptionsResponseInput is an input type that accepts BucketOptionsResponseArgs and BucketOptionsResponseOutput values.
// You can construct a concrete instance of `BucketOptionsResponseInput` via:
//
//          BucketOptionsResponseArgs{...}
type BucketOptionsResponseInput interface {
	pulumi.Input

	ToBucketOptionsResponseOutput() BucketOptionsResponseOutput
	ToBucketOptionsResponseOutputWithContext(context.Context) BucketOptionsResponseOutput
}

// BucketOptions describes the bucket boundaries used to create a histogram for the distribution. The buckets can be in a linear sequence, an exponential sequence, or each bucket can be specified explicitly. BucketOptions does not include the number of values in each bucket.A bucket has an inclusive lower bound and exclusive upper bound for the values that are counted for that bucket. The upper bound of a bucket must be strictly greater than the lower bound. The sequence of N buckets for a distribution consists of an underflow bucket (number 0), zero or more finite buckets (number 1 through N - 2) and an overflow bucket (number N - 1). The buckets are contiguous: the lower bound of bucket i (i > 0) is the same as the upper bound of bucket i - 1. The buckets span the whole range of finite values: lower bound of the underflow bucket is -infinity and the upper bound of the overflow bucket is +infinity. The finite buckets are so-called because both bounds are finite.
type BucketOptionsResponseArgs struct {
	// The explicit buckets.
	ExplicitBuckets ExplicitResponseInput `pulumi:"explicitBuckets"`
	// The exponential buckets.
	ExponentialBuckets ExponentialResponseInput `pulumi:"exponentialBuckets"`
	// The linear bucket.
	LinearBuckets LinearResponseInput `pulumi:"linearBuckets"`
}

func (BucketOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketOptionsResponse)(nil)).Elem()
}

func (i BucketOptionsResponseArgs) ToBucketOptionsResponseOutput() BucketOptionsResponseOutput {
	return i.ToBucketOptionsResponseOutputWithContext(context.Background())
}

func (i BucketOptionsResponseArgs) ToBucketOptionsResponseOutputWithContext(ctx context.Context) BucketOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOptionsResponseOutput)
}

func (i BucketOptionsResponseArgs) ToBucketOptionsResponsePtrOutput() BucketOptionsResponsePtrOutput {
	return i.ToBucketOptionsResponsePtrOutputWithContext(context.Background())
}

func (i BucketOptionsResponseArgs) ToBucketOptionsResponsePtrOutputWithContext(ctx context.Context) BucketOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOptionsResponseOutput).ToBucketOptionsResponsePtrOutputWithContext(ctx)
}

// BucketOptionsResponsePtrInput is an input type that accepts BucketOptionsResponseArgs, BucketOptionsResponsePtr and BucketOptionsResponsePtrOutput values.
// You can construct a concrete instance of `BucketOptionsResponsePtrInput` via:
//
//          BucketOptionsResponseArgs{...}
//
//  or:
//
//          nil
type BucketOptionsResponsePtrInput interface {
	pulumi.Input

	ToBucketOptionsResponsePtrOutput() BucketOptionsResponsePtrOutput
	ToBucketOptionsResponsePtrOutputWithContext(context.Context) BucketOptionsResponsePtrOutput
}

type bucketOptionsResponsePtrType BucketOptionsResponseArgs

func BucketOptionsResponsePtr(v *BucketOptionsResponseArgs) BucketOptionsResponsePtrInput {
	return (*bucketOptionsResponsePtrType)(v)
}

func (*bucketOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketOptionsResponse)(nil)).Elem()
}

func (i *bucketOptionsResponsePtrType) ToBucketOptionsResponsePtrOutput() BucketOptionsResponsePtrOutput {
	return i.ToBucketOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *bucketOptionsResponsePtrType) ToBucketOptionsResponsePtrOutputWithContext(ctx context.Context) BucketOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOptionsResponsePtrOutput)
}

// BucketOptions describes the bucket boundaries used to create a histogram for the distribution. The buckets can be in a linear sequence, an exponential sequence, or each bucket can be specified explicitly. BucketOptions does not include the number of values in each bucket.A bucket has an inclusive lower bound and exclusive upper bound for the values that are counted for that bucket. The upper bound of a bucket must be strictly greater than the lower bound. The sequence of N buckets for a distribution consists of an underflow bucket (number 0), zero or more finite buckets (number 1 through N - 2) and an overflow bucket (number N - 1). The buckets are contiguous: the lower bound of bucket i (i > 0) is the same as the upper bound of bucket i - 1. The buckets span the whole range of finite values: lower bound of the underflow bucket is -infinity and the upper bound of the overflow bucket is +infinity. The finite buckets are so-called because both bounds are finite.
type BucketOptionsResponseOutput struct{ *pulumi.OutputState }

func (BucketOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketOptionsResponse)(nil)).Elem()
}

func (o BucketOptionsResponseOutput) ToBucketOptionsResponseOutput() BucketOptionsResponseOutput {
	return o
}

func (o BucketOptionsResponseOutput) ToBucketOptionsResponseOutputWithContext(ctx context.Context) BucketOptionsResponseOutput {
	return o
}

func (o BucketOptionsResponseOutput) ToBucketOptionsResponsePtrOutput() BucketOptionsResponsePtrOutput {
	return o.ToBucketOptionsResponsePtrOutputWithContext(context.Background())
}

func (o BucketOptionsResponseOutput) ToBucketOptionsResponsePtrOutputWithContext(ctx context.Context) BucketOptionsResponsePtrOutput {
	return o.ApplyT(func(v BucketOptionsResponse) *BucketOptionsResponse {
		return &v
	}).(BucketOptionsResponsePtrOutput)
}

// The explicit buckets.
func (o BucketOptionsResponseOutput) ExplicitBuckets() ExplicitResponseOutput {
	return o.ApplyT(func(v BucketOptionsResponse) ExplicitResponse { return v.ExplicitBuckets }).(ExplicitResponseOutput)
}

// The exponential buckets.
func (o BucketOptionsResponseOutput) ExponentialBuckets() ExponentialResponseOutput {
	return o.ApplyT(func(v BucketOptionsResponse) ExponentialResponse { return v.ExponentialBuckets }).(ExponentialResponseOutput)
}

// The linear bucket.
func (o BucketOptionsResponseOutput) LinearBuckets() LinearResponseOutput {
	return o.ApplyT(func(v BucketOptionsResponse) LinearResponse { return v.LinearBuckets }).(LinearResponseOutput)
}

type BucketOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (BucketOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketOptionsResponse)(nil)).Elem()
}

func (o BucketOptionsResponsePtrOutput) ToBucketOptionsResponsePtrOutput() BucketOptionsResponsePtrOutput {
	return o
}

func (o BucketOptionsResponsePtrOutput) ToBucketOptionsResponsePtrOutputWithContext(ctx context.Context) BucketOptionsResponsePtrOutput {
	return o
}

func (o BucketOptionsResponsePtrOutput) Elem() BucketOptionsResponseOutput {
	return o.ApplyT(func(v *BucketOptionsResponse) BucketOptionsResponse { return *v }).(BucketOptionsResponseOutput)
}

// The explicit buckets.
func (o BucketOptionsResponsePtrOutput) ExplicitBuckets() ExplicitResponsePtrOutput {
	return o.ApplyT(func(v *BucketOptionsResponse) *ExplicitResponse {
		if v == nil {
			return nil
		}
		return &v.ExplicitBuckets
	}).(ExplicitResponsePtrOutput)
}

// The exponential buckets.
func (o BucketOptionsResponsePtrOutput) ExponentialBuckets() ExponentialResponsePtrOutput {
	return o.ApplyT(func(v *BucketOptionsResponse) *ExponentialResponse {
		if v == nil {
			return nil
		}
		return &v.ExponentialBuckets
	}).(ExponentialResponsePtrOutput)
}

// The linear bucket.
func (o BucketOptionsResponsePtrOutput) LinearBuckets() LinearResponsePtrOutput {
	return o.ApplyT(func(v *BucketOptionsResponse) *LinearResponse {
		if v == nil {
			return nil
		}
		return &v.LinearBuckets
	}).(LinearResponsePtrOutput)
}

// Specifies a set of buckets with arbitrary widths.There are size(bounds) + 1 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): boundsi Lower bound (1 <= i < N); boundsi - 1The bounds field must contain at least one element. If bounds has only one element, then there are no finite buckets, and that single element is the common boundary of the overflow and underflow buckets.
type Explicit struct {
	// The values must be monotonically increasing.
	Bounds []float64 `pulumi:"bounds"`
}

// ExplicitInput is an input type that accepts ExplicitArgs and ExplicitOutput values.
// You can construct a concrete instance of `ExplicitInput` via:
//
//          ExplicitArgs{...}
type ExplicitInput interface {
	pulumi.Input

	ToExplicitOutput() ExplicitOutput
	ToExplicitOutputWithContext(context.Context) ExplicitOutput
}

// Specifies a set of buckets with arbitrary widths.There are size(bounds) + 1 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): boundsi Lower bound (1 <= i < N); boundsi - 1The bounds field must contain at least one element. If bounds has only one element, then there are no finite buckets, and that single element is the common boundary of the overflow and underflow buckets.
type ExplicitArgs struct {
	// The values must be monotonically increasing.
	Bounds pulumi.Float64ArrayInput `pulumi:"bounds"`
}

func (ExplicitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Explicit)(nil)).Elem()
}

func (i ExplicitArgs) ToExplicitOutput() ExplicitOutput {
	return i.ToExplicitOutputWithContext(context.Background())
}

func (i ExplicitArgs) ToExplicitOutputWithContext(ctx context.Context) ExplicitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitOutput)
}

func (i ExplicitArgs) ToExplicitPtrOutput() ExplicitPtrOutput {
	return i.ToExplicitPtrOutputWithContext(context.Background())
}

func (i ExplicitArgs) ToExplicitPtrOutputWithContext(ctx context.Context) ExplicitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitOutput).ToExplicitPtrOutputWithContext(ctx)
}

// ExplicitPtrInput is an input type that accepts ExplicitArgs, ExplicitPtr and ExplicitPtrOutput values.
// You can construct a concrete instance of `ExplicitPtrInput` via:
//
//          ExplicitArgs{...}
//
//  or:
//
//          nil
type ExplicitPtrInput interface {
	pulumi.Input

	ToExplicitPtrOutput() ExplicitPtrOutput
	ToExplicitPtrOutputWithContext(context.Context) ExplicitPtrOutput
}

type explicitPtrType ExplicitArgs

func ExplicitPtr(v *ExplicitArgs) ExplicitPtrInput {
	return (*explicitPtrType)(v)
}

func (*explicitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Explicit)(nil)).Elem()
}

func (i *explicitPtrType) ToExplicitPtrOutput() ExplicitPtrOutput {
	return i.ToExplicitPtrOutputWithContext(context.Background())
}

func (i *explicitPtrType) ToExplicitPtrOutputWithContext(ctx context.Context) ExplicitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitPtrOutput)
}

// Specifies a set of buckets with arbitrary widths.There are size(bounds) + 1 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): boundsi Lower bound (1 <= i < N); boundsi - 1The bounds field must contain at least one element. If bounds has only one element, then there are no finite buckets, and that single element is the common boundary of the overflow and underflow buckets.
type ExplicitOutput struct{ *pulumi.OutputState }

func (ExplicitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Explicit)(nil)).Elem()
}

func (o ExplicitOutput) ToExplicitOutput() ExplicitOutput {
	return o
}

func (o ExplicitOutput) ToExplicitOutputWithContext(ctx context.Context) ExplicitOutput {
	return o
}

func (o ExplicitOutput) ToExplicitPtrOutput() ExplicitPtrOutput {
	return o.ToExplicitPtrOutputWithContext(context.Background())
}

func (o ExplicitOutput) ToExplicitPtrOutputWithContext(ctx context.Context) ExplicitPtrOutput {
	return o.ApplyT(func(v Explicit) *Explicit {
		return &v
	}).(ExplicitPtrOutput)
}

// The values must be monotonically increasing.
func (o ExplicitOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v Explicit) []float64 { return v.Bounds }).(pulumi.Float64ArrayOutput)
}

type ExplicitPtrOutput struct{ *pulumi.OutputState }

func (ExplicitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Explicit)(nil)).Elem()
}

func (o ExplicitPtrOutput) ToExplicitPtrOutput() ExplicitPtrOutput {
	return o
}

func (o ExplicitPtrOutput) ToExplicitPtrOutputWithContext(ctx context.Context) ExplicitPtrOutput {
	return o
}

func (o ExplicitPtrOutput) Elem() ExplicitOutput {
	return o.ApplyT(func(v *Explicit) Explicit { return *v }).(ExplicitOutput)
}

// The values must be monotonically increasing.
func (o ExplicitPtrOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *Explicit) []float64 {
		if v == nil {
			return nil
		}
		return v.Bounds
	}).(pulumi.Float64ArrayOutput)
}

// Specifies a set of buckets with arbitrary widths.There are size(bounds) + 1 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): boundsi Lower bound (1 <= i < N); boundsi - 1The bounds field must contain at least one element. If bounds has only one element, then there are no finite buckets, and that single element is the common boundary of the overflow and underflow buckets.
type ExplicitResponse struct {
	// The values must be monotonically increasing.
	Bounds []float64 `pulumi:"bounds"`
}

// ExplicitResponseInput is an input type that accepts ExplicitResponseArgs and ExplicitResponseOutput values.
// You can construct a concrete instance of `ExplicitResponseInput` via:
//
//          ExplicitResponseArgs{...}
type ExplicitResponseInput interface {
	pulumi.Input

	ToExplicitResponseOutput() ExplicitResponseOutput
	ToExplicitResponseOutputWithContext(context.Context) ExplicitResponseOutput
}

// Specifies a set of buckets with arbitrary widths.There are size(bounds) + 1 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): boundsi Lower bound (1 <= i < N); boundsi - 1The bounds field must contain at least one element. If bounds has only one element, then there are no finite buckets, and that single element is the common boundary of the overflow and underflow buckets.
type ExplicitResponseArgs struct {
	// The values must be monotonically increasing.
	Bounds pulumi.Float64ArrayInput `pulumi:"bounds"`
}

func (ExplicitResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplicitResponse)(nil)).Elem()
}

func (i ExplicitResponseArgs) ToExplicitResponseOutput() ExplicitResponseOutput {
	return i.ToExplicitResponseOutputWithContext(context.Background())
}

func (i ExplicitResponseArgs) ToExplicitResponseOutputWithContext(ctx context.Context) ExplicitResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitResponseOutput)
}

func (i ExplicitResponseArgs) ToExplicitResponsePtrOutput() ExplicitResponsePtrOutput {
	return i.ToExplicitResponsePtrOutputWithContext(context.Background())
}

func (i ExplicitResponseArgs) ToExplicitResponsePtrOutputWithContext(ctx context.Context) ExplicitResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitResponseOutput).ToExplicitResponsePtrOutputWithContext(ctx)
}

// ExplicitResponsePtrInput is an input type that accepts ExplicitResponseArgs, ExplicitResponsePtr and ExplicitResponsePtrOutput values.
// You can construct a concrete instance of `ExplicitResponsePtrInput` via:
//
//          ExplicitResponseArgs{...}
//
//  or:
//
//          nil
type ExplicitResponsePtrInput interface {
	pulumi.Input

	ToExplicitResponsePtrOutput() ExplicitResponsePtrOutput
	ToExplicitResponsePtrOutputWithContext(context.Context) ExplicitResponsePtrOutput
}

type explicitResponsePtrType ExplicitResponseArgs

func ExplicitResponsePtr(v *ExplicitResponseArgs) ExplicitResponsePtrInput {
	return (*explicitResponsePtrType)(v)
}

func (*explicitResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExplicitResponse)(nil)).Elem()
}

func (i *explicitResponsePtrType) ToExplicitResponsePtrOutput() ExplicitResponsePtrOutput {
	return i.ToExplicitResponsePtrOutputWithContext(context.Background())
}

func (i *explicitResponsePtrType) ToExplicitResponsePtrOutputWithContext(ctx context.Context) ExplicitResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplicitResponsePtrOutput)
}

// Specifies a set of buckets with arbitrary widths.There are size(bounds) + 1 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): boundsi Lower bound (1 <= i < N); boundsi - 1The bounds field must contain at least one element. If bounds has only one element, then there are no finite buckets, and that single element is the common boundary of the overflow and underflow buckets.
type ExplicitResponseOutput struct{ *pulumi.OutputState }

func (ExplicitResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplicitResponse)(nil)).Elem()
}

func (o ExplicitResponseOutput) ToExplicitResponseOutput() ExplicitResponseOutput {
	return o
}

func (o ExplicitResponseOutput) ToExplicitResponseOutputWithContext(ctx context.Context) ExplicitResponseOutput {
	return o
}

func (o ExplicitResponseOutput) ToExplicitResponsePtrOutput() ExplicitResponsePtrOutput {
	return o.ToExplicitResponsePtrOutputWithContext(context.Background())
}

func (o ExplicitResponseOutput) ToExplicitResponsePtrOutputWithContext(ctx context.Context) ExplicitResponsePtrOutput {
	return o.ApplyT(func(v ExplicitResponse) *ExplicitResponse {
		return &v
	}).(ExplicitResponsePtrOutput)
}

// The values must be monotonically increasing.
func (o ExplicitResponseOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v ExplicitResponse) []float64 { return v.Bounds }).(pulumi.Float64ArrayOutput)
}

type ExplicitResponsePtrOutput struct{ *pulumi.OutputState }

func (ExplicitResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExplicitResponse)(nil)).Elem()
}

func (o ExplicitResponsePtrOutput) ToExplicitResponsePtrOutput() ExplicitResponsePtrOutput {
	return o
}

func (o ExplicitResponsePtrOutput) ToExplicitResponsePtrOutputWithContext(ctx context.Context) ExplicitResponsePtrOutput {
	return o
}

func (o ExplicitResponsePtrOutput) Elem() ExplicitResponseOutput {
	return o.ApplyT(func(v *ExplicitResponse) ExplicitResponse { return *v }).(ExplicitResponseOutput)
}

// The values must be monotonically increasing.
func (o ExplicitResponsePtrOutput) Bounds() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *ExplicitResponse) []float64 {
		if v == nil {
			return nil
		}
		return v.Bounds
	}).(pulumi.Float64ArrayOutput)
}

// Specifies an exponential sequence of buckets that have a width that is proportional to the value of the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): scale * (growth_factor ^ i). Lower bound (1 <= i < N): scale * (growth_factor ^ (i - 1)).
type Exponential struct {
	// Must be greater than 1.
	GrowthFactor *float64 `pulumi:"growthFactor"`
	// Must be greater than 0.
	NumFiniteBuckets *int `pulumi:"numFiniteBuckets"`
	// Must be greater than 0.
	Scale *float64 `pulumi:"scale"`
}

// ExponentialInput is an input type that accepts ExponentialArgs and ExponentialOutput values.
// You can construct a concrete instance of `ExponentialInput` via:
//
//          ExponentialArgs{...}
type ExponentialInput interface {
	pulumi.Input

	ToExponentialOutput() ExponentialOutput
	ToExponentialOutputWithContext(context.Context) ExponentialOutput
}

// Specifies an exponential sequence of buckets that have a width that is proportional to the value of the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): scale * (growth_factor ^ i). Lower bound (1 <= i < N): scale * (growth_factor ^ (i - 1)).
type ExponentialArgs struct {
	// Must be greater than 1.
	GrowthFactor pulumi.Float64PtrInput `pulumi:"growthFactor"`
	// Must be greater than 0.
	NumFiniteBuckets pulumi.IntPtrInput `pulumi:"numFiniteBuckets"`
	// Must be greater than 0.
	Scale pulumi.Float64PtrInput `pulumi:"scale"`
}

func (ExponentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Exponential)(nil)).Elem()
}

func (i ExponentialArgs) ToExponentialOutput() ExponentialOutput {
	return i.ToExponentialOutputWithContext(context.Background())
}

func (i ExponentialArgs) ToExponentialOutputWithContext(ctx context.Context) ExponentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExponentialOutput)
}

func (i ExponentialArgs) ToExponentialPtrOutput() ExponentialPtrOutput {
	return i.ToExponentialPtrOutputWithContext(context.Background())
}

func (i ExponentialArgs) ToExponentialPtrOutputWithContext(ctx context.Context) ExponentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExponentialOutput).ToExponentialPtrOutputWithContext(ctx)
}

// ExponentialPtrInput is an input type that accepts ExponentialArgs, ExponentialPtr and ExponentialPtrOutput values.
// You can construct a concrete instance of `ExponentialPtrInput` via:
//
//          ExponentialArgs{...}
//
//  or:
//
//          nil
type ExponentialPtrInput interface {
	pulumi.Input

	ToExponentialPtrOutput() ExponentialPtrOutput
	ToExponentialPtrOutputWithContext(context.Context) ExponentialPtrOutput
}

type exponentialPtrType ExponentialArgs

func ExponentialPtr(v *ExponentialArgs) ExponentialPtrInput {
	return (*exponentialPtrType)(v)
}

func (*exponentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Exponential)(nil)).Elem()
}

func (i *exponentialPtrType) ToExponentialPtrOutput() ExponentialPtrOutput {
	return i.ToExponentialPtrOutputWithContext(context.Background())
}

func (i *exponentialPtrType) ToExponentialPtrOutputWithContext(ctx context.Context) ExponentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExponentialPtrOutput)
}

// Specifies an exponential sequence of buckets that have a width that is proportional to the value of the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): scale * (growth_factor ^ i). Lower bound (1 <= i < N): scale * (growth_factor ^ (i - 1)).
type ExponentialOutput struct{ *pulumi.OutputState }

func (ExponentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Exponential)(nil)).Elem()
}

func (o ExponentialOutput) ToExponentialOutput() ExponentialOutput {
	return o
}

func (o ExponentialOutput) ToExponentialOutputWithContext(ctx context.Context) ExponentialOutput {
	return o
}

func (o ExponentialOutput) ToExponentialPtrOutput() ExponentialPtrOutput {
	return o.ToExponentialPtrOutputWithContext(context.Background())
}

func (o ExponentialOutput) ToExponentialPtrOutputWithContext(ctx context.Context) ExponentialPtrOutput {
	return o.ApplyT(func(v Exponential) *Exponential {
		return &v
	}).(ExponentialPtrOutput)
}

// Must be greater than 1.
func (o ExponentialOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Exponential) *float64 { return v.GrowthFactor }).(pulumi.Float64PtrOutput)
}

// Must be greater than 0.
func (o ExponentialOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Exponential) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

// Must be greater than 0.
func (o ExponentialOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Exponential) *float64 { return v.Scale }).(pulumi.Float64PtrOutput)
}

type ExponentialPtrOutput struct{ *pulumi.OutputState }

func (ExponentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Exponential)(nil)).Elem()
}

func (o ExponentialPtrOutput) ToExponentialPtrOutput() ExponentialPtrOutput {
	return o
}

func (o ExponentialPtrOutput) ToExponentialPtrOutputWithContext(ctx context.Context) ExponentialPtrOutput {
	return o
}

func (o ExponentialPtrOutput) Elem() ExponentialOutput {
	return o.ApplyT(func(v *Exponential) Exponential { return *v }).(ExponentialOutput)
}

// Must be greater than 1.
func (o ExponentialPtrOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Exponential) *float64 {
		if v == nil {
			return nil
		}
		return v.GrowthFactor
	}).(pulumi.Float64PtrOutput)
}

// Must be greater than 0.
func (o ExponentialPtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Exponential) *int {
		if v == nil {
			return nil
		}
		return v.NumFiniteBuckets
	}).(pulumi.IntPtrOutput)
}

// Must be greater than 0.
func (o ExponentialPtrOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Exponential) *float64 {
		if v == nil {
			return nil
		}
		return v.Scale
	}).(pulumi.Float64PtrOutput)
}

// Specifies an exponential sequence of buckets that have a width that is proportional to the value of the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): scale * (growth_factor ^ i). Lower bound (1 <= i < N): scale * (growth_factor ^ (i - 1)).
type ExponentialResponse struct {
	// Must be greater than 1.
	GrowthFactor float64 `pulumi:"growthFactor"`
	// Must be greater than 0.
	NumFiniteBuckets int `pulumi:"numFiniteBuckets"`
	// Must be greater than 0.
	Scale float64 `pulumi:"scale"`
}

// ExponentialResponseInput is an input type that accepts ExponentialResponseArgs and ExponentialResponseOutput values.
// You can construct a concrete instance of `ExponentialResponseInput` via:
//
//          ExponentialResponseArgs{...}
type ExponentialResponseInput interface {
	pulumi.Input

	ToExponentialResponseOutput() ExponentialResponseOutput
	ToExponentialResponseOutputWithContext(context.Context) ExponentialResponseOutput
}

// Specifies an exponential sequence of buckets that have a width that is proportional to the value of the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): scale * (growth_factor ^ i). Lower bound (1 <= i < N): scale * (growth_factor ^ (i - 1)).
type ExponentialResponseArgs struct {
	// Must be greater than 1.
	GrowthFactor pulumi.Float64Input `pulumi:"growthFactor"`
	// Must be greater than 0.
	NumFiniteBuckets pulumi.IntInput `pulumi:"numFiniteBuckets"`
	// Must be greater than 0.
	Scale pulumi.Float64Input `pulumi:"scale"`
}

func (ExponentialResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExponentialResponse)(nil)).Elem()
}

func (i ExponentialResponseArgs) ToExponentialResponseOutput() ExponentialResponseOutput {
	return i.ToExponentialResponseOutputWithContext(context.Background())
}

func (i ExponentialResponseArgs) ToExponentialResponseOutputWithContext(ctx context.Context) ExponentialResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExponentialResponseOutput)
}

func (i ExponentialResponseArgs) ToExponentialResponsePtrOutput() ExponentialResponsePtrOutput {
	return i.ToExponentialResponsePtrOutputWithContext(context.Background())
}

func (i ExponentialResponseArgs) ToExponentialResponsePtrOutputWithContext(ctx context.Context) ExponentialResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExponentialResponseOutput).ToExponentialResponsePtrOutputWithContext(ctx)
}

// ExponentialResponsePtrInput is an input type that accepts ExponentialResponseArgs, ExponentialResponsePtr and ExponentialResponsePtrOutput values.
// You can construct a concrete instance of `ExponentialResponsePtrInput` via:
//
//          ExponentialResponseArgs{...}
//
//  or:
//
//          nil
type ExponentialResponsePtrInput interface {
	pulumi.Input

	ToExponentialResponsePtrOutput() ExponentialResponsePtrOutput
	ToExponentialResponsePtrOutputWithContext(context.Context) ExponentialResponsePtrOutput
}

type exponentialResponsePtrType ExponentialResponseArgs

func ExponentialResponsePtr(v *ExponentialResponseArgs) ExponentialResponsePtrInput {
	return (*exponentialResponsePtrType)(v)
}

func (*exponentialResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExponentialResponse)(nil)).Elem()
}

func (i *exponentialResponsePtrType) ToExponentialResponsePtrOutput() ExponentialResponsePtrOutput {
	return i.ToExponentialResponsePtrOutputWithContext(context.Background())
}

func (i *exponentialResponsePtrType) ToExponentialResponsePtrOutputWithContext(ctx context.Context) ExponentialResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExponentialResponsePtrOutput)
}

// Specifies an exponential sequence of buckets that have a width that is proportional to the value of the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): scale * (growth_factor ^ i). Lower bound (1 <= i < N): scale * (growth_factor ^ (i - 1)).
type ExponentialResponseOutput struct{ *pulumi.OutputState }

func (ExponentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExponentialResponse)(nil)).Elem()
}

func (o ExponentialResponseOutput) ToExponentialResponseOutput() ExponentialResponseOutput {
	return o
}

func (o ExponentialResponseOutput) ToExponentialResponseOutputWithContext(ctx context.Context) ExponentialResponseOutput {
	return o
}

func (o ExponentialResponseOutput) ToExponentialResponsePtrOutput() ExponentialResponsePtrOutput {
	return o.ToExponentialResponsePtrOutputWithContext(context.Background())
}

func (o ExponentialResponseOutput) ToExponentialResponsePtrOutputWithContext(ctx context.Context) ExponentialResponsePtrOutput {
	return o.ApplyT(func(v ExponentialResponse) *ExponentialResponse {
		return &v
	}).(ExponentialResponsePtrOutput)
}

// Must be greater than 1.
func (o ExponentialResponseOutput) GrowthFactor() pulumi.Float64Output {
	return o.ApplyT(func(v ExponentialResponse) float64 { return v.GrowthFactor }).(pulumi.Float64Output)
}

// Must be greater than 0.
func (o ExponentialResponseOutput) NumFiniteBuckets() pulumi.IntOutput {
	return o.ApplyT(func(v ExponentialResponse) int { return v.NumFiniteBuckets }).(pulumi.IntOutput)
}

// Must be greater than 0.
func (o ExponentialResponseOutput) Scale() pulumi.Float64Output {
	return o.ApplyT(func(v ExponentialResponse) float64 { return v.Scale }).(pulumi.Float64Output)
}

type ExponentialResponsePtrOutput struct{ *pulumi.OutputState }

func (ExponentialResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExponentialResponse)(nil)).Elem()
}

func (o ExponentialResponsePtrOutput) ToExponentialResponsePtrOutput() ExponentialResponsePtrOutput {
	return o
}

func (o ExponentialResponsePtrOutput) ToExponentialResponsePtrOutputWithContext(ctx context.Context) ExponentialResponsePtrOutput {
	return o
}

func (o ExponentialResponsePtrOutput) Elem() ExponentialResponseOutput {
	return o.ApplyT(func(v *ExponentialResponse) ExponentialResponse { return *v }).(ExponentialResponseOutput)
}

// Must be greater than 1.
func (o ExponentialResponsePtrOutput) GrowthFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ExponentialResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.GrowthFactor
	}).(pulumi.Float64PtrOutput)
}

// Must be greater than 0.
func (o ExponentialResponsePtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExponentialResponse) *int {
		if v == nil {
			return nil
		}
		return &v.NumFiniteBuckets
	}).(pulumi.IntPtrOutput)
}

// Must be greater than 0.
func (o ExponentialResponsePtrOutput) Scale() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ExponentialResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Scale
	}).(pulumi.Float64PtrOutput)
}

// A description of a label.
type LabelDescriptor struct {
	// A human-readable description for the label.
	Description *string `pulumi:"description"`
	// The label key.
	Key *string `pulumi:"key"`
	// The type of data that can be assigned to the label.
	ValueType *string `pulumi:"valueType"`
}

// LabelDescriptorInput is an input type that accepts LabelDescriptorArgs and LabelDescriptorOutput values.
// You can construct a concrete instance of `LabelDescriptorInput` via:
//
//          LabelDescriptorArgs{...}
type LabelDescriptorInput interface {
	pulumi.Input

	ToLabelDescriptorOutput() LabelDescriptorOutput
	ToLabelDescriptorOutputWithContext(context.Context) LabelDescriptorOutput
}

// A description of a label.
type LabelDescriptorArgs struct {
	// A human-readable description for the label.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The label key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The type of data that can be assigned to the label.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
}

func (LabelDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelDescriptor)(nil)).Elem()
}

func (i LabelDescriptorArgs) ToLabelDescriptorOutput() LabelDescriptorOutput {
	return i.ToLabelDescriptorOutputWithContext(context.Background())
}

func (i LabelDescriptorArgs) ToLabelDescriptorOutputWithContext(ctx context.Context) LabelDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelDescriptorOutput)
}

// LabelDescriptorArrayInput is an input type that accepts LabelDescriptorArray and LabelDescriptorArrayOutput values.
// You can construct a concrete instance of `LabelDescriptorArrayInput` via:
//
//          LabelDescriptorArray{ LabelDescriptorArgs{...} }
type LabelDescriptorArrayInput interface {
	pulumi.Input

	ToLabelDescriptorArrayOutput() LabelDescriptorArrayOutput
	ToLabelDescriptorArrayOutputWithContext(context.Context) LabelDescriptorArrayOutput
}

type LabelDescriptorArray []LabelDescriptorInput

func (LabelDescriptorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LabelDescriptor)(nil)).Elem()
}

func (i LabelDescriptorArray) ToLabelDescriptorArrayOutput() LabelDescriptorArrayOutput {
	return i.ToLabelDescriptorArrayOutputWithContext(context.Background())
}

func (i LabelDescriptorArray) ToLabelDescriptorArrayOutputWithContext(ctx context.Context) LabelDescriptorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelDescriptorArrayOutput)
}

// A description of a label.
type LabelDescriptorOutput struct{ *pulumi.OutputState }

func (LabelDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelDescriptor)(nil)).Elem()
}

func (o LabelDescriptorOutput) ToLabelDescriptorOutput() LabelDescriptorOutput {
	return o
}

func (o LabelDescriptorOutput) ToLabelDescriptorOutputWithContext(ctx context.Context) LabelDescriptorOutput {
	return o
}

// A human-readable description for the label.
func (o LabelDescriptorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelDescriptor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The label key.
func (o LabelDescriptorOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelDescriptor) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The type of data that can be assigned to the label.
func (o LabelDescriptorOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelDescriptor) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

type LabelDescriptorArrayOutput struct{ *pulumi.OutputState }

func (LabelDescriptorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LabelDescriptor)(nil)).Elem()
}

func (o LabelDescriptorArrayOutput) ToLabelDescriptorArrayOutput() LabelDescriptorArrayOutput {
	return o
}

func (o LabelDescriptorArrayOutput) ToLabelDescriptorArrayOutputWithContext(ctx context.Context) LabelDescriptorArrayOutput {
	return o
}

func (o LabelDescriptorArrayOutput) Index(i pulumi.IntInput) LabelDescriptorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LabelDescriptor {
		return vs[0].([]LabelDescriptor)[vs[1].(int)]
	}).(LabelDescriptorOutput)
}

// A description of a label.
type LabelDescriptorResponse struct {
	// A human-readable description for the label.
	Description string `pulumi:"description"`
	// The label key.
	Key string `pulumi:"key"`
	// The type of data that can be assigned to the label.
	ValueType string `pulumi:"valueType"`
}

// LabelDescriptorResponseInput is an input type that accepts LabelDescriptorResponseArgs and LabelDescriptorResponseOutput values.
// You can construct a concrete instance of `LabelDescriptorResponseInput` via:
//
//          LabelDescriptorResponseArgs{...}
type LabelDescriptorResponseInput interface {
	pulumi.Input

	ToLabelDescriptorResponseOutput() LabelDescriptorResponseOutput
	ToLabelDescriptorResponseOutputWithContext(context.Context) LabelDescriptorResponseOutput
}

// A description of a label.
type LabelDescriptorResponseArgs struct {
	// A human-readable description for the label.
	Description pulumi.StringInput `pulumi:"description"`
	// The label key.
	Key pulumi.StringInput `pulumi:"key"`
	// The type of data that can be assigned to the label.
	ValueType pulumi.StringInput `pulumi:"valueType"`
}

func (LabelDescriptorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelDescriptorResponse)(nil)).Elem()
}

func (i LabelDescriptorResponseArgs) ToLabelDescriptorResponseOutput() LabelDescriptorResponseOutput {
	return i.ToLabelDescriptorResponseOutputWithContext(context.Background())
}

func (i LabelDescriptorResponseArgs) ToLabelDescriptorResponseOutputWithContext(ctx context.Context) LabelDescriptorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelDescriptorResponseOutput)
}

// LabelDescriptorResponseArrayInput is an input type that accepts LabelDescriptorResponseArray and LabelDescriptorResponseArrayOutput values.
// You can construct a concrete instance of `LabelDescriptorResponseArrayInput` via:
//
//          LabelDescriptorResponseArray{ LabelDescriptorResponseArgs{...} }
type LabelDescriptorResponseArrayInput interface {
	pulumi.Input

	ToLabelDescriptorResponseArrayOutput() LabelDescriptorResponseArrayOutput
	ToLabelDescriptorResponseArrayOutputWithContext(context.Context) LabelDescriptorResponseArrayOutput
}

type LabelDescriptorResponseArray []LabelDescriptorResponseInput

func (LabelDescriptorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LabelDescriptorResponse)(nil)).Elem()
}

func (i LabelDescriptorResponseArray) ToLabelDescriptorResponseArrayOutput() LabelDescriptorResponseArrayOutput {
	return i.ToLabelDescriptorResponseArrayOutputWithContext(context.Background())
}

func (i LabelDescriptorResponseArray) ToLabelDescriptorResponseArrayOutputWithContext(ctx context.Context) LabelDescriptorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelDescriptorResponseArrayOutput)
}

// A description of a label.
type LabelDescriptorResponseOutput struct{ *pulumi.OutputState }

func (LabelDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelDescriptorResponse)(nil)).Elem()
}

func (o LabelDescriptorResponseOutput) ToLabelDescriptorResponseOutput() LabelDescriptorResponseOutput {
	return o
}

func (o LabelDescriptorResponseOutput) ToLabelDescriptorResponseOutputWithContext(ctx context.Context) LabelDescriptorResponseOutput {
	return o
}

// A human-readable description for the label.
func (o LabelDescriptorResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LabelDescriptorResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The label key.
func (o LabelDescriptorResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LabelDescriptorResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The type of data that can be assigned to the label.
func (o LabelDescriptorResponseOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelDescriptorResponse) string { return v.ValueType }).(pulumi.StringOutput)
}

type LabelDescriptorResponseArrayOutput struct{ *pulumi.OutputState }

func (LabelDescriptorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LabelDescriptorResponse)(nil)).Elem()
}

func (o LabelDescriptorResponseArrayOutput) ToLabelDescriptorResponseArrayOutput() LabelDescriptorResponseArrayOutput {
	return o
}

func (o LabelDescriptorResponseArrayOutput) ToLabelDescriptorResponseArrayOutputWithContext(ctx context.Context) LabelDescriptorResponseArrayOutput {
	return o
}

func (o LabelDescriptorResponseArrayOutput) Index(i pulumi.IntInput) LabelDescriptorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LabelDescriptorResponse {
		return vs[0].([]LabelDescriptorResponse)[vs[1].(int)]
	}).(LabelDescriptorResponseOutput)
}

// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow). Each bucket represents a constant absolute uncertainty on the specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): offset + (width * i). Lower bound (1 <= i < N): offset + (width * (i - 1)).
type Linear struct {
	// Must be greater than 0.
	NumFiniteBuckets *int `pulumi:"numFiniteBuckets"`
	// Lower bound of the first bucket.
	Offset *float64 `pulumi:"offset"`
	// Must be greater than 0.
	Width *float64 `pulumi:"width"`
}

// LinearInput is an input type that accepts LinearArgs and LinearOutput values.
// You can construct a concrete instance of `LinearInput` via:
//
//          LinearArgs{...}
type LinearInput interface {
	pulumi.Input

	ToLinearOutput() LinearOutput
	ToLinearOutputWithContext(context.Context) LinearOutput
}

// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow). Each bucket represents a constant absolute uncertainty on the specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): offset + (width * i). Lower bound (1 <= i < N): offset + (width * (i - 1)).
type LinearArgs struct {
	// Must be greater than 0.
	NumFiniteBuckets pulumi.IntPtrInput `pulumi:"numFiniteBuckets"`
	// Lower bound of the first bucket.
	Offset pulumi.Float64PtrInput `pulumi:"offset"`
	// Must be greater than 0.
	Width pulumi.Float64PtrInput `pulumi:"width"`
}

func (LinearArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Linear)(nil)).Elem()
}

func (i LinearArgs) ToLinearOutput() LinearOutput {
	return i.ToLinearOutputWithContext(context.Background())
}

func (i LinearArgs) ToLinearOutputWithContext(ctx context.Context) LinearOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinearOutput)
}

func (i LinearArgs) ToLinearPtrOutput() LinearPtrOutput {
	return i.ToLinearPtrOutputWithContext(context.Background())
}

func (i LinearArgs) ToLinearPtrOutputWithContext(ctx context.Context) LinearPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinearOutput).ToLinearPtrOutputWithContext(ctx)
}

// LinearPtrInput is an input type that accepts LinearArgs, LinearPtr and LinearPtrOutput values.
// You can construct a concrete instance of `LinearPtrInput` via:
//
//          LinearArgs{...}
//
//  or:
//
//          nil
type LinearPtrInput interface {
	pulumi.Input

	ToLinearPtrOutput() LinearPtrOutput
	ToLinearPtrOutputWithContext(context.Context) LinearPtrOutput
}

type linearPtrType LinearArgs

func LinearPtr(v *LinearArgs) LinearPtrInput {
	return (*linearPtrType)(v)
}

func (*linearPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Linear)(nil)).Elem()
}

func (i *linearPtrType) ToLinearPtrOutput() LinearPtrOutput {
	return i.ToLinearPtrOutputWithContext(context.Background())
}

func (i *linearPtrType) ToLinearPtrOutputWithContext(ctx context.Context) LinearPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinearPtrOutput)
}

// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow). Each bucket represents a constant absolute uncertainty on the specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): offset + (width * i). Lower bound (1 <= i < N): offset + (width * (i - 1)).
type LinearOutput struct{ *pulumi.OutputState }

func (LinearOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Linear)(nil)).Elem()
}

func (o LinearOutput) ToLinearOutput() LinearOutput {
	return o
}

func (o LinearOutput) ToLinearOutputWithContext(ctx context.Context) LinearOutput {
	return o
}

func (o LinearOutput) ToLinearPtrOutput() LinearPtrOutput {
	return o.ToLinearPtrOutputWithContext(context.Background())
}

func (o LinearOutput) ToLinearPtrOutputWithContext(ctx context.Context) LinearPtrOutput {
	return o.ApplyT(func(v Linear) *Linear {
		return &v
	}).(LinearPtrOutput)
}

// Must be greater than 0.
func (o LinearOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Linear) *int { return v.NumFiniteBuckets }).(pulumi.IntPtrOutput)
}

// Lower bound of the first bucket.
func (o LinearOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Linear) *float64 { return v.Offset }).(pulumi.Float64PtrOutput)
}

// Must be greater than 0.
func (o LinearOutput) Width() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Linear) *float64 { return v.Width }).(pulumi.Float64PtrOutput)
}

type LinearPtrOutput struct{ *pulumi.OutputState }

func (LinearPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Linear)(nil)).Elem()
}

func (o LinearPtrOutput) ToLinearPtrOutput() LinearPtrOutput {
	return o
}

func (o LinearPtrOutput) ToLinearPtrOutputWithContext(ctx context.Context) LinearPtrOutput {
	return o
}

func (o LinearPtrOutput) Elem() LinearOutput {
	return o.ApplyT(func(v *Linear) Linear { return *v }).(LinearOutput)
}

// Must be greater than 0.
func (o LinearPtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Linear) *int {
		if v == nil {
			return nil
		}
		return v.NumFiniteBuckets
	}).(pulumi.IntPtrOutput)
}

// Lower bound of the first bucket.
func (o LinearPtrOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Linear) *float64 {
		if v == nil {
			return nil
		}
		return v.Offset
	}).(pulumi.Float64PtrOutput)
}

// Must be greater than 0.
func (o LinearPtrOutput) Width() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Linear) *float64 {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.Float64PtrOutput)
}

// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow). Each bucket represents a constant absolute uncertainty on the specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): offset + (width * i). Lower bound (1 <= i < N): offset + (width * (i - 1)).
type LinearResponse struct {
	// Must be greater than 0.
	NumFiniteBuckets int `pulumi:"numFiniteBuckets"`
	// Lower bound of the first bucket.
	Offset float64 `pulumi:"offset"`
	// Must be greater than 0.
	Width float64 `pulumi:"width"`
}

// LinearResponseInput is an input type that accepts LinearResponseArgs and LinearResponseOutput values.
// You can construct a concrete instance of `LinearResponseInput` via:
//
//          LinearResponseArgs{...}
type LinearResponseInput interface {
	pulumi.Input

	ToLinearResponseOutput() LinearResponseOutput
	ToLinearResponseOutputWithContext(context.Context) LinearResponseOutput
}

// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow). Each bucket represents a constant absolute uncertainty on the specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): offset + (width * i). Lower bound (1 <= i < N): offset + (width * (i - 1)).
type LinearResponseArgs struct {
	// Must be greater than 0.
	NumFiniteBuckets pulumi.IntInput `pulumi:"numFiniteBuckets"`
	// Lower bound of the first bucket.
	Offset pulumi.Float64Input `pulumi:"offset"`
	// Must be greater than 0.
	Width pulumi.Float64Input `pulumi:"width"`
}

func (LinearResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinearResponse)(nil)).Elem()
}

func (i LinearResponseArgs) ToLinearResponseOutput() LinearResponseOutput {
	return i.ToLinearResponseOutputWithContext(context.Background())
}

func (i LinearResponseArgs) ToLinearResponseOutputWithContext(ctx context.Context) LinearResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinearResponseOutput)
}

func (i LinearResponseArgs) ToLinearResponsePtrOutput() LinearResponsePtrOutput {
	return i.ToLinearResponsePtrOutputWithContext(context.Background())
}

func (i LinearResponseArgs) ToLinearResponsePtrOutputWithContext(ctx context.Context) LinearResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinearResponseOutput).ToLinearResponsePtrOutputWithContext(ctx)
}

// LinearResponsePtrInput is an input type that accepts LinearResponseArgs, LinearResponsePtr and LinearResponsePtrOutput values.
// You can construct a concrete instance of `LinearResponsePtrInput` via:
//
//          LinearResponseArgs{...}
//
//  or:
//
//          nil
type LinearResponsePtrInput interface {
	pulumi.Input

	ToLinearResponsePtrOutput() LinearResponsePtrOutput
	ToLinearResponsePtrOutputWithContext(context.Context) LinearResponsePtrOutput
}

type linearResponsePtrType LinearResponseArgs

func LinearResponsePtr(v *LinearResponseArgs) LinearResponsePtrInput {
	return (*linearResponsePtrType)(v)
}

func (*linearResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinearResponse)(nil)).Elem()
}

func (i *linearResponsePtrType) ToLinearResponsePtrOutput() LinearResponsePtrOutput {
	return i.ToLinearResponsePtrOutputWithContext(context.Background())
}

func (i *linearResponsePtrType) ToLinearResponsePtrOutputWithContext(ctx context.Context) LinearResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinearResponsePtrOutput)
}

// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow). Each bucket represents a constant absolute uncertainty on the specific value in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has the following boundaries:Upper bound (0 <= i < N-1): offset + (width * i). Lower bound (1 <= i < N): offset + (width * (i - 1)).
type LinearResponseOutput struct{ *pulumi.OutputState }

func (LinearResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinearResponse)(nil)).Elem()
}

func (o LinearResponseOutput) ToLinearResponseOutput() LinearResponseOutput {
	return o
}

func (o LinearResponseOutput) ToLinearResponseOutputWithContext(ctx context.Context) LinearResponseOutput {
	return o
}

func (o LinearResponseOutput) ToLinearResponsePtrOutput() LinearResponsePtrOutput {
	return o.ToLinearResponsePtrOutputWithContext(context.Background())
}

func (o LinearResponseOutput) ToLinearResponsePtrOutputWithContext(ctx context.Context) LinearResponsePtrOutput {
	return o.ApplyT(func(v LinearResponse) *LinearResponse {
		return &v
	}).(LinearResponsePtrOutput)
}

// Must be greater than 0.
func (o LinearResponseOutput) NumFiniteBuckets() pulumi.IntOutput {
	return o.ApplyT(func(v LinearResponse) int { return v.NumFiniteBuckets }).(pulumi.IntOutput)
}

// Lower bound of the first bucket.
func (o LinearResponseOutput) Offset() pulumi.Float64Output {
	return o.ApplyT(func(v LinearResponse) float64 { return v.Offset }).(pulumi.Float64Output)
}

// Must be greater than 0.
func (o LinearResponseOutput) Width() pulumi.Float64Output {
	return o.ApplyT(func(v LinearResponse) float64 { return v.Width }).(pulumi.Float64Output)
}

type LinearResponsePtrOutput struct{ *pulumi.OutputState }

func (LinearResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinearResponse)(nil)).Elem()
}

func (o LinearResponsePtrOutput) ToLinearResponsePtrOutput() LinearResponsePtrOutput {
	return o
}

func (o LinearResponsePtrOutput) ToLinearResponsePtrOutputWithContext(ctx context.Context) LinearResponsePtrOutput {
	return o
}

func (o LinearResponsePtrOutput) Elem() LinearResponseOutput {
	return o.ApplyT(func(v *LinearResponse) LinearResponse { return *v }).(LinearResponseOutput)
}

// Must be greater than 0.
func (o LinearResponsePtrOutput) NumFiniteBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinearResponse) *int {
		if v == nil {
			return nil
		}
		return &v.NumFiniteBuckets
	}).(pulumi.IntPtrOutput)
}

// Lower bound of the first bucket.
func (o LinearResponsePtrOutput) Offset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LinearResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Offset
	}).(pulumi.Float64PtrOutput)
}

// Must be greater than 0.
func (o LinearResponsePtrOutput) Width() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LinearResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Width
	}).(pulumi.Float64PtrOutput)
}

// Specifies a set of log entries that are not to be stored in Logging. If your GCP resource receives a large volume of logs, you can use exclusions to reduce your chargeable logs. Exclusions are processed after log sinks, so you can export log entries before they are excluded. Note that organization-level and folder-level exclusions don't apply to child resources, and that you can't exclude audit log entries.
type LogExclusion struct {
	// Optional. A description of this exclusion.
	Description *string `pulumi:"description"`
	// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
	Disabled *bool `pulumi:"disabled"`
	// Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries. For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:"resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)"
	Filter *string `pulumi:"filter"`
	// Required. A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
	Name *string `pulumi:"name"`
}

// LogExclusionInput is an input type that accepts LogExclusionArgs and LogExclusionOutput values.
// You can construct a concrete instance of `LogExclusionInput` via:
//
//          LogExclusionArgs{...}
type LogExclusionInput interface {
	pulumi.Input

	ToLogExclusionOutput() LogExclusionOutput
	ToLogExclusionOutputWithContext(context.Context) LogExclusionOutput
}

// Specifies a set of log entries that are not to be stored in Logging. If your GCP resource receives a large volume of logs, you can use exclusions to reduce your chargeable logs. Exclusions are processed after log sinks, so you can export log entries before they are excluded. Note that organization-level and folder-level exclusions don't apply to child resources, and that you can't exclude audit log entries.
type LogExclusionArgs struct {
	// Optional. A description of this exclusion.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries. For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:"resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)"
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Required. A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LogExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogExclusion)(nil)).Elem()
}

func (i LogExclusionArgs) ToLogExclusionOutput() LogExclusionOutput {
	return i.ToLogExclusionOutputWithContext(context.Background())
}

func (i LogExclusionArgs) ToLogExclusionOutputWithContext(ctx context.Context) LogExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogExclusionOutput)
}

// LogExclusionArrayInput is an input type that accepts LogExclusionArray and LogExclusionArrayOutput values.
// You can construct a concrete instance of `LogExclusionArrayInput` via:
//
//          LogExclusionArray{ LogExclusionArgs{...} }
type LogExclusionArrayInput interface {
	pulumi.Input

	ToLogExclusionArrayOutput() LogExclusionArrayOutput
	ToLogExclusionArrayOutputWithContext(context.Context) LogExclusionArrayOutput
}

type LogExclusionArray []LogExclusionInput

func (LogExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogExclusion)(nil)).Elem()
}

func (i LogExclusionArray) ToLogExclusionArrayOutput() LogExclusionArrayOutput {
	return i.ToLogExclusionArrayOutputWithContext(context.Background())
}

func (i LogExclusionArray) ToLogExclusionArrayOutputWithContext(ctx context.Context) LogExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogExclusionArrayOutput)
}

// Specifies a set of log entries that are not to be stored in Logging. If your GCP resource receives a large volume of logs, you can use exclusions to reduce your chargeable logs. Exclusions are processed after log sinks, so you can export log entries before they are excluded. Note that organization-level and folder-level exclusions don't apply to child resources, and that you can't exclude audit log entries.
type LogExclusionOutput struct{ *pulumi.OutputState }

func (LogExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogExclusion)(nil)).Elem()
}

func (o LogExclusionOutput) ToLogExclusionOutput() LogExclusionOutput {
	return o
}

func (o LogExclusionOutput) ToLogExclusionOutputWithContext(ctx context.Context) LogExclusionOutput {
	return o
}

// Optional. A description of this exclusion.
func (o LogExclusionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogExclusion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
func (o LogExclusionOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogExclusion) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries. For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:"resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)"
func (o LogExclusionOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogExclusion) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// Required. A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
func (o LogExclusionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogExclusion) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type LogExclusionArrayOutput struct{ *pulumi.OutputState }

func (LogExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogExclusion)(nil)).Elem()
}

func (o LogExclusionArrayOutput) ToLogExclusionArrayOutput() LogExclusionArrayOutput {
	return o
}

func (o LogExclusionArrayOutput) ToLogExclusionArrayOutputWithContext(ctx context.Context) LogExclusionArrayOutput {
	return o
}

func (o LogExclusionArrayOutput) Index(i pulumi.IntInput) LogExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogExclusion {
		return vs[0].([]LogExclusion)[vs[1].(int)]
	}).(LogExclusionOutput)
}

// Specifies a set of log entries that are not to be stored in Logging. If your GCP resource receives a large volume of logs, you can use exclusions to reduce your chargeable logs. Exclusions are processed after log sinks, so you can export log entries before they are excluded. Note that organization-level and folder-level exclusions don't apply to child resources, and that you can't exclude audit log entries.
type LogExclusionResponse struct {
	// The creation timestamp of the exclusion.This field may not be present for older exclusions.
	CreateTime string `pulumi:"createTime"`
	// Optional. A description of this exclusion.
	Description string `pulumi:"description"`
	// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
	Disabled bool `pulumi:"disabled"`
	// Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries. For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:"resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)"
	Filter string `pulumi:"filter"`
	// Required. A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
	Name string `pulumi:"name"`
	// The last update timestamp of the exclusion.This field may not be present for older exclusions.
	UpdateTime string `pulumi:"updateTime"`
}

// LogExclusionResponseInput is an input type that accepts LogExclusionResponseArgs and LogExclusionResponseOutput values.
// You can construct a concrete instance of `LogExclusionResponseInput` via:
//
//          LogExclusionResponseArgs{...}
type LogExclusionResponseInput interface {
	pulumi.Input

	ToLogExclusionResponseOutput() LogExclusionResponseOutput
	ToLogExclusionResponseOutputWithContext(context.Context) LogExclusionResponseOutput
}

// Specifies a set of log entries that are not to be stored in Logging. If your GCP resource receives a large volume of logs, you can use exclusions to reduce your chargeable logs. Exclusions are processed after log sinks, so you can export log entries before they are excluded. Note that organization-level and folder-level exclusions don't apply to child resources, and that you can't exclude audit log entries.
type LogExclusionResponseArgs struct {
	// The creation timestamp of the exclusion.This field may not be present for older exclusions.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Optional. A description of this exclusion.
	Description pulumi.StringInput `pulumi:"description"`
	// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries. For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:"resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)"
	Filter pulumi.StringInput `pulumi:"filter"`
	// Required. A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
	Name pulumi.StringInput `pulumi:"name"`
	// The last update timestamp of the exclusion.This field may not be present for older exclusions.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (LogExclusionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogExclusionResponse)(nil)).Elem()
}

func (i LogExclusionResponseArgs) ToLogExclusionResponseOutput() LogExclusionResponseOutput {
	return i.ToLogExclusionResponseOutputWithContext(context.Background())
}

func (i LogExclusionResponseArgs) ToLogExclusionResponseOutputWithContext(ctx context.Context) LogExclusionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogExclusionResponseOutput)
}

// LogExclusionResponseArrayInput is an input type that accepts LogExclusionResponseArray and LogExclusionResponseArrayOutput values.
// You can construct a concrete instance of `LogExclusionResponseArrayInput` via:
//
//          LogExclusionResponseArray{ LogExclusionResponseArgs{...} }
type LogExclusionResponseArrayInput interface {
	pulumi.Input

	ToLogExclusionResponseArrayOutput() LogExclusionResponseArrayOutput
	ToLogExclusionResponseArrayOutputWithContext(context.Context) LogExclusionResponseArrayOutput
}

type LogExclusionResponseArray []LogExclusionResponseInput

func (LogExclusionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogExclusionResponse)(nil)).Elem()
}

func (i LogExclusionResponseArray) ToLogExclusionResponseArrayOutput() LogExclusionResponseArrayOutput {
	return i.ToLogExclusionResponseArrayOutputWithContext(context.Background())
}

func (i LogExclusionResponseArray) ToLogExclusionResponseArrayOutputWithContext(ctx context.Context) LogExclusionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogExclusionResponseArrayOutput)
}

// Specifies a set of log entries that are not to be stored in Logging. If your GCP resource receives a large volume of logs, you can use exclusions to reduce your chargeable logs. Exclusions are processed after log sinks, so you can export log entries before they are excluded. Note that organization-level and folder-level exclusions don't apply to child resources, and that you can't exclude audit log entries.
type LogExclusionResponseOutput struct{ *pulumi.OutputState }

func (LogExclusionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogExclusionResponse)(nil)).Elem()
}

func (o LogExclusionResponseOutput) ToLogExclusionResponseOutput() LogExclusionResponseOutput {
	return o
}

func (o LogExclusionResponseOutput) ToLogExclusionResponseOutputWithContext(ctx context.Context) LogExclusionResponseOutput {
	return o
}

// The creation timestamp of the exclusion.This field may not be present for older exclusions.
func (o LogExclusionResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusionResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. A description of this exclusion.
func (o LogExclusionResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusionResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.
func (o LogExclusionResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LogExclusionResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries. For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:"resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)"
func (o LogExclusionResponseOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusionResponse) string { return v.Filter }).(pulumi.StringOutput)
}

// Required. A client-assigned identifier, such as "load-balancer-exclusion". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
func (o LogExclusionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The last update timestamp of the exclusion.This field may not be present for older exclusions.
func (o LogExclusionResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LogExclusionResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type LogExclusionResponseArrayOutput struct{ *pulumi.OutputState }

func (LogExclusionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogExclusionResponse)(nil)).Elem()
}

func (o LogExclusionResponseArrayOutput) ToLogExclusionResponseArrayOutput() LogExclusionResponseArrayOutput {
	return o
}

func (o LogExclusionResponseArrayOutput) ToLogExclusionResponseArrayOutputWithContext(ctx context.Context) LogExclusionResponseArrayOutput {
	return o
}

func (o LogExclusionResponseArrayOutput) Index(i pulumi.IntInput) LogExclusionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogExclusionResponse {
		return vs[0].([]LogExclusionResponse)[vs[1].(int)]
	}).(LogExclusionResponseOutput)
}

// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
type MetricDescriptor struct {
	// A detailed description of the metric, which can be used in documentation.
	Description *string `pulumi:"description"`
	// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
	DisplayName *string `pulumi:"displayName"`
	// The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
	Labels []LabelDescriptor `pulumi:"labels"`
	// Optional. The launch stage of the metric definition.
	LaunchStage *string `pulumi:"launchStage"`
	// Optional. Metadata which can be used to guide usage of the metric.
	Metadata *MetricDescriptorMetadata `pulumi:"metadata"`
	// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
	MetricKind *string `pulumi:"metricKind"`
	// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
	MonitoredResourceTypes []string `pulumi:"monitoredResourceTypes"`
	// The resource name of the metric descriptor.
	Name *string `pulumi:"name"`
	// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name custom.googleapis.com or external.googleapis.com. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
	Type *string `pulumi:"type"`
	// The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.Different systems might scale the values to be more easily displayed (so a value of 0.02kBy might be displayed as 20By, and a value of 3523kBy might be displayed as 3.5MBy). However, if the unit is kBy, then the value of the metric is always in thousands of bytes, no matter how it might be displayed.If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as 12005.Alternatively, if you want a custom metric to record data in a more granular way, you can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).The supported units are a subset of The Unified Code for Units of Measure (https://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT) bit bit By byte s second min minute h hour d day 1 dimensionlessPrefixes (PREFIX) k kilo (10^3) M mega (10^6) G giga (10^9) T tera (10^12) P peta (10^15) E exa (10^18) Z zetta (10^21) Y yotta (10^24) m milli (10^-3) u micro (10^-6) n nano (10^-9) p pico (10^-12) f femto (10^-15) a atto (10^-18) z zepto (10^-21) y yocto (10^-24) Ki kibi (2^10) Mi mebi (2^20) Gi gibi (2^30) Ti tebi (2^40) Pi pebi (2^50)GrammarThe grammar also includes these connectors: / division or ratio (as an infix operator). For examples, kBy/{email} or MiBy/10ms (although you should almost never have /s in a metric unit; rates should always be computed at query time from the underlying cumulative or delta value). . multiplication or composition (as an infix operator). For examples, GBy.d or k{watt}.h.The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: Annotation is just a comment if it follows a UNIT. If the annotation is used alone, then the unit is equivalent to 1. For examples, {request}/s == 1/s, By{transmitted}/s == By/s. NAME is a sequence of non-blank printable ASCII characters not containing { or }. 1 represents a unitary dimensionless unit (https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in 1/s. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as 1/d or {new-users}/d (and a metric value 5 would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as 1000/d or k1/d or k{page_views}/d (and a metric value of 5.3 would mean "5300 page views per day"). % represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value 3 means "3 percent"). 10^2.% indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value 0.03 means "3 percent").
	Unit *string `pulumi:"unit"`
	// Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
	ValueType *string `pulumi:"valueType"`
}

// MetricDescriptorInput is an input type that accepts MetricDescriptorArgs and MetricDescriptorOutput values.
// You can construct a concrete instance of `MetricDescriptorInput` via:
//
//          MetricDescriptorArgs{...}
type MetricDescriptorInput interface {
	pulumi.Input

	ToMetricDescriptorOutput() MetricDescriptorOutput
	ToMetricDescriptorOutputWithContext(context.Context) MetricDescriptorOutput
}

// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
type MetricDescriptorArgs struct {
	// A detailed description of the metric, which can be used in documentation.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
	Labels LabelDescriptorArrayInput `pulumi:"labels"`
	// Optional. The launch stage of the metric definition.
	LaunchStage pulumi.StringPtrInput `pulumi:"launchStage"`
	// Optional. Metadata which can be used to guide usage of the metric.
	Metadata MetricDescriptorMetadataPtrInput `pulumi:"metadata"`
	// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
	MetricKind pulumi.StringPtrInput `pulumi:"metricKind"`
	// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
	MonitoredResourceTypes pulumi.StringArrayInput `pulumi:"monitoredResourceTypes"`
	// The resource name of the metric descriptor.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name custom.googleapis.com or external.googleapis.com. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.Different systems might scale the values to be more easily displayed (so a value of 0.02kBy might be displayed as 20By, and a value of 3523kBy might be displayed as 3.5MBy). However, if the unit is kBy, then the value of the metric is always in thousands of bytes, no matter how it might be displayed.If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as 12005.Alternatively, if you want a custom metric to record data in a more granular way, you can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).The supported units are a subset of The Unified Code for Units of Measure (https://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT) bit bit By byte s second min minute h hour d day 1 dimensionlessPrefixes (PREFIX) k kilo (10^3) M mega (10^6) G giga (10^9) T tera (10^12) P peta (10^15) E exa (10^18) Z zetta (10^21) Y yotta (10^24) m milli (10^-3) u micro (10^-6) n nano (10^-9) p pico (10^-12) f femto (10^-15) a atto (10^-18) z zepto (10^-21) y yocto (10^-24) Ki kibi (2^10) Mi mebi (2^20) Gi gibi (2^30) Ti tebi (2^40) Pi pebi (2^50)GrammarThe grammar also includes these connectors: / division or ratio (as an infix operator). For examples, kBy/{email} or MiBy/10ms (although you should almost never have /s in a metric unit; rates should always be computed at query time from the underlying cumulative or delta value). . multiplication or composition (as an infix operator). For examples, GBy.d or k{watt}.h.The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: Annotation is just a comment if it follows a UNIT. If the annotation is used alone, then the unit is equivalent to 1. For examples, {request}/s == 1/s, By{transmitted}/s == By/s. NAME is a sequence of non-blank printable ASCII characters not containing { or }. 1 represents a unitary dimensionless unit (https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in 1/s. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as 1/d or {new-users}/d (and a metric value 5 would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as 1000/d or k1/d or k{page_views}/d (and a metric value of 5.3 would mean "5300 page views per day"). % represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value 3 means "3 percent"). 10^2.% indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value 0.03 means "3 percent").
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
}

func (MetricDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptor)(nil)).Elem()
}

func (i MetricDescriptorArgs) ToMetricDescriptorOutput() MetricDescriptorOutput {
	return i.ToMetricDescriptorOutputWithContext(context.Background())
}

func (i MetricDescriptorArgs) ToMetricDescriptorOutputWithContext(ctx context.Context) MetricDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorOutput)
}

func (i MetricDescriptorArgs) ToMetricDescriptorPtrOutput() MetricDescriptorPtrOutput {
	return i.ToMetricDescriptorPtrOutputWithContext(context.Background())
}

func (i MetricDescriptorArgs) ToMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorOutput).ToMetricDescriptorPtrOutputWithContext(ctx)
}

// MetricDescriptorPtrInput is an input type that accepts MetricDescriptorArgs, MetricDescriptorPtr and MetricDescriptorPtrOutput values.
// You can construct a concrete instance of `MetricDescriptorPtrInput` via:
//
//          MetricDescriptorArgs{...}
//
//  or:
//
//          nil
type MetricDescriptorPtrInput interface {
	pulumi.Input

	ToMetricDescriptorPtrOutput() MetricDescriptorPtrOutput
	ToMetricDescriptorPtrOutputWithContext(context.Context) MetricDescriptorPtrOutput
}

type metricDescriptorPtrType MetricDescriptorArgs

func MetricDescriptorPtr(v *MetricDescriptorArgs) MetricDescriptorPtrInput {
	return (*metricDescriptorPtrType)(v)
}

func (*metricDescriptorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptor)(nil)).Elem()
}

func (i *metricDescriptorPtrType) ToMetricDescriptorPtrOutput() MetricDescriptorPtrOutput {
	return i.ToMetricDescriptorPtrOutputWithContext(context.Background())
}

func (i *metricDescriptorPtrType) ToMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorPtrOutput)
}

// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
type MetricDescriptorOutput struct{ *pulumi.OutputState }

func (MetricDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptor)(nil)).Elem()
}

func (o MetricDescriptorOutput) ToMetricDescriptorOutput() MetricDescriptorOutput {
	return o
}

func (o MetricDescriptorOutput) ToMetricDescriptorOutputWithContext(ctx context.Context) MetricDescriptorOutput {
	return o
}

func (o MetricDescriptorOutput) ToMetricDescriptorPtrOutput() MetricDescriptorPtrOutput {
	return o.ToMetricDescriptorPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorOutput) ToMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricDescriptorPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *MetricDescriptor {
		return &v
	}).(MetricDescriptorPtrOutput)
}

// A detailed description of the metric, which can be used in documentation.
func (o MetricDescriptorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
func (o MetricDescriptorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
func (o MetricDescriptorOutput) Labels() LabelDescriptorArrayOutput {
	return o.ApplyT(func(v MetricDescriptor) []LabelDescriptor { return v.Labels }).(LabelDescriptorArrayOutput)
}

// Optional. The launch stage of the metric definition.
func (o MetricDescriptorOutput) LaunchStage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.LaunchStage }).(pulumi.StringPtrOutput)
}

// Optional. Metadata which can be used to guide usage of the metric.
func (o MetricDescriptorOutput) Metadata() MetricDescriptorMetadataPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *MetricDescriptorMetadata { return v.Metadata }).(MetricDescriptorMetadataPtrOutput)
}

// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
func (o MetricDescriptorOutput) MetricKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.MetricKind }).(pulumi.StringPtrOutput)
}

// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
func (o MetricDescriptorOutput) MonitoredResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricDescriptor) []string { return v.MonitoredResourceTypes }).(pulumi.StringArrayOutput)
}

// The resource name of the metric descriptor.
func (o MetricDescriptorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name custom.googleapis.com or external.googleapis.com. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
func (o MetricDescriptorOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.Different systems might scale the values to be more easily displayed (so a value of 0.02kBy might be displayed as 20By, and a value of 3523kBy might be displayed as 3.5MBy). However, if the unit is kBy, then the value of the metric is always in thousands of bytes, no matter how it might be displayed.If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as 12005.Alternatively, if you want a custom metric to record data in a more granular way, you can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).The supported units are a subset of The Unified Code for Units of Measure (https://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT) bit bit By byte s second min minute h hour d day 1 dimensionlessPrefixes (PREFIX) k kilo (10^3) M mega (10^6) G giga (10^9) T tera (10^12) P peta (10^15) E exa (10^18) Z zetta (10^21) Y yotta (10^24) m milli (10^-3) u micro (10^-6) n nano (10^-9) p pico (10^-12) f femto (10^-15) a atto (10^-18) z zepto (10^-21) y yocto (10^-24) Ki kibi (2^10) Mi mebi (2^20) Gi gibi (2^30) Ti tebi (2^40) Pi pebi (2^50)GrammarThe grammar also includes these connectors: / division or ratio (as an infix operator). For examples, kBy/{email} or MiBy/10ms (although you should almost never have /s in a metric unit; rates should always be computed at query time from the underlying cumulative or delta value). . multiplication or composition (as an infix operator). For examples, GBy.d or k{watt}.h.The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: Annotation is just a comment if it follows a UNIT. If the annotation is used alone, then the unit is equivalent to 1. For examples, {request}/s == 1/s, By{transmitted}/s == By/s. NAME is a sequence of non-blank printable ASCII characters not containing { or }. 1 represents a unitary dimensionless unit (https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in 1/s. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as 1/d or {new-users}/d (and a metric value 5 would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as 1000/d or k1/d or k{page_views}/d (and a metric value of 5.3 would mean "5300 page views per day"). % represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value 3 means "3 percent"). 10^2.% indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value 0.03 means "3 percent").
func (o MetricDescriptorOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
func (o MetricDescriptorOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

type MetricDescriptorPtrOutput struct{ *pulumi.OutputState }

func (MetricDescriptorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptor)(nil)).Elem()
}

func (o MetricDescriptorPtrOutput) ToMetricDescriptorPtrOutput() MetricDescriptorPtrOutput {
	return o
}

func (o MetricDescriptorPtrOutput) ToMetricDescriptorPtrOutputWithContext(ctx context.Context) MetricDescriptorPtrOutput {
	return o
}

func (o MetricDescriptorPtrOutput) Elem() MetricDescriptorOutput {
	return o.ApplyT(func(v *MetricDescriptor) MetricDescriptor { return *v }).(MetricDescriptorOutput)
}

// A detailed description of the metric, which can be used in documentation.
func (o MetricDescriptorPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
func (o MetricDescriptorPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
func (o MetricDescriptorPtrOutput) Labels() LabelDescriptorArrayOutput {
	return o.ApplyT(func(v *MetricDescriptor) []LabelDescriptor {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(LabelDescriptorArrayOutput)
}

// Optional. The launch stage of the metric definition.
func (o MetricDescriptorPtrOutput) LaunchStage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.LaunchStage
	}).(pulumi.StringPtrOutput)
}

// Optional. Metadata which can be used to guide usage of the metric.
func (o MetricDescriptorPtrOutput) Metadata() MetricDescriptorMetadataPtrOutput {
	return o.ApplyT(func(v *MetricDescriptor) *MetricDescriptorMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetricDescriptorMetadataPtrOutput)
}

// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
func (o MetricDescriptorPtrOutput) MetricKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.MetricKind
	}).(pulumi.StringPtrOutput)
}

// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
func (o MetricDescriptorPtrOutput) MonitoredResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricDescriptor) []string {
		if v == nil {
			return nil
		}
		return v.MonitoredResourceTypes
	}).(pulumi.StringArrayOutput)
}

// The resource name of the metric descriptor.
func (o MetricDescriptorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name custom.googleapis.com or external.googleapis.com. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
func (o MetricDescriptorPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.Different systems might scale the values to be more easily displayed (so a value of 0.02kBy might be displayed as 20By, and a value of 3523kBy might be displayed as 3.5MBy). However, if the unit is kBy, then the value of the metric is always in thousands of bytes, no matter how it might be displayed.If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as 12005.Alternatively, if you want a custom metric to record data in a more granular way, you can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).The supported units are a subset of The Unified Code for Units of Measure (https://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT) bit bit By byte s second min minute h hour d day 1 dimensionlessPrefixes (PREFIX) k kilo (10^3) M mega (10^6) G giga (10^9) T tera (10^12) P peta (10^15) E exa (10^18) Z zetta (10^21) Y yotta (10^24) m milli (10^-3) u micro (10^-6) n nano (10^-9) p pico (10^-12) f femto (10^-15) a atto (10^-18) z zepto (10^-21) y yocto (10^-24) Ki kibi (2^10) Mi mebi (2^20) Gi gibi (2^30) Ti tebi (2^40) Pi pebi (2^50)GrammarThe grammar also includes these connectors: / division or ratio (as an infix operator). For examples, kBy/{email} or MiBy/10ms (although you should almost never have /s in a metric unit; rates should always be computed at query time from the underlying cumulative or delta value). . multiplication or composition (as an infix operator). For examples, GBy.d or k{watt}.h.The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: Annotation is just a comment if it follows a UNIT. If the annotation is used alone, then the unit is equivalent to 1. For examples, {request}/s == 1/s, By{transmitted}/s == By/s. NAME is a sequence of non-blank printable ASCII characters not containing { or }. 1 represents a unitary dimensionless unit (https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in 1/s. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as 1/d or {new-users}/d (and a metric value 5 would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as 1000/d or k1/d or k{page_views}/d (and a metric value of 5.3 would mean "5300 page views per day"). % represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value 3 means "3 percent"). 10^2.% indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value 0.03 means "3 percent").
func (o MetricDescriptorPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
func (o MetricDescriptorPtrOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.ValueType
	}).(pulumi.StringPtrOutput)
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptorMetadata struct {
	// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
	IngestDelay *string `pulumi:"ingestDelay"`
	// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
	SamplePeriod *string `pulumi:"samplePeriod"`
}

// MetricDescriptorMetadataInput is an input type that accepts MetricDescriptorMetadataArgs and MetricDescriptorMetadataOutput values.
// You can construct a concrete instance of `MetricDescriptorMetadataInput` via:
//
//          MetricDescriptorMetadataArgs{...}
type MetricDescriptorMetadataInput interface {
	pulumi.Input

	ToMetricDescriptorMetadataOutput() MetricDescriptorMetadataOutput
	ToMetricDescriptorMetadataOutputWithContext(context.Context) MetricDescriptorMetadataOutput
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptorMetadataArgs struct {
	// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
	IngestDelay pulumi.StringPtrInput `pulumi:"ingestDelay"`
	// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
	SamplePeriod pulumi.StringPtrInput `pulumi:"samplePeriod"`
}

func (MetricDescriptorMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorMetadata)(nil)).Elem()
}

func (i MetricDescriptorMetadataArgs) ToMetricDescriptorMetadataOutput() MetricDescriptorMetadataOutput {
	return i.ToMetricDescriptorMetadataOutputWithContext(context.Background())
}

func (i MetricDescriptorMetadataArgs) ToMetricDescriptorMetadataOutputWithContext(ctx context.Context) MetricDescriptorMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorMetadataOutput)
}

func (i MetricDescriptorMetadataArgs) ToMetricDescriptorMetadataPtrOutput() MetricDescriptorMetadataPtrOutput {
	return i.ToMetricDescriptorMetadataPtrOutputWithContext(context.Background())
}

func (i MetricDescriptorMetadataArgs) ToMetricDescriptorMetadataPtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorMetadataOutput).ToMetricDescriptorMetadataPtrOutputWithContext(ctx)
}

// MetricDescriptorMetadataPtrInput is an input type that accepts MetricDescriptorMetadataArgs, MetricDescriptorMetadataPtr and MetricDescriptorMetadataPtrOutput values.
// You can construct a concrete instance of `MetricDescriptorMetadataPtrInput` via:
//
//          MetricDescriptorMetadataArgs{...}
//
//  or:
//
//          nil
type MetricDescriptorMetadataPtrInput interface {
	pulumi.Input

	ToMetricDescriptorMetadataPtrOutput() MetricDescriptorMetadataPtrOutput
	ToMetricDescriptorMetadataPtrOutputWithContext(context.Context) MetricDescriptorMetadataPtrOutput
}

type metricDescriptorMetadataPtrType MetricDescriptorMetadataArgs

func MetricDescriptorMetadataPtr(v *MetricDescriptorMetadataArgs) MetricDescriptorMetadataPtrInput {
	return (*metricDescriptorMetadataPtrType)(v)
}

func (*metricDescriptorMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorMetadata)(nil)).Elem()
}

func (i *metricDescriptorMetadataPtrType) ToMetricDescriptorMetadataPtrOutput() MetricDescriptorMetadataPtrOutput {
	return i.ToMetricDescriptorMetadataPtrOutputWithContext(context.Background())
}

func (i *metricDescriptorMetadataPtrType) ToMetricDescriptorMetadataPtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorMetadataPtrOutput)
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptorMetadataOutput struct{ *pulumi.OutputState }

func (MetricDescriptorMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorMetadata)(nil)).Elem()
}

func (o MetricDescriptorMetadataOutput) ToMetricDescriptorMetadataOutput() MetricDescriptorMetadataOutput {
	return o
}

func (o MetricDescriptorMetadataOutput) ToMetricDescriptorMetadataOutputWithContext(ctx context.Context) MetricDescriptorMetadataOutput {
	return o
}

func (o MetricDescriptorMetadataOutput) ToMetricDescriptorMetadataPtrOutput() MetricDescriptorMetadataPtrOutput {
	return o.ToMetricDescriptorMetadataPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorMetadataOutput) ToMetricDescriptorMetadataPtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataPtrOutput {
	return o.ApplyT(func(v MetricDescriptorMetadata) *MetricDescriptorMetadata {
		return &v
	}).(MetricDescriptorMetadataPtrOutput)
}

// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
func (o MetricDescriptorMetadataOutput) IngestDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptorMetadata) *string { return v.IngestDelay }).(pulumi.StringPtrOutput)
}

// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
func (o MetricDescriptorMetadataOutput) SamplePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptorMetadata) *string { return v.SamplePeriod }).(pulumi.StringPtrOutput)
}

type MetricDescriptorMetadataPtrOutput struct{ *pulumi.OutputState }

func (MetricDescriptorMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorMetadata)(nil)).Elem()
}

func (o MetricDescriptorMetadataPtrOutput) ToMetricDescriptorMetadataPtrOutput() MetricDescriptorMetadataPtrOutput {
	return o
}

func (o MetricDescriptorMetadataPtrOutput) ToMetricDescriptorMetadataPtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataPtrOutput {
	return o
}

func (o MetricDescriptorMetadataPtrOutput) Elem() MetricDescriptorMetadataOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadata) MetricDescriptorMetadata { return *v }).(MetricDescriptorMetadataOutput)
}

// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
func (o MetricDescriptorMetadataPtrOutput) IngestDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadata) *string {
		if v == nil {
			return nil
		}
		return v.IngestDelay
	}).(pulumi.StringPtrOutput)
}

// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
func (o MetricDescriptorMetadataPtrOutput) SamplePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadata) *string {
		if v == nil {
			return nil
		}
		return v.SamplePeriod
	}).(pulumi.StringPtrOutput)
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptorMetadataResponse struct {
	// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
	IngestDelay string `pulumi:"ingestDelay"`
	// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
	SamplePeriod string `pulumi:"samplePeriod"`
}

// MetricDescriptorMetadataResponseInput is an input type that accepts MetricDescriptorMetadataResponseArgs and MetricDescriptorMetadataResponseOutput values.
// You can construct a concrete instance of `MetricDescriptorMetadataResponseInput` via:
//
//          MetricDescriptorMetadataResponseArgs{...}
type MetricDescriptorMetadataResponseInput interface {
	pulumi.Input

	ToMetricDescriptorMetadataResponseOutput() MetricDescriptorMetadataResponseOutput
	ToMetricDescriptorMetadataResponseOutputWithContext(context.Context) MetricDescriptorMetadataResponseOutput
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptorMetadataResponseArgs struct {
	// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
	IngestDelay pulumi.StringInput `pulumi:"ingestDelay"`
	// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
	SamplePeriod pulumi.StringInput `pulumi:"samplePeriod"`
}

func (MetricDescriptorMetadataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorMetadataResponse)(nil)).Elem()
}

func (i MetricDescriptorMetadataResponseArgs) ToMetricDescriptorMetadataResponseOutput() MetricDescriptorMetadataResponseOutput {
	return i.ToMetricDescriptorMetadataResponseOutputWithContext(context.Background())
}

func (i MetricDescriptorMetadataResponseArgs) ToMetricDescriptorMetadataResponseOutputWithContext(ctx context.Context) MetricDescriptorMetadataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorMetadataResponseOutput)
}

func (i MetricDescriptorMetadataResponseArgs) ToMetricDescriptorMetadataResponsePtrOutput() MetricDescriptorMetadataResponsePtrOutput {
	return i.ToMetricDescriptorMetadataResponsePtrOutputWithContext(context.Background())
}

func (i MetricDescriptorMetadataResponseArgs) ToMetricDescriptorMetadataResponsePtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorMetadataResponseOutput).ToMetricDescriptorMetadataResponsePtrOutputWithContext(ctx)
}

// MetricDescriptorMetadataResponsePtrInput is an input type that accepts MetricDescriptorMetadataResponseArgs, MetricDescriptorMetadataResponsePtr and MetricDescriptorMetadataResponsePtrOutput values.
// You can construct a concrete instance of `MetricDescriptorMetadataResponsePtrInput` via:
//
//          MetricDescriptorMetadataResponseArgs{...}
//
//  or:
//
//          nil
type MetricDescriptorMetadataResponsePtrInput interface {
	pulumi.Input

	ToMetricDescriptorMetadataResponsePtrOutput() MetricDescriptorMetadataResponsePtrOutput
	ToMetricDescriptorMetadataResponsePtrOutputWithContext(context.Context) MetricDescriptorMetadataResponsePtrOutput
}

type metricDescriptorMetadataResponsePtrType MetricDescriptorMetadataResponseArgs

func MetricDescriptorMetadataResponsePtr(v *MetricDescriptorMetadataResponseArgs) MetricDescriptorMetadataResponsePtrInput {
	return (*metricDescriptorMetadataResponsePtrType)(v)
}

func (*metricDescriptorMetadataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorMetadataResponse)(nil)).Elem()
}

func (i *metricDescriptorMetadataResponsePtrType) ToMetricDescriptorMetadataResponsePtrOutput() MetricDescriptorMetadataResponsePtrOutput {
	return i.ToMetricDescriptorMetadataResponsePtrOutputWithContext(context.Background())
}

func (i *metricDescriptorMetadataResponsePtrType) ToMetricDescriptorMetadataResponsePtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorMetadataResponsePtrOutput)
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptorMetadataResponseOutput struct{ *pulumi.OutputState }

func (MetricDescriptorMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorMetadataResponse)(nil)).Elem()
}

func (o MetricDescriptorMetadataResponseOutput) ToMetricDescriptorMetadataResponseOutput() MetricDescriptorMetadataResponseOutput {
	return o
}

func (o MetricDescriptorMetadataResponseOutput) ToMetricDescriptorMetadataResponseOutputWithContext(ctx context.Context) MetricDescriptorMetadataResponseOutput {
	return o
}

func (o MetricDescriptorMetadataResponseOutput) ToMetricDescriptorMetadataResponsePtrOutput() MetricDescriptorMetadataResponsePtrOutput {
	return o.ToMetricDescriptorMetadataResponsePtrOutputWithContext(context.Background())
}

func (o MetricDescriptorMetadataResponseOutput) ToMetricDescriptorMetadataResponsePtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataResponsePtrOutput {
	return o.ApplyT(func(v MetricDescriptorMetadataResponse) *MetricDescriptorMetadataResponse {
		return &v
	}).(MetricDescriptorMetadataResponsePtrOutput)
}

// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
func (o MetricDescriptorMetadataResponseOutput) IngestDelay() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDescriptorMetadataResponse) string { return v.IngestDelay }).(pulumi.StringOutput)
}

// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
func (o MetricDescriptorMetadataResponseOutput) SamplePeriod() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDescriptorMetadataResponse) string { return v.SamplePeriod }).(pulumi.StringOutput)
}

type MetricDescriptorMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (MetricDescriptorMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorMetadataResponse)(nil)).Elem()
}

func (o MetricDescriptorMetadataResponsePtrOutput) ToMetricDescriptorMetadataResponsePtrOutput() MetricDescriptorMetadataResponsePtrOutput {
	return o
}

func (o MetricDescriptorMetadataResponsePtrOutput) ToMetricDescriptorMetadataResponsePtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataResponsePtrOutput {
	return o
}

func (o MetricDescriptorMetadataResponsePtrOutput) Elem() MetricDescriptorMetadataResponseOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadataResponse) MetricDescriptorMetadataResponse { return *v }).(MetricDescriptorMetadataResponseOutput)
}

// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
func (o MetricDescriptorMetadataResponsePtrOutput) IngestDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IngestDelay
	}).(pulumi.StringPtrOutput)
}

// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
func (o MetricDescriptorMetadataResponsePtrOutput) SamplePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SamplePeriod
	}).(pulumi.StringPtrOutput)
}

// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
type MetricDescriptorResponse struct {
	// A detailed description of the metric, which can be used in documentation.
	Description string `pulumi:"description"`
	// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
	DisplayName string `pulumi:"displayName"`
	// The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
	Labels []LabelDescriptorResponse `pulumi:"labels"`
	// Optional. The launch stage of the metric definition.
	LaunchStage string `pulumi:"launchStage"`
	// Optional. Metadata which can be used to guide usage of the metric.
	Metadata MetricDescriptorMetadataResponse `pulumi:"metadata"`
	// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
	MetricKind string `pulumi:"metricKind"`
	// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
	MonitoredResourceTypes []string `pulumi:"monitoredResourceTypes"`
	// The resource name of the metric descriptor.
	Name string `pulumi:"name"`
	// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name custom.googleapis.com or external.googleapis.com. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
	Type string `pulumi:"type"`
	// The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.Different systems might scale the values to be more easily displayed (so a value of 0.02kBy might be displayed as 20By, and a value of 3523kBy might be displayed as 3.5MBy). However, if the unit is kBy, then the value of the metric is always in thousands of bytes, no matter how it might be displayed.If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as 12005.Alternatively, if you want a custom metric to record data in a more granular way, you can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).The supported units are a subset of The Unified Code for Units of Measure (https://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT) bit bit By byte s second min minute h hour d day 1 dimensionlessPrefixes (PREFIX) k kilo (10^3) M mega (10^6) G giga (10^9) T tera (10^12) P peta (10^15) E exa (10^18) Z zetta (10^21) Y yotta (10^24) m milli (10^-3) u micro (10^-6) n nano (10^-9) p pico (10^-12) f femto (10^-15) a atto (10^-18) z zepto (10^-21) y yocto (10^-24) Ki kibi (2^10) Mi mebi (2^20) Gi gibi (2^30) Ti tebi (2^40) Pi pebi (2^50)GrammarThe grammar also includes these connectors: / division or ratio (as an infix operator). For examples, kBy/{email} or MiBy/10ms (although you should almost never have /s in a metric unit; rates should always be computed at query time from the underlying cumulative or delta value). . multiplication or composition (as an infix operator). For examples, GBy.d or k{watt}.h.The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: Annotation is just a comment if it follows a UNIT. If the annotation is used alone, then the unit is equivalent to 1. For examples, {request}/s == 1/s, By{transmitted}/s == By/s. NAME is a sequence of non-blank printable ASCII characters not containing { or }. 1 represents a unitary dimensionless unit (https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in 1/s. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as 1/d or {new-users}/d (and a metric value 5 would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as 1000/d or k1/d or k{page_views}/d (and a metric value of 5.3 would mean "5300 page views per day"). % represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value 3 means "3 percent"). 10^2.% indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value 0.03 means "3 percent").
	Unit string `pulumi:"unit"`
	// Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
	ValueType string `pulumi:"valueType"`
}

// MetricDescriptorResponseInput is an input type that accepts MetricDescriptorResponseArgs and MetricDescriptorResponseOutput values.
// You can construct a concrete instance of `MetricDescriptorResponseInput` via:
//
//          MetricDescriptorResponseArgs{...}
type MetricDescriptorResponseInput interface {
	pulumi.Input

	ToMetricDescriptorResponseOutput() MetricDescriptorResponseOutput
	ToMetricDescriptorResponseOutputWithContext(context.Context) MetricDescriptorResponseOutput
}

// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
type MetricDescriptorResponseArgs struct {
	// A detailed description of the metric, which can be used in documentation.
	Description pulumi.StringInput `pulumi:"description"`
	// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
	Labels LabelDescriptorResponseArrayInput `pulumi:"labels"`
	// Optional. The launch stage of the metric definition.
	LaunchStage pulumi.StringInput `pulumi:"launchStage"`
	// Optional. Metadata which can be used to guide usage of the metric.
	Metadata MetricDescriptorMetadataResponseInput `pulumi:"metadata"`
	// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
	MetricKind pulumi.StringInput `pulumi:"metricKind"`
	// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
	MonitoredResourceTypes pulumi.StringArrayInput `pulumi:"monitoredResourceTypes"`
	// The resource name of the metric descriptor.
	Name pulumi.StringInput `pulumi:"name"`
	// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name custom.googleapis.com or external.googleapis.com. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
	Type pulumi.StringInput `pulumi:"type"`
	// The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.Different systems might scale the values to be more easily displayed (so a value of 0.02kBy might be displayed as 20By, and a value of 3523kBy might be displayed as 3.5MBy). However, if the unit is kBy, then the value of the metric is always in thousands of bytes, no matter how it might be displayed.If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as 12005.Alternatively, if you want a custom metric to record data in a more granular way, you can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).The supported units are a subset of The Unified Code for Units of Measure (https://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT) bit bit By byte s second min minute h hour d day 1 dimensionlessPrefixes (PREFIX) k kilo (10^3) M mega (10^6) G giga (10^9) T tera (10^12) P peta (10^15) E exa (10^18) Z zetta (10^21) Y yotta (10^24) m milli (10^-3) u micro (10^-6) n nano (10^-9) p pico (10^-12) f femto (10^-15) a atto (10^-18) z zepto (10^-21) y yocto (10^-24) Ki kibi (2^10) Mi mebi (2^20) Gi gibi (2^30) Ti tebi (2^40) Pi pebi (2^50)GrammarThe grammar also includes these connectors: / division or ratio (as an infix operator). For examples, kBy/{email} or MiBy/10ms (although you should almost never have /s in a metric unit; rates should always be computed at query time from the underlying cumulative or delta value). . multiplication or composition (as an infix operator). For examples, GBy.d or k{watt}.h.The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: Annotation is just a comment if it follows a UNIT. If the annotation is used alone, then the unit is equivalent to 1. For examples, {request}/s == 1/s, By{transmitted}/s == By/s. NAME is a sequence of non-blank printable ASCII characters not containing { or }. 1 represents a unitary dimensionless unit (https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in 1/s. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as 1/d or {new-users}/d (and a metric value 5 would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as 1000/d or k1/d or k{page_views}/d (and a metric value of 5.3 would mean "5300 page views per day"). % represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value 3 means "3 percent"). 10^2.% indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value 0.03 means "3 percent").
	Unit pulumi.StringInput `pulumi:"unit"`
	// Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
	ValueType pulumi.StringInput `pulumi:"valueType"`
}

func (MetricDescriptorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorResponse)(nil)).Elem()
}

func (i MetricDescriptorResponseArgs) ToMetricDescriptorResponseOutput() MetricDescriptorResponseOutput {
	return i.ToMetricDescriptorResponseOutputWithContext(context.Background())
}

func (i MetricDescriptorResponseArgs) ToMetricDescriptorResponseOutputWithContext(ctx context.Context) MetricDescriptorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorResponseOutput)
}

func (i MetricDescriptorResponseArgs) ToMetricDescriptorResponsePtrOutput() MetricDescriptorResponsePtrOutput {
	return i.ToMetricDescriptorResponsePtrOutputWithContext(context.Background())
}

func (i MetricDescriptorResponseArgs) ToMetricDescriptorResponsePtrOutputWithContext(ctx context.Context) MetricDescriptorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorResponseOutput).ToMetricDescriptorResponsePtrOutputWithContext(ctx)
}

// MetricDescriptorResponsePtrInput is an input type that accepts MetricDescriptorResponseArgs, MetricDescriptorResponsePtr and MetricDescriptorResponsePtrOutput values.
// You can construct a concrete instance of `MetricDescriptorResponsePtrInput` via:
//
//          MetricDescriptorResponseArgs{...}
//
//  or:
//
//          nil
type MetricDescriptorResponsePtrInput interface {
	pulumi.Input

	ToMetricDescriptorResponsePtrOutput() MetricDescriptorResponsePtrOutput
	ToMetricDescriptorResponsePtrOutputWithContext(context.Context) MetricDescriptorResponsePtrOutput
}

type metricDescriptorResponsePtrType MetricDescriptorResponseArgs

func MetricDescriptorResponsePtr(v *MetricDescriptorResponseArgs) MetricDescriptorResponsePtrInput {
	return (*metricDescriptorResponsePtrType)(v)
}

func (*metricDescriptorResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorResponse)(nil)).Elem()
}

func (i *metricDescriptorResponsePtrType) ToMetricDescriptorResponsePtrOutput() MetricDescriptorResponsePtrOutput {
	return i.ToMetricDescriptorResponsePtrOutputWithContext(context.Background())
}

func (i *metricDescriptorResponsePtrType) ToMetricDescriptorResponsePtrOutputWithContext(ctx context.Context) MetricDescriptorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorResponsePtrOutput)
}

// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
type MetricDescriptorResponseOutput struct{ *pulumi.OutputState }

func (MetricDescriptorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorResponse)(nil)).Elem()
}

func (o MetricDescriptorResponseOutput) ToMetricDescriptorResponseOutput() MetricDescriptorResponseOutput {
	return o
}

func (o MetricDescriptorResponseOutput) ToMetricDescriptorResponseOutputWithContext(ctx context.Context) MetricDescriptorResponseOutput {
	return o
}

func (o MetricDescriptorResponseOutput) ToMetricDescriptorResponsePtrOutput() MetricDescriptorResponsePtrOutput {
	return o.ToMetricDescriptorResponsePtrOutputWithContext(context.Background())
}

func (o MetricDescriptorResponseOutput) ToMetricDescriptorResponsePtrOutputWithContext(ctx context.Context) MetricDescriptorResponsePtrOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) *MetricDescriptorResponse {
		return &v
	}).(MetricDescriptorResponsePtrOutput)
}

// A detailed description of the metric, which can be used in documentation.
func (o MetricDescriptorResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) string { return v.Description }).(pulumi.StringOutput)
}

// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
func (o MetricDescriptorResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
func (o MetricDescriptorResponseOutput) Labels() LabelDescriptorResponseArrayOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) []LabelDescriptorResponse { return v.Labels }).(LabelDescriptorResponseArrayOutput)
}

// Optional. The launch stage of the metric definition.
func (o MetricDescriptorResponseOutput) LaunchStage() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) string { return v.LaunchStage }).(pulumi.StringOutput)
}

// Optional. Metadata which can be used to guide usage of the metric.
func (o MetricDescriptorResponseOutput) Metadata() MetricDescriptorMetadataResponseOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) MetricDescriptorMetadataResponse { return v.Metadata }).(MetricDescriptorMetadataResponseOutput)
}

// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
func (o MetricDescriptorResponseOutput) MetricKind() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) string { return v.MetricKind }).(pulumi.StringOutput)
}

// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
func (o MetricDescriptorResponseOutput) MonitoredResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) []string { return v.MonitoredResourceTypes }).(pulumi.StringArrayOutput)
}

// The resource name of the metric descriptor.
func (o MetricDescriptorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name custom.googleapis.com or external.googleapis.com. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
func (o MetricDescriptorResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.Different systems might scale the values to be more easily displayed (so a value of 0.02kBy might be displayed as 20By, and a value of 3523kBy might be displayed as 3.5MBy). However, if the unit is kBy, then the value of the metric is always in thousands of bytes, no matter how it might be displayed.If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as 12005.Alternatively, if you want a custom metric to record data in a more granular way, you can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).The supported units are a subset of The Unified Code for Units of Measure (https://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT) bit bit By byte s second min minute h hour d day 1 dimensionlessPrefixes (PREFIX) k kilo (10^3) M mega (10^6) G giga (10^9) T tera (10^12) P peta (10^15) E exa (10^18) Z zetta (10^21) Y yotta (10^24) m milli (10^-3) u micro (10^-6) n nano (10^-9) p pico (10^-12) f femto (10^-15) a atto (10^-18) z zepto (10^-21) y yocto (10^-24) Ki kibi (2^10) Mi mebi (2^20) Gi gibi (2^30) Ti tebi (2^40) Pi pebi (2^50)GrammarThe grammar also includes these connectors: / division or ratio (as an infix operator). For examples, kBy/{email} or MiBy/10ms (although you should almost never have /s in a metric unit; rates should always be computed at query time from the underlying cumulative or delta value). . multiplication or composition (as an infix operator). For examples, GBy.d or k{watt}.h.The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: Annotation is just a comment if it follows a UNIT. If the annotation is used alone, then the unit is equivalent to 1. For examples, {request}/s == 1/s, By{transmitted}/s == By/s. NAME is a sequence of non-blank printable ASCII characters not containing { or }. 1 represents a unitary dimensionless unit (https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in 1/s. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as 1/d or {new-users}/d (and a metric value 5 would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as 1000/d or k1/d or k{page_views}/d (and a metric value of 5.3 would mean "5300 page views per day"). % represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value 3 means "3 percent"). 10^2.% indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value 0.03 means "3 percent").
func (o MetricDescriptorResponseOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) string { return v.Unit }).(pulumi.StringOutput)
}

// Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
func (o MetricDescriptorResponseOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDescriptorResponse) string { return v.ValueType }).(pulumi.StringOutput)
}

type MetricDescriptorResponsePtrOutput struct{ *pulumi.OutputState }

func (MetricDescriptorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorResponse)(nil)).Elem()
}

func (o MetricDescriptorResponsePtrOutput) ToMetricDescriptorResponsePtrOutput() MetricDescriptorResponsePtrOutput {
	return o
}

func (o MetricDescriptorResponsePtrOutput) ToMetricDescriptorResponsePtrOutputWithContext(ctx context.Context) MetricDescriptorResponsePtrOutput {
	return o
}

func (o MetricDescriptorResponsePtrOutput) Elem() MetricDescriptorResponseOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) MetricDescriptorResponse { return *v }).(MetricDescriptorResponseOutput)
}

// A detailed description of the metric, which can be used in documentation.
func (o MetricDescriptorResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
func (o MetricDescriptorResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
func (o MetricDescriptorResponsePtrOutput) Labels() LabelDescriptorResponseArrayOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) []LabelDescriptorResponse {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(LabelDescriptorResponseArrayOutput)
}

// Optional. The launch stage of the metric definition.
func (o MetricDescriptorResponsePtrOutput) LaunchStage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LaunchStage
	}).(pulumi.StringPtrOutput)
}

// Optional. Metadata which can be used to guide usage of the metric.
func (o MetricDescriptorResponsePtrOutput) Metadata() MetricDescriptorMetadataResponsePtrOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) *MetricDescriptorMetadataResponse {
		if v == nil {
			return nil
		}
		return &v.Metadata
	}).(MetricDescriptorMetadataResponsePtrOutput)
}

// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
func (o MetricDescriptorResponsePtrOutput) MetricKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MetricKind
	}).(pulumi.StringPtrOutput)
}

// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
func (o MetricDescriptorResponsePtrOutput) MonitoredResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) []string {
		if v == nil {
			return nil
		}
		return v.MonitoredResourceTypes
	}).(pulumi.StringArrayOutput)
}

// The resource name of the metric descriptor.
func (o MetricDescriptorResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name custom.googleapis.com or external.googleapis.com. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
func (o MetricDescriptorResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.Different systems might scale the values to be more easily displayed (so a value of 0.02kBy might be displayed as 20By, and a value of 3523kBy might be displayed as 3.5MBy). However, if the unit is kBy, then the value of the metric is always in thousands of bytes, no matter how it might be displayed.If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an INT64 CUMULATIVE metric whose unit is s{CPU} (or equivalently 1s{CPU} or just s). If the job uses 12,005 CPU-seconds, then the value is written as 12005.Alternatively, if you want a custom metric to record data in a more granular way, you can create a DOUBLE CUMULATIVE metric whose unit is ks{CPU}, and then write the value 12.005 (which is 12005/1000), or use Kis{CPU} and write 11.723 (which is 12005/1024).The supported units are a subset of The Unified Code for Units of Measure (https://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT) bit bit By byte s second min minute h hour d day 1 dimensionlessPrefixes (PREFIX) k kilo (10^3) M mega (10^6) G giga (10^9) T tera (10^12) P peta (10^15) E exa (10^18) Z zetta (10^21) Y yotta (10^24) m milli (10^-3) u micro (10^-6) n nano (10^-9) p pico (10^-12) f femto (10^-15) a atto (10^-18) z zepto (10^-21) y yocto (10^-24) Ki kibi (2^10) Mi mebi (2^20) Gi gibi (2^30) Ti tebi (2^40) Pi pebi (2^50)GrammarThe grammar also includes these connectors: / division or ratio (as an infix operator). For examples, kBy/{email} or MiBy/10ms (although you should almost never have /s in a metric unit; rates should always be computed at query time from the underlying cumulative or delta value). . multiplication or composition (as an infix operator). For examples, GBy.d or k{watt}.h.The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: Annotation is just a comment if it follows a UNIT. If the annotation is used alone, then the unit is equivalent to 1. For examples, {request}/s == 1/s, By{transmitted}/s == By/s. NAME is a sequence of non-blank printable ASCII characters not containing { or }. 1 represents a unitary dimensionless unit (https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in 1/s. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as 1/d or {new-users}/d (and a metric value 5 would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as 1000/d or k1/d or k{page_views}/d (and a metric value of 5.3 would mean "5300 page views per day"). % represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value 3 means "3 percent"). 10^2.% indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value 0.03 means "3 percent").
func (o MetricDescriptorResponsePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Unit
	}).(pulumi.StringPtrOutput)
}

// Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
func (o MetricDescriptorResponsePtrOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ValueType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BigQueryOptionsOutput{})
	pulumi.RegisterOutputType(BigQueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(BigQueryOptionsResponseOutput{})
	pulumi.RegisterOutputType(BigQueryOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(BucketOptionsOutput{})
	pulumi.RegisterOutputType(BucketOptionsPtrOutput{})
	pulumi.RegisterOutputType(BucketOptionsResponseOutput{})
	pulumi.RegisterOutputType(BucketOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(ExplicitOutput{})
	pulumi.RegisterOutputType(ExplicitPtrOutput{})
	pulumi.RegisterOutputType(ExplicitResponseOutput{})
	pulumi.RegisterOutputType(ExplicitResponsePtrOutput{})
	pulumi.RegisterOutputType(ExponentialOutput{})
	pulumi.RegisterOutputType(ExponentialPtrOutput{})
	pulumi.RegisterOutputType(ExponentialResponseOutput{})
	pulumi.RegisterOutputType(ExponentialResponsePtrOutput{})
	pulumi.RegisterOutputType(LabelDescriptorOutput{})
	pulumi.RegisterOutputType(LabelDescriptorArrayOutput{})
	pulumi.RegisterOutputType(LabelDescriptorResponseOutput{})
	pulumi.RegisterOutputType(LabelDescriptorResponseArrayOutput{})
	pulumi.RegisterOutputType(LinearOutput{})
	pulumi.RegisterOutputType(LinearPtrOutput{})
	pulumi.RegisterOutputType(LinearResponseOutput{})
	pulumi.RegisterOutputType(LinearResponsePtrOutput{})
	pulumi.RegisterOutputType(LogExclusionOutput{})
	pulumi.RegisterOutputType(LogExclusionArrayOutput{})
	pulumi.RegisterOutputType(LogExclusionResponseOutput{})
	pulumi.RegisterOutputType(LogExclusionResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricDescriptorOutput{})
	pulumi.RegisterOutputType(MetricDescriptorPtrOutput{})
	pulumi.RegisterOutputType(MetricDescriptorMetadataOutput{})
	pulumi.RegisterOutputType(MetricDescriptorMetadataPtrOutput{})
	pulumi.RegisterOutputType(MetricDescriptorMetadataResponseOutput{})
	pulumi.RegisterOutputType(MetricDescriptorMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(MetricDescriptorResponseOutput{})
	pulumi.RegisterOutputType(MetricDescriptorResponsePtrOutput{})
}
