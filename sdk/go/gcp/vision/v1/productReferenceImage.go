// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates and returns a new ReferenceImage resource. The `bounding_poly` field is optional. If `bounding_poly` is not specified, the system will try to detect regions of interest in the image that are compatible with the product_category on the parent product. If it is specified, detection is ALWAYS skipped. The system converts polygons into non-rotated rectangles. Note that the pipeline will resize the image if the image resolution is too large to process (above 50MP). Possible errors: * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if the product does not exist. * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing compatible with the parent product's product_category is detected. * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.
type ProductReferenceImage struct {
	pulumi.CustomResourceState

	// Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
	BoundingPolys BoundingPolyResponseArrayOutput `pulumi:"boundingPolys"`
	// The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewProductReferenceImage registers a new resource with the given unique name, arguments, and options.
func NewProductReferenceImage(ctx *pulumi.Context,
	name string, args *ProductReferenceImageArgs, opts ...pulumi.ResourceOption) (*ProductReferenceImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProductsId == nil {
		return nil, errors.New("invalid value for required argument 'ProductsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.ReferenceImagesId == nil {
		return nil, errors.New("invalid value for required argument 'ReferenceImagesId'")
	}
	var resource ProductReferenceImage
	err := ctx.RegisterResource("gcp-native:vision/v1:ProductReferenceImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductReferenceImage gets an existing ProductReferenceImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductReferenceImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductReferenceImageState, opts ...pulumi.ResourceOption) (*ProductReferenceImage, error) {
	var resource ProductReferenceImage
	err := ctx.ReadResource("gcp-native:vision/v1:ProductReferenceImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProductReferenceImage resources.
type productReferenceImageState struct {
	// Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
	BoundingPolys []BoundingPolyResponse `pulumi:"boundingPolys"`
	// The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
	Name *string `pulumi:"name"`
	// Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
	Uri *string `pulumi:"uri"`
}

type ProductReferenceImageState struct {
	// Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
	BoundingPolys BoundingPolyResponseArrayInput
	// The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
	Name pulumi.StringPtrInput
	// Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
	Uri pulumi.StringPtrInput
}

func (ProductReferenceImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*productReferenceImageState)(nil)).Elem()
}

type productReferenceImageArgs struct {
	// Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
	BoundingPolys []BoundingPoly `pulumi:"boundingPolys"`
	LocationsId   string         `pulumi:"locationsId"`
	// The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
	Name              *string `pulumi:"name"`
	ProductsId        string  `pulumi:"productsId"`
	ProjectsId        string  `pulumi:"projectsId"`
	ReferenceImagesId string  `pulumi:"referenceImagesId"`
	// Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
	Uri *string `pulumi:"uri"`
}

// The set of arguments for constructing a ProductReferenceImage resource.
type ProductReferenceImageArgs struct {
	// Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
	BoundingPolys BoundingPolyArrayInput
	LocationsId   pulumi.StringInput
	// The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
	Name              pulumi.StringPtrInput
	ProductsId        pulumi.StringInput
	ProjectsId        pulumi.StringInput
	ReferenceImagesId pulumi.StringInput
	// Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
	Uri pulumi.StringPtrInput
}

func (ProductReferenceImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productReferenceImageArgs)(nil)).Elem()
}

type ProductReferenceImageInput interface {
	pulumi.Input

	ToProductReferenceImageOutput() ProductReferenceImageOutput
	ToProductReferenceImageOutputWithContext(ctx context.Context) ProductReferenceImageOutput
}

func (*ProductReferenceImage) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductReferenceImage)(nil))
}

func (i *ProductReferenceImage) ToProductReferenceImageOutput() ProductReferenceImageOutput {
	return i.ToProductReferenceImageOutputWithContext(context.Background())
}

func (i *ProductReferenceImage) ToProductReferenceImageOutputWithContext(ctx context.Context) ProductReferenceImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductReferenceImageOutput)
}

type ProductReferenceImageOutput struct {
	*pulumi.OutputState
}

func (ProductReferenceImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductReferenceImage)(nil))
}

func (o ProductReferenceImageOutput) ToProductReferenceImageOutput() ProductReferenceImageOutput {
	return o
}

func (o ProductReferenceImageOutput) ToProductReferenceImageOutputWithContext(ctx context.Context) ProductReferenceImageOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProductReferenceImageOutput{})
}
