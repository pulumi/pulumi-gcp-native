// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Tracking parameters supported by Dynamic Link.
type AnalyticsInfo struct {
	// Google Play Campaign Measurements.
	GooglePlayAnalytics *GooglePlayAnalytics `pulumi:"googlePlayAnalytics"`
	// iTunes Connect App Analytics.
	ItunesConnectAnalytics *ITunesConnectAnalytics `pulumi:"itunesConnectAnalytics"`
}

// AnalyticsInfoInput is an input type that accepts AnalyticsInfoArgs and AnalyticsInfoOutput values.
// You can construct a concrete instance of `AnalyticsInfoInput` via:
//
//          AnalyticsInfoArgs{...}
type AnalyticsInfoInput interface {
	pulumi.Input

	ToAnalyticsInfoOutput() AnalyticsInfoOutput
	ToAnalyticsInfoOutputWithContext(context.Context) AnalyticsInfoOutput
}

// Tracking parameters supported by Dynamic Link.
type AnalyticsInfoArgs struct {
	// Google Play Campaign Measurements.
	GooglePlayAnalytics GooglePlayAnalyticsPtrInput `pulumi:"googlePlayAnalytics"`
	// iTunes Connect App Analytics.
	ItunesConnectAnalytics ITunesConnectAnalyticsPtrInput `pulumi:"itunesConnectAnalytics"`
}

func (AnalyticsInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsInfo)(nil)).Elem()
}

func (i AnalyticsInfoArgs) ToAnalyticsInfoOutput() AnalyticsInfoOutput {
	return i.ToAnalyticsInfoOutputWithContext(context.Background())
}

func (i AnalyticsInfoArgs) ToAnalyticsInfoOutputWithContext(ctx context.Context) AnalyticsInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsInfoOutput)
}

func (i AnalyticsInfoArgs) ToAnalyticsInfoPtrOutput() AnalyticsInfoPtrOutput {
	return i.ToAnalyticsInfoPtrOutputWithContext(context.Background())
}

func (i AnalyticsInfoArgs) ToAnalyticsInfoPtrOutputWithContext(ctx context.Context) AnalyticsInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsInfoOutput).ToAnalyticsInfoPtrOutputWithContext(ctx)
}

// AnalyticsInfoPtrInput is an input type that accepts AnalyticsInfoArgs, AnalyticsInfoPtr and AnalyticsInfoPtrOutput values.
// You can construct a concrete instance of `AnalyticsInfoPtrInput` via:
//
//          AnalyticsInfoArgs{...}
//
//  or:
//
//          nil
type AnalyticsInfoPtrInput interface {
	pulumi.Input

	ToAnalyticsInfoPtrOutput() AnalyticsInfoPtrOutput
	ToAnalyticsInfoPtrOutputWithContext(context.Context) AnalyticsInfoPtrOutput
}

type analyticsInfoPtrType AnalyticsInfoArgs

func AnalyticsInfoPtr(v *AnalyticsInfoArgs) AnalyticsInfoPtrInput {
	return (*analyticsInfoPtrType)(v)
}

func (*analyticsInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsInfo)(nil)).Elem()
}

func (i *analyticsInfoPtrType) ToAnalyticsInfoPtrOutput() AnalyticsInfoPtrOutput {
	return i.ToAnalyticsInfoPtrOutputWithContext(context.Background())
}

func (i *analyticsInfoPtrType) ToAnalyticsInfoPtrOutputWithContext(ctx context.Context) AnalyticsInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsInfoPtrOutput)
}

// Tracking parameters supported by Dynamic Link.
type AnalyticsInfoOutput struct{ *pulumi.OutputState }

func (AnalyticsInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsInfo)(nil)).Elem()
}

func (o AnalyticsInfoOutput) ToAnalyticsInfoOutput() AnalyticsInfoOutput {
	return o
}

func (o AnalyticsInfoOutput) ToAnalyticsInfoOutputWithContext(ctx context.Context) AnalyticsInfoOutput {
	return o
}

func (o AnalyticsInfoOutput) ToAnalyticsInfoPtrOutput() AnalyticsInfoPtrOutput {
	return o.ToAnalyticsInfoPtrOutputWithContext(context.Background())
}

func (o AnalyticsInfoOutput) ToAnalyticsInfoPtrOutputWithContext(ctx context.Context) AnalyticsInfoPtrOutput {
	return o.ApplyT(func(v AnalyticsInfo) *AnalyticsInfo {
		return &v
	}).(AnalyticsInfoPtrOutput)
}

// Google Play Campaign Measurements.
func (o AnalyticsInfoOutput) GooglePlayAnalytics() GooglePlayAnalyticsPtrOutput {
	return o.ApplyT(func(v AnalyticsInfo) *GooglePlayAnalytics { return v.GooglePlayAnalytics }).(GooglePlayAnalyticsPtrOutput)
}

// iTunes Connect App Analytics.
func (o AnalyticsInfoOutput) ItunesConnectAnalytics() ITunesConnectAnalyticsPtrOutput {
	return o.ApplyT(func(v AnalyticsInfo) *ITunesConnectAnalytics { return v.ItunesConnectAnalytics }).(ITunesConnectAnalyticsPtrOutput)
}

type AnalyticsInfoPtrOutput struct{ *pulumi.OutputState }

func (AnalyticsInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsInfo)(nil)).Elem()
}

func (o AnalyticsInfoPtrOutput) ToAnalyticsInfoPtrOutput() AnalyticsInfoPtrOutput {
	return o
}

func (o AnalyticsInfoPtrOutput) ToAnalyticsInfoPtrOutputWithContext(ctx context.Context) AnalyticsInfoPtrOutput {
	return o
}

func (o AnalyticsInfoPtrOutput) Elem() AnalyticsInfoOutput {
	return o.ApplyT(func(v *AnalyticsInfo) AnalyticsInfo { return *v }).(AnalyticsInfoOutput)
}

// Google Play Campaign Measurements.
func (o AnalyticsInfoPtrOutput) GooglePlayAnalytics() GooglePlayAnalyticsPtrOutput {
	return o.ApplyT(func(v *AnalyticsInfo) *GooglePlayAnalytics {
		if v == nil {
			return nil
		}
		return v.GooglePlayAnalytics
	}).(GooglePlayAnalyticsPtrOutput)
}

// iTunes Connect App Analytics.
func (o AnalyticsInfoPtrOutput) ItunesConnectAnalytics() ITunesConnectAnalyticsPtrOutput {
	return o.ApplyT(func(v *AnalyticsInfo) *ITunesConnectAnalytics {
		if v == nil {
			return nil
		}
		return v.ItunesConnectAnalytics
	}).(ITunesConnectAnalyticsPtrOutput)
}

// Android related attributes to the Dynamic Link.
type AndroidInfo struct {
	// Link to open on Android if the app is not installed.
	AndroidFallbackLink *string `pulumi:"androidFallbackLink"`
	// If specified, this overrides the ‘link’ parameter on Android.
	AndroidLink *string `pulumi:"androidLink"`
	// Minimum version code for the Android app. If the installed app’s version code is lower, then the user is taken to the Play Store.
	AndroidMinPackageVersionCode *string `pulumi:"androidMinPackageVersionCode"`
	// Android package name of the app.
	AndroidPackageName *string `pulumi:"androidPackageName"`
}

// AndroidInfoInput is an input type that accepts AndroidInfoArgs and AndroidInfoOutput values.
// You can construct a concrete instance of `AndroidInfoInput` via:
//
//          AndroidInfoArgs{...}
type AndroidInfoInput interface {
	pulumi.Input

	ToAndroidInfoOutput() AndroidInfoOutput
	ToAndroidInfoOutputWithContext(context.Context) AndroidInfoOutput
}

// Android related attributes to the Dynamic Link.
type AndroidInfoArgs struct {
	// Link to open on Android if the app is not installed.
	AndroidFallbackLink pulumi.StringPtrInput `pulumi:"androidFallbackLink"`
	// If specified, this overrides the ‘link’ parameter on Android.
	AndroidLink pulumi.StringPtrInput `pulumi:"androidLink"`
	// Minimum version code for the Android app. If the installed app’s version code is lower, then the user is taken to the Play Store.
	AndroidMinPackageVersionCode pulumi.StringPtrInput `pulumi:"androidMinPackageVersionCode"`
	// Android package name of the app.
	AndroidPackageName pulumi.StringPtrInput `pulumi:"androidPackageName"`
}

func (AndroidInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidInfo)(nil)).Elem()
}

func (i AndroidInfoArgs) ToAndroidInfoOutput() AndroidInfoOutput {
	return i.ToAndroidInfoOutputWithContext(context.Background())
}

func (i AndroidInfoArgs) ToAndroidInfoOutputWithContext(ctx context.Context) AndroidInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidInfoOutput)
}

func (i AndroidInfoArgs) ToAndroidInfoPtrOutput() AndroidInfoPtrOutput {
	return i.ToAndroidInfoPtrOutputWithContext(context.Background())
}

func (i AndroidInfoArgs) ToAndroidInfoPtrOutputWithContext(ctx context.Context) AndroidInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidInfoOutput).ToAndroidInfoPtrOutputWithContext(ctx)
}

// AndroidInfoPtrInput is an input type that accepts AndroidInfoArgs, AndroidInfoPtr and AndroidInfoPtrOutput values.
// You can construct a concrete instance of `AndroidInfoPtrInput` via:
//
//          AndroidInfoArgs{...}
//
//  or:
//
//          nil
type AndroidInfoPtrInput interface {
	pulumi.Input

	ToAndroidInfoPtrOutput() AndroidInfoPtrOutput
	ToAndroidInfoPtrOutputWithContext(context.Context) AndroidInfoPtrOutput
}

type androidInfoPtrType AndroidInfoArgs

func AndroidInfoPtr(v *AndroidInfoArgs) AndroidInfoPtrInput {
	return (*androidInfoPtrType)(v)
}

func (*androidInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidInfo)(nil)).Elem()
}

func (i *androidInfoPtrType) ToAndroidInfoPtrOutput() AndroidInfoPtrOutput {
	return i.ToAndroidInfoPtrOutputWithContext(context.Background())
}

func (i *androidInfoPtrType) ToAndroidInfoPtrOutputWithContext(ctx context.Context) AndroidInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidInfoPtrOutput)
}

// Android related attributes to the Dynamic Link.
type AndroidInfoOutput struct{ *pulumi.OutputState }

func (AndroidInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidInfo)(nil)).Elem()
}

func (o AndroidInfoOutput) ToAndroidInfoOutput() AndroidInfoOutput {
	return o
}

func (o AndroidInfoOutput) ToAndroidInfoOutputWithContext(ctx context.Context) AndroidInfoOutput {
	return o
}

func (o AndroidInfoOutput) ToAndroidInfoPtrOutput() AndroidInfoPtrOutput {
	return o.ToAndroidInfoPtrOutputWithContext(context.Background())
}

func (o AndroidInfoOutput) ToAndroidInfoPtrOutputWithContext(ctx context.Context) AndroidInfoPtrOutput {
	return o.ApplyT(func(v AndroidInfo) *AndroidInfo {
		return &v
	}).(AndroidInfoPtrOutput)
}

// Link to open on Android if the app is not installed.
func (o AndroidInfoOutput) AndroidFallbackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidInfo) *string { return v.AndroidFallbackLink }).(pulumi.StringPtrOutput)
}

// If specified, this overrides the ‘link’ parameter on Android.
func (o AndroidInfoOutput) AndroidLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidInfo) *string { return v.AndroidLink }).(pulumi.StringPtrOutput)
}

// Minimum version code for the Android app. If the installed app’s version code is lower, then the user is taken to the Play Store.
func (o AndroidInfoOutput) AndroidMinPackageVersionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidInfo) *string { return v.AndroidMinPackageVersionCode }).(pulumi.StringPtrOutput)
}

// Android package name of the app.
func (o AndroidInfoOutput) AndroidPackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AndroidInfo) *string { return v.AndroidPackageName }).(pulumi.StringPtrOutput)
}

type AndroidInfoPtrOutput struct{ *pulumi.OutputState }

func (AndroidInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidInfo)(nil)).Elem()
}

func (o AndroidInfoPtrOutput) ToAndroidInfoPtrOutput() AndroidInfoPtrOutput {
	return o
}

func (o AndroidInfoPtrOutput) ToAndroidInfoPtrOutputWithContext(ctx context.Context) AndroidInfoPtrOutput {
	return o
}

func (o AndroidInfoPtrOutput) Elem() AndroidInfoOutput {
	return o.ApplyT(func(v *AndroidInfo) AndroidInfo { return *v }).(AndroidInfoOutput)
}

// Link to open on Android if the app is not installed.
func (o AndroidInfoPtrOutput) AndroidFallbackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidInfo) *string {
		if v == nil {
			return nil
		}
		return v.AndroidFallbackLink
	}).(pulumi.StringPtrOutput)
}

// If specified, this overrides the ‘link’ parameter on Android.
func (o AndroidInfoPtrOutput) AndroidLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidInfo) *string {
		if v == nil {
			return nil
		}
		return v.AndroidLink
	}).(pulumi.StringPtrOutput)
}

// Minimum version code for the Android app. If the installed app’s version code is lower, then the user is taken to the Play Store.
func (o AndroidInfoPtrOutput) AndroidMinPackageVersionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidInfo) *string {
		if v == nil {
			return nil
		}
		return v.AndroidMinPackageVersionCode
	}).(pulumi.StringPtrOutput)
}

// Android package name of the app.
func (o AndroidInfoPtrOutput) AndroidPackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AndroidInfo) *string {
		if v == nil {
			return nil
		}
		return v.AndroidPackageName
	}).(pulumi.StringPtrOutput)
}

// Desktop related attributes to the Dynamic Link.
type DesktopInfo struct {
	// Link to open on desktop.
	DesktopFallbackLink *string `pulumi:"desktopFallbackLink"`
}

// DesktopInfoInput is an input type that accepts DesktopInfoArgs and DesktopInfoOutput values.
// You can construct a concrete instance of `DesktopInfoInput` via:
//
//          DesktopInfoArgs{...}
type DesktopInfoInput interface {
	pulumi.Input

	ToDesktopInfoOutput() DesktopInfoOutput
	ToDesktopInfoOutputWithContext(context.Context) DesktopInfoOutput
}

// Desktop related attributes to the Dynamic Link.
type DesktopInfoArgs struct {
	// Link to open on desktop.
	DesktopFallbackLink pulumi.StringPtrInput `pulumi:"desktopFallbackLink"`
}

func (DesktopInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DesktopInfo)(nil)).Elem()
}

func (i DesktopInfoArgs) ToDesktopInfoOutput() DesktopInfoOutput {
	return i.ToDesktopInfoOutputWithContext(context.Background())
}

func (i DesktopInfoArgs) ToDesktopInfoOutputWithContext(ctx context.Context) DesktopInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopInfoOutput)
}

func (i DesktopInfoArgs) ToDesktopInfoPtrOutput() DesktopInfoPtrOutput {
	return i.ToDesktopInfoPtrOutputWithContext(context.Background())
}

func (i DesktopInfoArgs) ToDesktopInfoPtrOutputWithContext(ctx context.Context) DesktopInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopInfoOutput).ToDesktopInfoPtrOutputWithContext(ctx)
}

// DesktopInfoPtrInput is an input type that accepts DesktopInfoArgs, DesktopInfoPtr and DesktopInfoPtrOutput values.
// You can construct a concrete instance of `DesktopInfoPtrInput` via:
//
//          DesktopInfoArgs{...}
//
//  or:
//
//          nil
type DesktopInfoPtrInput interface {
	pulumi.Input

	ToDesktopInfoPtrOutput() DesktopInfoPtrOutput
	ToDesktopInfoPtrOutputWithContext(context.Context) DesktopInfoPtrOutput
}

type desktopInfoPtrType DesktopInfoArgs

func DesktopInfoPtr(v *DesktopInfoArgs) DesktopInfoPtrInput {
	return (*desktopInfoPtrType)(v)
}

func (*desktopInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DesktopInfo)(nil)).Elem()
}

func (i *desktopInfoPtrType) ToDesktopInfoPtrOutput() DesktopInfoPtrOutput {
	return i.ToDesktopInfoPtrOutputWithContext(context.Background())
}

func (i *desktopInfoPtrType) ToDesktopInfoPtrOutputWithContext(ctx context.Context) DesktopInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DesktopInfoPtrOutput)
}

// Desktop related attributes to the Dynamic Link.
type DesktopInfoOutput struct{ *pulumi.OutputState }

func (DesktopInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DesktopInfo)(nil)).Elem()
}

func (o DesktopInfoOutput) ToDesktopInfoOutput() DesktopInfoOutput {
	return o
}

func (o DesktopInfoOutput) ToDesktopInfoOutputWithContext(ctx context.Context) DesktopInfoOutput {
	return o
}

func (o DesktopInfoOutput) ToDesktopInfoPtrOutput() DesktopInfoPtrOutput {
	return o.ToDesktopInfoPtrOutputWithContext(context.Background())
}

func (o DesktopInfoOutput) ToDesktopInfoPtrOutputWithContext(ctx context.Context) DesktopInfoPtrOutput {
	return o.ApplyT(func(v DesktopInfo) *DesktopInfo {
		return &v
	}).(DesktopInfoPtrOutput)
}

// Link to open on desktop.
func (o DesktopInfoOutput) DesktopFallbackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DesktopInfo) *string { return v.DesktopFallbackLink }).(pulumi.StringPtrOutput)
}

type DesktopInfoPtrOutput struct{ *pulumi.OutputState }

func (DesktopInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DesktopInfo)(nil)).Elem()
}

func (o DesktopInfoPtrOutput) ToDesktopInfoPtrOutput() DesktopInfoPtrOutput {
	return o
}

func (o DesktopInfoPtrOutput) ToDesktopInfoPtrOutputWithContext(ctx context.Context) DesktopInfoPtrOutput {
	return o
}

func (o DesktopInfoPtrOutput) Elem() DesktopInfoOutput {
	return o.ApplyT(func(v *DesktopInfo) DesktopInfo { return *v }).(DesktopInfoOutput)
}

// Link to open on desktop.
func (o DesktopInfoPtrOutput) DesktopFallbackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DesktopInfo) *string {
		if v == nil {
			return nil
		}
		return v.DesktopFallbackLink
	}).(pulumi.StringPtrOutput)
}

// Information about a Dynamic Link.
type DynamicLinkInfo struct {
	// Parameters used for tracking. See all tracking parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
	AnalyticsInfo *AnalyticsInfo `pulumi:"analyticsInfo"`
	// Android related information. See Android related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
	AndroidInfo *AndroidInfo `pulumi:"androidInfo"`
	// Desktop related information. See desktop related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
	DesktopInfo *DesktopInfo `pulumi:"desktopInfo"`
	// E.g. https://maps.app.goo.gl, https://maps.page.link, https://g.co/maps More examples can be found in description of getNormalizedUriPrefix in j/c/g/firebase/dynamiclinks/uri/DdlDomain.java Will fallback to dynamic_link_domain is this field is missing
	DomainUriPrefix *string `pulumi:"domainUriPrefix"`
	// Dynamic Links domain that the project owns, e.g. abcd.app.goo.gl [Learn more](https://firebase.google.com/docs/dynamic-links/android/receive) on how to set up Dynamic Link domain associated with your Firebase project. Required if missing domain_uri_prefix.
	DynamicLinkDomain *string `pulumi:"dynamicLinkDomain"`
	// iOS related information. See iOS related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
	IosInfo *IosInfo `pulumi:"iosInfo"`
	// The link your app will open, You can specify any URL your app can handle. This link must be a well-formatted URL, be properly URL-encoded, and use the HTTP or HTTPS scheme. See 'link' parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually). Required.
	Link *string `pulumi:"link"`
	// Information of navigation behavior of a Firebase Dynamic Links.
	NavigationInfo *NavigationInfo `pulumi:"navigationInfo"`
	// Parameters for social meta tag params. Used to set meta tag data for link previews on social sites.
	SocialMetaTagInfo *SocialMetaTagInfo `pulumi:"socialMetaTagInfo"`
}

// DynamicLinkInfoInput is an input type that accepts DynamicLinkInfoArgs and DynamicLinkInfoOutput values.
// You can construct a concrete instance of `DynamicLinkInfoInput` via:
//
//          DynamicLinkInfoArgs{...}
type DynamicLinkInfoInput interface {
	pulumi.Input

	ToDynamicLinkInfoOutput() DynamicLinkInfoOutput
	ToDynamicLinkInfoOutputWithContext(context.Context) DynamicLinkInfoOutput
}

// Information about a Dynamic Link.
type DynamicLinkInfoArgs struct {
	// Parameters used for tracking. See all tracking parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
	AnalyticsInfo AnalyticsInfoPtrInput `pulumi:"analyticsInfo"`
	// Android related information. See Android related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
	AndroidInfo AndroidInfoPtrInput `pulumi:"androidInfo"`
	// Desktop related information. See desktop related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
	DesktopInfo DesktopInfoPtrInput `pulumi:"desktopInfo"`
	// E.g. https://maps.app.goo.gl, https://maps.page.link, https://g.co/maps More examples can be found in description of getNormalizedUriPrefix in j/c/g/firebase/dynamiclinks/uri/DdlDomain.java Will fallback to dynamic_link_domain is this field is missing
	DomainUriPrefix pulumi.StringPtrInput `pulumi:"domainUriPrefix"`
	// Dynamic Links domain that the project owns, e.g. abcd.app.goo.gl [Learn more](https://firebase.google.com/docs/dynamic-links/android/receive) on how to set up Dynamic Link domain associated with your Firebase project. Required if missing domain_uri_prefix.
	DynamicLinkDomain pulumi.StringPtrInput `pulumi:"dynamicLinkDomain"`
	// iOS related information. See iOS related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
	IosInfo IosInfoPtrInput `pulumi:"iosInfo"`
	// The link your app will open, You can specify any URL your app can handle. This link must be a well-formatted URL, be properly URL-encoded, and use the HTTP or HTTPS scheme. See 'link' parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually). Required.
	Link pulumi.StringPtrInput `pulumi:"link"`
	// Information of navigation behavior of a Firebase Dynamic Links.
	NavigationInfo NavigationInfoPtrInput `pulumi:"navigationInfo"`
	// Parameters for social meta tag params. Used to set meta tag data for link previews on social sites.
	SocialMetaTagInfo SocialMetaTagInfoPtrInput `pulumi:"socialMetaTagInfo"`
}

func (DynamicLinkInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicLinkInfo)(nil)).Elem()
}

func (i DynamicLinkInfoArgs) ToDynamicLinkInfoOutput() DynamicLinkInfoOutput {
	return i.ToDynamicLinkInfoOutputWithContext(context.Background())
}

func (i DynamicLinkInfoArgs) ToDynamicLinkInfoOutputWithContext(ctx context.Context) DynamicLinkInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicLinkInfoOutput)
}

func (i DynamicLinkInfoArgs) ToDynamicLinkInfoPtrOutput() DynamicLinkInfoPtrOutput {
	return i.ToDynamicLinkInfoPtrOutputWithContext(context.Background())
}

func (i DynamicLinkInfoArgs) ToDynamicLinkInfoPtrOutputWithContext(ctx context.Context) DynamicLinkInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicLinkInfoOutput).ToDynamicLinkInfoPtrOutputWithContext(ctx)
}

// DynamicLinkInfoPtrInput is an input type that accepts DynamicLinkInfoArgs, DynamicLinkInfoPtr and DynamicLinkInfoPtrOutput values.
// You can construct a concrete instance of `DynamicLinkInfoPtrInput` via:
//
//          DynamicLinkInfoArgs{...}
//
//  or:
//
//          nil
type DynamicLinkInfoPtrInput interface {
	pulumi.Input

	ToDynamicLinkInfoPtrOutput() DynamicLinkInfoPtrOutput
	ToDynamicLinkInfoPtrOutputWithContext(context.Context) DynamicLinkInfoPtrOutput
}

type dynamicLinkInfoPtrType DynamicLinkInfoArgs

func DynamicLinkInfoPtr(v *DynamicLinkInfoArgs) DynamicLinkInfoPtrInput {
	return (*dynamicLinkInfoPtrType)(v)
}

func (*dynamicLinkInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicLinkInfo)(nil)).Elem()
}

func (i *dynamicLinkInfoPtrType) ToDynamicLinkInfoPtrOutput() DynamicLinkInfoPtrOutput {
	return i.ToDynamicLinkInfoPtrOutputWithContext(context.Background())
}

func (i *dynamicLinkInfoPtrType) ToDynamicLinkInfoPtrOutputWithContext(ctx context.Context) DynamicLinkInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicLinkInfoPtrOutput)
}

// Information about a Dynamic Link.
type DynamicLinkInfoOutput struct{ *pulumi.OutputState }

func (DynamicLinkInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicLinkInfo)(nil)).Elem()
}

func (o DynamicLinkInfoOutput) ToDynamicLinkInfoOutput() DynamicLinkInfoOutput {
	return o
}

func (o DynamicLinkInfoOutput) ToDynamicLinkInfoOutputWithContext(ctx context.Context) DynamicLinkInfoOutput {
	return o
}

func (o DynamicLinkInfoOutput) ToDynamicLinkInfoPtrOutput() DynamicLinkInfoPtrOutput {
	return o.ToDynamicLinkInfoPtrOutputWithContext(context.Background())
}

func (o DynamicLinkInfoOutput) ToDynamicLinkInfoPtrOutputWithContext(ctx context.Context) DynamicLinkInfoPtrOutput {
	return o.ApplyT(func(v DynamicLinkInfo) *DynamicLinkInfo {
		return &v
	}).(DynamicLinkInfoPtrOutput)
}

// Parameters used for tracking. See all tracking parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
func (o DynamicLinkInfoOutput) AnalyticsInfo() AnalyticsInfoPtrOutput {
	return o.ApplyT(func(v DynamicLinkInfo) *AnalyticsInfo { return v.AnalyticsInfo }).(AnalyticsInfoPtrOutput)
}

// Android related information. See Android related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
func (o DynamicLinkInfoOutput) AndroidInfo() AndroidInfoPtrOutput {
	return o.ApplyT(func(v DynamicLinkInfo) *AndroidInfo { return v.AndroidInfo }).(AndroidInfoPtrOutput)
}

// Desktop related information. See desktop related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
func (o DynamicLinkInfoOutput) DesktopInfo() DesktopInfoPtrOutput {
	return o.ApplyT(func(v DynamicLinkInfo) *DesktopInfo { return v.DesktopInfo }).(DesktopInfoPtrOutput)
}

// E.g. https://maps.app.goo.gl, https://maps.page.link, https://g.co/maps More examples can be found in description of getNormalizedUriPrefix in j/c/g/firebase/dynamiclinks/uri/DdlDomain.java Will fallback to dynamic_link_domain is this field is missing
func (o DynamicLinkInfoOutput) DomainUriPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicLinkInfo) *string { return v.DomainUriPrefix }).(pulumi.StringPtrOutput)
}

// Dynamic Links domain that the project owns, e.g. abcd.app.goo.gl [Learn more](https://firebase.google.com/docs/dynamic-links/android/receive) on how to set up Dynamic Link domain associated with your Firebase project. Required if missing domain_uri_prefix.
func (o DynamicLinkInfoOutput) DynamicLinkDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicLinkInfo) *string { return v.DynamicLinkDomain }).(pulumi.StringPtrOutput)
}

// iOS related information. See iOS related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
func (o DynamicLinkInfoOutput) IosInfo() IosInfoPtrOutput {
	return o.ApplyT(func(v DynamicLinkInfo) *IosInfo { return v.IosInfo }).(IosInfoPtrOutput)
}

// The link your app will open, You can specify any URL your app can handle. This link must be a well-formatted URL, be properly URL-encoded, and use the HTTP or HTTPS scheme. See 'link' parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually). Required.
func (o DynamicLinkInfoOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicLinkInfo) *string { return v.Link }).(pulumi.StringPtrOutput)
}

// Information of navigation behavior of a Firebase Dynamic Links.
func (o DynamicLinkInfoOutput) NavigationInfo() NavigationInfoPtrOutput {
	return o.ApplyT(func(v DynamicLinkInfo) *NavigationInfo { return v.NavigationInfo }).(NavigationInfoPtrOutput)
}

// Parameters for social meta tag params. Used to set meta tag data for link previews on social sites.
func (o DynamicLinkInfoOutput) SocialMetaTagInfo() SocialMetaTagInfoPtrOutput {
	return o.ApplyT(func(v DynamicLinkInfo) *SocialMetaTagInfo { return v.SocialMetaTagInfo }).(SocialMetaTagInfoPtrOutput)
}

type DynamicLinkInfoPtrOutput struct{ *pulumi.OutputState }

func (DynamicLinkInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicLinkInfo)(nil)).Elem()
}

func (o DynamicLinkInfoPtrOutput) ToDynamicLinkInfoPtrOutput() DynamicLinkInfoPtrOutput {
	return o
}

func (o DynamicLinkInfoPtrOutput) ToDynamicLinkInfoPtrOutputWithContext(ctx context.Context) DynamicLinkInfoPtrOutput {
	return o
}

func (o DynamicLinkInfoPtrOutput) Elem() DynamicLinkInfoOutput {
	return o.ApplyT(func(v *DynamicLinkInfo) DynamicLinkInfo { return *v }).(DynamicLinkInfoOutput)
}

// Parameters used for tracking. See all tracking parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
func (o DynamicLinkInfoPtrOutput) AnalyticsInfo() AnalyticsInfoPtrOutput {
	return o.ApplyT(func(v *DynamicLinkInfo) *AnalyticsInfo {
		if v == nil {
			return nil
		}
		return v.AnalyticsInfo
	}).(AnalyticsInfoPtrOutput)
}

// Android related information. See Android related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
func (o DynamicLinkInfoPtrOutput) AndroidInfo() AndroidInfoPtrOutput {
	return o.ApplyT(func(v *DynamicLinkInfo) *AndroidInfo {
		if v == nil {
			return nil
		}
		return v.AndroidInfo
	}).(AndroidInfoPtrOutput)
}

// Desktop related information. See desktop related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
func (o DynamicLinkInfoPtrOutput) DesktopInfo() DesktopInfoPtrOutput {
	return o.ApplyT(func(v *DynamicLinkInfo) *DesktopInfo {
		if v == nil {
			return nil
		}
		return v.DesktopInfo
	}).(DesktopInfoPtrOutput)
}

// E.g. https://maps.app.goo.gl, https://maps.page.link, https://g.co/maps More examples can be found in description of getNormalizedUriPrefix in j/c/g/firebase/dynamiclinks/uri/DdlDomain.java Will fallback to dynamic_link_domain is this field is missing
func (o DynamicLinkInfoPtrOutput) DomainUriPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicLinkInfo) *string {
		if v == nil {
			return nil
		}
		return v.DomainUriPrefix
	}).(pulumi.StringPtrOutput)
}

// Dynamic Links domain that the project owns, e.g. abcd.app.goo.gl [Learn more](https://firebase.google.com/docs/dynamic-links/android/receive) on how to set up Dynamic Link domain associated with your Firebase project. Required if missing domain_uri_prefix.
func (o DynamicLinkInfoPtrOutput) DynamicLinkDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicLinkInfo) *string {
		if v == nil {
			return nil
		}
		return v.DynamicLinkDomain
	}).(pulumi.StringPtrOutput)
}

// iOS related information. See iOS related parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually).
func (o DynamicLinkInfoPtrOutput) IosInfo() IosInfoPtrOutput {
	return o.ApplyT(func(v *DynamicLinkInfo) *IosInfo {
		if v == nil {
			return nil
		}
		return v.IosInfo
	}).(IosInfoPtrOutput)
}

// The link your app will open, You can specify any URL your app can handle. This link must be a well-formatted URL, be properly URL-encoded, and use the HTTP or HTTPS scheme. See 'link' parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually). Required.
func (o DynamicLinkInfoPtrOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicLinkInfo) *string {
		if v == nil {
			return nil
		}
		return v.Link
	}).(pulumi.StringPtrOutput)
}

// Information of navigation behavior of a Firebase Dynamic Links.
func (o DynamicLinkInfoPtrOutput) NavigationInfo() NavigationInfoPtrOutput {
	return o.ApplyT(func(v *DynamicLinkInfo) *NavigationInfo {
		if v == nil {
			return nil
		}
		return v.NavigationInfo
	}).(NavigationInfoPtrOutput)
}

// Parameters for social meta tag params. Used to set meta tag data for link previews on social sites.
func (o DynamicLinkInfoPtrOutput) SocialMetaTagInfo() SocialMetaTagInfoPtrOutput {
	return o.ApplyT(func(v *DynamicLinkInfo) *SocialMetaTagInfo {
		if v == nil {
			return nil
		}
		return v.SocialMetaTagInfo
	}).(SocialMetaTagInfoPtrOutput)
}

// Parameters for Google Play Campaign Measurements. [Learn more](https://developers.google.com/analytics/devguides/collection/android/v4/campaigns#campaign-params)
type GooglePlayAnalytics struct {
	// [AdWords autotagging parameter](https://support.google.com/analytics/answer/1033981?hl=en); used to measure Google AdWords ads. This value is generated dynamically and should never be modified.
	Gclid *string `pulumi:"gclid"`
	// Campaign name; used for keyword analysis to identify a specific product promotion or strategic campaign.
	UtmCampaign *string `pulumi:"utmCampaign"`
	// Campaign content; used for A/B testing and content-targeted ads to differentiate ads or links that point to the same URL.
	UtmContent *string `pulumi:"utmContent"`
	// Campaign medium; used to identify a medium such as email or cost-per-click.
	UtmMedium *string `pulumi:"utmMedium"`
	// Campaign source; used to identify a search engine, newsletter, or other source.
	UtmSource *string `pulumi:"utmSource"`
	// Campaign term; used with paid search to supply the keywords for ads.
	UtmTerm *string `pulumi:"utmTerm"`
}

// GooglePlayAnalyticsInput is an input type that accepts GooglePlayAnalyticsArgs and GooglePlayAnalyticsOutput values.
// You can construct a concrete instance of `GooglePlayAnalyticsInput` via:
//
//          GooglePlayAnalyticsArgs{...}
type GooglePlayAnalyticsInput interface {
	pulumi.Input

	ToGooglePlayAnalyticsOutput() GooglePlayAnalyticsOutput
	ToGooglePlayAnalyticsOutputWithContext(context.Context) GooglePlayAnalyticsOutput
}

// Parameters for Google Play Campaign Measurements. [Learn more](https://developers.google.com/analytics/devguides/collection/android/v4/campaigns#campaign-params)
type GooglePlayAnalyticsArgs struct {
	// [AdWords autotagging parameter](https://support.google.com/analytics/answer/1033981?hl=en); used to measure Google AdWords ads. This value is generated dynamically and should never be modified.
	Gclid pulumi.StringPtrInput `pulumi:"gclid"`
	// Campaign name; used for keyword analysis to identify a specific product promotion or strategic campaign.
	UtmCampaign pulumi.StringPtrInput `pulumi:"utmCampaign"`
	// Campaign content; used for A/B testing and content-targeted ads to differentiate ads or links that point to the same URL.
	UtmContent pulumi.StringPtrInput `pulumi:"utmContent"`
	// Campaign medium; used to identify a medium such as email or cost-per-click.
	UtmMedium pulumi.StringPtrInput `pulumi:"utmMedium"`
	// Campaign source; used to identify a search engine, newsletter, or other source.
	UtmSource pulumi.StringPtrInput `pulumi:"utmSource"`
	// Campaign term; used with paid search to supply the keywords for ads.
	UtmTerm pulumi.StringPtrInput `pulumi:"utmTerm"`
}

func (GooglePlayAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePlayAnalytics)(nil)).Elem()
}

func (i GooglePlayAnalyticsArgs) ToGooglePlayAnalyticsOutput() GooglePlayAnalyticsOutput {
	return i.ToGooglePlayAnalyticsOutputWithContext(context.Background())
}

func (i GooglePlayAnalyticsArgs) ToGooglePlayAnalyticsOutputWithContext(ctx context.Context) GooglePlayAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePlayAnalyticsOutput)
}

func (i GooglePlayAnalyticsArgs) ToGooglePlayAnalyticsPtrOutput() GooglePlayAnalyticsPtrOutput {
	return i.ToGooglePlayAnalyticsPtrOutputWithContext(context.Background())
}

func (i GooglePlayAnalyticsArgs) ToGooglePlayAnalyticsPtrOutputWithContext(ctx context.Context) GooglePlayAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePlayAnalyticsOutput).ToGooglePlayAnalyticsPtrOutputWithContext(ctx)
}

// GooglePlayAnalyticsPtrInput is an input type that accepts GooglePlayAnalyticsArgs, GooglePlayAnalyticsPtr and GooglePlayAnalyticsPtrOutput values.
// You can construct a concrete instance of `GooglePlayAnalyticsPtrInput` via:
//
//          GooglePlayAnalyticsArgs{...}
//
//  or:
//
//          nil
type GooglePlayAnalyticsPtrInput interface {
	pulumi.Input

	ToGooglePlayAnalyticsPtrOutput() GooglePlayAnalyticsPtrOutput
	ToGooglePlayAnalyticsPtrOutputWithContext(context.Context) GooglePlayAnalyticsPtrOutput
}

type googlePlayAnalyticsPtrType GooglePlayAnalyticsArgs

func GooglePlayAnalyticsPtr(v *GooglePlayAnalyticsArgs) GooglePlayAnalyticsPtrInput {
	return (*googlePlayAnalyticsPtrType)(v)
}

func (*googlePlayAnalyticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePlayAnalytics)(nil)).Elem()
}

func (i *googlePlayAnalyticsPtrType) ToGooglePlayAnalyticsPtrOutput() GooglePlayAnalyticsPtrOutput {
	return i.ToGooglePlayAnalyticsPtrOutputWithContext(context.Background())
}

func (i *googlePlayAnalyticsPtrType) ToGooglePlayAnalyticsPtrOutputWithContext(ctx context.Context) GooglePlayAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePlayAnalyticsPtrOutput)
}

// Parameters for Google Play Campaign Measurements. [Learn more](https://developers.google.com/analytics/devguides/collection/android/v4/campaigns#campaign-params)
type GooglePlayAnalyticsOutput struct{ *pulumi.OutputState }

func (GooglePlayAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePlayAnalytics)(nil)).Elem()
}

func (o GooglePlayAnalyticsOutput) ToGooglePlayAnalyticsOutput() GooglePlayAnalyticsOutput {
	return o
}

func (o GooglePlayAnalyticsOutput) ToGooglePlayAnalyticsOutputWithContext(ctx context.Context) GooglePlayAnalyticsOutput {
	return o
}

func (o GooglePlayAnalyticsOutput) ToGooglePlayAnalyticsPtrOutput() GooglePlayAnalyticsPtrOutput {
	return o.ToGooglePlayAnalyticsPtrOutputWithContext(context.Background())
}

func (o GooglePlayAnalyticsOutput) ToGooglePlayAnalyticsPtrOutputWithContext(ctx context.Context) GooglePlayAnalyticsPtrOutput {
	return o.ApplyT(func(v GooglePlayAnalytics) *GooglePlayAnalytics {
		return &v
	}).(GooglePlayAnalyticsPtrOutput)
}

// [AdWords autotagging parameter](https://support.google.com/analytics/answer/1033981?hl=en); used to measure Google AdWords ads. This value is generated dynamically and should never be modified.
func (o GooglePlayAnalyticsOutput) Gclid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePlayAnalytics) *string { return v.Gclid }).(pulumi.StringPtrOutput)
}

// Campaign name; used for keyword analysis to identify a specific product promotion or strategic campaign.
func (o GooglePlayAnalyticsOutput) UtmCampaign() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePlayAnalytics) *string { return v.UtmCampaign }).(pulumi.StringPtrOutput)
}

// Campaign content; used for A/B testing and content-targeted ads to differentiate ads or links that point to the same URL.
func (o GooglePlayAnalyticsOutput) UtmContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePlayAnalytics) *string { return v.UtmContent }).(pulumi.StringPtrOutput)
}

// Campaign medium; used to identify a medium such as email or cost-per-click.
func (o GooglePlayAnalyticsOutput) UtmMedium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePlayAnalytics) *string { return v.UtmMedium }).(pulumi.StringPtrOutput)
}

// Campaign source; used to identify a search engine, newsletter, or other source.
func (o GooglePlayAnalyticsOutput) UtmSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePlayAnalytics) *string { return v.UtmSource }).(pulumi.StringPtrOutput)
}

// Campaign term; used with paid search to supply the keywords for ads.
func (o GooglePlayAnalyticsOutput) UtmTerm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePlayAnalytics) *string { return v.UtmTerm }).(pulumi.StringPtrOutput)
}

type GooglePlayAnalyticsPtrOutput struct{ *pulumi.OutputState }

func (GooglePlayAnalyticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePlayAnalytics)(nil)).Elem()
}

func (o GooglePlayAnalyticsPtrOutput) ToGooglePlayAnalyticsPtrOutput() GooglePlayAnalyticsPtrOutput {
	return o
}

func (o GooglePlayAnalyticsPtrOutput) ToGooglePlayAnalyticsPtrOutputWithContext(ctx context.Context) GooglePlayAnalyticsPtrOutput {
	return o
}

func (o GooglePlayAnalyticsPtrOutput) Elem() GooglePlayAnalyticsOutput {
	return o.ApplyT(func(v *GooglePlayAnalytics) GooglePlayAnalytics { return *v }).(GooglePlayAnalyticsOutput)
}

// [AdWords autotagging parameter](https://support.google.com/analytics/answer/1033981?hl=en); used to measure Google AdWords ads. This value is generated dynamically and should never be modified.
func (o GooglePlayAnalyticsPtrOutput) Gclid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePlayAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.Gclid
	}).(pulumi.StringPtrOutput)
}

// Campaign name; used for keyword analysis to identify a specific product promotion or strategic campaign.
func (o GooglePlayAnalyticsPtrOutput) UtmCampaign() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePlayAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.UtmCampaign
	}).(pulumi.StringPtrOutput)
}

// Campaign content; used for A/B testing and content-targeted ads to differentiate ads or links that point to the same URL.
func (o GooglePlayAnalyticsPtrOutput) UtmContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePlayAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.UtmContent
	}).(pulumi.StringPtrOutput)
}

// Campaign medium; used to identify a medium such as email or cost-per-click.
func (o GooglePlayAnalyticsPtrOutput) UtmMedium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePlayAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.UtmMedium
	}).(pulumi.StringPtrOutput)
}

// Campaign source; used to identify a search engine, newsletter, or other source.
func (o GooglePlayAnalyticsPtrOutput) UtmSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePlayAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.UtmSource
	}).(pulumi.StringPtrOutput)
}

// Campaign term; used with paid search to supply the keywords for ads.
func (o GooglePlayAnalyticsPtrOutput) UtmTerm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePlayAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.UtmTerm
	}).(pulumi.StringPtrOutput)
}

// Parameters for iTunes Connect App Analytics.
type ITunesConnectAnalytics struct {
	// Affiliate token used to create affiliate-coded links.
	At *string `pulumi:"at"`
	// Campaign text that developers can optionally add to any link in order to track sales from a specific marketing campaign.
	Ct *string `pulumi:"ct"`
	// iTune media types, including music, podcasts, audiobooks and so on.
	Mt *string `pulumi:"mt"`
	// Provider token that enables analytics for Dynamic Links from within iTunes Connect.
	Pt *string `pulumi:"pt"`
}

// ITunesConnectAnalyticsInput is an input type that accepts ITunesConnectAnalyticsArgs and ITunesConnectAnalyticsOutput values.
// You can construct a concrete instance of `ITunesConnectAnalyticsInput` via:
//
//          ITunesConnectAnalyticsArgs{...}
type ITunesConnectAnalyticsInput interface {
	pulumi.Input

	ToITunesConnectAnalyticsOutput() ITunesConnectAnalyticsOutput
	ToITunesConnectAnalyticsOutputWithContext(context.Context) ITunesConnectAnalyticsOutput
}

// Parameters for iTunes Connect App Analytics.
type ITunesConnectAnalyticsArgs struct {
	// Affiliate token used to create affiliate-coded links.
	At pulumi.StringPtrInput `pulumi:"at"`
	// Campaign text that developers can optionally add to any link in order to track sales from a specific marketing campaign.
	Ct pulumi.StringPtrInput `pulumi:"ct"`
	// iTune media types, including music, podcasts, audiobooks and so on.
	Mt pulumi.StringPtrInput `pulumi:"mt"`
	// Provider token that enables analytics for Dynamic Links from within iTunes Connect.
	Pt pulumi.StringPtrInput `pulumi:"pt"`
}

func (ITunesConnectAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ITunesConnectAnalytics)(nil)).Elem()
}

func (i ITunesConnectAnalyticsArgs) ToITunesConnectAnalyticsOutput() ITunesConnectAnalyticsOutput {
	return i.ToITunesConnectAnalyticsOutputWithContext(context.Background())
}

func (i ITunesConnectAnalyticsArgs) ToITunesConnectAnalyticsOutputWithContext(ctx context.Context) ITunesConnectAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ITunesConnectAnalyticsOutput)
}

func (i ITunesConnectAnalyticsArgs) ToITunesConnectAnalyticsPtrOutput() ITunesConnectAnalyticsPtrOutput {
	return i.ToITunesConnectAnalyticsPtrOutputWithContext(context.Background())
}

func (i ITunesConnectAnalyticsArgs) ToITunesConnectAnalyticsPtrOutputWithContext(ctx context.Context) ITunesConnectAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ITunesConnectAnalyticsOutput).ToITunesConnectAnalyticsPtrOutputWithContext(ctx)
}

// ITunesConnectAnalyticsPtrInput is an input type that accepts ITunesConnectAnalyticsArgs, ITunesConnectAnalyticsPtr and ITunesConnectAnalyticsPtrOutput values.
// You can construct a concrete instance of `ITunesConnectAnalyticsPtrInput` via:
//
//          ITunesConnectAnalyticsArgs{...}
//
//  or:
//
//          nil
type ITunesConnectAnalyticsPtrInput interface {
	pulumi.Input

	ToITunesConnectAnalyticsPtrOutput() ITunesConnectAnalyticsPtrOutput
	ToITunesConnectAnalyticsPtrOutputWithContext(context.Context) ITunesConnectAnalyticsPtrOutput
}

type itunesConnectAnalyticsPtrType ITunesConnectAnalyticsArgs

func ITunesConnectAnalyticsPtr(v *ITunesConnectAnalyticsArgs) ITunesConnectAnalyticsPtrInput {
	return (*itunesConnectAnalyticsPtrType)(v)
}

func (*itunesConnectAnalyticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ITunesConnectAnalytics)(nil)).Elem()
}

func (i *itunesConnectAnalyticsPtrType) ToITunesConnectAnalyticsPtrOutput() ITunesConnectAnalyticsPtrOutput {
	return i.ToITunesConnectAnalyticsPtrOutputWithContext(context.Background())
}

func (i *itunesConnectAnalyticsPtrType) ToITunesConnectAnalyticsPtrOutputWithContext(ctx context.Context) ITunesConnectAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ITunesConnectAnalyticsPtrOutput)
}

// Parameters for iTunes Connect App Analytics.
type ITunesConnectAnalyticsOutput struct{ *pulumi.OutputState }

func (ITunesConnectAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ITunesConnectAnalytics)(nil)).Elem()
}

func (o ITunesConnectAnalyticsOutput) ToITunesConnectAnalyticsOutput() ITunesConnectAnalyticsOutput {
	return o
}

func (o ITunesConnectAnalyticsOutput) ToITunesConnectAnalyticsOutputWithContext(ctx context.Context) ITunesConnectAnalyticsOutput {
	return o
}

func (o ITunesConnectAnalyticsOutput) ToITunesConnectAnalyticsPtrOutput() ITunesConnectAnalyticsPtrOutput {
	return o.ToITunesConnectAnalyticsPtrOutputWithContext(context.Background())
}

func (o ITunesConnectAnalyticsOutput) ToITunesConnectAnalyticsPtrOutputWithContext(ctx context.Context) ITunesConnectAnalyticsPtrOutput {
	return o.ApplyT(func(v ITunesConnectAnalytics) *ITunesConnectAnalytics {
		return &v
	}).(ITunesConnectAnalyticsPtrOutput)
}

// Affiliate token used to create affiliate-coded links.
func (o ITunesConnectAnalyticsOutput) At() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ITunesConnectAnalytics) *string { return v.At }).(pulumi.StringPtrOutput)
}

// Campaign text that developers can optionally add to any link in order to track sales from a specific marketing campaign.
func (o ITunesConnectAnalyticsOutput) Ct() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ITunesConnectAnalytics) *string { return v.Ct }).(pulumi.StringPtrOutput)
}

// iTune media types, including music, podcasts, audiobooks and so on.
func (o ITunesConnectAnalyticsOutput) Mt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ITunesConnectAnalytics) *string { return v.Mt }).(pulumi.StringPtrOutput)
}

// Provider token that enables analytics for Dynamic Links from within iTunes Connect.
func (o ITunesConnectAnalyticsOutput) Pt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ITunesConnectAnalytics) *string { return v.Pt }).(pulumi.StringPtrOutput)
}

type ITunesConnectAnalyticsPtrOutput struct{ *pulumi.OutputState }

func (ITunesConnectAnalyticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ITunesConnectAnalytics)(nil)).Elem()
}

func (o ITunesConnectAnalyticsPtrOutput) ToITunesConnectAnalyticsPtrOutput() ITunesConnectAnalyticsPtrOutput {
	return o
}

func (o ITunesConnectAnalyticsPtrOutput) ToITunesConnectAnalyticsPtrOutputWithContext(ctx context.Context) ITunesConnectAnalyticsPtrOutput {
	return o
}

func (o ITunesConnectAnalyticsPtrOutput) Elem() ITunesConnectAnalyticsOutput {
	return o.ApplyT(func(v *ITunesConnectAnalytics) ITunesConnectAnalytics { return *v }).(ITunesConnectAnalyticsOutput)
}

// Affiliate token used to create affiliate-coded links.
func (o ITunesConnectAnalyticsPtrOutput) At() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ITunesConnectAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.At
	}).(pulumi.StringPtrOutput)
}

// Campaign text that developers can optionally add to any link in order to track sales from a specific marketing campaign.
func (o ITunesConnectAnalyticsPtrOutput) Ct() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ITunesConnectAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.Ct
	}).(pulumi.StringPtrOutput)
}

// iTune media types, including music, podcasts, audiobooks and so on.
func (o ITunesConnectAnalyticsPtrOutput) Mt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ITunesConnectAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.Mt
	}).(pulumi.StringPtrOutput)
}

// Provider token that enables analytics for Dynamic Links from within iTunes Connect.
func (o ITunesConnectAnalyticsPtrOutput) Pt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ITunesConnectAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.Pt
	}).(pulumi.StringPtrOutput)
}

// iOS related attributes to the Dynamic Link..
type IosInfo struct {
	// iOS App Store ID.
	IosAppStoreId *string `pulumi:"iosAppStoreId"`
	// iOS bundle ID of the app.
	IosBundleId *string `pulumi:"iosBundleId"`
	// Custom (destination) scheme to use for iOS. By default, we’ll use the bundle ID as the custom scheme. Developer can override this behavior using this param.
	IosCustomScheme *string `pulumi:"iosCustomScheme"`
	// Link to open on iOS if the app is not installed.
	IosFallbackLink *string `pulumi:"iosFallbackLink"`
	// iPad bundle ID of the app.
	IosIpadBundleId *string `pulumi:"iosIpadBundleId"`
	// If specified, this overrides the ios_fallback_link value on iPads.
	IosIpadFallbackLink *string `pulumi:"iosIpadFallbackLink"`
	// iOS minimum version.
	IosMinimumVersion *string `pulumi:"iosMinimumVersion"`
}

// IosInfoInput is an input type that accepts IosInfoArgs and IosInfoOutput values.
// You can construct a concrete instance of `IosInfoInput` via:
//
//          IosInfoArgs{...}
type IosInfoInput interface {
	pulumi.Input

	ToIosInfoOutput() IosInfoOutput
	ToIosInfoOutputWithContext(context.Context) IosInfoOutput
}

// iOS related attributes to the Dynamic Link..
type IosInfoArgs struct {
	// iOS App Store ID.
	IosAppStoreId pulumi.StringPtrInput `pulumi:"iosAppStoreId"`
	// iOS bundle ID of the app.
	IosBundleId pulumi.StringPtrInput `pulumi:"iosBundleId"`
	// Custom (destination) scheme to use for iOS. By default, we’ll use the bundle ID as the custom scheme. Developer can override this behavior using this param.
	IosCustomScheme pulumi.StringPtrInput `pulumi:"iosCustomScheme"`
	// Link to open on iOS if the app is not installed.
	IosFallbackLink pulumi.StringPtrInput `pulumi:"iosFallbackLink"`
	// iPad bundle ID of the app.
	IosIpadBundleId pulumi.StringPtrInput `pulumi:"iosIpadBundleId"`
	// If specified, this overrides the ios_fallback_link value on iPads.
	IosIpadFallbackLink pulumi.StringPtrInput `pulumi:"iosIpadFallbackLink"`
	// iOS minimum version.
	IosMinimumVersion pulumi.StringPtrInput `pulumi:"iosMinimumVersion"`
}

func (IosInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IosInfo)(nil)).Elem()
}

func (i IosInfoArgs) ToIosInfoOutput() IosInfoOutput {
	return i.ToIosInfoOutputWithContext(context.Background())
}

func (i IosInfoArgs) ToIosInfoOutputWithContext(ctx context.Context) IosInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosInfoOutput)
}

func (i IosInfoArgs) ToIosInfoPtrOutput() IosInfoPtrOutput {
	return i.ToIosInfoPtrOutputWithContext(context.Background())
}

func (i IosInfoArgs) ToIosInfoPtrOutputWithContext(ctx context.Context) IosInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosInfoOutput).ToIosInfoPtrOutputWithContext(ctx)
}

// IosInfoPtrInput is an input type that accepts IosInfoArgs, IosInfoPtr and IosInfoPtrOutput values.
// You can construct a concrete instance of `IosInfoPtrInput` via:
//
//          IosInfoArgs{...}
//
//  or:
//
//          nil
type IosInfoPtrInput interface {
	pulumi.Input

	ToIosInfoPtrOutput() IosInfoPtrOutput
	ToIosInfoPtrOutputWithContext(context.Context) IosInfoPtrOutput
}

type iosInfoPtrType IosInfoArgs

func IosInfoPtr(v *IosInfoArgs) IosInfoPtrInput {
	return (*iosInfoPtrType)(v)
}

func (*iosInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IosInfo)(nil)).Elem()
}

func (i *iosInfoPtrType) ToIosInfoPtrOutput() IosInfoPtrOutput {
	return i.ToIosInfoPtrOutputWithContext(context.Background())
}

func (i *iosInfoPtrType) ToIosInfoPtrOutputWithContext(ctx context.Context) IosInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IosInfoPtrOutput)
}

// iOS related attributes to the Dynamic Link..
type IosInfoOutput struct{ *pulumi.OutputState }

func (IosInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IosInfo)(nil)).Elem()
}

func (o IosInfoOutput) ToIosInfoOutput() IosInfoOutput {
	return o
}

func (o IosInfoOutput) ToIosInfoOutputWithContext(ctx context.Context) IosInfoOutput {
	return o
}

func (o IosInfoOutput) ToIosInfoPtrOutput() IosInfoPtrOutput {
	return o.ToIosInfoPtrOutputWithContext(context.Background())
}

func (o IosInfoOutput) ToIosInfoPtrOutputWithContext(ctx context.Context) IosInfoPtrOutput {
	return o.ApplyT(func(v IosInfo) *IosInfo {
		return &v
	}).(IosInfoPtrOutput)
}

// iOS App Store ID.
func (o IosInfoOutput) IosAppStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosInfo) *string { return v.IosAppStoreId }).(pulumi.StringPtrOutput)
}

// iOS bundle ID of the app.
func (o IosInfoOutput) IosBundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosInfo) *string { return v.IosBundleId }).(pulumi.StringPtrOutput)
}

// Custom (destination) scheme to use for iOS. By default, we’ll use the bundle ID as the custom scheme. Developer can override this behavior using this param.
func (o IosInfoOutput) IosCustomScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosInfo) *string { return v.IosCustomScheme }).(pulumi.StringPtrOutput)
}

// Link to open on iOS if the app is not installed.
func (o IosInfoOutput) IosFallbackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosInfo) *string { return v.IosFallbackLink }).(pulumi.StringPtrOutput)
}

// iPad bundle ID of the app.
func (o IosInfoOutput) IosIpadBundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosInfo) *string { return v.IosIpadBundleId }).(pulumi.StringPtrOutput)
}

// If specified, this overrides the ios_fallback_link value on iPads.
func (o IosInfoOutput) IosIpadFallbackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosInfo) *string { return v.IosIpadFallbackLink }).(pulumi.StringPtrOutput)
}

// iOS minimum version.
func (o IosInfoOutput) IosMinimumVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IosInfo) *string { return v.IosMinimumVersion }).(pulumi.StringPtrOutput)
}

type IosInfoPtrOutput struct{ *pulumi.OutputState }

func (IosInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IosInfo)(nil)).Elem()
}

func (o IosInfoPtrOutput) ToIosInfoPtrOutput() IosInfoPtrOutput {
	return o
}

func (o IosInfoPtrOutput) ToIosInfoPtrOutputWithContext(ctx context.Context) IosInfoPtrOutput {
	return o
}

func (o IosInfoPtrOutput) Elem() IosInfoOutput {
	return o.ApplyT(func(v *IosInfo) IosInfo { return *v }).(IosInfoOutput)
}

// iOS App Store ID.
func (o IosInfoPtrOutput) IosAppStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosInfo) *string {
		if v == nil {
			return nil
		}
		return v.IosAppStoreId
	}).(pulumi.StringPtrOutput)
}

// iOS bundle ID of the app.
func (o IosInfoPtrOutput) IosBundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosInfo) *string {
		if v == nil {
			return nil
		}
		return v.IosBundleId
	}).(pulumi.StringPtrOutput)
}

// Custom (destination) scheme to use for iOS. By default, we’ll use the bundle ID as the custom scheme. Developer can override this behavior using this param.
func (o IosInfoPtrOutput) IosCustomScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosInfo) *string {
		if v == nil {
			return nil
		}
		return v.IosCustomScheme
	}).(pulumi.StringPtrOutput)
}

// Link to open on iOS if the app is not installed.
func (o IosInfoPtrOutput) IosFallbackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosInfo) *string {
		if v == nil {
			return nil
		}
		return v.IosFallbackLink
	}).(pulumi.StringPtrOutput)
}

// iPad bundle ID of the app.
func (o IosInfoPtrOutput) IosIpadBundleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosInfo) *string {
		if v == nil {
			return nil
		}
		return v.IosIpadBundleId
	}).(pulumi.StringPtrOutput)
}

// If specified, this overrides the ios_fallback_link value on iPads.
func (o IosInfoPtrOutput) IosIpadFallbackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosInfo) *string {
		if v == nil {
			return nil
		}
		return v.IosIpadFallbackLink
	}).(pulumi.StringPtrOutput)
}

// iOS minimum version.
func (o IosInfoPtrOutput) IosMinimumVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IosInfo) *string {
		if v == nil {
			return nil
		}
		return v.IosMinimumVersion
	}).(pulumi.StringPtrOutput)
}

// Information of navigation behavior.
type NavigationInfo struct {
	// If this option is on, FDL click will be forced to redirect rather than show an interstitial page.
	EnableForcedRedirect *bool `pulumi:"enableForcedRedirect"`
}

// NavigationInfoInput is an input type that accepts NavigationInfoArgs and NavigationInfoOutput values.
// You can construct a concrete instance of `NavigationInfoInput` via:
//
//          NavigationInfoArgs{...}
type NavigationInfoInput interface {
	pulumi.Input

	ToNavigationInfoOutput() NavigationInfoOutput
	ToNavigationInfoOutputWithContext(context.Context) NavigationInfoOutput
}

// Information of navigation behavior.
type NavigationInfoArgs struct {
	// If this option is on, FDL click will be forced to redirect rather than show an interstitial page.
	EnableForcedRedirect pulumi.BoolPtrInput `pulumi:"enableForcedRedirect"`
}

func (NavigationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NavigationInfo)(nil)).Elem()
}

func (i NavigationInfoArgs) ToNavigationInfoOutput() NavigationInfoOutput {
	return i.ToNavigationInfoOutputWithContext(context.Background())
}

func (i NavigationInfoArgs) ToNavigationInfoOutputWithContext(ctx context.Context) NavigationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NavigationInfoOutput)
}

func (i NavigationInfoArgs) ToNavigationInfoPtrOutput() NavigationInfoPtrOutput {
	return i.ToNavigationInfoPtrOutputWithContext(context.Background())
}

func (i NavigationInfoArgs) ToNavigationInfoPtrOutputWithContext(ctx context.Context) NavigationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NavigationInfoOutput).ToNavigationInfoPtrOutputWithContext(ctx)
}

// NavigationInfoPtrInput is an input type that accepts NavigationInfoArgs, NavigationInfoPtr and NavigationInfoPtrOutput values.
// You can construct a concrete instance of `NavigationInfoPtrInput` via:
//
//          NavigationInfoArgs{...}
//
//  or:
//
//          nil
type NavigationInfoPtrInput interface {
	pulumi.Input

	ToNavigationInfoPtrOutput() NavigationInfoPtrOutput
	ToNavigationInfoPtrOutputWithContext(context.Context) NavigationInfoPtrOutput
}

type navigationInfoPtrType NavigationInfoArgs

func NavigationInfoPtr(v *NavigationInfoArgs) NavigationInfoPtrInput {
	return (*navigationInfoPtrType)(v)
}

func (*navigationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NavigationInfo)(nil)).Elem()
}

func (i *navigationInfoPtrType) ToNavigationInfoPtrOutput() NavigationInfoPtrOutput {
	return i.ToNavigationInfoPtrOutputWithContext(context.Background())
}

func (i *navigationInfoPtrType) ToNavigationInfoPtrOutputWithContext(ctx context.Context) NavigationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NavigationInfoPtrOutput)
}

// Information of navigation behavior.
type NavigationInfoOutput struct{ *pulumi.OutputState }

func (NavigationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NavigationInfo)(nil)).Elem()
}

func (o NavigationInfoOutput) ToNavigationInfoOutput() NavigationInfoOutput {
	return o
}

func (o NavigationInfoOutput) ToNavigationInfoOutputWithContext(ctx context.Context) NavigationInfoOutput {
	return o
}

func (o NavigationInfoOutput) ToNavigationInfoPtrOutput() NavigationInfoPtrOutput {
	return o.ToNavigationInfoPtrOutputWithContext(context.Background())
}

func (o NavigationInfoOutput) ToNavigationInfoPtrOutputWithContext(ctx context.Context) NavigationInfoPtrOutput {
	return o.ApplyT(func(v NavigationInfo) *NavigationInfo {
		return &v
	}).(NavigationInfoPtrOutput)
}

// If this option is on, FDL click will be forced to redirect rather than show an interstitial page.
func (o NavigationInfoOutput) EnableForcedRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NavigationInfo) *bool { return v.EnableForcedRedirect }).(pulumi.BoolPtrOutput)
}

type NavigationInfoPtrOutput struct{ *pulumi.OutputState }

func (NavigationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NavigationInfo)(nil)).Elem()
}

func (o NavigationInfoPtrOutput) ToNavigationInfoPtrOutput() NavigationInfoPtrOutput {
	return o
}

func (o NavigationInfoPtrOutput) ToNavigationInfoPtrOutputWithContext(ctx context.Context) NavigationInfoPtrOutput {
	return o
}

func (o NavigationInfoPtrOutput) Elem() NavigationInfoOutput {
	return o.ApplyT(func(v *NavigationInfo) NavigationInfo { return *v }).(NavigationInfoOutput)
}

// If this option is on, FDL click will be forced to redirect rather than show an interstitial page.
func (o NavigationInfoPtrOutput) EnableForcedRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NavigationInfo) *bool {
		if v == nil {
			return nil
		}
		return v.EnableForcedRedirect
	}).(pulumi.BoolPtrOutput)
}

// Parameters for social meta tag params. Used to set meta tag data for link previews on social sites.
type SocialMetaTagInfo struct {
	// A short description of the link. Optional.
	SocialDescription *string `pulumi:"socialDescription"`
	// An image url string. Optional.
	SocialImageLink *string `pulumi:"socialImageLink"`
	// Title to be displayed. Optional.
	SocialTitle *string `pulumi:"socialTitle"`
}

// SocialMetaTagInfoInput is an input type that accepts SocialMetaTagInfoArgs and SocialMetaTagInfoOutput values.
// You can construct a concrete instance of `SocialMetaTagInfoInput` via:
//
//          SocialMetaTagInfoArgs{...}
type SocialMetaTagInfoInput interface {
	pulumi.Input

	ToSocialMetaTagInfoOutput() SocialMetaTagInfoOutput
	ToSocialMetaTagInfoOutputWithContext(context.Context) SocialMetaTagInfoOutput
}

// Parameters for social meta tag params. Used to set meta tag data for link previews on social sites.
type SocialMetaTagInfoArgs struct {
	// A short description of the link. Optional.
	SocialDescription pulumi.StringPtrInput `pulumi:"socialDescription"`
	// An image url string. Optional.
	SocialImageLink pulumi.StringPtrInput `pulumi:"socialImageLink"`
	// Title to be displayed. Optional.
	SocialTitle pulumi.StringPtrInput `pulumi:"socialTitle"`
}

func (SocialMetaTagInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SocialMetaTagInfo)(nil)).Elem()
}

func (i SocialMetaTagInfoArgs) ToSocialMetaTagInfoOutput() SocialMetaTagInfoOutput {
	return i.ToSocialMetaTagInfoOutputWithContext(context.Background())
}

func (i SocialMetaTagInfoArgs) ToSocialMetaTagInfoOutputWithContext(ctx context.Context) SocialMetaTagInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocialMetaTagInfoOutput)
}

func (i SocialMetaTagInfoArgs) ToSocialMetaTagInfoPtrOutput() SocialMetaTagInfoPtrOutput {
	return i.ToSocialMetaTagInfoPtrOutputWithContext(context.Background())
}

func (i SocialMetaTagInfoArgs) ToSocialMetaTagInfoPtrOutputWithContext(ctx context.Context) SocialMetaTagInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocialMetaTagInfoOutput).ToSocialMetaTagInfoPtrOutputWithContext(ctx)
}

// SocialMetaTagInfoPtrInput is an input type that accepts SocialMetaTagInfoArgs, SocialMetaTagInfoPtr and SocialMetaTagInfoPtrOutput values.
// You can construct a concrete instance of `SocialMetaTagInfoPtrInput` via:
//
//          SocialMetaTagInfoArgs{...}
//
//  or:
//
//          nil
type SocialMetaTagInfoPtrInput interface {
	pulumi.Input

	ToSocialMetaTagInfoPtrOutput() SocialMetaTagInfoPtrOutput
	ToSocialMetaTagInfoPtrOutputWithContext(context.Context) SocialMetaTagInfoPtrOutput
}

type socialMetaTagInfoPtrType SocialMetaTagInfoArgs

func SocialMetaTagInfoPtr(v *SocialMetaTagInfoArgs) SocialMetaTagInfoPtrInput {
	return (*socialMetaTagInfoPtrType)(v)
}

func (*socialMetaTagInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SocialMetaTagInfo)(nil)).Elem()
}

func (i *socialMetaTagInfoPtrType) ToSocialMetaTagInfoPtrOutput() SocialMetaTagInfoPtrOutput {
	return i.ToSocialMetaTagInfoPtrOutputWithContext(context.Background())
}

func (i *socialMetaTagInfoPtrType) ToSocialMetaTagInfoPtrOutputWithContext(ctx context.Context) SocialMetaTagInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocialMetaTagInfoPtrOutput)
}

// Parameters for social meta tag params. Used to set meta tag data for link previews on social sites.
type SocialMetaTagInfoOutput struct{ *pulumi.OutputState }

func (SocialMetaTagInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SocialMetaTagInfo)(nil)).Elem()
}

func (o SocialMetaTagInfoOutput) ToSocialMetaTagInfoOutput() SocialMetaTagInfoOutput {
	return o
}

func (o SocialMetaTagInfoOutput) ToSocialMetaTagInfoOutputWithContext(ctx context.Context) SocialMetaTagInfoOutput {
	return o
}

func (o SocialMetaTagInfoOutput) ToSocialMetaTagInfoPtrOutput() SocialMetaTagInfoPtrOutput {
	return o.ToSocialMetaTagInfoPtrOutputWithContext(context.Background())
}

func (o SocialMetaTagInfoOutput) ToSocialMetaTagInfoPtrOutputWithContext(ctx context.Context) SocialMetaTagInfoPtrOutput {
	return o.ApplyT(func(v SocialMetaTagInfo) *SocialMetaTagInfo {
		return &v
	}).(SocialMetaTagInfoPtrOutput)
}

// A short description of the link. Optional.
func (o SocialMetaTagInfoOutput) SocialDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SocialMetaTagInfo) *string { return v.SocialDescription }).(pulumi.StringPtrOutput)
}

// An image url string. Optional.
func (o SocialMetaTagInfoOutput) SocialImageLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SocialMetaTagInfo) *string { return v.SocialImageLink }).(pulumi.StringPtrOutput)
}

// Title to be displayed. Optional.
func (o SocialMetaTagInfoOutput) SocialTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SocialMetaTagInfo) *string { return v.SocialTitle }).(pulumi.StringPtrOutput)
}

type SocialMetaTagInfoPtrOutput struct{ *pulumi.OutputState }

func (SocialMetaTagInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SocialMetaTagInfo)(nil)).Elem()
}

func (o SocialMetaTagInfoPtrOutput) ToSocialMetaTagInfoPtrOutput() SocialMetaTagInfoPtrOutput {
	return o
}

func (o SocialMetaTagInfoPtrOutput) ToSocialMetaTagInfoPtrOutputWithContext(ctx context.Context) SocialMetaTagInfoPtrOutput {
	return o
}

func (o SocialMetaTagInfoPtrOutput) Elem() SocialMetaTagInfoOutput {
	return o.ApplyT(func(v *SocialMetaTagInfo) SocialMetaTagInfo { return *v }).(SocialMetaTagInfoOutput)
}

// A short description of the link. Optional.
func (o SocialMetaTagInfoPtrOutput) SocialDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SocialMetaTagInfo) *string {
		if v == nil {
			return nil
		}
		return v.SocialDescription
	}).(pulumi.StringPtrOutput)
}

// An image url string. Optional.
func (o SocialMetaTagInfoPtrOutput) SocialImageLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SocialMetaTagInfo) *string {
		if v == nil {
			return nil
		}
		return v.SocialImageLink
	}).(pulumi.StringPtrOutput)
}

// Title to be displayed. Optional.
func (o SocialMetaTagInfoPtrOutput) SocialTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SocialMetaTagInfo) *string {
		if v == nil {
			return nil
		}
		return v.SocialTitle
	}).(pulumi.StringPtrOutput)
}

// Short Dynamic Link suffix.
type Suffix struct {
	// Only applies to Option.CUSTOM.
	CustomSuffix *string `pulumi:"customSuffix"`
	// Suffix option.
	Option *string `pulumi:"option"`
}

// SuffixInput is an input type that accepts SuffixArgs and SuffixOutput values.
// You can construct a concrete instance of `SuffixInput` via:
//
//          SuffixArgs{...}
type SuffixInput interface {
	pulumi.Input

	ToSuffixOutput() SuffixOutput
	ToSuffixOutputWithContext(context.Context) SuffixOutput
}

// Short Dynamic Link suffix.
type SuffixArgs struct {
	// Only applies to Option.CUSTOM.
	CustomSuffix pulumi.StringPtrInput `pulumi:"customSuffix"`
	// Suffix option.
	Option pulumi.StringPtrInput `pulumi:"option"`
}

func (SuffixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Suffix)(nil)).Elem()
}

func (i SuffixArgs) ToSuffixOutput() SuffixOutput {
	return i.ToSuffixOutputWithContext(context.Background())
}

func (i SuffixArgs) ToSuffixOutputWithContext(ctx context.Context) SuffixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuffixOutput)
}

func (i SuffixArgs) ToSuffixPtrOutput() SuffixPtrOutput {
	return i.ToSuffixPtrOutputWithContext(context.Background())
}

func (i SuffixArgs) ToSuffixPtrOutputWithContext(ctx context.Context) SuffixPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuffixOutput).ToSuffixPtrOutputWithContext(ctx)
}

// SuffixPtrInput is an input type that accepts SuffixArgs, SuffixPtr and SuffixPtrOutput values.
// You can construct a concrete instance of `SuffixPtrInput` via:
//
//          SuffixArgs{...}
//
//  or:
//
//          nil
type SuffixPtrInput interface {
	pulumi.Input

	ToSuffixPtrOutput() SuffixPtrOutput
	ToSuffixPtrOutputWithContext(context.Context) SuffixPtrOutput
}

type suffixPtrType SuffixArgs

func SuffixPtr(v *SuffixArgs) SuffixPtrInput {
	return (*suffixPtrType)(v)
}

func (*suffixPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Suffix)(nil)).Elem()
}

func (i *suffixPtrType) ToSuffixPtrOutput() SuffixPtrOutput {
	return i.ToSuffixPtrOutputWithContext(context.Background())
}

func (i *suffixPtrType) ToSuffixPtrOutputWithContext(ctx context.Context) SuffixPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuffixPtrOutput)
}

// Short Dynamic Link suffix.
type SuffixOutput struct{ *pulumi.OutputState }

func (SuffixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Suffix)(nil)).Elem()
}

func (o SuffixOutput) ToSuffixOutput() SuffixOutput {
	return o
}

func (o SuffixOutput) ToSuffixOutputWithContext(ctx context.Context) SuffixOutput {
	return o
}

func (o SuffixOutput) ToSuffixPtrOutput() SuffixPtrOutput {
	return o.ToSuffixPtrOutputWithContext(context.Background())
}

func (o SuffixOutput) ToSuffixPtrOutputWithContext(ctx context.Context) SuffixPtrOutput {
	return o.ApplyT(func(v Suffix) *Suffix {
		return &v
	}).(SuffixPtrOutput)
}

// Only applies to Option.CUSTOM.
func (o SuffixOutput) CustomSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Suffix) *string { return v.CustomSuffix }).(pulumi.StringPtrOutput)
}

// Suffix option.
func (o SuffixOutput) Option() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Suffix) *string { return v.Option }).(pulumi.StringPtrOutput)
}

type SuffixPtrOutput struct{ *pulumi.OutputState }

func (SuffixPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Suffix)(nil)).Elem()
}

func (o SuffixPtrOutput) ToSuffixPtrOutput() SuffixPtrOutput {
	return o
}

func (o SuffixPtrOutput) ToSuffixPtrOutputWithContext(ctx context.Context) SuffixPtrOutput {
	return o
}

func (o SuffixPtrOutput) Elem() SuffixOutput {
	return o.ApplyT(func(v *Suffix) Suffix { return *v }).(SuffixOutput)
}

// Only applies to Option.CUSTOM.
func (o SuffixPtrOutput) CustomSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Suffix) *string {
		if v == nil {
			return nil
		}
		return v.CustomSuffix
	}).(pulumi.StringPtrOutput)
}

// Suffix option.
func (o SuffixPtrOutput) Option() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Suffix) *string {
		if v == nil {
			return nil
		}
		return v.Option
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AnalyticsInfoOutput{})
	pulumi.RegisterOutputType(AnalyticsInfoPtrOutput{})
	pulumi.RegisterOutputType(AndroidInfoOutput{})
	pulumi.RegisterOutputType(AndroidInfoPtrOutput{})
	pulumi.RegisterOutputType(DesktopInfoOutput{})
	pulumi.RegisterOutputType(DesktopInfoPtrOutput{})
	pulumi.RegisterOutputType(DynamicLinkInfoOutput{})
	pulumi.RegisterOutputType(DynamicLinkInfoPtrOutput{})
	pulumi.RegisterOutputType(GooglePlayAnalyticsOutput{})
	pulumi.RegisterOutputType(GooglePlayAnalyticsPtrOutput{})
	pulumi.RegisterOutputType(ITunesConnectAnalyticsOutput{})
	pulumi.RegisterOutputType(ITunesConnectAnalyticsPtrOutput{})
	pulumi.RegisterOutputType(IosInfoOutput{})
	pulumi.RegisterOutputType(IosInfoPtrOutput{})
	pulumi.RegisterOutputType(NavigationInfoOutput{})
	pulumi.RegisterOutputType(NavigationInfoPtrOutput{})
	pulumi.RegisterOutputType(SocialMetaTagInfoOutput{})
	pulumi.RegisterOutputType(SocialMetaTagInfoPtrOutput{})
	pulumi.RegisterOutputType(SuffixOutput{})
	pulumi.RegisterOutputType(SuffixPtrOutput{})
}
