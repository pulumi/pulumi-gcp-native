// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a short Dynamic Link given either a valid long Dynamic Link or details such as Dynamic Link domain, Android and iOS app information. The created short Dynamic Link will not expire. Repeated calls with the same long Dynamic Link or Dynamic Link information will produce the same short Dynamic Link. The Dynamic Link domain in the request must be owned by requester's Firebase project.
type ShortLink struct {
	pulumi.CustomResourceState
}

// NewShortLink registers a new resource with the given unique name, arguments, and options.
func NewShortLink(ctx *pulumi.Context,
	name string, args *ShortLinkArgs, opts ...pulumi.ResourceOption) (*ShortLink, error) {
	if args == nil {
		args = &ShortLinkArgs{}
	}

	var resource ShortLink
	err := ctx.RegisterResource("gcp-native:firebasedynamiclinks/v1:ShortLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShortLink gets an existing ShortLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShortLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShortLinkState, opts ...pulumi.ResourceOption) (*ShortLink, error) {
	var resource ShortLink
	err := ctx.ReadResource("gcp-native:firebasedynamiclinks/v1:ShortLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ShortLink resources.
type shortLinkState struct {
}

type ShortLinkState struct {
}

func (ShortLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*shortLinkState)(nil)).Elem()
}

type shortLinkArgs struct {
	// Information about the Dynamic Link to be shortened. [Learn more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).
	DynamicLinkInfo *DynamicLinkInfo `pulumi:"dynamicLinkInfo"`
	// Full long Dynamic Link URL with desired query parameters specified. For example, "https://sample.app.goo.gl/?link=http://www.google.com&apn=com.sample", [Learn more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).
	LongDynamicLink *string `pulumi:"longDynamicLink"`
	// Google SDK version. Version takes the form "$major.$minor.$patch"
	SdkVersion *string `pulumi:"sdkVersion"`
	// Short Dynamic Link suffix. Optional.
	Suffix *Suffix `pulumi:"suffix"`
}

// The set of arguments for constructing a ShortLink resource.
type ShortLinkArgs struct {
	// Information about the Dynamic Link to be shortened. [Learn more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).
	DynamicLinkInfo DynamicLinkInfoPtrInput
	// Full long Dynamic Link URL with desired query parameters specified. For example, "https://sample.app.goo.gl/?link=http://www.google.com&apn=com.sample", [Learn more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).
	LongDynamicLink pulumi.StringPtrInput
	// Google SDK version. Version takes the form "$major.$minor.$patch"
	SdkVersion pulumi.StringPtrInput
	// Short Dynamic Link suffix. Optional.
	Suffix SuffixPtrInput
}

func (ShortLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shortLinkArgs)(nil)).Elem()
}

type ShortLinkInput interface {
	pulumi.Input

	ToShortLinkOutput() ShortLinkOutput
	ToShortLinkOutputWithContext(ctx context.Context) ShortLinkOutput
}

func (*ShortLink) ElementType() reflect.Type {
	return reflect.TypeOf((*ShortLink)(nil))
}

func (i *ShortLink) ToShortLinkOutput() ShortLinkOutput {
	return i.ToShortLinkOutputWithContext(context.Background())
}

func (i *ShortLink) ToShortLinkOutputWithContext(ctx context.Context) ShortLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShortLinkOutput)
}

type ShortLinkOutput struct {
	*pulumi.OutputState
}

func (ShortLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShortLink)(nil))
}

func (o ShortLinkOutput) ToShortLinkOutput() ShortLinkOutput {
	return o
}

func (o ShortLinkOutput) ToShortLinkOutputWithContext(ctx context.Context) ShortLinkOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ShortLinkOutput{})
}
