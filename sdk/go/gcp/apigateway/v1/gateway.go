// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new Gateway in a given project and location.
type Gateway struct {
	pulumi.CustomResourceState

	// Required. Resource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}
	ApiConfig pulumi.StringOutput `pulumi:"apiConfig"`
	// Created time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The default API Gateway host name of the form `{gateway_id}-{hash}.{region_code}.gateway.dev`.
	DefaultHostname pulumi.StringOutput `pulumi:"defaultHostname"`
	// Optional. Display name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource name of the Gateway. Format: projects/{project}/locations/{location}/gateways/{gateway}
	Name pulumi.StringOutput `pulumi:"name"`
	// The current state of the Gateway.
	State pulumi.StringOutput `pulumi:"state"`
	// Updated time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewaysId == nil {
		return nil, errors.New("invalid value for required argument 'GatewaysId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource Gateway
	err := ctx.RegisterResource("gcp-native:apigateway/v1:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("gcp-native:apigateway/v1:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	// Required. Resource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}
	ApiConfig *string `pulumi:"apiConfig"`
	// Created time.
	CreateTime *string `pulumi:"createTime"`
	// The default API Gateway host name of the form `{gateway_id}-{hash}.{region_code}.gateway.dev`.
	DefaultHostname *string `pulumi:"defaultHostname"`
	// Optional. Display name.
	DisplayName *string `pulumi:"displayName"`
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels map[string]string `pulumi:"labels"`
	// Resource name of the Gateway. Format: projects/{project}/locations/{location}/gateways/{gateway}
	Name *string `pulumi:"name"`
	// The current state of the Gateway.
	State *string `pulumi:"state"`
	// Updated time.
	UpdateTime *string `pulumi:"updateTime"`
}

type GatewayState struct {
	// Required. Resource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}
	ApiConfig pulumi.StringPtrInput
	// Created time.
	CreateTime pulumi.StringPtrInput
	// The default API Gateway host name of the form `{gateway_id}-{hash}.{region_code}.gateway.dev`.
	DefaultHostname pulumi.StringPtrInput
	// Optional. Display name.
	DisplayName pulumi.StringPtrInput
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels pulumi.StringMapInput
	// Resource name of the Gateway. Format: projects/{project}/locations/{location}/gateways/{gateway}
	Name pulumi.StringPtrInput
	// The current state of the Gateway.
	State pulumi.StringPtrInput
	// Updated time.
	UpdateTime pulumi.StringPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// Required. Resource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}
	ApiConfig *string `pulumi:"apiConfig"`
	// Optional. Display name.
	DisplayName *string `pulumi:"displayName"`
	GatewaysId  string  `pulumi:"gatewaysId"`
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels      map[string]string `pulumi:"labels"`
	LocationsId string            `pulumi:"locationsId"`
	ProjectsId  string            `pulumi:"projectsId"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// Required. Resource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}
	ApiConfig pulumi.StringPtrInput
	// Optional. Display name.
	DisplayName pulumi.StringPtrInput
	GatewaysId  pulumi.StringInput
	// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels      pulumi.StringMapInput
	LocationsId pulumi.StringInput
	ProjectsId  pulumi.StringInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((*Gateway)(nil))
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

type GatewayOutput struct {
	*pulumi.OutputState
}

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Gateway)(nil))
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GatewayOutput{})
}
