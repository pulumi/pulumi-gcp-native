// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new topic.
type AdminTopic struct {
	pulumi.CustomResourceState

	// The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
	Name pulumi.StringOutput `pulumi:"name"`
	// The settings for this topic's partitions.
	PartitionConfig PartitionConfigResponseOutput `pulumi:"partitionConfig"`
	// The settings for this topic's message retention.
	RetentionConfig RetentionConfigResponseOutput `pulumi:"retentionConfig"`
}

// NewAdminTopic registers a new resource with the given unique name, arguments, and options.
func NewAdminTopic(ctx *pulumi.Context,
	name string, args *AdminTopicArgs, opts ...pulumi.ResourceOption) (*AdminTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.TopicsId == nil {
		return nil, errors.New("invalid value for required argument 'TopicsId'")
	}
	var resource AdminTopic
	err := ctx.RegisterResource("gcp-native:pubsublite/v1:AdminTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdminTopic gets an existing AdminTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminTopicState, opts ...pulumi.ResourceOption) (*AdminTopic, error) {
	var resource AdminTopic
	err := ctx.ReadResource("gcp-native:pubsublite/v1:AdminTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdminTopic resources.
type adminTopicState struct {
	// The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
	Name *string `pulumi:"name"`
	// The settings for this topic's partitions.
	PartitionConfig *PartitionConfigResponse `pulumi:"partitionConfig"`
	// The settings for this topic's message retention.
	RetentionConfig *RetentionConfigResponse `pulumi:"retentionConfig"`
}

type AdminTopicState struct {
	// The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
	Name pulumi.StringPtrInput
	// The settings for this topic's partitions.
	PartitionConfig PartitionConfigResponsePtrInput
	// The settings for this topic's message retention.
	RetentionConfig RetentionConfigResponsePtrInput
}

func (AdminTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminTopicState)(nil)).Elem()
}

type adminTopicArgs struct {
	LocationsId string `pulumi:"locationsId"`
	// The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
	Name *string `pulumi:"name"`
	// The settings for this topic's partitions.
	PartitionConfig *PartitionConfig `pulumi:"partitionConfig"`
	ProjectsId      string           `pulumi:"projectsId"`
	// The settings for this topic's message retention.
	RetentionConfig *RetentionConfig `pulumi:"retentionConfig"`
	TopicsId        string           `pulumi:"topicsId"`
}

// The set of arguments for constructing a AdminTopic resource.
type AdminTopicArgs struct {
	LocationsId pulumi.StringInput
	// The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
	Name pulumi.StringPtrInput
	// The settings for this topic's partitions.
	PartitionConfig PartitionConfigPtrInput
	ProjectsId      pulumi.StringInput
	// The settings for this topic's message retention.
	RetentionConfig RetentionConfigPtrInput
	TopicsId        pulumi.StringInput
}

func (AdminTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminTopicArgs)(nil)).Elem()
}

type AdminTopicInput interface {
	pulumi.Input

	ToAdminTopicOutput() AdminTopicOutput
	ToAdminTopicOutputWithContext(ctx context.Context) AdminTopicOutput
}

func (*AdminTopic) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminTopic)(nil))
}

func (i *AdminTopic) ToAdminTopicOutput() AdminTopicOutput {
	return i.ToAdminTopicOutputWithContext(context.Background())
}

func (i *AdminTopic) ToAdminTopicOutputWithContext(ctx context.Context) AdminTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminTopicOutput)
}

type AdminTopicOutput struct {
	*pulumi.OutputState
}

func (AdminTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminTopic)(nil))
}

func (o AdminTopicOutput) ToAdminTopicOutput() AdminTopicOutput {
	return o
}

func (o AdminTopicOutput) ToAdminTopicOutputWithContext(ctx context.Context) AdminTopicOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AdminTopicOutput{})
}
