// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an assignment object which allows the given project to submit jobs of a certain type using slots from the specified reservation. Currently a resource (project, folder, organization) can only have one assignment per each (job_type, location) combination, and that reservation will be used for all jobs of the matching type. Different assignments can be created on different levels of the projects, folders or organization hierarchy. During query execution, the assignment is looked up at the project, folder and organization levels in that order. The first assignment found is applied to the query. When creating assignments, it does not matter if other assignments exist at higher levels. Example: * The organization `organizationA` contains two projects, `project1` and `project2`. * Assignments for all three entities (`organizationA`, `project1`, and `project2`) could all be created and mapped to the same or different reservations. "None" assignments represent an absence of the assignment. Projects assigned to None use on-demand pricing. To create a "None" assignment, use "none" as a reservation_id in the parent. Example parent: `projects/myproject/locations/US/reservations/none`. Returns `google.rpc.Code.PERMISSION_DENIED` if user does not have 'bigquery.admin' permissions on the project using the reservation and the project that owns this reservation. Returns `google.rpc.Code.INVALID_ARGUMENT` when location of the assignment does not match location of the reservation.
type ReservationAssignment struct {
	pulumi.CustomResourceState
}

// NewReservationAssignment registers a new resource with the given unique name, arguments, and options.
func NewReservationAssignment(ctx *pulumi.Context,
	name string, args *ReservationAssignmentArgs, opts ...pulumi.ResourceOption) (*ReservationAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssignmentsId == nil {
		return nil, errors.New("invalid value for required argument 'AssignmentsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.ReservationsId == nil {
		return nil, errors.New("invalid value for required argument 'ReservationsId'")
	}
	var resource ReservationAssignment
	err := ctx.RegisterResource("gcp-native:bigqueryreservation/v1beta1:ReservationAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservationAssignment gets an existing ReservationAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservationAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservationAssignmentState, opts ...pulumi.ResourceOption) (*ReservationAssignment, error) {
	var resource ReservationAssignment
	err := ctx.ReadResource("gcp-native:bigqueryreservation/v1beta1:ReservationAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservationAssignment resources.
type reservationAssignmentState struct {
}

type ReservationAssignmentState struct {
}

func (ReservationAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservationAssignmentState)(nil)).Elem()
}

type reservationAssignmentArgs struct {
	// The resource which will use the reservation. E.g. `projects/myproject`, `folders/123`, or `organizations/456`.
	Assignee      *string `pulumi:"assignee"`
	AssignmentsId string  `pulumi:"assignmentsId"`
	// Which type of jobs will use the reservation.
	JobType        *string `pulumi:"jobType"`
	LocationsId    string  `pulumi:"locationsId"`
	ProjectsId     string  `pulumi:"projectsId"`
	ReservationsId string  `pulumi:"reservationsId"`
}

// The set of arguments for constructing a ReservationAssignment resource.
type ReservationAssignmentArgs struct {
	// The resource which will use the reservation. E.g. `projects/myproject`, `folders/123`, or `organizations/456`.
	Assignee      pulumi.StringPtrInput
	AssignmentsId pulumi.StringInput
	// Which type of jobs will use the reservation.
	JobType        pulumi.StringPtrInput
	LocationsId    pulumi.StringInput
	ProjectsId     pulumi.StringInput
	ReservationsId pulumi.StringInput
}

func (ReservationAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservationAssignmentArgs)(nil)).Elem()
}

type ReservationAssignmentInput interface {
	pulumi.Input

	ToReservationAssignmentOutput() ReservationAssignmentOutput
	ToReservationAssignmentOutputWithContext(ctx context.Context) ReservationAssignmentOutput
}

func (*ReservationAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAssignment)(nil))
}

func (i *ReservationAssignment) ToReservationAssignmentOutput() ReservationAssignmentOutput {
	return i.ToReservationAssignmentOutputWithContext(context.Background())
}

func (i *ReservationAssignment) ToReservationAssignmentOutputWithContext(ctx context.Context) ReservationAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAssignmentOutput)
}

type ReservationAssignmentOutput struct {
	*pulumi.OutputState
}

func (ReservationAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAssignment)(nil))
}

func (o ReservationAssignmentOutput) ToReservationAssignmentOutput() ReservationAssignmentOutput {
	return o
}

func (o ReservationAssignmentOutput) ToReservationAssignmentOutputWithContext(ctx context.Context) ReservationAssignmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ReservationAssignmentOutput{})
}
