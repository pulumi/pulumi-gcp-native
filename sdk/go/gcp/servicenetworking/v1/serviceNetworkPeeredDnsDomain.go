// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a peered DNS domain which sends requests for records in given namespace originating in the service producer VPC network to the consumer VPC network to be resolved.
type ServiceNetworkPeeredDnsDomain struct {
	pulumi.CustomResourceState
}

// NewServiceNetworkPeeredDnsDomain registers a new resource with the given unique name, arguments, and options.
func NewServiceNetworkPeeredDnsDomain(ctx *pulumi.Context,
	name string, args *ServiceNetworkPeeredDnsDomainArgs, opts ...pulumi.ResourceOption) (*ServiceNetworkPeeredDnsDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworksId == nil {
		return nil, errors.New("invalid value for required argument 'NetworksId'")
	}
	if args.PeeredDnsDomainsId == nil {
		return nil, errors.New("invalid value for required argument 'PeeredDnsDomainsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.ServicesId == nil {
		return nil, errors.New("invalid value for required argument 'ServicesId'")
	}
	var resource ServiceNetworkPeeredDnsDomain
	err := ctx.RegisterResource("gcp-native:servicenetworking/v1:ServiceNetworkPeeredDnsDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceNetworkPeeredDnsDomain gets an existing ServiceNetworkPeeredDnsDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceNetworkPeeredDnsDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceNetworkPeeredDnsDomainState, opts ...pulumi.ResourceOption) (*ServiceNetworkPeeredDnsDomain, error) {
	var resource ServiceNetworkPeeredDnsDomain
	err := ctx.ReadResource("gcp-native:servicenetworking/v1:ServiceNetworkPeeredDnsDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceNetworkPeeredDnsDomain resources.
type serviceNetworkPeeredDnsDomainState struct {
}

type ServiceNetworkPeeredDnsDomainState struct {
}

func (ServiceNetworkPeeredDnsDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceNetworkPeeredDnsDomainState)(nil)).Elem()
}

type serviceNetworkPeeredDnsDomainArgs struct {
	// The DNS domain name suffix e.g. `example.com.`.
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// User assigned name for this resource. Must be unique within the consumer network. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
	Name               *string `pulumi:"name"`
	NetworksId         string  `pulumi:"networksId"`
	PeeredDnsDomainsId string  `pulumi:"peeredDnsDomainsId"`
	ProjectsId         string  `pulumi:"projectsId"`
	ServicesId         string  `pulumi:"servicesId"`
}

// The set of arguments for constructing a ServiceNetworkPeeredDnsDomain resource.
type ServiceNetworkPeeredDnsDomainArgs struct {
	// The DNS domain name suffix e.g. `example.com.`.
	DnsSuffix pulumi.StringPtrInput
	// User assigned name for this resource. Must be unique within the consumer network. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
	Name               pulumi.StringPtrInput
	NetworksId         pulumi.StringInput
	PeeredDnsDomainsId pulumi.StringInput
	ProjectsId         pulumi.StringInput
	ServicesId         pulumi.StringInput
}

func (ServiceNetworkPeeredDnsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceNetworkPeeredDnsDomainArgs)(nil)).Elem()
}

type ServiceNetworkPeeredDnsDomainInput interface {
	pulumi.Input

	ToServiceNetworkPeeredDnsDomainOutput() ServiceNetworkPeeredDnsDomainOutput
	ToServiceNetworkPeeredDnsDomainOutputWithContext(ctx context.Context) ServiceNetworkPeeredDnsDomainOutput
}

func (*ServiceNetworkPeeredDnsDomain) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkPeeredDnsDomain)(nil))
}

func (i *ServiceNetworkPeeredDnsDomain) ToServiceNetworkPeeredDnsDomainOutput() ServiceNetworkPeeredDnsDomainOutput {
	return i.ToServiceNetworkPeeredDnsDomainOutputWithContext(context.Background())
}

func (i *ServiceNetworkPeeredDnsDomain) ToServiceNetworkPeeredDnsDomainOutputWithContext(ctx context.Context) ServiceNetworkPeeredDnsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkPeeredDnsDomainOutput)
}

type ServiceNetworkPeeredDnsDomainOutput struct {
	*pulumi.OutputState
}

func (ServiceNetworkPeeredDnsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkPeeredDnsDomain)(nil))
}

func (o ServiceNetworkPeeredDnsDomainOutput) ToServiceNetworkPeeredDnsDomainOutput() ServiceNetworkPeeredDnsDomainOutput {
	return o
}

func (o ServiceNetworkPeeredDnsDomainOutput) ToServiceNetworkPeeredDnsDomainOutputWithContext(ctx context.Context) ServiceNetworkPeeredDnsDomainOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServiceNetworkPeeredDnsDomainOutput{})
}
