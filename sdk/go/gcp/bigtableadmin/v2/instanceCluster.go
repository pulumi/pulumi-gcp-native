// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a cluster within an instance.
type InstanceCluster struct {
	pulumi.CustomResourceState

	// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
	DefaultStorageType pulumi.StringOutput `pulumi:"defaultStorageType"`
	// Immutable. The encryption configuration for CMEK-protected clusters.
	EncryptionConfig EncryptionConfigResponseOutput `pulumi:"encryptionConfig"`
	// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
	Location pulumi.StringOutput `pulumi:"location"`
	// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
	ServeNodes pulumi.IntOutput `pulumi:"serveNodes"`
	// The current state of the cluster.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewInstanceCluster registers a new resource with the given unique name, arguments, and options.
func NewInstanceCluster(ctx *pulumi.Context,
	name string, args *InstanceClusterArgs, opts ...pulumi.ResourceOption) (*InstanceCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClustersId == nil {
		return nil, errors.New("invalid value for required argument 'ClustersId'")
	}
	if args.InstancesId == nil {
		return nil, errors.New("invalid value for required argument 'InstancesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource InstanceCluster
	err := ctx.RegisterResource("gcp-native:bigtableadmin/v2:InstanceCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceCluster gets an existing InstanceCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceClusterState, opts ...pulumi.ResourceOption) (*InstanceCluster, error) {
	var resource InstanceCluster
	err := ctx.ReadResource("gcp-native:bigtableadmin/v2:InstanceCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceCluster resources.
type instanceClusterState struct {
	// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
	DefaultStorageType *string `pulumi:"defaultStorageType"`
	// Immutable. The encryption configuration for CMEK-protected clusters.
	EncryptionConfig *EncryptionConfigResponse `pulumi:"encryptionConfig"`
	// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
	Location *string `pulumi:"location"`
	// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
	Name *string `pulumi:"name"`
	// Required. The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
	ServeNodes *int `pulumi:"serveNodes"`
	// The current state of the cluster.
	State *string `pulumi:"state"`
}

type InstanceClusterState struct {
	// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
	DefaultStorageType pulumi.StringPtrInput
	// Immutable. The encryption configuration for CMEK-protected clusters.
	EncryptionConfig EncryptionConfigResponsePtrInput
	// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
	Location pulumi.StringPtrInput
	// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
	Name pulumi.StringPtrInput
	// Required. The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
	ServeNodes pulumi.IntPtrInput
	// The current state of the cluster.
	State pulumi.StringPtrInput
}

func (InstanceClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceClusterState)(nil)).Elem()
}

type instanceClusterArgs struct {
	ClustersId string `pulumi:"clustersId"`
	// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
	DefaultStorageType *string `pulumi:"defaultStorageType"`
	// Immutable. The encryption configuration for CMEK-protected clusters.
	EncryptionConfig *EncryptionConfig `pulumi:"encryptionConfig"`
	InstancesId      string            `pulumi:"instancesId"`
	// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
	Location *string `pulumi:"location"`
	// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// Required. The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
	ServeNodes *int `pulumi:"serveNodes"`
}

// The set of arguments for constructing a InstanceCluster resource.
type InstanceClusterArgs struct {
	ClustersId pulumi.StringInput
	// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
	DefaultStorageType pulumi.StringPtrInput
	// Immutable. The encryption configuration for CMEK-protected clusters.
	EncryptionConfig EncryptionConfigPtrInput
	InstancesId      pulumi.StringInput
	// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
	Location pulumi.StringPtrInput
	// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// Required. The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
	ServeNodes pulumi.IntPtrInput
}

func (InstanceClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceClusterArgs)(nil)).Elem()
}

type InstanceClusterInput interface {
	pulumi.Input

	ToInstanceClusterOutput() InstanceClusterOutput
	ToInstanceClusterOutputWithContext(ctx context.Context) InstanceClusterOutput
}

func (*InstanceCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCluster)(nil))
}

func (i *InstanceCluster) ToInstanceClusterOutput() InstanceClusterOutput {
	return i.ToInstanceClusterOutputWithContext(context.Background())
}

func (i *InstanceCluster) ToInstanceClusterOutputWithContext(ctx context.Context) InstanceClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceClusterOutput)
}

type InstanceClusterOutput struct {
	*pulumi.OutputState
}

func (InstanceClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCluster)(nil))
}

func (o InstanceClusterOutput) ToInstanceClusterOutput() InstanceClusterOutput {
	return o
}

func (o InstanceClusterOutput) ToInstanceClusterOutputWithContext(ctx context.Context) InstanceClusterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceClusterOutput{})
}
