// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-gcp-native/sdk/go/gcp"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "gcp-native:bigtableadmin/v2:Instance":
		r, err = NewInstance(ctx, name, nil, pulumi.URN_(urn))
	case "gcp-native:bigtableadmin/v2:InstanceAppProfile":
		r, err = NewInstanceAppProfile(ctx, name, nil, pulumi.URN_(urn))
	case "gcp-native:bigtableadmin/v2:InstanceCluster":
		r, err = NewInstanceCluster(ctx, name, nil, pulumi.URN_(urn))
	case "gcp-native:bigtableadmin/v2:InstanceClusterBackup":
		r, err = NewInstanceClusterBackup(ctx, name, nil, pulumi.URN_(urn))
	case "gcp-native:bigtableadmin/v2:InstanceClusterBackupIamPolicy":
		r, err = NewInstanceClusterBackupIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp-native:bigtableadmin/v2:InstanceIamPolicy":
		r, err = NewInstanceIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "gcp-native:bigtableadmin/v2:InstanceTable":
		r, err = NewInstanceTable(ctx, name, nil, pulumi.URN_(urn))
	case "gcp-native:bigtableadmin/v2:InstanceTableIamPolicy":
		r, err = NewInstanceTableIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := gcp.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"gcp-native",
		"bigtableadmin/v2",
		&module{version},
	)
}
