// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new participant in a conversation.
type ConversationParticipant struct {
	pulumi.CustomResourceState

	// Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for following purposes: 1) Billing and measurement. If user with the same obfuscated_external_user_id is created in a later conversation, dialogflow will know it's the same user. 2) Agent assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.
	ObfuscatedExternalUserId pulumi.StringOutput `pulumi:"obfuscatedExternalUserId"`
	// Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewConversationParticipant registers a new resource with the given unique name, arguments, and options.
func NewConversationParticipant(ctx *pulumi.Context,
	name string, args *ConversationParticipantArgs, opts ...pulumi.ResourceOption) (*ConversationParticipant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConversationsId == nil {
		return nil, errors.New("invalid value for required argument 'ConversationsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ParticipantsId == nil {
		return nil, errors.New("invalid value for required argument 'ParticipantsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource ConversationParticipant
	err := ctx.RegisterResource("gcp-native:dialogflow/v2beta1:ConversationParticipant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConversationParticipant gets an existing ConversationParticipant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConversationParticipant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConversationParticipantState, opts ...pulumi.ResourceOption) (*ConversationParticipant, error) {
	var resource ConversationParticipant
	err := ctx.ReadResource("gcp-native:dialogflow/v2beta1:ConversationParticipant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConversationParticipant resources.
type conversationParticipantState struct {
	// Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.
	Name *string `pulumi:"name"`
	// Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for following purposes: 1) Billing and measurement. If user with the same obfuscated_external_user_id is created in a later conversation, dialogflow will know it's the same user. 2) Agent assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.
	ObfuscatedExternalUserId *string `pulumi:"obfuscatedExternalUserId"`
	// Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
	Role *string `pulumi:"role"`
}

type ConversationParticipantState struct {
	// Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.
	Name pulumi.StringPtrInput
	// Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for following purposes: 1) Billing and measurement. If user with the same obfuscated_external_user_id is created in a later conversation, dialogflow will know it's the same user. 2) Agent assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.
	ObfuscatedExternalUserId pulumi.StringPtrInput
	// Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
	Role pulumi.StringPtrInput
}

func (ConversationParticipantState) ElementType() reflect.Type {
	return reflect.TypeOf((*conversationParticipantState)(nil)).Elem()
}

type conversationParticipantArgs struct {
	ConversationsId string `pulumi:"conversationsId"`
	LocationsId     string `pulumi:"locationsId"`
	// Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.
	Name *string `pulumi:"name"`
	// Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for following purposes: 1) Billing and measurement. If user with the same obfuscated_external_user_id is created in a later conversation, dialogflow will know it's the same user. 2) Agent assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.
	ObfuscatedExternalUserId *string `pulumi:"obfuscatedExternalUserId"`
	ParticipantsId           string  `pulumi:"participantsId"`
	ProjectsId               string  `pulumi:"projectsId"`
	// Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
	Role *string `pulumi:"role"`
}

// The set of arguments for constructing a ConversationParticipant resource.
type ConversationParticipantArgs struct {
	ConversationsId pulumi.StringInput
	LocationsId     pulumi.StringInput
	// Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.
	Name pulumi.StringPtrInput
	// Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for following purposes: 1) Billing and measurement. If user with the same obfuscated_external_user_id is created in a later conversation, dialogflow will know it's the same user. 2) Agent assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.
	ObfuscatedExternalUserId pulumi.StringPtrInput
	ParticipantsId           pulumi.StringInput
	ProjectsId               pulumi.StringInput
	// Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
	Role pulumi.StringPtrInput
}

func (ConversationParticipantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*conversationParticipantArgs)(nil)).Elem()
}

type ConversationParticipantInput interface {
	pulumi.Input

	ToConversationParticipantOutput() ConversationParticipantOutput
	ToConversationParticipantOutputWithContext(ctx context.Context) ConversationParticipantOutput
}

func (*ConversationParticipant) ElementType() reflect.Type {
	return reflect.TypeOf((*ConversationParticipant)(nil))
}

func (i *ConversationParticipant) ToConversationParticipantOutput() ConversationParticipantOutput {
	return i.ToConversationParticipantOutputWithContext(context.Background())
}

func (i *ConversationParticipant) ToConversationParticipantOutputWithContext(ctx context.Context) ConversationParticipantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConversationParticipantOutput)
}

type ConversationParticipantOutput struct {
	*pulumi.OutputState
}

func (ConversationParticipantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConversationParticipant)(nil))
}

func (o ConversationParticipantOutput) ToConversationParticipantOutput() ConversationParticipantOutput {
	return o
}

func (o ConversationParticipantOutput) ToConversationParticipantOutputWithContext(ctx context.Context) ConversationParticipantOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConversationParticipantOutput{})
}
