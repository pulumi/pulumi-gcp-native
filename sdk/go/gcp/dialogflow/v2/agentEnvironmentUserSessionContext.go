// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a context. If the specified context already exists, overrides the context.
type AgentEnvironmentUserSessionContext struct {
	pulumi.CustomResourceState

	// Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.
	LifespanCount pulumi.IntOutput `pulumi:"lifespanCount"`
	// Required. The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
}

// NewAgentEnvironmentUserSessionContext registers a new resource with the given unique name, arguments, and options.
func NewAgentEnvironmentUserSessionContext(ctx *pulumi.Context,
	name string, args *AgentEnvironmentUserSessionContextArgs, opts ...pulumi.ResourceOption) (*AgentEnvironmentUserSessionContext, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContextsId == nil {
		return nil, errors.New("invalid value for required argument 'ContextsId'")
	}
	if args.EnvironmentsId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.SessionsId == nil {
		return nil, errors.New("invalid value for required argument 'SessionsId'")
	}
	if args.UsersId == nil {
		return nil, errors.New("invalid value for required argument 'UsersId'")
	}
	var resource AgentEnvironmentUserSessionContext
	err := ctx.RegisterResource("gcp-native:dialogflow/v2:AgentEnvironmentUserSessionContext", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgentEnvironmentUserSessionContext gets an existing AgentEnvironmentUserSessionContext resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentEnvironmentUserSessionContext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentEnvironmentUserSessionContextState, opts ...pulumi.ResourceOption) (*AgentEnvironmentUserSessionContext, error) {
	var resource AgentEnvironmentUserSessionContext
	err := ctx.ReadResource("gcp-native:dialogflow/v2:AgentEnvironmentUserSessionContext", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AgentEnvironmentUserSessionContext resources.
type agentEnvironmentUserSessionContextState struct {
	// Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.
	LifespanCount *int `pulumi:"lifespanCount"`
	// Required. The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`
	Name *string `pulumi:"name"`
	// Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value
	Parameters map[string]string `pulumi:"parameters"`
}

type AgentEnvironmentUserSessionContextState struct {
	// Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.
	LifespanCount pulumi.IntPtrInput
	// Required. The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`
	Name pulumi.StringPtrInput
	// Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value
	Parameters pulumi.StringMapInput
}

func (AgentEnvironmentUserSessionContextState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentEnvironmentUserSessionContextState)(nil)).Elem()
}

type agentEnvironmentUserSessionContextArgs struct {
	ContextsId     string `pulumi:"contextsId"`
	EnvironmentsId string `pulumi:"environmentsId"`
	// Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.
	LifespanCount *int   `pulumi:"lifespanCount"`
	LocationsId   string `pulumi:"locationsId"`
	// Required. The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`
	Name *string `pulumi:"name"`
	// Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value
	Parameters map[string]string `pulumi:"parameters"`
	ProjectsId string            `pulumi:"projectsId"`
	SessionsId string            `pulumi:"sessionsId"`
	UsersId    string            `pulumi:"usersId"`
}

// The set of arguments for constructing a AgentEnvironmentUserSessionContext resource.
type AgentEnvironmentUserSessionContextArgs struct {
	ContextsId     pulumi.StringInput
	EnvironmentsId pulumi.StringInput
	// Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.
	LifespanCount pulumi.IntPtrInput
	LocationsId   pulumi.StringInput
	// Required. The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`
	Name pulumi.StringPtrInput
	// Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value
	Parameters pulumi.StringMapInput
	ProjectsId pulumi.StringInput
	SessionsId pulumi.StringInput
	UsersId    pulumi.StringInput
}

func (AgentEnvironmentUserSessionContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentEnvironmentUserSessionContextArgs)(nil)).Elem()
}

type AgentEnvironmentUserSessionContextInput interface {
	pulumi.Input

	ToAgentEnvironmentUserSessionContextOutput() AgentEnvironmentUserSessionContextOutput
	ToAgentEnvironmentUserSessionContextOutputWithContext(ctx context.Context) AgentEnvironmentUserSessionContextOutput
}

func (*AgentEnvironmentUserSessionContext) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentEnvironmentUserSessionContext)(nil))
}

func (i *AgentEnvironmentUserSessionContext) ToAgentEnvironmentUserSessionContextOutput() AgentEnvironmentUserSessionContextOutput {
	return i.ToAgentEnvironmentUserSessionContextOutputWithContext(context.Background())
}

func (i *AgentEnvironmentUserSessionContext) ToAgentEnvironmentUserSessionContextOutputWithContext(ctx context.Context) AgentEnvironmentUserSessionContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentEnvironmentUserSessionContextOutput)
}

type AgentEnvironmentUserSessionContextOutput struct {
	*pulumi.OutputState
}

func (AgentEnvironmentUserSessionContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentEnvironmentUserSessionContext)(nil))
}

func (o AgentEnvironmentUserSessionContextOutput) ToAgentEnvironmentUserSessionContextOutput() AgentEnvironmentUserSessionContextOutput {
	return o
}

func (o AgentEnvironmentUserSessionContextOutput) ToAgentEnvironmentUserSessionContextOutputWithContext(ctx context.Context) AgentEnvironmentUserSessionContextOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AgentEnvironmentUserSessionContextOutput{})
}
