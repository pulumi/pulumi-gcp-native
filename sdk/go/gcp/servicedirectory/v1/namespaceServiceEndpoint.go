// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an endpoint, and returns the new endpoint.
type NamespaceServiceEndpoint struct {
	pulumi.CustomResourceState

	// Optional. An IPv4 or IPv6 address. Service Directory rejects bad addresses like: * `8.8.8` * `8.8.8.8:53` * `test:bad:address` * `[::1]` * `[::1]:8080` Limited to 45 characters.
	Address pulumi.StringOutput `pulumi:"address"`
	// Optional. Annotations for the endpoint. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 512 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/) Annotations that fails to meet these requirements are rejected. * The `(*.)google.com/` and `(*.)googleapis.com/` prefixes are reserved for system annotations managed by Service Directory. If the user tries to write to these keyspaces, those entries are silently ignored by the system Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Immutable. The resource name for the endpoint in the format `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. Service Directory rejects values outside of `[0, 65535]`.
	Port pulumi.IntOutput `pulumi:"port"`
}

// NewNamespaceServiceEndpoint registers a new resource with the given unique name, arguments, and options.
func NewNamespaceServiceEndpoint(ctx *pulumi.Context,
	name string, args *NamespaceServiceEndpointArgs, opts ...pulumi.ResourceOption) (*NamespaceServiceEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointsId == nil {
		return nil, errors.New("invalid value for required argument 'EndpointsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.NamespacesId == nil {
		return nil, errors.New("invalid value for required argument 'NamespacesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.ServicesId == nil {
		return nil, errors.New("invalid value for required argument 'ServicesId'")
	}
	var resource NamespaceServiceEndpoint
	err := ctx.RegisterResource("gcp-native:servicedirectory/v1:NamespaceServiceEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceServiceEndpoint gets an existing NamespaceServiceEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceServiceEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceServiceEndpointState, opts ...pulumi.ResourceOption) (*NamespaceServiceEndpoint, error) {
	var resource NamespaceServiceEndpoint
	err := ctx.ReadResource("gcp-native:servicedirectory/v1:NamespaceServiceEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceServiceEndpoint resources.
type namespaceServiceEndpointState struct {
	// Optional. An IPv4 or IPv6 address. Service Directory rejects bad addresses like: * `8.8.8` * `8.8.8.8:53` * `test:bad:address` * `[::1]` * `[::1]:8080` Limited to 45 characters.
	Address *string `pulumi:"address"`
	// Optional. Annotations for the endpoint. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 512 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/) Annotations that fails to meet these requirements are rejected. * The `(*.)google.com/` and `(*.)googleapis.com/` prefixes are reserved for system annotations managed by Service Directory. If the user tries to write to these keyspaces, those entries are silently ignored by the system Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.
	Annotations map[string]string `pulumi:"annotations"`
	// Immutable. The resource name for the endpoint in the format `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.
	Name *string `pulumi:"name"`
	// Optional. Service Directory rejects values outside of `[0, 65535]`.
	Port *int `pulumi:"port"`
}

type NamespaceServiceEndpointState struct {
	// Optional. An IPv4 or IPv6 address. Service Directory rejects bad addresses like: * `8.8.8` * `8.8.8.8:53` * `test:bad:address` * `[::1]` * `[::1]:8080` Limited to 45 characters.
	Address pulumi.StringPtrInput
	// Optional. Annotations for the endpoint. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 512 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/) Annotations that fails to meet these requirements are rejected. * The `(*.)google.com/` and `(*.)googleapis.com/` prefixes are reserved for system annotations managed by Service Directory. If the user tries to write to these keyspaces, those entries are silently ignored by the system Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.
	Annotations pulumi.StringMapInput
	// Immutable. The resource name for the endpoint in the format `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.
	Name pulumi.StringPtrInput
	// Optional. Service Directory rejects values outside of `[0, 65535]`.
	Port pulumi.IntPtrInput
}

func (NamespaceServiceEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceServiceEndpointState)(nil)).Elem()
}

type namespaceServiceEndpointArgs struct {
	// Optional. An IPv4 or IPv6 address. Service Directory rejects bad addresses like: * `8.8.8` * `8.8.8.8:53` * `test:bad:address` * `[::1]` * `[::1]:8080` Limited to 45 characters.
	Address *string `pulumi:"address"`
	// Optional. Annotations for the endpoint. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 512 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/) Annotations that fails to meet these requirements are rejected. * The `(*.)google.com/` and `(*.)googleapis.com/` prefixes are reserved for system annotations managed by Service Directory. If the user tries to write to these keyspaces, those entries are silently ignored by the system Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.
	Annotations map[string]string `pulumi:"annotations"`
	EndpointsId string            `pulumi:"endpointsId"`
	LocationsId string            `pulumi:"locationsId"`
	// Immutable. The resource name for the endpoint in the format `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.
	Name         *string `pulumi:"name"`
	NamespacesId string  `pulumi:"namespacesId"`
	// Optional. Service Directory rejects values outside of `[0, 65535]`.
	Port       *int   `pulumi:"port"`
	ProjectsId string `pulumi:"projectsId"`
	ServicesId string `pulumi:"servicesId"`
}

// The set of arguments for constructing a NamespaceServiceEndpoint resource.
type NamespaceServiceEndpointArgs struct {
	// Optional. An IPv4 or IPv6 address. Service Directory rejects bad addresses like: * `8.8.8` * `8.8.8.8:53` * `test:bad:address` * `[::1]` * `[::1]:8080` Limited to 45 characters.
	Address pulumi.StringPtrInput
	// Optional. Annotations for the endpoint. This data can be consumed by service clients. Restrictions: * The entire annotations dictionary may contain up to 512 characters, spread accoss all key-value pairs. Annotations that go beyond this limit are rejected * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (/). The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between. The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots (.), not longer than 253 characters in total, followed by a slash (/) Annotations that fails to meet these requirements are rejected. * The `(*.)google.com/` and `(*.)googleapis.com/` prefixes are reserved for system annotations managed by Service Directory. If the user tries to write to these keyspaces, those entries are silently ignored by the system Note: This field is equivalent to the `metadata` field in the v1beta1 API. They have the same syntax and read/write to the same location in Service Directory.
	Annotations pulumi.StringMapInput
	EndpointsId pulumi.StringInput
	LocationsId pulumi.StringInput
	// Immutable. The resource name for the endpoint in the format `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.
	Name         pulumi.StringPtrInput
	NamespacesId pulumi.StringInput
	// Optional. Service Directory rejects values outside of `[0, 65535]`.
	Port       pulumi.IntPtrInput
	ProjectsId pulumi.StringInput
	ServicesId pulumi.StringInput
}

func (NamespaceServiceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceServiceEndpointArgs)(nil)).Elem()
}

type NamespaceServiceEndpointInput interface {
	pulumi.Input

	ToNamespaceServiceEndpointOutput() NamespaceServiceEndpointOutput
	ToNamespaceServiceEndpointOutputWithContext(ctx context.Context) NamespaceServiceEndpointOutput
}

func (*NamespaceServiceEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceServiceEndpoint)(nil))
}

func (i *NamespaceServiceEndpoint) ToNamespaceServiceEndpointOutput() NamespaceServiceEndpointOutput {
	return i.ToNamespaceServiceEndpointOutputWithContext(context.Background())
}

func (i *NamespaceServiceEndpoint) ToNamespaceServiceEndpointOutputWithContext(ctx context.Context) NamespaceServiceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceServiceEndpointOutput)
}

type NamespaceServiceEndpointOutput struct {
	*pulumi.OutputState
}

func (NamespaceServiceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceServiceEndpoint)(nil))
}

func (o NamespaceServiceEndpointOutput) ToNamespaceServiceEndpointOutput() NamespaceServiceEndpointOutput {
	return o
}

func (o NamespaceServiceEndpointOutput) ToNamespaceServiceEndpointOutputWithContext(ctx context.Context) NamespaceServiceEndpointOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(NamespaceServiceEndpointOutput{})
}
