// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new `Operation`.
type Operation struct {
	pulumi.CustomResourceState
}

// NewOperation registers a new resource with the given unique name, arguments, and options.
func NewOperation(ctx *pulumi.Context,
	name string, args *OperationArgs, opts ...pulumi.ResourceOption) (*Operation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource Operation
	err := ctx.RegisterResource("gcp-native:containeranalysis/v1alpha1:Operation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOperation gets an existing Operation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OperationState, opts ...pulumi.ResourceOption) (*Operation, error) {
	var resource Operation
	err := ctx.ReadResource("gcp-native:containeranalysis/v1alpha1:Operation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Operation resources.
type operationState struct {
}

type OperationState struct {
}

func (OperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*operationState)(nil)).Elem()
}

type operationArgs struct {
	// The operation to create.
	Operation *OperationType `pulumi:"operation"`
	// The ID to use for this operation.
	OperationId *string `pulumi:"operationId"`
	ProjectsId  string  `pulumi:"projectsId"`
}

// The set of arguments for constructing a Operation resource.
type OperationArgs struct {
	// The operation to create.
	Operation OperationTypePtrInput
	// The ID to use for this operation.
	OperationId pulumi.StringPtrInput
	ProjectsId  pulumi.StringInput
}

func (OperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*operationArgs)(nil)).Elem()
}

type OperationInput interface {
	pulumi.Input

	ToOperationOutput() OperationOutput
	ToOperationOutputWithContext(ctx context.Context) OperationOutput
}

func (*Operation) ElementType() reflect.Type {
	return reflect.TypeOf((*Operation)(nil))
}

func (i *Operation) ToOperationOutput() OperationOutput {
	return i.ToOperationOutputWithContext(context.Background())
}

func (i *Operation) ToOperationOutputWithContext(ctx context.Context) OperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationOutput)
}

type OperationOutput struct {
	*pulumi.OutputState
}

func (OperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Operation)(nil))
}

func (o OperationOutput) ToOperationOutput() OperationOutput {
	return o
}

func (o OperationOutput) ToOperationOutputWithContext(ctx context.Context) OperationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OperationOutput{})
}
