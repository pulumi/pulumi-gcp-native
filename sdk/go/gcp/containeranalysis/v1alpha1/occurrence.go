// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.
type Occurrence struct {
	pulumi.CustomResourceState

	// Describes an attestation of an artifact.
	Attestation AttestationResponseOutput `pulumi:"attestation"`
	// Build details for a verifiable build.
	BuildDetails BuildDetailsResponseOutput `pulumi:"buildDetails"`
	// The time this `Occurrence` was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Describes the deployment of an artifact on a runtime.
	Deployment DeploymentResponseOutput `pulumi:"deployment"`
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage DerivedResponseOutput `pulumi:"derivedImage"`
	// Describes the initial scan status for this resource.
	Discovered DiscoveredResponseOutput `pulumi:"discovered"`
	// Describes the installation of a package on the linked resource.
	Installation InstallationResponseOutput `pulumi:"installation"`
	// This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the `Occurrence` in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name pulumi.StringOutput `pulumi:"name"`
	// An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
	NoteName pulumi.StringOutput `pulumi:"noteName"`
	// A description of actions that can be taken to remedy the `Note`
	Remediation pulumi.StringOutput `pulumi:"remediation"`
	//  The resource for which the `Occurrence` applies.
	Resource ResourceResponseOutput `pulumi:"resource"`
	// The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
	ResourceUrl pulumi.StringOutput `pulumi:"resourceUrl"`
	// The time this `Occurrence` was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Describes an upgrade.
	Upgrade UpgradeOccurrenceResponseOutput `pulumi:"upgrade"`
	// Details of a security vulnerability note.
	VulnerabilityDetails VulnerabilityDetailsResponseOutput `pulumi:"vulnerabilityDetails"`
}

// NewOccurrence registers a new resource with the given unique name, arguments, and options.
func NewOccurrence(ctx *pulumi.Context,
	name string, args *OccurrenceArgs, opts ...pulumi.ResourceOption) (*Occurrence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OccurrencesId == nil {
		return nil, errors.New("invalid value for required argument 'OccurrencesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource Occurrence
	err := ctx.RegisterResource("gcp-native:containeranalysis/v1alpha1:Occurrence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOccurrence gets an existing Occurrence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOccurrence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OccurrenceState, opts ...pulumi.ResourceOption) (*Occurrence, error) {
	var resource Occurrence
	err := ctx.ReadResource("gcp-native:containeranalysis/v1alpha1:Occurrence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Occurrence resources.
type occurrenceState struct {
	// Describes an attestation of an artifact.
	Attestation *AttestationResponse `pulumi:"attestation"`
	// Build details for a verifiable build.
	BuildDetails *BuildDetailsResponse `pulumi:"buildDetails"`
	// The time this `Occurrence` was created.
	CreateTime *string `pulumi:"createTime"`
	// Describes the deployment of an artifact on a runtime.
	Deployment *DeploymentResponse `pulumi:"deployment"`
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage *DerivedResponse `pulumi:"derivedImage"`
	// Describes the initial scan status for this resource.
	Discovered *DiscoveredResponse `pulumi:"discovered"`
	// Describes the installation of a package on the linked resource.
	Installation *InstallationResponse `pulumi:"installation"`
	// This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.
	Kind *string `pulumi:"kind"`
	// The name of the `Occurrence` in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name *string `pulumi:"name"`
	// An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
	NoteName *string `pulumi:"noteName"`
	// A description of actions that can be taken to remedy the `Note`
	Remediation *string `pulumi:"remediation"`
	//  The resource for which the `Occurrence` applies.
	Resource *ResourceResponse `pulumi:"resource"`
	// The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// The time this `Occurrence` was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Describes an upgrade.
	Upgrade *UpgradeOccurrenceResponse `pulumi:"upgrade"`
	// Details of a security vulnerability note.
	VulnerabilityDetails *VulnerabilityDetailsResponse `pulumi:"vulnerabilityDetails"`
}

type OccurrenceState struct {
	// Describes an attestation of an artifact.
	Attestation AttestationResponsePtrInput
	// Build details for a verifiable build.
	BuildDetails BuildDetailsResponsePtrInput
	// The time this `Occurrence` was created.
	CreateTime pulumi.StringPtrInput
	// Describes the deployment of an artifact on a runtime.
	Deployment DeploymentResponsePtrInput
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage DerivedResponsePtrInput
	// Describes the initial scan status for this resource.
	Discovered DiscoveredResponsePtrInput
	// Describes the installation of a package on the linked resource.
	Installation InstallationResponsePtrInput
	// This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.
	Kind pulumi.StringPtrInput
	// The name of the `Occurrence` in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name pulumi.StringPtrInput
	// An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
	NoteName pulumi.StringPtrInput
	// A description of actions that can be taken to remedy the `Note`
	Remediation pulumi.StringPtrInput
	//  The resource for which the `Occurrence` applies.
	Resource ResourceResponsePtrInput
	// The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
	ResourceUrl pulumi.StringPtrInput
	// The time this `Occurrence` was last updated.
	UpdateTime pulumi.StringPtrInput
	// Describes an upgrade.
	Upgrade UpgradeOccurrenceResponsePtrInput
	// Details of a security vulnerability note.
	VulnerabilityDetails VulnerabilityDetailsResponsePtrInput
}

func (OccurrenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*occurrenceState)(nil)).Elem()
}

type occurrenceArgs struct {
	// Describes an attestation of an artifact.
	Attestation *Attestation `pulumi:"attestation"`
	// Build details for a verifiable build.
	BuildDetails *BuildDetails `pulumi:"buildDetails"`
	// The time this `Occurrence` was created.
	CreateTime *string `pulumi:"createTime"`
	// Describes the deployment of an artifact on a runtime.
	Deployment *Deployment `pulumi:"deployment"`
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage *Derived `pulumi:"derivedImage"`
	// Describes the initial scan status for this resource.
	Discovered *Discovered `pulumi:"discovered"`
	// Describes the installation of a package on the linked resource.
	Installation *Installation `pulumi:"installation"`
	// This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.
	Kind *string `pulumi:"kind"`
	// The name of the `Occurrence` in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name *string `pulumi:"name"`
	// An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
	NoteName      *string `pulumi:"noteName"`
	OccurrencesId string  `pulumi:"occurrencesId"`
	ProjectsId    string  `pulumi:"projectsId"`
	// A description of actions that can be taken to remedy the `Note`
	Remediation *string `pulumi:"remediation"`
	//  The resource for which the `Occurrence` applies.
	Resource *Resource `pulumi:"resource"`
	// The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// The time this `Occurrence` was last updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Describes an upgrade.
	Upgrade *UpgradeOccurrence `pulumi:"upgrade"`
	// Details of a security vulnerability note.
	VulnerabilityDetails *VulnerabilityDetails `pulumi:"vulnerabilityDetails"`
}

// The set of arguments for constructing a Occurrence resource.
type OccurrenceArgs struct {
	// Describes an attestation of an artifact.
	Attestation AttestationPtrInput
	// Build details for a verifiable build.
	BuildDetails BuildDetailsPtrInput
	// The time this `Occurrence` was created.
	CreateTime pulumi.StringPtrInput
	// Describes the deployment of an artifact on a runtime.
	Deployment DeploymentPtrInput
	// Describes how this resource derives from the basis in the associated note.
	DerivedImage DerivedPtrInput
	// Describes the initial scan status for this resource.
	Discovered DiscoveredPtrInput
	// Describes the installation of a package on the linked resource.
	Installation InstallationPtrInput
	// This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.
	Kind pulumi.StringPtrInput
	// The name of the `Occurrence` in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name pulumi.StringPtrInput
	// An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
	NoteName      pulumi.StringPtrInput
	OccurrencesId pulumi.StringInput
	ProjectsId    pulumi.StringInput
	// A description of actions that can be taken to remedy the `Note`
	Remediation pulumi.StringPtrInput
	//  The resource for which the `Occurrence` applies.
	Resource ResourcePtrInput
	// The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
	ResourceUrl pulumi.StringPtrInput
	// The time this `Occurrence` was last updated.
	UpdateTime pulumi.StringPtrInput
	// Describes an upgrade.
	Upgrade UpgradeOccurrencePtrInput
	// Details of a security vulnerability note.
	VulnerabilityDetails VulnerabilityDetailsPtrInput
}

func (OccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*occurrenceArgs)(nil)).Elem()
}

type OccurrenceInput interface {
	pulumi.Input

	ToOccurrenceOutput() OccurrenceOutput
	ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput
}

func (*Occurrence) ElementType() reflect.Type {
	return reflect.TypeOf((*Occurrence)(nil))
}

func (i *Occurrence) ToOccurrenceOutput() OccurrenceOutput {
	return i.ToOccurrenceOutputWithContext(context.Background())
}

func (i *Occurrence) ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OccurrenceOutput)
}

type OccurrenceOutput struct {
	*pulumi.OutputState
}

func (OccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Occurrence)(nil))
}

func (o OccurrenceOutput) ToOccurrenceOutput() OccurrenceOutput {
	return o
}

func (o OccurrenceOutput) ToOccurrenceOutputWithContext(ctx context.Context) OccurrenceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OccurrenceOutput{})
}
