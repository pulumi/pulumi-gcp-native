// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Rpc to create a service.
type NamespaceService struct {
	pulumi.CustomResourceState

	// The API version for this call such as "serving.knative.dev/v1alpha1".
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// The kind of resource, in this case "Service".
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata ObjectMetaResponseOutput `pulumi:"metadata"`
	// Spec holds the desired state of the Service (from the client).
	Spec ServiceSpecResponseOutput `pulumi:"spec"`
	// Status communicates the observed state of the Service (from the controller).
	Status ServiceStatusResponseOutput `pulumi:"status"`
}

// NewNamespaceService registers a new resource with the given unique name, arguments, and options.
func NewNamespaceService(ctx *pulumi.Context,
	name string, args *NamespaceServiceArgs, opts ...pulumi.ResourceOption) (*NamespaceService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespacesId == nil {
		return nil, errors.New("invalid value for required argument 'NamespacesId'")
	}
	if args.ServicesId == nil {
		return nil, errors.New("invalid value for required argument 'ServicesId'")
	}
	var resource NamespaceService
	err := ctx.RegisterResource("gcp-native:run/v1alpha1:NamespaceService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceService gets an existing NamespaceService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceServiceState, opts ...pulumi.ResourceOption) (*NamespaceService, error) {
	var resource NamespaceService
	err := ctx.ReadResource("gcp-native:run/v1alpha1:NamespaceService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceService resources.
type namespaceServiceState struct {
	// The API version for this call such as "serving.knative.dev/v1alpha1".
	ApiVersion *string `pulumi:"apiVersion"`
	// The kind of resource, in this case "Service".
	Kind *string `pulumi:"kind"`
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata *ObjectMetaResponse `pulumi:"metadata"`
	// Spec holds the desired state of the Service (from the client).
	Spec *ServiceSpecResponse `pulumi:"spec"`
	// Status communicates the observed state of the Service (from the controller).
	Status *ServiceStatusResponse `pulumi:"status"`
}

type NamespaceServiceState struct {
	// The API version for this call such as "serving.knative.dev/v1alpha1".
	ApiVersion pulumi.StringPtrInput
	// The kind of resource, in this case "Service".
	Kind pulumi.StringPtrInput
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata ObjectMetaResponsePtrInput
	// Spec holds the desired state of the Service (from the client).
	Spec ServiceSpecResponsePtrInput
	// Status communicates the observed state of the Service (from the controller).
	Status ServiceStatusResponsePtrInput
}

func (NamespaceServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceServiceState)(nil)).Elem()
}

type namespaceServiceArgs struct {
	// The API version for this call such as "serving.knative.dev/v1alpha1".
	ApiVersion *string `pulumi:"apiVersion"`
	// The kind of resource, in this case "Service".
	Kind *string `pulumi:"kind"`
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata     *ObjectMeta `pulumi:"metadata"`
	NamespacesId string      `pulumi:"namespacesId"`
	ServicesId   string      `pulumi:"servicesId"`
	// Spec holds the desired state of the Service (from the client).
	Spec *ServiceSpec `pulumi:"spec"`
	// Status communicates the observed state of the Service (from the controller).
	Status *ServiceStatus `pulumi:"status"`
}

// The set of arguments for constructing a NamespaceService resource.
type NamespaceServiceArgs struct {
	// The API version for this call such as "serving.knative.dev/v1alpha1".
	ApiVersion pulumi.StringPtrInput
	// The kind of resource, in this case "Service".
	Kind pulumi.StringPtrInput
	// Metadata associated with this Service, including name, namespace, labels, and annotations.
	Metadata     ObjectMetaPtrInput
	NamespacesId pulumi.StringInput
	ServicesId   pulumi.StringInput
	// Spec holds the desired state of the Service (from the client).
	Spec ServiceSpecPtrInput
	// Status communicates the observed state of the Service (from the controller).
	Status ServiceStatusPtrInput
}

func (NamespaceServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceServiceArgs)(nil)).Elem()
}

type NamespaceServiceInput interface {
	pulumi.Input

	ToNamespaceServiceOutput() NamespaceServiceOutput
	ToNamespaceServiceOutputWithContext(ctx context.Context) NamespaceServiceOutput
}

func (*NamespaceService) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceService)(nil))
}

func (i *NamespaceService) ToNamespaceServiceOutput() NamespaceServiceOutput {
	return i.ToNamespaceServiceOutputWithContext(context.Background())
}

func (i *NamespaceService) ToNamespaceServiceOutputWithContext(ctx context.Context) NamespaceServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceServiceOutput)
}

type NamespaceServiceOutput struct {
	*pulumi.OutputState
}

func (NamespaceServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceService)(nil))
}

func (o NamespaceServiceOutput) ToNamespaceServiceOutput() NamespaceServiceOutput {
	return o
}

func (o NamespaceServiceOutput) ToNamespaceServiceOutputWithContext(ctx context.Context) NamespaceServiceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(NamespaceServiceOutput{})
}
