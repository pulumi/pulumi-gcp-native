// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a new ImportJob within a KeyRing. ImportJob.import_method is required.
type KeyRingImportJob struct {
	pulumi.CustomResourceState

	// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen ImportMethod is one with a protection level of HSM.
	Attestation KeyOperationAttestationResponseOutput `pulumi:"attestation"`
	// The time at which this ImportJob was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The time this ImportJob expired. Only present if state is EXPIRED.
	ExpireEventTime pulumi.StringOutput `pulumi:"expireEventTime"`
	// The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// The time this ImportJob's key material was generated.
	GenerateTime pulumi.StringOutput `pulumi:"generateTime"`
	// Required. Immutable. The wrapping method to be used for incoming key material.
	ImportMethod pulumi.StringOutput `pulumi:"importMethod"`
	// The resource name for this ImportJob in the format `projects/*/locations/*/keyRings/*/importJobs/*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
	ProtectionLevel pulumi.StringOutput `pulumi:"protectionLevel"`
	// The public key with which to wrap key material prior to import. Only returned if state is ACTIVE.
	PublicKey WrappingPublicKeyResponseOutput `pulumi:"publicKey"`
	// The current state of the ImportJob, indicating if it can be used.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewKeyRingImportJob registers a new resource with the given unique name, arguments, and options.
func NewKeyRingImportJob(ctx *pulumi.Context,
	name string, args *KeyRingImportJobArgs, opts ...pulumi.ResourceOption) (*KeyRingImportJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImportJobsId == nil {
		return nil, errors.New("invalid value for required argument 'ImportJobsId'")
	}
	if args.KeyRingsId == nil {
		return nil, errors.New("invalid value for required argument 'KeyRingsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource KeyRingImportJob
	err := ctx.RegisterResource("gcp-native:cloudkms/v1:KeyRingImportJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyRingImportJob gets an existing KeyRingImportJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyRingImportJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyRingImportJobState, opts ...pulumi.ResourceOption) (*KeyRingImportJob, error) {
	var resource KeyRingImportJob
	err := ctx.ReadResource("gcp-native:cloudkms/v1:KeyRingImportJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyRingImportJob resources.
type keyRingImportJobState struct {
	// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen ImportMethod is one with a protection level of HSM.
	Attestation *KeyOperationAttestationResponse `pulumi:"attestation"`
	// The time at which this ImportJob was created.
	CreateTime *string `pulumi:"createTime"`
	// The time this ImportJob expired. Only present if state is EXPIRED.
	ExpireEventTime *string `pulumi:"expireEventTime"`
	// The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
	ExpireTime *string `pulumi:"expireTime"`
	// The time this ImportJob's key material was generated.
	GenerateTime *string `pulumi:"generateTime"`
	// Required. Immutable. The wrapping method to be used for incoming key material.
	ImportMethod *string `pulumi:"importMethod"`
	// The resource name for this ImportJob in the format `projects/*/locations/*/keyRings/*/importJobs/*`.
	Name *string `pulumi:"name"`
	// Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
	ProtectionLevel *string `pulumi:"protectionLevel"`
	// The public key with which to wrap key material prior to import. Only returned if state is ACTIVE.
	PublicKey *WrappingPublicKeyResponse `pulumi:"publicKey"`
	// The current state of the ImportJob, indicating if it can be used.
	State *string `pulumi:"state"`
}

type KeyRingImportJobState struct {
	// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen ImportMethod is one with a protection level of HSM.
	Attestation KeyOperationAttestationResponsePtrInput
	// The time at which this ImportJob was created.
	CreateTime pulumi.StringPtrInput
	// The time this ImportJob expired. Only present if state is EXPIRED.
	ExpireEventTime pulumi.StringPtrInput
	// The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
	ExpireTime pulumi.StringPtrInput
	// The time this ImportJob's key material was generated.
	GenerateTime pulumi.StringPtrInput
	// Required. Immutable. The wrapping method to be used for incoming key material.
	ImportMethod pulumi.StringPtrInput
	// The resource name for this ImportJob in the format `projects/*/locations/*/keyRings/*/importJobs/*`.
	Name pulumi.StringPtrInput
	// Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
	ProtectionLevel pulumi.StringPtrInput
	// The public key with which to wrap key material prior to import. Only returned if state is ACTIVE.
	PublicKey WrappingPublicKeyResponsePtrInput
	// The current state of the ImportJob, indicating if it can be used.
	State pulumi.StringPtrInput
}

func (KeyRingImportJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingImportJobState)(nil)).Elem()
}

type keyRingImportJobArgs struct {
	ImportJobsId string `pulumi:"importJobsId"`
	// Required. Immutable. The wrapping method to be used for incoming key material.
	ImportMethod *string `pulumi:"importMethod"`
	KeyRingsId   string  `pulumi:"keyRingsId"`
	LocationsId  string  `pulumi:"locationsId"`
	ProjectsId   string  `pulumi:"projectsId"`
	// Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
	ProtectionLevel *string `pulumi:"protectionLevel"`
}

// The set of arguments for constructing a KeyRingImportJob resource.
type KeyRingImportJobArgs struct {
	ImportJobsId pulumi.StringInput
	// Required. Immutable. The wrapping method to be used for incoming key material.
	ImportMethod pulumi.StringPtrInput
	KeyRingsId   pulumi.StringInput
	LocationsId  pulumi.StringInput
	ProjectsId   pulumi.StringInput
	// Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
	ProtectionLevel pulumi.StringPtrInput
}

func (KeyRingImportJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRingImportJobArgs)(nil)).Elem()
}

type KeyRingImportJobInput interface {
	pulumi.Input

	ToKeyRingImportJobOutput() KeyRingImportJobOutput
	ToKeyRingImportJobOutputWithContext(ctx context.Context) KeyRingImportJobOutput
}

func (*KeyRingImportJob) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJob)(nil))
}

func (i *KeyRingImportJob) ToKeyRingImportJobOutput() KeyRingImportJobOutput {
	return i.ToKeyRingImportJobOutputWithContext(context.Background())
}

func (i *KeyRingImportJob) ToKeyRingImportJobOutputWithContext(ctx context.Context) KeyRingImportJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRingImportJobOutput)
}

type KeyRingImportJobOutput struct {
	*pulumi.OutputState
}

func (KeyRingImportJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRingImportJob)(nil))
}

func (o KeyRingImportJobOutput) ToKeyRingImportJobOutput() KeyRingImportJobOutput {
	return o
}

func (o KeyRingImportJobOutput) ToKeyRingImportJobOutputWithContext(ctx context.Context) KeyRingImportJobOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KeyRingImportJobOutput{})
}
