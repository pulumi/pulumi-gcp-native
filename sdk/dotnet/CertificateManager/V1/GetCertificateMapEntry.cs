// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CertificateManager.V1
{
    public static class GetCertificateMapEntry
    {
        /// <summary>
        /// Gets details of a single CertificateMapEntry.
        /// </summary>
        public static Task<GetCertificateMapEntryResult> InvokeAsync(GetCertificateMapEntryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCertificateMapEntryResult>("google-native:certificatemanager/v1:getCertificateMapEntry", args ?? new GetCertificateMapEntryArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single CertificateMapEntry.
        /// </summary>
        public static Output<GetCertificateMapEntryResult> Invoke(GetCertificateMapEntryInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCertificateMapEntryResult>("google-native:certificatemanager/v1:getCertificateMapEntry", args ?? new GetCertificateMapEntryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateMapEntryArgs : Pulumi.InvokeArgs
    {
        [Input("certificateMapEntryId", required: true)]
        public string CertificateMapEntryId { get; set; } = null!;

        [Input("certificateMapId", required: true)]
        public string CertificateMapId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetCertificateMapEntryArgs()
        {
        }
    }

    public sealed class GetCertificateMapEntryInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("certificateMapEntryId", required: true)]
        public Input<string> CertificateMapEntryId { get; set; } = null!;

        [Input("certificateMapId", required: true)]
        public Input<string> CertificateMapId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetCertificateMapEntryInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCertificateMapEntryResult
    {
        /// <summary>
        /// A set of Certificates defines for the given `hostname`. There can be defined up to fifteen certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.
        /// </summary>
        public readonly ImmutableArray<string> Certificates;
        /// <summary>
        /// The creation timestamp of a Certificate Map Entry.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// One or more paragraphs of text description of a certificate map entry.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A Hostname (FQDN, e.g. example.com) or a wildcard hostname expression (*.example.com) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// Set of labels associated with a Certificate Map Entry.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// A predefined matcher for particular cases, other than SNI selection.
        /// </summary>
        public readonly string Matcher;
        /// <summary>
        /// A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A serving state of this Certificate Map Entry.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The update timestamp of a Certificate Map Entry.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetCertificateMapEntryResult(
            ImmutableArray<string> certificates,

            string createTime,

            string description,

            string hostname,

            ImmutableDictionary<string, string> labels,

            string matcher,

            string name,

            string state,

            string updateTime)
        {
            Certificates = certificates;
            CreateTime = createTime;
            Description = description;
            Hostname = hostname;
            Labels = labels;
            Matcher = matcher;
            Name = name;
            State = state;
            UpdateTime = updateTime;
        }
    }
}
