// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CertificateManager.V1.Outputs
{

    /// <summary>
    /// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
    /// </summary>
    [OutputType]
    public sealed class ManagedCertificateResponse
    {
        /// <summary>
        /// Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.AuthorizationAttemptInfoResponse> AuthorizationAttemptInfo;
        /// <summary>
        /// Immutable. Authorizations that will be used for performing domain authorization.
        /// </summary>
        public readonly ImmutableArray<string> DnsAuthorizations;
        /// <summary>
        /// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
        /// </summary>
        public readonly ImmutableArray<string> Domains;
        /// <summary>
        /// Information about issues with provisioning a Managed Certificate.
        /// </summary>
        public readonly Outputs.ProvisioningIssueResponse ProvisioningIssue;
        /// <summary>
        /// State of the managed certificate resource.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private ManagedCertificateResponse(
            ImmutableArray<Outputs.AuthorizationAttemptInfoResponse> authorizationAttemptInfo,

            ImmutableArray<string> dnsAuthorizations,

            ImmutableArray<string> domains,

            Outputs.ProvisioningIssueResponse provisioningIssue,

            string state)
        {
            AuthorizationAttemptInfo = authorizationAttemptInfo;
            DnsAuthorizations = dnsAuthorizations;
            Domains = domains;
            ProvisioningIssue = provisioningIssue;
            State = state;
        }
    }
}
