// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.StorageTransfer.V1
{
    [EnumType]
    public readonly struct NotificationConfigEventTypesItem : IEquatable<NotificationConfigEventTypesItem>
    {
        private readonly string _value;

        private NotificationConfigEventTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Illegal value, to avoid allowing a default.
        /// </summary>
        public static NotificationConfigEventTypesItem EventTypeUnspecified { get; } = new NotificationConfigEventTypesItem("EVENT_TYPE_UNSPECIFIED");
        /// <summary>
        /// `TransferOperation` completed with status SUCCESS.
        /// </summary>
        public static NotificationConfigEventTypesItem TransferOperationSuccess { get; } = new NotificationConfigEventTypesItem("TRANSFER_OPERATION_SUCCESS");
        /// <summary>
        /// `TransferOperation` completed with status FAILED.
        /// </summary>
        public static NotificationConfigEventTypesItem TransferOperationFailed { get; } = new NotificationConfigEventTypesItem("TRANSFER_OPERATION_FAILED");
        /// <summary>
        /// `TransferOperation` completed with status ABORTED.
        /// </summary>
        public static NotificationConfigEventTypesItem TransferOperationAborted { get; } = new NotificationConfigEventTypesItem("TRANSFER_OPERATION_ABORTED");

        public static bool operator ==(NotificationConfigEventTypesItem left, NotificationConfigEventTypesItem right) => left.Equals(right);
        public static bool operator !=(NotificationConfigEventTypesItem left, NotificationConfigEventTypesItem right) => !left.Equals(right);

        public static explicit operator string(NotificationConfigEventTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotificationConfigEventTypesItem other && Equals(other);
        public bool Equals(NotificationConfigEventTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The desired format of the notification message payloads.
    /// </summary>
    [EnumType]
    public readonly struct NotificationConfigPayloadFormat : IEquatable<NotificationConfigPayloadFormat>
    {
        private readonly string _value;

        private NotificationConfigPayloadFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Illegal value, to avoid allowing a default.
        /// </summary>
        public static NotificationConfigPayloadFormat PayloadFormatUnspecified { get; } = new NotificationConfigPayloadFormat("PAYLOAD_FORMAT_UNSPECIFIED");
        /// <summary>
        /// No payload is included with the notification.
        /// </summary>
        public static NotificationConfigPayloadFormat None { get; } = new NotificationConfigPayloadFormat("NONE");
        /// <summary>
        /// `TransferOperation` is [formatted as a JSON response](https://developers.google.com/protocol-buffers/docs/proto3#json), in application/json.
        /// </summary>
        public static NotificationConfigPayloadFormat Json { get; } = new NotificationConfigPayloadFormat("JSON");

        public static bool operator ==(NotificationConfigPayloadFormat left, NotificationConfigPayloadFormat right) => left.Equals(right);
        public static bool operator !=(NotificationConfigPayloadFormat left, NotificationConfigPayloadFormat right) => !left.Equals(right);

        public static explicit operator string(NotificationConfigPayloadFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotificationConfigPayloadFormat other && Equals(other);
        public bool Equals(NotificationConfigPayloadFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the job. This value MUST be specified for `CreateTransferJobRequests`. **Note:** The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.
    /// </summary>
    [EnumType]
    public readonly struct TransferJobStatus : IEquatable<TransferJobStatus>
    {
        private readonly string _value;

        private TransferJobStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Zero is an illegal value.
        /// </summary>
        public static TransferJobStatus StatusUnspecified { get; } = new TransferJobStatus("STATUS_UNSPECIFIED");
        /// <summary>
        /// New transfers will be performed based on the schedule.
        /// </summary>
        public static TransferJobStatus Enabled { get; } = new TransferJobStatus("ENABLED");
        /// <summary>
        /// New transfers will not be scheduled.
        /// </summary>
        public static TransferJobStatus Disabled { get; } = new TransferJobStatus("DISABLED");
        /// <summary>
        /// This is a soft delete state. After a transfer job is set to this state, the job and all the transfer executions are subject to garbage collection. Transfer jobs become eligible for garbage collection 30 days after their status is set to `DELETED`.
        /// </summary>
        public static TransferJobStatus Deleted { get; } = new TransferJobStatus("DELETED");

        public static bool operator ==(TransferJobStatus left, TransferJobStatus right) => left.Equals(right);
        public static bool operator !=(TransferJobStatus left, TransferJobStatus right) => !left.Equals(right);

        public static explicit operator string(TransferJobStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransferJobStatus other && Equals(other);
        public bool Equals(TransferJobStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
