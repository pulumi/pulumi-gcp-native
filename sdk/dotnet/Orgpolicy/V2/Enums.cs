// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Orgpolicy.V2
{
    /// <summary>
    /// Allow or deny type.
    /// </summary>
    [EnumType]
    public readonly struct CustomConstraintActionType : IEquatable<CustomConstraintActionType>
    {
        private readonly string _value;

        private CustomConstraintActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified. Will results in user error.
        /// </summary>
        public static CustomConstraintActionType ActionTypeUnspecified { get; } = new CustomConstraintActionType("ACTION_TYPE_UNSPECIFIED");
        /// <summary>
        /// Allowed action type.
        /// </summary>
        public static CustomConstraintActionType Allow { get; } = new CustomConstraintActionType("ALLOW");
        /// <summary>
        /// Deny action type.
        /// </summary>
        public static CustomConstraintActionType Deny { get; } = new CustomConstraintActionType("DENY");

        public static bool operator ==(CustomConstraintActionType left, CustomConstraintActionType right) => left.Equals(right);
        public static bool operator !=(CustomConstraintActionType left, CustomConstraintActionType right) => !left.Equals(right);

        public static explicit operator string(CustomConstraintActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomConstraintActionType other && Equals(other);
        public bool Equals(CustomConstraintActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomConstraintMethodTypesItem : IEquatable<CustomConstraintMethodTypesItem>
    {
        private readonly string _value;

        private CustomConstraintMethodTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified. Will results in user error.
        /// </summary>
        public static CustomConstraintMethodTypesItem MethodTypeUnspecified { get; } = new CustomConstraintMethodTypesItem("METHOD_TYPE_UNSPECIFIED");
        /// <summary>
        /// Constraint applied when creating the resource.
        /// </summary>
        public static CustomConstraintMethodTypesItem Create { get; } = new CustomConstraintMethodTypesItem("CREATE");
        /// <summary>
        /// Constraint applied when updating the resource.
        /// </summary>
        public static CustomConstraintMethodTypesItem Update { get; } = new CustomConstraintMethodTypesItem("UPDATE");
        /// <summary>
        /// Constraint applied when deleting the resource.
        /// </summary>
        public static CustomConstraintMethodTypesItem Delete { get; } = new CustomConstraintMethodTypesItem("DELETE");

        public static bool operator ==(CustomConstraintMethodTypesItem left, CustomConstraintMethodTypesItem right) => left.Equals(right);
        public static bool operator !=(CustomConstraintMethodTypesItem left, CustomConstraintMethodTypesItem right) => !left.Equals(right);

        public static explicit operator string(CustomConstraintMethodTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomConstraintMethodTypesItem other && Equals(other);
        public bool Equals(CustomConstraintMethodTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
