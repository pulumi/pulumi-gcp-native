// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ArtifactRegistry.V1
{
    /// <summary>
    /// Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.
    /// </summary>
    [GoogleNativeResourceType("google-native:artifactregistry/v1:Repository")]
    public partial class Repository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
        /// </summary>
        [Output("cleanupPolicies")]
        public Output<ImmutableDictionary<string, Outputs.CleanupPolicyResponse>> CleanupPolicies { get; private set; } = null!;

        /// <summary>
        /// Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.
        /// </summary>
        [Output("cleanupPolicyDryRun")]
        public Output<bool> CleanupPolicyDryRun { get; private set; } = null!;

        /// <summary>
        /// The time when the repository was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The user-provided description of the repository.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Docker repository config contains repository level configuration for the repositories of docker type.
        /// </summary>
        [Output("dockerConfig")]
        public Output<Outputs.DockerRepositoryConfigResponse> DockerConfig { get; private set; } = null!;

        /// <summary>
        /// Optional. The format of packages that are stored in the repository.
        /// </summary>
        [Output("format")]
        public Output<string> Format { get; private set; } = null!;

        /// <summary>
        /// The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.
        /// </summary>
        [Output("kmsKeyName")]
        public Output<string> KmsKeyName { get; private set; } = null!;

        /// <summary>
        /// Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Maven repository config contains repository level configuration for the repositories of maven type.
        /// </summary>
        [Output("mavenConfig")]
        public Output<Outputs.MavenRepositoryConfigResponse> MavenConfig { get; private set; } = null!;

        /// <summary>
        /// Optional. The mode of the repository.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Configuration specific for a Remote Repository.
        /// </summary>
        [Output("remoteRepositoryConfig")]
        public Output<Outputs.RemoteRepositoryConfigResponse> RemoteRepositoryConfig { get; private set; } = null!;

        /// <summary>
        /// Required. The repository id to use for this repository.
        /// </summary>
        [Output("repositoryId")]
        public Output<string> RepositoryId { get; private set; } = null!;

        /// <summary>
        /// If set, the repository satisfies physical zone separation.
        /// </summary>
        [Output("satisfiesPzs")]
        public Output<bool> SatisfiesPzs { get; private set; } = null!;

        /// <summary>
        /// The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.
        /// </summary>
        [Output("sizeBytes")]
        public Output<string> SizeBytes { get; private set; } = null!;

        /// <summary>
        /// The time when the repository was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Configuration specific for a Virtual Repository.
        /// </summary>
        [Output("virtualRepositoryConfig")]
        public Output<Outputs.VirtualRepositoryConfigResponse> VirtualRepositoryConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Repository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repository(string name, RepositoryArgs args, CustomResourceOptions? options = null)
            : base("google-native:artifactregistry/v1:Repository", name, args ?? new RepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repository(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:artifactregistry/v1:Repository", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                    "repositoryId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repository Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Repository(name, id, options);
        }
    }

    public sealed class RepositoryArgs : global::Pulumi.ResourceArgs
    {
        [Input("cleanupPolicies")]
        private InputMap<Inputs.CleanupPolicyArgs>? _cleanupPolicies;

        /// <summary>
        /// Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
        /// </summary>
        public InputMap<Inputs.CleanupPolicyArgs> CleanupPolicies
        {
            get => _cleanupPolicies ?? (_cleanupPolicies = new InputMap<Inputs.CleanupPolicyArgs>());
            set => _cleanupPolicies = value;
        }

        /// <summary>
        /// Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.
        /// </summary>
        [Input("cleanupPolicyDryRun")]
        public Input<bool>? CleanupPolicyDryRun { get; set; }

        /// <summary>
        /// The user-provided description of the repository.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Docker repository config contains repository level configuration for the repositories of docker type.
        /// </summary>
        [Input("dockerConfig")]
        public Input<Inputs.DockerRepositoryConfigArgs>? DockerConfig { get; set; }

        /// <summary>
        /// Optional. The format of packages that are stored in the repository.
        /// </summary>
        [Input("format")]
        public Input<Pulumi.GoogleNative.ArtifactRegistry.V1.RepositoryFormat>? Format { get; set; }

        /// <summary>
        /// The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Maven repository config contains repository level configuration for the repositories of maven type.
        /// </summary>
        [Input("mavenConfig")]
        public Input<Inputs.MavenRepositoryConfigArgs>? MavenConfig { get; set; }

        /// <summary>
        /// Optional. The mode of the repository.
        /// </summary>
        [Input("mode")]
        public Input<Pulumi.GoogleNative.ArtifactRegistry.V1.RepositoryMode>? Mode { get; set; }

        /// <summary>
        /// The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Configuration specific for a Remote Repository.
        /// </summary>
        [Input("remoteRepositoryConfig")]
        public Input<Inputs.RemoteRepositoryConfigArgs>? RemoteRepositoryConfig { get; set; }

        /// <summary>
        /// Required. The repository id to use for this repository.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        /// <summary>
        /// Configuration specific for a Virtual Repository.
        /// </summary>
        [Input("virtualRepositoryConfig")]
        public Input<Inputs.VirtualRepositoryConfigArgs>? VirtualRepositoryConfig { get; set; }

        public RepositoryArgs()
        {
        }
        public static new RepositoryArgs Empty => new RepositoryArgs();
    }
}
