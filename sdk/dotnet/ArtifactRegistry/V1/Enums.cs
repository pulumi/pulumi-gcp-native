// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.ArtifactRegistry.V1
{
    /// <summary>
    /// Policy action.
    /// </summary>
    [EnumType]
    public readonly struct CleanupPolicyAction : IEquatable<CleanupPolicyAction>
    {
        private readonly string _value;

        private CleanupPolicyAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Action not specified.
        /// </summary>
        public static CleanupPolicyAction ActionUnspecified { get; } = new CleanupPolicyAction("ACTION_UNSPECIFIED");
        /// <summary>
        /// Delete action.
        /// </summary>
        public static CleanupPolicyAction Delete { get; } = new CleanupPolicyAction("DELETE");
        /// <summary>
        /// Keep action.
        /// </summary>
        public static CleanupPolicyAction Keep { get; } = new CleanupPolicyAction("KEEP");

        public static bool operator ==(CleanupPolicyAction left, CleanupPolicyAction right) => left.Equals(right);
        public static bool operator !=(CleanupPolicyAction left, CleanupPolicyAction right) => !left.Equals(right);

        public static explicit operator string(CleanupPolicyAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CleanupPolicyAction other && Equals(other);
        public bool Equals(CleanupPolicyAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Match versions by tag status.
    /// </summary>
    [EnumType]
    public readonly struct CleanupPolicyConditionTagState : IEquatable<CleanupPolicyConditionTagState>
    {
        private readonly string _value;

        private CleanupPolicyConditionTagState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Tag status not specified.
        /// </summary>
        public static CleanupPolicyConditionTagState TagStateUnspecified { get; } = new CleanupPolicyConditionTagState("TAG_STATE_UNSPECIFIED");
        /// <summary>
        /// Applies to tagged versions only.
        /// </summary>
        public static CleanupPolicyConditionTagState Tagged { get; } = new CleanupPolicyConditionTagState("TAGGED");
        /// <summary>
        /// Applies to untagged versions only.
        /// </summary>
        public static CleanupPolicyConditionTagState Untagged { get; } = new CleanupPolicyConditionTagState("UNTAGGED");
        /// <summary>
        /// Applies to all versions.
        /// </summary>
        public static CleanupPolicyConditionTagState Any { get; } = new CleanupPolicyConditionTagState("ANY");

        public static bool operator ==(CleanupPolicyConditionTagState left, CleanupPolicyConditionTagState right) => left.Equals(right);
        public static bool operator !=(CleanupPolicyConditionTagState left, CleanupPolicyConditionTagState right) => !left.Equals(right);

        public static explicit operator string(CleanupPolicyConditionTagState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CleanupPolicyConditionTagState other && Equals(other);
        public bool Equals(CleanupPolicyConditionTagState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// One of the publicly available Docker repositories supported by Artifact Registry.
    /// </summary>
    [EnumType]
    public readonly struct DockerRepositoryPublicRepository : IEquatable<DockerRepositoryPublicRepository>
    {
        private readonly string _value;

        private DockerRepositoryPublicRepository(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified repository.
        /// </summary>
        public static DockerRepositoryPublicRepository PublicRepositoryUnspecified { get; } = new DockerRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED");
        /// <summary>
        /// Docker Hub.
        /// </summary>
        public static DockerRepositoryPublicRepository DockerHub { get; } = new DockerRepositoryPublicRepository("DOCKER_HUB");

        public static bool operator ==(DockerRepositoryPublicRepository left, DockerRepositoryPublicRepository right) => left.Equals(right);
        public static bool operator !=(DockerRepositoryPublicRepository left, DockerRepositoryPublicRepository right) => !left.Equals(right);

        public static explicit operator string(DockerRepositoryPublicRepository value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DockerRepositoryPublicRepository other && Equals(other);
        public bool Equals(DockerRepositoryPublicRepository other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A common public repository base for Apt.
    /// </summary>
    [EnumType]
    public readonly struct GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase : IEquatable<GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase>
    {
        private readonly string _value;

        private GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified repository base.
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase RepositoryBaseUnspecified { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase("REPOSITORY_BASE_UNSPECIFIED");
        /// <summary>
        /// Debian.
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase Debian { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase("DEBIAN");
        /// <summary>
        /// Ubuntu LTS/Pro.
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase Ubuntu { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase("UBUNTU");
        /// <summary>
        /// Archived Debian.
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase DebianSnapshot { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase("DEBIAN_SNAPSHOT");

        public static bool operator ==(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase left, GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase right) => left.Equals(right);
        public static bool operator !=(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase left, GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase right) => !left.Equals(right);

        public static explicit operator string(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase other && Equals(other);
        public bool Equals(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A common public repository base for Yum.
    /// </summary>
    [EnumType]
    public readonly struct GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase : IEquatable<GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase>
    {
        private readonly string _value;

        private GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified repository base.
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase RepositoryBaseUnspecified { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase("REPOSITORY_BASE_UNSPECIFIED");
        /// <summary>
        /// CentOS.
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase Centos { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase("CENTOS");
        /// <summary>
        /// CentOS Debug.
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase CentosDebug { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase("CENTOS_DEBUG");
        /// <summary>
        /// CentOS Vault.
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase CentosVault { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase("CENTOS_VAULT");
        /// <summary>
        /// CentOS Stream.
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase CentosStream { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase("CENTOS_STREAM");
        /// <summary>
        /// Rocky.
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase Rocky { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase("ROCKY");
        /// <summary>
        /// Fedora Extra Packages for Enterprise Linux (EPEL).
        /// </summary>
        public static GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase Epel { get; } = new GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase("EPEL");

        public static bool operator ==(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase left, GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase right) => left.Equals(right);
        public static bool operator !=(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase left, GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase right) => !left.Equals(right);

        public static explicit operator string(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase other && Equals(other);
        public bool Equals(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Version policy defines the versions that the registry will accept.
    /// </summary>
    [EnumType]
    public readonly struct MavenRepositoryConfigVersionPolicy : IEquatable<MavenRepositoryConfigVersionPolicy>
    {
        private readonly string _value;

        private MavenRepositoryConfigVersionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// VERSION_POLICY_UNSPECIFIED - the version policy is not defined. When the version policy is not defined, no validation is performed for the versions.
        /// </summary>
        public static MavenRepositoryConfigVersionPolicy VersionPolicyUnspecified { get; } = new MavenRepositoryConfigVersionPolicy("VERSION_POLICY_UNSPECIFIED");
        /// <summary>
        /// RELEASE - repository will accept only Release versions.
        /// </summary>
        public static MavenRepositoryConfigVersionPolicy Release { get; } = new MavenRepositoryConfigVersionPolicy("RELEASE");
        /// <summary>
        /// SNAPSHOT - repository will accept only Snapshot versions.
        /// </summary>
        public static MavenRepositoryConfigVersionPolicy Snapshot { get; } = new MavenRepositoryConfigVersionPolicy("SNAPSHOT");

        public static bool operator ==(MavenRepositoryConfigVersionPolicy left, MavenRepositoryConfigVersionPolicy right) => left.Equals(right);
        public static bool operator !=(MavenRepositoryConfigVersionPolicy left, MavenRepositoryConfigVersionPolicy right) => !left.Equals(right);

        public static explicit operator string(MavenRepositoryConfigVersionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MavenRepositoryConfigVersionPolicy other && Equals(other);
        public bool Equals(MavenRepositoryConfigVersionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// One of the publicly available Maven repositories supported by Artifact Registry.
    /// </summary>
    [EnumType]
    public readonly struct MavenRepositoryPublicRepository : IEquatable<MavenRepositoryPublicRepository>
    {
        private readonly string _value;

        private MavenRepositoryPublicRepository(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified repository.
        /// </summary>
        public static MavenRepositoryPublicRepository PublicRepositoryUnspecified { get; } = new MavenRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED");
        /// <summary>
        /// Maven Central.
        /// </summary>
        public static MavenRepositoryPublicRepository MavenCentral { get; } = new MavenRepositoryPublicRepository("MAVEN_CENTRAL");

        public static bool operator ==(MavenRepositoryPublicRepository left, MavenRepositoryPublicRepository right) => left.Equals(right);
        public static bool operator !=(MavenRepositoryPublicRepository left, MavenRepositoryPublicRepository right) => !left.Equals(right);

        public static explicit operator string(MavenRepositoryPublicRepository value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MavenRepositoryPublicRepository other && Equals(other);
        public bool Equals(MavenRepositoryPublicRepository other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// One of the publicly available Npm repositories supported by Artifact Registry.
    /// </summary>
    [EnumType]
    public readonly struct NpmRepositoryPublicRepository : IEquatable<NpmRepositoryPublicRepository>
    {
        private readonly string _value;

        private NpmRepositoryPublicRepository(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified repository.
        /// </summary>
        public static NpmRepositoryPublicRepository PublicRepositoryUnspecified { get; } = new NpmRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED");
        /// <summary>
        /// npmjs.
        /// </summary>
        public static NpmRepositoryPublicRepository Npmjs { get; } = new NpmRepositoryPublicRepository("NPMJS");

        public static bool operator ==(NpmRepositoryPublicRepository left, NpmRepositoryPublicRepository right) => left.Equals(right);
        public static bool operator !=(NpmRepositoryPublicRepository left, NpmRepositoryPublicRepository right) => !left.Equals(right);

        public static explicit operator string(NpmRepositoryPublicRepository value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NpmRepositoryPublicRepository other && Equals(other);
        public bool Equals(NpmRepositoryPublicRepository other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// One of the publicly available Python repositories supported by Artifact Registry.
    /// </summary>
    [EnumType]
    public readonly struct PythonRepositoryPublicRepository : IEquatable<PythonRepositoryPublicRepository>
    {
        private readonly string _value;

        private PythonRepositoryPublicRepository(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified repository.
        /// </summary>
        public static PythonRepositoryPublicRepository PublicRepositoryUnspecified { get; } = new PythonRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED");
        /// <summary>
        /// PyPI.
        /// </summary>
        public static PythonRepositoryPublicRepository Pypi { get; } = new PythonRepositoryPublicRepository("PYPI");

        public static bool operator ==(PythonRepositoryPublicRepository left, PythonRepositoryPublicRepository right) => left.Equals(right);
        public static bool operator !=(PythonRepositoryPublicRepository left, PythonRepositoryPublicRepository right) => !left.Equals(right);

        public static explicit operator string(PythonRepositoryPublicRepository value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PythonRepositoryPublicRepository other && Equals(other);
        public bool Equals(PythonRepositoryPublicRepository other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The format of packages that are stored in the repository.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryFormat : IEquatable<RepositoryFormat>
    {
        private readonly string _value;

        private RepositoryFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified package format.
        /// </summary>
        public static RepositoryFormat FormatUnspecified { get; } = new RepositoryFormat("FORMAT_UNSPECIFIED");
        /// <summary>
        /// Docker package format.
        /// </summary>
        public static RepositoryFormat Docker { get; } = new RepositoryFormat("DOCKER");
        /// <summary>
        /// Maven package format.
        /// </summary>
        public static RepositoryFormat Maven { get; } = new RepositoryFormat("MAVEN");
        /// <summary>
        /// NPM package format.
        /// </summary>
        public static RepositoryFormat Npm { get; } = new RepositoryFormat("NPM");
        /// <summary>
        /// APT package format.
        /// </summary>
        public static RepositoryFormat Apt { get; } = new RepositoryFormat("APT");
        /// <summary>
        /// YUM package format.
        /// </summary>
        public static RepositoryFormat Yum { get; } = new RepositoryFormat("YUM");
        /// <summary>
        /// GooGet package format.
        /// </summary>
        public static RepositoryFormat Googet { get; } = new RepositoryFormat("GOOGET");
        /// <summary>
        /// Python package format.
        /// </summary>
        public static RepositoryFormat Python { get; } = new RepositoryFormat("PYTHON");
        /// <summary>
        /// Kubeflow Pipelines package format.
        /// </summary>
        public static RepositoryFormat Kfp { get; } = new RepositoryFormat("KFP");
        /// <summary>
        /// Go package format.
        /// </summary>
        public static RepositoryFormat Go { get; } = new RepositoryFormat("GO");

        public static bool operator ==(RepositoryFormat left, RepositoryFormat right) => left.Equals(right);
        public static bool operator !=(RepositoryFormat left, RepositoryFormat right) => !left.Equals(right);

        public static explicit operator string(RepositoryFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryFormat other && Equals(other);
        public bool Equals(RepositoryFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The mode of the repository.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryMode : IEquatable<RepositoryMode>
    {
        private readonly string _value;

        private RepositoryMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified mode.
        /// </summary>
        public static RepositoryMode ModeUnspecified { get; } = new RepositoryMode("MODE_UNSPECIFIED");
        /// <summary>
        /// A standard repository storing artifacts.
        /// </summary>
        public static RepositoryMode StandardRepository { get; } = new RepositoryMode("STANDARD_REPOSITORY");
        /// <summary>
        /// A virtual repository to serve artifacts from one or more sources.
        /// </summary>
        public static RepositoryMode VirtualRepository { get; } = new RepositoryMode("VIRTUAL_REPOSITORY");
        /// <summary>
        /// A remote repository to serve artifacts from a remote source.
        /// </summary>
        public static RepositoryMode RemoteRepository { get; } = new RepositoryMode("REMOTE_REPOSITORY");

        public static bool operator ==(RepositoryMode left, RepositoryMode right) => left.Equals(right);
        public static bool operator !=(RepositoryMode left, RepositoryMode right) => !left.Equals(right);

        public static explicit operator string(RepositoryMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryMode other && Equals(other);
        public bool Equals(RepositoryMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
