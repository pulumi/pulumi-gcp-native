// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.ArtifactRegistry.V1
{
    /// <summary>
    /// Version policy defines the versions that the registry will accept.
    /// </summary>
    [EnumType]
    public readonly struct MavenRepositoryConfigVersionPolicy : IEquatable<MavenRepositoryConfigVersionPolicy>
    {
        private readonly string _value;

        private MavenRepositoryConfigVersionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// VERSION_POLICY_UNSPECIFIED - the version policy is not defined. When the version policy is not defined, no validation is performed for the versions.
        /// </summary>
        public static MavenRepositoryConfigVersionPolicy VersionPolicyUnspecified { get; } = new MavenRepositoryConfigVersionPolicy("VERSION_POLICY_UNSPECIFIED");
        /// <summary>
        /// RELEASE - repository will accept only Release versions.
        /// </summary>
        public static MavenRepositoryConfigVersionPolicy Release { get; } = new MavenRepositoryConfigVersionPolicy("RELEASE");
        /// <summary>
        /// SNAPSHOT - repository will accept only Snapshot versions.
        /// </summary>
        public static MavenRepositoryConfigVersionPolicy Snapshot { get; } = new MavenRepositoryConfigVersionPolicy("SNAPSHOT");

        public static bool operator ==(MavenRepositoryConfigVersionPolicy left, MavenRepositoryConfigVersionPolicy right) => left.Equals(right);
        public static bool operator !=(MavenRepositoryConfigVersionPolicy left, MavenRepositoryConfigVersionPolicy right) => !left.Equals(right);

        public static explicit operator string(MavenRepositoryConfigVersionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MavenRepositoryConfigVersionPolicy other && Equals(other);
        public bool Equals(MavenRepositoryConfigVersionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The format of packages that are stored in the repository.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryFormat : IEquatable<RepositoryFormat>
    {
        private readonly string _value;

        private RepositoryFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified package format.
        /// </summary>
        public static RepositoryFormat FormatUnspecified { get; } = new RepositoryFormat("FORMAT_UNSPECIFIED");
        /// <summary>
        /// Docker package format.
        /// </summary>
        public static RepositoryFormat Docker { get; } = new RepositoryFormat("DOCKER");
        /// <summary>
        /// Maven package format.
        /// </summary>
        public static RepositoryFormat Maven { get; } = new RepositoryFormat("MAVEN");
        /// <summary>
        /// NPM package format.
        /// </summary>
        public static RepositoryFormat Npm { get; } = new RepositoryFormat("NPM");
        /// <summary>
        /// APT package format.
        /// </summary>
        public static RepositoryFormat Apt { get; } = new RepositoryFormat("APT");
        /// <summary>
        /// YUM package format.
        /// </summary>
        public static RepositoryFormat Yum { get; } = new RepositoryFormat("YUM");
        /// <summary>
        /// Python package format.
        /// </summary>
        public static RepositoryFormat Python { get; } = new RepositoryFormat("PYTHON");

        public static bool operator ==(RepositoryFormat left, RepositoryFormat right) => left.Equals(right);
        public static bool operator !=(RepositoryFormat left, RepositoryFormat right) => !left.Equals(right);

        public static explicit operator string(RepositoryFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryFormat other && Equals(other);
        public bool Equals(RepositoryFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
