// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ArtifactRegistry.V1
{
    public static class GetRepository
    {
        /// <summary>
        /// Gets a repository.
        /// </summary>
        public static Task<GetRepositoryResult> InvokeAsync(GetRepositoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryResult>("google-native:artifactregistry/v1:getRepository", args ?? new GetRepositoryArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a repository.
        /// </summary>
        public static Output<GetRepositoryResult> Invoke(GetRepositoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryResult>("google-native:artifactregistry/v1:getRepository", args ?? new GetRepositoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryArgs()
        {
        }
        public static new GetRepositoryArgs Empty => new GetRepositoryArgs();
    }

    public sealed class GetRepositoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryInvokeArgs()
        {
        }
        public static new GetRepositoryInvokeArgs Empty => new GetRepositoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryResult
    {
        /// <summary>
        /// Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
        /// </summary>
        public readonly Outputs.CleanupPolicyResponse CleanupPolicies;
        /// <summary>
        /// Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.
        /// </summary>
        public readonly bool CleanupPolicyDryRun;
        /// <summary>
        /// The time when the repository was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The user-provided description of the repository.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Docker repository config contains repository level configuration for the repositories of docker type.
        /// </summary>
        public readonly Outputs.DockerRepositoryConfigResponse DockerConfig;
        /// <summary>
        /// Optional. The format of packages that are stored in the repository.
        /// </summary>
        public readonly string Format;
        /// <summary>
        /// The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.
        /// </summary>
        public readonly string KmsKeyName;
        /// <summary>
        /// Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Maven repository config contains repository level configuration for the repositories of maven type.
        /// </summary>
        public readonly Outputs.MavenRepositoryConfigResponse MavenConfig;
        /// <summary>
        /// Optional. The mode of the repository.
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Configuration specific for a Remote Repository.
        /// </summary>
        public readonly Outputs.RemoteRepositoryConfigResponse RemoteRepositoryConfig;
        /// <summary>
        /// If set, the repository satisfies physical zone separation.
        /// </summary>
        public readonly bool SatisfiesPzs;
        /// <summary>
        /// The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.
        /// </summary>
        public readonly string SizeBytes;
        /// <summary>
        /// The time when the repository was last updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// Configuration specific for a Virtual Repository.
        /// </summary>
        public readonly Outputs.VirtualRepositoryConfigResponse VirtualRepositoryConfig;

        [OutputConstructor]
        private GetRepositoryResult(
            Outputs.CleanupPolicyResponse cleanupPolicies,

            bool cleanupPolicyDryRun,

            string createTime,

            string description,

            Outputs.DockerRepositoryConfigResponse dockerConfig,

            string format,

            string kmsKeyName,

            ImmutableDictionary<string, string> labels,

            Outputs.MavenRepositoryConfigResponse mavenConfig,

            string mode,

            string name,

            Outputs.RemoteRepositoryConfigResponse remoteRepositoryConfig,

            bool satisfiesPzs,

            string sizeBytes,

            string updateTime,

            Outputs.VirtualRepositoryConfigResponse virtualRepositoryConfig)
        {
            CleanupPolicies = cleanupPolicies;
            CleanupPolicyDryRun = cleanupPolicyDryRun;
            CreateTime = createTime;
            Description = description;
            DockerConfig = dockerConfig;
            Format = format;
            KmsKeyName = kmsKeyName;
            Labels = labels;
            MavenConfig = mavenConfig;
            Mode = mode;
            Name = name;
            RemoteRepositoryConfig = remoteRepositoryConfig;
            SatisfiesPzs = satisfiesPzs;
            SizeBytes = sizeBytes;
            UpdateTime = updateTime;
            VirtualRepositoryConfig = virtualRepositoryConfig;
        }
    }
}
