// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.OSConfig.V1
{
    /// <summary>
    /// Create an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
    /// </summary>
    [GoogleNativeResourceType("google-native:osconfig/v1:OsPolicyAssignment")]
    public partial class OsPolicyAssignment : Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.
        /// </summary>
        [Output("baseline")]
        public Output<bool> Baseline { get; private set; } = null!;

        /// <summary>
        /// Indicates that this revision deletes the OS policy assignment.
        /// </summary>
        [Output("deleted")]
        public Output<bool> Deleted { get; private set; } = null!;

        /// <summary>
        /// OS policy assignment description. Length of the description is limited to 1024 characters.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Filter to select VMs.
        /// </summary>
        [Output("instanceFilter")]
        public Output<Outputs.OSPolicyAssignmentInstanceFilterResponse> InstanceFilter { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of OS policies to be applied to the VMs.
        /// </summary>
        [Output("osPolicies")]
        public Output<ImmutableArray<Outputs.OSPolicyResponse>> OsPolicies { get; private set; } = null!;

        /// <summary>
        /// Required. The logical name of the OS policy assignment in the project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project.
        /// </summary>
        [Output("osPolicyAssignmentId")]
        public Output<string> OsPolicyAssignmentId { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// The timestamp that the revision was created.
        /// </summary>
        [Output("revisionCreateTime")]
        public Output<string> RevisionCreateTime { get; private set; } = null!;

        /// <summary>
        /// The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment
        /// </summary>
        [Output("revisionId")]
        public Output<string> RevisionId { get; private set; } = null!;

        /// <summary>
        /// Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
        /// </summary>
        [Output("rollout")]
        public Output<Outputs.OSPolicyAssignmentRolloutResponse> Rollout { get; private set; } = null!;

        /// <summary>
        /// OS policy assignment rollout state
        /// </summary>
        [Output("rolloutState")]
        public Output<string> RolloutState { get; private set; } = null!;

        /// <summary>
        /// Server generated unique id for the OS policy assignment resource.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a OsPolicyAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OsPolicyAssignment(string name, OsPolicyAssignmentArgs args, CustomResourceOptions? options = null)
            : base("google-native:osconfig/v1:OsPolicyAssignment", name, args ?? new OsPolicyAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OsPolicyAssignment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:osconfig/v1:OsPolicyAssignment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OsPolicyAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OsPolicyAssignment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new OsPolicyAssignment(name, id, options);
        }
    }

    public sealed class OsPolicyAssignmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// OS policy assignment description. Length of the description is limited to 1024 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Filter to select VMs.
        /// </summary>
        [Input("instanceFilter", required: true)]
        public Input<Inputs.OSPolicyAssignmentInstanceFilterArgs> InstanceFilter { get; set; } = null!;

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("osPolicies", required: true)]
        private InputList<Inputs.OSPolicyArgs>? _osPolicies;

        /// <summary>
        /// List of OS policies to be applied to the VMs.
        /// </summary>
        public InputList<Inputs.OSPolicyArgs> OsPolicies
        {
            get => _osPolicies ?? (_osPolicies = new InputList<Inputs.OSPolicyArgs>());
            set => _osPolicies = value;
        }

        /// <summary>
        /// Required. The logical name of the OS policy assignment in the project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project.
        /// </summary>
        [Input("osPolicyAssignmentId", required: true)]
        public Input<string> OsPolicyAssignmentId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
        /// </summary>
        [Input("rollout", required: true)]
        public Input<Inputs.OSPolicyAssignmentRolloutArgs> Rollout { get; set; } = null!;

        public OsPolicyAssignmentArgs()
        {
        }
    }
}
