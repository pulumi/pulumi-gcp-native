// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Looker.V1
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Domain state.
    /// </summary>
    [EnumType]
    public readonly struct CustomDomainState : IEquatable<CustomDomainState>
    {
        private readonly string _value;

        private CustomDomainState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified state.
        /// </summary>
        public static CustomDomainState CustomDomainStateUnspecified { get; } = new CustomDomainState("CUSTOM_DOMAIN_STATE_UNSPECIFIED");
        /// <summary>
        /// DNS record is not created.
        /// </summary>
        public static CustomDomainState Unverified { get; } = new CustomDomainState("UNVERIFIED");
        /// <summary>
        /// DNS record is created.
        /// </summary>
        public static CustomDomainState Verified { get; } = new CustomDomainState("VERIFIED");
        /// <summary>
        /// Calling SLM to update.
        /// </summary>
        public static CustomDomainState Modifying { get; } = new CustomDomainState("MODIFYING");
        /// <summary>
        /// ManagedCertificate is ready.
        /// </summary>
        public static CustomDomainState Available { get; } = new CustomDomainState("AVAILABLE");
        /// <summary>
        /// ManagedCertificate is not ready.
        /// </summary>
        public static CustomDomainState Unavailable { get; } = new CustomDomainState("UNAVAILABLE");
        /// <summary>
        /// Status is not known.
        /// </summary>
        public static CustomDomainState Unknown { get; } = new CustomDomainState("UNKNOWN");

        public static bool operator ==(CustomDomainState left, CustomDomainState right) => left.Equals(right);
        public static bool operator !=(CustomDomainState left, CustomDomainState right) => !left.Equals(right);

        public static explicit operator string(CustomDomainState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainState other && Equals(other);
        public bool Equals(CustomDomainState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Platform edition.
    /// </summary>
    [EnumType]
    public readonly struct InstancePlatformEdition : IEquatable<InstancePlatformEdition>
    {
        private readonly string _value;

        private InstancePlatformEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Platform edition is unspecified.
        /// </summary>
        public static InstancePlatformEdition PlatformEditionUnspecified { get; } = new InstancePlatformEdition("PLATFORM_EDITION_UNSPECIFIED");
        /// <summary>
        /// Trial.
        /// </summary>
        public static InstancePlatformEdition LookerCoreTrial { get; } = new InstancePlatformEdition("LOOKER_CORE_TRIAL");
        /// <summary>
        /// Standard.
        /// </summary>
        public static InstancePlatformEdition LookerCoreStandard { get; } = new InstancePlatformEdition("LOOKER_CORE_STANDARD");
        /// <summary>
        /// Subscription Standard.
        /// </summary>
        public static InstancePlatformEdition LookerCoreStandardAnnual { get; } = new InstancePlatformEdition("LOOKER_CORE_STANDARD_ANNUAL");
        /// <summary>
        /// Subscription Enterprise.
        /// </summary>
        public static InstancePlatformEdition LookerCoreEnterpriseAnnual { get; } = new InstancePlatformEdition("LOOKER_CORE_ENTERPRISE_ANNUAL");
        /// <summary>
        /// Subscription Embed.
        /// </summary>
        public static InstancePlatformEdition LookerCoreEmbedAnnual { get; } = new InstancePlatformEdition("LOOKER_CORE_EMBED_ANNUAL");

        public static bool operator ==(InstancePlatformEdition left, InstancePlatformEdition right) => left.Equals(right);
        public static bool operator !=(InstancePlatformEdition left, InstancePlatformEdition right) => !left.Equals(right);

        public static explicit operator string(InstancePlatformEdition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstancePlatformEdition other && Equals(other);
        public bool Equals(InstancePlatformEdition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Day of the week for this MaintenanceWindow (in UTC).
    /// </summary>
    [EnumType]
    public readonly struct MaintenanceWindowDayOfWeek : IEquatable<MaintenanceWindowDayOfWeek>
    {
        private readonly string _value;

        private MaintenanceWindowDayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The day of the week is unspecified.
        /// </summary>
        public static MaintenanceWindowDayOfWeek DayOfWeekUnspecified { get; } = new MaintenanceWindowDayOfWeek("DAY_OF_WEEK_UNSPECIFIED");
        /// <summary>
        /// Monday
        /// </summary>
        public static MaintenanceWindowDayOfWeek Monday { get; } = new MaintenanceWindowDayOfWeek("MONDAY");
        /// <summary>
        /// Tuesday
        /// </summary>
        public static MaintenanceWindowDayOfWeek Tuesday { get; } = new MaintenanceWindowDayOfWeek("TUESDAY");
        /// <summary>
        /// Wednesday
        /// </summary>
        public static MaintenanceWindowDayOfWeek Wednesday { get; } = new MaintenanceWindowDayOfWeek("WEDNESDAY");
        /// <summary>
        /// Thursday
        /// </summary>
        public static MaintenanceWindowDayOfWeek Thursday { get; } = new MaintenanceWindowDayOfWeek("THURSDAY");
        /// <summary>
        /// Friday
        /// </summary>
        public static MaintenanceWindowDayOfWeek Friday { get; } = new MaintenanceWindowDayOfWeek("FRIDAY");
        /// <summary>
        /// Saturday
        /// </summary>
        public static MaintenanceWindowDayOfWeek Saturday { get; } = new MaintenanceWindowDayOfWeek("SATURDAY");
        /// <summary>
        /// Sunday
        /// </summary>
        public static MaintenanceWindowDayOfWeek Sunday { get; } = new MaintenanceWindowDayOfWeek("SUNDAY");

        public static bool operator ==(MaintenanceWindowDayOfWeek left, MaintenanceWindowDayOfWeek right) => left.Equals(right);
        public static bool operator !=(MaintenanceWindowDayOfWeek left, MaintenanceWindowDayOfWeek right) => !left.Equals(right);

        public static explicit operator string(MaintenanceWindowDayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MaintenanceWindowDayOfWeek other && Equals(other);
        public bool Equals(MaintenanceWindowDayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
