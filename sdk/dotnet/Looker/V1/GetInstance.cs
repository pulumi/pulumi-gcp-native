// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Looker.V1
{
    public static class GetInstance
    {
        /// <summary>
        /// Gets details of a single Instance.
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("google-native:looker/v1:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Instance.
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("google-native:looker/v1:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        /// <summary>
        /// Looker Instance Admin settings.
        /// </summary>
        public readonly Outputs.AdminSettingsResponse AdminSettings;
        /// <summary>
        /// Network name in the consumer project. Format: `projects/{project}/global/networks/{network}`. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.
        /// </summary>
        public readonly string ConsumerNetwork;
        /// <summary>
        /// The time when the Looker instance provisioning was first requested.
        /// </summary>
        public readonly string CreateTime;
        public readonly Outputs.CustomDomainResponse CustomDomain;
        /// <summary>
        /// Maintenance denial period for this instance.
        /// </summary>
        public readonly Outputs.DenyMaintenancePeriodResponse DenyMaintenancePeriod;
        /// <summary>
        /// Public Egress IP (IPv4).
        /// </summary>
        public readonly string EgressPublicIp;
        /// <summary>
        /// Encryption configuration (CMEK). Only set if CMEK has been enabled on the instance.
        /// </summary>
        public readonly Outputs.EncryptionConfigResponse EncryptionConfig;
        /// <summary>
        /// Private Ingress IP (IPv4).
        /// </summary>
        public readonly string IngressPrivateIp;
        /// <summary>
        /// Public Ingress IP (IPv4).
        /// </summary>
        public readonly string IngressPublicIp;
        /// <summary>
        /// Last computed maintenance denial period for this instance.
        /// </summary>
        public readonly Outputs.DenyMaintenancePeriodResponse LastDenyMaintenancePeriod;
        /// <summary>
        /// Looker instance URI which can be used to access the Looker Instance UI.
        /// </summary>
        public readonly string LookerUri;
        /// <summary>
        /// The Looker version that the instance is using.
        /// </summary>
        public readonly string LookerVersion;
        /// <summary>
        /// Maintenance schedule for this instance.
        /// </summary>
        public readonly Outputs.MaintenanceScheduleResponse MaintenanceSchedule;
        /// <summary>
        /// Maintenance window for this instance.
        /// </summary>
        public readonly Outputs.MaintenanceWindowResponse MaintenanceWindow;
        /// <summary>
        /// Format: `projects/{project}/locations/{location}/instances/{instance}`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Looker instance OAuth login settings.
        /// </summary>
        public readonly Outputs.OAuthConfigResponse OauthConfig;
        /// <summary>
        /// Platform edition.
        /// </summary>
        public readonly string PlatformEdition;
        /// <summary>
        /// Whether private IP is enabled on the Looker instance.
        /// </summary>
        public readonly bool PrivateIpEnabled;
        /// <summary>
        /// Whether public IP is enabled on the Looker instance.
        /// </summary>
        public readonly bool PublicIpEnabled;
        /// <summary>
        /// Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.
        /// </summary>
        public readonly string ReservedRange;
        /// <summary>
        /// The state of the instance.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The time when the Looker instance was last updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// User metadata.
        /// </summary>
        public readonly Outputs.UserMetadataResponse UserMetadata;

        [OutputConstructor]
        private GetInstanceResult(
            Outputs.AdminSettingsResponse adminSettings,

            string consumerNetwork,

            string createTime,

            Outputs.CustomDomainResponse customDomain,

            Outputs.DenyMaintenancePeriodResponse denyMaintenancePeriod,

            string egressPublicIp,

            Outputs.EncryptionConfigResponse encryptionConfig,

            string ingressPrivateIp,

            string ingressPublicIp,

            Outputs.DenyMaintenancePeriodResponse lastDenyMaintenancePeriod,

            string lookerUri,

            string lookerVersion,

            Outputs.MaintenanceScheduleResponse maintenanceSchedule,

            Outputs.MaintenanceWindowResponse maintenanceWindow,

            string name,

            Outputs.OAuthConfigResponse oauthConfig,

            string platformEdition,

            bool privateIpEnabled,

            bool publicIpEnabled,

            string reservedRange,

            string state,

            string updateTime,

            Outputs.UserMetadataResponse userMetadata)
        {
            AdminSettings = adminSettings;
            ConsumerNetwork = consumerNetwork;
            CreateTime = createTime;
            CustomDomain = customDomain;
            DenyMaintenancePeriod = denyMaintenancePeriod;
            EgressPublicIp = egressPublicIp;
            EncryptionConfig = encryptionConfig;
            IngressPrivateIp = ingressPrivateIp;
            IngressPublicIp = ingressPublicIp;
            LastDenyMaintenancePeriod = lastDenyMaintenancePeriod;
            LookerUri = lookerUri;
            LookerVersion = lookerVersion;
            MaintenanceSchedule = maintenanceSchedule;
            MaintenanceWindow = maintenanceWindow;
            Name = name;
            OauthConfig = oauthConfig;
            PlatformEdition = platformEdition;
            PrivateIpEnabled = privateIpEnabled;
            PublicIpEnabled = publicIpEnabled;
            ReservedRange = reservedRange;
            State = state;
            UpdateTime = updateTime;
            UserMetadata = userMetadata;
        }
    }
}
