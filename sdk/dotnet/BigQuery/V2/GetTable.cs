// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigQuery.V2
{
    public static class GetTable
    {
        /// <summary>
        /// Gets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table.
        /// </summary>
        public static Task<GetTableResult> InvokeAsync(GetTableArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTableResult>("google-native:bigquery/v2:getTable", args ?? new GetTableArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table.
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTableResult>("google-native:bigquery/v2:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTableArgs : global::Pulumi.InvokeArgs
    {
        [Input("datasetId", required: true)]
        public string DatasetId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("selectedFields")]
        public string? SelectedFields { get; set; }

        [Input("tableId", required: true)]
        public string TableId { get; set; } = null!;

        [Input("view")]
        public string? View { get; set; }

        public GetTableArgs()
        {
        }
        public static new GetTableArgs Empty => new GetTableArgs();
    }

    public sealed class GetTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("selectedFields")]
        public Input<string>? SelectedFields { get; set; }

        [Input("tableId", required: true)]
        public Input<string> TableId { get; set; } = null!;

        [Input("view")]
        public Input<string>? View { get; set; }

        public GetTableInvokeArgs()
        {
        }
        public static new GetTableInvokeArgs Empty => new GetTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetTableResult
    {
        /// <summary>
        /// Optional. Specifies the configuration of a BigLake managed table.
        /// </summary>
        public readonly Outputs.BigLakeConfigurationResponse BiglakeConfiguration;
        /// <summary>
        /// Contains information about the clone. This value is set via the clone operation.
        /// </summary>
        public readonly Outputs.CloneDefinitionResponse CloneDefinition;
        /// <summary>
        /// Clustering specification for the table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
        /// </summary>
        public readonly Outputs.ClusteringResponse Clustering;
        /// <summary>
        /// The time when this table was created, in milliseconds since the epoch.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// Optional. Defines the default collation specification of new STRING fields in the table. During table creation or update, if a STRING field is added to this table without explicit collation specified, then the table inherits the table default collation. A change to this field affects only fields added afterwards, and does not alter the existing fields. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.
        /// </summary>
        public readonly string DefaultCollation;
        /// <summary>
        /// Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.
        /// </summary>
        public readonly string DefaultRoundingMode;
        /// <summary>
        /// Optional. A user-friendly description of this table.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Custom encryption configuration (e.g., Cloud KMS keys).
        /// </summary>
        public readonly Outputs.EncryptionConfigurationResponse EncryptionConfiguration;
        /// <summary>
        /// A hash of this resource.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Optional. The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.
        /// </summary>
        public readonly string ExpirationTime;
        /// <summary>
        /// Optional. Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
        /// </summary>
        public readonly Outputs.ExternalDataConfigurationResponse ExternalDataConfiguration;
        /// <summary>
        /// Optional. A descriptive name for this table.
        /// </summary>
        public readonly string FriendlyName;
        /// <summary>
        /// The type of resource ID.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The time when this table was last modified, in milliseconds since the epoch.
        /// </summary>
        public readonly string LastModifiedTime;
        /// <summary>
        /// The geographic location where the table resides. This value is inherited from the dataset.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Optional. The materialized view definition.
        /// </summary>
        public readonly Outputs.MaterializedViewDefinitionResponse MaterializedView;
        /// <summary>
        /// The materialized view status.
        /// </summary>
        public readonly Outputs.MaterializedViewStatusResponse MaterializedViewStatus;
        /// <summary>
        /// Optional. The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.
        /// </summary>
        public readonly string MaxStaleness;
        /// <summary>
        /// Deprecated.
        /// </summary>
        public readonly Outputs.ModelDefinitionResponse Model;
        /// <summary>
        /// Number of logical bytes that are less than 90 days old.
        /// </summary>
        public readonly string NumActiveLogicalBytes;
        /// <summary>
        /// Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
        /// </summary>
        public readonly string NumActivePhysicalBytes;
        /// <summary>
        /// The size of this table in logical bytes, excluding any data in the streaming buffer.
        /// </summary>
        public readonly string NumBytes;
        /// <summary>
        /// The number of logical bytes in the table that are considered "long-term storage".
        /// </summary>
        public readonly string NumLongTermBytes;
        /// <summary>
        /// Number of logical bytes that are more than 90 days old.
        /// </summary>
        public readonly string NumLongTermLogicalBytes;
        /// <summary>
        /// Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
        /// </summary>
        public readonly string NumLongTermPhysicalBytes;
        /// <summary>
        /// The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
        /// </summary>
        public readonly string NumPartitions;
        /// <summary>
        /// The physical size of this table in bytes. This includes storage used for time travel.
        /// </summary>
        public readonly string NumPhysicalBytes;
        /// <summary>
        /// The number of rows of data in this table, excluding any data in the streaming buffer.
        /// </summary>
        public readonly string NumRows;
        /// <summary>
        /// Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
        /// </summary>
        public readonly string NumTimeTravelPhysicalBytes;
        /// <summary>
        /// Total number of logical bytes in the table or materialized view.
        /// </summary>
        public readonly string NumTotalLogicalBytes;
        /// <summary>
        /// The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
        /// </summary>
        public readonly string NumTotalPhysicalBytes;
        /// <summary>
        /// The partition information for all table formats, including managed partitioned tables, hive partitioned tables, and iceberg partitioned tables.
        /// </summary>
        public readonly Outputs.PartitioningDefinitionResponse PartitionDefinition;
        /// <summary>
        /// If specified, configures range partitioning for this table.
        /// </summary>
        public readonly Outputs.RangePartitioningResponse RangePartitioning;
        /// <summary>
        /// Optional. Output only. Table references of all replicas currently active on the table.
        /// </summary>
        public readonly ImmutableArray<Outputs.TableReferenceResponse> Replicas;
        /// <summary>
        /// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
        /// </summary>
        public readonly bool RequirePartitionFilter;
        /// <summary>
        /// [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of "key": value pairs. The key is the namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. "production".
        /// </summary>
        public readonly ImmutableDictionary<string, string> ResourceTags;
        /// <summary>
        /// Optional. Describes the schema of this table.
        /// </summary>
        public readonly Outputs.TableSchemaResponse Schema;
        /// <summary>
        /// A URL that can be used to access this resource again.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// Contains information about the snapshot. This value is set via snapshot creation.
        /// </summary>
        public readonly Outputs.SnapshotDefinitionResponse SnapshotDefinition;
        /// <summary>
        /// Contains information regarding this table's streaming buffer, if one is present. This field will be absent if the table is not being streamed to or if there is no data in the streaming buffer.
        /// </summary>
        public readonly Outputs.StreamingbufferResponse StreamingBuffer;
        /// <summary>
        /// Optional. Tables Primary Key and Foreign Key information
        /// </summary>
        public readonly Outputs.TableConstraintsResponse TableConstraints;
        /// <summary>
        /// Reference describing the ID of this table.
        /// </summary>
        public readonly Outputs.TableReferenceResponse TableReference;
        /// <summary>
        /// Optional. Table replication info for table created `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
        /// </summary>
        public readonly Outputs.TableReplicationInfoResponse TableReplicationInfo;
        /// <summary>
        /// If specified, configures time-based partitioning for this table.
        /// </summary>
        public readonly Outputs.TimePartitioningResponse TimePartitioning;
        /// <summary>
        /// Describes the table type. The following values are supported: * `TABLE`: A normal BigQuery table. * `VIEW`: A virtual table defined by a SQL query. * `EXTERNAL`: A table that references data stored in an external storage system, such as Google Cloud Storage. * `MATERIALIZED_VIEW`: A precomputed view defined by a SQL query. * `SNAPSHOT`: An immutable BigQuery table that preserves the contents of a base table at a particular time. See additional information on [table snapshots](/bigquery/docs/table-snapshots-intro). The default value is `TABLE`.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Optional. The view definition.
        /// </summary>
        public readonly Outputs.ViewDefinitionResponse View;

        [OutputConstructor]
        private GetTableResult(
            Outputs.BigLakeConfigurationResponse biglakeConfiguration,

            Outputs.CloneDefinitionResponse cloneDefinition,

            Outputs.ClusteringResponse clustering,

            string creationTime,

            string defaultCollation,

            string defaultRoundingMode,

            string description,

            Outputs.EncryptionConfigurationResponse encryptionConfiguration,

            string etag,

            string expirationTime,

            Outputs.ExternalDataConfigurationResponse externalDataConfiguration,

            string friendlyName,

            string kind,

            ImmutableDictionary<string, string> labels,

            string lastModifiedTime,

            string location,

            Outputs.MaterializedViewDefinitionResponse materializedView,

            Outputs.MaterializedViewStatusResponse materializedViewStatus,

            string maxStaleness,

            Outputs.ModelDefinitionResponse model,

            string numActiveLogicalBytes,

            string numActivePhysicalBytes,

            string numBytes,

            string numLongTermBytes,

            string numLongTermLogicalBytes,

            string numLongTermPhysicalBytes,

            string numPartitions,

            string numPhysicalBytes,

            string numRows,

            string numTimeTravelPhysicalBytes,

            string numTotalLogicalBytes,

            string numTotalPhysicalBytes,

            Outputs.PartitioningDefinitionResponse partitionDefinition,

            Outputs.RangePartitioningResponse rangePartitioning,

            ImmutableArray<Outputs.TableReferenceResponse> replicas,

            bool requirePartitionFilter,

            ImmutableDictionary<string, string> resourceTags,

            Outputs.TableSchemaResponse schema,

            string selfLink,

            Outputs.SnapshotDefinitionResponse snapshotDefinition,

            Outputs.StreamingbufferResponse streamingBuffer,

            Outputs.TableConstraintsResponse tableConstraints,

            Outputs.TableReferenceResponse tableReference,

            Outputs.TableReplicationInfoResponse tableReplicationInfo,

            Outputs.TimePartitioningResponse timePartitioning,

            string type,

            Outputs.ViewDefinitionResponse view)
        {
            BiglakeConfiguration = biglakeConfiguration;
            CloneDefinition = cloneDefinition;
            Clustering = clustering;
            CreationTime = creationTime;
            DefaultCollation = defaultCollation;
            DefaultRoundingMode = defaultRoundingMode;
            Description = description;
            EncryptionConfiguration = encryptionConfiguration;
            Etag = etag;
            ExpirationTime = expirationTime;
            ExternalDataConfiguration = externalDataConfiguration;
            FriendlyName = friendlyName;
            Kind = kind;
            Labels = labels;
            LastModifiedTime = lastModifiedTime;
            Location = location;
            MaterializedView = materializedView;
            MaterializedViewStatus = materializedViewStatus;
            MaxStaleness = maxStaleness;
            Model = model;
            NumActiveLogicalBytes = numActiveLogicalBytes;
            NumActivePhysicalBytes = numActivePhysicalBytes;
            NumBytes = numBytes;
            NumLongTermBytes = numLongTermBytes;
            NumLongTermLogicalBytes = numLongTermLogicalBytes;
            NumLongTermPhysicalBytes = numLongTermPhysicalBytes;
            NumPartitions = numPartitions;
            NumPhysicalBytes = numPhysicalBytes;
            NumRows = numRows;
            NumTimeTravelPhysicalBytes = numTimeTravelPhysicalBytes;
            NumTotalLogicalBytes = numTotalLogicalBytes;
            NumTotalPhysicalBytes = numTotalPhysicalBytes;
            PartitionDefinition = partitionDefinition;
            RangePartitioning = rangePartitioning;
            Replicas = replicas;
            RequirePartitionFilter = requirePartitionFilter;
            ResourceTags = resourceTags;
            Schema = schema;
            SelfLink = selfLink;
            SnapshotDefinition = snapshotDefinition;
            StreamingBuffer = streamingBuffer;
            TableConstraints = tableConstraints;
            TableReference = tableReference;
            TableReplicationInfo = tableReplicationInfo;
            TimePartitioning = timePartitioning;
            Type = type;
            View = view;
        }
    }
}
