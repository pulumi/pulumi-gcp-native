// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigQuery.V2
{
    /// <summary>
    /// Creates a new, empty table in the dataset.
    /// Auto-naming is currently not supported for this resource.
    /// </summary>
    [GoogleNativeResourceType("google-native:bigquery/v2:Table")]
    public partial class Table : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [Optional] Specifies the configuration of a BigLake managed table.
        /// </summary>
        [Output("biglakeConfiguration")]
        public Output<Outputs.BigLakeConfigurationResponse> BiglakeConfiguration { get; private set; } = null!;

        /// <summary>
        /// Clone definition.
        /// </summary>
        [Output("cloneDefinition")]
        public Output<Outputs.CloneDefinitionResponse> CloneDefinition { get; private set; } = null!;

        /// <summary>
        /// [Beta] Clustering specification for the table. Must be specified with partitioning, data in the table will be first partitioned and subsequently clustered.
        /// </summary>
        [Output("clustering")]
        public Output<Outputs.ClusteringResponse> Clustering { get; private set; } = null!;

        /// <summary>
        /// The time when this table was created, in milliseconds since the epoch.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        [Output("datasetId")]
        public Output<string> DatasetId { get; private set; } = null!;

        /// <summary>
        /// The default collation of the table.
        /// </summary>
        [Output("defaultCollation")]
        public Output<string> DefaultCollation { get; private set; } = null!;

        /// <summary>
        /// The default rounding mode of the table.
        /// </summary>
        [Output("defaultRoundingMode")]
        public Output<string> DefaultRoundingMode { get; private set; } = null!;

        /// <summary>
        /// [Optional] A user-friendly description of this table.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Custom encryption configuration (e.g., Cloud KMS keys).
        /// </summary>
        [Output("encryptionConfiguration")]
        public Output<Outputs.EncryptionConfigurationResponse> EncryptionConfiguration { get; private set; } = null!;

        /// <summary>
        /// A hash of the table metadata. Used to ensure there were no concurrent modifications to the resource when attempting an update. Not guaranteed to change when the table contents or the fields numRows, numBytes, numLongTermBytes or lastModifiedTime change.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// [Optional] The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.
        /// </summary>
        [Output("expirationTime")]
        public Output<string> ExpirationTime { get; private set; } = null!;

        /// <summary>
        /// [Optional] Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
        /// </summary>
        [Output("externalDataConfiguration")]
        public Output<Outputs.ExternalDataConfigurationResponse> ExternalDataConfiguration { get; private set; } = null!;

        /// <summary>
        /// [Optional] A descriptive name for this table.
        /// </summary>
        [Output("friendlyName")]
        public Output<string> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The time when this table was last modified, in milliseconds since the epoch.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// The geographic location where the table resides. This value is inherited from the dataset.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// [Optional] Materialized view definition.
        /// </summary>
        [Output("materializedView")]
        public Output<Outputs.MaterializedViewDefinitionResponse> MaterializedView { get; private set; } = null!;

        /// <summary>
        /// [Optional] Max staleness of data that could be returned when table or materialized view is queried (formatted as Google SQL Interval type).
        /// </summary>
        [Output("maxStaleness")]
        public Output<string> MaxStaleness { get; private set; } = null!;

        /// <summary>
        /// [Output-only, Beta] Present iff this table represents a ML model. Describes the training information for the model, and it is required to run 'PREDICT' queries.
        /// </summary>
        [Output("model")]
        public Output<Outputs.ModelDefinitionResponse> Model { get; private set; } = null!;

        /// <summary>
        /// Number of logical bytes that are less than 90 days old.
        /// </summary>
        [Output("numActiveLogicalBytes")]
        public Output<string> NumActiveLogicalBytes { get; private set; } = null!;

        /// <summary>
        /// Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
        /// </summary>
        [Output("numActivePhysicalBytes")]
        public Output<string> NumActivePhysicalBytes { get; private set; } = null!;

        /// <summary>
        /// The size of this table in bytes, excluding any data in the streaming buffer.
        /// </summary>
        [Output("numBytes")]
        public Output<string> NumBytes { get; private set; } = null!;

        /// <summary>
        /// The number of bytes in the table that are considered "long-term storage".
        /// </summary>
        [Output("numLongTermBytes")]
        public Output<string> NumLongTermBytes { get; private set; } = null!;

        /// <summary>
        /// Number of logical bytes that are more than 90 days old.
        /// </summary>
        [Output("numLongTermLogicalBytes")]
        public Output<string> NumLongTermLogicalBytes { get; private set; } = null!;

        /// <summary>
        /// Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
        /// </summary>
        [Output("numLongTermPhysicalBytes")]
        public Output<string> NumLongTermPhysicalBytes { get; private set; } = null!;

        /// <summary>
        /// The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
        /// </summary>
        [Output("numPartitions")]
        public Output<string> NumPartitions { get; private set; } = null!;

        /// <summary>
        /// [TrustedTester] The physical size of this table in bytes, excluding any data in the streaming buffer. This includes compression and storage used for time travel.
        /// </summary>
        [Output("numPhysicalBytes")]
        public Output<string> NumPhysicalBytes { get; private set; } = null!;

        /// <summary>
        /// The number of rows of data in this table, excluding any data in the streaming buffer.
        /// </summary>
        [Output("numRows")]
        public Output<string> NumRows { get; private set; } = null!;

        /// <summary>
        /// Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
        /// </summary>
        [Output("numTimeTravelPhysicalBytes")]
        public Output<string> NumTimeTravelPhysicalBytes { get; private set; } = null!;

        /// <summary>
        /// Total number of logical bytes in the table or materialized view.
        /// </summary>
        [Output("numTotalLogicalBytes")]
        public Output<string> NumTotalLogicalBytes { get; private set; } = null!;

        /// <summary>
        /// The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
        /// </summary>
        [Output("numTotalPhysicalBytes")]
        public Output<string> NumTotalPhysicalBytes { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
        /// </summary>
        [Output("rangePartitioning")]
        public Output<Outputs.RangePartitioningResponse> RangePartitioning { get; private set; } = null!;

        /// <summary>
        /// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
        /// </summary>
        [Output("requirePartitionFilter")]
        public Output<bool> RequirePartitionFilter { get; private set; } = null!;

        /// <summary>
        /// [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of "key": value pairs. The key is the namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. "production".
        /// </summary>
        [Output("resourceTags")]
        public Output<ImmutableDictionary<string, string>> ResourceTags { get; private set; } = null!;

        /// <summary>
        /// [Optional] Describes the schema of this table.
        /// </summary>
        [Output("schema")]
        public Output<Outputs.TableSchemaResponse> Schema { get; private set; } = null!;

        /// <summary>
        /// A URL that can be used to access this resource again.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Snapshot definition.
        /// </summary>
        [Output("snapshotDefinition")]
        public Output<Outputs.SnapshotDefinitionResponse> SnapshotDefinition { get; private set; } = null!;

        /// <summary>
        /// Contains information regarding this table's streaming buffer, if one is present. This field will be absent if the table is not being streamed to or if there is no data in the streaming buffer.
        /// </summary>
        [Output("streamingBuffer")]
        public Output<Outputs.StreamingbufferResponse> StreamingBuffer { get; private set; } = null!;

        /// <summary>
        /// [Optional] The table constraints on the table.
        /// </summary>
        [Output("tableConstraints")]
        public Output<Outputs.TableConstraintsResponse> TableConstraints { get; private set; } = null!;

        /// <summary>
        /// [Required] Reference describing the ID of this table.
        /// </summary>
        [Output("tableReference")]
        public Output<Outputs.TableReferenceResponse> TableReference { get; private set; } = null!;

        /// <summary>
        /// Time-based partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
        /// </summary>
        [Output("timePartitioning")]
        public Output<Outputs.TimePartitioningResponse> TimePartitioning { get; private set; } = null!;

        /// <summary>
        /// Describes the table type. The following values are supported: TABLE: A normal BigQuery table. VIEW: A virtual table defined by a SQL query. SNAPSHOT: An immutable, read-only table that is a copy of another table. [TrustedTester] MATERIALIZED_VIEW: SQL query whose result is persisted. EXTERNAL: A table that references data stored in an external storage system, such as Google Cloud Storage. The default value is TABLE.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// [Optional] The view definition.
        /// </summary>
        [Output("view")]
        public Output<Outputs.ViewDefinitionResponse> View { get; private set; } = null!;


        /// <summary>
        /// Create a Table resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Table(string name, TableArgs args, CustomResourceOptions? options = null)
            : base("google-native:bigquery/v2:Table", name, args ?? new TableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Table(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:bigquery/v2:Table", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "datasetId",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Table resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Table Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Table(name, id, options);
        }
    }

    public sealed class TableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// [Optional] Specifies the configuration of a BigLake managed table.
        /// </summary>
        [Input("biglakeConfiguration")]
        public Input<Inputs.BigLakeConfigurationArgs>? BiglakeConfiguration { get; set; }

        /// <summary>
        /// [Beta] Clustering specification for the table. Must be specified with partitioning, data in the table will be first partitioned and subsequently clustered.
        /// </summary>
        [Input("clustering")]
        public Input<Inputs.ClusteringArgs>? Clustering { get; set; }

        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        /// <summary>
        /// [Optional] A user-friendly description of this table.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Custom encryption configuration (e.g., Cloud KMS keys).
        /// </summary>
        [Input("encryptionConfiguration")]
        public Input<Inputs.EncryptionConfigurationArgs>? EncryptionConfiguration { get; set; }

        /// <summary>
        /// [Optional] The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.
        /// </summary>
        [Input("expirationTime")]
        public Input<string>? ExpirationTime { get; set; }

        /// <summary>
        /// [Optional] Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
        /// </summary>
        [Input("externalDataConfiguration")]
        public Input<Inputs.ExternalDataConfigurationArgs>? ExternalDataConfiguration { get; set; }

        /// <summary>
        /// [Optional] A descriptive name for this table.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// [Optional] Materialized view definition.
        /// </summary>
        [Input("materializedView")]
        public Input<Inputs.MaterializedViewDefinitionArgs>? MaterializedView { get; set; }

        /// <summary>
        /// [Optional] Max staleness of data that could be returned when table or materialized view is queried (formatted as Google SQL Interval type).
        /// </summary>
        [Input("maxStaleness")]
        public Input<string>? MaxStaleness { get; set; }

        /// <summary>
        /// [Output-only, Beta] Present iff this table represents a ML model. Describes the training information for the model, and it is required to run 'PREDICT' queries.
        /// </summary>
        [Input("model")]
        public Input<Inputs.ModelDefinitionArgs>? Model { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
        /// </summary>
        [Input("rangePartitioning")]
        public Input<Inputs.RangePartitioningArgs>? RangePartitioning { get; set; }

        /// <summary>
        /// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
        /// </summary>
        [Input("requirePartitionFilter")]
        public Input<bool>? RequirePartitionFilter { get; set; }

        [Input("resourceTags")]
        private InputMap<string>? _resourceTags;

        /// <summary>
        /// [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of "key": value pairs. The key is the namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. "production".
        /// </summary>
        public InputMap<string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputMap<string>());
            set => _resourceTags = value;
        }

        /// <summary>
        /// [Optional] Describes the schema of this table.
        /// </summary>
        [Input("schema")]
        public Input<Inputs.TableSchemaArgs>? Schema { get; set; }

        /// <summary>
        /// [Optional] The table constraints on the table.
        /// </summary>
        [Input("tableConstraints")]
        public Input<Inputs.TableConstraintsArgs>? TableConstraints { get; set; }

        /// <summary>
        /// [Required] Reference describing the ID of this table.
        /// </summary>
        [Input("tableReference")]
        public Input<Inputs.TableReferenceArgs>? TableReference { get; set; }

        /// <summary>
        /// Time-based partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
        /// </summary>
        [Input("timePartitioning")]
        public Input<Inputs.TimePartitioningArgs>? TimePartitioning { get; set; }

        /// <summary>
        /// [Optional] The view definition.
        /// </summary>
        [Input("view")]
        public Input<Inputs.ViewDefinitionArgs>? View { get; set; }

        public TableArgs()
        {
        }
        public static new TableArgs Empty => new TableArgs();
    }
}
