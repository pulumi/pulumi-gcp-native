// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigQuery.V2.Outputs
{

    [OutputType]
    public sealed class DatasetAccessItemResponse
    {
        /// <summary>
        /// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
        /// </summary>
        public readonly Outputs.DatasetAccessEntryResponse Dataset;
        /// <summary>
        /// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
        /// </summary>
        public readonly string GroupByEmail;
        /// <summary>
        /// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
        /// </summary>
        public readonly string IamMember;
        /// <summary>
        /// [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
        /// </summary>
        public readonly Outputs.RoutineReferenceResponse Routine;
        /// <summary>
        /// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
        /// </summary>
        public readonly string SpecialGroup;
        /// <summary>
        /// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
        /// </summary>
        public readonly string UserByEmail;
        /// <summary>
        /// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
        /// </summary>
        public readonly Outputs.TableReferenceResponse View;

        [OutputConstructor]
        private DatasetAccessItemResponse(
            Outputs.DatasetAccessEntryResponse dataset,

            string domain,

            string groupByEmail,

            string iamMember,

            string role,

            Outputs.RoutineReferenceResponse routine,

            string specialGroup,

            string userByEmail,

            Outputs.TableReferenceResponse view)
        {
            Dataset = dataset;
            Domain = domain;
            GroupByEmail = groupByEmail;
            IamMember = iamMember;
            Role = role;
            Routine = routine;
            SpecialGroup = specialGroup;
            UserByEmail = userByEmail;
            View = view;
        }
    }
}
