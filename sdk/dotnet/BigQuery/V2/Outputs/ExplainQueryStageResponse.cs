// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigQuery.V2.Outputs
{

    [OutputType]
    public sealed class ExplainQueryStageResponse
    {
        /// <summary>
        /// Number of parallel input segments completed.
        /// </summary>
        public readonly string CompletedParallelInputs;
        /// <summary>
        /// Milliseconds the average shard spent on CPU-bound tasks.
        /// </summary>
        public readonly string ComputeMsAvg;
        /// <summary>
        /// Milliseconds the slowest shard spent on CPU-bound tasks.
        /// </summary>
        public readonly string ComputeMsMax;
        /// <summary>
        /// Relative amount of time the average shard spent on CPU-bound tasks.
        /// </summary>
        public readonly double ComputeRatioAvg;
        /// <summary>
        /// Relative amount of time the slowest shard spent on CPU-bound tasks.
        /// </summary>
        public readonly double ComputeRatioMax;
        /// <summary>
        /// Stage end time represented as milliseconds since epoch.
        /// </summary>
        public readonly string EndMs;
        /// <summary>
        /// IDs for stages that are inputs to this stage.
        /// </summary>
        public readonly ImmutableArray<string> InputStages;
        /// <summary>
        /// Human-readable name for stage.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Number of parallel input segments to be processed.
        /// </summary>
        public readonly string ParallelInputs;
        /// <summary>
        /// Milliseconds the average shard spent reading input.
        /// </summary>
        public readonly string ReadMsAvg;
        /// <summary>
        /// Milliseconds the slowest shard spent reading input.
        /// </summary>
        public readonly string ReadMsMax;
        /// <summary>
        /// Relative amount of time the average shard spent reading input.
        /// </summary>
        public readonly double ReadRatioAvg;
        /// <summary>
        /// Relative amount of time the slowest shard spent reading input.
        /// </summary>
        public readonly double ReadRatioMax;
        /// <summary>
        /// Number of records read into the stage.
        /// </summary>
        public readonly string RecordsRead;
        /// <summary>
        /// Number of records written by the stage.
        /// </summary>
        public readonly string RecordsWritten;
        /// <summary>
        /// Total number of bytes written to shuffle.
        /// </summary>
        public readonly string ShuffleOutputBytes;
        /// <summary>
        /// Total number of bytes written to shuffle and spilled to disk.
        /// </summary>
        public readonly string ShuffleOutputBytesSpilled;
        /// <summary>
        /// Slot-milliseconds used by the stage.
        /// </summary>
        public readonly string SlotMs;
        /// <summary>
        /// Stage start time represented as milliseconds since epoch.
        /// </summary>
        public readonly string StartMs;
        /// <summary>
        /// Current status for the stage.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// List of operations within the stage in dependency order (approximately chronological).
        /// </summary>
        public readonly ImmutableArray<Outputs.ExplainQueryStepResponse> Steps;
        /// <summary>
        /// Milliseconds the average shard spent waiting to be scheduled.
        /// </summary>
        public readonly string WaitMsAvg;
        /// <summary>
        /// Milliseconds the slowest shard spent waiting to be scheduled.
        /// </summary>
        public readonly string WaitMsMax;
        /// <summary>
        /// Relative amount of time the average shard spent waiting to be scheduled.
        /// </summary>
        public readonly double WaitRatioAvg;
        /// <summary>
        /// Relative amount of time the slowest shard spent waiting to be scheduled.
        /// </summary>
        public readonly double WaitRatioMax;
        /// <summary>
        /// Milliseconds the average shard spent on writing output.
        /// </summary>
        public readonly string WriteMsAvg;
        /// <summary>
        /// Milliseconds the slowest shard spent on writing output.
        /// </summary>
        public readonly string WriteMsMax;
        /// <summary>
        /// Relative amount of time the average shard spent on writing output.
        /// </summary>
        public readonly double WriteRatioAvg;
        /// <summary>
        /// Relative amount of time the slowest shard spent on writing output.
        /// </summary>
        public readonly double WriteRatioMax;

        [OutputConstructor]
        private ExplainQueryStageResponse(
            string completedParallelInputs,

            string computeMsAvg,

            string computeMsMax,

            double computeRatioAvg,

            double computeRatioMax,

            string endMs,

            ImmutableArray<string> inputStages,

            string name,

            string parallelInputs,

            string readMsAvg,

            string readMsMax,

            double readRatioAvg,

            double readRatioMax,

            string recordsRead,

            string recordsWritten,

            string shuffleOutputBytes,

            string shuffleOutputBytesSpilled,

            string slotMs,

            string startMs,

            string status,

            ImmutableArray<Outputs.ExplainQueryStepResponse> steps,

            string waitMsAvg,

            string waitMsMax,

            double waitRatioAvg,

            double waitRatioMax,

            string writeMsAvg,

            string writeMsMax,

            double writeRatioAvg,

            double writeRatioMax)
        {
            CompletedParallelInputs = completedParallelInputs;
            ComputeMsAvg = computeMsAvg;
            ComputeMsMax = computeMsMax;
            ComputeRatioAvg = computeRatioAvg;
            ComputeRatioMax = computeRatioMax;
            EndMs = endMs;
            InputStages = inputStages;
            Name = name;
            ParallelInputs = parallelInputs;
            ReadMsAvg = readMsAvg;
            ReadMsMax = readMsMax;
            ReadRatioAvg = readRatioAvg;
            ReadRatioMax = readRatioMax;
            RecordsRead = recordsRead;
            RecordsWritten = recordsWritten;
            ShuffleOutputBytes = shuffleOutputBytes;
            ShuffleOutputBytesSpilled = shuffleOutputBytesSpilled;
            SlotMs = slotMs;
            StartMs = startMs;
            Status = status;
            Steps = steps;
            WaitMsAvg = waitMsAvg;
            WaitMsMax = waitMsMax;
            WaitRatioAvg = waitRatioAvg;
            WaitRatioMax = waitRatioMax;
            WriteMsAvg = writeMsAvg;
            WriteMsMax = writeMsMax;
            WriteRatioAvg = writeRatioAvg;
            WriteRatioMax = writeRatioMax;
        }
    }
}
