// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigQuery.V2.Outputs
{

    /// <summary>
    /// Represents the location of the statement/expression being evaluated. Line and column numbers are defined as follows: - Line and column numbers start with one. That is, line 1 column 1 denotes the start of the script. - When inside a stored procedure, all line/column numbers are relative to the procedure body, not the script in which the procedure was defined. - Start/end positions exclude leading/trailing comments and whitespace. The end position always ends with a ";", when present. - Multi-byte Unicode characters are treated as just one column. - If the original script (or procedure definition) contains TAB characters, a tab "snaps" the indentation forward to the nearest multiple of 8 characters, plus 1. For example, a TAB on column 1, 2, 3, 4, 5, 6 , or 8 will advance the next character to column 9. A TAB on column 9, 10, 11, 12, 13, 14, 15, or 16 will advance the next character to column 17.
    /// </summary>
    [OutputType]
    public sealed class ScriptStackFrameResponse
    {
        /// <summary>
        /// One-based end column.
        /// </summary>
        public readonly int EndColumn;
        /// <summary>
        /// One-based end line.
        /// </summary>
        public readonly int EndLine;
        /// <summary>
        /// Name of the active procedure, empty if in a top-level script.
        /// </summary>
        public readonly string ProcedureId;
        /// <summary>
        /// One-based start column.
        /// </summary>
        public readonly int StartColumn;
        /// <summary>
        /// One-based start line.
        /// </summary>
        public readonly int StartLine;
        /// <summary>
        /// Text of the current statement/expression.
        /// </summary>
        public readonly string Text;

        [OutputConstructor]
        private ScriptStackFrameResponse(
            int endColumn,

            int endLine,

            string procedureId,

            int startColumn,

            int startLine,

            string text)
        {
            EndColumn = endColumn;
            EndLine = endLine;
            ProcedureId = procedureId;
            StartColumn = startColumn;
            StartLine = startLine;
            Text = text;
        }
    }
}
