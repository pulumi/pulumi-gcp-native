// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigQuery.V2.Outputs
{

    /// <summary>
    /// Options used in model training.
    /// </summary>
    [OutputType]
    public sealed class TrainingOptionsResponse
    {
        /// <summary>
        /// Activation function of the neural nets.
        /// </summary>
        public readonly string ActivationFn;
        /// <summary>
        /// If true, detect step changes and make data adjustment in the input time series.
        /// </summary>
        public readonly bool AdjustStepChanges;
        /// <summary>
        /// Whether to use approximate feature contribution method in XGBoost model explanation for global explain.
        /// </summary>
        public readonly bool ApproxGlobalFeatureContrib;
        /// <summary>
        /// Whether to enable auto ARIMA or not.
        /// </summary>
        public readonly bool AutoArima;
        /// <summary>
        /// The max value of the sum of non-seasonal p and q.
        /// </summary>
        public readonly string AutoArimaMaxOrder;
        /// <summary>
        /// The min value of the sum of non-seasonal p and q.
        /// </summary>
        public readonly string AutoArimaMinOrder;
        /// <summary>
        /// Whether to calculate class weights automatically based on the popularity of each label.
        /// </summary>
        public readonly bool AutoClassWeights;
        /// <summary>
        /// Batch size for dnn models.
        /// </summary>
        public readonly string BatchSize;
        /// <summary>
        /// Booster type for boosted tree models.
        /// </summary>
        public readonly string BoosterType;
        /// <summary>
        /// Budget in hours for AutoML training.
        /// </summary>
        public readonly double BudgetHours;
        /// <summary>
        /// Whether or not p-value test should be computed for this model. Only available for linear and logistic regression models.
        /// </summary>
        public readonly bool CalculatePValues;
        /// <summary>
        /// Categorical feature encoding method.
        /// </summary>
        public readonly string CategoryEncodingMethod;
        /// <summary>
        /// If true, clean spikes and dips in the input time series.
        /// </summary>
        public readonly bool CleanSpikesAndDips;
        /// <summary>
        /// Enums for color space, used for processing images in Object Table. See more details at https://www.tensorflow.org/io/tutorials/colorspace.
        /// </summary>
        public readonly string ColorSpace;
        /// <summary>
        /// Subsample ratio of columns for each level for boosted tree models.
        /// </summary>
        public readonly double ColsampleBylevel;
        /// <summary>
        /// Subsample ratio of columns for each node(split) for boosted tree models.
        /// </summary>
        public readonly double ColsampleBynode;
        /// <summary>
        /// Subsample ratio of columns when constructing each tree for boosted tree models.
        /// </summary>
        public readonly double ColsampleBytree;
        /// <summary>
        /// Type of normalization algorithm for boosted tree models using dart booster.
        /// </summary>
        public readonly string DartNormalizeType;
        /// <summary>
        /// The data frequency of a time series.
        /// </summary>
        public readonly string DataFrequency;
        /// <summary>
        /// The column to split data with. This column won't be used as a feature. 1. When data_split_method is CUSTOM, the corresponding column should be boolean. The rows with true value tag are eval data, and the false are training data. 2. When data_split_method is SEQ, the first DATA_SPLIT_EVAL_FRACTION rows (from smallest to largest) in the corresponding column are used as training data, and the rest are eval data. It respects the order in Orderable data types: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties
        /// </summary>
        public readonly string DataSplitColumn;
        /// <summary>
        /// The fraction of evaluation data over the whole input data. The rest of data will be used as training data. The format should be double. Accurate to two decimal places. Default value is 0.2.
        /// </summary>
        public readonly double DataSplitEvalFraction;
        /// <summary>
        /// The data split type for training and evaluation, e.g. RANDOM.
        /// </summary>
        public readonly string DataSplitMethod;
        /// <summary>
        /// If true, perform decompose time series and save the results.
        /// </summary>
        public readonly bool DecomposeTimeSeries;
        /// <summary>
        /// Distance type for clustering models.
        /// </summary>
        public readonly string DistanceType;
        /// <summary>
        /// Dropout probability for dnn models.
        /// </summary>
        public readonly double Dropout;
        /// <summary>
        /// Whether to stop early when the loss doesn't improve significantly any more (compared to min_relative_progress). Used only for iterative training algorithms.
        /// </summary>
        public readonly bool EarlyStop;
        /// <summary>
        /// If true, enable global explanation during training.
        /// </summary>
        public readonly bool EnableGlobalExplain;
        /// <summary>
        /// Feedback type that specifies which algorithm to run for matrix factorization.
        /// </summary>
        public readonly string FeedbackType;
        /// <summary>
        /// Whether the model should include intercept during model training.
        /// </summary>
        public readonly bool FitIntercept;
        /// <summary>
        /// Hidden units for dnn models.
        /// </summary>
        public readonly ImmutableArray<string> HiddenUnits;
        /// <summary>
        /// The geographical region based on which the holidays are considered in time series modeling. If a valid value is specified, then holiday effects modeling is enabled.
        /// </summary>
        public readonly string HolidayRegion;
        /// <summary>
        /// A list of geographical regions that are used for time series modeling.
        /// </summary>
        public readonly ImmutableArray<string> HolidayRegions;
        /// <summary>
        /// The number of periods ahead that need to be forecasted.
        /// </summary>
        public readonly string Horizon;
        /// <summary>
        /// The target evaluation metrics to optimize the hyperparameters for.
        /// </summary>
        public readonly ImmutableArray<string> HparamTuningObjectives;
        /// <summary>
        /// Include drift when fitting an ARIMA model.
        /// </summary>
        public readonly bool IncludeDrift;
        /// <summary>
        /// Specifies the initial learning rate for the line search learn rate strategy.
        /// </summary>
        public readonly double InitialLearnRate;
        /// <summary>
        /// Name of input label columns in training data.
        /// </summary>
        public readonly ImmutableArray<string> InputLabelColumns;
        /// <summary>
        /// Name of the instance weight column for training data. This column isn't be used as a feature.
        /// </summary>
        public readonly string InstanceWeightColumn;
        /// <summary>
        /// Number of integral steps for the integrated gradients explain method.
        /// </summary>
        public readonly string IntegratedGradientsNumSteps;
        /// <summary>
        /// Item column specified for matrix factorization models.
        /// </summary>
        public readonly string ItemColumn;
        /// <summary>
        /// The column used to provide the initial centroids for kmeans algorithm when kmeans_initialization_method is CUSTOM.
        /// </summary>
        public readonly string KmeansInitializationColumn;
        /// <summary>
        /// The method used to initialize the centroids for kmeans algorithm.
        /// </summary>
        public readonly string KmeansInitializationMethod;
        /// <summary>
        /// L1 regularization coefficient to activations.
        /// </summary>
        public readonly double L1RegActivation;
        /// <summary>
        /// L1 regularization coefficient.
        /// </summary>
        public readonly double L1Regularization;
        /// <summary>
        /// L2 regularization coefficient.
        /// </summary>
        public readonly double L2Regularization;
        /// <summary>
        /// Weights associated with each label class, for rebalancing the training data. Only applicable for classification models.
        /// </summary>
        public readonly ImmutableDictionary<string, string> LabelClassWeights;
        /// <summary>
        /// Learning rate in training. Used only for iterative training algorithms.
        /// </summary>
        public readonly double LearnRate;
        /// <summary>
        /// The strategy to determine learn rate for the current iteration.
        /// </summary>
        public readonly string LearnRateStrategy;
        /// <summary>
        /// Type of loss function used during training run.
        /// </summary>
        public readonly string LossType;
        /// <summary>
        /// The maximum number of iterations in training. Used only for iterative training algorithms.
        /// </summary>
        public readonly string MaxIterations;
        /// <summary>
        /// Maximum number of trials to run in parallel.
        /// </summary>
        public readonly string MaxParallelTrials;
        /// <summary>
        /// The maximum number of time points in a time series that can be used in modeling the trend component of the time series. Don't use this option with the `timeSeriesLengthFraction` or `minTimeSeriesLength` options.
        /// </summary>
        public readonly string MaxTimeSeriesLength;
        /// <summary>
        /// Maximum depth of a tree for boosted tree models.
        /// </summary>
        public readonly string MaxTreeDepth;
        /// <summary>
        /// When early_stop is true, stops training when accuracy improvement is less than 'min_relative_progress'. Used only for iterative training algorithms.
        /// </summary>
        public readonly double MinRelativeProgress;
        /// <summary>
        /// Minimum split loss for boosted tree models.
        /// </summary>
        public readonly double MinSplitLoss;
        /// <summary>
        /// The minimum number of time points in a time series that are used in modeling the trend component of the time series. If you use this option you must also set the `timeSeriesLengthFraction` option. This training option ensures that enough time points are available when you use `timeSeriesLengthFraction` in trend modeling. This is particularly important when forecasting multiple time series in a single query using `timeSeriesIdColumn`. If the total number of time points is less than the `minTimeSeriesLength` value, then the query uses all available time points.
        /// </summary>
        public readonly string MinTimeSeriesLength;
        /// <summary>
        /// Minimum sum of instance weight needed in a child for boosted tree models.
        /// </summary>
        public readonly string MinTreeChildWeight;
        /// <summary>
        /// The model registry.
        /// </summary>
        public readonly string ModelRegistry;
        /// <summary>
        /// Google Cloud Storage URI from which the model was imported. Only applicable for imported models.
        /// </summary>
        public readonly string ModelUri;
        /// <summary>
        /// A specification of the non-seasonal part of the ARIMA model: the three components (p, d, q) are the AR order, the degree of differencing, and the MA order.
        /// </summary>
        public readonly Outputs.ArimaOrderResponse NonSeasonalOrder;
        /// <summary>
        /// Number of clusters for clustering models.
        /// </summary>
        public readonly string NumClusters;
        /// <summary>
        /// Num factors specified for matrix factorization models.
        /// </summary>
        public readonly string NumFactors;
        /// <summary>
        /// Number of parallel trees constructed during each iteration for boosted tree models.
        /// </summary>
        public readonly string NumParallelTree;
        /// <summary>
        /// Number of principal components to keep in the PCA model. Must be &lt;= the number of features.
        /// </summary>
        public readonly string NumPrincipalComponents;
        /// <summary>
        /// Number of trials to run this hyperparameter tuning job.
        /// </summary>
        public readonly string NumTrials;
        /// <summary>
        /// Optimization strategy for training linear regression models.
        /// </summary>
        public readonly string OptimizationStrategy;
        /// <summary>
        /// Optimizer used for training the neural nets.
        /// </summary>
        public readonly string Optimizer;
        /// <summary>
        /// The minimum ratio of cumulative explained variance that needs to be given by the PCA model.
        /// </summary>
        public readonly double PcaExplainedVarianceRatio;
        /// <summary>
        /// The solver for PCA.
        /// </summary>
        public readonly string PcaSolver;
        /// <summary>
        /// Number of paths for the sampled Shapley explain method.
        /// </summary>
        public readonly string SampledShapleyNumPaths;
        /// <summary>
        /// If true, scale the feature values by dividing the feature standard deviation. Currently only apply to PCA.
        /// </summary>
        public readonly bool ScaleFeatures;
        /// <summary>
        /// Whether to standardize numerical features. Default to true.
        /// </summary>
        public readonly bool StandardizeFeatures;
        /// <summary>
        /// Subsample fraction of the training data to grow tree to prevent overfitting for boosted tree models.
        /// </summary>
        public readonly double Subsample;
        /// <summary>
        /// Based on the selected TF version, the corresponding docker image is used to train external models.
        /// </summary>
        public readonly string TfVersion;
        /// <summary>
        /// Column to be designated as time series data for ARIMA model.
        /// </summary>
        public readonly string TimeSeriesDataColumn;
        /// <summary>
        /// The time series id column that was used during ARIMA model training.
        /// </summary>
        public readonly string TimeSeriesIdColumn;
        /// <summary>
        /// The time series id columns that were used during ARIMA model training.
        /// </summary>
        public readonly ImmutableArray<string> TimeSeriesIdColumns;
        /// <summary>
        /// The fraction of the interpolated length of the time series that's used to model the time series trend component. All of the time points of the time series are used to model the non-trend component. This training option accelerates modeling training without sacrificing much forecasting accuracy. You can use this option with `minTimeSeriesLength` but not with `maxTimeSeriesLength`.
        /// </summary>
        public readonly double TimeSeriesLengthFraction;
        /// <summary>
        /// Column to be designated as time series timestamp for ARIMA model.
        /// </summary>
        public readonly string TimeSeriesTimestampColumn;
        /// <summary>
        /// Tree construction algorithm for boosted tree models.
        /// </summary>
        public readonly string TreeMethod;
        /// <summary>
        /// Smoothing window size for the trend component. When a positive value is specified, a center moving average smoothing is applied on the history trend. When the smoothing window is out of the boundary at the beginning or the end of the trend, the first element or the last element is padded to fill the smoothing window before the average is applied.
        /// </summary>
        public readonly string TrendSmoothingWindowSize;
        /// <summary>
        /// User column specified for matrix factorization models.
        /// </summary>
        public readonly string UserColumn;
        /// <summary>
        /// The version aliases to apply in Vertex AI model registry. Always overwrite if the version aliases exists in a existing model.
        /// </summary>
        public readonly ImmutableArray<string> VertexAiModelVersionAliases;
        /// <summary>
        /// Hyperparameter for matrix factoration when implicit feedback type is specified.
        /// </summary>
        public readonly double WalsAlpha;
        /// <summary>
        /// Whether to train a model from the last checkpoint.
        /// </summary>
        public readonly bool WarmStart;
        /// <summary>
        /// User-selected XGBoost versions for training of XGBoost models.
        /// </summary>
        public readonly string XgboostVersion;

        [OutputConstructor]
        private TrainingOptionsResponse(
            string activationFn,

            bool adjustStepChanges,

            bool approxGlobalFeatureContrib,

            bool autoArima,

            string autoArimaMaxOrder,

            string autoArimaMinOrder,

            bool autoClassWeights,

            string batchSize,

            string boosterType,

            double budgetHours,

            bool calculatePValues,

            string categoryEncodingMethod,

            bool cleanSpikesAndDips,

            string colorSpace,

            double colsampleBylevel,

            double colsampleBynode,

            double colsampleBytree,

            string dartNormalizeType,

            string dataFrequency,

            string dataSplitColumn,

            double dataSplitEvalFraction,

            string dataSplitMethod,

            bool decomposeTimeSeries,

            string distanceType,

            double dropout,

            bool earlyStop,

            bool enableGlobalExplain,

            string feedbackType,

            bool fitIntercept,

            ImmutableArray<string> hiddenUnits,

            string holidayRegion,

            ImmutableArray<string> holidayRegions,

            string horizon,

            ImmutableArray<string> hparamTuningObjectives,

            bool includeDrift,

            double initialLearnRate,

            ImmutableArray<string> inputLabelColumns,

            string instanceWeightColumn,

            string integratedGradientsNumSteps,

            string itemColumn,

            string kmeansInitializationColumn,

            string kmeansInitializationMethod,

            double l1RegActivation,

            double l1Regularization,

            double l2Regularization,

            ImmutableDictionary<string, string> labelClassWeights,

            double learnRate,

            string learnRateStrategy,

            string lossType,

            string maxIterations,

            string maxParallelTrials,

            string maxTimeSeriesLength,

            string maxTreeDepth,

            double minRelativeProgress,

            double minSplitLoss,

            string minTimeSeriesLength,

            string minTreeChildWeight,

            string modelRegistry,

            string modelUri,

            Outputs.ArimaOrderResponse nonSeasonalOrder,

            string numClusters,

            string numFactors,

            string numParallelTree,

            string numPrincipalComponents,

            string numTrials,

            string optimizationStrategy,

            string optimizer,

            double pcaExplainedVarianceRatio,

            string pcaSolver,

            string sampledShapleyNumPaths,

            bool scaleFeatures,

            bool standardizeFeatures,

            double subsample,

            string tfVersion,

            string timeSeriesDataColumn,

            string timeSeriesIdColumn,

            ImmutableArray<string> timeSeriesIdColumns,

            double timeSeriesLengthFraction,

            string timeSeriesTimestampColumn,

            string treeMethod,

            string trendSmoothingWindowSize,

            string userColumn,

            ImmutableArray<string> vertexAiModelVersionAliases,

            double walsAlpha,

            bool warmStart,

            string xgboostVersion)
        {
            ActivationFn = activationFn;
            AdjustStepChanges = adjustStepChanges;
            ApproxGlobalFeatureContrib = approxGlobalFeatureContrib;
            AutoArima = autoArima;
            AutoArimaMaxOrder = autoArimaMaxOrder;
            AutoArimaMinOrder = autoArimaMinOrder;
            AutoClassWeights = autoClassWeights;
            BatchSize = batchSize;
            BoosterType = boosterType;
            BudgetHours = budgetHours;
            CalculatePValues = calculatePValues;
            CategoryEncodingMethod = categoryEncodingMethod;
            CleanSpikesAndDips = cleanSpikesAndDips;
            ColorSpace = colorSpace;
            ColsampleBylevel = colsampleBylevel;
            ColsampleBynode = colsampleBynode;
            ColsampleBytree = colsampleBytree;
            DartNormalizeType = dartNormalizeType;
            DataFrequency = dataFrequency;
            DataSplitColumn = dataSplitColumn;
            DataSplitEvalFraction = dataSplitEvalFraction;
            DataSplitMethod = dataSplitMethod;
            DecomposeTimeSeries = decomposeTimeSeries;
            DistanceType = distanceType;
            Dropout = dropout;
            EarlyStop = earlyStop;
            EnableGlobalExplain = enableGlobalExplain;
            FeedbackType = feedbackType;
            FitIntercept = fitIntercept;
            HiddenUnits = hiddenUnits;
            HolidayRegion = holidayRegion;
            HolidayRegions = holidayRegions;
            Horizon = horizon;
            HparamTuningObjectives = hparamTuningObjectives;
            IncludeDrift = includeDrift;
            InitialLearnRate = initialLearnRate;
            InputLabelColumns = inputLabelColumns;
            InstanceWeightColumn = instanceWeightColumn;
            IntegratedGradientsNumSteps = integratedGradientsNumSteps;
            ItemColumn = itemColumn;
            KmeansInitializationColumn = kmeansInitializationColumn;
            KmeansInitializationMethod = kmeansInitializationMethod;
            L1RegActivation = l1RegActivation;
            L1Regularization = l1Regularization;
            L2Regularization = l2Regularization;
            LabelClassWeights = labelClassWeights;
            LearnRate = learnRate;
            LearnRateStrategy = learnRateStrategy;
            LossType = lossType;
            MaxIterations = maxIterations;
            MaxParallelTrials = maxParallelTrials;
            MaxTimeSeriesLength = maxTimeSeriesLength;
            MaxTreeDepth = maxTreeDepth;
            MinRelativeProgress = minRelativeProgress;
            MinSplitLoss = minSplitLoss;
            MinTimeSeriesLength = minTimeSeriesLength;
            MinTreeChildWeight = minTreeChildWeight;
            ModelRegistry = modelRegistry;
            ModelUri = modelUri;
            NonSeasonalOrder = nonSeasonalOrder;
            NumClusters = numClusters;
            NumFactors = numFactors;
            NumParallelTree = numParallelTree;
            NumPrincipalComponents = numPrincipalComponents;
            NumTrials = numTrials;
            OptimizationStrategy = optimizationStrategy;
            Optimizer = optimizer;
            PcaExplainedVarianceRatio = pcaExplainedVarianceRatio;
            PcaSolver = pcaSolver;
            SampledShapleyNumPaths = sampledShapleyNumPaths;
            ScaleFeatures = scaleFeatures;
            StandardizeFeatures = standardizeFeatures;
            Subsample = subsample;
            TfVersion = tfVersion;
            TimeSeriesDataColumn = timeSeriesDataColumn;
            TimeSeriesIdColumn = timeSeriesIdColumn;
            TimeSeriesIdColumns = timeSeriesIdColumns;
            TimeSeriesLengthFraction = timeSeriesLengthFraction;
            TimeSeriesTimestampColumn = timeSeriesTimestampColumn;
            TreeMethod = treeMethod;
            TrendSmoothingWindowSize = trendSmoothingWindowSize;
            UserColumn = userColumn;
            VertexAiModelVersionAliases = vertexAiModelVersionAliases;
            WalsAlpha = walsAlpha;
            WarmStart = warmStart;
            XgboostVersion = xgboostVersion;
        }
    }
}
