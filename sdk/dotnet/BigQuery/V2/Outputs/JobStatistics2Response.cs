// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigQuery.V2.Outputs
{

    [OutputType]
    public sealed class JobStatistics2Response
    {
        /// <summary>
        /// BI Engine specific Statistics. [Output-only] BI Engine specific Statistics.
        /// </summary>
        public readonly Outputs.BiEngineStatisticsResponse BiEngineStatistics;
        /// <summary>
        /// Billing tier for the job.
        /// </summary>
        public readonly int BillingTier;
        /// <summary>
        /// Whether the query result was fetched from the query cache.
        /// </summary>
        public readonly bool CacheHit;
        /// <summary>
        /// [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
        /// </summary>
        public readonly string DdlAffectedRowAccessPolicyCount;
        /// <summary>
        /// The DDL destination table. Present only for ALTER TABLE RENAME TO queries. Note that ddl_target_table is used just for its type information.
        /// </summary>
        public readonly Outputs.TableReferenceResponse DdlDestinationTable;
        /// <summary>
        /// The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
        /// </summary>
        public readonly string DdlOperationPerformed;
        /// <summary>
        /// The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA queries.
        /// </summary>
        public readonly Outputs.DatasetReferenceResponse DdlTargetDataset;
        /// <summary>
        /// The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
        /// </summary>
        public readonly Outputs.RoutineReferenceResponse DdlTargetRoutine;
        /// <summary>
        /// [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
        /// </summary>
        public readonly Outputs.RowAccessPolicyReferenceResponse DdlTargetRowAccessPolicy;
        /// <summary>
        /// The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
        /// </summary>
        public readonly Outputs.TableReferenceResponse DdlTargetTable;
        /// <summary>
        /// Detailed statistics for DML statements Present only for DML statements INSERT, UPDATE, DELETE or TRUNCATE.
        /// </summary>
        public readonly Outputs.DmlStatisticsResponse DmlStats;
        /// <summary>
        /// The original estimate of bytes processed for the job.
        /// </summary>
        public readonly string EstimatedBytesProcessed;
        /// <summary>
        /// Statistics of a BigQuery ML training job.
        /// </summary>
        public readonly Outputs.MlStatisticsResponse MlStatistics;
        /// <summary>
        /// [Output-only, Beta] Information about create model query job progress.
        /// </summary>
        public readonly Outputs.BigQueryModelTrainingResponse ModelTraining;
        /// <summary>
        /// [Output-only, Beta] Deprecated; do not use.
        /// </summary>
        public readonly int ModelTrainingCurrentIteration;
        /// <summary>
        /// [Output-only, Beta] Deprecated; do not use.
        /// </summary>
        public readonly string ModelTrainingExpectedTotalIteration;
        /// <summary>
        /// The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
        /// </summary>
        public readonly string NumDmlAffectedRows;
        /// <summary>
        /// Describes execution plan for the query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ExplainQueryStageResponse> QueryPlan;
        /// <summary>
        /// Referenced routines (persistent user-defined functions and stored procedures) for the job.
        /// </summary>
        public readonly ImmutableArray<Outputs.RoutineReferenceResponse> ReferencedRoutines;
        /// <summary>
        /// Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
        /// </summary>
        public readonly ImmutableArray<Outputs.TableReferenceResponse> ReferencedTables;
        /// <summary>
        /// Job resource usage breakdown by reservation.
        /// </summary>
        public readonly ImmutableArray<Outputs.JobStatistics2ReservationUsageItemResponse> ReservationUsage;
        /// <summary>
        /// The schema of the results. Present only for successful dry run of non-legacy SQL queries.
        /// </summary>
        public readonly Outputs.TableSchemaResponse Schema;
        /// <summary>
        /// The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
        /// </summary>
        public readonly string StatementType;
        /// <summary>
        /// [Beta] Describes a timeline of job execution.
        /// </summary>
        public readonly ImmutableArray<Outputs.QueryTimelineSampleResponse> Timeline;
        /// <summary>
        /// Total bytes billed for the job.
        /// </summary>
        public readonly string TotalBytesBilled;
        /// <summary>
        /// Total bytes processed for the job.
        /// </summary>
        public readonly string TotalBytesProcessed;
        /// <summary>
        /// For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
        /// </summary>
        public readonly string TotalBytesProcessedAccuracy;
        /// <summary>
        /// Total number of partitions processed from all partitioned tables referenced in the job.
        /// </summary>
        public readonly string TotalPartitionsProcessed;
        /// <summary>
        /// Slot-milliseconds for the job.
        /// </summary>
        public readonly string TotalSlotMs;
        /// <summary>
        /// Standard SQL only: list of undeclared query parameters detected during a dry run validation.
        /// </summary>
        public readonly ImmutableArray<Outputs.QueryParameterResponse> UndeclaredQueryParameters;

        [OutputConstructor]
        private JobStatistics2Response(
            Outputs.BiEngineStatisticsResponse biEngineStatistics,

            int billingTier,

            bool cacheHit,

            string ddlAffectedRowAccessPolicyCount,

            Outputs.TableReferenceResponse ddlDestinationTable,

            string ddlOperationPerformed,

            Outputs.DatasetReferenceResponse ddlTargetDataset,

            Outputs.RoutineReferenceResponse ddlTargetRoutine,

            Outputs.RowAccessPolicyReferenceResponse ddlTargetRowAccessPolicy,

            Outputs.TableReferenceResponse ddlTargetTable,

            Outputs.DmlStatisticsResponse dmlStats,

            string estimatedBytesProcessed,

            Outputs.MlStatisticsResponse mlStatistics,

            Outputs.BigQueryModelTrainingResponse modelTraining,

            int modelTrainingCurrentIteration,

            string modelTrainingExpectedTotalIteration,

            string numDmlAffectedRows,

            ImmutableArray<Outputs.ExplainQueryStageResponse> queryPlan,

            ImmutableArray<Outputs.RoutineReferenceResponse> referencedRoutines,

            ImmutableArray<Outputs.TableReferenceResponse> referencedTables,

            ImmutableArray<Outputs.JobStatistics2ReservationUsageItemResponse> reservationUsage,

            Outputs.TableSchemaResponse schema,

            string statementType,

            ImmutableArray<Outputs.QueryTimelineSampleResponse> timeline,

            string totalBytesBilled,

            string totalBytesProcessed,

            string totalBytesProcessedAccuracy,

            string totalPartitionsProcessed,

            string totalSlotMs,

            ImmutableArray<Outputs.QueryParameterResponse> undeclaredQueryParameters)
        {
            BiEngineStatistics = biEngineStatistics;
            BillingTier = billingTier;
            CacheHit = cacheHit;
            DdlAffectedRowAccessPolicyCount = ddlAffectedRowAccessPolicyCount;
            DdlDestinationTable = ddlDestinationTable;
            DdlOperationPerformed = ddlOperationPerformed;
            DdlTargetDataset = ddlTargetDataset;
            DdlTargetRoutine = ddlTargetRoutine;
            DdlTargetRowAccessPolicy = ddlTargetRowAccessPolicy;
            DdlTargetTable = ddlTargetTable;
            DmlStats = dmlStats;
            EstimatedBytesProcessed = estimatedBytesProcessed;
            MlStatistics = mlStatistics;
            ModelTraining = modelTraining;
            ModelTrainingCurrentIteration = modelTrainingCurrentIteration;
            ModelTrainingExpectedTotalIteration = modelTrainingExpectedTotalIteration;
            NumDmlAffectedRows = numDmlAffectedRows;
            QueryPlan = queryPlan;
            ReferencedRoutines = referencedRoutines;
            ReferencedTables = referencedTables;
            ReservationUsage = reservationUsage;
            Schema = schema;
            StatementType = statementType;
            Timeline = timeline;
            TotalBytesBilled = totalBytesBilled;
            TotalBytesProcessed = totalBytesProcessed;
            TotalBytesProcessedAccuracy = totalBytesProcessedAccuracy;
            TotalPartitionsProcessed = totalPartitionsProcessed;
            TotalSlotMs = totalSlotMs;
            UndeclaredQueryParameters = undeclaredQueryParameters;
        }
    }
}
