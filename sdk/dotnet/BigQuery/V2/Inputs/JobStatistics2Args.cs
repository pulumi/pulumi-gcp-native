// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigQuery.V2.Inputs
{

    public sealed class JobStatistics2Args : Pulumi.ResourceArgs
    {
        /// <summary>
        /// [Output-only] Billing tier for the job.
        /// </summary>
        [Input("billingTier")]
        public Input<int>? BillingTier { get; set; }

        /// <summary>
        /// [Output-only] Whether the query result was fetched from the query cache.
        /// </summary>
        [Input("cacheHit")]
        public Input<bool>? CacheHit { get; set; }

        /// <summary>
        /// [Output-only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
        /// </summary>
        [Input("ddlAffectedRowAccessPolicyCount")]
        public Input<string>? DdlAffectedRowAccessPolicyCount { get; set; }

        /// <summary>
        /// The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
        /// </summary>
        [Input("ddlOperationPerformed")]
        public Input<string>? DdlOperationPerformed { get; set; }

        /// <summary>
        /// [Output-only] The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA queries.
        /// </summary>
        [Input("ddlTargetDataset")]
        public Input<Inputs.DatasetReferenceArgs>? DdlTargetDataset { get; set; }

        /// <summary>
        /// The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
        /// </summary>
        [Input("ddlTargetRoutine")]
        public Input<Inputs.RoutineReferenceArgs>? DdlTargetRoutine { get; set; }

        /// <summary>
        /// [Output-only] [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
        /// </summary>
        [Input("ddlTargetRowAccessPolicy")]
        public Input<Inputs.RowAccessPolicyReferenceArgs>? DdlTargetRowAccessPolicy { get; set; }

        /// <summary>
        /// [Output-only] The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
        /// </summary>
        [Input("ddlTargetTable")]
        public Input<Inputs.TableReferenceArgs>? DdlTargetTable { get; set; }

        /// <summary>
        /// [Output-only] The original estimate of bytes processed for the job.
        /// </summary>
        [Input("estimatedBytesProcessed")]
        public Input<string>? EstimatedBytesProcessed { get; set; }

        /// <summary>
        /// [Output-only, Beta] Information about create model query job progress.
        /// </summary>
        [Input("modelTraining")]
        public Input<Inputs.BigQueryModelTrainingArgs>? ModelTraining { get; set; }

        /// <summary>
        /// [Output-only, Beta] Deprecated; do not use.
        /// </summary>
        [Input("modelTrainingCurrentIteration")]
        public Input<int>? ModelTrainingCurrentIteration { get; set; }

        /// <summary>
        /// [Output-only, Beta] Deprecated; do not use.
        /// </summary>
        [Input("modelTrainingExpectedTotalIteration")]
        public Input<string>? ModelTrainingExpectedTotalIteration { get; set; }

        /// <summary>
        /// [Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
        /// </summary>
        [Input("numDmlAffectedRows")]
        public Input<string>? NumDmlAffectedRows { get; set; }

        [Input("queryPlan")]
        private InputList<Inputs.ExplainQueryStageArgs>? _queryPlan;

        /// <summary>
        /// [Output-only] Describes execution plan for the query.
        /// </summary>
        public InputList<Inputs.ExplainQueryStageArgs> QueryPlan
        {
            get => _queryPlan ?? (_queryPlan = new InputList<Inputs.ExplainQueryStageArgs>());
            set => _queryPlan = value;
        }

        [Input("referencedRoutines")]
        private InputList<Inputs.RoutineReferenceArgs>? _referencedRoutines;

        /// <summary>
        /// [Output-only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
        /// </summary>
        public InputList<Inputs.RoutineReferenceArgs> ReferencedRoutines
        {
            get => _referencedRoutines ?? (_referencedRoutines = new InputList<Inputs.RoutineReferenceArgs>());
            set => _referencedRoutines = value;
        }

        [Input("referencedTables")]
        private InputList<Inputs.TableReferenceArgs>? _referencedTables;

        /// <summary>
        /// [Output-only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
        /// </summary>
        public InputList<Inputs.TableReferenceArgs> ReferencedTables
        {
            get => _referencedTables ?? (_referencedTables = new InputList<Inputs.TableReferenceArgs>());
            set => _referencedTables = value;
        }

        [Input("reservationUsage")]
        private InputList<Inputs.JobReservationUsageItemArgs>? _reservationUsage;

        /// <summary>
        /// [Output-only] Job resource usage breakdown by reservation.
        /// </summary>
        public InputList<Inputs.JobReservationUsageItemArgs> ReservationUsage
        {
            get => _reservationUsage ?? (_reservationUsage = new InputList<Inputs.JobReservationUsageItemArgs>());
            set => _reservationUsage = value;
        }

        /// <summary>
        /// [Output-only] The schema of the results. Present only for successful dry run of non-legacy SQL queries.
        /// </summary>
        [Input("schema")]
        public Input<Inputs.TableSchemaArgs>? Schema { get; set; }

        /// <summary>
        /// The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
        /// </summary>
        [Input("statementType")]
        public Input<string>? StatementType { get; set; }

        [Input("timeline")]
        private InputList<Inputs.QueryTimelineSampleArgs>? _timeline;

        /// <summary>
        /// [Output-only] [Beta] Describes a timeline of job execution.
        /// </summary>
        public InputList<Inputs.QueryTimelineSampleArgs> Timeline
        {
            get => _timeline ?? (_timeline = new InputList<Inputs.QueryTimelineSampleArgs>());
            set => _timeline = value;
        }

        /// <summary>
        /// [Output-only] Total bytes billed for the job.
        /// </summary>
        [Input("totalBytesBilled")]
        public Input<string>? TotalBytesBilled { get; set; }

        /// <summary>
        /// [Output-only] Total bytes processed for the job.
        /// </summary>
        [Input("totalBytesProcessed")]
        public Input<string>? TotalBytesProcessed { get; set; }

        /// <summary>
        /// [Output-only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
        /// </summary>
        [Input("totalBytesProcessedAccuracy")]
        public Input<string>? TotalBytesProcessedAccuracy { get; set; }

        /// <summary>
        /// [Output-only] Total number of partitions processed from all partitioned tables referenced in the job.
        /// </summary>
        [Input("totalPartitionsProcessed")]
        public Input<string>? TotalPartitionsProcessed { get; set; }

        /// <summary>
        /// [Output-only] Slot-milliseconds for the job.
        /// </summary>
        [Input("totalSlotMs")]
        public Input<string>? TotalSlotMs { get; set; }

        [Input("undeclaredQueryParameters")]
        private InputList<Inputs.QueryParameterArgs>? _undeclaredQueryParameters;

        /// <summary>
        /// Standard SQL only: list of undeclared query parameters detected during a dry run validation.
        /// </summary>
        public InputList<Inputs.QueryParameterArgs> UndeclaredQueryParameters
        {
            get => _undeclaredQueryParameters ?? (_undeclaredQueryParameters = new InputList<Inputs.QueryParameterArgs>());
            set => _undeclaredQueryParameters = value;
        }

        public JobStatistics2Args()
        {
        }
    }
}
