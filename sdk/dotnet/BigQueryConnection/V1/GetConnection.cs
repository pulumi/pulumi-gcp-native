// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigQueryConnection.V1
{
    public static class GetConnection
    {
        /// <summary>
        /// Returns specified connection.
        /// </summary>
        public static Task<GetConnectionResult> InvokeAsync(GetConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionResult>("google-native:bigqueryconnection/v1:getConnection", args ?? new GetConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Returns specified connection.
        /// </summary>
        public static Output<GetConnectionResult> Invoke(GetConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionResult>("google-native:bigqueryconnection/v1:getConnection", args ?? new GetConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId", required: true)]
        public string ConnectionId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetConnectionArgs()
        {
        }
        public static new GetConnectionArgs Empty => new GetConnectionArgs();
    }

    public sealed class GetConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetConnectionInvokeArgs()
        {
        }
        public static new GetConnectionInvokeArgs Empty => new GetConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionResult
    {
        /// <summary>
        /// Amazon Web Services (AWS) properties.
        /// </summary>
        public readonly Outputs.AwsPropertiesResponse Aws;
        /// <summary>
        /// Azure properties.
        /// </summary>
        public readonly Outputs.AzurePropertiesResponse Azure;
        /// <summary>
        /// Cloud Resource properties.
        /// </summary>
        public readonly Outputs.CloudResourcePropertiesResponse CloudResource;
        /// <summary>
        /// Cloud Spanner properties.
        /// </summary>
        public readonly Outputs.CloudSpannerPropertiesResponse CloudSpanner;
        /// <summary>
        /// Cloud SQL properties.
        /// </summary>
        public readonly Outputs.CloudSqlPropertiesResponse CloudSql;
        /// <summary>
        /// Optional. Connector configuration.
        /// </summary>
        public readonly Outputs.ConnectorConfigurationResponse Configuration;
        /// <summary>
        /// The creation timestamp of the connection.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// User provided description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User provided display name for the connection.
        /// </summary>
        public readonly string FriendlyName;
        /// <summary>
        /// True, if credential is configured for this connection.
        /// </summary>
        public readonly bool HasCredential;
        /// <summary>
        /// Optional. The Cloud KMS key that is used for encryption. Example: `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
        /// </summary>
        public readonly string KmsKeyName;
        /// <summary>
        /// The last update timestamp of the connection.
        /// </summary>
        public readonly string LastModifiedTime;
        /// <summary>
        /// The resource name of the connection in the form of: `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. Salesforce DataCloud properties. This field is intended for use only by Salesforce partner projects. This field contains properties for your Salesforce DataCloud connection.
        /// </summary>
        public readonly Outputs.SalesforceDataCloudPropertiesResponse SalesforceDataCloud;
        /// <summary>
        /// Spark properties.
        /// </summary>
        public readonly Outputs.SparkPropertiesResponse Spark;

        [OutputConstructor]
        private GetConnectionResult(
            Outputs.AwsPropertiesResponse aws,

            Outputs.AzurePropertiesResponse azure,

            Outputs.CloudResourcePropertiesResponse cloudResource,

            Outputs.CloudSpannerPropertiesResponse cloudSpanner,

            Outputs.CloudSqlPropertiesResponse cloudSql,

            Outputs.ConnectorConfigurationResponse configuration,

            string creationTime,

            string description,

            string friendlyName,

            bool hasCredential,

            string kmsKeyName,

            string lastModifiedTime,

            string name,

            Outputs.SalesforceDataCloudPropertiesResponse salesforceDataCloud,

            Outputs.SparkPropertiesResponse spark)
        {
            Aws = aws;
            Azure = azure;
            CloudResource = cloudResource;
            CloudSpanner = cloudSpanner;
            CloudSql = cloudSql;
            Configuration = configuration;
            CreationTime = creationTime;
            Description = description;
            FriendlyName = friendlyName;
            HasCredential = hasCredential;
            KmsKeyName = kmsKeyName;
            LastModifiedTime = lastModifiedTime;
            Name = name;
            SalesforceDataCloud = salesforceDataCloud;
            Spark = spark;
        }
    }
}
