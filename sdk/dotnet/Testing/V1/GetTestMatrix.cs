// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Testing.V1
{
    public static class GetTestMatrix
    {
        /// <summary>
        /// Checks the status of a test matrix. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist
        /// </summary>
        public static Task<GetTestMatrixResult> InvokeAsync(GetTestMatrixArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTestMatrixResult>("google-native:testing/v1:getTestMatrix", args ?? new GetTestMatrixArgs(), options.WithDefaults());

        /// <summary>
        /// Checks the status of a test matrix. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist
        /// </summary>
        public static Output<GetTestMatrixResult> Invoke(GetTestMatrixInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTestMatrixResult>("google-native:testing/v1:getTestMatrix", args ?? new GetTestMatrixInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTestMatrixArgs : Pulumi.InvokeArgs
    {
        [Input("project")]
        public string? Project { get; set; }

        [Input("testMatrixId", required: true)]
        public string TestMatrixId { get; set; } = null!;

        public GetTestMatrixArgs()
        {
        }
    }

    public sealed class GetTestMatrixInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("testMatrixId", required: true)]
        public Input<string> TestMatrixId { get; set; } = null!;

        public GetTestMatrixInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTestMatrixResult
    {
        /// <summary>
        /// Information about the client which invoked the test.
        /// </summary>
        public readonly Outputs.ClientInfoResponse ClientInfo;
        /// <summary>
        /// The devices the tests are being executed on.
        /// </summary>
        public readonly Outputs.EnvironmentMatrixResponse EnvironmentMatrix;
        /// <summary>
        /// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
        /// </summary>
        public readonly bool FailFast;
        /// <summary>
        /// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
        /// </summary>
        public readonly int FlakyTestAttempts;
        /// <summary>
        /// Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
        /// </summary>
        public readonly string InvalidMatrixDetails;
        /// <summary>
        /// Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
        /// </summary>
        public readonly string OutcomeSummary;
        /// <summary>
        /// The cloud project that owns the test matrix.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Where the results for the matrix are written.
        /// </summary>
        public readonly Outputs.ResultStorageResponse ResultStorage;
        /// <summary>
        /// Indicates the current progress of the test matrix.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The list of test executions that the service creates for this matrix.
        /// </summary>
        public readonly ImmutableArray<Outputs.TestExecutionResponse> TestExecutions;
        /// <summary>
        /// Unique id set by the service.
        /// </summary>
        public readonly string TestMatrixId;
        /// <summary>
        /// How to run the test.
        /// </summary>
        public readonly Outputs.TestSpecificationResponse TestSpecification;
        /// <summary>
        /// The time this test matrix was initially created.
        /// </summary>
        public readonly string Timestamp;

        [OutputConstructor]
        private GetTestMatrixResult(
            Outputs.ClientInfoResponse clientInfo,

            Outputs.EnvironmentMatrixResponse environmentMatrix,

            bool failFast,

            int flakyTestAttempts,

            string invalidMatrixDetails,

            string outcomeSummary,

            string project,

            Outputs.ResultStorageResponse resultStorage,

            string state,

            ImmutableArray<Outputs.TestExecutionResponse> testExecutions,

            string testMatrixId,

            Outputs.TestSpecificationResponse testSpecification,

            string timestamp)
        {
            ClientInfo = clientInfo;
            EnvironmentMatrix = environmentMatrix;
            FailFast = failFast;
            FlakyTestAttempts = flakyTestAttempts;
            InvalidMatrixDetails = invalidMatrixDetails;
            OutcomeSummary = outcomeSummary;
            Project = project;
            ResultStorage = resultStorage;
            State = state;
            TestExecutions = testExecutions;
            TestMatrixId = testMatrixId;
            TestSpecification = testSpecification;
            Timestamp = timestamp;
        }
    }
}
