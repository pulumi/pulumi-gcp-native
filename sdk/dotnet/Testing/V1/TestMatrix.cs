// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Testing.V1
{
    /// <summary>
    /// Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices.
    /// Auto-naming is currently not supported for this resource.
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:testing/v1:TestMatrix")]
    public partial class TestMatrix : Pulumi.CustomResource
    {
        /// <summary>
        /// Information about the client which invoked the test.
        /// </summary>
        [Output("clientInfo")]
        public Output<Outputs.ClientInfoResponse> ClientInfo { get; private set; } = null!;

        /// <summary>
        /// The devices the tests are being executed on.
        /// </summary>
        [Output("environmentMatrix")]
        public Output<Outputs.EnvironmentMatrixResponse> EnvironmentMatrix { get; private set; } = null!;

        /// <summary>
        /// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
        /// </summary>
        [Output("failFast")]
        public Output<bool> FailFast { get; private set; } = null!;

        /// <summary>
        /// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
        /// </summary>
        [Output("flakyTestAttempts")]
        public Output<int> FlakyTestAttempts { get; private set; } = null!;

        /// <summary>
        /// Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
        /// </summary>
        [Output("invalidMatrixDetails")]
        public Output<string> InvalidMatrixDetails { get; private set; } = null!;

        /// <summary>
        /// Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
        /// </summary>
        [Output("outcomeSummary")]
        public Output<string> OutcomeSummary { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional, but strongly recommended.
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// Where the results for the matrix are written.
        /// </summary>
        [Output("resultStorage")]
        public Output<Outputs.ResultStorageResponse> ResultStorage { get; private set; } = null!;

        /// <summary>
        /// Indicates the current progress of the test matrix.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The list of test executions that the service creates for this matrix.
        /// </summary>
        [Output("testExecutions")]
        public Output<ImmutableArray<Outputs.TestExecutionResponse>> TestExecutions { get; private set; } = null!;

        /// <summary>
        /// Unique id set by the service.
        /// </summary>
        [Output("testMatrixId")]
        public Output<string> TestMatrixId { get; private set; } = null!;

        /// <summary>
        /// How to run the test.
        /// </summary>
        [Output("testSpecification")]
        public Output<Outputs.TestSpecificationResponse> TestSpecification { get; private set; } = null!;

        /// <summary>
        /// The time this test matrix was initially created.
        /// </summary>
        [Output("timestamp")]
        public Output<string> Timestamp { get; private set; } = null!;


        /// <summary>
        /// Create a TestMatrix resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TestMatrix(string name, TestMatrixArgs args, CustomResourceOptions? options = null)
            : base("google-native:testing/v1:TestMatrix", name, args ?? new TestMatrixArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TestMatrix(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:testing/v1:TestMatrix", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TestMatrix resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TestMatrix Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new TestMatrix(name, id, options);
        }
    }

    public sealed class TestMatrixArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information about the client which invoked the test.
        /// </summary>
        [Input("clientInfo")]
        public Input<Inputs.ClientInfoArgs>? ClientInfo { get; set; }

        /// <summary>
        /// The devices the tests are being executed on.
        /// </summary>
        [Input("environmentMatrix", required: true)]
        public Input<Inputs.EnvironmentMatrixArgs> EnvironmentMatrix { get; set; } = null!;

        /// <summary>
        /// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
        /// </summary>
        [Input("failFast")]
        public Input<bool>? FailFast { get; set; }

        /// <summary>
        /// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
        /// </summary>
        [Input("flakyTestAttempts")]
        public Input<int>? FlakyTestAttempts { get; set; }

        /// <summary>
        /// The cloud project that owns the test matrix.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional, but strongly recommended.
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// Where the results for the matrix are written.
        /// </summary>
        [Input("resultStorage", required: true)]
        public Input<Inputs.ResultStorageArgs> ResultStorage { get; set; } = null!;

        /// <summary>
        /// How to run the test.
        /// </summary>
        [Input("testSpecification", required: true)]
        public Input<Inputs.TestSpecificationArgs> TestSpecification { get; set; } = null!;

        public TestMatrixArgs()
        {
        }
    }
}
