// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Testing.V1
{
    /// <summary>
    /// POST /v1/projects/{project_id}/deviceSessions
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:testing/v1:DeviceSession")]
    public partial class DeviceSession : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The timestamp that the session first became ACTIVE.
        /// </summary>
        [Output("activeStartTime")]
        public Output<string> ActiveStartTime { get; private set; } = null!;

        /// <summary>
        /// The requested device
        /// </summary>
        [Output("androidDevice")]
        public Output<Outputs.AndroidDeviceResponse> AndroidDevice { get; private set; } = null!;

        /// <summary>
        /// The time that the Session was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The title of the DeviceSession to be presented in the UI.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Optional. If the device is still in use at this time, any connections will be ended and the SessionState will transition from ACTIVE to FINISHED.
        /// </summary>
        [Output("expireTime")]
        public Output<string> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// The interval of time that this device must be interacted with before it transitions from ACTIVE to TIMEOUT_INACTIVITY.
        /// </summary>
        [Output("inactivityTimeout")]
        public Output<string> InactivityTimeout { get; private set; } = null!;

        /// <summary>
        /// Optional. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Current state of the DeviceSession.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The historical state transitions of the session_state message including the current session state.
        /// </summary>
        [Output("stateHistories")]
        public Output<ImmutableArray<Outputs.SessionStateEventResponse>> StateHistories { get; private set; } = null!;

        /// <summary>
        /// Optional. The amount of time that a device will be initially allocated for. This can eventually be extended with the UpdateDeviceSession RPC. Default: 30 minutes.
        /// </summary>
        [Output("ttl")]
        public Output<string> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceSession resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceSession(string name, DeviceSessionArgs args, CustomResourceOptions? options = null)
            : base("google-native:testing/v1:DeviceSession", name, args ?? new DeviceSessionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceSession(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:testing/v1:DeviceSession", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceSession resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceSession Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DeviceSession(name, id, options);
        }
    }

    public sealed class DeviceSessionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The requested device
        /// </summary>
        [Input("androidDevice", required: true)]
        public Input<Inputs.AndroidDeviceArgs> AndroidDevice { get; set; } = null!;

        /// <summary>
        /// Optional. If the device is still in use at this time, any connections will be ended and the SessionState will transition from ACTIVE to FINISHED.
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        /// <summary>
        /// Optional. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Optional. The amount of time that a device will be initially allocated for. This can eventually be extended with the UpdateDeviceSession RPC. Default: 30 minutes.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public DeviceSessionArgs()
        {
        }
        public static new DeviceSessionArgs Empty => new DeviceSessionArgs();
    }
}
