// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Testing.V1.Inputs
{

    /// <summary>
    /// A description of how to set up the Android device prior to running the test.
    /// </summary>
    public sealed class TestSetupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The device will be logged in on this account for the duration of the test.
        /// </summary>
        [Input("account")]
        public Input<Inputs.AccountArgs>? Account { get; set; }

        [Input("additionalApks")]
        private InputList<Inputs.ApkArgs>? _additionalApks;

        /// <summary>
        /// APKs to install in addition to those being directly tested. Currently capped at 100.
        /// </summary>
        public InputList<Inputs.ApkArgs> AdditionalApks
        {
            get => _additionalApks ?? (_additionalApks = new InputList<Inputs.ApkArgs>());
            set => _additionalApks = value;
        }

        [Input("directoriesToPull")]
        private InputList<string>? _directoriesToPull;

        /// <summary>
        /// List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
        /// </summary>
        public InputList<string> DirectoriesToPull
        {
            get => _directoriesToPull ?? (_directoriesToPull = new InputList<string>());
            set => _directoriesToPull = value;
        }

        /// <summary>
        /// Whether to prevent all runtime permissions to be granted at app install
        /// </summary>
        [Input("dontAutograntPermissions")]
        public Input<bool>? DontAutograntPermissions { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.EnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// Environment variables to set for the test (only applicable for instrumentation tests).
        /// </summary>
        public InputList<Inputs.EnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.EnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        [Input("filesToPush")]
        private InputList<Inputs.DeviceFileArgs>? _filesToPush;

        /// <summary>
        /// List of files to push to the device before starting the test.
        /// </summary>
        public InputList<Inputs.DeviceFileArgs> FilesToPush
        {
            get => _filesToPush ?? (_filesToPush = new InputList<Inputs.DeviceFileArgs>());
            set => _filesToPush = value;
        }

        /// <summary>
        /// The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
        /// </summary>
        [Input("networkProfile")]
        public Input<string>? NetworkProfile { get; set; }

        /// <summary>
        /// Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
        /// </summary>
        [Input("systrace")]
        public Input<Inputs.SystraceSetupArgs>? Systrace { get; set; }

        public TestSetupArgs()
        {
        }
        public static new TestSetupArgs Empty => new TestSetupArgs();
    }
}
