// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Testing.V1.Inputs
{

    /// <summary>
    /// A description of how to run the test.
    /// </summary>
    public sealed class TestSpecificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An Android instrumentation test.
        /// </summary>
        [Input("androidInstrumentationTest")]
        public Input<Inputs.AndroidInstrumentationTestArgs>? AndroidInstrumentationTest { get; set; }

        /// <summary>
        /// An Android robo test.
        /// </summary>
        [Input("androidRoboTest")]
        public Input<Inputs.AndroidRoboTestArgs>? AndroidRoboTest { get; set; }

        /// <summary>
        /// An Android Application with a Test Loop.
        /// </summary>
        [Input("androidTestLoop")]
        public Input<Inputs.AndroidTestLoopArgs>? AndroidTestLoop { get; set; }

        /// <summary>
        /// Disables performance metrics recording. May reduce test latency.
        /// </summary>
        [Input("disablePerformanceMetrics")]
        public Input<bool>? DisablePerformanceMetrics { get; set; }

        /// <summary>
        /// Disables video recording. May reduce test latency.
        /// </summary>
        [Input("disableVideoRecording")]
        public Input<bool>? DisableVideoRecording { get; set; }

        /// <summary>
        /// An iOS application with a test loop.
        /// </summary>
        [Input("iosTestLoop")]
        public Input<Inputs.IosTestLoopArgs>? IosTestLoop { get; set; }

        /// <summary>
        /// Test setup requirements for iOS.
        /// </summary>
        [Input("iosTestSetup")]
        public Input<Inputs.IosTestSetupArgs>? IosTestSetup { get; set; }

        /// <summary>
        /// An iOS XCTest, via an .xctestrun file.
        /// </summary>
        [Input("iosXcTest")]
        public Input<Inputs.IosXcTestArgs>? IosXcTest { get; set; }

        /// <summary>
        /// Test setup requirements for Android e.g. files to install, bootstrap scripts.
        /// </summary>
        [Input("testSetup")]
        public Input<Inputs.TestSetupArgs>? TestSetup { get; set; }

        /// <summary>
        /// Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
        /// </summary>
        [Input("testTimeout")]
        public Input<string>? TestTimeout { get; set; }

        public TestSpecificationArgs()
        {
        }
        public static new TestSpecificationArgs Empty => new TestSpecificationArgs();
    }
}
