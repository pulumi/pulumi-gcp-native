// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Testing.V1
{
    public static class GetDeviceSession
    {
        /// <summary>
        /// GET /v1/projects/{project_id}/deviceSessions/{device_session_id} Return a DeviceSession, which documents the allocation status and whether the device is allocated. Clients making requests from this API must poll GetDeviceSession.
        /// </summary>
        public static Task<GetDeviceSessionResult> InvokeAsync(GetDeviceSessionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeviceSessionResult>("google-native:testing/v1:getDeviceSession", args ?? new GetDeviceSessionArgs(), options.WithDefaults());

        /// <summary>
        /// GET /v1/projects/{project_id}/deviceSessions/{device_session_id} Return a DeviceSession, which documents the allocation status and whether the device is allocated. Clients making requests from this API must poll GetDeviceSession.
        /// </summary>
        public static Output<GetDeviceSessionResult> Invoke(GetDeviceSessionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeviceSessionResult>("google-native:testing/v1:getDeviceSession", args ?? new GetDeviceSessionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeviceSessionArgs : global::Pulumi.InvokeArgs
    {
        [Input("deviceSessionId", required: true)]
        public string DeviceSessionId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDeviceSessionArgs()
        {
        }
        public static new GetDeviceSessionArgs Empty => new GetDeviceSessionArgs();
    }

    public sealed class GetDeviceSessionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("deviceSessionId", required: true)]
        public Input<string> DeviceSessionId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDeviceSessionInvokeArgs()
        {
        }
        public static new GetDeviceSessionInvokeArgs Empty => new GetDeviceSessionInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeviceSessionResult
    {
        /// <summary>
        /// The timestamp that the session first became ACTIVE.
        /// </summary>
        public readonly string ActiveStartTime;
        /// <summary>
        /// The requested device
        /// </summary>
        public readonly Outputs.AndroidDeviceResponse AndroidDevice;
        /// <summary>
        /// The time that the Session was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The title of the DeviceSession to be presented in the UI.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Optional. If the device is still in use at this time, any connections will be ended and the SessionState will transition from ACTIVE to FINISHED.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// The interval of time that this device must be interacted with before it transitions from ACTIVE to TIMEOUT_INACTIVITY.
        /// </summary>
        public readonly string InactivityTimeout;
        /// <summary>
        /// Optional. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Current state of the DeviceSession.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The historical state transitions of the session_state message including the current session state.
        /// </summary>
        public readonly ImmutableArray<Outputs.SessionStateEventResponse> StateHistories;
        /// <summary>
        /// Optional. The amount of time that a device will be initially allocated for. This can eventually be extended with the UpdateDeviceSession RPC. Default: 30 minutes.
        /// </summary>
        public readonly string Ttl;

        [OutputConstructor]
        private GetDeviceSessionResult(
            string activeStartTime,

            Outputs.AndroidDeviceResponse androidDevice,

            string createTime,

            string displayName,

            string expireTime,

            string inactivityTimeout,

            string name,

            string state,

            ImmutableArray<Outputs.SessionStateEventResponse> stateHistories,

            string ttl)
        {
            ActiveStartTime = activeStartTime;
            AndroidDevice = androidDevice;
            CreateTime = createTime;
            DisplayName = displayName;
            ExpireTime = expireTime;
            InactivityTimeout = inactivityTimeout;
            Name = name;
            State = state;
            StateHistories = stateHistories;
            Ttl = ttl;
        }
    }
}
