// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.BigQueryDataPolicy.V1
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A predefined masking expression.
    /// </summary>
    [EnumType]
    public readonly struct DataMaskingPolicyPredefinedExpression : IEquatable<DataMaskingPolicyPredefinedExpression>
    {
        private readonly string _value;

        private DataMaskingPolicyPredefinedExpression(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default, unspecified predefined expression. No masking will take place since no expression is specified.
        /// </summary>
        public static DataMaskingPolicyPredefinedExpression PredefinedExpressionUnspecified { get; } = new DataMaskingPolicyPredefinedExpression("PREDEFINED_EXPRESSION_UNSPECIFIED");
        /// <summary>
        /// Masking expression to replace data with SHA-256 hash.
        /// </summary>
        public static DataMaskingPolicyPredefinedExpression Sha256 { get; } = new DataMaskingPolicyPredefinedExpression("SHA256");
        /// <summary>
        /// Masking expression to replace data with NULLs.
        /// </summary>
        public static DataMaskingPolicyPredefinedExpression AlwaysNull { get; } = new DataMaskingPolicyPredefinedExpression("ALWAYS_NULL");
        /// <summary>
        /// Masking expression to replace data with their default masking values. The default masking values for each type listed as below: * STRING: "" * BYTES: b'' * INTEGER: 0 * FLOAT: 0.0 * NUMERIC: 0 * BOOLEAN: FALSE * TIMESTAMP: 1970-01-01 00:00:00 UTC * DATE: 1970-01-01 * TIME: 00:00:00 * DATETIME: 1970-01-01T00:00:00 * GEOGRAPHY: POINT(0 0) * BIGNUMERIC: 0 * ARRAY: [] * STRUCT: NOT_APPLICABLE * JSON: NULL
        /// </summary>
        public static DataMaskingPolicyPredefinedExpression DefaultMaskingValue { get; } = new DataMaskingPolicyPredefinedExpression("DEFAULT_MASKING_VALUE");
        /// <summary>
        /// Masking expression shows the last four characters of text. The masking behavior is as follows: * If text length &gt; 4 characters: Replace text with XXXXX, append last four characters of original text. * If text length &lt;= 4 characters: Apply SHA-256 hash.
        /// </summary>
        public static DataMaskingPolicyPredefinedExpression LastFourCharacters { get; } = new DataMaskingPolicyPredefinedExpression("LAST_FOUR_CHARACTERS");
        /// <summary>
        /// Masking expression shows the first four characters of text. The masking behavior is as follows: * If text length &gt; 4 characters: Replace text with XXXXX, prepend first four characters of original text. * If text length &lt;= 4 characters: Apply SHA-256 hash.
        /// </summary>
        public static DataMaskingPolicyPredefinedExpression FirstFourCharacters { get; } = new DataMaskingPolicyPredefinedExpression("FIRST_FOUR_CHARACTERS");
        /// <summary>
        /// Masking expression for email addresses. The masking behavior is as follows: * Syntax-valid email address: Replace username with XXXXX. For example, cloudysanfrancisco@gmail.com becomes XXXXX@gmail.com. * Syntax-invalid email address: Apply SHA-256 hash. For more information, see Email mask.
        /// </summary>
        public static DataMaskingPolicyPredefinedExpression EmailMask { get; } = new DataMaskingPolicyPredefinedExpression("EMAIL_MASK");
        /// <summary>
        /// Masking expression to only show the *year* of `Date`, `DateTime` and `TimeStamp`. For example, with the year 2076: * DATE : 2076-01-01 * DATETIME : 2076-01-01T00:00:00 * TIMESTAMP : 2076-01-01 00:00:00 UTC Truncation occurs according to the UTC time zone. To change this, adjust the default time zone using the `time_zone` system variable. For more information, see the System variables reference.
        /// </summary>
        public static DataMaskingPolicyPredefinedExpression DateYearMask { get; } = new DataMaskingPolicyPredefinedExpression("DATE_YEAR_MASK");

        public static bool operator ==(DataMaskingPolicyPredefinedExpression left, DataMaskingPolicyPredefinedExpression right) => left.Equals(right);
        public static bool operator !=(DataMaskingPolicyPredefinedExpression left, DataMaskingPolicyPredefinedExpression right) => !left.Equals(right);

        public static explicit operator string(DataMaskingPolicyPredefinedExpression value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataMaskingPolicyPredefinedExpression other && Equals(other);
        public bool Equals(DataMaskingPolicyPredefinedExpression other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of data policy.
    /// </summary>
    [EnumType]
    public readonly struct DataPolicyDataPolicyType : IEquatable<DataPolicyDataPolicyType>
    {
        private readonly string _value;

        private DataPolicyDataPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value for the data policy type. This should not be used.
        /// </summary>
        public static DataPolicyDataPolicyType DataPolicyTypeUnspecified { get; } = new DataPolicyDataPolicyType("DATA_POLICY_TYPE_UNSPECIFIED");
        /// <summary>
        /// Used to create a data policy for column-level security, without data masking.
        /// </summary>
        public static DataPolicyDataPolicyType ColumnLevelSecurityPolicy { get; } = new DataPolicyDataPolicyType("COLUMN_LEVEL_SECURITY_POLICY");
        /// <summary>
        /// Used to create a data policy for data masking.
        /// </summary>
        public static DataPolicyDataPolicyType DataMaskingPolicy { get; } = new DataPolicyDataPolicyType("DATA_MASKING_POLICY");

        public static bool operator ==(DataPolicyDataPolicyType left, DataPolicyDataPolicyType right) => left.Equals(right);
        public static bool operator !=(DataPolicyDataPolicyType left, DataPolicyDataPolicyType right) => !left.Equals(right);

        public static explicit operator string(DataPolicyDataPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataPolicyDataPolicyType other && Equals(other);
        public bool Equals(DataPolicyDataPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
