// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.DNS.V1Beta2.Outputs
{

    /// <summary>
    /// Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
    /// </summary>
    [OutputType]
    public sealed class RRSetRoutingPolicyPrimaryBackupPolicyResponse
    {
        /// <summary>
        /// Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to BACKUP, this policy essentially becomes a geo routing policy.
        /// </summary>
        public readonly Outputs.RRSetRoutingPolicyGeoPolicyResponse BackupGeoTargets;
        public readonly string Kind;
        /// <summary>
        /// Endpoints that are health checked before making the routing decision. Unhealthy endpoints are omitted from the results. If all endpoints are unhealthy, we serve a response based on the backup_geo_targets.
        /// </summary>
        public readonly Outputs.RRSetRoutingPolicyHealthCheckTargetsResponse PrimaryTargets;
        /// <summary>
        /// When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.
        /// </summary>
        public readonly double TrickleTraffic;

        [OutputConstructor]
        private RRSetRoutingPolicyPrimaryBackupPolicyResponse(
            Outputs.RRSetRoutingPolicyGeoPolicyResponse backupGeoTargets,

            string kind,

            Outputs.RRSetRoutingPolicyHealthCheckTargetsResponse primaryTargets,

            double trickleTraffic)
        {
            BackupGeoTargets = backupGeoTargets;
            Kind = kind;
            PrimaryTargets = primaryTargets;
            TrickleTraffic = trickleTraffic;
        }
    }
}
