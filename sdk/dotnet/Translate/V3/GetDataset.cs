// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Translate.V3
{
    public static class GetDataset
    {
        /// <summary>
        /// Gets a Dataset.
        /// </summary>
        public static Task<GetDatasetResult> InvokeAsync(GetDatasetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatasetResult>("google-native:translate/v3:getDataset", args ?? new GetDatasetArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Dataset.
        /// </summary>
        public static Output<GetDatasetResult> Invoke(GetDatasetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatasetResult>("google-native:translate/v3:getDataset", args ?? new GetDatasetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatasetArgs : global::Pulumi.InvokeArgs
    {
        [Input("datasetId", required: true)]
        public string DatasetId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDatasetArgs()
        {
        }
        public static new GetDatasetArgs Empty => new GetDatasetArgs();
    }

    public sealed class GetDatasetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDatasetInvokeArgs()
        {
        }
        public static new GetDatasetInvokeArgs Empty => new GetDatasetInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatasetResult
    {
        /// <summary>
        /// Timestamp when this dataset was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The number of examples in the dataset.
        /// </summary>
        public readonly int ExampleCount;
        /// <summary>
        /// The resource name of the dataset, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The BCP-47 language code of the source language.
        /// </summary>
        public readonly string SourceLanguageCode;
        /// <summary>
        /// The BCP-47 language code of the target language.
        /// </summary>
        public readonly string TargetLanguageCode;
        /// <summary>
        /// Number of test examples (sentence pairs).
        /// </summary>
        public readonly int TestExampleCount;
        /// <summary>
        /// Number of training examples (sentence pairs).
        /// </summary>
        public readonly int TrainExampleCount;
        /// <summary>
        /// Timestamp when this dataset was last updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// Number of validation examples (sentence pairs).
        /// </summary>
        public readonly int ValidateExampleCount;

        [OutputConstructor]
        private GetDatasetResult(
            string createTime,

            string displayName,

            int exampleCount,

            string name,

            string sourceLanguageCode,

            string targetLanguageCode,

            int testExampleCount,

            int trainExampleCount,

            string updateTime,

            int validateExampleCount)
        {
            CreateTime = createTime;
            DisplayName = displayName;
            ExampleCount = exampleCount;
            Name = name;
            SourceLanguageCode = sourceLanguageCode;
            TargetLanguageCode = targetLanguageCode;
            TestExampleCount = testExampleCount;
            TrainExampleCount = trainExampleCount;
            UpdateTime = updateTime;
            ValidateExampleCount = validateExampleCount;
        }
    }
}
