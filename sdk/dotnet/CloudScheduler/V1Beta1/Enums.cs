// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.CloudScheduler.V1Beta1
{
    /// <summary>
    /// The HTTP method to use for the request. PATCH and OPTIONS are not permitted.
    /// </summary>
    [EnumType]
    public readonly struct AppEngineHttpTargetHttpMethod : IEquatable<AppEngineHttpTargetHttpMethod>
    {
        private readonly string _value;

        private AppEngineHttpTargetHttpMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// HTTP method unspecified. Defaults to POST.
        /// </summary>
        public static AppEngineHttpTargetHttpMethod HttpMethodUnspecified { get; } = new AppEngineHttpTargetHttpMethod("HTTP_METHOD_UNSPECIFIED");
        /// <summary>
        /// HTTP POST
        /// </summary>
        public static AppEngineHttpTargetHttpMethod Post { get; } = new AppEngineHttpTargetHttpMethod("POST");
        /// <summary>
        /// HTTP GET
        /// </summary>
        public static AppEngineHttpTargetHttpMethod Get { get; } = new AppEngineHttpTargetHttpMethod("GET");
        /// <summary>
        /// HTTP HEAD
        /// </summary>
        public static AppEngineHttpTargetHttpMethod Head { get; } = new AppEngineHttpTargetHttpMethod("HEAD");
        /// <summary>
        /// HTTP PUT
        /// </summary>
        public static AppEngineHttpTargetHttpMethod Put { get; } = new AppEngineHttpTargetHttpMethod("PUT");
        /// <summary>
        /// HTTP DELETE
        /// </summary>
        public static AppEngineHttpTargetHttpMethod Delete { get; } = new AppEngineHttpTargetHttpMethod("DELETE");
        /// <summary>
        /// HTTP PATCH
        /// </summary>
        public static AppEngineHttpTargetHttpMethod Patch { get; } = new AppEngineHttpTargetHttpMethod("PATCH");
        /// <summary>
        /// HTTP OPTIONS
        /// </summary>
        public static AppEngineHttpTargetHttpMethod Options { get; } = new AppEngineHttpTargetHttpMethod("OPTIONS");

        public static bool operator ==(AppEngineHttpTargetHttpMethod left, AppEngineHttpTargetHttpMethod right) => left.Equals(right);
        public static bool operator !=(AppEngineHttpTargetHttpMethod left, AppEngineHttpTargetHttpMethod right) => !left.Equals(right);

        public static explicit operator string(AppEngineHttpTargetHttpMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppEngineHttpTargetHttpMethod other && Equals(other);
        public bool Equals(AppEngineHttpTargetHttpMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Which HTTP method to use for the request.
    /// </summary>
    [EnumType]
    public readonly struct HttpTargetHttpMethod : IEquatable<HttpTargetHttpMethod>
    {
        private readonly string _value;

        private HttpTargetHttpMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// HTTP method unspecified. Defaults to POST.
        /// </summary>
        public static HttpTargetHttpMethod HttpMethodUnspecified { get; } = new HttpTargetHttpMethod("HTTP_METHOD_UNSPECIFIED");
        /// <summary>
        /// HTTP POST
        /// </summary>
        public static HttpTargetHttpMethod Post { get; } = new HttpTargetHttpMethod("POST");
        /// <summary>
        /// HTTP GET
        /// </summary>
        public static HttpTargetHttpMethod Get { get; } = new HttpTargetHttpMethod("GET");
        /// <summary>
        /// HTTP HEAD
        /// </summary>
        public static HttpTargetHttpMethod Head { get; } = new HttpTargetHttpMethod("HEAD");
        /// <summary>
        /// HTTP PUT
        /// </summary>
        public static HttpTargetHttpMethod Put { get; } = new HttpTargetHttpMethod("PUT");
        /// <summary>
        /// HTTP DELETE
        /// </summary>
        public static HttpTargetHttpMethod Delete { get; } = new HttpTargetHttpMethod("DELETE");
        /// <summary>
        /// HTTP PATCH
        /// </summary>
        public static HttpTargetHttpMethod Patch { get; } = new HttpTargetHttpMethod("PATCH");
        /// <summary>
        /// HTTP OPTIONS
        /// </summary>
        public static HttpTargetHttpMethod Options { get; } = new HttpTargetHttpMethod("OPTIONS");

        public static bool operator ==(HttpTargetHttpMethod left, HttpTargetHttpMethod right) => left.Equals(right);
        public static bool operator !=(HttpTargetHttpMethod left, HttpTargetHttpMethod right) => !left.Equals(right);

        public static explicit operator string(HttpTargetHttpMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HttpTargetHttpMethod other && Equals(other);
        public bool Equals(HttpTargetHttpMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Output only. State of the job.
    /// </summary>
    [EnumType]
    public readonly struct JobState : IEquatable<JobState>
    {
        private readonly string _value;

        private JobState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified state.
        /// </summary>
        public static JobState StateUnspecified { get; } = new JobState("STATE_UNSPECIFIED");
        /// <summary>
        /// The job is executing normally.
        /// </summary>
        public static JobState Enabled { get; } = new JobState("ENABLED");
        /// <summary>
        /// The job is paused by the user. It will not execute. A user can intentionally pause the job using PauseJobRequest.
        /// </summary>
        public static JobState Paused { get; } = new JobState("PAUSED");
        /// <summary>
        /// The job is disabled by the system due to error. The user cannot directly set a job to be disabled.
        /// </summary>
        public static JobState Disabled { get; } = new JobState("DISABLED");
        /// <summary>
        /// The job state resulting from a failed CloudScheduler.UpdateJob operation. To recover a job from this state, retry CloudScheduler.UpdateJob until a successful response is received.
        /// </summary>
        public static JobState UpdateFailed { get; } = new JobState("UPDATE_FAILED");

        public static bool operator ==(JobState left, JobState right) => left.Equals(right);
        public static bool operator !=(JobState left, JobState right) => !left.Equals(right);

        public static explicit operator string(JobState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobState other && Equals(other);
        public bool Equals(JobState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
