// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudScheduler.V1Beta1
{
    public static class GetJob
    {
        /// <summary>
        /// Gets a job.
        /// </summary>
        public static Task<GetJobResult> InvokeAsync(GetJobArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetJobResult>("google-native:cloudscheduler/v1beta1:getJob", args ?? new GetJobArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a job.
        /// </summary>
        public static Output<GetJobResult> Invoke(GetJobInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetJobResult>("google-native:cloudscheduler/v1beta1:getJob", args ?? new GetJobInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetJobArgs : global::Pulumi.InvokeArgs
    {
        [Input("jobId", required: true)]
        public string JobId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetJobArgs()
        {
        }
        public static new GetJobArgs Empty => new GetJobArgs();
    }

    public sealed class GetJobInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("jobId", required: true)]
        public Input<string> JobId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetJobInvokeArgs()
        {
        }
        public static new GetJobInvokeArgs Empty => new GetJobInvokeArgs();
    }


    [OutputType]
    public sealed class GetJobResult
    {
        /// <summary>
        /// App Engine HTTP target.
        /// </summary>
        public readonly Outputs.AppEngineHttpTargetResponse AppEngineHttpTarget;
        /// <summary>
        /// The deadline for job attempts. If the request handler does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. The failed attempt can be viewed in execution logs. Cloud Scheduler will retry the job according to the RetryConfig. The default and the allowed values depend on the type of target: * For HTTP targets, the default is 3 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine HTTP targets, 0 indicates that the request has the default deadline. The default deadline depends on the scaling type of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. * For Pub/Sub targets, this field is ignored.
        /// </summary>
        public readonly string AttemptDeadline;
        /// <summary>
        /// Optionally caller-specified in CreateJob or UpdateJob. A human-readable description for the job. This string must not contain more than 500 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// HTTP target.
        /// </summary>
        public readonly Outputs.HttpTargetResponse HttpTarget;
        /// <summary>
        /// The time the last job attempt started.
        /// </summary>
        public readonly string LastAttemptTime;
        /// <summary>
        /// Immutable. This field is used to manage the legacy App Engine Cron jobs using the Cloud Scheduler API. If the field is set to true, the job will be considered a legacy job. Note that App Engine Cron jobs have fewer features than Cloud Scheduler jobs, e.g., are only limited to App Engine targets.
        /// </summary>
        public readonly bool LegacyAppEngineCron;
        /// <summary>
        /// Optionally caller-specified in CreateJob, after which it becomes output only. The job name. For example: `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`. * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the job's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Pub/Sub target.
        /// </summary>
        public readonly Outputs.PubsubTargetResponse PubsubTarget;
        /// <summary>
        /// Settings that determine the retry behavior.
        /// </summary>
        public readonly Outputs.RetryConfigResponse RetryConfig;
        /// <summary>
        /// Required, except when used with UpdateJob. Describes the schedule on which the job will be executed. The schedule can be either of the following types: * [Crontab](https://en.wikipedia.org/wiki/Cron#Overview) * English-like [schedule](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules) As a general rule, execution `n + 1` of a job will not begin until execution `n` has finished. Cloud Scheduler will never allow two simultaneously outstanding executions. For example, this implies that if the `n+1`th execution is scheduled to run at 16:00 but the `n`th execution takes until 16:15, the `n+1`th execution will not start until `16:15`. A scheduled start time will be delayed if the previous execution has not ended when its scheduled time occurs. If retry_count &gt; 0 and a job attempt fails, the job will be tried a total of retry_count times, with exponential backoff, until the next scheduled start time.
        /// </summary>
        public readonly string Schedule;
        /// <summary>
        /// The next time the job is scheduled. Note that this may be a retry of a previously failed attempt or the next execution time according to the schedule.
        /// </summary>
        public readonly string ScheduleTime;
        /// <summary>
        /// State of the job.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The response from the target for the last attempted execution.
        /// </summary>
        public readonly Outputs.StatusResponse Status;
        /// <summary>
        /// Specifies the time zone to be used in interpreting schedule. The value of this field must be a time zone name from the [tz database](http://en.wikipedia.org/wiki/Tz_database). Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
        /// </summary>
        public readonly string TimeZone;
        /// <summary>
        /// The creation time of the job.
        /// </summary>
        public readonly string UserUpdateTime;

        [OutputConstructor]
        private GetJobResult(
            Outputs.AppEngineHttpTargetResponse appEngineHttpTarget,

            string attemptDeadline,

            string description,

            Outputs.HttpTargetResponse httpTarget,

            string lastAttemptTime,

            bool legacyAppEngineCron,

            string name,

            Outputs.PubsubTargetResponse pubsubTarget,

            Outputs.RetryConfigResponse retryConfig,

            string schedule,

            string scheduleTime,

            string state,

            Outputs.StatusResponse status,

            string timeZone,

            string userUpdateTime)
        {
            AppEngineHttpTarget = appEngineHttpTarget;
            AttemptDeadline = attemptDeadline;
            Description = description;
            HttpTarget = httpTarget;
            LastAttemptTime = lastAttemptTime;
            LegacyAppEngineCron = legacyAppEngineCron;
            Name = name;
            PubsubTarget = pubsubTarget;
            RetryConfig = retryConfig;
            Schedule = schedule;
            ScheduleTime = scheduleTime;
            State = state;
            Status = status;
            TimeZone = timeZone;
            UserUpdateTime = userUpdateTime;
        }
    }
}
