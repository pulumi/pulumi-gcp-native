// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Run.V1alpha1.Outputs
{

    [OutputType]
    public sealed class ProbeResponse
    {
        /// <summary>
        /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. +optional
        /// </summary>
        public readonly int FailureThreshold;
        /// <summary>
        /// The action taken to determine the health of a container
        /// </summary>
        public readonly Outputs.HandlerResponse Handler;
        /// <summary>
        /// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes +optional
        /// </summary>
        public readonly int InitialDelaySeconds;
        /// <summary>
        /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. +optional
        /// </summary>
        public readonly int PeriodSeconds;
        /// <summary>
        /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1. +optional
        /// </summary>
        public readonly int SuccessThreshold;
        /// <summary>
        /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes +optional
        /// </summary>
        public readonly int TimeoutSeconds;

        [OutputConstructor]
        private ProbeResponse(
            int failureThreshold,

            Outputs.HandlerResponse handler,

            int initialDelaySeconds,

            int periodSeconds,

            int successThreshold,

            int timeoutSeconds)
        {
            FailureThreshold = failureThreshold;
            Handler = handler;
            InitialDelaySeconds = initialDelaySeconds;
            PeriodSeconds = periodSeconds;
            SuccessThreshold = successThreshold;
            TimeoutSeconds = timeoutSeconds;
        }
    }
}
