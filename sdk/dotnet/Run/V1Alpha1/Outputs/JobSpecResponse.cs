// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Run.V1Alpha1.Outputs
{

    /// <summary>
    /// JobSpec describes how the job execution will look like.
    /// </summary>
    [OutputType]
    public sealed class JobSpecResponse
    {
        /// <summary>
        /// Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional
        /// </summary>
        public readonly string ActiveDeadlineSeconds;
        /// <summary>
        /// Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional
        /// </summary>
        public readonly int BackoffLimit;
        /// <summary>
        /// Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
        /// </summary>
        public readonly int Completions;
        /// <summary>
        /// Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be &lt;= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) &lt; .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
        /// </summary>
        public readonly int Parallelism;
        /// <summary>
        /// Optional. Describes the instance that will be created when executing a job.
        /// </summary>
        public readonly Outputs.InstanceTemplateSpecResponse Template;
        /// <summary>
        /// Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional
        /// </summary>
        public readonly int TtlSecondsAfterFinished;

        [OutputConstructor]
        private JobSpecResponse(
            string activeDeadlineSeconds,

            int backoffLimit,

            int completions,

            int parallelism,

            Outputs.InstanceTemplateSpecResponse template,

            int ttlSecondsAfterFinished)
        {
            ActiveDeadlineSeconds = activeDeadlineSeconds;
            BackoffLimit = backoffLimit;
            Completions = completions;
            Parallelism = parallelism;
            Template = template;
            TtlSecondsAfterFinished = ttlSecondsAfterFinished;
        }
    }
}
