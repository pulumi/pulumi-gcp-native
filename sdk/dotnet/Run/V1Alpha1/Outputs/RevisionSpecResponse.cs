// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GcpNative.Run.V1Alpha1.Outputs
{

    [OutputType]
    public sealed class RevisionSpecResponse
    {
        /// <summary>
        /// ConcurrencyModel specifies the desired concurrency model (Single or Multi) for the Revision. Defaults to Multi. Deprecated in favor of ContainerConcurrency. +optional
        /// </summary>
        public readonly string ConcurrencyModel;
        /// <summary>
        /// Container defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of the fields of this Container, including: name, ports, and volumeMounts. The runtime contract is documented here: https://github.com/knative/serving/blob/master/docs/runtime-contract.md
        /// </summary>
        public readonly Outputs.ContainerResponse Container;
        /// <summary>
        /// (Optional) ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. Cloud Run fully managed: supported, defaults to 80 Cloud Run on GKE: supported, defaults to 0, which means concurrency to the application is not limited, and the system decides the target concurrency for the autoscaler.
        /// </summary>
        public readonly int ContainerConcurrency;
        /// <summary>
        /// Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerResponse> Containers;
        /// <summary>
        /// Deprecated and not currently populated by Cloud Run. See metadata.generation instead, which is the sequence number containing the latest generation of the desired state. Read-only.
        /// </summary>
        public readonly int Generation;
        /// <summary>
        /// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
        /// </summary>
        public readonly string ServiceAccountName;
        /// <summary>
        /// ServingState holds a value describing the state the resources are in for this Revision. Users must not specify this when creating a revision. It is expected that the system will manipulate this based on routability and load. Populated by the system. Read-only.
        /// </summary>
        public readonly string ServingState;
        /// <summary>
        /// TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Not currently used by Cloud Run.
        /// </summary>
        public readonly int TimeoutSeconds;
        public readonly ImmutableArray<Outputs.VolumeResponse> Volumes;

        [OutputConstructor]
        private RevisionSpecResponse(
            string concurrencyModel,

            Outputs.ContainerResponse container,

            int containerConcurrency,

            ImmutableArray<Outputs.ContainerResponse> containers,

            int generation,

            string serviceAccountName,

            string servingState,

            int timeoutSeconds,

            ImmutableArray<Outputs.VolumeResponse> volumes)
        {
            ConcurrencyModel = concurrencyModel;
            Container = container;
            ContainerConcurrency = containerConcurrency;
            Containers = containers;
            Generation = generation;
            ServiceAccountName = serviceAccountName;
            ServingState = servingState;
            TimeoutSeconds = timeoutSeconds;
            Volumes = volumes;
        }
    }
}
