// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Run.V1
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode of the certificate.
    /// </summary>
    [EnumType]
    public readonly struct DomainMappingSpecCertificateMode : IEquatable<DomainMappingSpecCertificateMode>
    {
        private readonly string _value;

        private DomainMappingSpecCertificateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainMappingSpecCertificateMode CertificateModeUnspecified { get; } = new DomainMappingSpecCertificateMode("CERTIFICATE_MODE_UNSPECIFIED");
        /// <summary>
        /// Do not provision an HTTPS certificate.
        /// </summary>
        public static DomainMappingSpecCertificateMode None { get; } = new DomainMappingSpecCertificateMode("NONE");
        /// <summary>
        /// Automatically provisions an HTTPS certificate via GoogleCA or LetsEncrypt.
        /// </summary>
        public static DomainMappingSpecCertificateMode Automatic { get; } = new DomainMappingSpecCertificateMode("AUTOMATIC");

        public static bool operator ==(DomainMappingSpecCertificateMode left, DomainMappingSpecCertificateMode right) => left.Equals(right);
        public static bool operator !=(DomainMappingSpecCertificateMode left, DomainMappingSpecCertificateMode right) => !left.Equals(right);

        public static explicit operator string(DomainMappingSpecCertificateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainMappingSpecCertificateMode other && Equals(other);
        public bool Equals(DomainMappingSpecCertificateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Resource record type. Example: `AAAA`.
    /// </summary>
    [EnumType]
    public readonly struct ResourceRecordType : IEquatable<ResourceRecordType>
    {
        private readonly string _value;

        private ResourceRecordType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// An unknown resource record.
        /// </summary>
        public static ResourceRecordType RecordTypeUnspecified { get; } = new ResourceRecordType("RECORD_TYPE_UNSPECIFIED");
        /// <summary>
        /// An A resource record. Data is an IPv4 address.
        /// </summary>
        public static ResourceRecordType A { get; } = new ResourceRecordType("A");
        /// <summary>
        /// An AAAA resource record. Data is an IPv6 address.
        /// </summary>
        public static ResourceRecordType Aaaa { get; } = new ResourceRecordType("AAAA");
        /// <summary>
        /// A CNAME resource record. Data is a domain name to be aliased.
        /// </summary>
        public static ResourceRecordType Cname { get; } = new ResourceRecordType("CNAME");

        public static bool operator ==(ResourceRecordType left, ResourceRecordType right) => left.Equals(right);
        public static bool operator !=(ResourceRecordType left, ResourceRecordType right) => !left.Equals(right);

        public static explicit operator string(ResourceRecordType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceRecordType other && Equals(other);
        public bool Equals(ResourceRecordType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
