// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Run.V1.Outputs
{

    /// <summary>
    /// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
    /// </summary>
    [OutputType]
    public sealed class ContainerResponse
    {
        /// <summary>
        /// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        /// </summary>
        public readonly ImmutableArray<string> Args;
        /// <summary>
        /// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        /// </summary>
        public readonly ImmutableArray<string> Command;
        /// <summary>
        /// List of environment variables to set in the container.
        /// </summary>
        public readonly ImmutableArray<Outputs.EnvVarResponse> Env;
        /// <summary>
        /// Not supported by Cloud Run.
        /// </summary>
        public readonly ImmutableArray<Outputs.EnvFromSourceResponse> EnvFrom;
        /// <summary>
        /// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        /// </summary>
        public readonly string ImagePullPolicy;
        /// <summary>
        /// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        /// </summary>
        public readonly Outputs.ProbeResponse LivenessProbe;
        /// <summary>
        /// Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerPortResponse> Ports;
        /// <summary>
        /// Not supported by Cloud Run.
        /// </summary>
        public readonly Outputs.ProbeResponse ReadinessProbe;
        /// <summary>
        /// Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// </summary>
        public readonly Outputs.ResourceRequirementsResponse Resources;
        /// <summary>
        /// Not supported by Cloud Run.
        /// </summary>
        public readonly Outputs.SecurityContextResponse SecurityContext;
        /// <summary>
        /// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not receive traffic if the probe fails. If not provided, a default startup probe with TCP socket action is used. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        /// </summary>
        public readonly Outputs.ProbeResponse StartupProbe;
        /// <summary>
        /// Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
        /// </summary>
        public readonly string TerminationMessagePath;
        /// <summary>
        /// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        /// </summary>
        public readonly string TerminationMessagePolicy;
        /// <summary>
        /// Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
        /// </summary>
        public readonly ImmutableArray<Outputs.VolumeMountResponse> VolumeMounts;
        /// <summary>
        /// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
        /// </summary>
        public readonly string WorkingDir;

        [OutputConstructor]
        private ContainerResponse(
            ImmutableArray<string> args,

            ImmutableArray<string> command,

            ImmutableArray<Outputs.EnvVarResponse> env,

            ImmutableArray<Outputs.EnvFromSourceResponse> envFrom,

            string image,

            string imagePullPolicy,

            Outputs.ProbeResponse livenessProbe,

            string name,

            ImmutableArray<Outputs.ContainerPortResponse> ports,

            Outputs.ProbeResponse readinessProbe,

            Outputs.ResourceRequirementsResponse resources,

            Outputs.SecurityContextResponse securityContext,

            Outputs.ProbeResponse startupProbe,

            string terminationMessagePath,

            string terminationMessagePolicy,

            ImmutableArray<Outputs.VolumeMountResponse> volumeMounts,

            string workingDir)
        {
            Args = args;
            Command = command;
            Env = env;
            EnvFrom = envFrom;
            Image = image;
            ImagePullPolicy = imagePullPolicy;
            LivenessProbe = livenessProbe;
            Name = name;
            Ports = ports;
            ReadinessProbe = readinessProbe;
            Resources = resources;
            SecurityContext = securityContext;
            StartupProbe = startupProbe;
            TerminationMessagePath = terminationMessagePath;
            TerminationMessagePolicy = terminationMessagePolicy;
            VolumeMounts = volumeMounts;
            WorkingDir = workingDir;
        }
    }
}
