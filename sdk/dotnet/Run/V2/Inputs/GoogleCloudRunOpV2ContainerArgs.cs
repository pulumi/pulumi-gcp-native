// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Run.V2.Inputs
{

    /// <summary>
    /// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
    /// </summary>
    public sealed class GoogleCloudRunOpV2ContainerArgs : Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;

        /// <summary>
        /// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        /// </summary>
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        [Input("command")]
        private InputList<string>? _command;

        /// <summary>
        /// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        /// </summary>
        public InputList<string> Command
        {
            get => _command ?? (_command = new InputList<string>());
            set => _command = value;
        }

        [Input("env")]
        private InputList<Inputs.GoogleCloudRunOpV2EnvVarArgs>? _env;

        /// <summary>
        /// List of environment variables to set in the container.
        /// </summary>
        public InputList<Inputs.GoogleCloudRunOpV2EnvVarArgs> Env
        {
            get => _env ?? (_env = new InputList<Inputs.GoogleCloudRunOpV2EnvVarArgs>());
            set => _env = value;
        }

        /// <summary>
        /// URL of the Container image in Google Container Registry or Docker More info: https://kubernetes.io/docs/concepts/containers/images
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// Name of the container specified as a DNS_LABEL.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ports")]
        private InputList<Inputs.GoogleCloudRunOpV2ContainerPortArgs>? _ports;

        /// <summary>
        /// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
        /// </summary>
        public InputList<Inputs.GoogleCloudRunOpV2ContainerPortArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<Inputs.GoogleCloudRunOpV2ContainerPortArgs>());
            set => _ports = value;
        }

        /// <summary>
        /// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// </summary>
        [Input("resources")]
        public Input<Inputs.GoogleCloudRunOpV2ResourceRequirementsArgs>? Resources { get; set; }

        [Input("volumeMounts")]
        private InputList<Inputs.GoogleCloudRunOpV2VolumeMountArgs>? _volumeMounts;

        /// <summary>
        /// Volume to mount into the container's filesystem.
        /// </summary>
        public InputList<Inputs.GoogleCloudRunOpV2VolumeMountArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.GoogleCloudRunOpV2VolumeMountArgs>());
            set => _volumeMounts = value;
        }

        public GoogleCloudRunOpV2ContainerArgs()
        {
        }
    }
}
