// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ApigeeRegistry.V1
{
    public static class GetSpec
    {
        /// <summary>
        /// Returns a specified spec.
        /// </summary>
        public static Task<GetSpecResult> InvokeAsync(GetSpecArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSpecResult>("google-native:apigeeregistry/v1:getSpec", args ?? new GetSpecArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a specified spec.
        /// </summary>
        public static Output<GetSpecResult> Invoke(GetSpecInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSpecResult>("google-native:apigeeregistry/v1:getSpec", args ?? new GetSpecInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSpecArgs : global::Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public string ApiId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("specId", required: true)]
        public string SpecId { get; set; } = null!;

        [Input("versionId", required: true)]
        public string VersionId { get; set; } = null!;

        public GetSpecArgs()
        {
        }
        public static new GetSpecArgs Empty => new GetSpecArgs();
    }

    public sealed class GetSpecInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("specId", required: true)]
        public Input<string> SpecId { get; set; } = null!;

        [Input("versionId", required: true)]
        public Input<string> VersionId { get; set; } = null!;

        public GetSpecInvokeArgs()
        {
        }
        public static new GetSpecInvokeArgs Empty => new GetSpecInvokeArgs();
    }


    [OutputType]
    public sealed class GetSpecResult
    {
        /// <summary>
        /// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// Input only. The contents of the spec. Provided by API callers when specs are created or updated. To access the contents of a spec, use GetApiSpecContents.
        /// </summary>
        public readonly string Contents;
        /// <summary>
        /// Creation timestamp; when the spec resource was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// A detailed description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A possibly-hierarchical name used to refer to the spec from other specs.
        /// </summary>
        public readonly string Filename;
        /// <summary>
        /// A SHA-256 hash of the spec's contents. If the spec is gzipped, this is the hash of the uncompressed spec.
        /// </summary>
        public readonly string Hash;
        /// <summary>
        /// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// A style (format) descriptor for this spec that is specified as a Media Type (https://en.wikipedia.org/wiki/Media_type). Possible values include `application/vnd.apigee.proto`, `application/vnd.apigee.openapi`, and `application/vnd.apigee.graphql`, with possible suffixes representing compression types. These hypothetical names are defined in the vendor tree defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
        /// </summary>
        public readonly string MimeType;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Revision creation timestamp; when the represented revision was created.
        /// </summary>
        public readonly string RevisionCreateTime;
        /// <summary>
        /// Immutable. The revision ID of the spec. A new revision is committed whenever the spec contents are changed. The format is an 8-character hexadecimal string.
        /// </summary>
        public readonly string RevisionId;
        /// <summary>
        /// Last update timestamp: when the represented revision was last modified.
        /// </summary>
        public readonly string RevisionUpdateTime;
        /// <summary>
        /// The size of the spec file in bytes. If the spec is gzipped, this is the size of the uncompressed spec.
        /// </summary>
        public readonly int SizeBytes;
        /// <summary>
        /// The original source URI of the spec (if one exists). This is an external location that can be used for reference purposes but which may not be authoritative since this external resource may change after the spec is retrieved.
        /// </summary>
        public readonly string SourceUri;

        [OutputConstructor]
        private GetSpecResult(
            ImmutableDictionary<string, string> annotations,

            string contents,

            string createTime,

            string description,

            string filename,

            string hash,

            ImmutableDictionary<string, string> labels,

            string mimeType,

            string name,

            string revisionCreateTime,

            string revisionId,

            string revisionUpdateTime,

            int sizeBytes,

            string sourceUri)
        {
            Annotations = annotations;
            Contents = contents;
            CreateTime = createTime;
            Description = description;
            Filename = filename;
            Hash = hash;
            Labels = labels;
            MimeType = mimeType;
            Name = name;
            RevisionCreateTime = revisionCreateTime;
            RevisionId = revisionId;
            RevisionUpdateTime = revisionUpdateTime;
            SizeBytes = sizeBytes;
            SourceUri = sourceUri;
        }
    }
}
