// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ApigeeRegistry.V1
{
    public static class GetDeployment
    {
        /// <summary>
        /// GetApiDeployment returns a specified deployment.
        /// </summary>
        public static Task<GetDeploymentResult> InvokeAsync(GetDeploymentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDeploymentResult>("google-native:apigeeregistry/v1:getDeployment", args ?? new GetDeploymentArgs(), options.WithDefaults());

        /// <summary>
        /// GetApiDeployment returns a specified deployment.
        /// </summary>
        public static Output<GetDeploymentResult> Invoke(GetDeploymentInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDeploymentResult>("google-native:apigeeregistry/v1:getDeployment", args ?? new GetDeploymentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeploymentArgs : global::Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public string ApiId { get; set; } = null!;

        [Input("deploymentId", required: true)]
        public string DeploymentId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDeploymentArgs()
        {
        }
        public static new GetDeploymentArgs Empty => new GetDeploymentArgs();
    }

    public sealed class GetDeploymentInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        [Input("deploymentId", required: true)]
        public Input<string> DeploymentId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDeploymentInvokeArgs()
        {
        }
        public static new GetDeploymentInvokeArgs Empty => new GetDeploymentInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeploymentResult
    {
        /// <summary>
        /// Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.
        /// </summary>
        public readonly string AccessGuidance;
        /// <summary>
        /// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// The full resource name (including revision id) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: apis/{api}/deployments/{deployment}
        /// </summary>
        public readonly string ApiSpecRevision;
        /// <summary>
        /// Creation timestamp; when the deployment resource was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// A detailed description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Human-meaningful name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The address where the deployment is serving. Changes to this value will update the revision.
        /// </summary>
        public readonly string EndpointUri;
        /// <summary>
        /// The address of the external channel of the API (e.g. the Developer Portal). Changes to this value will not affect the revision.
        /// </summary>
        public readonly string ExternalChannelUri;
        /// <summary>
        /// Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.
        /// </summary>
        public readonly string IntendedAudience;
        /// <summary>
        /// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "apigeeregistry.googleapis.com/" and cannot be changed.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Revision creation timestamp; when the represented revision was created.
        /// </summary>
        public readonly string RevisionCreateTime;
        /// <summary>
        /// Immutable. The revision ID of the deployment. A new revision is committed whenever the deployment contents are changed. The format is an 8-character hexadecimal string.
        /// </summary>
        public readonly string RevisionId;
        /// <summary>
        /// Last update timestamp: when the represented revision was last modified.
        /// </summary>
        public readonly string RevisionUpdateTime;

        [OutputConstructor]
        private GetDeploymentResult(
            string accessGuidance,

            ImmutableDictionary<string, string> annotations,

            string apiSpecRevision,

            string createTime,

            string description,

            string displayName,

            string endpointUri,

            string externalChannelUri,

            string intendedAudience,

            ImmutableDictionary<string, string> labels,

            string name,

            string revisionCreateTime,

            string revisionId,

            string revisionUpdateTime)
        {
            AccessGuidance = accessGuidance;
            Annotations = annotations;
            ApiSpecRevision = apiSpecRevision;
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            EndpointUri = endpointUri;
            ExternalChannelUri = externalChannelUri;
            IntendedAudience = intendedAudience;
            Labels = labels;
            Name = name;
            RevisionCreateTime = revisionCreateTime;
            RevisionId = revisionId;
            RevisionUpdateTime = revisionUpdateTime;
        }
    }
}
