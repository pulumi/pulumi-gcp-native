// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ApigeeRegistry.V1
{
    public static class GetArtifact
    {
        /// <summary>
        /// Returns a specified artifact.
        /// </summary>
        public static Task<GetArtifactResult> InvokeAsync(GetArtifactArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetArtifactResult>("google-native:apigeeregistry/v1:getArtifact", args ?? new GetArtifactArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a specified artifact.
        /// </summary>
        public static Output<GetArtifactResult> Invoke(GetArtifactInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetArtifactResult>("google-native:apigeeregistry/v1:getArtifact", args ?? new GetArtifactInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetArtifactArgs : global::Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public string ApiId { get; set; } = null!;

        [Input("artifactId", required: true)]
        public string ArtifactId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("specId", required: true)]
        public string SpecId { get; set; } = null!;

        [Input("versionId", required: true)]
        public string VersionId { get; set; } = null!;

        public GetArtifactArgs()
        {
        }
        public static new GetArtifactArgs Empty => new GetArtifactArgs();
    }

    public sealed class GetArtifactInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        [Input("artifactId", required: true)]
        public Input<string> ArtifactId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("specId", required: true)]
        public Input<string> SpecId { get; set; } = null!;

        [Input("versionId", required: true)]
        public Input<string> VersionId { get; set; } = null!;

        public GetArtifactInvokeArgs()
        {
        }
        public static new GetArtifactInvokeArgs Empty => new GetArtifactInvokeArgs();
    }


    [OutputType]
    public sealed class GetArtifactResult
    {
        /// <summary>
        /// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
        /// </summary>
        public readonly string Contents;
        /// <summary>
        /// Creation timestamp.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
        /// </summary>
        public readonly string Hash;
        /// <summary>
        /// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
        /// </summary>
        public readonly string MimeType;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
        /// </summary>
        public readonly int SizeBytes;
        /// <summary>
        /// Last update timestamp.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetArtifactResult(
            string contents,

            string createTime,

            string hash,

            string mimeType,

            string name,

            int sizeBytes,

            string updateTime)
        {
            Contents = contents;
            CreateTime = createTime;
            Hash = hash;
            MimeType = mimeType;
            Name = name;
            SizeBytes = sizeBytes;
            UpdateTime = updateTime;
        }
    }
}
