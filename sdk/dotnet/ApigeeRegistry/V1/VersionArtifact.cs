// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ApigeeRegistry.V1
{
    /// <summary>
    /// CreateArtifact creates a specified artifact.
    /// </summary>
    [GoogleNativeResourceType("google-native:apigeeregistry/v1:VersionArtifact")]
    public partial class VersionArtifact : Pulumi.CustomResource
    {
        /// <summary>
        /// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
        /// </summary>
        [Output("contents")]
        public Output<string> Contents { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
        /// </summary>
        [Output("hash")]
        public Output<string> Hash { get; private set; } = null!;

        /// <summary>
        /// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
        /// </summary>
        [Output("mimeType")]
        public Output<string> MimeType { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
        /// </summary>
        [Output("sizeBytes")]
        public Output<int> SizeBytes { get; private set; } = null!;

        /// <summary>
        /// Last update timestamp.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a VersionArtifact resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VersionArtifact(string name, VersionArtifactArgs args, CustomResourceOptions? options = null)
            : base("google-native:apigeeregistry/v1:VersionArtifact", name, args ?? new VersionArtifactArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VersionArtifact(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:apigeeregistry/v1:VersionArtifact", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VersionArtifact resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VersionArtifact Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VersionArtifact(name, id, options);
        }
    }

    public sealed class VersionArtifactArgs : Pulumi.ResourceArgs
    {
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        /// <summary>
        /// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
        /// </summary>
        [Input("artifactId", required: true)]
        public Input<string> ArtifactId { get; set; } = null!;

        /// <summary>
        /// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
        /// </summary>
        [Input("contents")]
        public Input<string>? Contents { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
        /// </summary>
        [Input("mimeType")]
        public Input<string>? MimeType { get; set; }

        /// <summary>
        /// Resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("versionId", required: true)]
        public Input<string> VersionId { get; set; } = null!;

        public VersionArtifactArgs()
        {
        }
    }
}
