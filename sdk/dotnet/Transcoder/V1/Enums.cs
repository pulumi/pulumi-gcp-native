// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Transcoder.V1
{
    /// <summary>
    /// Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
    /// </summary>
    [EnumType]
    public readonly struct AnimationFadeFadeType : IEquatable<AnimationFadeFadeType>
    {
        private readonly string _value;

        private AnimationFadeFadeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The fade type is not specified.
        /// </summary>
        public static AnimationFadeFadeType FadeTypeUnspecified { get; } = new AnimationFadeFadeType("FADE_TYPE_UNSPECIFIED");
        /// <summary>
        /// Fade the overlay object into view.
        /// </summary>
        public static AnimationFadeFadeType FadeIn { get; } = new AnimationFadeFadeType("FADE_IN");
        /// <summary>
        /// Fade the overlay object out of view.
        /// </summary>
        public static AnimationFadeFadeType FadeOut { get; } = new AnimationFadeFadeType("FADE_OUT");

        public static bool operator ==(AnimationFadeFadeType left, AnimationFadeFadeType right) => left.Equals(right);
        public static bool operator !=(AnimationFadeFadeType left, AnimationFadeFadeType right) => !left.Equals(right);

        public static explicit operator string(AnimationFadeFadeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnimationFadeFadeType other && Equals(other);
        public bool Equals(AnimationFadeFadeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Type of the manifest, can be `HLS` or `DASH`.
    /// </summary>
    [EnumType]
    public readonly struct ManifestType : IEquatable<ManifestType>
    {
        private readonly string _value;

        private ManifestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The manifest type is not specified.
        /// </summary>
        public static ManifestType ManifestTypeUnspecified { get; } = new ManifestType("MANIFEST_TYPE_UNSPECIFIED");
        /// <summary>
        /// Create `HLS` manifest. The corresponding file extension is `.m3u8`.
        /// </summary>
        public static ManifestType Hls { get; } = new ManifestType("HLS");
        /// <summary>
        /// Create `DASH` manifest. The corresponding file extension is `.mpd`.
        /// </summary>
        public static ManifestType Dash { get; } = new ManifestType("DASH");

        public static bool operator ==(ManifestType left, ManifestType right) => left.Equals(right);
        public static bool operator !=(ManifestType left, ManifestType right) => !left.Equals(right);

        public static explicit operator string(ManifestType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManifestType other && Equals(other);
        public bool Equals(ManifestType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
