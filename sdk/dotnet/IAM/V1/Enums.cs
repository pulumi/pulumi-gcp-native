// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.IAM.V1
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Immutable. The specifications for the key.
    /// </summary>
    [EnumType]
    public readonly struct KeyDataKeySpec : IEquatable<KeyDataKeySpec>
    {
        private readonly string _value;

        private KeyDataKeySpec(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No key specification specified.
        /// </summary>
        public static KeyDataKeySpec KeySpecUnspecified { get; } = new KeyDataKeySpec("KEY_SPEC_UNSPECIFIED");
        /// <summary>
        /// A 2048 bit RSA key.
        /// </summary>
        public static KeyDataKeySpec Rsa2048 { get; } = new KeyDataKeySpec("RSA_2048");
        /// <summary>
        /// A 3072 bit RSA key.
        /// </summary>
        public static KeyDataKeySpec Rsa3072 { get; } = new KeyDataKeySpec("RSA_3072");
        /// <summary>
        /// A 4096 bit RSA key.
        /// </summary>
        public static KeyDataKeySpec Rsa4096 { get; } = new KeyDataKeySpec("RSA_4096");

        public static bool operator ==(KeyDataKeySpec left, KeyDataKeySpec right) => left.Equals(right);
        public static bool operator !=(KeyDataKeySpec left, KeyDataKeySpec right) => !left.Equals(right);

        public static explicit operator string(KeyDataKeySpec value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyDataKeySpec other && Equals(other);
        public bool Equals(KeyDataKeySpec other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Which type of key and algorithm to use for the key. The default is currently a 2K RSA key. However this may change in the future.
    /// </summary>
    [EnumType]
    public readonly struct KeyKeyAlgorithm : IEquatable<KeyKeyAlgorithm>
    {
        private readonly string _value;

        private KeyKeyAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// An unspecified key algorithm.
        /// </summary>
        public static KeyKeyAlgorithm KeyAlgUnspecified { get; } = new KeyKeyAlgorithm("KEY_ALG_UNSPECIFIED");
        /// <summary>
        /// 1k RSA Key.
        /// </summary>
        public static KeyKeyAlgorithm KeyAlgRsa1024 { get; } = new KeyKeyAlgorithm("KEY_ALG_RSA_1024");
        /// <summary>
        /// 2k RSA Key.
        /// </summary>
        public static KeyKeyAlgorithm KeyAlgRsa2048 { get; } = new KeyKeyAlgorithm("KEY_ALG_RSA_2048");

        public static bool operator ==(KeyKeyAlgorithm left, KeyKeyAlgorithm right) => left.Equals(right);
        public static bool operator !=(KeyKeyAlgorithm left, KeyKeyAlgorithm right) => !left.Equals(right);

        public static explicit operator string(KeyKeyAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyKeyAlgorithm other && Equals(other);
        public bool Equals(KeyKeyAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The output format of the private key. The default value is `TYPE_GOOGLE_CREDENTIALS_FILE`, which is the Google Credentials File format.
    /// </summary>
    [EnumType]
    public readonly struct KeyPrivateKeyType : IEquatable<KeyPrivateKeyType>
    {
        private readonly string _value;

        private KeyPrivateKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`.
        /// </summary>
        public static KeyPrivateKeyType TypeUnspecified { get; } = new KeyPrivateKeyType("TYPE_UNSPECIFIED");
        /// <summary>
        /// PKCS12 format. The password for the PKCS12 file is `notasecret`. For more information, see https://tools.ietf.org/html/rfc7292.
        /// </summary>
        public static KeyPrivateKeyType TypePkcs12File { get; } = new KeyPrivateKeyType("TYPE_PKCS12_FILE");
        /// <summary>
        /// Google Credentials File format.
        /// </summary>
        public static KeyPrivateKeyType TypeGoogleCredentialsFile { get; } = new KeyPrivateKeyType("TYPE_GOOGLE_CREDENTIALS_FILE");

        public static bool operator ==(KeyPrivateKeyType left, KeyPrivateKeyType right) => left.Equals(right);
        public static bool operator !=(KeyPrivateKeyType left, KeyPrivateKeyType right) => !left.Equals(right);

        public static explicit operator string(KeyPrivateKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyPrivateKeyType other && Equals(other);
        public bool Equals(KeyPrivateKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current launch stage of the role. If the `ALPHA` launch stage has been selected for a role, the `stage` field will not be included in the returned definition for the role.
    /// </summary>
    [EnumType]
    public readonly struct OrganizationRoleStage : IEquatable<OrganizationRoleStage>
    {
        private readonly string _value;

        private OrganizationRoleStage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The user has indicated this role is currently in an Alpha phase. If this launch stage is selected, the `stage` field will not be included when requesting the definition for a given role.
        /// </summary>
        public static OrganizationRoleStage Alpha { get; } = new OrganizationRoleStage("ALPHA");
        /// <summary>
        /// The user has indicated this role is currently in a Beta phase.
        /// </summary>
        public static OrganizationRoleStage Beta { get; } = new OrganizationRoleStage("BETA");
        /// <summary>
        /// The user has indicated this role is generally available.
        /// </summary>
        public static OrganizationRoleStage Ga { get; } = new OrganizationRoleStage("GA");
        /// <summary>
        /// The user has indicated this role is being deprecated.
        /// </summary>
        public static OrganizationRoleStage Deprecated { get; } = new OrganizationRoleStage("DEPRECATED");
        /// <summary>
        /// This role is disabled and will not contribute permissions to any principals it is granted to in policies.
        /// </summary>
        public static OrganizationRoleStage Disabled { get; } = new OrganizationRoleStage("DISABLED");
        /// <summary>
        /// The user has indicated this role is currently in an EAP phase.
        /// </summary>
        public static OrganizationRoleStage Eap { get; } = new OrganizationRoleStage("EAP");

        public static bool operator ==(OrganizationRoleStage left, OrganizationRoleStage right) => left.Equals(right);
        public static bool operator !=(OrganizationRoleStage left, OrganizationRoleStage right) => !left.Equals(right);

        public static explicit operator string(OrganizationRoleStage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrganizationRoleStage other && Equals(other);
        public bool Equals(OrganizationRoleStage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current launch stage of the role. If the `ALPHA` launch stage has been selected for a role, the `stage` field will not be included in the returned definition for the role.
    /// </summary>
    [EnumType]
    public readonly struct RoleStage : IEquatable<RoleStage>
    {
        private readonly string _value;

        private RoleStage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The user has indicated this role is currently in an Alpha phase. If this launch stage is selected, the `stage` field will not be included when requesting the definition for a given role.
        /// </summary>
        public static RoleStage Alpha { get; } = new RoleStage("ALPHA");
        /// <summary>
        /// The user has indicated this role is currently in a Beta phase.
        /// </summary>
        public static RoleStage Beta { get; } = new RoleStage("BETA");
        /// <summary>
        /// The user has indicated this role is generally available.
        /// </summary>
        public static RoleStage Ga { get; } = new RoleStage("GA");
        /// <summary>
        /// The user has indicated this role is being deprecated.
        /// </summary>
        public static RoleStage Deprecated { get; } = new RoleStage("DEPRECATED");
        /// <summary>
        /// This role is disabled and will not contribute permissions to any principals it is granted to in policies.
        /// </summary>
        public static RoleStage Disabled { get; } = new RoleStage("DISABLED");
        /// <summary>
        /// The user has indicated this role is currently in an EAP phase.
        /// </summary>
        public static RoleStage Eap { get; } = new RoleStage("EAP");

        public static bool operator ==(RoleStage left, RoleStage right) => left.Equals(right);
        public static bool operator !=(RoleStage left, RoleStage right) => !left.Equals(right);

        public static explicit operator string(RoleStage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoleStage other && Equals(other);
        public bool Equals(RoleStage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Immutable. The purpose of the key.
    /// </summary>
    [EnumType]
    public readonly struct WorkforcePoolKeyUse : IEquatable<WorkforcePoolKeyUse>
    {
        private readonly string _value;

        private WorkforcePoolKeyUse(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// KeyUse unspecified.
        /// </summary>
        public static WorkforcePoolKeyUse KeyUseUnspecified { get; } = new WorkforcePoolKeyUse("KEY_USE_UNSPECIFIED");
        /// <summary>
        /// The key is used for encryption.
        /// </summary>
        public static WorkforcePoolKeyUse Encryption { get; } = new WorkforcePoolKeyUse("ENCRYPTION");

        public static bool operator ==(WorkforcePoolKeyUse left, WorkforcePoolKeyUse right) => left.Equals(right);
        public static bool operator !=(WorkforcePoolKeyUse left, WorkforcePoolKeyUse right) => !left.Equals(right);

        public static explicit operator string(WorkforcePoolKeyUse value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkforcePoolKeyUse other && Equals(other);
        public bool Equals(WorkforcePoolKeyUse other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Immutable. The purpose of the key.
    /// </summary>
    [EnumType]
    public readonly struct WorkloadIdentityPoolKeyUse : IEquatable<WorkloadIdentityPoolKeyUse>
    {
        private readonly string _value;

        private WorkloadIdentityPoolKeyUse(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The key use is not known.
        /// </summary>
        public static WorkloadIdentityPoolKeyUse KeyUseUnspecified { get; } = new WorkloadIdentityPoolKeyUse("KEY_USE_UNSPECIFIED");
        /// <summary>
        /// The public key is used for encryption purposes.
        /// </summary>
        public static WorkloadIdentityPoolKeyUse Encryption { get; } = new WorkloadIdentityPoolKeyUse("ENCRYPTION");

        public static bool operator ==(WorkloadIdentityPoolKeyUse left, WorkloadIdentityPoolKeyUse right) => left.Equals(right);
        public static bool operator !=(WorkloadIdentityPoolKeyUse left, WorkloadIdentityPoolKeyUse right) => !left.Equals(right);

        public static explicit operator string(WorkloadIdentityPoolKeyUse value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkloadIdentityPoolKeyUse other && Equals(other);
        public bool Equals(WorkloadIdentityPoolKeyUse other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
