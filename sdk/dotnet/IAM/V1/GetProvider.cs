// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.IAM.V1
{
    public static class GetProvider
    {
        /// <summary>
        /// Gets an individual WorkloadIdentityPoolProvider.
        /// </summary>
        public static Task<GetProviderResult> InvokeAsync(GetProviderArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProviderResult>("google-native:iam/v1:getProvider", args ?? new GetProviderArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an individual WorkloadIdentityPoolProvider.
        /// </summary>
        public static Output<GetProviderResult> Invoke(GetProviderInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetProviderResult>("google-native:iam/v1:getProvider", args ?? new GetProviderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProviderArgs : Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("providerId", required: true)]
        public string ProviderId { get; set; } = null!;

        [Input("workloadIdentityPoolId", required: true)]
        public string WorkloadIdentityPoolId { get; set; } = null!;

        public GetProviderArgs()
        {
        }
    }

    public sealed class GetProviderInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("providerId", required: true)]
        public Input<string> ProviderId { get; set; } = null!;

        [Input("workloadIdentityPoolId", required: true)]
        public Input<string> WorkloadIdentityPoolId { get; set; } = null!;

        public GetProviderInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProviderResult
    {
        /// <summary>
        /// [A Common Expression Language](https://opensource.google/projects/cel) expression, in plain text, to restrict what otherwise valid authentication credentials issued by the provider should not be accepted. The expression must output a boolean representing whether to allow the federation. The following keywords may be referenced in the expressions: * `assertion`: JSON representing the authentication credential issued by the provider. * `google`: The Google attributes mapped from the assertion in the `attribute_mappings`. * `attribute`: The custom attributes mapped from the assertion in the `attribute_mappings`. The maximum length of the attribute condition expression is 4096 characters. If unspecified, all valid authentication credential are accepted. The following example shows how to only allow credentials with a mapped `google.groups` value of `admins`: ``` "'admins' in google.groups" ```
        /// </summary>
        public readonly string AttributeCondition;
        /// <summary>
        /// Maps attributes from authentication credentials issued by an external identity provider to Google Cloud attributes, such as `subject` and `segment`. Each key must be a string specifying the Google Cloud IAM attribute to map to. The following keys are supported: * `google.subject`: The principal IAM is authenticating. You can reference this value in IAM bindings. This is also the subject that appears in Cloud Logging logs. Cannot exceed 127 characters. * `google.groups`: Groups the external identity belongs to. You can grant groups access to resources using an IAM `principalSet` binding; access applies to all members of the group. You can also provide custom attributes by specifying `attribute.{custom_attribute}`, where `{custom_attribute}` is the name of the custom attribute to be mapped. You can define a maximum of 50 custom attributes. The maximum length of a mapped attribute key is 100 characters, and the key may only contain the characters [a-z0-9_]. You can reference these attributes in IAM policies to define fine-grained access for a workload to Google Cloud resources. For example: * `google.subject`: `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}` * `google.groups`: `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}` * `attribute.{custom_attribute}`: `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}` Each value must be a [Common Expression Language] (https://opensource.google/projects/cel) function that maps an identity provider credential to the normalized attribute specified by the corresponding map key. You can use the `assertion` keyword in the expression to access a JSON representation of the authentication credential issued by the provider. The maximum length of an attribute mapping expression is 2048 characters. When evaluated, the total size of all mapped attributes must not exceed 8KB. For AWS providers, if no attribute mapping is defined, the following default mapping applies: ``` { "google.subject":"assertion.arn", "attribute.aws_role": "assertion.arn.contains('assumed-role')" " ? assertion.arn.extract('{account_arn}assumed-role/')" " + 'assumed-role/'" " + assertion.arn.extract('assumed-role/{role_name}/')" " : assertion.arn", } ``` If any custom attribute mappings are defined, they must include a mapping to the `google.subject` attribute. For OIDC providers, you must supply a custom mapping, which must include the `google.subject` attribute. For example, the following maps the `sub` claim of the incoming credential to the `subject` attribute on a Google token: ``` {"google.subject": "assertion.sub"} ```
        /// </summary>
        public readonly ImmutableDictionary<string, string> AttributeMapping;
        /// <summary>
        /// An Amazon Web Services identity provider.
        /// </summary>
        public readonly Outputs.AwsResponse Aws;
        /// <summary>
        /// A description for the provider. Cannot exceed 256 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether the provider is disabled. You cannot use a disabled provider to exchange tokens. However, existing tokens still grant access.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// A display name for the provider. Cannot exceed 32 characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The resource name of the provider.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// An OpenId Connect 1.0 identity provider.
        /// </summary>
        public readonly Outputs.OidcResponse Oidc;
        /// <summary>
        /// The state of the provider.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetProviderResult(
            string attributeCondition,

            ImmutableDictionary<string, string> attributeMapping,

            Outputs.AwsResponse aws,

            string description,

            bool disabled,

            string displayName,

            string name,

            Outputs.OidcResponse oidc,

            string state)
        {
            AttributeCondition = attributeCondition;
            AttributeMapping = attributeMapping;
            Aws = aws;
            Description = description;
            Disabled = disabled;
            DisplayName = displayName;
            Name = name;
            Oidc = oidc;
            State = state;
        }
    }
}
