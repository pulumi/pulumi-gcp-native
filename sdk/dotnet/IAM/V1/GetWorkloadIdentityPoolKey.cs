// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.IAM.V1
{
    public static class GetWorkloadIdentityPoolKey
    {
        /// <summary>
        /// Gets an individual WorkloadIdentityPoolProviderKey.
        /// </summary>
        public static Task<GetWorkloadIdentityPoolKeyResult> InvokeAsync(GetWorkloadIdentityPoolKeyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkloadIdentityPoolKeyResult>("google-native:iam/v1:getWorkloadIdentityPoolKey", args ?? new GetWorkloadIdentityPoolKeyArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an individual WorkloadIdentityPoolProviderKey.
        /// </summary>
        public static Output<GetWorkloadIdentityPoolKeyResult> Invoke(GetWorkloadIdentityPoolKeyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkloadIdentityPoolKeyResult>("google-native:iam/v1:getWorkloadIdentityPoolKey", args ?? new GetWorkloadIdentityPoolKeyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkloadIdentityPoolKeyArgs : global::Pulumi.InvokeArgs
    {
        [Input("keyId", required: true)]
        public string KeyId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("providerId", required: true)]
        public string ProviderId { get; set; } = null!;

        [Input("workloadIdentityPoolId", required: true)]
        public string WorkloadIdentityPoolId { get; set; } = null!;

        public GetWorkloadIdentityPoolKeyArgs()
        {
        }
        public static new GetWorkloadIdentityPoolKeyArgs Empty => new GetWorkloadIdentityPoolKeyArgs();
    }

    public sealed class GetWorkloadIdentityPoolKeyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("keyId", required: true)]
        public Input<string> KeyId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("providerId", required: true)]
        public Input<string> ProviderId { get; set; } = null!;

        [Input("workloadIdentityPoolId", required: true)]
        public Input<string> WorkloadIdentityPoolId { get; set; } = null!;

        public GetWorkloadIdentityPoolKeyInvokeArgs()
        {
        }
        public static new GetWorkloadIdentityPoolKeyInvokeArgs Empty => new GetWorkloadIdentityPoolKeyInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkloadIdentityPoolKeyResult
    {
        /// <summary>
        /// Time after which the key will be permanently purged and cannot be recovered. Note that the key may get purged before this timestamp if the total limit of keys per provider is crossed.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// Immutable. Public half of the asymmetric key.
        /// </summary>
        public readonly Outputs.KeyDataResponse KeyData;
        /// <summary>
        /// The resource name of the key.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The state of the key.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Immutable. The purpose of the key.
        /// </summary>
        public readonly string Use;

        [OutputConstructor]
        private GetWorkloadIdentityPoolKeyResult(
            string expireTime,

            Outputs.KeyDataResponse keyData,

            string name,

            string state,

            string use)
        {
            ExpireTime = expireTime;
            KeyData = keyData;
            Name = name;
            State = state;
            Use = use;
        }
    }
}
