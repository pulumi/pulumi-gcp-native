// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.IdentityToolkit.V2
{
    public static class GetOauthIdpConfig
    {
        /// <summary>
        /// Retrieve an Oidc Idp configuration for an Identity Toolkit project.
        /// </summary>
        public static Task<GetOauthIdpConfigResult> InvokeAsync(GetOauthIdpConfigArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOauthIdpConfigResult>("google-native:identitytoolkit/v2:getOauthIdpConfig", args ?? new GetOauthIdpConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve an Oidc Idp configuration for an Identity Toolkit project.
        /// </summary>
        public static Output<GetOauthIdpConfigResult> Invoke(GetOauthIdpConfigInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetOauthIdpConfigResult>("google-native:identitytoolkit/v2:getOauthIdpConfig", args ?? new GetOauthIdpConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOauthIdpConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("oauthIdpConfigId", required: true)]
        public string OauthIdpConfigId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("tenantId", required: true)]
        public string TenantId { get; set; } = null!;

        public GetOauthIdpConfigArgs()
        {
        }
        public static new GetOauthIdpConfigArgs Empty => new GetOauthIdpConfigArgs();
    }

    public sealed class GetOauthIdpConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("oauthIdpConfigId", required: true)]
        public Input<string> OauthIdpConfigId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public GetOauthIdpConfigInvokeArgs()
        {
        }
        public static new GetOauthIdpConfigInvokeArgs Empty => new GetOauthIdpConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetOauthIdpConfigResult
    {
        /// <summary>
        /// The client id of an OAuth client.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// The client secret of the OAuth client, to enable OIDC code flow.
        /// </summary>
        public readonly string ClientSecret;
        /// <summary>
        /// The config's display name set by developers.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// True if allows the user to sign in with the provider.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// For OIDC Idps, the issuer identifier.
        /// </summary>
        public readonly string Issuer;
        /// <summary>
        /// The name of the OAuthIdpConfig resource, for example: 'projects/my-awesome-project/oauthIdpConfigs/oauth-config-id'. Ignored during create requests.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The response type to request for in the OAuth authorization flow. You can set either `id_token` or `code` to true, but not both. Setting both types to be simultaneously true (`{code: true, id_token: true}`) is not yet supported.
        /// </summary>
        public readonly Outputs.GoogleCloudIdentitytoolkitAdminV2OAuthResponseTypeResponse ResponseType;

        [OutputConstructor]
        private GetOauthIdpConfigResult(
            string clientId,

            string clientSecret,

            string displayName,

            bool enabled,

            string issuer,

            string name,

            Outputs.GoogleCloudIdentitytoolkitAdminV2OAuthResponseTypeResponse responseType)
        {
            ClientId = clientId;
            ClientSecret = clientSecret;
            DisplayName = displayName;
            Enabled = enabled;
            Issuer = issuer;
            Name = name;
            ResponseType = responseType;
        }
    }
}
