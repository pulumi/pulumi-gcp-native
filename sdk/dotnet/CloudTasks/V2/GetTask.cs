// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudTasks.V2
{
    public static class GetTask
    {
        /// <summary>
        /// Gets a task.
        /// </summary>
        public static Task<GetTaskResult> InvokeAsync(GetTaskArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTaskResult>("google-native:cloudtasks/v2:getTask", args ?? new GetTaskArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a task.
        /// </summary>
        public static Output<GetTaskResult> Invoke(GetTaskInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTaskResult>("google-native:cloudtasks/v2:getTask", args ?? new GetTaskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTaskArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("queueId", required: true)]
        public string QueueId { get; set; } = null!;

        [Input("responseView")]
        public string? ResponseView { get; set; }

        [Input("taskId", required: true)]
        public string TaskId { get; set; } = null!;

        public GetTaskArgs()
        {
        }
        public static new GetTaskArgs Empty => new GetTaskArgs();
    }

    public sealed class GetTaskInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("queueId", required: true)]
        public Input<string> QueueId { get; set; } = null!;

        [Input("responseView")]
        public Input<string>? ResponseView { get; set; }

        [Input("taskId", required: true)]
        public Input<string> TaskId { get; set; } = null!;

        public GetTaskInvokeArgs()
        {
        }
        public static new GetTaskInvokeArgs Empty => new GetTaskInvokeArgs();
    }


    [OutputType]
    public sealed class GetTaskResult
    {
        /// <summary>
        /// HTTP request that is sent to the App Engine app handler. An App Engine task is a task that has AppEngineHttpRequest set.
        /// </summary>
        public readonly Outputs.AppEngineHttpRequestResponse AppEngineHttpRequest;
        /// <summary>
        /// The time that the task was created. `create_time` will be truncated to the nearest second.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
        /// </summary>
        public readonly int DispatchCount;
        /// <summary>
        /// The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline.
        /// </summary>
        public readonly string DispatchDeadline;
        /// <summary>
        /// The status of the task's first attempt. Only dispatch_time will be set. The other Attempt information is not retained by Cloud Tasks.
        /// </summary>
        public readonly Outputs.AttemptResponse FirstAttempt;
        /// <summary>
        /// HTTP request that is sent to the worker. An HTTP task is a task that has HttpRequest set.
        /// </summary>
        public readonly Outputs.HttpRequestResponse HttpRequest;
        /// <summary>
        /// The status of the task's last attempt.
        /// </summary>
        public readonly Outputs.AttemptResponse LastAttempt;
        /// <summary>
        /// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of attempts which have received a response.
        /// </summary>
        public readonly int ResponseCount;
        /// <summary>
        /// The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.
        /// </summary>
        public readonly string ScheduleTime;
        /// <summary>
        /// The view specifies which subset of the Task has been returned.
        /// </summary>
        public readonly string View;

        [OutputConstructor]
        private GetTaskResult(
            Outputs.AppEngineHttpRequestResponse appEngineHttpRequest,

            string createTime,

            int dispatchCount,

            string dispatchDeadline,

            Outputs.AttemptResponse firstAttempt,

            Outputs.HttpRequestResponse httpRequest,

            Outputs.AttemptResponse lastAttempt,

            string name,

            int responseCount,

            string scheduleTime,

            string view)
        {
            AppEngineHttpRequest = appEngineHttpRequest;
            CreateTime = createTime;
            DispatchCount = dispatchCount;
            DispatchDeadline = dispatchDeadline;
            FirstAttempt = firstAttempt;
            HttpRequest = httpRequest;
            LastAttempt = lastAttempt;
            Name = name;
            ResponseCount = responseCount;
            ScheduleTime = scheduleTime;
            View = view;
        }
    }
}
