// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.AppHub.V1
{
    public static class GetApplication
    {
        /// <summary>
        /// Gets an Application in a host project and location.
        /// </summary>
        public static Task<GetApplicationResult> InvokeAsync(GetApplicationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("google-native:apphub/v1:getApplication", args ?? new GetApplicationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an Application in a host project and location.
        /// </summary>
        public static Output<GetApplicationResult> Invoke(GetApplicationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationResult>("google-native:apphub/v1:getApplication", args ?? new GetApplicationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationId", required: true)]
        public string ApplicationId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetApplicationArgs()
        {
        }
        public static new GetApplicationArgs Empty => new GetApplicationArgs();
    }

    public sealed class GetApplicationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetApplicationInvokeArgs()
        {
        }
        public static new GetApplicationInvokeArgs Empty => new GetApplicationInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationResult
    {
        /// <summary>
        /// Optional. Consumer provided attributes.
        /// </summary>
        public readonly Outputs.AttributesResponse Attributes;
        /// <summary>
        /// Create time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. User-defined description of an Application. Can have a maximum length of 2048 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. User-defined name for the Application. Can have a maximum length of 63 characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Identifier. The resource name of an Application. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}"
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Immutable. Defines what data can be included into this Application. Limits which Services and Workloads can be registered.
        /// </summary>
        public readonly Outputs.ScopeResponse Scope;
        /// <summary>
        /// Application state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// A universally unique identifier (in UUID4 format) for the `Application`.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// Update time.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetApplicationResult(
            Outputs.AttributesResponse attributes,

            string createTime,

            string description,

            string displayName,

            string name,

            Outputs.ScopeResponse scope,

            string state,

            string uid,

            string updateTime)
        {
            Attributes = attributes;
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            Name = name;
            Scope = scope;
            State = state;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
