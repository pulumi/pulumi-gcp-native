// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.AppHub.V1
{
    public static class GetService
    {
        /// <summary>
        /// Gets a Service in an Application.
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("google-native:apphub/v1:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Service in an Application.
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("google-native:apphub/v1:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationId", required: true)]
        public string ApplicationId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("serviceId", required: true)]
        public string ServiceId { get; set; } = null!;

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// Optional. Consumer provided attributes.
        /// </summary>
        public readonly Outputs.AttributesResponse Attributes;
        /// <summary>
        /// Create time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. User-defined description of a Service. Can have a maximum length of 2048 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Immutable. The resource name of the original discovered service.
        /// </summary>
        public readonly string DiscoveredService;
        /// <summary>
        /// Optional. User-defined name for the Service. Can have a maximum length of 63 characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Identifier. The resource name of a Service. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Properties of an underlying compute resource that can comprise a Service. These are immutable.
        /// </summary>
        public readonly Outputs.ServicePropertiesResponse ServiceProperties;
        /// <summary>
        /// Reference to an underlying networking resource that can comprise a Service. These are immutable.
        /// </summary>
        public readonly Outputs.ServiceReferenceResponse ServiceReference;
        /// <summary>
        /// Service state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// A universally unique identifier (UUID) for the `Service` in the UUID4 format.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// Update time.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetServiceResult(
            Outputs.AttributesResponse attributes,

            string createTime,

            string description,

            string discoveredService,

            string displayName,

            string name,

            Outputs.ServicePropertiesResponse serviceProperties,

            Outputs.ServiceReferenceResponse serviceReference,

            string state,

            string uid,

            string updateTime)
        {
            Attributes = attributes;
            CreateTime = createTime;
            Description = description;
            DiscoveredService = discoveredService;
            DisplayName = displayName;
            Name = name;
            ServiceProperties = serviceProperties;
            ServiceReference = serviceReference;
            State = state;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
