// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.AppHub.V1Alpha
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Criticality Type.
    /// </summary>
    [EnumType]
    public readonly struct CriticalityType : IEquatable<CriticalityType>
    {
        private readonly string _value;

        private CriticalityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified type.
        /// </summary>
        public static CriticalityType TypeUnspecified { get; } = new CriticalityType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Mission critical service, application or workload.
        /// </summary>
        public static CriticalityType MissionCritical { get; } = new CriticalityType("MISSION_CRITICAL");
        /// <summary>
        /// High impact.
        /// </summary>
        public static CriticalityType High { get; } = new CriticalityType("HIGH");
        /// <summary>
        /// Medium impact.
        /// </summary>
        public static CriticalityType Medium { get; } = new CriticalityType("MEDIUM");
        /// <summary>
        /// Low impact.
        /// </summary>
        public static CriticalityType Low { get; } = new CriticalityType("LOW");

        public static bool operator ==(CriticalityType left, CriticalityType right) => left.Equals(right);
        public static bool operator !=(CriticalityType left, CriticalityType right) => !left.Equals(right);

        public static explicit operator string(CriticalityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CriticalityType other && Equals(other);
        public bool Equals(CriticalityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Environment Type.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentType : IEquatable<EnvironmentType>
    {
        private readonly string _value;

        private EnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified type.
        /// </summary>
        public static EnvironmentType TypeUnspecified { get; } = new EnvironmentType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Production environment.
        /// </summary>
        public static EnvironmentType Production { get; } = new EnvironmentType("PRODUCTION");
        /// <summary>
        /// Staging environment.
        /// </summary>
        public static EnvironmentType Staging { get; } = new EnvironmentType("STAGING");
        /// <summary>
        /// Test environment.
        /// </summary>
        public static EnvironmentType Test { get; } = new EnvironmentType("TEST");
        /// <summary>
        /// Development environment.
        /// </summary>
        public static EnvironmentType Development { get; } = new EnvironmentType("DEVELOPMENT");

        public static bool operator ==(EnvironmentType left, EnvironmentType right) => left.Equals(right);
        public static bool operator !=(EnvironmentType left, EnvironmentType right) => !left.Equals(right);

        public static explicit operator string(EnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentType other && Equals(other);
        public bool Equals(EnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Scope Type.
    /// </summary>
    [EnumType]
    public readonly struct ScopeType : IEquatable<ScopeType>
    {
        private readonly string _value;

        private ScopeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified type.
        /// </summary>
        public static ScopeType TypeUnspecified { get; } = new ScopeType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Regional type.
        /// </summary>
        public static ScopeType Regional { get; } = new ScopeType("REGIONAL");

        public static bool operator ==(ScopeType left, ScopeType right) => left.Equals(right);
        public static bool operator !=(ScopeType left, ScopeType right) => !left.Equals(right);

        public static explicit operator string(ScopeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScopeType other && Equals(other);
        public bool Equals(ScopeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
