// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Spanner.V1
{
    public static class GetInstancePartition
    {
        /// <summary>
        /// Gets information about a particular instance partition.
        /// </summary>
        public static Task<GetInstancePartitionResult> InvokeAsync(GetInstancePartitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstancePartitionResult>("google-native:spanner/v1:getInstancePartition", args ?? new GetInstancePartitionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a particular instance partition.
        /// </summary>
        public static Output<GetInstancePartitionResult> Invoke(GetInstancePartitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstancePartitionResult>("google-native:spanner/v1:getInstancePartition", args ?? new GetInstancePartitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstancePartitionArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("instancePartitionId", required: true)]
        public string InstancePartitionId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetInstancePartitionArgs()
        {
        }
        public static new GetInstancePartitionArgs Empty => new GetInstancePartitionArgs();
    }

    public sealed class GetInstancePartitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("instancePartitionId", required: true)]
        public Input<string> InstancePartitionId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetInstancePartitionInvokeArgs()
        {
        }
        public static new GetInstancePartitionInvokeArgs Empty => new GetInstancePartitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstancePartitionResult
    {
        /// <summary>
        /// The name of the instance partition's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
        /// </summary>
        public readonly string Config;
        /// <summary>
        /// The time at which the instance partition was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The descriptive name for this instance partition as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance partition from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance partition updates in order to avoid race conditions: An etag is returned in the response which contains instance partitions, and systems are expected to put that etag in the request to update instance partitions to ensure that their change will be applied to the same version of the instance partition. If no etag is provided in the call to update instance partition, then the existing instance partition is overwritten blindly.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// A unique identifier for the instance partition. Values are of the form `projects//instances//instancePartitions/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length. An instance partition's name cannot be changed after the instance partition is created.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of nodes allocated to this instance partition. Users can set the node_count field to specify the target number of nodes allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
        /// </summary>
        public readonly int NodeCount;
        /// <summary>
        /// The number of processing units allocated to this instance partition. Users can set the processing_units field to specify the target number of processing units allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
        /// </summary>
        public readonly int ProcessingUnits;
        /// <summary>
        /// The names of the backups that reference this instance partition. Referencing backups should share the parent instance. The existence of any referencing backup prevents the instance partition from being deleted.
        /// </summary>
        public readonly ImmutableArray<string> ReferencingBackups;
        /// <summary>
        /// The names of the databases that reference this instance partition. Referencing databases should share the parent instance. The existence of any referencing database prevents the instance partition from being deleted.
        /// </summary>
        public readonly ImmutableArray<string> ReferencingDatabases;
        /// <summary>
        /// The current instance partition state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The time at which the instance partition was most recently updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetInstancePartitionResult(
            string config,

            string createTime,

            string displayName,

            string etag,

            string name,

            int nodeCount,

            int processingUnits,

            ImmutableArray<string> referencingBackups,

            ImmutableArray<string> referencingDatabases,

            string state,

            string updateTime)
        {
            Config = config;
            CreateTime = createTime;
            DisplayName = displayName;
            Etag = etag;
            Name = name;
            NodeCount = nodeCount;
            ProcessingUnits = processingUnits;
            ReferencingBackups = referencingBackups;
            ReferencingDatabases = referencingDatabases;
            State = state;
            UpdateTime = updateTime;
        }
    }
}
