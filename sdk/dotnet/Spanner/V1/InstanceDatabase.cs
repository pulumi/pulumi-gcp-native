// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Spanner.V1
{
    /// <summary>
    /// Creates a new Cloud Spanner database and starts to prepare it for serving. The returned long-running operation will have a name of the format `/operations/` and can be used to track preparation of the database. The metadata field type is CreateDatabaseMetadata. The response field type is Database, if successful.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:spanner/v1:InstanceDatabase")]
    public partial class InstanceDatabase : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a InstanceDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceDatabase(string name, InstanceDatabaseArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:spanner/v1:InstanceDatabase", name, args ?? new InstanceDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceDatabase(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:spanner/v1:InstanceDatabase", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceDatabase Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new InstanceDatabase(name, id, options);
        }
    }

    public sealed class InstanceDatabaseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. A `CREATE DATABASE` statement, which specifies the ID of the new database. The database ID must conform to the regular expression `a-z*[a-z0-9]` and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (`` ` ``).
        /// </summary>
        [Input("createStatement")]
        public Input<string>? CreateStatement { get; set; }

        [Input("databasesId", required: true)]
        public Input<string> DatabasesId { get; set; } = null!;

        /// <summary>
        /// Optional. The encryption configuration for the database. If this field is not specified, Cloud Spanner will encrypt/decrypt all data at rest using Google default encryption.
        /// </summary>
        [Input("encryptionConfig")]
        public Input<Inputs.EncryptionConfigArgs>? EncryptionConfig { get; set; }

        [Input("extraStatements")]
        private InputList<string>? _extraStatements;

        /// <summary>
        /// Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.
        /// </summary>
        public InputList<string> ExtraStatements
        {
            get => _extraStatements ?? (_extraStatements = new InputList<string>());
            set => _extraStatements = value;
        }

        [Input("instancesId", required: true)]
        public Input<string> InstancesId { get; set; } = null!;

        [Input("projectsId", required: true)]
        public Input<string> ProjectsId { get; set; } = null!;

        public InstanceDatabaseArgs()
        {
        }
    }
}
