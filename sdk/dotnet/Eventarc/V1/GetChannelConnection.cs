// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Eventarc.V1
{
    public static class GetChannelConnection
    {
        /// <summary>
        /// Get a single ChannelConnection.
        /// </summary>
        public static Task<GetChannelConnectionResult> InvokeAsync(GetChannelConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetChannelConnectionResult>("google-native:eventarc/v1:getChannelConnection", args ?? new GetChannelConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Get a single ChannelConnection.
        /// </summary>
        public static Output<GetChannelConnectionResult> Invoke(GetChannelConnectionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetChannelConnectionResult>("google-native:eventarc/v1:getChannelConnection", args ?? new GetChannelConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetChannelConnectionArgs : global::Pulumi.InvokeArgs
    {
        [Input("channelConnectionId", required: true)]
        public string ChannelConnectionId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetChannelConnectionArgs()
        {
        }
        public static new GetChannelConnectionArgs Empty => new GetChannelConnectionArgs();
    }

    public sealed class GetChannelConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("channelConnectionId", required: true)]
        public Input<string> ChannelConnectionId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetChannelConnectionInvokeArgs()
        {
        }
        public static new GetChannelConnectionInvokeArgs Empty => new GetChannelConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetChannelConnectionResult
    {
        /// <summary>
        /// Input only. Activation token for the channel. The token will be used during the creation of ChannelConnection to bind the channel with the provider project. This field will not be stored in the provider resource.
        /// </summary>
        public readonly string ActivationToken;
        /// <summary>
        /// The name of the connected subscriber Channel. This is a weak reference to avoid cross project and cross accounts references. This must be in `projects/{project}/location/{location}/channels/{channel_id}` format.
        /// </summary>
        public readonly string Channel;
        /// <summary>
        /// The creation time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The name of the connection.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Server assigned ID of the resource. The server guarantees uniqueness and immutability until deleted.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// The last-modified time.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetChannelConnectionResult(
            string activationToken,

            string channel,

            string createTime,

            string name,

            string uid,

            string updateTime)
        {
            ActivationToken = activationToken;
            Channel = channel;
            CreateTime = createTime;
            Name = name;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
