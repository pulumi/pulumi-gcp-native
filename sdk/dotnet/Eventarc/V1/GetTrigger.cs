// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Eventarc.V1
{
    public static class GetTrigger
    {
        /// <summary>
        /// Get a single trigger.
        /// </summary>
        public static Task<GetTriggerResult> InvokeAsync(GetTriggerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTriggerResult>("google-native:eventarc/v1:getTrigger", args ?? new GetTriggerArgs(), options.WithDefaults());

        /// <summary>
        /// Get a single trigger.
        /// </summary>
        public static Output<GetTriggerResult> Invoke(GetTriggerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTriggerResult>("google-native:eventarc/v1:getTrigger", args ?? new GetTriggerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTriggerArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("triggerId", required: true)]
        public string TriggerId { get; set; } = null!;

        public GetTriggerArgs()
        {
        }
        public static new GetTriggerArgs Empty => new GetTriggerArgs();
    }

    public sealed class GetTriggerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("triggerId", required: true)]
        public Input<string> TriggerId { get; set; } = null!;

        public GetTriggerInvokeArgs()
        {
        }
        public static new GetTriggerInvokeArgs Empty => new GetTriggerInvokeArgs();
    }


    [OutputType]
    public sealed class GetTriggerResult
    {
        /// <summary>
        /// Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.
        /// </summary>
        public readonly string Channel;
        /// <summary>
        /// The reason(s) why a trigger is in FAILED state.
        /// </summary>
        public readonly Outputs.StateConditionResponse Conditions;
        /// <summary>
        /// The creation time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Destination specifies where the events should be sent to.
        /// </summary>
        public readonly Outputs.DestinationResponse Destination;
        /// <summary>
        /// This checksum is computed by the server based on the value of other fields, and might be sent only on create requests to ensure that the client has an up-to-date value before proceeding.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data field. This is set to `application/json` if the value is not defined.
        /// </summary>
        public readonly string EventDataContentType;
        /// <summary>
        /// Unordered list. The list of filters that applies to event attributes. Only events that match all the provided filters are sent to the destination.
        /// </summary>
        public readonly ImmutableArray<Outputs.EventFilterResponse> EventFilters;
        /// <summary>
        /// Optional. User labels attached to the triggers that can be used to group resources.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name of the trigger. Must be unique within the location of the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The `iam.serviceAccounts.actAs` permission must be granted on the service account to allow a principal to impersonate the service account. For more information, see the [Roles and permissions](/eventarc/docs/all-roles-permissions) page specific to the trigger destination.
        /// </summary>
        public readonly string ServiceAccount;
        /// <summary>
        /// Optional. To deliver messages, Eventarc might use other Google Cloud products as a transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
        /// </summary>
        public readonly Outputs.TransportResponse Transport;
        /// <summary>
        /// Server-assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// The last-modified time.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetTriggerResult(
            string channel,

            Outputs.StateConditionResponse conditions,

            string createTime,

            Outputs.DestinationResponse destination,

            string etag,

            string eventDataContentType,

            ImmutableArray<Outputs.EventFilterResponse> eventFilters,

            ImmutableDictionary<string, string> labels,

            string name,

            string serviceAccount,

            Outputs.TransportResponse transport,

            string uid,

            string updateTime)
        {
            Channel = channel;
            Conditions = conditions;
            CreateTime = createTime;
            Destination = destination;
            Etag = etag;
            EventDataContentType = eventDataContentType;
            EventFilters = eventFilters;
            Labels = labels;
            Name = name;
            ServiceAccount = serviceAccount;
            Transport = transport;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
