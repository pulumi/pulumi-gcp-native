// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Iam.V1
{
    /// <summary>
    /// Creates a new WorkloadIdentityPool. You cannot reuse the name of a deleted pool until 30 days after deletion.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:iam/v1:WorkloadIdentityPool")]
    public partial class WorkloadIdentityPool : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a WorkloadIdentityPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkloadIdentityPool(string name, WorkloadIdentityPoolArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:iam/v1:WorkloadIdentityPool", name, args ?? new WorkloadIdentityPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkloadIdentityPool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:iam/v1:WorkloadIdentityPool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkloadIdentityPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkloadIdentityPool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new WorkloadIdentityPool(name, id, options);
        }
    }

    public sealed class WorkloadIdentityPoolArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the pool. Cannot exceed 256 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access resources. If the pool is re-enabled, existing tokens grant access again.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// A display name for the pool. Cannot exceed 32 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("locationsId", required: true)]
        public Input<string> LocationsId { get; set; } = null!;

        /// <summary>
        /// Output only. The resource name of the pool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("projectsId", required: true)]
        public Input<string> ProjectsId { get; set; } = null!;

        /// <summary>
        /// Output only. The state of the pool.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("workloadIdentityPoolsId", required: true)]
        public Input<string> WorkloadIdentityPoolsId { get; set; } = null!;

        public WorkloadIdentityPoolArgs()
        {
        }
    }
}
