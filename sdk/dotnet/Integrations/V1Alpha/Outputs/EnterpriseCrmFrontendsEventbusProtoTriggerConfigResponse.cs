// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Integrations.V1Alpha.Outputs
{

    /// <summary>
    /// Configuration detail of a trigger. Next available id: 19
    /// </summary>
    [OutputType]
    public sealed class EnterpriseCrmFrontendsEventbusProtoTriggerConfigResponse
    {
        /// <summary>
        /// An alert threshold configuration for the [trigger + client + workflow] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + workflow] when published.
        /// </summary>
        public readonly ImmutableArray<Outputs.EnterpriseCrmEventbusProtoWorkflowAlertConfigResponse> AlertConfig;
        public readonly Outputs.EnterpriseCrmEventbusProtoCloudSchedulerConfigResponse CloudSchedulerConfig;
        /// <summary>
        /// User-provided description intended to give more business context about the task.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The list of client ids which are enabled to execute the workflow using this trigger. In other words, these clients have the workflow execution privledges for this trigger. For API trigger, the client id in the incoming request is validated against the list of enabled clients. For non-API triggers, one workflow execution is triggered on behalf of each enabled client.
        /// </summary>
        public readonly ImmutableArray<string> EnabledClients;
        /// <summary>
        /// Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task
        /// </summary>
        public readonly string ErrorCatcherId;
        /// <summary>
        /// The user created label for a particular trigger.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// Dictates how next tasks will be executed.
        /// </summary>
        public readonly string NextTasksExecutionPolicy;
        /// <summary>
        /// Optional. If set to true, any upcoming requests for this trigger config will be paused and the executions will be resumed later when the flag is reset. The workflow to which this trigger config belongs has to be in ACTIVE status for the executions to be paused or resumed.
        /// </summary>
        public readonly bool PauseWorkflowExecutions;
        /// <summary>
        /// Optional. Informs the front-end application where to draw this trigger config on the UI.
        /// </summary>
        public readonly Outputs.EnterpriseCrmEventbusProtoCoordinateResponse Position;
        /// <summary>
        /// Configurable properties of the trigger, not to be confused with workflow parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Cloud Pubsub triggers.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Properties;
        /// <summary>
        /// Set of tasks numbers from where the workflow execution is started by this trigger. If this is empty, then workflow is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same workflow execution graph).
        /// </summary>
        public readonly ImmutableArray<Outputs.EnterpriseCrmEventbusProtoNextTaskResponse> StartTasks;
        /// <summary>
        /// Optional. When set, Eventbus will run the task specified in the trigger_criteria and validate the result using the trigger_criteria.condition, and only execute the workflow when result is true.
        /// </summary>
        public readonly Outputs.EnterpriseCrmEventbusProtoTriggerCriteriaResponse TriggerCriteria;
        /// <summary>
        /// The backend trigger ID.
        /// </summary>
        public readonly string TriggerId;
        /// <summary>
        /// A number to uniquely identify each trigger config within the workflow on UI.
        /// </summary>
        public readonly string TriggerNumber;
        public readonly string TriggerType;

        [OutputConstructor]
        private EnterpriseCrmFrontendsEventbusProtoTriggerConfigResponse(
            ImmutableArray<Outputs.EnterpriseCrmEventbusProtoWorkflowAlertConfigResponse> alertConfig,

            Outputs.EnterpriseCrmEventbusProtoCloudSchedulerConfigResponse cloudSchedulerConfig,

            string description,

            ImmutableArray<string> enabledClients,

            string errorCatcherId,

            string label,

            string nextTasksExecutionPolicy,

            bool pauseWorkflowExecutions,

            Outputs.EnterpriseCrmEventbusProtoCoordinateResponse position,

            ImmutableDictionary<string, string> properties,

            ImmutableArray<Outputs.EnterpriseCrmEventbusProtoNextTaskResponse> startTasks,

            Outputs.EnterpriseCrmEventbusProtoTriggerCriteriaResponse triggerCriteria,

            string triggerId,

            string triggerNumber,

            string triggerType)
        {
            AlertConfig = alertConfig;
            CloudSchedulerConfig = cloudSchedulerConfig;
            Description = description;
            EnabledClients = enabledClients;
            ErrorCatcherId = errorCatcherId;
            Label = label;
            NextTasksExecutionPolicy = nextTasksExecutionPolicy;
            PauseWorkflowExecutions = pauseWorkflowExecutions;
            Position = position;
            Properties = properties;
            StartTasks = startTasks;
            TriggerCriteria = triggerCriteria;
            TriggerId = triggerId;
            TriggerNumber = triggerNumber;
            TriggerType = triggerType;
        }
    }
}
