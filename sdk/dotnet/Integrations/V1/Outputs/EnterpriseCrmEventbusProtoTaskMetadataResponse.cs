// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Integrations.V1.Outputs
{

    /// <summary>
    /// TaskMetadata are attributes that are associated to every common Task we have. Next available: 26
    /// </summary>
    [OutputType]
    public sealed class EnterpriseCrmEventbusProtoTaskMetadataResponse
    {
        /// <summary>
        /// The new task name to replace the current task if it is deprecated. Otherwise, it is the same as the current task name.
        /// </summary>
        public readonly string ActiveTaskName;
        public readonly ImmutableArray<Outputs.EnterpriseCrmEventbusProtoTaskMetadataAdminResponse> Admins;
        public readonly string Category;
        /// <summary>
        /// The Code Search link to the Task Java file.
        /// </summary>
        public readonly string CodeSearchLink;
        /// <summary>
        /// Controls whether JSON workflow parameters are validated against provided schemas before and/or after this task's execution.
        /// </summary>
        public readonly string DefaultJsonValidationOption;
        /// <summary>
        /// Contains the initial configuration of the task with default values set. For now, The string should be compatible to an ASCII-proto format.
        /// </summary>
        public readonly string DefaultSpec;
        /// <summary>
        /// In a few sentences, describe the purpose and usage of the task.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The string name to show on the task list on the Workflow editor screen. This should be a very short, one to two words name for the task. (e.g. "Send Mail")
        /// </summary>
        public readonly string DescriptiveName;
        /// <summary>
        /// Snippet of markdown documentation to embed in the RHP for this task.
        /// </summary>
        public readonly string DocMarkdown;
        public readonly string ExternalCategory;
        /// <summary>
        /// Sequence with which the task in specific category to be displayed in task discovery panel for external users.
        /// </summary>
        public readonly int ExternalCategorySequence;
        /// <summary>
        /// External-facing documention embedded in the RHP for this task.
        /// </summary>
        public readonly string ExternalDocHtml;
        /// <summary>
        /// Doc link for external-facing documentation (separate from g3doc).
        /// </summary>
        public readonly string ExternalDocLink;
        /// <summary>
        /// DEPRECATED: Use external_doc_html.
        /// </summary>
        public readonly string ExternalDocMarkdown;
        /// <summary>
        /// URL to the associated G3 Doc for the task if available
        /// </summary>
        public readonly string G3DocLink;
        /// <summary>
        /// URL to gstatic image icon for this task. This icon shows up on the task list panel along with the task name in the Workflow Editor screen. Use the 24p, 2x, gray color icon image format. See go/icons.
        /// </summary>
        public readonly string IconLink;
        /// <summary>
        /// The deprecation status of the current task. Default value is false;
        /// </summary>
        public readonly bool IsDeprecated;
        /// <summary>
        /// The actual class name or the annotated name of the task. Task Author should initialize this field with value from the getName() method of the Task class.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// External-facing documention for standalone IP in pantheon embedded in the RHP for this task. Non null only if different from external_doc_html
        /// </summary>
        public readonly string StandaloneExternalDocHtml;
        /// <summary>
        /// Allows author to indicate if the task is ready to use or not. If not set, then it will default to INACTIVE.
        /// </summary>
        public readonly string Status;
        public readonly string System;
        /// <summary>
        /// A set of tags that pertain to a particular task. This can be used to improve the searchability of tasks with several names ("REST Caller" vs. "Call REST Endpoint") or to help users find tasks based on related words.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private EnterpriseCrmEventbusProtoTaskMetadataResponse(
            string activeTaskName,

            ImmutableArray<Outputs.EnterpriseCrmEventbusProtoTaskMetadataAdminResponse> admins,

            string category,

            string codeSearchLink,

            string defaultJsonValidationOption,

            string defaultSpec,

            string description,

            string descriptiveName,

            string docMarkdown,

            string externalCategory,

            int externalCategorySequence,

            string externalDocHtml,

            string externalDocLink,

            string externalDocMarkdown,

            string g3DocLink,

            string iconLink,

            bool isDeprecated,

            string name,

            string standaloneExternalDocHtml,

            string status,

            string system,

            ImmutableArray<string> tags)
        {
            ActiveTaskName = activeTaskName;
            Admins = admins;
            Category = category;
            CodeSearchLink = codeSearchLink;
            DefaultJsonValidationOption = defaultJsonValidationOption;
            DefaultSpec = defaultSpec;
            Description = description;
            DescriptiveName = descriptiveName;
            DocMarkdown = docMarkdown;
            ExternalCategory = externalCategory;
            ExternalCategorySequence = externalCategorySequence;
            ExternalDocHtml = externalDocHtml;
            ExternalDocLink = externalDocLink;
            ExternalDocMarkdown = externalDocMarkdown;
            G3DocLink = g3DocLink;
            IconLink = iconLink;
            IsDeprecated = isDeprecated;
            Name = name;
            StandaloneExternalDocHtml = standaloneExternalDocHtml;
            Status = status;
            System = system;
            Tags = tags;
        }
    }
}
