// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Integrations.V1
{
    public static class GetAuthConfig
    {
        /// <summary>
        /// Gets a complete auth config. If the auth config doesn't exist, Code.NOT_FOUND exception will be thrown. Returns the decrypted auth config.
        /// </summary>
        public static Task<GetAuthConfigResult> InvokeAsync(GetAuthConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthConfigResult>("google-native:integrations/v1:getAuthConfig", args ?? new GetAuthConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a complete auth config. If the auth config doesn't exist, Code.NOT_FOUND exception will be thrown. Returns the decrypted auth config.
        /// </summary>
        public static Output<GetAuthConfigResult> Invoke(GetAuthConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthConfigResult>("google-native:integrations/v1:getAuthConfig", args ?? new GetAuthConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("authConfigId", required: true)]
        public string AuthConfigId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("productId", required: true)]
        public string ProductId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetAuthConfigArgs()
        {
        }
        public static new GetAuthConfigArgs Empty => new GetAuthConfigArgs();
    }

    public sealed class GetAuthConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("authConfigId", required: true)]
        public Input<string> AuthConfigId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("productId", required: true)]
        public Input<string> ProductId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetAuthConfigInvokeArgs()
        {
        }
        public static new GetAuthConfigInvokeArgs Empty => new GetAuthConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthConfigResult
    {
        /// <summary>
        /// Certificate id for client certificate
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// The timestamp when the auth config is created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        /// </summary>
        public readonly string CreatorEmail;
        /// <summary>
        /// Credential type of the encrypted credential.
        /// </summary>
        public readonly string CredentialType;
        /// <summary>
        /// Raw auth credentials.
        /// </summary>
        public readonly Outputs.GoogleCloudIntegrationsV1alphaCredentialResponse DecryptedCredential;
        /// <summary>
        /// A description of the auth config.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The name of the auth config.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.
        /// </summary>
        public readonly string EncryptedCredential;
        /// <summary>
        /// User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
        /// </summary>
        public readonly ImmutableArray<string> ExpiryNotificationDuration;
        /// <summary>
        /// The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
        /// </summary>
        public readonly string LastModifierEmail;
        /// <summary>
        /// Resource name of the SFDC instance projects/{project}/locations/{location}/authConfigs/{authConfig}.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
        /// </summary>
        public readonly string OverrideValidTime;
        /// <summary>
        /// The reason / details of the current status.
        /// </summary>
        public readonly string Reason;
        /// <summary>
        /// The status of the auth config.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The timestamp when the auth config is modified.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The time until the auth config is valid. Empty or max value is considered the auth config won't expire.
        /// </summary>
        public readonly string ValidTime;
        /// <summary>
        /// The visibility of the auth config.
        /// </summary>
        public readonly string Visibility;

        [OutputConstructor]
        private GetAuthConfigResult(
            string certificateId,

            string createTime,

            string creatorEmail,

            string credentialType,

            Outputs.GoogleCloudIntegrationsV1alphaCredentialResponse decryptedCredential,

            string description,

            string displayName,

            string encryptedCredential,

            ImmutableArray<string> expiryNotificationDuration,

            string lastModifierEmail,

            string name,

            string overrideValidTime,

            string reason,

            string state,

            string updateTime,

            string validTime,

            string visibility)
        {
            CertificateId = certificateId;
            CreateTime = createTime;
            CreatorEmail = creatorEmail;
            CredentialType = credentialType;
            DecryptedCredential = decryptedCredential;
            Description = description;
            DisplayName = displayName;
            EncryptedCredential = encryptedCredential;
            ExpiryNotificationDuration = expiryNotificationDuration;
            LastModifierEmail = lastModifierEmail;
            Name = name;
            OverrideValidTime = overrideValidTime;
            Reason = reason;
            State = state;
            UpdateTime = updateTime;
            ValidTime = validTime;
            Visibility = visibility;
        }
    }
}
