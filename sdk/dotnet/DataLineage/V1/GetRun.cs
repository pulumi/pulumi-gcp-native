// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.DataLineage.V1
{
    public static class GetRun
    {
        /// <summary>
        /// Gets the details of the specified run.
        /// </summary>
        public static Task<GetRunResult> InvokeAsync(GetRunArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRunResult>("google-native:datalineage/v1:getRun", args ?? new GetRunArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of the specified run.
        /// </summary>
        public static Output<GetRunResult> Invoke(GetRunInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRunResult>("google-native:datalineage/v1:getRun", args ?? new GetRunInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRunArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("processId", required: true)]
        public string ProcessId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("runId", required: true)]
        public string RunId { get; set; } = null!;

        public GetRunArgs()
        {
        }
        public static new GetRunArgs Empty => new GetRunArgs();
    }

    public sealed class GetRunInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("processId", required: true)]
        public Input<string> ProcessId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("runId", required: true)]
        public Input<string> RunId { get; set; } = null!;

        public GetRunInvokeArgs()
        {
        }
        public static new GetRunInvokeArgs Empty => new GetRunInvokeArgs();
    }


    [OutputType]
    public sealed class GetRunResult
    {
        /// <summary>
        /// Optional. The attributes of the run. Should only be used for the purpose of non-semantic management (classifying, describing or labeling the run). Up to 100 attributes are allowed.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Attributes;
        /// <summary>
        /// Optional. A human-readable name you can set to display in a user interface. Must be not longer than 1024 characters and only contain UTF-8 letters or numbers, spaces or characters like `_-:&amp;.`
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Optional. The timestamp of the end of the run.
        /// </summary>
        public readonly string EndTime;
        /// <summary>
        /// Immutable. The resource name of the run. Format: `projects/{project}/locations/{location}/processes/{process}/runs/{run}`. Can be specified or auto-assigned. {run} must be not longer than 200 characters and only contain characters in a set: `a-zA-Z0-9_-:.`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The timestamp of the start of the run.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// The state of the run.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetRunResult(
            ImmutableDictionary<string, object> attributes,

            string displayName,

            string endTime,

            string name,

            string startTime,

            string state)
        {
            Attributes = attributes;
            DisplayName = displayName;
            EndTime = endTime;
            Name = name;
            StartTime = startTime;
            State = state;
        }
    }
}
