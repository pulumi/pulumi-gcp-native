// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Cloudbuild.V1.Inputs
{

    /// <summary>
    /// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
    /// </summary>
    public sealed class SourceProvenanceArgs : Pulumi.ResourceArgs
    {
        [Input("fileHashes")]
        private InputMap<string>? _fileHashes;

        /// <summary>
        /// Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
        /// </summary>
        public InputMap<string> FileHashes
        {
            get => _fileHashes ?? (_fileHashes = new InputMap<string>());
            set => _fileHashes = value;
        }

        /// <summary>
        /// A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
        /// </summary>
        [Input("resolvedRepoSource")]
        public Input<Inputs.RepoSourceArgs>? ResolvedRepoSource { get; set; }

        /// <summary>
        /// A copy of the build's `source.storage_source`, if exists, with any generations resolved.
        /// </summary>
        [Input("resolvedStorageSource")]
        public Input<Inputs.StorageSourceArgs>? ResolvedStorageSource { get; set; }

        /// <summary>
        /// A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
        /// </summary>
        [Input("resolvedStorageSourceManifest")]
        public Input<Inputs.StorageSourceManifestArgs>? ResolvedStorageSourceManifest { get; set; }

        public SourceProvenanceArgs()
        {
        }
    }
}
