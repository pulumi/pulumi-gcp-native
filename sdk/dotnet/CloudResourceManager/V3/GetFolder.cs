// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudResourceManager.V3
{
    public static class GetFolder
    {
        /// <summary>
        /// Retrieves a folder identified by the supplied resource name. Valid folder resource names have the format `folders/{folder_id}` (for example, `folders/1234`). The caller must have `resourcemanager.folders.get` permission on the identified folder.
        /// </summary>
        public static Task<GetFolderResult> InvokeAsync(GetFolderArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFolderResult>("google-native:cloudresourcemanager/v3:getFolder", args ?? new GetFolderArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a folder identified by the supplied resource name. Valid folder resource names have the format `folders/{folder_id}` (for example, `folders/1234`). The caller must have `resourcemanager.folders.get` permission on the identified folder.
        /// </summary>
        public static Output<GetFolderResult> Invoke(GetFolderInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFolderResult>("google-native:cloudresourcemanager/v3:getFolder", args ?? new GetFolderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFolderArgs : global::Pulumi.InvokeArgs
    {
        [Input("folderId", required: true)]
        public string FolderId { get; set; } = null!;

        public GetFolderArgs()
        {
        }
        public static new GetFolderArgs Empty => new GetFolderArgs();
    }

    public sealed class GetFolderInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("folderId", required: true)]
        public Input<string> FolderId { get; set; } = null!;

        public GetFolderInvokeArgs()
        {
        }
        public static new GetFolderInvokeArgs Empty => new GetFolderInvokeArgs();
    }


    [OutputType]
    public sealed class GetFolderResult
    {
        /// <summary>
        /// Timestamp when the folder was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Timestamp when the folder was requested to be deleted.
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// The folder's display name. A folder's display name must be unique amongst its siblings. For example, no two folders with the same parent can share the same display name. The display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be no longer than 30 characters. This is captured by the regular expression: `[\p{L}\p{N}]([\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?`.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// A checksum computed by the server based on the current value of the folder resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The resource name of the folder. Its format is `folders/{folder_id}`, for example: "folders/1234".
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The folder's parent's resource name. Updates to the folder's parent must be performed using MoveFolder.
        /// </summary>
        public readonly string Parent;
        /// <summary>
        /// The lifecycle state of the folder. Updates to the state must be performed using DeleteFolder and UndeleteFolder.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Timestamp when the folder was last modified.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetFolderResult(
            string createTime,

            string deleteTime,

            string displayName,

            string etag,

            string name,

            string parent,

            string state,

            string updateTime)
        {
            CreateTime = createTime;
            DeleteTime = deleteTime;
            DisplayName = displayName;
            Etag = etag;
            Name = name;
            Parent = parent;
            State = state;
            UpdateTime = updateTime;
        }
    }
}
