// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.BareMetalSolution.V2
{
    /// <summary>
    /// Mount permissions.
    /// </summary>
    [EnumType]
    public readonly struct AllowedClientMountPermissions : IEquatable<AllowedClientMountPermissions>
    {
        private readonly string _value;

        private AllowedClientMountPermissions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Permissions were not specified.
        /// </summary>
        public static AllowedClientMountPermissions MountPermissionsUnspecified { get; } = new AllowedClientMountPermissions("MOUNT_PERMISSIONS_UNSPECIFIED");
        /// <summary>
        /// NFS share can be mount with read-only permissions.
        /// </summary>
        public static AllowedClientMountPermissions Read { get; } = new AllowedClientMountPermissions("READ");
        /// <summary>
        /// NFS share can be mount with read-write permissions.
        /// </summary>
        public static AllowedClientMountPermissions ReadWrite { get; } = new AllowedClientMountPermissions("READ_WRITE");

        public static bool operator ==(AllowedClientMountPermissions left, AllowedClientMountPermissions right) => left.Equals(right);
        public static bool operator !=(AllowedClientMountPermissions left, AllowedClientMountPermissions right) => !left.Equals(right);

        public static explicit operator string(AllowedClientMountPermissions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllowedClientMountPermissions other && Equals(other);
        public bool Equals(AllowedClientMountPermissions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of network configuration on the instance.
    /// </summary>
    [EnumType]
    public readonly struct InstanceConfigNetworkConfig : IEquatable<InstanceConfigNetworkConfig>
    {
        private readonly string _value;

        private InstanceConfigNetworkConfig(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The unspecified network configuration.
        /// </summary>
        public static InstanceConfigNetworkConfig NetworkconfigUnspecified { get; } = new InstanceConfigNetworkConfig("NETWORKCONFIG_UNSPECIFIED");
        /// <summary>
        /// Instance part of single client network and single private network.
        /// </summary>
        public static InstanceConfigNetworkConfig SingleVlan { get; } = new InstanceConfigNetworkConfig("SINGLE_VLAN");
        /// <summary>
        /// Instance part of multiple (or single) client networks and private networks.
        /// </summary>
        public static InstanceConfigNetworkConfig MultiVlan { get; } = new InstanceConfigNetworkConfig("MULTI_VLAN");

        public static bool operator ==(InstanceConfigNetworkConfig left, InstanceConfigNetworkConfig right) => left.Equals(right);
        public static bool operator !=(InstanceConfigNetworkConfig left, InstanceConfigNetworkConfig right) => !left.Equals(right);

        public static explicit operator string(InstanceConfigNetworkConfig value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceConfigNetworkConfig other && Equals(other);
        public bool Equals(InstanceConfigNetworkConfig other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of network.
    /// </summary>
    [EnumType]
    public readonly struct LogicalNetworkInterfaceNetworkType : IEquatable<LogicalNetworkInterfaceNetworkType>
    {
        private readonly string _value;

        private LogicalNetworkInterfaceNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static LogicalNetworkInterfaceNetworkType TypeUnspecified { get; } = new LogicalNetworkInterfaceNetworkType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Client network, a network peered to a Google Cloud VPC.
        /// </summary>
        public static LogicalNetworkInterfaceNetworkType Client { get; } = new LogicalNetworkInterfaceNetworkType("CLIENT");
        /// <summary>
        /// Private network, a network local to the Bare Metal Solution environment.
        /// </summary>
        public static LogicalNetworkInterfaceNetworkType Private { get; } = new LogicalNetworkInterfaceNetworkType("PRIVATE");

        public static bool operator ==(LogicalNetworkInterfaceNetworkType left, LogicalNetworkInterfaceNetworkType right) => left.Equals(right);
        public static bool operator !=(LogicalNetworkInterfaceNetworkType left, LogicalNetworkInterfaceNetworkType right) => !left.Equals(right);

        public static explicit operator string(LogicalNetworkInterfaceNetworkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LogicalNetworkInterfaceNetworkType other && Equals(other);
        public bool Equals(LogicalNetworkInterfaceNetworkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
    /// </summary>
    [EnumType]
    public readonly struct LunMultiprotocolType : IEquatable<LunMultiprotocolType>
    {
        private readonly string _value;

        private LunMultiprotocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Server has no OS specified.
        /// </summary>
        public static LunMultiprotocolType MultiprotocolTypeUnspecified { get; } = new LunMultiprotocolType("MULTIPROTOCOL_TYPE_UNSPECIFIED");
        /// <summary>
        /// Server with Linux OS.
        /// </summary>
        public static LunMultiprotocolType Linux { get; } = new LunMultiprotocolType("LINUX");

        public static bool operator ==(LunMultiprotocolType left, LunMultiprotocolType right) => left.Equals(right);
        public static bool operator !=(LunMultiprotocolType left, LunMultiprotocolType right) => !left.Equals(right);

        public static explicit operator string(LunMultiprotocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LunMultiprotocolType other && Equals(other);
        public bool Equals(LunMultiprotocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of this storage volume.
    /// </summary>
    [EnumType]
    public readonly struct LunState : IEquatable<LunState>
    {
        private readonly string _value;

        private LunState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The LUN is in an unknown state.
        /// </summary>
        public static LunState StateUnspecified { get; } = new LunState("STATE_UNSPECIFIED");
        /// <summary>
        /// The LUN is being created.
        /// </summary>
        public static LunState Creating { get; } = new LunState("CREATING");
        /// <summary>
        /// The LUN is being updated.
        /// </summary>
        public static LunState Updating { get; } = new LunState("UPDATING");
        /// <summary>
        /// The LUN is ready for use.
        /// </summary>
        public static LunState Ready { get; } = new LunState("READY");
        /// <summary>
        /// The LUN has been requested to be deleted.
        /// </summary>
        public static LunState Deleting { get; } = new LunState("DELETING");

        public static bool operator ==(LunState left, LunState right) => left.Equals(right);
        public static bool operator !=(LunState left, LunState right) => !left.Equals(right);

        public static explicit operator string(LunState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LunState other && Equals(other);
        public bool Equals(LunState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The storage type for this LUN.
    /// </summary>
    [EnumType]
    public readonly struct LunStorageType : IEquatable<LunStorageType>
    {
        private readonly string _value;

        private LunStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The storage type for this LUN is unknown.
        /// </summary>
        public static LunStorageType StorageTypeUnspecified { get; } = new LunStorageType("STORAGE_TYPE_UNSPECIFIED");
        /// <summary>
        /// This storage type for this LUN is SSD.
        /// </summary>
        public static LunStorageType Ssd { get; } = new LunStorageType("SSD");
        /// <summary>
        /// This storage type for this LUN is HDD.
        /// </summary>
        public static LunStorageType Hdd { get; } = new LunStorageType("HDD");

        public static bool operator ==(LunStorageType left, LunStorageType right) => left.Equals(right);
        public static bool operator !=(LunStorageType left, LunStorageType right) => !left.Equals(right);

        public static explicit operator string(LunStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LunStorageType other && Equals(other);
        public bool Equals(LunStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Interconnect bandwidth. Set only when type is CLIENT.
    /// </summary>
    [EnumType]
    public readonly struct NetworkConfigBandwidth : IEquatable<NetworkConfigBandwidth>
    {
        private readonly string _value;

        private NetworkConfigBandwidth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static NetworkConfigBandwidth BandwidthUnspecified { get; } = new NetworkConfigBandwidth("BANDWIDTH_UNSPECIFIED");
        /// <summary>
        /// 1 Gbps.
        /// </summary>
        public static NetworkConfigBandwidth Bw1Gbps { get; } = new NetworkConfigBandwidth("BW_1_GBPS");
        /// <summary>
        /// 2 Gbps.
        /// </summary>
        public static NetworkConfigBandwidth Bw2Gbps { get; } = new NetworkConfigBandwidth("BW_2_GBPS");
        /// <summary>
        /// 5 Gbps.
        /// </summary>
        public static NetworkConfigBandwidth Bw5Gbps { get; } = new NetworkConfigBandwidth("BW_5_GBPS");
        /// <summary>
        /// 10 Gbps.
        /// </summary>
        public static NetworkConfigBandwidth Bw10Gbps { get; } = new NetworkConfigBandwidth("BW_10_GBPS");

        public static bool operator ==(NetworkConfigBandwidth left, NetworkConfigBandwidth right) => left.Equals(right);
        public static bool operator !=(NetworkConfigBandwidth left, NetworkConfigBandwidth right) => !left.Equals(right);

        public static explicit operator string(NetworkConfigBandwidth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkConfigBandwidth other && Equals(other);
        public bool Equals(NetworkConfigBandwidth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Service CIDR, if any.
    /// </summary>
    [EnumType]
    public readonly struct NetworkConfigServiceCidr : IEquatable<NetworkConfigServiceCidr>
    {
        private readonly string _value;

        private NetworkConfigServiceCidr(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static NetworkConfigServiceCidr ServiceCidrUnspecified { get; } = new NetworkConfigServiceCidr("SERVICE_CIDR_UNSPECIFIED");
        /// <summary>
        /// Services are disabled for the given network.
        /// </summary>
        public static NetworkConfigServiceCidr Disabled { get; } = new NetworkConfigServiceCidr("DISABLED");
        /// <summary>
        /// Use the highest /26 block of the network to host services.
        /// </summary>
        public static NetworkConfigServiceCidr High26 { get; } = new NetworkConfigServiceCidr("HIGH_26");
        /// <summary>
        /// Use the highest /27 block of the network to host services.
        /// </summary>
        public static NetworkConfigServiceCidr High27 { get; } = new NetworkConfigServiceCidr("HIGH_27");
        /// <summary>
        /// Use the highest /28 block of the network to host services.
        /// </summary>
        public static NetworkConfigServiceCidr High28 { get; } = new NetworkConfigServiceCidr("HIGH_28");

        public static bool operator ==(NetworkConfigServiceCidr left, NetworkConfigServiceCidr right) => left.Equals(right);
        public static bool operator !=(NetworkConfigServiceCidr left, NetworkConfigServiceCidr right) => !left.Equals(right);

        public static explicit operator string(NetworkConfigServiceCidr value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkConfigServiceCidr other && Equals(other);
        public bool Equals(NetworkConfigServiceCidr other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this network, either Client or Private.
    /// </summary>
    [EnumType]
    public readonly struct NetworkConfigType : IEquatable<NetworkConfigType>
    {
        private readonly string _value;

        private NetworkConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static NetworkConfigType TypeUnspecified { get; } = new NetworkConfigType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Client network, that is a network peered to a GCP VPC.
        /// </summary>
        public static NetworkConfigType Client { get; } = new NetworkConfigType("CLIENT");
        /// <summary>
        /// Private network, that is a network local to the BMS POD.
        /// </summary>
        public static NetworkConfigType Private { get; } = new NetworkConfigType("PRIVATE");

        public static bool operator ==(NetworkConfigType left, NetworkConfigType right) => left.Equals(right);
        public static bool operator !=(NetworkConfigType left, NetworkConfigType right) => !left.Equals(right);

        public static explicit operator string(NetworkConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkConfigType other && Equals(other);
        public bool Equals(NetworkConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Export permissions.
    /// </summary>
    [EnumType]
    public readonly struct NfsExportPermissions : IEquatable<NfsExportPermissions>
    {
        private readonly string _value;

        private NfsExportPermissions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static NfsExportPermissions PermissionsUnspecified { get; } = new NfsExportPermissions("PERMISSIONS_UNSPECIFIED");
        /// <summary>
        /// Read-only permission.
        /// </summary>
        public static NfsExportPermissions ReadOnly { get; } = new NfsExportPermissions("READ_ONLY");
        /// <summary>
        /// Read-write permission.
        /// </summary>
        public static NfsExportPermissions ReadWrite { get; } = new NfsExportPermissions("READ_WRITE");

        public static bool operator ==(NfsExportPermissions left, NfsExportPermissions right) => left.Equals(right);
        public static bool operator !=(NfsExportPermissions left, NfsExportPermissions right) => !left.Equals(right);

        public static explicit operator string(NfsExportPermissions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NfsExportPermissions other && Equals(other);
        public bool Equals(NfsExportPermissions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Immutable. The storage type of the underlying volume.
    /// </summary>
    [EnumType]
    public readonly struct NfsShareStorageType : IEquatable<NfsShareStorageType>
    {
        private readonly string _value;

        private NfsShareStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The storage type for this volume is unknown.
        /// </summary>
        public static NfsShareStorageType StorageTypeUnspecified { get; } = new NfsShareStorageType("STORAGE_TYPE_UNSPECIFIED");
        /// <summary>
        /// The storage type for this volume is SSD.
        /// </summary>
        public static NfsShareStorageType Ssd { get; } = new NfsShareStorageType("SSD");
        /// <summary>
        /// This storage type for this volume is HDD.
        /// </summary>
        public static NfsShareStorageType Hdd { get; } = new NfsShareStorageType("HDD");

        public static bool operator ==(NfsShareStorageType left, NfsShareStorageType right) => left.Equals(right);
        public static bool operator !=(NfsShareStorageType left, NfsShareStorageType right) => !left.Equals(right);

        public static explicit operator string(NfsShareStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NfsShareStorageType other && Equals(other);
        public bool Equals(NfsShareStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Volume protocol.
    /// </summary>
    [EnumType]
    public readonly struct VolumeConfigProtocol : IEquatable<VolumeConfigProtocol>
    {
        private readonly string _value;

        private VolumeConfigProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static VolumeConfigProtocol ProtocolUnspecified { get; } = new VolumeConfigProtocol("PROTOCOL_UNSPECIFIED");
        /// <summary>
        /// Fibre channel.
        /// </summary>
        public static VolumeConfigProtocol ProtocolFc { get; } = new VolumeConfigProtocol("PROTOCOL_FC");
        /// <summary>
        /// Network file system.
        /// </summary>
        public static VolumeConfigProtocol ProtocolNfs { get; } = new VolumeConfigProtocol("PROTOCOL_NFS");

        public static bool operator ==(VolumeConfigProtocol left, VolumeConfigProtocol right) => left.Equals(right);
        public static bool operator !=(VolumeConfigProtocol left, VolumeConfigProtocol right) => !left.Equals(right);

        public static explicit operator string(VolumeConfigProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeConfigProtocol other && Equals(other);
        public bool Equals(VolumeConfigProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this Volume.
    /// </summary>
    [EnumType]
    public readonly struct VolumeConfigType : IEquatable<VolumeConfigType>
    {
        private readonly string _value;

        private VolumeConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The unspecified type.
        /// </summary>
        public static VolumeConfigType TypeUnspecified { get; } = new VolumeConfigType("TYPE_UNSPECIFIED");
        /// <summary>
        /// This Volume is on flash.
        /// </summary>
        public static VolumeConfigType Flash { get; } = new VolumeConfigType("FLASH");
        /// <summary>
        /// This Volume is on disk.
        /// </summary>
        public static VolumeConfigType Disk { get; } = new VolumeConfigType("DISK");

        public static bool operator ==(VolumeConfigType left, VolumeConfigType right) => left.Equals(right);
        public static bool operator !=(VolumeConfigType left, VolumeConfigType right) => !left.Equals(right);

        public static explicit operator string(VolumeConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeConfigType other && Equals(other);
        public bool Equals(VolumeConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The behavior to use when snapshot reserved space is full.
    /// </summary>
    [EnumType]
    public readonly struct VolumeSnapshotAutoDeleteBehavior : IEquatable<VolumeSnapshotAutoDeleteBehavior>
    {
        private readonly string _value;

        private VolumeSnapshotAutoDeleteBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The unspecified behavior.
        /// </summary>
        public static VolumeSnapshotAutoDeleteBehavior SnapshotAutoDeleteBehaviorUnspecified { get; } = new VolumeSnapshotAutoDeleteBehavior("SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED");
        /// <summary>
        /// Don't delete any snapshots. This disables new snapshot creation, as long as the snapshot reserved space is full.
        /// </summary>
        public static VolumeSnapshotAutoDeleteBehavior Disabled { get; } = new VolumeSnapshotAutoDeleteBehavior("DISABLED");
        /// <summary>
        /// Delete the oldest snapshots first.
        /// </summary>
        public static VolumeSnapshotAutoDeleteBehavior OldestFirst { get; } = new VolumeSnapshotAutoDeleteBehavior("OLDEST_FIRST");
        /// <summary>
        /// Delete the newest snapshots first.
        /// </summary>
        public static VolumeSnapshotAutoDeleteBehavior NewestFirst { get; } = new VolumeSnapshotAutoDeleteBehavior("NEWEST_FIRST");

        public static bool operator ==(VolumeSnapshotAutoDeleteBehavior left, VolumeSnapshotAutoDeleteBehavior right) => left.Equals(right);
        public static bool operator !=(VolumeSnapshotAutoDeleteBehavior left, VolumeSnapshotAutoDeleteBehavior right) => !left.Equals(right);

        public static explicit operator string(VolumeSnapshotAutoDeleteBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeSnapshotAutoDeleteBehavior other && Equals(other);
        public bool Equals(VolumeSnapshotAutoDeleteBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of this storage volume.
    /// </summary>
    [EnumType]
    public readonly struct VolumeState : IEquatable<VolumeState>
    {
        private readonly string _value;

        private VolumeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The storage volume is in an unknown state.
        /// </summary>
        public static VolumeState StateUnspecified { get; } = new VolumeState("STATE_UNSPECIFIED");
        /// <summary>
        /// The storage volume is being created.
        /// </summary>
        public static VolumeState Creating { get; } = new VolumeState("CREATING");
        /// <summary>
        /// The storage volume is ready for use.
        /// </summary>
        public static VolumeState Ready { get; } = new VolumeState("READY");
        /// <summary>
        /// The storage volume has been requested to be deleted.
        /// </summary>
        public static VolumeState Deleting { get; } = new VolumeState("DELETING");

        public static bool operator ==(VolumeState left, VolumeState right) => left.Equals(right);
        public static bool operator !=(VolumeState left, VolumeState right) => !left.Equals(right);

        public static explicit operator string(VolumeState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeState other && Equals(other);
        public bool Equals(VolumeState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The storage type for this volume.
    /// </summary>
    [EnumType]
    public readonly struct VolumeStorageType : IEquatable<VolumeStorageType>
    {
        private readonly string _value;

        private VolumeStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The storage type for this volume is unknown.
        /// </summary>
        public static VolumeStorageType StorageTypeUnspecified { get; } = new VolumeStorageType("STORAGE_TYPE_UNSPECIFIED");
        /// <summary>
        /// The storage type for this volume is SSD.
        /// </summary>
        public static VolumeStorageType Ssd { get; } = new VolumeStorageType("SSD");
        /// <summary>
        /// This storage type for this volume is HDD.
        /// </summary>
        public static VolumeStorageType Hdd { get; } = new VolumeStorageType("HDD");

        public static bool operator ==(VolumeStorageType left, VolumeStorageType right) => left.Equals(right);
        public static bool operator !=(VolumeStorageType left, VolumeStorageType right) => !left.Equals(right);

        public static explicit operator string(VolumeStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeStorageType other && Equals(other);
        public bool Equals(VolumeStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
