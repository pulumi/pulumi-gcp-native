// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.BareMetalSolution.V2
{
    /// <summary>
    /// Interconnect bandwidth. Set only when type is CLIENT.
    /// </summary>
    [EnumType]
    public readonly struct NetworkConfigBandwidth : IEquatable<NetworkConfigBandwidth>
    {
        private readonly string _value;

        private NetworkConfigBandwidth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static NetworkConfigBandwidth BandwidthUnspecified { get; } = new NetworkConfigBandwidth("BANDWIDTH_UNSPECIFIED");
        /// <summary>
        /// 1 Gbps.
        /// </summary>
        public static NetworkConfigBandwidth Bw1Gbps { get; } = new NetworkConfigBandwidth("BW_1_GBPS");
        /// <summary>
        /// 2 Gbps.
        /// </summary>
        public static NetworkConfigBandwidth Bw2Gbps { get; } = new NetworkConfigBandwidth("BW_2_GBPS");
        /// <summary>
        /// 5 Gbps.
        /// </summary>
        public static NetworkConfigBandwidth Bw5Gbps { get; } = new NetworkConfigBandwidth("BW_5_GBPS");
        /// <summary>
        /// 10 Gbps.
        /// </summary>
        public static NetworkConfigBandwidth Bw10Gbps { get; } = new NetworkConfigBandwidth("BW_10_GBPS");

        public static bool operator ==(NetworkConfigBandwidth left, NetworkConfigBandwidth right) => left.Equals(right);
        public static bool operator !=(NetworkConfigBandwidth left, NetworkConfigBandwidth right) => !left.Equals(right);

        public static explicit operator string(NetworkConfigBandwidth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkConfigBandwidth other && Equals(other);
        public bool Equals(NetworkConfigBandwidth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Service CIDR, if any.
    /// </summary>
    [EnumType]
    public readonly struct NetworkConfigServiceCidr : IEquatable<NetworkConfigServiceCidr>
    {
        private readonly string _value;

        private NetworkConfigServiceCidr(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static NetworkConfigServiceCidr ServiceCidrUnspecified { get; } = new NetworkConfigServiceCidr("SERVICE_CIDR_UNSPECIFIED");
        /// <summary>
        /// Services are disabled for the given network.
        /// </summary>
        public static NetworkConfigServiceCidr Disabled { get; } = new NetworkConfigServiceCidr("DISABLED");
        /// <summary>
        /// Use the highest /26 block of the network to host services.
        /// </summary>
        public static NetworkConfigServiceCidr High26 { get; } = new NetworkConfigServiceCidr("HIGH_26");
        /// <summary>
        /// Use the highest /27 block of the network to host services.
        /// </summary>
        public static NetworkConfigServiceCidr High27 { get; } = new NetworkConfigServiceCidr("HIGH_27");
        /// <summary>
        /// Use the highest /28 block of the network to host services.
        /// </summary>
        public static NetworkConfigServiceCidr High28 { get; } = new NetworkConfigServiceCidr("HIGH_28");

        public static bool operator ==(NetworkConfigServiceCidr left, NetworkConfigServiceCidr right) => left.Equals(right);
        public static bool operator !=(NetworkConfigServiceCidr left, NetworkConfigServiceCidr right) => !left.Equals(right);

        public static explicit operator string(NetworkConfigServiceCidr value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkConfigServiceCidr other && Equals(other);
        public bool Equals(NetworkConfigServiceCidr other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this network, either Client or Private.
    /// </summary>
    [EnumType]
    public readonly struct NetworkConfigType : IEquatable<NetworkConfigType>
    {
        private readonly string _value;

        private NetworkConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static NetworkConfigType TypeUnspecified { get; } = new NetworkConfigType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Client network, that is a network peered to a GCP VPC.
        /// </summary>
        public static NetworkConfigType Client { get; } = new NetworkConfigType("CLIENT");
        /// <summary>
        /// Private network, that is a network local to the BMS POD.
        /// </summary>
        public static NetworkConfigType Private { get; } = new NetworkConfigType("PRIVATE");

        public static bool operator ==(NetworkConfigType left, NetworkConfigType right) => left.Equals(right);
        public static bool operator !=(NetworkConfigType left, NetworkConfigType right) => !left.Equals(right);

        public static explicit operator string(NetworkConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkConfigType other && Equals(other);
        public bool Equals(NetworkConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Export permissions.
    /// </summary>
    [EnumType]
    public readonly struct NfsExportPermissions : IEquatable<NfsExportPermissions>
    {
        private readonly string _value;

        private NfsExportPermissions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static NfsExportPermissions PermissionsUnspecified { get; } = new NfsExportPermissions("PERMISSIONS_UNSPECIFIED");
        /// <summary>
        /// Read-only permission.
        /// </summary>
        public static NfsExportPermissions ReadOnly { get; } = new NfsExportPermissions("READ_ONLY");
        /// <summary>
        /// Read-write permission.
        /// </summary>
        public static NfsExportPermissions ReadWrite { get; } = new NfsExportPermissions("READ_WRITE");

        public static bool operator ==(NfsExportPermissions left, NfsExportPermissions right) => left.Equals(right);
        public static bool operator !=(NfsExportPermissions left, NfsExportPermissions right) => !left.Equals(right);

        public static explicit operator string(NfsExportPermissions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NfsExportPermissions other && Equals(other);
        public bool Equals(NfsExportPermissions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the snapshot schedule policy.
    /// </summary>
    [EnumType]
    public readonly struct SnapshotSchedulePolicyState : IEquatable<SnapshotSchedulePolicyState>
    {
        private readonly string _value;

        private SnapshotSchedulePolicyState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The policy is in an unknown state.
        /// </summary>
        public static SnapshotSchedulePolicyState StateUnspecified { get; } = new SnapshotSchedulePolicyState("STATE_UNSPECIFIED");
        /// <summary>
        /// The policy is been provisioned.
        /// </summary>
        public static SnapshotSchedulePolicyState Provisioned { get; } = new SnapshotSchedulePolicyState("PROVISIONED");

        public static bool operator ==(SnapshotSchedulePolicyState left, SnapshotSchedulePolicyState right) => left.Equals(right);
        public static bool operator !=(SnapshotSchedulePolicyState left, SnapshotSchedulePolicyState right) => !left.Equals(right);

        public static explicit operator string(SnapshotSchedulePolicyState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SnapshotSchedulePolicyState other && Equals(other);
        public bool Equals(SnapshotSchedulePolicyState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Volume protocol.
    /// </summary>
    [EnumType]
    public readonly struct VolumeConfigProtocol : IEquatable<VolumeConfigProtocol>
    {
        private readonly string _value;

        private VolumeConfigProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified value.
        /// </summary>
        public static VolumeConfigProtocol ProtocolUnspecified { get; } = new VolumeConfigProtocol("PROTOCOL_UNSPECIFIED");
        /// <summary>
        /// Fibre channel.
        /// </summary>
        public static VolumeConfigProtocol ProtocolFc { get; } = new VolumeConfigProtocol("PROTOCOL_FC");
        /// <summary>
        /// Network file system.
        /// </summary>
        public static VolumeConfigProtocol ProtocolNfs { get; } = new VolumeConfigProtocol("PROTOCOL_NFS");

        public static bool operator ==(VolumeConfigProtocol left, VolumeConfigProtocol right) => left.Equals(right);
        public static bool operator !=(VolumeConfigProtocol left, VolumeConfigProtocol right) => !left.Equals(right);

        public static explicit operator string(VolumeConfigProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeConfigProtocol other && Equals(other);
        public bool Equals(VolumeConfigProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this Volume.
    /// </summary>
    [EnumType]
    public readonly struct VolumeConfigType : IEquatable<VolumeConfigType>
    {
        private readonly string _value;

        private VolumeConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The unspecified type.
        /// </summary>
        public static VolumeConfigType TypeUnspecified { get; } = new VolumeConfigType("TYPE_UNSPECIFIED");
        /// <summary>
        /// This Volume is on flash.
        /// </summary>
        public static VolumeConfigType Flash { get; } = new VolumeConfigType("FLASH");
        /// <summary>
        /// This Volume is on disk.
        /// </summary>
        public static VolumeConfigType Disk { get; } = new VolumeConfigType("DISK");

        public static bool operator ==(VolumeConfigType left, VolumeConfigType right) => left.Equals(right);
        public static bool operator !=(VolumeConfigType left, VolumeConfigType right) => !left.Equals(right);

        public static explicit operator string(VolumeConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeConfigType other && Equals(other);
        public bool Equals(VolumeConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
