// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BareMetalSolution.V2
{
    /// <summary>
    /// Create an Instance.
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:baremetalsolution/v2:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Create a time stamp.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// True if you enable hyperthreading for the server, otherwise false. The default value is false.
        /// </summary>
        [Output("hyperthreadingEnabled")]
        public Output<bool> HyperthreadingEnabled { get; private set; } = null!;

        /// <summary>
        /// True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.
        /// </summary>
        [Output("interactiveSerialConsoleEnabled")]
        public Output<bool> InteractiveSerialConsoleEnabled { get; private set; } = null!;

        /// <summary>
        /// Labels as key value pairs.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
        /// </summary>
        [Output("logicalInterfaces")]
        public Output<ImmutableArray<Outputs.GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse>> LogicalInterfaces { get; private set; } = null!;

        /// <summary>
        /// Text field about info for logging in.
        /// </summary>
        [Output("loginInfo")]
        public Output<string> LoginInfo { get; private set; } = null!;

        /// <summary>
        /// Immutable. List of LUNs associated with this server.
        /// </summary>
        [Output("luns")]
        public Output<ImmutableArray<Outputs.LunResponse>> Luns { get; private set; } = null!;

        /// <summary>
        /// Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
        /// </summary>
        [Output("machineType")]
        public Output<string> MachineType { get; private set; } = null!;

        /// <summary>
        /// Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
        /// </summary>
        [Output("networkTemplate")]
        public Output<string> NetworkTemplate { get; private set; } = null!;

        /// <summary>
        /// List of networks associated with this server.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.NetworkResponse>> Networks { get; private set; } = null!;

        /// <summary>
        /// The OS image currently installed on the server.
        /// </summary>
        [Output("osImage")]
        public Output<string> OsImage { get; private set; } = null!;

        /// <summary>
        /// Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
        /// </summary>
        [Output("pod")]
        public Output<string> Pod { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The state of the server.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Update a time stamp.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
        /// </summary>
        [Output("volumes")]
        public Output<ImmutableArray<Outputs.VolumeResponse>> Volumes { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs? args = null, CustomResourceOptions? options = null)
            : base("google-native:baremetalsolution/v2:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:baremetalsolution/v2:Instance", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// True if you enable hyperthreading for the server, otherwise false. The default value is false.
        /// </summary>
        [Input("hyperthreadingEnabled")]
        public Input<bool>? HyperthreadingEnabled { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("logicalInterfaces")]
        private InputList<Inputs.GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs>? _logicalInterfaces;

        /// <summary>
        /// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
        /// </summary>
        public InputList<Inputs.GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs> LogicalInterfaces
        {
            get => _logicalInterfaces ?? (_logicalInterfaces = new InputList<Inputs.GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs>());
            set => _logicalInterfaces = value;
        }

        [Input("luns")]
        private InputList<Inputs.LunArgs>? _luns;

        /// <summary>
        /// Immutable. List of LUNs associated with this server.
        /// </summary>
        public InputList<Inputs.LunArgs> Luns
        {
            get => _luns ?? (_luns = new InputList<Inputs.LunArgs>());
            set => _luns = value;
        }

        /// <summary>
        /// Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
        /// </summary>
        [Input("networkTemplate")]
        public Input<string>? NetworkTemplate { get; set; }

        /// <summary>
        /// The OS image currently installed on the server.
        /// </summary>
        [Input("osImage")]
        public Input<string>? OsImage { get; set; }

        /// <summary>
        /// Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
        /// </summary>
        [Input("pod")]
        public Input<string>? Pod { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("volumes")]
        private InputList<Inputs.VolumeArgs>? _volumes;

        /// <summary>
        /// Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
        /// </summary>
        public InputList<Inputs.VolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.VolumeArgs>());
            set => _volumes = value;
        }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }
}
