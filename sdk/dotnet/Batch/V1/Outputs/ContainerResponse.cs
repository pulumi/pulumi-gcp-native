// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Batch.V1.Outputs
{

    /// <summary>
    /// Container runnable.
    /// </summary>
    [OutputType]
    public sealed class ContainerResponse
    {
        /// <summary>
        /// If set to true, external network access to and from container will be blocked. The container will use the default internal network 'goog-internal'.
        /// </summary>
        public readonly bool BlockExternalNetwork;
        /// <summary>
        /// Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
        /// </summary>
        public readonly ImmutableArray<string> Commands;
        /// <summary>
        /// Overrides the `ENTRYPOINT` specified in the container.
        /// </summary>
        public readonly string Entrypoint;
        /// <summary>
        /// The URI to pull the container image from.
        /// </summary>
        public readonly string ImageUri;
        /// <summary>
        /// Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".
        /// </summary>
        public readonly string Options;
        /// <summary>
        /// Optional password for logging in to a docker registry. If password matches "projects/*/secrets/*/versions/*" then Batch will read the password from the Secret Manager;
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Optional username for logging in to a docker registry. If username matches "projects/*/secrets/*/versions/*" then Batch will read the username from the Secret Manager.
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
        /// </summary>
        public readonly ImmutableArray<string> Volumes;

        [OutputConstructor]
        private ContainerResponse(
            bool blockExternalNetwork,

            ImmutableArray<string> commands,

            string entrypoint,

            string imageUri,

            string options,

            string password,

            string username,

            ImmutableArray<string> volumes)
        {
            BlockExternalNetwork = blockExternalNetwork;
            Commands = commands;
            Entrypoint = entrypoint;
            ImageUri = imageUri;
            Options = options;
            Password = password;
            Username = username;
            Volumes = volumes;
        }
    }
}
