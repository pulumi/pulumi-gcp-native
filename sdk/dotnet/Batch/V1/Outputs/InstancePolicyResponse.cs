// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Batch.V1.Outputs
{

    /// <summary>
    /// InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.
    /// </summary>
    [OutputType]
    public sealed class InstancePolicyResponse
    {
        /// <summary>
        /// The accelerators attached to each VM instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.AcceleratorResponse> Accelerators;
        /// <summary>
        /// Book disk to be created and attached to each VM by this InstancePolicy. Boot disk will be deleted when the VM is deleted.
        /// </summary>
        public readonly Outputs.DiskResponse BootDisk;
        /// <summary>
        /// Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted.
        /// </summary>
        public readonly ImmutableArray<Outputs.AttachedDiskResponse> Disks;
        /// <summary>
        /// The Compute Engine machine type.
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// The minimum CPU platform. See `https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform`. Not yet implemented.
        /// </summary>
        public readonly string MinCpuPlatform;
        /// <summary>
        /// The provisioning model.
        /// </summary>
        public readonly string ProvisioningModel;

        [OutputConstructor]
        private InstancePolicyResponse(
            ImmutableArray<Outputs.AcceleratorResponse> accelerators,

            Outputs.DiskResponse bootDisk,

            ImmutableArray<Outputs.AttachedDiskResponse> disks,

            string machineType,

            string minCpuPlatform,

            string provisioningModel)
        {
            Accelerators = accelerators;
            BootDisk = bootDisk;
            Disks = disks;
            MachineType = machineType;
            MinCpuPlatform = minCpuPlatform;
            ProvisioningModel = provisioningModel;
        }
    }
}
