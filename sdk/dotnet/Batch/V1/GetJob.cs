// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Batch.V1
{
    public static class GetJob
    {
        /// <summary>
        /// Get a Job specified by its resource name.
        /// </summary>
        public static Task<GetJobResult> InvokeAsync(GetJobArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetJobResult>("google-native:batch/v1:getJob", args ?? new GetJobArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Job specified by its resource name.
        /// </summary>
        public static Output<GetJobResult> Invoke(GetJobInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetJobResult>("google-native:batch/v1:getJob", args ?? new GetJobInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetJobArgs : global::Pulumi.InvokeArgs
    {
        [Input("jobId", required: true)]
        public string JobId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetJobArgs()
        {
        }
        public static new GetJobArgs Empty => new GetJobArgs();
    }

    public sealed class GetJobInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("jobId", required: true)]
        public Input<string> JobId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetJobInvokeArgs()
        {
        }
        public static new GetJobInvokeArgs Empty => new GetJobInvokeArgs();
    }


    [OutputType]
    public sealed class GetJobResult
    {
        /// <summary>
        /// Compute resource allocation for all TaskGroups in the Job.
        /// </summary>
        public readonly Outputs.AllocationPolicyResponse AllocationPolicy;
        /// <summary>
        /// When the Job was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Log preservation policy for the Job.
        /// </summary>
        public readonly Outputs.LogsPolicyResponse LogsPolicy;
        /// <summary>
        /// Job name. For example: "projects/123456/locations/us-central1/jobs/job01".
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Notification configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.JobNotificationResponse> Notifications;
        /// <summary>
        /// Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
        /// </summary>
        public readonly string Priority;
        /// <summary>
        /// Job status. It is read only for users.
        /// </summary>
        public readonly Outputs.JobStatusResponse Status;
        /// <summary>
        /// TaskGroups in the Job. Only one TaskGroup is supported now.
        /// </summary>
        public readonly ImmutableArray<Outputs.TaskGroupResponse> TaskGroups;
        /// <summary>
        /// A system generated unique ID (in UUID4 format) for the Job.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// The last time the Job was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetJobResult(
            Outputs.AllocationPolicyResponse allocationPolicy,

            string createTime,

            ImmutableDictionary<string, string> labels,

            Outputs.LogsPolicyResponse logsPolicy,

            string name,

            ImmutableArray<Outputs.JobNotificationResponse> notifications,

            string priority,

            Outputs.JobStatusResponse status,

            ImmutableArray<Outputs.TaskGroupResponse> taskGroups,

            string uid,

            string updateTime)
        {
            AllocationPolicy = allocationPolicy;
            CreateTime = createTime;
            Labels = labels;
            LogsPolicy = logsPolicy;
            Name = name;
            Notifications = notifications;
            Priority = priority;
            Status = status;
            TaskGroups = taskGroups;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
