// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Batch.V1
{
    /// <summary>
    /// The provisioning model.
    /// </summary>
    [EnumType]
    public readonly struct InstancePolicyProvisioningModel : IEquatable<InstancePolicyProvisioningModel>
    {
        private readonly string _value;

        private InstancePolicyProvisioningModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified.
        /// </summary>
        public static InstancePolicyProvisioningModel ProvisioningModelUnspecified { get; } = new InstancePolicyProvisioningModel("PROVISIONING_MODEL_UNSPECIFIED");
        /// <summary>
        /// Standard VM.
        /// </summary>
        public static InstancePolicyProvisioningModel Standard { get; } = new InstancePolicyProvisioningModel("STANDARD");
        /// <summary>
        /// SPOT VM.
        /// </summary>
        public static InstancePolicyProvisioningModel Spot { get; } = new InstancePolicyProvisioningModel("SPOT");
        /// <summary>
        /// Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported.
        /// </summary>
        public static InstancePolicyProvisioningModel Preemptible { get; } = new InstancePolicyProvisioningModel("PREEMPTIBLE");

        public static bool operator ==(InstancePolicyProvisioningModel left, InstancePolicyProvisioningModel right) => left.Equals(right);
        public static bool operator !=(InstancePolicyProvisioningModel left, InstancePolicyProvisioningModel right) => !left.Equals(right);

        public static explicit operator string(InstancePolicyProvisioningModel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstancePolicyProvisioningModel other && Equals(other);
        public bool Equals(InstancePolicyProvisioningModel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found.
    /// </summary>
    [EnumType]
    public readonly struct LifecyclePolicyAction : IEquatable<LifecyclePolicyAction>
    {
        private readonly string _value;

        private LifecyclePolicyAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Action unspecified.
        /// </summary>
        public static LifecyclePolicyAction ActionUnspecified { get; } = new LifecyclePolicyAction("ACTION_UNSPECIFIED");
        /// <summary>
        /// Action that tasks in the group will be scheduled to re-execute.
        /// </summary>
        public static LifecyclePolicyAction RetryTask { get; } = new LifecyclePolicyAction("RETRY_TASK");
        /// <summary>
        /// Action that tasks in the group will be stopped immediately.
        /// </summary>
        public static LifecyclePolicyAction FailTask { get; } = new LifecyclePolicyAction("FAIL_TASK");

        public static bool operator ==(LifecyclePolicyAction left, LifecyclePolicyAction right) => left.Equals(right);
        public static bool operator !=(LifecyclePolicyAction left, LifecyclePolicyAction right) => !left.Equals(right);

        public static explicit operator string(LifecyclePolicyAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LifecyclePolicyAction other && Equals(other);
        public bool Equals(LifecyclePolicyAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Where logs should be saved.
    /// </summary>
    [EnumType]
    public readonly struct LogsPolicyDestination : IEquatable<LogsPolicyDestination>
    {
        private readonly string _value;

        private LogsPolicyDestination(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Logs are not preserved.
        /// </summary>
        public static LogsPolicyDestination DestinationUnspecified { get; } = new LogsPolicyDestination("DESTINATION_UNSPECIFIED");
        /// <summary>
        /// Logs are streamed to Cloud Logging.
        /// </summary>
        public static LogsPolicyDestination CloudLogging { get; } = new LogsPolicyDestination("CLOUD_LOGGING");
        /// <summary>
        /// Logs are saved to a file path.
        /// </summary>
        public static LogsPolicyDestination Path { get; } = new LogsPolicyDestination("PATH");

        public static bool operator ==(LogsPolicyDestination left, LogsPolicyDestination right) => left.Equals(right);
        public static bool operator !=(LogsPolicyDestination left, LogsPolicyDestination right) => !left.Equals(right);

        public static explicit operator string(LogsPolicyDestination value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LogsPolicyDestination other && Equals(other);
        public bool Equals(LogsPolicyDestination other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The new job state.
    /// </summary>
    [EnumType]
    public readonly struct MessageNewJobState : IEquatable<MessageNewJobState>
    {
        private readonly string _value;

        private MessageNewJobState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MessageNewJobState StateUnspecified { get; } = new MessageNewJobState("STATE_UNSPECIFIED");
        /// <summary>
        /// Job is admitted (validated and persisted) and waiting for resources.
        /// </summary>
        public static MessageNewJobState Queued { get; } = new MessageNewJobState("QUEUED");
        /// <summary>
        /// Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.
        /// </summary>
        public static MessageNewJobState Scheduled { get; } = new MessageNewJobState("SCHEDULED");
        /// <summary>
        /// Resource allocation has been successful. At least one Task in the Job is RUNNING.
        /// </summary>
        public static MessageNewJobState Running { get; } = new MessageNewJobState("RUNNING");
        /// <summary>
        /// All Tasks in the Job have finished successfully.
        /// </summary>
        public static MessageNewJobState Succeeded { get; } = new MessageNewJobState("SUCCEEDED");
        /// <summary>
        /// At least one Task in the Job has failed.
        /// </summary>
        public static MessageNewJobState Failed { get; } = new MessageNewJobState("FAILED");
        /// <summary>
        /// The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up.
        /// </summary>
        public static MessageNewJobState DeletionInProgress { get; } = new MessageNewJobState("DELETION_IN_PROGRESS");

        public static bool operator ==(MessageNewJobState left, MessageNewJobState right) => left.Equals(right);
        public static bool operator !=(MessageNewJobState left, MessageNewJobState right) => !left.Equals(right);

        public static explicit operator string(MessageNewJobState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MessageNewJobState other && Equals(other);
        public bool Equals(MessageNewJobState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The new task state.
    /// </summary>
    [EnumType]
    public readonly struct MessageNewTaskState : IEquatable<MessageNewTaskState>
    {
        private readonly string _value;

        private MessageNewTaskState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown state.
        /// </summary>
        public static MessageNewTaskState StateUnspecified { get; } = new MessageNewTaskState("STATE_UNSPECIFIED");
        /// <summary>
        /// The Task is created and waiting for resources.
        /// </summary>
        public static MessageNewTaskState Pending { get; } = new MessageNewTaskState("PENDING");
        /// <summary>
        /// The Task is assigned to at least one VM.
        /// </summary>
        public static MessageNewTaskState Assigned { get; } = new MessageNewTaskState("ASSIGNED");
        /// <summary>
        /// The Task is running.
        /// </summary>
        public static MessageNewTaskState Running { get; } = new MessageNewTaskState("RUNNING");
        /// <summary>
        /// The Task has failed.
        /// </summary>
        public static MessageNewTaskState Failed { get; } = new MessageNewTaskState("FAILED");
        /// <summary>
        /// The Task has succeeded.
        /// </summary>
        public static MessageNewTaskState Succeeded { get; } = new MessageNewTaskState("SUCCEEDED");
        /// <summary>
        /// The Task has not been executed when the Job finishes.
        /// </summary>
        public static MessageNewTaskState Unexecuted { get; } = new MessageNewTaskState("UNEXECUTED");

        public static bool operator ==(MessageNewTaskState left, MessageNewTaskState right) => left.Equals(right);
        public static bool operator !=(MessageNewTaskState left, MessageNewTaskState right) => !left.Equals(right);

        public static explicit operator string(MessageNewTaskState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MessageNewTaskState other && Equals(other);
        public bool Equals(MessageNewTaskState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The message type.
    /// </summary>
    [EnumType]
    public readonly struct MessageType : IEquatable<MessageType>
    {
        private readonly string _value;

        private MessageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified.
        /// </summary>
        public static MessageType TypeUnspecified { get; } = new MessageType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Notify users that the job state has changed.
        /// </summary>
        public static MessageType JobStateChanged { get; } = new MessageType("JOB_STATE_CHANGED");
        /// <summary>
        /// Notify users that the task state has changed.
        /// </summary>
        public static MessageType TaskStateChanged { get; } = new MessageType("TASK_STATE_CHANGED");

        public static bool operator ==(MessageType left, MessageType right) => left.Equals(right);
        public static bool operator !=(MessageType left, MessageType right) => !left.Equals(right);

        public static explicit operator string(MessageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MessageType other && Equals(other);
        public bool Equals(MessageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
