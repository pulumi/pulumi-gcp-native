// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Batch.V1.Inputs
{

    /// <summary>
    /// Spec of a task
    /// </summary>
    public sealed class TaskSpecArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ComputeResource requirements.
        /// </summary>
        [Input("computeResource")]
        public Input<Inputs.ComputeResourceArgs>? ComputeResource { get; set; }

        /// <summary>
        /// Environment variables to set before running the Task.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.EnvironmentArgs>? Environment { get; set; }

        [Input("environments")]
        private InputMap<string>? _environments;

        /// <summary>
        /// Environment variables to set before running the Task. You can set up to 100 environments.
        /// </summary>
        public InputMap<string> Environments
        {
            get => _environments ?? (_environments = new InputMap<string>());
            set => _environments = value;
        }

        [Input("lifecyclePolicies")]
        private InputList<Inputs.LifecyclePolicyArgs>? _lifecyclePolicies;

        /// <summary>
        /// Lifecycle management schema when any task in a task group is failed. The valid size of lifecycle policies are [0, 10]. For each lifecycle policy, when the condition is met, the action in that policy will execute. If there are multiple policies that the task execution result matches, we use the action from the first matched policy. If task execution result does not meet with any of the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.
        /// </summary>
        public InputList<Inputs.LifecyclePolicyArgs> LifecyclePolicies
        {
            get => _lifecyclePolicies ?? (_lifecyclePolicies = new InputList<Inputs.LifecyclePolicyArgs>());
            set => _lifecyclePolicies = value;
        }

        /// <summary>
        /// Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].
        /// </summary>
        [Input("maxRetryCount")]
        public Input<int>? MaxRetryCount { get; set; }

        /// <summary>
        /// Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
        /// </summary>
        [Input("maxRunDuration")]
        public Input<string>? MaxRunDuration { get; set; }

        [Input("runnables")]
        private InputList<Inputs.RunnableArgs>? _runnables;

        /// <summary>
        /// The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.
        /// </summary>
        public InputList<Inputs.RunnableArgs> Runnables
        {
            get => _runnables ?? (_runnables = new InputList<Inputs.RunnableArgs>());
            set => _runnables = value;
        }

        [Input("volumes")]
        private InputList<Inputs.VolumeArgs>? _volumes;

        /// <summary>
        /// Volumes to mount before running Tasks using this TaskSpec.
        /// </summary>
        public InputList<Inputs.VolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.VolumeArgs>());
            set => _volumes = value;
        }

        public TaskSpecArgs()
        {
        }
        public static new TaskSpecArgs Empty => new TaskSpecArgs();
    }
}
