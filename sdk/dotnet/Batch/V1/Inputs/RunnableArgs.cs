// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Batch.V1.Inputs
{

    /// <summary>
    /// Runnable describes instructions for executing a specific script or container as part of a Task.
    /// </summary>
    public sealed class RunnableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.
        /// </summary>
        [Input("alwaysRun")]
        public Input<bool>? AlwaysRun { get; set; }

        /// <summary>
        /// This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
        /// </summary>
        [Input("background")]
        public Input<bool>? Background { get; set; }

        /// <summary>
        /// Barrier runnable.
        /// </summary>
        [Input("barrier")]
        public Input<Inputs.BarrierArgs>? Barrier { get; set; }

        /// <summary>
        /// Container runnable.
        /// </summary>
        [Input("container")]
        public Input<Inputs.ContainerArgs>? Container { get; set; }

        /// <summary>
        /// Environment variables for this Runnable (overrides variables set for the whole Task or TaskGroup).
        /// </summary>
        [Input("environment")]
        public Input<Inputs.EnvironmentArgs>? Environment { get; set; }

        /// <summary>
        /// Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.
        /// </summary>
        [Input("ignoreExitStatus")]
        public Input<bool>? IgnoreExitStatus { get; set; }

        /// <summary>
        /// Script runnable.
        /// </summary>
        [Input("script")]
        public Input<Inputs.ScriptArgs>? Script { get; set; }

        /// <summary>
        /// Timeout for this Runnable.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public RunnableArgs()
        {
        }
        public static new RunnableArgs Empty => new RunnableArgs();
    }
}
