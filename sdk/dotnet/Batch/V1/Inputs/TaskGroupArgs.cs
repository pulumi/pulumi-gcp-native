// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Batch.V1.Inputs
{

    /// <summary>
    /// A TaskGroup contains one or multiple Tasks that share the same Runnable but with different runtime parameters.
    /// </summary>
    public sealed class TaskGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Max number of tasks that can run in parallel. Default to min(task_count, 1000). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.
        /// </summary>
        [Input("parallelism")]
        public Input<string>? Parallelism { get; set; }

        /// <summary>
        /// When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.
        /// </summary>
        [Input("permissiveSsh")]
        public Input<bool>? PermissiveSsh { get; set; }

        /// <summary>
        /// When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false.
        /// </summary>
        [Input("requireHostsFile")]
        public Input<bool>? RequireHostsFile { get; set; }

        /// <summary>
        /// Number of Tasks in the TaskGroup. Default is 1.
        /// </summary>
        [Input("taskCount")]
        public Input<string>? TaskCount { get; set; }

        /// <summary>
        /// Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.
        /// </summary>
        [Input("taskCountPerNode")]
        public Input<string>? TaskCountPerNode { get; set; }

        [Input("taskEnvironments")]
        private InputList<Inputs.EnvironmentArgs>? _taskEnvironments;

        /// <summary>
        /// An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1). task_environments supports up to 200 entries.
        /// </summary>
        public InputList<Inputs.EnvironmentArgs> TaskEnvironments
        {
            get => _taskEnvironments ?? (_taskEnvironments = new InputList<Inputs.EnvironmentArgs>());
            set => _taskEnvironments = value;
        }

        /// <summary>
        /// Tasks in the group share the same task spec.
        /// </summary>
        [Input("taskSpec", required: true)]
        public Input<Inputs.TaskSpecArgs> TaskSpec { get; set; } = null!;

        public TaskGroupArgs()
        {
        }
        public static new TaskGroupArgs Empty => new TaskGroupArgs();
    }
}
