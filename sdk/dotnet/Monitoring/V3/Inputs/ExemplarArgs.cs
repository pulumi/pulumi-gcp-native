// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GcpNative.Monitoring.V3.Inputs
{

    /// <summary>
    /// Exemplars are example points that may be used to annotate aggregated distribution values. They are metadata that gives information about a particular value added to a Distribution bucket, such as a trace ID that was active when a value was added. They may contain further information, such as a example values and timestamps, origin, etc.
    /// </summary>
    public sealed class ExemplarArgs : Pulumi.ResourceArgs
    {
        [Input("attachments")]
        private InputList<ImmutableDictionary<string, string>>? _attachments;

        /// <summary>
        /// Contextual information about the example value. Examples are:Trace: type.googleapis.com/google.monitoring.v3.SpanContextLiteral string: type.googleapis.com/google.protobuf.StringValueLabels dropped during aggregation: type.googleapis.com/google.monitoring.v3.DroppedLabelsThere may be only a single attachment of any given message type in a single exemplar, and this is enforced by the system.
        /// </summary>
        public InputList<ImmutableDictionary<string, string>> Attachments
        {
            get => _attachments ?? (_attachments = new InputList<ImmutableDictionary<string, string>>());
            set => _attachments = value;
        }

        /// <summary>
        /// The observation (sampling) time of the above value.
        /// </summary>
        [Input("timestamp")]
        public Input<string>? Timestamp { get; set; }

        /// <summary>
        /// Value of the exemplar point. This value determines to which bucket the exemplar belongs.
        /// </summary>
        [Input("value")]
        public Input<double>? Value { get; set; }

        public ExemplarArgs()
        {
        }
    }
}
