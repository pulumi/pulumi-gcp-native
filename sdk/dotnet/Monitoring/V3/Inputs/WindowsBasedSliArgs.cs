// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Monitoring.V3.Inputs
{

    /// <summary>
    /// A WindowsBasedSli defines good_service as the count of time windows for which the provided service was of good quality. Criteria for determining if service was good are embedded in the window_criterion.
    /// </summary>
    public sealed class WindowsBasedSliArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries with ValueType = BOOL. The window is good if any true values appear in the window.
        /// </summary>
        [Input("goodBadMetricFilter")]
        public Input<string>? GoodBadMetricFilter { get; set; }

        /// <summary>
        /// A window is good if its performance is high enough.
        /// </summary>
        [Input("goodTotalRatioThreshold")]
        public Input<Inputs.PerformanceThresholdArgs>? GoodTotalRatioThreshold { get; set; }

        /// <summary>
        /// A window is good if the metric's value is in a good range, averaged across returned streams.
        /// </summary>
        [Input("metricMeanInRange")]
        public Input<Inputs.MetricRangeArgs>? MetricMeanInRange { get; set; }

        /// <summary>
        /// A window is good if the metric's value is in a good range, summed across returned streams.
        /// </summary>
        [Input("metricSumInRange")]
        public Input<Inputs.MetricRangeArgs>? MetricSumInRange { get; set; }

        /// <summary>
        /// Duration over which window quality is evaluated. Must be an integer fraction of a day and at least 60s.
        /// </summary>
        [Input("windowPeriod")]
        public Input<string>? WindowPeriod { get; set; }

        public WindowsBasedSliArgs()
        {
        }
        public static new WindowsBasedSliArgs Empty => new WindowsBasedSliArgs();
    }
}
