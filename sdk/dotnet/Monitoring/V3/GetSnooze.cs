// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Monitoring.V3
{
    public static class GetSnooze
    {
        /// <summary>
        /// Retrieves a Snooze by name.
        /// </summary>
        public static Task<GetSnoozeResult> InvokeAsync(GetSnoozeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnoozeResult>("google-native:monitoring/v3:getSnooze", args ?? new GetSnoozeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a Snooze by name.
        /// </summary>
        public static Output<GetSnoozeResult> Invoke(GetSnoozeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnoozeResult>("google-native:monitoring/v3:getSnooze", args ?? new GetSnoozeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnoozeArgs : global::Pulumi.InvokeArgs
    {
        [Input("project")]
        public string? Project { get; set; }

        [Input("snoozeId", required: true)]
        public string SnoozeId { get; set; } = null!;

        public GetSnoozeArgs()
        {
        }
        public static new GetSnoozeArgs Empty => new GetSnoozeArgs();
    }

    public sealed class GetSnoozeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("snoozeId", required: true)]
        public Input<string> SnoozeId { get; set; } = null!;

        public GetSnoozeInvokeArgs()
        {
        }
        public static new GetSnoozeInvokeArgs Empty => new GetSnoozeInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnoozeResult
    {
        /// <summary>
        /// This defines the criteria for applying the Snooze. See Criteria for more information.
        /// </summary>
        public readonly Outputs.CriteriaResponse Criteria;
        /// <summary>
        /// A display name for the Snooze. This can be, at most, 512 unicode characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The Snooze will be active from interval.start_time through interval.end_time. interval.start_time cannot be in the past. There is a 15 second clock skew to account for the time it takes for a request to reach the API from the UI.
        /// </summary>
        public readonly Outputs.TimeIntervalResponse Interval;
        /// <summary>
        /// The name of the Snooze. The format is: projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by the system.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetSnoozeResult(
            Outputs.CriteriaResponse criteria,

            string displayName,

            Outputs.TimeIntervalResponse interval,

            string name)
        {
            Criteria = criteria;
            DisplayName = displayName;
            Interval = interval;
            Name = name;
        }
    }
}
