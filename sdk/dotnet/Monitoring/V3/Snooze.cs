// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Monitoring.V3
{
    /// <summary>
    /// Creates a Snooze that will prevent alerts, which match the provided criteria, from being opened. The Snooze applies for a specific time interval.
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:monitoring/v3:Snooze")]
    public partial class Snooze : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This defines the criteria for applying the Snooze. See Criteria for more information.
        /// </summary>
        [Output("criteria")]
        public Output<Outputs.CriteriaResponse> Criteria { get; private set; } = null!;

        /// <summary>
        /// A display name for the Snooze. This can be, at most, 512 unicode characters.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The Snooze will be active from interval.start_time through interval.end_time. interval.start_time cannot be in the past. There is a 15 second clock skew to account for the time it takes for a request to reach the API from the UI.
        /// </summary>
        [Output("interval")]
        public Output<Outputs.TimeIntervalResponse> Interval { get; private set; } = null!;

        /// <summary>
        /// The name of the Snooze. The format is: projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by the system.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a Snooze resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Snooze(string name, SnoozeArgs args, CustomResourceOptions? options = null)
            : base("google-native:monitoring/v3:Snooze", name, args ?? new SnoozeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Snooze(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:monitoring/v3:Snooze", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Snooze resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Snooze Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Snooze(name, id, options);
        }
    }

    public sealed class SnoozeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This defines the criteria for applying the Snooze. See Criteria for more information.
        /// </summary>
        [Input("criteria", required: true)]
        public Input<Inputs.CriteriaArgs> Criteria { get; set; } = null!;

        /// <summary>
        /// A display name for the Snooze. This can be, at most, 512 unicode characters.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The Snooze will be active from interval.start_time through interval.end_time. interval.start_time cannot be in the past. There is a 15 second clock skew to account for the time it takes for a request to reach the API from the UI.
        /// </summary>
        [Input("interval", required: true)]
        public Input<Inputs.TimeIntervalArgs> Interval { get; set; } = null!;

        /// <summary>
        /// The name of the Snooze. The format is: projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by the system.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        public SnoozeArgs()
        {
        }
        public static new SnoozeArgs Empty => new SnoozeArgs();
    }
}
