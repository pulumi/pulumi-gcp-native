// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GcpNative.Monitoring.V3
{
    /// <summary>
    /// Create a ServiceLevelObjective for the given Service.
    /// </summary>
    [GcpNativeResourceType("gcp-native:monitoring/v3:ServiceServiceLevelObjective")]
    public partial class ServiceServiceLevelObjective : Pulumi.CustomResource
    {
        /// <summary>
        /// A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
        /// </summary>
        [Output("calendarPeriod")]
        public Output<string> CalendarPeriod { get; private set; } = null!;

        /// <summary>
        /// Name used for UI elements listing this SLO.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The fraction of service that must be good in order for this objective to be met. 0 &lt; goal &lt;= 0.999.
        /// </summary>
        [Output("goal")]
        public Output<double> Goal { get; private set; } = null!;

        /// <summary>
        /// Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A rolling time period, semantically "in the past ". Must be an integer multiple of 1 day no larger than 30 days.
        /// </summary>
        [Output("rollingPeriod")]
        public Output<string> RollingPeriod { get; private set; } = null!;

        /// <summary>
        /// The definition of good service, used to measure and calculate the quality of the Service's performance with respect to a single aspect of service quality.
        /// </summary>
        [Output("serviceLevelIndicator")]
        public Output<Outputs.ServiceLevelIndicatorResponse> ServiceLevelIndicator { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceServiceLevelObjective resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceServiceLevelObjective(string name, ServiceServiceLevelObjectiveArgs args, CustomResourceOptions? options = null)
            : base("gcp-native:monitoring/v3:ServiceServiceLevelObjective", name, args ?? new ServiceServiceLevelObjectiveArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceServiceLevelObjective(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("gcp-native:monitoring/v3:ServiceServiceLevelObjective", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceServiceLevelObjective resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceServiceLevelObjective Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ServiceServiceLevelObjective(name, id, options);
        }
    }

    public sealed class ServiceServiceLevelObjectiveArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
        /// </summary>
        [Input("calendarPeriod")]
        public Input<string>? CalendarPeriod { get; set; }

        /// <summary>
        /// Name used for UI elements listing this SLO.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The fraction of service that must be good in order for this objective to be met. 0 &lt; goal &lt;= 0.999.
        /// </summary>
        [Input("goal")]
        public Input<double>? Goal { get; set; }

        /// <summary>
        /// Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A rolling time period, semantically "in the past ". Must be an integer multiple of 1 day no larger than 30 days.
        /// </summary>
        [Input("rollingPeriod")]
        public Input<string>? RollingPeriod { get; set; }

        /// <summary>
        /// The definition of good service, used to measure and calculate the quality of the Service's performance with respect to a single aspect of service quality.
        /// </summary>
        [Input("serviceLevelIndicator")]
        public Input<Inputs.ServiceLevelIndicatorArgs>? ServiceLevelIndicator { get; set; }

        [Input("serviceLevelObjectivesId", required: true)]
        public Input<string> ServiceLevelObjectivesId { get; set; } = null!;

        [Input("servicesId", required: true)]
        public Input<string> ServicesId { get; set; } = null!;

        [Input("v3Id", required: true)]
        public Input<string> V3Id { get; set; } = null!;

        [Input("v3Id1", required: true)]
        public Input<string> V3Id1 { get; set; } = null!;

        public ServiceServiceLevelObjectiveArgs()
        {
        }
    }
}
