// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Monitoring.V1.Inputs
{

    /// <summary>
    /// TimeSeriesQuery collects the set of supported methods for querying time series data from the Stackdriver metrics API.
    /// </summary>
    public sealed class TimeSeriesQueryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Preview: A query used to fetch a time series, category series, or numeric series with SQL. This is a preview feature and may be subject to change before final release.
        /// </summary>
        [Input("opsAnalyticsQuery")]
        public Input<Inputs.OpsAnalyticsQueryArgs>? OpsAnalyticsQuery { get; set; }

        /// <summary>
        /// Optional. If set, Cloud Monitoring will treat the full query duration as the alignment period so that there will be only 1 output value.*Note: This could override the configured alignment period except for the cases where a series of data points are expected, like - XyChart - Scorecard's spark chart
        /// </summary>
        [Input("outputFullDuration")]
        public Input<bool>? OutputFullDuration { get; set; }

        /// <summary>
        /// A query used to fetch time series with PromQL.
        /// </summary>
        [Input("prometheusQuery")]
        public Input<string>? PrometheusQuery { get; set; }

        /// <summary>
        /// Filter parameters to fetch time series.
        /// </summary>
        [Input("timeSeriesFilter")]
        public Input<Inputs.TimeSeriesFilterArgs>? TimeSeriesFilter { get; set; }

        /// <summary>
        /// Parameters to fetch a ratio between two time series filters.
        /// </summary>
        [Input("timeSeriesFilterRatio")]
        public Input<Inputs.TimeSeriesFilterRatioArgs>? TimeSeriesFilterRatio { get; set; }

        /// <summary>
        /// A query used to fetch time series with MQL.
        /// </summary>
        [Input("timeSeriesQueryLanguage")]
        public Input<string>? TimeSeriesQueryLanguage { get; set; }

        /// <summary>
        /// The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the unit (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in MetricDescriptor.
        /// </summary>
        [Input("unitOverride")]
        public Input<string>? UnitOverride { get; set; }

        public TimeSeriesQueryArgs()
        {
        }
        public static new TimeSeriesQueryArgs Empty => new TimeSeriesQueryArgs();
    }
}
