// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Alpha.Outputs
{

    /// <summary>
    /// Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
    /// </summary>
    [OutputType]
    public sealed class AdvancedMachineFeaturesResponse
    {
        /// <summary>
        /// Whether to enable nested virtualization or not (default is false).
        /// </summary>
        public readonly bool EnableNestedVirtualization;
        /// <summary>
        /// Whether to enable UEFI networking for instance creation.
        /// </summary>
        public readonly bool EnableUefiNetworking;
        /// <summary>
        /// The number of vNUMA nodes.
        /// </summary>
        public readonly int NumaNodeCount;
        /// <summary>
        /// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
        /// </summary>
        public readonly int ThreadsPerCore;
        /// <summary>
        /// The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance's nominal CPU count and the underlying platform's SMT width.
        /// </summary>
        public readonly int VisibleCoreCount;

        [OutputConstructor]
        private AdvancedMachineFeaturesResponse(
            bool enableNestedVirtualization,

            bool enableUefiNetworking,

            int numaNodeCount,

            int threadsPerCore,

            int visibleCoreCount)
        {
            EnableNestedVirtualization = enableNestedVirtualization;
            EnableUefiNetworking = enableUefiNetworking;
            NumaNodeCount = numaNodeCount;
            ThreadsPerCore = threadsPerCore;
            VisibleCoreCount = visibleCoreCount;
        }
    }
}
