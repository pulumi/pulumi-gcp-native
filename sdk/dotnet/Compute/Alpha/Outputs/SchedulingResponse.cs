// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Compute.Alpha.Outputs
{

    [OutputType]
    public sealed class SchedulingResponse
    {
        /// <summary>
        /// Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted.
        /// 
        /// By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
        /// </summary>
        public readonly bool AutomaticRestart;
        /// <summary>
        /// Specifies the availability domain (AD), which this instance should be scheduled on. The AD belongs to the spread GroupPlacementPolicy resource policy that has been assigned to the instance. Specify a value between 1-max count of availability domains in your GroupPlacementPolicy. See go/placement-policy-extension for more details.
        /// </summary>
        public readonly int AvailabilityDomain;
        /// <summary>
        /// Defines whether the instance is tolerant of higher cpu latency. This can only be set during instance creation, or when the instance is not currently running. It must not be set if the preemptible option is also set.
        /// </summary>
        public readonly bool LatencyTolerant;
        /// <summary>
        /// An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
        /// </summary>
        public readonly string LocationHint;
        /// <summary>
        /// Specifies the number of hours after instance creation where the instance won't be scheduled for maintenance.
        /// </summary>
        public readonly int MaintenanceFreezeDurationHours;
        /// <summary>
        /// Specifies whether this VM may be a stable fleet VM. Setting this to "Periodic" designates this VM as a Stable Fleet VM.
        /// 
        /// See go/stable-fleet-ug for more details.
        /// </summary>
        public readonly string MaintenanceInterval;
        /// <summary>
        /// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
        /// </summary>
        public readonly int MinNodeCpus;
        /// <summary>
        /// A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
        /// </summary>
        public readonly ImmutableArray<Outputs.SchedulingNodeAffinityResponse> NodeAffinities;
        /// <summary>
        /// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
        /// </summary>
        public readonly string OnHostMaintenance;
        /// <summary>
        /// Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
        /// </summary>
        public readonly bool Preemptible;

        [OutputConstructor]
        private SchedulingResponse(
            bool automaticRestart,

            int availabilityDomain,

            bool latencyTolerant,

            string locationHint,

            int maintenanceFreezeDurationHours,

            string maintenanceInterval,

            int minNodeCpus,

            ImmutableArray<Outputs.SchedulingNodeAffinityResponse> nodeAffinities,

            string onHostMaintenance,

            bool preemptible)
        {
            AutomaticRestart = automaticRestart;
            AvailabilityDomain = availabilityDomain;
            LatencyTolerant = latencyTolerant;
            LocationHint = locationHint;
            MaintenanceFreezeDurationHours = maintenanceFreezeDurationHours;
            MaintenanceInterval = maintenanceInterval;
            MinNodeCpus = minNodeCpus;
            NodeAffinities = nodeAffinities;
            OnHostMaintenance = onHostMaintenance;
            Preemptible = preemptible;
        }
    }
}
