// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Alpha
{
    /// <summary>
    /// Creates a new resize request that starts provisioning VMs immediately or queues VM creation.
    /// </summary>
    [GoogleNativeResourceType("google-native:compute/alpha:InstanceGroupManagerResizeRequest")]
    public partial class InstanceGroupManagerResizeRequest : Pulumi.CustomResource
    {
        /// <summary>
        /// The count of instances to create as part of this resize request.
        /// </summary>
        [Output("count")]
        public Output<int> Count { get; private set; } = null!;

        /// <summary>
        /// The creation timestamp for this resize request in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("instanceGroupManager")]
        public Output<string> InstanceGroupManager { get; private set; } = null!;

        /// <summary>
        /// The resource type, which is always compute#instanceGroupManagerResizeRequest for resize requests.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The name of this resize request. The name must be 1-63 characters long, and comply with RFC1035.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// When set, defines queing parameters for the requested deferred capacity. When unset, the request starts provisioning immediately, or fails if immediate provisioning is not possible.
        /// </summary>
        [Output("queuingPolicy")]
        public Output<Outputs.QueuingPolicyResponse> QueuingPolicy { get; private set; } = null!;

        /// <summary>
        /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// The URL for this resize request. The server defines this URL.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Server-defined URL for this resource with the resource id.
        /// </summary>
        [Output("selfLinkWithId")]
        public Output<string> SelfLinkWithId { get; private set; } = null!;

        /// <summary>
        /// [Output only] Current state of the request.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// [Output only] Status of the request. The Status message is aligned with QueuedResource.status. ResizeRequest.queuing_policy contains the queuing policy as provided by the user; it could have either valid_until_time or valid_until_duration. ResizeRequest.status.queuing_policy always contains absolute time as calculated by the server when the request is queued.
        /// </summary>
        [Output("status")]
        public Output<Outputs.InstanceGroupManagerResizeRequestStatusResponse> Status { get; private set; } = null!;

        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceGroupManagerResizeRequest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceGroupManagerResizeRequest(string name, InstanceGroupManagerResizeRequestArgs args, CustomResourceOptions? options = null)
            : base("google-native:compute/alpha:InstanceGroupManagerResizeRequest", name, args ?? new InstanceGroupManagerResizeRequestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceGroupManagerResizeRequest(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:compute/alpha:InstanceGroupManagerResizeRequest", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceGroupManagerResizeRequest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceGroupManagerResizeRequest Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new InstanceGroupManagerResizeRequest(name, id, options);
        }
    }

    public sealed class InstanceGroupManagerResizeRequestArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The count of instances to create as part of this resize request.
        /// </summary>
        [Input("count")]
        public Input<int>? Count { get; set; }

        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("instanceGroupManager", required: true)]
        public Input<string> InstanceGroupManager { get; set; } = null!;

        /// <summary>
        /// The name of this resize request. The name must be 1-63 characters long, and comply with RFC1035.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// When set, defines queing parameters for the requested deferred capacity. When unset, the request starts provisioning immediately, or fails if immediate provisioning is not possible.
        /// </summary>
        [Input("queuingPolicy")]
        public Input<Inputs.QueuingPolicyArgs>? QueuingPolicy { get; set; }

        /// <summary>
        /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceGroupManagerResizeRequestArgs()
        {
        }
    }
}
