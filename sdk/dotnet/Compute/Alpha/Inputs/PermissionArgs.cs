// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Alpha.Inputs
{

    /// <summary>
    /// [Deprecated] All fields defined in a permission are ANDed.
    /// </summary>
    public sealed class PermissionArgs : global::Pulumi.ResourceArgs
    {
        [Input("constraints")]
        private InputList<Inputs.PermissionConstraintArgs>? _constraints;

        /// <summary>
        /// Extra custom constraints. The constraints are ANDed together.
        /// </summary>
        public InputList<Inputs.PermissionConstraintArgs> Constraints
        {
            get => _constraints ?? (_constraints = new InputList<Inputs.PermissionConstraintArgs>());
            set => _constraints = value;
        }

        [Input("hosts")]
        private InputList<string>? _hosts;

        /// <summary>
        /// Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact match, prefix match, and suffix match are supported.
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("methods")]
        private InputList<string>? _methods;

        /// <summary>
        /// HTTP method.
        /// </summary>
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        [Input("notHosts")]
        private InputList<string>? _notHosts;

        /// <summary>
        /// Negate of hosts. Specifies exclusions.
        /// </summary>
        public InputList<string> NotHosts
        {
            get => _notHosts ?? (_notHosts = new InputList<string>());
            set => _notHosts = value;
        }

        [Input("notMethods")]
        private InputList<string>? _notMethods;

        /// <summary>
        /// Negate of methods. Specifies exclusions.
        /// </summary>
        public InputList<string> NotMethods
        {
            get => _notMethods ?? (_notMethods = new InputList<string>());
            set => _notMethods = value;
        }

        [Input("notPaths")]
        private InputList<string>? _notPaths;

        /// <summary>
        /// Negate of paths. Specifies exclusions.
        /// </summary>
        public InputList<string> NotPaths
        {
            get => _notPaths ?? (_notPaths = new InputList<string>());
            set => _notPaths = value;
        }

        [Input("notPorts")]
        private InputList<string>? _notPorts;

        /// <summary>
        /// Negate of ports. Specifies exclusions.
        /// </summary>
        public InputList<string> NotPorts
        {
            get => _notPorts ?? (_notPorts = new InputList<string>());
            set => _notPorts = value;
        }

        [Input("paths")]
        private InputList<string>? _paths;

        /// <summary>
        /// HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        [Input("ports")]
        private InputList<string>? _ports;

        /// <summary>
        /// Port names or numbers.
        /// </summary>
        public InputList<string> Ports
        {
            get => _ports ?? (_ports = new InputList<string>());
            set => _ports = value;
        }

        public PermissionArgs()
        {
        }
        public static new PermissionArgs Empty => new PermissionArgs();
    }
}
