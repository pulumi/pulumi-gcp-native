// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Alpha.Inputs
{

    public sealed class SecurityPolicyRuleRateLimitOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
        /// </summary>
        [Input("banDurationSec")]
        public Input<int>? BanDurationSec { get; set; }

        /// <summary>
        /// Can only be specified if the action for the rule is "rate_based_ban". If specified, the key will be banned for the configured 'ban_duration_sec' when the number of requests that exceed the 'rate_limit_threshold' also exceed this 'ban_threshold'.
        /// </summary>
        [Input("banThreshold")]
        public Input<Inputs.SecurityPolicyRuleRateLimitOptionsThresholdArgs>? BanThreshold { get; set; }

        /// <summary>
        /// Action to take when requests are under the given threshold. When requests are throttled, this is also the action for all requests which are not dropped. Valid options are "allow", "fairshare", and "drop_overload".
        /// </summary>
        [Input("conformAction")]
        public Input<string>? ConformAction { get; set; }

        /// <summary>
        /// Determines the key to enforce the threshold_rps limit on. If key is "IP", each IP has this limit enforced separately, whereas "ALL_IPs" means a single limit is applied to all requests matching this rule.
        /// </summary>
        [Input("enforceOnKey")]
        public Input<Pulumi.GoogleNative.Compute.Alpha.SecurityPolicyRuleRateLimitOptionsEnforceOnKey>? EnforceOnKey { get; set; }

        /// <summary>
        /// When a request is denied, returns the HTTP response code specified. Valid options are "deny()" where valid values for status are 403, 404, 429, and 502.
        /// </summary>
        [Input("exceedAction")]
        public Input<string>? ExceedAction { get; set; }

        /// <summary>
        /// Threshold at which to begin ratelimiting.
        /// </summary>
        [Input("rateLimitThreshold")]
        public Input<Inputs.SecurityPolicyRuleRateLimitOptionsThresholdArgs>? RateLimitThreshold { get; set; }

        public SecurityPolicyRuleRateLimitOptionsArgs()
        {
        }
    }
}
