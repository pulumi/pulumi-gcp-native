// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Alpha.Inputs
{

    public sealed class SecurityPolicyRuleRateLimitOptionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
        /// </summary>
        [Input("banDurationSec")]
        public Input<int>? BanDurationSec { get; set; }

        /// <summary>
        /// Can only be specified if the action for the rule is "rate_based_ban". If specified, the key will be banned for the configured 'ban_duration_sec' when the number of requests that exceed the 'rate_limit_threshold' also exceed this 'ban_threshold'.
        /// </summary>
        [Input("banThreshold")]
        public Input<Inputs.SecurityPolicyRuleRateLimitOptionsThresholdArgs>? BanThreshold { get; set; }

        /// <summary>
        /// Action to take for requests that are under the configured rate limit threshold. Valid option is "allow" only.
        /// </summary>
        [Input("conformAction")]
        public Input<string>? ConformAction { get; set; }

        /// <summary>
        /// Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if this field 'enforce_on_key' is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforce_on_key_name". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforce_on_key_name". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. 
        /// </summary>
        [Input("enforceOnKey")]
        public Input<Pulumi.GoogleNative.Compute.Alpha.SecurityPolicyRuleRateLimitOptionsEnforceOnKey>? EnforceOnKey { get; set; }

        /// <summary>
        /// Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
        /// </summary>
        [Input("enforceOnKeyName")]
        public Input<string>? EnforceOnKeyName { get; set; }

        /// <summary>
        /// Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are "deny(status)", where valid values for status are 403, 404, 429, and 502, and "redirect" where the redirect parameters come from exceedRedirectOptions below.
        /// </summary>
        [Input("exceedAction")]
        public Input<string>? ExceedAction { get; set; }

        /// <summary>
        /// Specified gRPC response status for proxyless gRPC requests that are above the configured rate limit threshold
        /// </summary>
        [Input("exceedActionRpcStatus")]
        public Input<Inputs.SecurityPolicyRuleRateLimitOptionsRpcStatusArgs>? ExceedActionRpcStatus { get; set; }

        /// <summary>
        /// Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect.
        /// </summary>
        [Input("exceedRedirectOptions")]
        public Input<Inputs.SecurityPolicyRuleRedirectOptionsArgs>? ExceedRedirectOptions { get; set; }

        /// <summary>
        /// Threshold at which to begin ratelimiting.
        /// </summary>
        [Input("rateLimitThreshold")]
        public Input<Inputs.SecurityPolicyRuleRateLimitOptionsThresholdArgs>? RateLimitThreshold { get; set; }

        public SecurityPolicyRuleRateLimitOptionsArgs()
        {
        }
        public static new SecurityPolicyRuleRateLimitOptionsArgs Empty => new SecurityPolicyRuleRateLimitOptionsArgs();
    }
}
