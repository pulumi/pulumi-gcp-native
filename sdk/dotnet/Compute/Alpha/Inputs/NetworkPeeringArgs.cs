// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Compute.Alpha.Inputs
{

    /// <summary>
    /// A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering.
    /// </summary>
    public sealed class NetworkPeeringArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether Cloud Routers in this network can automatically advertise subnets from the peer network.
        /// </summary>
        [Input("advertisePeerSubnetsViaRouters")]
        public Input<bool>? AdvertisePeerSubnetsViaRouters { get; set; }

        /// <summary>
        /// This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
        /// </summary>
        [Input("autoCreateRoutes")]
        public Input<bool>? AutoCreateRoutes { get; set; }

        /// <summary>
        /// Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
        /// </summary>
        [Input("exchangeSubnetRoutes")]
        public Input<bool>? ExchangeSubnetRoutes { get; set; }

        /// <summary>
        /// Whether to export the custom routes to peer network.
        /// </summary>
        [Input("exportCustomRoutes")]
        public Input<bool>? ExportCustomRoutes { get; set; }

        /// <summary>
        /// Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
        /// </summary>
        [Input("exportSubnetRoutesWithPublicIp")]
        public Input<bool>? ExportSubnetRoutesWithPublicIp { get; set; }

        /// <summary>
        /// Whether to import the custom routes from peer network.
        /// </summary>
        [Input("importCustomRoutes")]
        public Input<bool>? ImportCustomRoutes { get; set; }

        /// <summary>
        /// Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
        /// </summary>
        [Input("importSubnetRoutesWithPublicIp")]
        public Input<bool>? ImportSubnetRoutesWithPublicIp { get; set; }

        /// <summary>
        /// Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// Maximum Transmission Unit in bytes.
        /// </summary>
        [Input("peerMtu")]
        public Input<int>? PeerMtu { get; set; }

        /// <summary>
        /// [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// [Output Only] Details about the current state of the peering.
        /// </summary>
        [Input("stateDetails")]
        public Input<string>? StateDetails { get; set; }

        public NetworkPeeringArgs()
        {
        }
    }
}
