// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Alpha
{
    public static class GetPacketMirroring
    {
        /// <summary>
        /// Returns the specified PacketMirroring resource.
        /// </summary>
        public static Task<GetPacketMirroringResult> InvokeAsync(GetPacketMirroringArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPacketMirroringResult>("google-native:compute/alpha:getPacketMirroring", args ?? new GetPacketMirroringArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the specified PacketMirroring resource.
        /// </summary>
        public static Output<GetPacketMirroringResult> Invoke(GetPacketMirroringInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPacketMirroringResult>("google-native:compute/alpha:getPacketMirroring", args ?? new GetPacketMirroringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPacketMirroringArgs : global::Pulumi.InvokeArgs
    {
        [Input("packetMirroring", required: true)]
        public string PacketMirroring { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        public GetPacketMirroringArgs()
        {
        }
        public static new GetPacketMirroringArgs Empty => new GetPacketMirroringArgs();
    }

    public sealed class GetPacketMirroringInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("packetMirroring", required: true)]
        public Input<string> PacketMirroring { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public GetPacketMirroringInvokeArgs()
        {
        }
        public static new GetPacketMirroringInvokeArgs Empty => new GetPacketMirroringInvokeArgs();
    }


    [OutputType]
    public sealed class GetPacketMirroringResult
    {
        /// <summary>
        /// The Forwarding Rule resource of type loadBalancingScheme=INTERNAL that will be used as collector for mirrored traffic. The specified forwarding rule must have isMirroringCollector set to true.
        /// </summary>
        public readonly Outputs.PacketMirroringForwardingRuleInfoResponse CollectorIlb;
        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        public readonly string CreationTimestamp;
        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network. The default is TRUE.
        /// </summary>
        public readonly string Enable;
        /// <summary>
        /// Filter for mirrored traffic. If unspecified, all traffic is mirrored.
        /// </summary>
        public readonly Outputs.PacketMirroringFilterResponse Filter;
        /// <summary>
        /// Type of the resource. Always compute#packetMirroring for packet mirrorings.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// PacketMirroring mirroredResourceInfos. MirroredResourceInfo specifies a set of mirrored VM instances, subnetworks and/or tags for which traffic from/to all VM instances will be mirrored.
        /// </summary>
        public readonly Outputs.PacketMirroringMirroredResourceInfoResponse MirroredResources;
        /// <summary>
        /// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in the given network. All mirrored subnetworks should belong to the given network.
        /// </summary>
        public readonly Outputs.PacketMirroringNetworkInfoResponse Network;
        /// <summary>
        /// The priority of applying this configuration. Priority is used to break ties in cases where there is more than one matching rule. In the case of two rules that apply for a given Instance, the one with the lowest-numbered priority value wins. Default value is 1000. Valid range is 0 through 65535.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// URI of the region where the packetMirroring resides.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Server-defined URL for the resource.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// Server-defined URL for this resource with the resource id.
        /// </summary>
        public readonly string SelfLinkWithId;

        [OutputConstructor]
        private GetPacketMirroringResult(
            Outputs.PacketMirroringForwardingRuleInfoResponse collectorIlb,

            string creationTimestamp,

            string description,

            string enable,

            Outputs.PacketMirroringFilterResponse filter,

            string kind,

            Outputs.PacketMirroringMirroredResourceInfoResponse mirroredResources,

            string name,

            Outputs.PacketMirroringNetworkInfoResponse network,

            int priority,

            string region,

            string selfLink,

            string selfLinkWithId)
        {
            CollectorIlb = collectorIlb;
            CreationTimestamp = creationTimestamp;
            Description = description;
            Enable = enable;
            Filter = filter;
            Kind = kind;
            MirroredResources = mirroredResources;
            Name = name;
            Network = network;
            Priority = priority;
            Region = region;
            SelfLink = selfLink;
            SelfLinkWithId = selfLinkWithId;
        }
    }
}
