// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Alpha
{
    /// <summary>
    /// Creates a storage pool in the specified project using the data in the request.
    /// </summary>
    [GoogleNativeResourceType("google-native:compute/alpha:StoragePool")]
    public partial class StoragePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Provisioning type of the byte capacity of the pool.
        /// </summary>
        [Output("capacityProvisioningType")]
        public Output<string> CapacityProvisioningType { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Type of the resource. Always compute#storagePool for storage pools.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// A fingerprint for the labels being applied to this storage pool, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a storage pool.
        /// </summary>
        [Output("labelFingerprint")]
        public Output<string> LabelFingerprint { get; private set; } = null!;

        /// <summary>
        /// Labels to apply to this storage pool. These can be later modified by the setLabels method.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning type of the performance-related parameters of the pool, such as throughput and IOPS.
        /// </summary>
        [Output("performanceProvisioningType")]
        public Output<string> PerformanceProvisioningType { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Provsioned IOPS of the storage pool.
        /// </summary>
        [Output("provisionedIops")]
        public Output<string> ProvisionedIops { get; private set; } = null!;

        /// <summary>
        /// Provisioned throughput of the storage pool. Only relevant if the storage pool type is hyperdisk-balanced or hyperdisk-throughput.
        /// </summary>
        [Output("provisionedThroughput")]
        public Output<string> ProvisionedThroughput { get; private set; } = null!;

        /// <summary>
        /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// Status information for the storage pool resource.
        /// </summary>
        [Output("resourceStatus")]
        public Output<Outputs.StoragePoolResourceStatusResponse> ResourceStatus { get; private set; } = null!;

        /// <summary>
        /// Server-defined fully-qualified URL for this resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Server-defined URL for this resource's resource id.
        /// </summary>
        [Output("selfLinkWithId")]
        public Output<string> SelfLinkWithId { get; private set; } = null!;

        /// <summary>
        /// Size, in GiB, of the storage pool.
        /// </summary>
        [Output("sizeGb")]
        public Output<string> SizeGb { get; private set; } = null!;

        /// <summary>
        /// The status of storage pool creation. - CREATING: Storage pool is provisioning. storagePool. - FAILED: Storage pool creation failed. - READY: Storage pool is ready for use. - DELETING: Storage pool is deleting. 
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Status information for the storage pool resource.
        /// </summary>
        [Output("status")]
        public Output<Outputs.StoragePoolResourceStatusResponse> Status { get; private set; } = null!;

        /// <summary>
        /// Type of the storage pool.
        /// </summary>
        [Output("storagePoolType")]
        public Output<string> StoragePoolType { get; private set; } = null!;

        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a StoragePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StoragePool(string name, StoragePoolArgs? args = null, CustomResourceOptions? options = null)
            : base("google-native:compute/alpha:StoragePool", name, args ?? new StoragePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StoragePool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:compute/alpha:StoragePool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "project",
                    "zone",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StoragePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StoragePool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new StoragePool(name, id, options);
        }
    }

    public sealed class StoragePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Provisioning type of the byte capacity of the pool.
        /// </summary>
        [Input("capacityProvisioningType")]
        public Input<Pulumi.GoogleNative.Compute.Alpha.StoragePoolCapacityProvisioningType>? CapacityProvisioningType { get; set; }

        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to apply to this storage pool. These can be later modified by the setLabels method.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Provisioning type of the performance-related parameters of the pool, such as throughput and IOPS.
        /// </summary>
        [Input("performanceProvisioningType")]
        public Input<Pulumi.GoogleNative.Compute.Alpha.StoragePoolPerformanceProvisioningType>? PerformanceProvisioningType { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Provsioned IOPS of the storage pool.
        /// </summary>
        [Input("provisionedIops")]
        public Input<string>? ProvisionedIops { get; set; }

        /// <summary>
        /// Provisioned throughput of the storage pool. Only relevant if the storage pool type is hyperdisk-balanced or hyperdisk-throughput.
        /// </summary>
        [Input("provisionedThroughput")]
        public Input<string>? ProvisionedThroughput { get; set; }

        /// <summary>
        /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// Size, in GiB, of the storage pool.
        /// </summary>
        [Input("sizeGb")]
        public Input<string>? SizeGb { get; set; }

        /// <summary>
        /// Type of the storage pool.
        /// </summary>
        [Input("storagePoolType")]
        public Input<string>? StoragePoolType { get; set; }

        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public StoragePoolArgs()
        {
        }
        public static new StoragePoolArgs Empty => new StoragePoolArgs();
    }
}
