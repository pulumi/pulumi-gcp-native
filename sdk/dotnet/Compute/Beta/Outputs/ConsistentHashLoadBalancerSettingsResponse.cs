// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Beta.Outputs
{

    /// <summary>
    /// This message defines settings for a consistent hash style load balancer.
    /// </summary>
    [OutputType]
    public sealed class ConsistentHashLoadBalancerSettingsResponse
    {
        /// <summary>
        /// Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
        /// </summary>
        public readonly Outputs.ConsistentHashLoadBalancerSettingsHttpCookieResponse HttpCookie;
        /// <summary>
        /// The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
        /// </summary>
        public readonly string HttpHeaderName;
        /// <summary>
        /// The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
        /// </summary>
        public readonly string MinimumRingSize;

        [OutputConstructor]
        private ConsistentHashLoadBalancerSettingsResponse(
            Outputs.ConsistentHashLoadBalancerSettingsHttpCookieResponse httpCookie,

            string httpHeaderName,

            string minimumRingSize)
        {
            HttpCookie = httpCookie;
            HttpHeaderName = httpHeaderName;
            MinimumRingSize = minimumRingSize;
        }
    }
}
