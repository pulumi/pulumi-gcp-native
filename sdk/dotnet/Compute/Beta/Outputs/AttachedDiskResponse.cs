// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Beta.Outputs
{

    /// <summary>
    /// An instance-attached disk resource.
    /// </summary>
    [OutputType]
    public sealed class AttachedDiskResponse
    {
        /// <summary>
        /// The architecture of the attached disk. Valid values are ARM64 or X86_64.
        /// </summary>
        public readonly string Architecture;
        /// <summary>
        /// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
        /// </summary>
        public readonly bool AutoDelete;
        /// <summary>
        /// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
        /// </summary>
        public readonly bool Boot;
        /// <summary>
        /// Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
        /// </summary>
        public readonly string DeviceName;
        /// <summary>
        /// Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
        /// </summary>
        public readonly Outputs.CustomerEncryptionKeyResponse DiskEncryptionKey;
        /// <summary>
        /// The size of the disk in GB.
        /// </summary>
        public readonly string DiskSizeGb;
        /// <summary>
        /// [Input Only] Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error.
        /// </summary>
        public readonly bool ForceAttach;
        /// <summary>
        /// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
        /// </summary>
        public readonly ImmutableArray<Outputs.GuestOsFeatureResponse> GuestOsFeatures;
        /// <summary>
        /// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
        /// </summary>
        public readonly int Index;
        /// <summary>
        /// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
        /// </summary>
        public readonly Outputs.AttachedDiskInitializeParamsResponse InitializeParams;
        /// <summary>
        /// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In certain configurations, persistent disks can use NVMe. For more information, see About persistent disks.
        /// </summary>
        public readonly string Interface;
        /// <summary>
        /// Type of the resource. Always compute#attachedDisk for attached disks.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Any valid publicly visible licenses.
        /// </summary>
        public readonly ImmutableArray<string> Licenses;
        /// <summary>
        /// Whether to indicate the attached disk is locked. The locked disk is not allowed to be detached from the instance, or to be used as the source of the snapshot creation, and the image creation. The instance with at least one locked attached disk is not allow to be used as source of machine image creation, instant snapshot creation, and not allowed to be deleted with --keep-disk parameter set to true for locked disks.
        /// </summary>
        public readonly bool Locked;
        /// <summary>
        /// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// shielded vm initial state stored on disk
        /// </summary>
        public readonly Outputs.InitialStateConfigResponse ShieldedInstanceInitialState;
        /// <summary>
        /// Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name for zonal disk, and the URL for regional disk.
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// A list of user provided licenses. It represents a list of URLs to the license resource. Unlike regular licenses, user provided licenses can be modified after the disk is created.
        /// </summary>
        public readonly ImmutableArray<string> UserLicenses;

        [OutputConstructor]
        private AttachedDiskResponse(
            string architecture,

            bool autoDelete,

            bool boot,

            string deviceName,

            Outputs.CustomerEncryptionKeyResponse diskEncryptionKey,

            string diskSizeGb,

            bool forceAttach,

            ImmutableArray<Outputs.GuestOsFeatureResponse> guestOsFeatures,

            int index,

            Outputs.AttachedDiskInitializeParamsResponse initializeParams,

            string @interface,

            string kind,

            ImmutableArray<string> licenses,

            bool locked,

            string mode,

            Outputs.InitialStateConfigResponse shieldedInstanceInitialState,

            string source,

            string type,

            ImmutableArray<string> userLicenses)
        {
            Architecture = architecture;
            AutoDelete = autoDelete;
            Boot = boot;
            DeviceName = deviceName;
            DiskEncryptionKey = diskEncryptionKey;
            DiskSizeGb = diskSizeGb;
            ForceAttach = forceAttach;
            GuestOsFeatures = guestOsFeatures;
            Index = index;
            InitializeParams = initializeParams;
            Interface = @interface;
            Kind = kind;
            Licenses = licenses;
            Locked = locked;
            Mode = mode;
            ShieldedInstanceInitialState = shieldedInstanceInitialState;
            Source = source;
            Type = type;
            UserLicenses = userLicenses;
        }
    }
}
