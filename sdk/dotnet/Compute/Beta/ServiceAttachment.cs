// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Beta
{
    /// <summary>
    /// Creates a ServiceAttachment in the specified project in the given scope using the parameters that are included in the request.
    /// </summary>
    [GoogleNativeResourceType("google-native:compute/beta:ServiceAttachment")]
    public partial class ServiceAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An array of connections for all the consumers connected to this service attachment.
        /// </summary>
        [Output("connectedEndpoints")]
        public Output<ImmutableArray<Outputs.ServiceAttachmentConnectedEndpointResponse>> ConnectedEndpoints { get; private set; } = null!;

        /// <summary>
        /// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
        /// </summary>
        [Output("connectionPreference")]
        public Output<string> ConnectionPreference { get; private set; } = null!;

        /// <summary>
        /// Projects that are allowed to connect to this service attachment.
        /// </summary>
        [Output("consumerAcceptLists")]
        public Output<ImmutableArray<Outputs.ServiceAttachmentConsumerProjectLimitResponse>> ConsumerAcceptLists { get; private set; } = null!;

        /// <summary>
        /// Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number.
        /// </summary>
        [Output("consumerRejectLists")]
        public Output<ImmutableArray<string>> ConsumerRejectLists { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp in RFC3339 text format.
        /// </summary>
        [Output("creationTimestamp")]
        public Output<string> CreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name: "p.mycompany.com.". Current max number of domain names supported is 1.
        /// </summary>
        [Output("domainNames")]
        public Output<ImmutableArray<string>> DomainNames { get; private set; } = null!;

        /// <summary>
        /// If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers.
        /// </summary>
        [Output("enableProxyProtocol")]
        public Output<bool> EnableProxyProtocol { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ServiceAttachment. An up-to-date fingerprint must be provided in order to patch/update the ServiceAttachment; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the ServiceAttachment.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// Type of the resource. Always compute#serviceAttachment for service attachments.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment.
        /// </summary>
        [Output("natSubnets")]
        public Output<ImmutableArray<string>> NatSubnets { get; private set; } = null!;

        /// <summary>
        /// The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment.
        /// </summary>
        [Output("producerForwardingRule")]
        public Output<string> ProducerForwardingRule { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// An 128-bit global unique ID of the PSC service attachment.
        /// </summary>
        [Output("pscServiceAttachmentId")]
        public Output<Outputs.Uint128Response> PscServiceAttachmentId { get; private set; } = null!;

        /// <summary>
        /// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints. - If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified . - If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list. For newly created service attachment, this boolean defaults to false.
        /// </summary>
        [Output("reconcileConnections")]
        public Output<bool> ReconcileConnections { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// Server-defined URL for the resource.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The URL of a service serving the endpoint identified by this service attachment.
        /// </summary>
        [Output("targetService")]
        public Output<string> TargetService { get; private set; } = null!;

        /// <summary>
        /// When a tunneling config is set on this service attachment it will encapsulate traffic between consumer and producer. When tunneling is enabled: - nat_subnets must be unset - enable_proxy_protocol must be false - producer_forwarding_rule must be a L4 ILB. - 
        /// </summary>
        [Output("tunnelingConfig")]
        public Output<Outputs.ServiceAttachmentTunnelingConfigResponse> TunnelingConfig { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceAttachment(string name, ServiceAttachmentArgs args, CustomResourceOptions? options = null)
            : base("google-native:compute/beta:ServiceAttachment", name, args ?? new ServiceAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceAttachment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:compute/beta:ServiceAttachment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "project",
                    "region",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceAttachment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ServiceAttachment(name, id, options);
        }
    }

    public sealed class ServiceAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
        /// </summary>
        [Input("connectionPreference")]
        public Input<Pulumi.GoogleNative.Compute.Beta.ServiceAttachmentConnectionPreference>? ConnectionPreference { get; set; }

        [Input("consumerAcceptLists")]
        private InputList<Inputs.ServiceAttachmentConsumerProjectLimitArgs>? _consumerAcceptLists;

        /// <summary>
        /// Projects that are allowed to connect to this service attachment.
        /// </summary>
        public InputList<Inputs.ServiceAttachmentConsumerProjectLimitArgs> ConsumerAcceptLists
        {
            get => _consumerAcceptLists ?? (_consumerAcceptLists = new InputList<Inputs.ServiceAttachmentConsumerProjectLimitArgs>());
            set => _consumerAcceptLists = value;
        }

        [Input("consumerRejectLists")]
        private InputList<string>? _consumerRejectLists;

        /// <summary>
        /// Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number.
        /// </summary>
        public InputList<string> ConsumerRejectLists
        {
            get => _consumerRejectLists ?? (_consumerRejectLists = new InputList<string>());
            set => _consumerRejectLists = value;
        }

        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domainNames")]
        private InputList<string>? _domainNames;

        /// <summary>
        /// If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name: "p.mycompany.com.". Current max number of domain names supported is 1.
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        /// <summary>
        /// If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers.
        /// </summary>
        [Input("enableProxyProtocol")]
        public Input<bool>? EnableProxyProtocol { get; set; }

        /// <summary>
        /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("natSubnets")]
        private InputList<string>? _natSubnets;

        /// <summary>
        /// An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment.
        /// </summary>
        public InputList<string> NatSubnets
        {
            get => _natSubnets ?? (_natSubnets = new InputList<string>());
            set => _natSubnets = value;
        }

        /// <summary>
        /// The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment.
        /// </summary>
        [Input("producerForwardingRule")]
        public Input<string>? ProducerForwardingRule { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints. - If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified . - If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list. For newly created service attachment, this boolean defaults to false.
        /// </summary>
        [Input("reconcileConnections")]
        public Input<bool>? ReconcileConnections { get; set; }

        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The URL of a service serving the endpoint identified by this service attachment.
        /// </summary>
        [Input("targetService")]
        public Input<string>? TargetService { get; set; }

        /// <summary>
        /// When a tunneling config is set on this service attachment it will encapsulate traffic between consumer and producer. When tunneling is enabled: - nat_subnets must be unset - enable_proxy_protocol must be false - producer_forwarding_rule must be a L4 ILB. - 
        /// </summary>
        [Input("tunnelingConfig")]
        public Input<Inputs.ServiceAttachmentTunnelingConfigArgs>? TunnelingConfig { get; set; }

        public ServiceAttachmentArgs()
        {
        }
        public static new ServiceAttachmentArgs Empty => new ServiceAttachmentArgs();
    }
}
