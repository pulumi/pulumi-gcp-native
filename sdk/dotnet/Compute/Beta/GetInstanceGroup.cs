// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.Beta
{
    public static class GetInstanceGroup
    {
        /// <summary>
        /// Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
        /// </summary>
        public static Task<GetInstanceGroupResult> InvokeAsync(GetInstanceGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstanceGroupResult>("google-native:compute/beta:getInstanceGroup", args ?? new GetInstanceGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
        /// </summary>
        public static Output<GetInstanceGroupResult> Invoke(GetInstanceGroupInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetInstanceGroupResult>("google-native:compute/beta:getInstanceGroup", args ?? new GetInstanceGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceGroup", required: true)]
        public string InstanceGroup { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetInstanceGroupArgs()
        {
        }
        public static new GetInstanceGroupArgs Empty => new GetInstanceGroupArgs();
    }

    public sealed class GetInstanceGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceGroup", required: true)]
        public Input<string> InstanceGroup { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetInstanceGroupInvokeArgs()
        {
        }
        public static new GetInstanceGroupInvokeArgs Empty => new GetInstanceGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceGroupResult
    {
        /// <summary>
        /// The creation timestamp for this instance group in RFC3339 text format.
        /// </summary>
        public readonly string CreationTimestamp;
        /// <summary>
        /// An optional description of this resource. Provide this property when you create the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently.
        /// </summary>
        public readonly string Fingerprint;
        /// <summary>
        /// The resource type, which is always compute#instanceGroup for instance groups.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035.
        /// </summary>
        public readonly string Name;
        /// <summary>
        ///  Assigns a name to a port number. For example: {name: "http", port: 80} This allows the system to reference ports by the assigned name instead of a port number. Named ports can also contain multiple ports. For example: [{name: "app1", port: 8080}, {name: "app1", port: 8081}, {name: "app2", port: 8082}] Named ports apply to all instances in this instance group. 
        /// </summary>
        public readonly ImmutableArray<Outputs.NamedPortResponse> NamedPorts;
        /// <summary>
        /// The URL of the network to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0).
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// The URL of the region where the instance group is located (for regional resources).
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The URL for this instance group. The server generates this URL.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The total number of instances in the instance group.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The URL of the subnetwork to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0).
        /// </summary>
        public readonly string Subnetwork;
        /// <summary>
        /// The URL of the zone where the instance group is located (for zonal resources).
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetInstanceGroupResult(
            string creationTimestamp,

            string description,

            string fingerprint,

            string kind,

            string name,

            ImmutableArray<Outputs.NamedPortResponse> namedPorts,

            string network,

            string region,

            string selfLink,

            int size,

            string subnetwork,

            string zone)
        {
            CreationTimestamp = creationTimestamp;
            Description = description;
            Fingerprint = fingerprint;
            Kind = kind;
            Name = name;
            NamedPorts = namedPorts;
            Network = network;
            Region = region;
            SelfLink = selfLink;
            Size = size;
            Subnetwork = subnetwork;
            Zone = zone;
        }
    }
}
