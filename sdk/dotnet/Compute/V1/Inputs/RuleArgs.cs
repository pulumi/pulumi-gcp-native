// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.V1.Inputs
{

    /// <summary>
    /// A rule to be applied in a Policy.
    /// </summary>
    public sealed class RuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required
        /// </summary>
        [Input("action")]
        public Input<Pulumi.GoogleNative.Compute.V1.RuleAction>? Action { get; set; }

        [Input("conditions")]
        private InputList<Inputs.ConditionArgs>? _conditions;

        /// <summary>
        /// Additional restrictions that must be met. All conditions must pass for the rule to match.
        /// </summary>
        public InputList<Inputs.ConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.ConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// Human-readable description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ins")]
        private InputList<string>? _ins;

        /// <summary>
        /// If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
        /// </summary>
        public InputList<string> Ins
        {
            get => _ins ?? (_ins = new InputList<string>());
            set => _ins = value;
        }

        [Input("logConfigs")]
        private InputList<Inputs.LogConfigArgs>? _logConfigs;

        /// <summary>
        /// The config returned to callers of tech.iam.IAM.CheckPolicy for any entries that match the LOG action.
        /// </summary>
        public InputList<Inputs.LogConfigArgs> LogConfigs
        {
            get => _logConfigs ?? (_logConfigs = new InputList<Inputs.LogConfigArgs>());
            set => _logConfigs = value;
        }

        [Input("notIns")]
        private InputList<string>? _notIns;

        /// <summary>
        /// If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries.
        /// </summary>
        public InputList<string> NotIns
        {
            get => _notIns ?? (_notIns = new InputList<string>());
            set => _notIns = value;
        }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        public RuleArgs()
        {
        }
    }
}
