// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Compute.V1
{
    public static class GetRegionInstanceGroupManager
    {
        /// <summary>
        /// Returns all of the details about the specified managed instance group.
        /// </summary>
        public static Task<GetRegionInstanceGroupManagerResult> InvokeAsync(GetRegionInstanceGroupManagerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionInstanceGroupManagerResult>("google-native:compute/v1:getRegionInstanceGroupManager", args ?? new GetRegionInstanceGroupManagerArgs(), options.WithDefaults());

        /// <summary>
        /// Returns all of the details about the specified managed instance group.
        /// </summary>
        public static Output<GetRegionInstanceGroupManagerResult> Invoke(GetRegionInstanceGroupManagerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionInstanceGroupManagerResult>("google-native:compute/v1:getRegionInstanceGroupManager", args ?? new GetRegionInstanceGroupManagerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionInstanceGroupManagerArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceGroupManager", required: true)]
        public string InstanceGroupManager { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        public GetRegionInstanceGroupManagerArgs()
        {
        }
        public static new GetRegionInstanceGroupManagerArgs Empty => new GetRegionInstanceGroupManagerArgs();
    }

    public sealed class GetRegionInstanceGroupManagerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceGroupManager", required: true)]
        public Input<string> InstanceGroupManager { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public GetRegionInstanceGroupManagerInvokeArgs()
        {
        }
        public static new GetRegionInstanceGroupManagerInvokeArgs Empty => new GetRegionInstanceGroupManagerInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionInstanceGroupManagerResult
    {
        /// <summary>
        /// The autohealing policy for this managed instance group. You can specify only one value.
        /// </summary>
        public readonly ImmutableArray<Outputs.InstanceGroupManagerAutoHealingPolicyResponse> AutoHealingPolicies;
        /// <summary>
        /// The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
        /// </summary>
        public readonly string BaseInstanceName;
        /// <summary>
        /// The creation timestamp for this managed instance group in RFC3339 text format.
        /// </summary>
        public readonly string CreationTimestamp;
        /// <summary>
        /// The list of instance actions and the number of instances in this managed instance group that are scheduled for each of those actions.
        /// </summary>
        public readonly Outputs.InstanceGroupManagerActionsSummaryResponse CurrentActions;
        /// <summary>
        /// An optional description of this resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Policy specifying the intended distribution of managed instances across zones in a regional managed instance group.
        /// </summary>
        public readonly Outputs.DistributionPolicyResponse DistributionPolicy;
        /// <summary>
        /// Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager.
        /// </summary>
        public readonly string Fingerprint;
        /// <summary>
        /// The URL of the Instance Group resource.
        /// </summary>
        public readonly string InstanceGroup;
        /// <summary>
        /// The repair policy for this managed instance group.
        /// </summary>
        public readonly Outputs.InstanceGroupManagerInstanceLifecyclePolicyResponse InstanceLifecyclePolicy;
        /// <summary>
        /// The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
        /// </summary>
        public readonly string InstanceTemplate;
        /// <summary>
        /// The resource type, which is always compute#instanceGroupManager for managed instance groups.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Pagination behavior of the listManagedInstances API method for this managed instance group.
        /// </summary>
        public readonly string ListManagedInstancesResults;
        /// <summary>
        /// The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Named ports configured for the Instance Groups complementary to this Instance Group Manager.
        /// </summary>
        public readonly ImmutableArray<Outputs.NamedPortResponse> NamedPorts;
        /// <summary>
        /// The URL of the region where the managed instance group resides (for regional resources).
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The URL for this managed instance group. The server defines this URL.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// Stateful configuration for this Instanced Group Manager
        /// </summary>
        public readonly Outputs.StatefulPolicyResponse StatefulPolicy;
        /// <summary>
        /// The status of this managed instance group.
        /// </summary>
        public readonly Outputs.InstanceGroupManagerStatusResponse Status;
        /// <summary>
        /// The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
        /// </summary>
        public readonly ImmutableArray<string> TargetPools;
        /// <summary>
        /// The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
        /// </summary>
        public readonly int TargetSize;
        /// <summary>
        /// The update policy for this managed instance group.
        /// </summary>
        public readonly Outputs.InstanceGroupManagerUpdatePolicyResponse UpdatePolicy;
        /// <summary>
        /// Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
        /// </summary>
        public readonly ImmutableArray<Outputs.InstanceGroupManagerVersionResponse> Versions;
        /// <summary>
        /// The URL of a zone where the managed instance group is located (for zonal resources).
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetRegionInstanceGroupManagerResult(
            ImmutableArray<Outputs.InstanceGroupManagerAutoHealingPolicyResponse> autoHealingPolicies,

            string baseInstanceName,

            string creationTimestamp,

            Outputs.InstanceGroupManagerActionsSummaryResponse currentActions,

            string description,

            Outputs.DistributionPolicyResponse distributionPolicy,

            string fingerprint,

            string instanceGroup,

            Outputs.InstanceGroupManagerInstanceLifecyclePolicyResponse instanceLifecyclePolicy,

            string instanceTemplate,

            string kind,

            string listManagedInstancesResults,

            string name,

            ImmutableArray<Outputs.NamedPortResponse> namedPorts,

            string region,

            string selfLink,

            Outputs.StatefulPolicyResponse statefulPolicy,

            Outputs.InstanceGroupManagerStatusResponse status,

            ImmutableArray<string> targetPools,

            int targetSize,

            Outputs.InstanceGroupManagerUpdatePolicyResponse updatePolicy,

            ImmutableArray<Outputs.InstanceGroupManagerVersionResponse> versions,

            string zone)
        {
            AutoHealingPolicies = autoHealingPolicies;
            BaseInstanceName = baseInstanceName;
            CreationTimestamp = creationTimestamp;
            CurrentActions = currentActions;
            Description = description;
            DistributionPolicy = distributionPolicy;
            Fingerprint = fingerprint;
            InstanceGroup = instanceGroup;
            InstanceLifecyclePolicy = instanceLifecyclePolicy;
            InstanceTemplate = instanceTemplate;
            Kind = kind;
            ListManagedInstancesResults = listManagedInstancesResults;
            Name = name;
            NamedPorts = namedPorts;
            Region = region;
            SelfLink = selfLink;
            StatefulPolicy = statefulPolicy;
            Status = status;
            TargetPools = targetPools;
            TargetSize = targetSize;
            UpdatePolicy = updatePolicy;
            Versions = versions;
            Zone = zone;
        }
    }
}
