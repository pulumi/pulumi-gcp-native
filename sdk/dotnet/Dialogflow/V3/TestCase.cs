// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dialogflow.V3
{
    /// <summary>
    /// Creates a test case for the given agent.
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:dialogflow/v3:TestCase")]
    public partial class TestCase : global::Pulumi.CustomResource
    {
        [Output("agentId")]
        public Output<string> AgentId { get; private set; } = null!;

        /// <summary>
        /// When the test was created.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the test case, unique within the agent. Limit of 200 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The latest test result.
        /// </summary>
        [Output("lastTestResult")]
        public Output<Outputs.GoogleCloudDialogflowCxV3TestCaseResultResponse> LastTestResult { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Additional freeform notes about the test case. Limit of 400 characters.
        /// </summary>
        [Output("notes")]
        public Output<string> Notes { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with "#" and has a limit of 30 characters.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
        /// </summary>
        [Output("testCaseConversationTurns")]
        public Output<ImmutableArray<Outputs.GoogleCloudDialogflowCxV3ConversationTurnResponse>> TestCaseConversationTurns { get; private set; } = null!;

        /// <summary>
        /// Config for the test case.
        /// </summary>
        [Output("testConfig")]
        public Output<Outputs.GoogleCloudDialogflowCxV3TestConfigResponse> TestConfig { get; private set; } = null!;


        /// <summary>
        /// Create a TestCase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TestCase(string name, TestCaseArgs args, CustomResourceOptions? options = null)
            : base("google-native:dialogflow/v3:TestCase", name, args ?? new TestCaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TestCase(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:dialogflow/v3:TestCase", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "agentId",
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TestCase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TestCase Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new TestCase(name, id, options);
        }
    }

    public sealed class TestCaseArgs : global::Pulumi.ResourceArgs
    {
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// The human-readable name of the test case, unique within the agent. Limit of 200 characters.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The latest test result.
        /// </summary>
        [Input("lastTestResult")]
        public Input<Inputs.GoogleCloudDialogflowCxV3TestCaseResultArgs>? LastTestResult { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Additional freeform notes about the test case. Limit of 400 characters.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with "#" and has a limit of 30 characters.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("testCaseConversationTurns")]
        private InputList<Inputs.GoogleCloudDialogflowCxV3ConversationTurnArgs>? _testCaseConversationTurns;

        /// <summary>
        /// The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
        /// </summary>
        public InputList<Inputs.GoogleCloudDialogflowCxV3ConversationTurnArgs> TestCaseConversationTurns
        {
            get => _testCaseConversationTurns ?? (_testCaseConversationTurns = new InputList<Inputs.GoogleCloudDialogflowCxV3ConversationTurnArgs>());
            set => _testCaseConversationTurns = value;
        }

        /// <summary>
        /// Config for the test case.
        /// </summary>
        [Input("testConfig")]
        public Input<Inputs.GoogleCloudDialogflowCxV3TestConfigArgs>? TestConfig { get; set; }

        public TestCaseArgs()
        {
        }
        public static new TestCaseArgs Empty => new TestCaseArgs();
    }
}
