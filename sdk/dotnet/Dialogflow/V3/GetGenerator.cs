// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dialogflow.V3
{
    public static class GetGenerator
    {
        /// <summary>
        /// Retrieves the specified generator.
        /// </summary>
        public static Task<GetGeneratorResult> InvokeAsync(GetGeneratorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGeneratorResult>("google-native:dialogflow/v3:getGenerator", args ?? new GetGeneratorArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the specified generator.
        /// </summary>
        public static Output<GetGeneratorResult> Invoke(GetGeneratorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGeneratorResult>("google-native:dialogflow/v3:getGenerator", args ?? new GetGeneratorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGeneratorArgs : global::Pulumi.InvokeArgs
    {
        [Input("agentId", required: true)]
        public string AgentId { get; set; } = null!;

        [Input("generatorId", required: true)]
        public string GeneratorId { get; set; } = null!;

        [Input("languageCode")]
        public string? LanguageCode { get; set; }

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetGeneratorArgs()
        {
        }
        public static new GetGeneratorArgs Empty => new GetGeneratorArgs();
    }

    public sealed class GetGeneratorInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        [Input("generatorId", required: true)]
        public Input<string> GeneratorId { get; set; } = null!;

        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetGeneratorInvokeArgs()
        {
        }
        public static new GetGeneratorInvokeArgs Empty => new GetGeneratorInvokeArgs();
    }


    [OutputType]
    public sealed class GetGeneratorResult
    {
        /// <summary>
        /// The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. List of custom placeholders in the prompt text.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudDialogflowCxV3GeneratorPlaceholderResponse> Placeholders;
        /// <summary>
        /// Prompt for the LLM model.
        /// </summary>
        public readonly Outputs.GoogleCloudDialogflowCxV3PhraseResponse PromptText;

        [OutputConstructor]
        private GetGeneratorResult(
            string displayName,

            string name,

            ImmutableArray<Outputs.GoogleCloudDialogflowCxV3GeneratorPlaceholderResponse> placeholders,

            Outputs.GoogleCloudDialogflowCxV3PhraseResponse promptText)
        {
            DisplayName = displayName;
            Name = name;
            Placeholders = placeholders;
            PromptText = promptText;
        }
    }
}
