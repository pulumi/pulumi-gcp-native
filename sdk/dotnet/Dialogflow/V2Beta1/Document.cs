// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dialogflow.V2Beta1
{
    /// <summary>
    /// Creates a new document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.
    /// </summary>
    [GoogleNativeResourceType("google-native:dialogflow/v2beta1:Document")]
    public partial class Document : Pulumi.CustomResource
    {
        /// <summary>
        /// The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types. Note: This field is in the process of being deprecated, please use raw_content instead.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.
        /// </summary>
        [Output("contentUri")]
        public Output<string> ContentUri { get; private set; } = null!;

        /// <summary>
        /// The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.
        /// </summary>
        [Output("enableAutoReload")]
        public Output<bool> EnableAutoReload { get; private set; } = null!;

        /// <summary>
        /// Whether to import custom metadata from Google Cloud Storage. Only valid when the document source is Google Cloud Storage URI.
        /// </summary>
        [Output("importGcsCustomMetadata")]
        public Output<string?> ImportGcsCustomMetadata { get; private set; } = null!;

        [Output("knowledgeBaseId")]
        public Output<string> KnowledgeBaseId { get; private set; } = null!;

        /// <summary>
        /// The knowledge type of document content.
        /// </summary>
        [Output("knowledgeTypes")]
        public Output<ImmutableArray<string>> KnowledgeTypes { get; private set; } = null!;

        /// <summary>
        /// The time and status of the latest reload. This reload may have been triggered automatically or manually and may not have succeeded.
        /// </summary>
        [Output("latestReloadStatus")]
        public Output<Outputs.GoogleCloudDialogflowV2beta1DocumentReloadStatusResponse> LatestReloadStatus { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        /// <summary>
        /// The MIME type of this document.
        /// </summary>
        [Output("mimeType")]
        public Output<string> MimeType { get; private set; } = null!;

        /// <summary>
        /// Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.
        /// </summary>
        [Output("rawContent")]
        public Output<string> RawContent { get; private set; } = null!;

        /// <summary>
        /// The current state of the document.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a Document resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Document(string name, DocumentArgs args, CustomResourceOptions? options = null)
            : base("google-native:dialogflow/v2beta1:Document", name, args ?? new DocumentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Document(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:dialogflow/v2beta1:Document", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "knowledgeBaseId",
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Document resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Document Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Document(name, id, options);
        }
    }

    public sealed class DocumentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types. Note: This field is in the process of being deprecated, please use raw_content instead.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.
        /// </summary>
        [Input("contentUri")]
        public Input<string>? ContentUri { get; set; }

        /// <summary>
        /// The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.
        /// </summary>
        [Input("enableAutoReload")]
        public Input<bool>? EnableAutoReload { get; set; }

        /// <summary>
        /// Whether to import custom metadata from Google Cloud Storage. Only valid when the document source is Google Cloud Storage URI.
        /// </summary>
        [Input("importGcsCustomMetadata")]
        public Input<string>? ImportGcsCustomMetadata { get; set; }

        [Input("knowledgeBaseId", required: true)]
        public Input<string> KnowledgeBaseId { get; set; } = null!;

        [Input("knowledgeTypes", required: true)]
        private InputList<Pulumi.GoogleNative.Dialogflow.V2Beta1.DocumentKnowledgeTypesItem>? _knowledgeTypes;

        /// <summary>
        /// The knowledge type of document content.
        /// </summary>
        public InputList<Pulumi.GoogleNative.Dialogflow.V2Beta1.DocumentKnowledgeTypesItem> KnowledgeTypes
        {
            get => _knowledgeTypes ?? (_knowledgeTypes = new InputList<Pulumi.GoogleNative.Dialogflow.V2Beta1.DocumentKnowledgeTypesItem>());
            set => _knowledgeTypes = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The MIME type of this document.
        /// </summary>
        [Input("mimeType", required: true)]
        public Input<string> MimeType { get; set; } = null!;

        /// <summary>
        /// Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.
        /// </summary>
        [Input("rawContent")]
        public Input<string>? RawContent { get; set; }

        public DocumentArgs()
        {
        }
    }
}
