// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GcpNative.Composer.V1Beta1.Outputs
{

    [OutputType]
    public sealed class EnvironmentConfigResponse
    {
        /// <summary>
        /// The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
        /// </summary>
        public readonly string AirflowUri;
        /// <summary>
        /// The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
        /// </summary>
        public readonly string DagGcsPrefix;
        /// <summary>
        /// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
        /// </summary>
        public readonly Outputs.DatabaseConfigResponse DatabaseConfig;
        /// <summary>
        /// Optional. The encryption options for the Composer environment and its dependencies. Cannot be updated.
        /// </summary>
        public readonly Outputs.EncryptionConfigResponse EncryptionConfig;
        /// <summary>
        /// The Kubernetes Engine cluster used to run this environment.
        /// </summary>
        public readonly string GkeCluster;
        /// <summary>
        /// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, Cloud Composer components may be subject to maintenance at any time.
        /// </summary>
        public readonly Outputs.MaintenanceWindowResponse MaintenanceWindow;
        /// <summary>
        /// The configuration used for the Kubernetes Engine cluster.
        /// </summary>
        public readonly Outputs.NodeConfigResponse NodeConfig;
        /// <summary>
        /// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment.
        /// </summary>
        public readonly int NodeCount;
        /// <summary>
        /// The configuration used for the Private IP Cloud Composer environment.
        /// </summary>
        public readonly Outputs.PrivateEnvironmentConfigResponse PrivateEnvironmentConfig;
        /// <summary>
        /// The configuration settings for software inside the environment.
        /// </summary>
        public readonly Outputs.SoftwareConfigResponse SoftwareConfig;
        /// <summary>
        /// Optional. The configuration settings for the Airflow web server App Engine instance.
        /// </summary>
        public readonly Outputs.WebServerConfigResponse WebServerConfig;
        /// <summary>
        /// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
        /// </summary>
        public readonly Outputs.WebServerNetworkAccessControlResponse WebServerNetworkAccessControl;

        [OutputConstructor]
        private EnvironmentConfigResponse(
            string airflowUri,

            string dagGcsPrefix,

            Outputs.DatabaseConfigResponse databaseConfig,

            Outputs.EncryptionConfigResponse encryptionConfig,

            string gkeCluster,

            Outputs.MaintenanceWindowResponse maintenanceWindow,

            Outputs.NodeConfigResponse nodeConfig,

            int nodeCount,

            Outputs.PrivateEnvironmentConfigResponse privateEnvironmentConfig,

            Outputs.SoftwareConfigResponse softwareConfig,

            Outputs.WebServerConfigResponse webServerConfig,

            Outputs.WebServerNetworkAccessControlResponse webServerNetworkAccessControl)
        {
            AirflowUri = airflowUri;
            DagGcsPrefix = dagGcsPrefix;
            DatabaseConfig = databaseConfig;
            EncryptionConfig = encryptionConfig;
            GkeCluster = gkeCluster;
            MaintenanceWindow = maintenanceWindow;
            NodeConfig = nodeConfig;
            NodeCount = nodeCount;
            PrivateEnvironmentConfig = privateEnvironmentConfig;
            SoftwareConfig = softwareConfig;
            WebServerConfig = webServerConfig;
            WebServerNetworkAccessControl = webServerNetworkAccessControl;
        }
    }
}
