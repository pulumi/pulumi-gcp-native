// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Composer.V1
{
    /// <summary>
    /// Optional. Retention can be either enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct AirflowMetadataRetentionPolicyConfigRetentionMode : IEquatable<AirflowMetadataRetentionPolicyConfigRetentionMode>
    {
        private readonly string _value;

        private AirflowMetadataRetentionPolicyConfigRetentionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default mode doesn't change environment parameters.
        /// </summary>
        public static AirflowMetadataRetentionPolicyConfigRetentionMode RetentionModeUnspecified { get; } = new AirflowMetadataRetentionPolicyConfigRetentionMode("RETENTION_MODE_UNSPECIFIED");
        /// <summary>
        /// Retention policy is enabled.
        /// </summary>
        public static AirflowMetadataRetentionPolicyConfigRetentionMode RetentionModeEnabled { get; } = new AirflowMetadataRetentionPolicyConfigRetentionMode("RETENTION_MODE_ENABLED");
        /// <summary>
        /// Retention policy is disabled.
        /// </summary>
        public static AirflowMetadataRetentionPolicyConfigRetentionMode RetentionModeDisabled { get; } = new AirflowMetadataRetentionPolicyConfigRetentionMode("RETENTION_MODE_DISABLED");

        public static bool operator ==(AirflowMetadataRetentionPolicyConfigRetentionMode left, AirflowMetadataRetentionPolicyConfigRetentionMode right) => left.Equals(right);
        public static bool operator !=(AirflowMetadataRetentionPolicyConfigRetentionMode left, AirflowMetadataRetentionPolicyConfigRetentionMode right) => !left.Equals(right);

        public static explicit operator string(AirflowMetadataRetentionPolicyConfigRetentionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AirflowMetadataRetentionPolicyConfigRetentionMode other && Equals(other);
        public bool Equals(AirflowMetadataRetentionPolicyConfigRetentionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentConfigEnvironmentSize : IEquatable<EnvironmentConfigEnvironmentSize>
    {
        private readonly string _value;

        private EnvironmentConfigEnvironmentSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The size of the environment is unspecified.
        /// </summary>
        public static EnvironmentConfigEnvironmentSize EnvironmentSizeUnspecified { get; } = new EnvironmentConfigEnvironmentSize("ENVIRONMENT_SIZE_UNSPECIFIED");
        /// <summary>
        /// The environment size is small.
        /// </summary>
        public static EnvironmentConfigEnvironmentSize EnvironmentSizeSmall { get; } = new EnvironmentConfigEnvironmentSize("ENVIRONMENT_SIZE_SMALL");
        /// <summary>
        /// The environment size is medium.
        /// </summary>
        public static EnvironmentConfigEnvironmentSize EnvironmentSizeMedium { get; } = new EnvironmentConfigEnvironmentSize("ENVIRONMENT_SIZE_MEDIUM");
        /// <summary>
        /// The environment size is large.
        /// </summary>
        public static EnvironmentConfigEnvironmentSize EnvironmentSizeLarge { get; } = new EnvironmentConfigEnvironmentSize("ENVIRONMENT_SIZE_LARGE");

        public static bool operator ==(EnvironmentConfigEnvironmentSize left, EnvironmentConfigEnvironmentSize right) => left.Equals(right);
        public static bool operator !=(EnvironmentConfigEnvironmentSize left, EnvironmentConfigEnvironmentSize right) => !left.Equals(right);

        public static explicit operator string(EnvironmentConfigEnvironmentSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentConfigEnvironmentSize other && Equals(other);
        public bool Equals(EnvironmentConfigEnvironmentSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Resilience mode of the Cloud Composer Environment. This field is supported for Cloud Composer environments in versions composer-2.2.0-airflow-*.*.* and newer.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentConfigResilienceMode : IEquatable<EnvironmentConfigResilienceMode>
    {
        private readonly string _value;

        private EnvironmentConfigResilienceMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default mode doesn't change environment parameters.
        /// </summary>
        public static EnvironmentConfigResilienceMode ResilienceModeUnspecified { get; } = new EnvironmentConfigResilienceMode("RESILIENCE_MODE_UNSPECIFIED");
        /// <summary>
        /// Enabled High Resilience mode, including Cloud SQL HA.
        /// </summary>
        public static EnvironmentConfigResilienceMode HighResilience { get; } = new EnvironmentConfigResilienceMode("HIGH_RESILIENCE");

        public static bool operator ==(EnvironmentConfigResilienceMode left, EnvironmentConfigResilienceMode right) => left.Equals(right);
        public static bool operator !=(EnvironmentConfigResilienceMode left, EnvironmentConfigResilienceMode right) => !left.Equals(right);

        public static explicit operator string(EnvironmentConfigResilienceMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentConfigResilienceMode other && Equals(other);
        public bool Equals(EnvironmentConfigResilienceMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current state of the environment.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentState : IEquatable<EnvironmentState>
    {
        private readonly string _value;

        private EnvironmentState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The state of the environment is unknown.
        /// </summary>
        public static EnvironmentState StateUnspecified { get; } = new EnvironmentState("STATE_UNSPECIFIED");
        /// <summary>
        /// The environment is in the process of being created.
        /// </summary>
        public static EnvironmentState Creating { get; } = new EnvironmentState("CREATING");
        /// <summary>
        /// The environment is currently running and healthy. It is ready for use.
        /// </summary>
        public static EnvironmentState Running { get; } = new EnvironmentState("RUNNING");
        /// <summary>
        /// The environment is being updated. It remains usable but cannot receive additional update requests or be deleted at this time.
        /// </summary>
        public static EnvironmentState Updating { get; } = new EnvironmentState("UPDATING");
        /// <summary>
        /// The environment is undergoing deletion. It cannot be used.
        /// </summary>
        public static EnvironmentState Deleting { get; } = new EnvironmentState("DELETING");
        /// <summary>
        /// The environment has encountered an error and cannot be used.
        /// </summary>
        public static EnvironmentState Error { get; } = new EnvironmentState("ERROR");

        public static bool operator ==(EnvironmentState left, EnvironmentState right) => left.Equals(right);
        public static bool operator !=(EnvironmentState left, EnvironmentState right) => !left.Equals(right);

        public static explicit operator string(EnvironmentState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentState other && Equals(other);
        public bool Equals(EnvironmentState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Indicates the user requested specifc connection type between Tenant and Customer projects. You cannot set networking connection type in public IP environment.
    /// </summary>
    [EnumType]
    public readonly struct NetworkingConfigConnectionType : IEquatable<NetworkingConfigConnectionType>
    {
        private readonly string _value;

        private NetworkingConfigConnectionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No specific connection type was requested, so the environment uses the default value corresponding to the rest of its configuration.
        /// </summary>
        public static NetworkingConfigConnectionType ConnectionTypeUnspecified { get; } = new NetworkingConfigConnectionType("CONNECTION_TYPE_UNSPECIFIED");
        /// <summary>
        /// Requests the use of VPC peerings for connecting the Customer and Tenant projects.
        /// </summary>
        public static NetworkingConfigConnectionType VpcPeering { get; } = new NetworkingConfigConnectionType("VPC_PEERING");
        /// <summary>
        /// Requests the use of Private Service Connect for connecting the Customer and Tenant projects.
        /// </summary>
        public static NetworkingConfigConnectionType PrivateServiceConnect { get; } = new NetworkingConfigConnectionType("PRIVATE_SERVICE_CONNECT");

        public static bool operator ==(NetworkingConfigConnectionType left, NetworkingConfigConnectionType right) => left.Equals(right);
        public static bool operator !=(NetworkingConfigConnectionType left, NetworkingConfigConnectionType right) => !left.Equals(right);

        public static explicit operator string(NetworkingConfigConnectionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkingConfigConnectionType other && Equals(other);
        public bool Equals(NetworkingConfigConnectionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Whether or not the web server uses custom plugins. If unspecified, the field defaults to `PLUGINS_ENABLED`. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
    /// </summary>
    [EnumType]
    public readonly struct SoftwareConfigWebServerPluginsMode : IEquatable<SoftwareConfigWebServerPluginsMode>
    {
        private readonly string _value;

        private SoftwareConfigWebServerPluginsMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default mode.
        /// </summary>
        public static SoftwareConfigWebServerPluginsMode WebServerPluginsModeUnspecified { get; } = new SoftwareConfigWebServerPluginsMode("WEB_SERVER_PLUGINS_MODE_UNSPECIFIED");
        /// <summary>
        /// Web server plugins are not supported.
        /// </summary>
        public static SoftwareConfigWebServerPluginsMode PluginsDisabled { get; } = new SoftwareConfigWebServerPluginsMode("PLUGINS_DISABLED");
        /// <summary>
        /// Web server plugins are supported.
        /// </summary>
        public static SoftwareConfigWebServerPluginsMode PluginsEnabled { get; } = new SoftwareConfigWebServerPluginsMode("PLUGINS_ENABLED");

        public static bool operator ==(SoftwareConfigWebServerPluginsMode left, SoftwareConfigWebServerPluginsMode right) => left.Equals(right);
        public static bool operator !=(SoftwareConfigWebServerPluginsMode left, SoftwareConfigWebServerPluginsMode right) => !left.Equals(right);

        public static explicit operator string(SoftwareConfigWebServerPluginsMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SoftwareConfigWebServerPluginsMode other && Equals(other);
        public bool Equals(SoftwareConfigWebServerPluginsMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The mode of storage for Airflow workers task logs.
    /// </summary>
    [EnumType]
    public readonly struct TaskLogsRetentionConfigStorageMode : IEquatable<TaskLogsRetentionConfigStorageMode>
    {
        private readonly string _value;

        private TaskLogsRetentionConfigStorageMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// This configuration is not specified by the user.
        /// </summary>
        public static TaskLogsRetentionConfigStorageMode TaskLogsStorageModeUnspecified { get; } = new TaskLogsRetentionConfigStorageMode("TASK_LOGS_STORAGE_MODE_UNSPECIFIED");
        /// <summary>
        /// Store task logs in Cloud Logging and in the environment's Cloud Storage bucket.
        /// </summary>
        public static TaskLogsRetentionConfigStorageMode CloudLoggingAndCloudStorage { get; } = new TaskLogsRetentionConfigStorageMode("CLOUD_LOGGING_AND_CLOUD_STORAGE");
        /// <summary>
        /// Store task logs in Cloud Logging only.
        /// </summary>
        public static TaskLogsRetentionConfigStorageMode CloudLoggingOnly { get; } = new TaskLogsRetentionConfigStorageMode("CLOUD_LOGGING_ONLY");

        public static bool operator ==(TaskLogsRetentionConfigStorageMode left, TaskLogsRetentionConfigStorageMode right) => left.Equals(right);
        public static bool operator !=(TaskLogsRetentionConfigStorageMode left, TaskLogsRetentionConfigStorageMode right) => !left.Equals(right);

        public static explicit operator string(TaskLogsRetentionConfigStorageMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TaskLogsRetentionConfigStorageMode other && Equals(other);
        public bool Equals(TaskLogsRetentionConfigStorageMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
