// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigQueryDataTransfer.V1
{
    public static class GetTransferConfig
    {
        /// <summary>
        /// Returns information about a data transfer config.
        /// </summary>
        public static Task<GetTransferConfigResult> InvokeAsync(GetTransferConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransferConfigResult>("google-native:bigquerydatatransfer/v1:getTransferConfig", args ?? new GetTransferConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Returns information about a data transfer config.
        /// </summary>
        public static Output<GetTransferConfigResult> Invoke(GetTransferConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransferConfigResult>("google-native:bigquerydatatransfer/v1:getTransferConfig", args ?? new GetTransferConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransferConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("transferConfigId", required: true)]
        public string TransferConfigId { get; set; } = null!;

        public GetTransferConfigArgs()
        {
        }
        public static new GetTransferConfigArgs Empty => new GetTransferConfigArgs();
    }

    public sealed class GetTransferConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("transferConfigId", required: true)]
        public Input<string> TransferConfigId { get; set; } = null!;

        public GetTransferConfigInvokeArgs()
        {
        }
        public static new GetTransferConfigInvokeArgs Empty => new GetTransferConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransferConfigResult
    {
        /// <summary>
        /// The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
        /// </summary>
        public readonly int DataRefreshWindowDays;
        /// <summary>
        /// Data source ID. This cannot be changed once data transfer is created. The full list of available data source IDs can be returned through an API call: https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list
        /// </summary>
        public readonly string DataSourceId;
        /// <summary>
        /// Region in which BigQuery dataset is located.
        /// </summary>
        public readonly string DatasetRegion;
        /// <summary>
        /// The BigQuery target dataset id.
        /// </summary>
        public readonly string DestinationDatasetId;
        /// <summary>
        /// Is this config disabled. When set to true, no runs are scheduled for a given transfer.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// User specified display name for the data transfer.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Email notifications will be sent according to these preferences to the email address of the user who owns this transfer config.
        /// </summary>
        public readonly Outputs.EmailPreferencesResponse EmailPreferences;
        /// <summary>
        /// The encryption configuration part. Currently, it is only used for the optional KMS key name. The BigQuery service account of your project must be granted permissions to use the key. Read methods will return the key name applied in effect. Write methods will apply the key if it is present, or otherwise try to apply project default keys if it is absent.
        /// </summary>
        public readonly Outputs.EncryptionConfigurationResponse EncryptionConfiguration;
        /// <summary>
        /// The resource name of the transfer config. Transfer config names have the form either `projects/{project_id}/locations/{region}/transferConfigs/{config_id}` or `projects/{project_id}/transferConfigs/{config_id}`, where `config_id` is usually a UUID, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Next time when data transfer will run.
        /// </summary>
        public readonly string NextRunTime;
        /// <summary>
        /// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
        /// </summary>
        public readonly string NotificationPubsubTopic;
        /// <summary>
        /// Information about the user whose credentials are used to transfer data. Populated only for `transferConfigs.get` requests. In case the user information is not available, this field will not be populated.
        /// </summary>
        public readonly Outputs.UserInfoResponse OwnerInfo;
        /// <summary>
        /// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
        /// </summary>
        public readonly ImmutableDictionary<string, object> Params;
        /// <summary>
        /// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
        /// </summary>
        public readonly string Schedule;
        /// <summary>
        /// Options customizing the data transfer schedule.
        /// </summary>
        public readonly Outputs.ScheduleOptionsResponse ScheduleOptions;
        /// <summary>
        /// State of the most recently updated transfer run.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Data transfer modification time. Ignored by server on input.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// Deprecated. Unique ID of the user on whose behalf transfer is done.
        /// </summary>
        public readonly string UserId;

        [OutputConstructor]
        private GetTransferConfigResult(
            int dataRefreshWindowDays,

            string dataSourceId,

            string datasetRegion,

            string destinationDatasetId,

            bool disabled,

            string displayName,

            Outputs.EmailPreferencesResponse emailPreferences,

            Outputs.EncryptionConfigurationResponse encryptionConfiguration,

            string name,

            string nextRunTime,

            string notificationPubsubTopic,

            Outputs.UserInfoResponse ownerInfo,

            ImmutableDictionary<string, object> @params,

            string schedule,

            Outputs.ScheduleOptionsResponse scheduleOptions,

            string state,

            string updateTime,

            string userId)
        {
            DataRefreshWindowDays = dataRefreshWindowDays;
            DataSourceId = dataSourceId;
            DatasetRegion = datasetRegion;
            DestinationDatasetId = destinationDatasetId;
            Disabled = disabled;
            DisplayName = displayName;
            EmailPreferences = emailPreferences;
            EncryptionConfiguration = encryptionConfiguration;
            Name = name;
            NextRunTime = nextRunTime;
            NotificationPubsubTopic = notificationPubsubTopic;
            OwnerInfo = ownerInfo;
            Params = @params;
            Schedule = schedule;
            ScheduleOptions = scheduleOptions;
            State = state;
            UpdateTime = updateTime;
            UserId = userId;
        }
    }
}
