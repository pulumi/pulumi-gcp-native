// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Gkebackup.V1
{
    public static class GetBackupPlan
    {
        /// <summary>
        /// Retrieve the details of a single BackupPlan.
        /// </summary>
        public static Task<GetBackupPlanResult> InvokeAsync(GetBackupPlanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupPlanResult>("google-native:gkebackup/v1:getBackupPlan", args ?? new GetBackupPlanArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve the details of a single BackupPlan.
        /// </summary>
        public static Output<GetBackupPlanResult> Invoke(GetBackupPlanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupPlanResult>("google-native:gkebackup/v1:getBackupPlan", args ?? new GetBackupPlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupPlanArgs : global::Pulumi.InvokeArgs
    {
        [Input("backupPlanId", required: true)]
        public string BackupPlanId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetBackupPlanArgs()
        {
        }
        public static new GetBackupPlanArgs Empty => new GetBackupPlanArgs();
    }

    public sealed class GetBackupPlanInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("backupPlanId", required: true)]
        public Input<string> BackupPlanId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetBackupPlanInvokeArgs()
        {
        }
        public static new GetBackupPlanInvokeArgs Empty => new GetBackupPlanInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupPlanResult
    {
        /// <summary>
        /// Optional. Defines the configuration of Backups created via this BackupPlan.
        /// </summary>
        public readonly Outputs.BackupConfigResponse BackupConfig;
        /// <summary>
        /// Optional. Defines a schedule for automatic Backup creation via this BackupPlan.
        /// </summary>
        public readonly Outputs.ScheduleResponse BackupSchedule;
        /// <summary>
        /// Immutable. The source cluster from which Backups will be created via this BackupPlan. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*`
        /// </summary>
        public readonly string Cluster;
        /// <summary>
        /// The timestamp when this BackupPlan resource was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False
        /// </summary>
        public readonly bool Deactivated;
        /// <summary>
        /// Optional. User specified descriptive string for this BackupPlan.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from overwriting each other. It is strongly suggested that systems make use of the 'etag' in the read-modify-write cycle to perform BackupPlan updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackupPlan`, and systems are expected to put that etag in the request to `UpdateBackupPlan` or `DeleteBackupPlan` to ensure that their change will be applied to the same version of the resource.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Optional. A set of custom labels supplied by user.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The full name of the BackupPlan resource. Format: `projects/*/locations/*/backupPlans/*`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of Kubernetes Pods backed up in the last successful Backup created via this BackupPlan.
        /// </summary>
        public readonly int ProtectedPodCount;
        /// <summary>
        /// Optional. RetentionPolicy governs lifecycle of Backups created under this plan.
        /// </summary>
        public readonly Outputs.RetentionPolicyResponse RetentionPolicy;
        /// <summary>
        /// State of the BackupPlan. This State field reflects the various stages a BackupPlan can be in during the Create operation. It will be set to "DEACTIVATED" if the BackupPlan is deactivated on an Update
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Human-readable description of why BackupPlan is in the current `state`
        /// </summary>
        public readonly string StateReason;
        /// <summary>
        /// Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// The timestamp when this BackupPlan resource was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetBackupPlanResult(
            Outputs.BackupConfigResponse backupConfig,

            Outputs.ScheduleResponse backupSchedule,

            string cluster,

            string createTime,

            bool deactivated,

            string description,

            string etag,

            ImmutableDictionary<string, string> labels,

            string name,

            int protectedPodCount,

            Outputs.RetentionPolicyResponse retentionPolicy,

            string state,

            string stateReason,

            string uid,

            string updateTime)
        {
            BackupConfig = backupConfig;
            BackupSchedule = backupSchedule;
            Cluster = cluster;
            CreateTime = createTime;
            Deactivated = deactivated;
            Description = description;
            Etag = etag;
            Labels = labels;
            Name = name;
            ProtectedPodCount = protectedPodCount;
            RetentionPolicy = retentionPolicy;
            State = state;
            StateReason = stateReason;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
