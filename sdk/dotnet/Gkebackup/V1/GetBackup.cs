// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Gkebackup.V1
{
    public static class GetBackup
    {
        /// <summary>
        /// Retrieve the details of a single Backup.
        /// </summary>
        public static Task<GetBackupResult> InvokeAsync(GetBackupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBackupResult>("google-native:gkebackup/v1:getBackup", args ?? new GetBackupArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve the details of a single Backup.
        /// </summary>
        public static Output<GetBackupResult> Invoke(GetBackupInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetBackupResult>("google-native:gkebackup/v1:getBackup", args ?? new GetBackupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupArgs : Pulumi.InvokeArgs
    {
        [Input("backupId", required: true)]
        public string BackupId { get; set; } = null!;

        [Input("backupPlanId", required: true)]
        public string BackupPlanId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetBackupArgs()
        {
        }
    }

    public sealed class GetBackupInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("backupId", required: true)]
        public Input<string> BackupId { get; set; } = null!;

        [Input("backupPlanId", required: true)]
        public Input<string> BackupPlanId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetBackupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBackupResult
    {
        /// <summary>
        /// If True, all namespaces were included in the Backup.
        /// </summary>
        public readonly bool AllNamespaces;
        /// <summary>
        /// Information about the GKE cluster from which this Backup was created.
        /// </summary>
        public readonly Outputs.ClusterMetadataResponse ClusterMetadata;
        /// <summary>
        /// Completion time of the Backup
        /// </summary>
        public readonly string CompleteTime;
        /// <summary>
        /// The size of the config backup in bytes.
        /// </summary>
        public readonly string ConfigBackupSizeBytes;
        /// <summary>
        /// Whether or not the Backup contains Kubernetes Secrets. Controlled by the parent BackupPlan's include_secrets value.
        /// </summary>
        public readonly bool ContainsSecrets;
        /// <summary>
        /// Whether or not the Backup contains volume data. Controlled by the parent BackupPlan's include_volume_data value.
        /// </summary>
        public readonly bool ContainsVolumeData;
        /// <summary>
        /// The timestamp when this Backup resource was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Minimum age for this Backup (in days). If this field is set to a non-zero value, the Backup will be "locked" against deletion (either manual or automatic deletion) for the number of days provided (measured from the creation time of the Backup). MUST be an integer value between 0-90 (inclusive). Defaults to parent BackupPlan's backup_delete_lock_days setting and may only be increased (either at creation time or in a subsequent update).
        /// </summary>
        public readonly int DeleteLockDays;
        /// <summary>
        /// The time at which an existing delete lock will expire for this backup (calculated from create_time + delete_lock_days).
        /// </summary>
        public readonly string DeleteLockExpireTime;
        /// <summary>
        /// User specified descriptive string for this Backup.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The customer managed encryption key that was used to encrypt the Backup's artifacts. Inherited from the parent BackupPlan's encryption_key value.
        /// </summary>
        public readonly Outputs.EncryptionKeyResponse EncryptionKey;
        /// <summary>
        /// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform backup updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackup`, and systems are expected to put that etag in the request to `UpdateBackup` or `DeleteBackup` to ensure that their change will be applied to the same version of the resource.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// A set of custom labels supplied by user.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// This flag indicates whether this Backup resource was created manually by a user or via a schedule in the BackupPlan. A value of True means that the Backup was created manually.
        /// </summary>
        public readonly bool Manual;
        /// <summary>
        /// The fully qualified name of the Backup. projects/*/locations/*/backupPlans/*/backups/*
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The total number of Kubernetes Pods contained in the Backup.
        /// </summary>
        public readonly int PodCount;
        /// <summary>
        /// The total number of Kubernetes resources included in the Backup.
        /// </summary>
        public readonly int ResourceCount;
        /// <summary>
        /// The age (in days) after which this Backup will be automatically deleted. Must be an integer value &gt;= 0: - If 0, no automatic deletion will occur for this Backup. - If not 0, this must be &gt;= delete_lock_days. Once a Backup is created, this value may only be increased. Defaults to the parent BackupPlan's backup_retain_days value.
        /// </summary>
        public readonly int RetainDays;
        /// <summary>
        /// The time at which this Backup will be automatically deleted (calculated from create_time + retain_days).
        /// </summary>
        public readonly string RetainExpireTime;
        /// <summary>
        /// If set, the list of ProtectedApplications whose resources were included in the Backup.
        /// </summary>
        public readonly Outputs.NamespacedNamesResponse SelectedApplications;
        /// <summary>
        /// If set, the list of namespaces that were included in the Backup.
        /// </summary>
        public readonly Outputs.NamespacesResponse SelectedNamespaces;
        /// <summary>
        /// The total size of the Backup in bytes = config backup size + sum(volume backup sizes)
        /// </summary>
        public readonly string SizeBytes;
        /// <summary>
        /// Current state of the Backup
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Human-readable description of why the backup is in the current `state`.
        /// </summary>
        public readonly string StateReason;
        /// <summary>
        /// Server generated global unique identifier of [UUID4](https://en.wikipedia.org/wiki/Universally_unique_identifier)
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// The timestamp when this Backup resource was last updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The total number of volume backups contained in the Backup.
        /// </summary>
        public readonly int VolumeCount;

        [OutputConstructor]
        private GetBackupResult(
            bool allNamespaces,

            Outputs.ClusterMetadataResponse clusterMetadata,

            string completeTime,

            string configBackupSizeBytes,

            bool containsSecrets,

            bool containsVolumeData,

            string createTime,

            int deleteLockDays,

            string deleteLockExpireTime,

            string description,

            Outputs.EncryptionKeyResponse encryptionKey,

            string etag,

            ImmutableDictionary<string, string> labels,

            bool manual,

            string name,

            int podCount,

            int resourceCount,

            int retainDays,

            string retainExpireTime,

            Outputs.NamespacedNamesResponse selectedApplications,

            Outputs.NamespacesResponse selectedNamespaces,

            string sizeBytes,

            string state,

            string stateReason,

            string uid,

            string updateTime,

            int volumeCount)
        {
            AllNamespaces = allNamespaces;
            ClusterMetadata = clusterMetadata;
            CompleteTime = completeTime;
            ConfigBackupSizeBytes = configBackupSizeBytes;
            ContainsSecrets = containsSecrets;
            ContainsVolumeData = containsVolumeData;
            CreateTime = createTime;
            DeleteLockDays = deleteLockDays;
            DeleteLockExpireTime = deleteLockExpireTime;
            Description = description;
            EncryptionKey = encryptionKey;
            Etag = etag;
            Labels = labels;
            Manual = manual;
            Name = name;
            PodCount = podCount;
            ResourceCount = resourceCount;
            RetainDays = retainDays;
            RetainExpireTime = retainExpireTime;
            SelectedApplications = selectedApplications;
            SelectedNamespaces = selectedNamespaces;
            SizeBytes = sizeBytes;
            State = state;
            StateReason = stateReason;
            Uid = uid;
            UpdateTime = updateTime;
            VolumeCount = volumeCount;
        }
    }
}
