// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.WebSecurityScanner.V1Beta
{
    /// <summary>
    /// Indicates the reason code for a configuration failure.
    /// </summary>
    [EnumType]
    public readonly struct ScanConfigErrorCode : IEquatable<ScanConfigErrorCode>
    {
        private readonly string _value;

        private ScanConfigErrorCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// There is no error.
        /// </summary>
        public static ScanConfigErrorCode CodeUnspecified { get; } = new ScanConfigErrorCode("CODE_UNSPECIFIED");
        /// <summary>
        /// There is no error.
        /// </summary>
        public static ScanConfigErrorCode Ok { get; } = new ScanConfigErrorCode("OK");
        /// <summary>
        /// Indicates an internal server error. Please DO NOT USE THIS ERROR CODE unless the root cause is truly unknown.
        /// </summary>
        public static ScanConfigErrorCode InternalError { get; } = new ScanConfigErrorCode("INTERNAL_ERROR");
        /// <summary>
        /// One of the seed URLs is an App Engine URL but we cannot validate the scan settings due to an App Engine API backend error.
        /// </summary>
        public static ScanConfigErrorCode AppengineApiBackendError { get; } = new ScanConfigErrorCode("APPENGINE_API_BACKEND_ERROR");
        /// <summary>
        /// One of the seed URLs is an App Engine URL but we cannot access the App Engine API to validate scan settings.
        /// </summary>
        public static ScanConfigErrorCode AppengineApiNotAccessible { get; } = new ScanConfigErrorCode("APPENGINE_API_NOT_ACCESSIBLE");
        /// <summary>
        /// One of the seed URLs is an App Engine URL but the Default Host of the App Engine is not set.
        /// </summary>
        public static ScanConfigErrorCode AppengineDefaultHostMissing { get; } = new ScanConfigErrorCode("APPENGINE_DEFAULT_HOST_MISSING");
        /// <summary>
        /// Google corporate accounts can not be used for scanning.
        /// </summary>
        public static ScanConfigErrorCode CannotUseGoogleComAccount { get; } = new ScanConfigErrorCode("CANNOT_USE_GOOGLE_COM_ACCOUNT");
        /// <summary>
        /// The account of the scan creator can not be used for scanning.
        /// </summary>
        public static ScanConfigErrorCode CannotUseOwnerAccount { get; } = new ScanConfigErrorCode("CANNOT_USE_OWNER_ACCOUNT");
        /// <summary>
        /// This scan targets Compute Engine, but we cannot validate scan settings due to a Compute Engine API backend error.
        /// </summary>
        public static ScanConfigErrorCode ComputeApiBackendError { get; } = new ScanConfigErrorCode("COMPUTE_API_BACKEND_ERROR");
        /// <summary>
        /// This scan targets Compute Engine, but we cannot access the Compute Engine API to validate the scan settings.
        /// </summary>
        public static ScanConfigErrorCode ComputeApiNotAccessible { get; } = new ScanConfigErrorCode("COMPUTE_API_NOT_ACCESSIBLE");
        /// <summary>
        /// The Custom Login URL does not belong to the current project.
        /// </summary>
        public static ScanConfigErrorCode CustomLoginUrlDoesNotBelongToCurrentProject { get; } = new ScanConfigErrorCode("CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT");
        /// <summary>
        /// The Custom Login URL is malformed (can not be parsed).
        /// </summary>
        public static ScanConfigErrorCode CustomLoginUrlMalformed { get; } = new ScanConfigErrorCode("CUSTOM_LOGIN_URL_MALFORMED");
        /// <summary>
        /// The Custom Login URL is mapped to a non-routable IP address in DNS.
        /// </summary>
        public static ScanConfigErrorCode CustomLoginUrlMappedToNonRoutableAddress { get; } = new ScanConfigErrorCode("CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS");
        /// <summary>
        /// The Custom Login URL is mapped to an IP address which is not reserved for the current project.
        /// </summary>
        public static ScanConfigErrorCode CustomLoginUrlMappedToUnreservedAddress { get; } = new ScanConfigErrorCode("CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS");
        /// <summary>
        /// The Custom Login URL has a non-routable IP address.
        /// </summary>
        public static ScanConfigErrorCode CustomLoginUrlHasNonRoutableIpAddress { get; } = new ScanConfigErrorCode("CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS");
        /// <summary>
        /// The Custom Login URL has an IP address which is not reserved for the current project.
        /// </summary>
        public static ScanConfigErrorCode CustomLoginUrlHasUnreservedIpAddress { get; } = new ScanConfigErrorCode("CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS");
        /// <summary>
        /// Another scan with the same name (case-sensitive) already exists.
        /// </summary>
        public static ScanConfigErrorCode DuplicateScanName { get; } = new ScanConfigErrorCode("DUPLICATE_SCAN_NAME");
        /// <summary>
        /// A field is set to an invalid value.
        /// </summary>
        public static ScanConfigErrorCode InvalidFieldValue { get; } = new ScanConfigErrorCode("INVALID_FIELD_VALUE");
        /// <summary>
        /// There was an error trying to authenticate to the scan target.
        /// </summary>
        public static ScanConfigErrorCode FailedToAuthenticateToTarget { get; } = new ScanConfigErrorCode("FAILED_TO_AUTHENTICATE_TO_TARGET");
        /// <summary>
        /// Finding type value is not specified in the list findings request.
        /// </summary>
        public static ScanConfigErrorCode FindingTypeUnspecified { get; } = new ScanConfigErrorCode("FINDING_TYPE_UNSPECIFIED");
        /// <summary>
        /// Scan targets Compute Engine, yet current project was not whitelisted for Google Compute Engine Scanning Alpha access.
        /// </summary>
        public static ScanConfigErrorCode ForbiddenToScanCompute { get; } = new ScanConfigErrorCode("FORBIDDEN_TO_SCAN_COMPUTE");
        /// <summary>
        /// User tries to update managed scan
        /// </summary>
        public static ScanConfigErrorCode ForbiddenUpdateToManagedScan { get; } = new ScanConfigErrorCode("FORBIDDEN_UPDATE_TO_MANAGED_SCAN");
        /// <summary>
        /// The supplied filter is malformed. For example, it can not be parsed, does not have a filter type in expression, or the same filter type appears more than once.
        /// </summary>
        public static ScanConfigErrorCode MalformedFilter { get; } = new ScanConfigErrorCode("MALFORMED_FILTER");
        /// <summary>
        /// The supplied resource name is malformed (can not be parsed).
        /// </summary>
        public static ScanConfigErrorCode MalformedResourceName { get; } = new ScanConfigErrorCode("MALFORMED_RESOURCE_NAME");
        /// <summary>
        /// The current project is not in an active state.
        /// </summary>
        public static ScanConfigErrorCode ProjectInactive { get; } = new ScanConfigErrorCode("PROJECT_INACTIVE");
        /// <summary>
        /// A required field is not set.
        /// </summary>
        public static ScanConfigErrorCode RequiredField { get; } = new ScanConfigErrorCode("REQUIRED_FIELD");
        /// <summary>
        /// Project id, scanconfig id, scanrun id, or finding id are not consistent with each other in resource name.
        /// </summary>
        public static ScanConfigErrorCode ResourceNameInconsistent { get; } = new ScanConfigErrorCode("RESOURCE_NAME_INCONSISTENT");
        /// <summary>
        /// The scan being requested to start is already running.
        /// </summary>
        public static ScanConfigErrorCode ScanAlreadyRunning { get; } = new ScanConfigErrorCode("SCAN_ALREADY_RUNNING");
        /// <summary>
        /// The scan that was requested to be stopped is not running.
        /// </summary>
        public static ScanConfigErrorCode ScanNotRunning { get; } = new ScanConfigErrorCode("SCAN_NOT_RUNNING");
        /// <summary>
        /// One of the seed URLs does not belong to the current project.
        /// </summary>
        public static ScanConfigErrorCode SeedUrlDoesNotBelongToCurrentProject { get; } = new ScanConfigErrorCode("SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT");
        /// <summary>
        /// One of the seed URLs is malformed (can not be parsed).
        /// </summary>
        public static ScanConfigErrorCode SeedUrlMalformed { get; } = new ScanConfigErrorCode("SEED_URL_MALFORMED");
        /// <summary>
        /// One of the seed URLs is mapped to a non-routable IP address in DNS.
        /// </summary>
        public static ScanConfigErrorCode SeedUrlMappedToNonRoutableAddress { get; } = new ScanConfigErrorCode("SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS");
        /// <summary>
        /// One of the seed URLs is mapped to an IP address which is not reserved for the current project.
        /// </summary>
        public static ScanConfigErrorCode SeedUrlMappedToUnreservedAddress { get; } = new ScanConfigErrorCode("SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS");
        /// <summary>
        /// One of the seed URLs has on-routable IP address.
        /// </summary>
        public static ScanConfigErrorCode SeedUrlHasNonRoutableIpAddress { get; } = new ScanConfigErrorCode("SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS");
        /// <summary>
        /// One of the seed URLs has an IP address that is not reserved for the current project.
        /// </summary>
        public static ScanConfigErrorCode SeedUrlHasUnreservedIpAddress { get; } = new ScanConfigErrorCode("SEED_URL_HAS_UNRESERVED_IP_ADDRESS");
        /// <summary>
        /// The Web Security Scanner service account is not configured under the project.
        /// </summary>
        public static ScanConfigErrorCode ServiceAccountNotConfigured { get; } = new ScanConfigErrorCode("SERVICE_ACCOUNT_NOT_CONFIGURED");
        /// <summary>
        /// A project has reached the maximum number of scans.
        /// </summary>
        public static ScanConfigErrorCode TooManyScans { get; } = new ScanConfigErrorCode("TOO_MANY_SCANS");
        /// <summary>
        /// Resolving the details of the current project fails.
        /// </summary>
        public static ScanConfigErrorCode UnableToResolveProjectInfo { get; } = new ScanConfigErrorCode("UNABLE_TO_RESOLVE_PROJECT_INFO");
        /// <summary>
        /// One or more blacklist patterns were in the wrong format.
        /// </summary>
        public static ScanConfigErrorCode UnsupportedBlacklistPatternFormat { get; } = new ScanConfigErrorCode("UNSUPPORTED_BLACKLIST_PATTERN_FORMAT");
        /// <summary>
        /// The supplied filter is not supported.
        /// </summary>
        public static ScanConfigErrorCode UnsupportedFilter { get; } = new ScanConfigErrorCode("UNSUPPORTED_FILTER");
        /// <summary>
        /// The supplied finding type is not supported. For example, we do not provide findings of the given finding type.
        /// </summary>
        public static ScanConfigErrorCode UnsupportedFindingType { get; } = new ScanConfigErrorCode("UNSUPPORTED_FINDING_TYPE");
        /// <summary>
        /// The URL scheme of one or more of the supplied URLs is not supported.
        /// </summary>
        public static ScanConfigErrorCode UnsupportedUrlScheme { get; } = new ScanConfigErrorCode("UNSUPPORTED_URL_SCHEME");

        public static bool operator ==(ScanConfigErrorCode left, ScanConfigErrorCode right) => left.Equals(right);
        public static bool operator !=(ScanConfigErrorCode left, ScanConfigErrorCode right) => !left.Equals(right);

        public static explicit operator string(ScanConfigErrorCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanConfigErrorCode other && Equals(other);
        public bool Equals(ScanConfigErrorCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Controls export of scan configurations and results to Security Command Center.
    /// </summary>
    [EnumType]
    public readonly struct ScanConfigExportToSecurityCommandCenter : IEquatable<ScanConfigExportToSecurityCommandCenter>
    {
        private readonly string _value;

        private ScanConfigExportToSecurityCommandCenter(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use default, which is ENABLED.
        /// </summary>
        public static ScanConfigExportToSecurityCommandCenter ExportToSecurityCommandCenterUnspecified { get; } = new ScanConfigExportToSecurityCommandCenter("EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED");
        /// <summary>
        /// Export results of this scan to Security Command Center.
        /// </summary>
        public static ScanConfigExportToSecurityCommandCenter Enabled { get; } = new ScanConfigExportToSecurityCommandCenter("ENABLED");
        /// <summary>
        /// Do not export results of this scan to Security Command Center.
        /// </summary>
        public static ScanConfigExportToSecurityCommandCenter Disabled { get; } = new ScanConfigExportToSecurityCommandCenter("DISABLED");

        public static bool operator ==(ScanConfigExportToSecurityCommandCenter left, ScanConfigExportToSecurityCommandCenter right) => left.Equals(right);
        public static bool operator !=(ScanConfigExportToSecurityCommandCenter left, ScanConfigExportToSecurityCommandCenter right) => !left.Equals(right);

        public static explicit operator string(ScanConfigExportToSecurityCommandCenter value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanConfigExportToSecurityCommandCenter other && Equals(other);
        public bool Equals(ScanConfigExportToSecurityCommandCenter other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The risk level selected for the scan
    /// </summary>
    [EnumType]
    public readonly struct ScanConfigRiskLevel : IEquatable<ScanConfigRiskLevel>
    {
        private readonly string _value;

        private ScanConfigRiskLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use default, which is NORMAL.
        /// </summary>
        public static ScanConfigRiskLevel RiskLevelUnspecified { get; } = new ScanConfigRiskLevel("RISK_LEVEL_UNSPECIFIED");
        /// <summary>
        /// Normal scanning (Recommended)
        /// </summary>
        public static ScanConfigRiskLevel Normal { get; } = new ScanConfigRiskLevel("NORMAL");
        /// <summary>
        /// Lower impact scanning
        /// </summary>
        public static ScanConfigRiskLevel Low { get; } = new ScanConfigRiskLevel("LOW");

        public static bool operator ==(ScanConfigRiskLevel left, ScanConfigRiskLevel right) => left.Equals(right);
        public static bool operator !=(ScanConfigRiskLevel left, ScanConfigRiskLevel right) => !left.Equals(right);

        public static explicit operator string(ScanConfigRiskLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanConfigRiskLevel other && Equals(other);
        public bool Equals(ScanConfigRiskLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ScanConfigTargetPlatformsItem : IEquatable<ScanConfigTargetPlatformsItem>
    {
        private readonly string _value;

        private ScanConfigTargetPlatformsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The target platform is unknown. Requests with this enum value will be rejected with INVALID_ARGUMENT error.
        /// </summary>
        public static ScanConfigTargetPlatformsItem TargetPlatformUnspecified { get; } = new ScanConfigTargetPlatformsItem("TARGET_PLATFORM_UNSPECIFIED");
        /// <summary>
        /// Google App Engine service.
        /// </summary>
        public static ScanConfigTargetPlatformsItem AppEngine { get; } = new ScanConfigTargetPlatformsItem("APP_ENGINE");
        /// <summary>
        /// Google Compute Engine service.
        /// </summary>
        public static ScanConfigTargetPlatformsItem Compute { get; } = new ScanConfigTargetPlatformsItem("COMPUTE");
        /// <summary>
        /// Google Cloud Run service.
        /// </summary>
        public static ScanConfigTargetPlatformsItem CloudRun { get; } = new ScanConfigTargetPlatformsItem("CLOUD_RUN");
        /// <summary>
        /// Google Cloud Function service.
        /// </summary>
        public static ScanConfigTargetPlatformsItem CloudFunctions { get; } = new ScanConfigTargetPlatformsItem("CLOUD_FUNCTIONS");

        public static bool operator ==(ScanConfigTargetPlatformsItem left, ScanConfigTargetPlatformsItem right) => left.Equals(right);
        public static bool operator !=(ScanConfigTargetPlatformsItem left, ScanConfigTargetPlatformsItem right) => !left.Equals(right);

        public static explicit operator string(ScanConfigTargetPlatformsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanConfigTargetPlatformsItem other && Equals(other);
        public bool Equals(ScanConfigTargetPlatformsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The user agent used during scanning.
    /// </summary>
    [EnumType]
    public readonly struct ScanConfigUserAgent : IEquatable<ScanConfigUserAgent>
    {
        private readonly string _value;

        private ScanConfigUserAgent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The user agent is unknown. Service will default to CHROME_LINUX.
        /// </summary>
        public static ScanConfigUserAgent UserAgentUnspecified { get; } = new ScanConfigUserAgent("USER_AGENT_UNSPECIFIED");
        /// <summary>
        /// Chrome on Linux. This is the service default if unspecified.
        /// </summary>
        public static ScanConfigUserAgent ChromeLinux { get; } = new ScanConfigUserAgent("CHROME_LINUX");
        /// <summary>
        /// Chrome on Android.
        /// </summary>
        public static ScanConfigUserAgent ChromeAndroid { get; } = new ScanConfigUserAgent("CHROME_ANDROID");
        /// <summary>
        /// Safari on IPhone.
        /// </summary>
        public static ScanConfigUserAgent SafariIphone { get; } = new ScanConfigUserAgent("SAFARI_IPHONE");

        public static bool operator ==(ScanConfigUserAgent left, ScanConfigUserAgent right) => left.Equals(right);
        public static bool operator !=(ScanConfigUserAgent left, ScanConfigUserAgent right) => !left.Equals(right);

        public static explicit operator string(ScanConfigUserAgent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanConfigUserAgent other && Equals(other);
        public bool Equals(ScanConfigUserAgent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the error reason code.
    /// </summary>
    [EnumType]
    public readonly struct ScanRunErrorTraceCode : IEquatable<ScanRunErrorTraceCode>
    {
        private readonly string _value;

        private ScanRunErrorTraceCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value is never used.
        /// </summary>
        public static ScanRunErrorTraceCode CodeUnspecified { get; } = new ScanRunErrorTraceCode("CODE_UNSPECIFIED");
        /// <summary>
        /// Indicates that the scan run failed due to an internal server error.
        /// </summary>
        public static ScanRunErrorTraceCode InternalError { get; } = new ScanRunErrorTraceCode("INTERNAL_ERROR");
        /// <summary>
        /// Indicates a scan configuration error, usually due to outdated ScanConfig settings, such as starting_urls or the DNS configuration.
        /// </summary>
        public static ScanRunErrorTraceCode ScanConfigIssue { get; } = new ScanRunErrorTraceCode("SCAN_CONFIG_ISSUE");
        /// <summary>
        /// Indicates an authentication error, usually due to outdated ScanConfig authentication settings.
        /// </summary>
        public static ScanRunErrorTraceCode AuthenticationConfigIssue { get; } = new ScanRunErrorTraceCode("AUTHENTICATION_CONFIG_ISSUE");
        /// <summary>
        /// Indicates a scan operation timeout, usually caused by a very large site.
        /// </summary>
        public static ScanRunErrorTraceCode TimedOutWhileScanning { get; } = new ScanRunErrorTraceCode("TIMED_OUT_WHILE_SCANNING");
        /// <summary>
        /// Indicates that a scan encountered excessive redirects, either to authentication or some other page outside of the scan scope.
        /// </summary>
        public static ScanRunErrorTraceCode TooManyRedirects { get; } = new ScanRunErrorTraceCode("TOO_MANY_REDIRECTS");
        /// <summary>
        /// Indicates that a scan encountered numerous errors from the web site pages. When available, most_common_http_error_code field indicates the most common HTTP error code encountered during the scan.
        /// </summary>
        public static ScanRunErrorTraceCode TooManyHttpErrors { get; } = new ScanRunErrorTraceCode("TOO_MANY_HTTP_ERRORS");

        public static bool operator ==(ScanRunErrorTraceCode left, ScanRunErrorTraceCode right) => left.Equals(right);
        public static bool operator !=(ScanRunErrorTraceCode left, ScanRunErrorTraceCode right) => !left.Equals(right);

        public static explicit operator string(ScanRunErrorTraceCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanRunErrorTraceCode other && Equals(other);
        public bool Equals(ScanRunErrorTraceCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The execution state of the ScanRun.
    /// </summary>
    [EnumType]
    public readonly struct ScanRunExecutionState : IEquatable<ScanRunExecutionState>
    {
        private readonly string _value;

        private ScanRunExecutionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents an invalid state caused by internal server error. This value should never be returned.
        /// </summary>
        public static ScanRunExecutionState ExecutionStateUnspecified { get; } = new ScanRunExecutionState("EXECUTION_STATE_UNSPECIFIED");
        /// <summary>
        /// The scan is waiting in the queue.
        /// </summary>
        public static ScanRunExecutionState Queued { get; } = new ScanRunExecutionState("QUEUED");
        /// <summary>
        /// The scan is in progress.
        /// </summary>
        public static ScanRunExecutionState Scanning { get; } = new ScanRunExecutionState("SCANNING");
        /// <summary>
        /// The scan is either finished or stopped by user.
        /// </summary>
        public static ScanRunExecutionState Finished { get; } = new ScanRunExecutionState("FINISHED");

        public static bool operator ==(ScanRunExecutionState left, ScanRunExecutionState right) => left.Equals(right);
        public static bool operator !=(ScanRunExecutionState left, ScanRunExecutionState right) => !left.Equals(right);

        public static explicit operator string(ScanRunExecutionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanRunExecutionState other && Equals(other);
        public bool Equals(ScanRunExecutionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The result state of the ScanRun. This field is only available after the execution state reaches "FINISHED".
    /// </summary>
    [EnumType]
    public readonly struct ScanRunResultState : IEquatable<ScanRunResultState>
    {
        private readonly string _value;

        private ScanRunResultState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value. This value is returned when the ScanRun is not yet finished.
        /// </summary>
        public static ScanRunResultState ResultStateUnspecified { get; } = new ScanRunResultState("RESULT_STATE_UNSPECIFIED");
        /// <summary>
        /// The scan finished without errors.
        /// </summary>
        public static ScanRunResultState Success { get; } = new ScanRunResultState("SUCCESS");
        /// <summary>
        /// The scan finished with errors.
        /// </summary>
        public static ScanRunResultState Error { get; } = new ScanRunResultState("ERROR");
        /// <summary>
        /// The scan was terminated by user.
        /// </summary>
        public static ScanRunResultState Killed { get; } = new ScanRunResultState("KILLED");

        public static bool operator ==(ScanRunResultState left, ScanRunResultState right) => left.Equals(right);
        public static bool operator !=(ScanRunResultState left, ScanRunResultState right) => !left.Equals(right);

        public static explicit operator string(ScanRunResultState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanRunResultState other && Equals(other);
        public bool Equals(ScanRunResultState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the warning code.
    /// </summary>
    [EnumType]
    public readonly struct ScanRunWarningTraceCode : IEquatable<ScanRunWarningTraceCode>
    {
        private readonly string _value;

        private ScanRunWarningTraceCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value is never used.
        /// </summary>
        public static ScanRunWarningTraceCode CodeUnspecified { get; } = new ScanRunWarningTraceCode("CODE_UNSPECIFIED");
        /// <summary>
        /// Indicates that a scan discovered an unexpectedly low number of URLs. This is sometimes caused by complex navigation features or by using a single URL for numerous pages.
        /// </summary>
        public static ScanRunWarningTraceCode InsufficientCrawlResults { get; } = new ScanRunWarningTraceCode("INSUFFICIENT_CRAWL_RESULTS");
        /// <summary>
        /// Indicates that a scan discovered too many URLs to test, or excessive redundant URLs.
        /// </summary>
        public static ScanRunWarningTraceCode TooManyCrawlResults { get; } = new ScanRunWarningTraceCode("TOO_MANY_CRAWL_RESULTS");
        /// <summary>
        /// Indicates that too many tests have been generated for the scan. Customer should try reducing the number of starting URLs, increasing the QPS rate, or narrowing down the scope of the scan using the excluded patterns.
        /// </summary>
        public static ScanRunWarningTraceCode TooManyFuzzTasks { get; } = new ScanRunWarningTraceCode("TOO_MANY_FUZZ_TASKS");
        /// <summary>
        /// Indicates that a scan is blocked by IAP.
        /// </summary>
        public static ScanRunWarningTraceCode BlockedByIap { get; } = new ScanRunWarningTraceCode("BLOCKED_BY_IAP");
        /// <summary>
        /// Indicates that no seed is found for a scan
        /// </summary>
        public static ScanRunWarningTraceCode NoStartingUrlFoundForManagedScan { get; } = new ScanRunWarningTraceCode("NO_STARTING_URL_FOUND_FOR_MANAGED_SCAN");

        public static bool operator ==(ScanRunWarningTraceCode left, ScanRunWarningTraceCode right) => left.Equals(right);
        public static bool operator !=(ScanRunWarningTraceCode left, ScanRunWarningTraceCode right) => !left.Equals(right);

        public static explicit operator string(ScanRunWarningTraceCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanRunWarningTraceCode other && Equals(other);
        public bool Equals(ScanRunWarningTraceCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
