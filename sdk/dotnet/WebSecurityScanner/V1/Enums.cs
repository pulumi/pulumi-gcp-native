// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.WebSecurityScanner.V1
{
    /// <summary>
    /// Controls export of scan configurations and results to Security Command Center.
    /// </summary>
    [EnumType]
    public readonly struct ScanConfigExportToSecurityCommandCenter : IEquatable<ScanConfigExportToSecurityCommandCenter>
    {
        private readonly string _value;

        private ScanConfigExportToSecurityCommandCenter(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use default, which is ENABLED.
        /// </summary>
        public static ScanConfigExportToSecurityCommandCenter ExportToSecurityCommandCenterUnspecified { get; } = new ScanConfigExportToSecurityCommandCenter("EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED");
        /// <summary>
        /// Export results of this scan to Security Command Center.
        /// </summary>
        public static ScanConfigExportToSecurityCommandCenter Enabled { get; } = new ScanConfigExportToSecurityCommandCenter("ENABLED");
        /// <summary>
        /// Do not export results of this scan to Security Command Center.
        /// </summary>
        public static ScanConfigExportToSecurityCommandCenter Disabled { get; } = new ScanConfigExportToSecurityCommandCenter("DISABLED");

        public static bool operator ==(ScanConfigExportToSecurityCommandCenter left, ScanConfigExportToSecurityCommandCenter right) => left.Equals(right);
        public static bool operator !=(ScanConfigExportToSecurityCommandCenter left, ScanConfigExportToSecurityCommandCenter right) => !left.Equals(right);

        public static explicit operator string(ScanConfigExportToSecurityCommandCenter value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanConfigExportToSecurityCommandCenter other && Equals(other);
        public bool Equals(ScanConfigExportToSecurityCommandCenter other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The risk level selected for the scan
    /// </summary>
    [EnumType]
    public readonly struct ScanConfigRiskLevel : IEquatable<ScanConfigRiskLevel>
    {
        private readonly string _value;

        private ScanConfigRiskLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use default, which is NORMAL.
        /// </summary>
        public static ScanConfigRiskLevel RiskLevelUnspecified { get; } = new ScanConfigRiskLevel("RISK_LEVEL_UNSPECIFIED");
        /// <summary>
        /// Normal scanning (Recommended)
        /// </summary>
        public static ScanConfigRiskLevel Normal { get; } = new ScanConfigRiskLevel("NORMAL");
        /// <summary>
        /// Lower impact scanning
        /// </summary>
        public static ScanConfigRiskLevel Low { get; } = new ScanConfigRiskLevel("LOW");

        public static bool operator ==(ScanConfigRiskLevel left, ScanConfigRiskLevel right) => left.Equals(right);
        public static bool operator !=(ScanConfigRiskLevel left, ScanConfigRiskLevel right) => !left.Equals(right);

        public static explicit operator string(ScanConfigRiskLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanConfigRiskLevel other && Equals(other);
        public bool Equals(ScanConfigRiskLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The user agent used during scanning.
    /// </summary>
    [EnumType]
    public readonly struct ScanConfigUserAgent : IEquatable<ScanConfigUserAgent>
    {
        private readonly string _value;

        private ScanConfigUserAgent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The user agent is unknown. Service will default to CHROME_LINUX.
        /// </summary>
        public static ScanConfigUserAgent UserAgentUnspecified { get; } = new ScanConfigUserAgent("USER_AGENT_UNSPECIFIED");
        /// <summary>
        /// Chrome on Linux. This is the service default if unspecified.
        /// </summary>
        public static ScanConfigUserAgent ChromeLinux { get; } = new ScanConfigUserAgent("CHROME_LINUX");
        /// <summary>
        /// Chrome on Android.
        /// </summary>
        public static ScanConfigUserAgent ChromeAndroid { get; } = new ScanConfigUserAgent("CHROME_ANDROID");
        /// <summary>
        /// Safari on IPhone.
        /// </summary>
        public static ScanConfigUserAgent SafariIphone { get; } = new ScanConfigUserAgent("SAFARI_IPHONE");

        public static bool operator ==(ScanConfigUserAgent left, ScanConfigUserAgent right) => left.Equals(right);
        public static bool operator !=(ScanConfigUserAgent left, ScanConfigUserAgent right) => !left.Equals(right);

        public static explicit operator string(ScanConfigUserAgent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanConfigUserAgent other && Equals(other);
        public bool Equals(ScanConfigUserAgent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
