// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.VMMigration.V1.Outputs
{

    /// <summary>
    /// The target details of the image resource that will be created by the import job.
    /// </summary>
    [OutputType]
    public sealed class DiskImageTargetDetailsResponse
    {
        /// <summary>
        /// Optional. Additional licenses to assign to the image.
        /// </summary>
        public readonly ImmutableArray<string> AdditionalLicenses;
        /// <summary>
        /// Optional. Use to skip OS adaptation process.
        /// </summary>
        public readonly Outputs.DataDiskImageImportResponse DataDiskImageImport;
        /// <summary>
        /// Optional. An optional description of the image.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. Immutable. The encryption to apply to the image.
        /// </summary>
        public readonly Outputs.EncryptionResponse Encryption;
        /// <summary>
        /// Optional. The name of the image family to which the new image belongs.
        /// </summary>
        public readonly string FamilyName;
        /// <summary>
        /// The name of the image to be created.
        /// </summary>
        public readonly string ImageName;
        /// <summary>
        /// Optional. A map of labels to associate with the image.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Optional. Use to set the parameters relevant for the OS adaptation process.
        /// </summary>
        public readonly Outputs.ImageImportOsAdaptationParametersResponse OsAdaptationParameters;
        /// <summary>
        /// Optional. Set to true to set the image storageLocations to the single region of the import job. When false, the closest multi-region is selected.
        /// </summary>
        public readonly bool SingleRegionStorage;
        /// <summary>
        /// Reference to the TargetProject resource that represents the target project in which the imported image will be created.
        /// </summary>
        public readonly string TargetProject;

        [OutputConstructor]
        private DiskImageTargetDetailsResponse(
            ImmutableArray<string> additionalLicenses,

            Outputs.DataDiskImageImportResponse dataDiskImageImport,

            string description,

            Outputs.EncryptionResponse encryption,

            string familyName,

            string imageName,

            ImmutableDictionary<string, string> labels,

            Outputs.ImageImportOsAdaptationParametersResponse osAdaptationParameters,

            bool singleRegionStorage,

            string targetProject)
        {
            AdditionalLicenses = additionalLicenses;
            DataDiskImageImport = dataDiskImageImport;
            Description = description;
            Encryption = encryption;
            FamilyName = familyName;
            ImageName = imageName;
            Labels = labels;
            OsAdaptationParameters = osAdaptationParameters;
            SingleRegionStorage = singleRegionStorage;
            TargetProject = targetProject;
        }
    }
}
