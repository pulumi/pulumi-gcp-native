// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.VMMigration.V1.Inputs
{

    /// <summary>
    /// The target details of the image resource that will be created by the import job.
    /// </summary>
    public sealed class DiskImageTargetDetailsArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalLicenses")]
        private InputList<string>? _additionalLicenses;

        /// <summary>
        /// Optional. Additional licenses to assign to the image.
        /// </summary>
        public InputList<string> AdditionalLicenses
        {
            get => _additionalLicenses ?? (_additionalLicenses = new InputList<string>());
            set => _additionalLicenses = value;
        }

        /// <summary>
        /// Optional. Use to skip OS adaptation process.
        /// </summary>
        [Input("dataDiskImageImport")]
        public Input<Inputs.DataDiskImageImportArgs>? DataDiskImageImport { get; set; }

        /// <summary>
        /// Optional. An optional description of the image.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Optional. Immutable. The encryption to apply to the image.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.EncryptionArgs>? Encryption { get; set; }

        /// <summary>
        /// Optional. The name of the image family to which the new image belongs.
        /// </summary>
        [Input("familyName")]
        public Input<string>? FamilyName { get; set; }

        /// <summary>
        /// The name of the image to be created.
        /// </summary>
        [Input("imageName", required: true)]
        public Input<string> ImageName { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. A map of labels to associate with the image.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Optional. Use to set the parameters relevant for the OS adaptation process.
        /// </summary>
        [Input("osAdaptationParameters")]
        public Input<Inputs.ImageImportOsAdaptationParametersArgs>? OsAdaptationParameters { get; set; }

        /// <summary>
        /// Optional. Set to true to set the image storageLocations to the single region of the import job. When false, the closest multi-region is selected.
        /// </summary>
        [Input("singleRegionStorage")]
        public Input<bool>? SingleRegionStorage { get; set; }

        /// <summary>
        /// Reference to the TargetProject resource that represents the target project in which the imported image will be created.
        /// </summary>
        [Input("targetProject", required: true)]
        public Input<string> TargetProject { get; set; } = null!;

        public DiskImageTargetDetailsArgs()
        {
        }
        public static new DiskImageTargetDetailsArgs Empty => new DiskImageTargetDetailsArgs();
    }
}
