// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.VMMigration.V1Alpha1.Outputs
{

    /// <summary>
    /// Details for creation of a VM that migrated data disks will be attached to.
    /// </summary>
    [OutputType]
    public sealed class DisksMigrationVmTargetDefaultsResponse
    {
        /// <summary>
        /// Optional. Additional licenses to assign to the VM.
        /// </summary>
        public readonly ImmutableArray<string> AdditionalLicenses;
        /// <summary>
        /// Optional. Details of the boot disk of the VM.
        /// </summary>
        public readonly Outputs.BootDiskDefaultsResponse BootDiskDefaults;
        /// <summary>
        /// Optional. Compute instance scheduling information (if empty default is used).
        /// </summary>
        public readonly Outputs.ComputeSchedulingResponse ComputeScheduling;
        /// <summary>
        /// Optional. The encryption to apply to the VM.
        /// </summary>
        public readonly Outputs.EncryptionResponse Encryption;
        /// <summary>
        /// Optional. The hostname to assign to the VM.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// Optional. A map of labels to associate with the VM.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The machine type to create the VM with.
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// Optional. The machine type series to create the VM with. For presentation only.
        /// </summary>
        public readonly string MachineTypeSeries;
        /// <summary>
        /// Optional. The metadata key/value pairs to assign to the VM.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// Optional. NICs to attach to the VM.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkInterfaceResponse> NetworkInterfaces;
        /// <summary>
        /// Optional. A list of network tags to associate with the VM.
        /// </summary>
        public readonly ImmutableArray<string> NetworkTags;
        /// <summary>
        /// Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.
        /// </summary>
        public readonly bool SecureBoot;
        /// <summary>
        /// Optional. The service account to associate the VM with.
        /// </summary>
        public readonly string ServiceAccount;
        /// <summary>
        /// The name of the VM to create.
        /// </summary>
        public readonly string VmName;

        [OutputConstructor]
        private DisksMigrationVmTargetDefaultsResponse(
            ImmutableArray<string> additionalLicenses,

            Outputs.BootDiskDefaultsResponse bootDiskDefaults,

            Outputs.ComputeSchedulingResponse computeScheduling,

            Outputs.EncryptionResponse encryption,

            string hostname,

            ImmutableDictionary<string, string> labels,

            string machineType,

            string machineTypeSeries,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.NetworkInterfaceResponse> networkInterfaces,

            ImmutableArray<string> networkTags,

            bool secureBoot,

            string serviceAccount,

            string vmName)
        {
            AdditionalLicenses = additionalLicenses;
            BootDiskDefaults = bootDiskDefaults;
            ComputeScheduling = computeScheduling;
            Encryption = encryption;
            Hostname = hostname;
            Labels = labels;
            MachineType = machineType;
            MachineTypeSeries = machineTypeSeries;
            Metadata = metadata;
            NetworkInterfaces = networkInterfaces;
            NetworkTags = networkTags;
            SecureBoot = secureBoot;
            ServiceAccount = serviceAccount;
            VmName = vmName;
        }
    }
}
