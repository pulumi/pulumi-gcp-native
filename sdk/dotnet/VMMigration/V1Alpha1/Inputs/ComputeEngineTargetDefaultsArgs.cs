// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.VMMigration.V1Alpha1.Inputs
{

    /// <summary>
    /// ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
    /// </summary>
    public sealed class ComputeEngineTargetDefaultsArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalLicenses")]
        private InputList<string>? _additionalLicenses;

        /// <summary>
        /// Additional licenses to assign to the VM.
        /// </summary>
        public InputList<string> AdditionalLicenses
        {
            get => _additionalLicenses ?? (_additionalLicenses = new InputList<string>());
            set => _additionalLicenses = value;
        }

        /// <summary>
        /// Compute instance scheduling information (if empty default is used).
        /// </summary>
        [Input("computeScheduling")]
        public Input<Inputs.ComputeSchedulingArgs>? ComputeScheduling { get; set; }

        /// <summary>
        /// The disk type to use in the VM.
        /// </summary>
        [Input("diskType")]
        public Input<Pulumi.GoogleNative.VMMigration.V1Alpha1.ComputeEngineTargetDefaultsDiskType>? DiskType { get; set; }

        /// <summary>
        /// The hostname to assign to the VM.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of labels to associate with the VM.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The license type to use in OS adaptation.
        /// </summary>
        [Input("licenseType")]
        public Input<Pulumi.GoogleNative.VMMigration.V1Alpha1.ComputeEngineTargetDefaultsLicenseType>? LicenseType { get; set; }

        /// <summary>
        /// The machine type to create the VM with.
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// The machine type series to create the VM with.
        /// </summary>
        [Input("machineTypeSeries")]
        public Input<string>? MachineTypeSeries { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// The metadata key/value pairs to assign to the VM.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("networkInterfaces")]
        private InputList<Inputs.NetworkInterfaceArgs>? _networkInterfaces;

        /// <summary>
        /// List of NICs connected to this VM.
        /// </summary>
        public InputList<Inputs.NetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.NetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        [Input("networkTags")]
        private InputList<string>? _networkTags;

        /// <summary>
        /// A map of network tags to associate with the VM.
        /// </summary>
        public InputList<string> NetworkTags
        {
            get => _networkTags ?? (_networkTags = new InputList<string>());
            set => _networkTags = value;
        }

        /// <summary>
        /// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
        /// </summary>
        [Input("secureBoot")]
        public Input<bool>? SecureBoot { get; set; }

        /// <summary>
        /// The service account to associate the VM with.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
        /// </summary>
        [Input("targetProject")]
        public Input<string>? TargetProject { get; set; }

        /// <summary>
        /// The name of the VM to create.
        /// </summary>
        [Input("vmName")]
        public Input<string>? VmName { get; set; }

        /// <summary>
        /// The zone in which to create the VM.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ComputeEngineTargetDefaultsArgs()
        {
        }
        public static new ComputeEngineTargetDefaultsArgs Empty => new ComputeEngineTargetDefaultsArgs();
    }
}
