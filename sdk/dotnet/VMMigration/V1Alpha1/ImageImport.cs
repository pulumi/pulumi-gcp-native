// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.VMMigration.V1Alpha1
{
    /// <summary>
    /// Creates a new ImageImport in a given project.
    /// Auto-naming is currently not supported for this resource.
    /// </summary>
    [GoogleNativeResourceType("google-native:vmmigration/v1alpha1:ImageImport")]
    public partial class ImageImport : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Immutable. The path to the Cloud Storage file from which the image should be imported.
        /// </summary>
        [Output("cloudStorageUri")]
        public Output<string> CloudStorageUri { get; private set; } = null!;

        /// <summary>
        /// The time the image import was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Immutable. Target details for importing a disk image, will be used by ImageImportJob.
        /// </summary>
        [Output("diskImageTargetDefaults")]
        public Output<Outputs.DiskImageTargetDetailsResponse> DiskImageTargetDefaults { get; private set; } = null!;

        /// <summary>
        /// Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
        /// </summary>
        [Output("encryption")]
        public Output<Outputs.EncryptionResponse> Encryption { get; private set; } = null!;

        /// <summary>
        /// Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
        /// </summary>
        [Output("imageImportId")]
        public Output<string> ImageImportId { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource path of the ImageImport.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.
        /// </summary>
        [Output("recentImageImportJobs")]
        public Output<ImmutableArray<Outputs.ImageImportJobResponse>> RecentImageImportJobs { get; private set; } = null!;

        /// <summary>
        /// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;


        /// <summary>
        /// Create a ImageImport resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImageImport(string name, ImageImportArgs args, CustomResourceOptions? options = null)
            : base("google-native:vmmigration/v1alpha1:ImageImport", name, args ?? new ImageImportArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImageImport(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:vmmigration/v1alpha1:ImageImport", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "imageImportId",
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImageImport resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImageImport Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ImageImport(name, id, options);
        }
    }

    public sealed class ImageImportArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Immutable. The path to the Cloud Storage file from which the image should be imported.
        /// </summary>
        [Input("cloudStorageUri")]
        public Input<string>? CloudStorageUri { get; set; }

        /// <summary>
        /// Immutable. Target details for importing a disk image, will be used by ImageImportJob.
        /// </summary>
        [Input("diskImageTargetDefaults")]
        public Input<Inputs.DiskImageTargetDetailsArgs>? DiskImageTargetDefaults { get; set; }

        /// <summary>
        /// Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.EncryptionArgs>? Encryption { get; set; }

        /// <summary>
        /// Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
        /// </summary>
        [Input("imageImportId", required: true)]
        public Input<string> ImageImportId { get; set; } = null!;

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        public ImageImportArgs()
        {
        }
        public static new ImageImportArgs Empty => new ImageImportArgs();
    }
}
