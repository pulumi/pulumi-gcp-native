// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Managedidentities.V1Alpha1
{
    public static class GetDomain
    {
        /// <summary>
        /// Gets details of a single Domain.
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("google-native:managedidentities/v1alpha1:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Domain.
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainResult>("google-native:managedidentities/v1alpha1:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : Pulumi.InvokeArgs
    {
        [Input("domainId", required: true)]
        public string DomainId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDomainArgs()
        {
        }
    }

    public sealed class GetDomainInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("domainId", required: true)]
        public Input<string> DomainId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDomainInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        /// <summary>
        /// Optional. Configuration for audit logs. True if audit logs are enabled, else false. Default is audit logs disabled.
        /// </summary>
        public readonly bool AuditLogsEnabled;
        /// <summary>
        /// Optional. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. Network can be added using UpdateDomain later. Domain is only available on network part of authorized_networks. Caller needs to make sure that CIDR subnets do not overlap between networks, else domain creation will fail.
        /// </summary>
        public readonly ImmutableArray<string> AuthorizedNetworks;
        /// <summary>
        /// The time the instance was created. Synthetic field is populated automatically by CCFE. go/ccfe-synthetic-field-user-guide
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Fully-qualified domain name of the exposed domain used by clients to connect to the service. Similar to what would be chosen for an Active Directory that is set up on an internal network.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Optional. Resource labels to represent user provided metadata
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Locations where domain needs to be provisioned. regions e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
        /// </summary>
        public readonly ImmutableArray<string> Locations;
        /// <summary>
        /// Optional. Name of customer-visible admin used to perform Active Directory operations. If not specified `setupadmin` would be used.
        /// </summary>
        public readonly string ManagedIdentitiesAdminName;
        /// <summary>
        /// Unique name of the domain in this scope including projects and location using the form: `projects/{project_id}/locations/global/domains/{domain_name}`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger. Ranges must be unique and non-overlapping with existing subnets in [Domain].[authorized_networks].
        /// </summary>
        public readonly string ReservedIpRange;
        /// <summary>
        /// The current state of this domain.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Additional information about the current status of this domain, if available.
        /// </summary>
        public readonly string StatusMessage;
        /// <summary>
        /// The current trusts associated with the domain.
        /// </summary>
        public readonly ImmutableArray<Outputs.TrustResponse> Trusts;
        /// <summary>
        /// Last update time. Synthetic field is populated automatically by CCFE.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetDomainResult(
            bool auditLogsEnabled,

            ImmutableArray<string> authorizedNetworks,

            string createTime,

            string fqdn,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<string> locations,

            string managedIdentitiesAdminName,

            string name,

            string reservedIpRange,

            string state,

            string statusMessage,

            ImmutableArray<Outputs.TrustResponse> trusts,

            string updateTime)
        {
            AuditLogsEnabled = auditLogsEnabled;
            AuthorizedNetworks = authorizedNetworks;
            CreateTime = createTime;
            Fqdn = fqdn;
            Labels = labels;
            Locations = locations;
            ManagedIdentitiesAdminName = managedIdentitiesAdminName;
            Name = name;
            ReservedIpRange = reservedIpRange;
            State = state;
            StatusMessage = statusMessage;
            Trusts = trusts;
            UpdateTime = updateTime;
        }
    }
}
