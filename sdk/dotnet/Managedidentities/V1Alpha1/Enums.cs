// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Managedidentities.V1Alpha1
{
    /// <summary>
    /// Output only. The current state of this domain.
    /// </summary>
    [EnumType]
    public readonly struct DomainState : IEquatable<DomainState>
    {
        private readonly string _value;

        private DomainState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static DomainState StateUnspecified { get; } = new DomainState("STATE_UNSPECIFIED");
        /// <summary>
        /// ManagedIdentities domain is being created.
        /// </summary>
        public static DomainState Creating { get; } = new DomainState("CREATING");
        /// <summary>
        /// ManagedIdentities domain has been created and is fully usable.
        /// </summary>
        public static DomainState Ready { get; } = new DomainState("READY");
        /// <summary>
        /// ManagedIdentities domain configuration is being updated.
        /// </summary>
        public static DomainState Updating { get; } = new DomainState("UPDATING");
        /// <summary>
        /// ManagedIdentities domain is being deleted.
        /// </summary>
        public static DomainState Deleting { get; } = new DomainState("DELETING");
        /// <summary>
        /// ManagedIdentities domain is being repaired and may be unusable. Details can be found in the `status_message` field.
        /// </summary>
        public static DomainState Repairing { get; } = new DomainState("REPAIRING");
        /// <summary>
        /// ManagedIdentities domain is undergoing maintenance.
        /// </summary>
        public static DomainState PerformingMaintenance { get; } = new DomainState("PERFORMING_MAINTENANCE");
        /// <summary>
        /// ManagedIdentities domain is not serving customer requests.
        /// </summary>
        public static DomainState Down { get; } = new DomainState("DOWN");

        public static bool operator ==(DomainState left, DomainState right) => left.Equals(right);
        public static bool operator !=(DomainState left, DomainState right) => !left.Equals(right);

        public static explicit operator string(DomainState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainState other && Equals(other);
        public bool Equals(DomainState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Output only. The current state of this trust.
    /// </summary>
    [EnumType]
    public readonly struct TrustState : IEquatable<TrustState>
    {
        private readonly string _value;

        private TrustState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not Set
        /// </summary>
        public static TrustState StateUnspecified { get; } = new TrustState("STATE_UNSPECIFIED");
        /// <summary>
        /// Domain trust is being created.
        /// </summary>
        public static TrustState Creating { get; } = new TrustState("CREATING");
        /// <summary>
        /// Domain trust is being updated.
        /// </summary>
        public static TrustState Updating { get; } = new TrustState("UPDATING");
        /// <summary>
        /// Domain trust is being deleted.
        /// </summary>
        public static TrustState Deleting { get; } = new TrustState("DELETING");
        /// <summary>
        /// Domain trust is connected.
        /// </summary>
        public static TrustState Connected { get; } = new TrustState("CONNECTED");
        /// <summary>
        /// Domain trust is disconnected.
        /// </summary>
        public static TrustState Disconnected { get; } = new TrustState("DISCONNECTED");

        public static bool operator ==(TrustState left, TrustState right) => left.Equals(right);
        public static bool operator !=(TrustState left, TrustState right) => !left.Equals(right);

        public static explicit operator string(TrustState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrustState other && Equals(other);
        public bool Equals(TrustState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The trust direction decides the current domain is trusted, trusting or both.
    /// </summary>
    [EnumType]
    public readonly struct TrustTrustDirection : IEquatable<TrustTrustDirection>
    {
        private readonly string _value;

        private TrustTrustDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not Set
        /// </summary>
        public static TrustTrustDirection TrustDirectionUnspecified { get; } = new TrustTrustDirection("TRUST_DIRECTION_UNSPECIFIED");
        /// <summary>
        /// The inbound direction represents the trusting side.
        /// </summary>
        public static TrustTrustDirection Inbound { get; } = new TrustTrustDirection("INBOUND");
        /// <summary>
        /// The outboud direction represents the trusted side.
        /// </summary>
        public static TrustTrustDirection Outbound { get; } = new TrustTrustDirection("OUTBOUND");
        /// <summary>
        /// The bidirectional direction represents the trusted / trusting side.
        /// </summary>
        public static TrustTrustDirection Bidirectional { get; } = new TrustTrustDirection("BIDIRECTIONAL");

        public static bool operator ==(TrustTrustDirection left, TrustTrustDirection right) => left.Equals(right);
        public static bool operator !=(TrustTrustDirection left, TrustTrustDirection right) => !left.Equals(right);

        public static explicit operator string(TrustTrustDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrustTrustDirection other && Equals(other);
        public bool Equals(TrustTrustDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of trust represented by the trust resource.
    /// </summary>
    [EnumType]
    public readonly struct TrustTrustType : IEquatable<TrustTrustType>
    {
        private readonly string _value;

        private TrustTrustType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not Set
        /// </summary>
        public static TrustTrustType TrustTypeUnspecified { get; } = new TrustTrustType("TRUST_TYPE_UNSPECIFIED");
        /// <summary>
        /// The forest trust.
        /// </summary>
        public static TrustTrustType Forest { get; } = new TrustTrustType("FOREST");
        /// <summary>
        /// The external domain trust.
        /// </summary>
        public static TrustTrustType External { get; } = new TrustTrustType("EXTERNAL");

        public static bool operator ==(TrustTrustType left, TrustTrustType right) => left.Equals(right);
        public static bool operator !=(TrustTrustType left, TrustTrustType right) => !left.Equals(right);

        public static explicit operator string(TrustTrustType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrustTrustType other && Equals(other);
        public bool Equals(TrustTrustType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
