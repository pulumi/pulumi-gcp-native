// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Managedidentities.V1
{
    public static class GetDomain
    {
        /// <summary>
        /// Gets information about a domain.
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("google-native:managedidentities/v1:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a domain.
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainResult>("google-native:managedidentities/v1:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : Pulumi.InvokeArgs
    {
        [Input("domainId", required: true)]
        public string DomainId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDomainArgs()
        {
        }
    }

    public sealed class GetDomainInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("domainId", required: true)]
        public Input<string> DomainId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDomainInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        /// <summary>
        /// Optional. The name of delegated administrator account used to perform Active Directory operations. If not specified, `setupadmin` will be used.
        /// </summary>
        public readonly string Admin;
        /// <summary>
        /// Optional. Configuration for audit logs. True if audit logs are enabled, else false. Default is audit logs disabled.
        /// </summary>
        public readonly bool AuditLogsEnabled;
        /// <summary>
        /// Optional. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) the domain instance is connected to. Networks can be added using UpdateDomain. The domain is only available on networks listed in `authorized_networks`. If CIDR subnets overlap between networks, domain creation will fail.
        /// </summary>
        public readonly ImmutableArray<string> AuthorizedNetworks;
        /// <summary>
        /// The time the instance was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The fully-qualified domain name of the exposed domain used by clients to connect to the service. Similar to what would be chosen for an Active Directory set up on an internal network.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Optional. Resource labels that can contain user-provided metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Locations where domain needs to be provisioned. regions e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
        /// </summary>
        public readonly ImmutableArray<string> Locations;
        /// <summary>
        /// The unique name of the domain using the form: `projects/{project_id}/locations/global/domains/{domain_name}`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger. Ranges must be unique and non-overlapping with existing subnets in [Domain].[authorized_networks].
        /// </summary>
        public readonly string ReservedIpRange;
        /// <summary>
        /// The current state of this domain.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Additional information about the current status of this domain, if available.
        /// </summary>
        public readonly string StatusMessage;
        /// <summary>
        /// The current trusts associated with the domain.
        /// </summary>
        public readonly ImmutableArray<Outputs.TrustResponse> Trusts;
        /// <summary>
        /// The last update time.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetDomainResult(
            string admin,

            bool auditLogsEnabled,

            ImmutableArray<string> authorizedNetworks,

            string createTime,

            string fqdn,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<string> locations,

            string name,

            string reservedIpRange,

            string state,

            string statusMessage,

            ImmutableArray<Outputs.TrustResponse> trusts,

            string updateTime)
        {
            Admin = admin;
            AuditLogsEnabled = auditLogsEnabled;
            AuthorizedNetworks = authorizedNetworks;
            CreateTime = createTime;
            Fqdn = fqdn;
            Labels = labels;
            Locations = locations;
            Name = name;
            ReservedIpRange = reservedIpRange;
            State = state;
            StatusMessage = statusMessage;
            Trusts = trusts;
            UpdateTime = updateTime;
        }
    }
}
