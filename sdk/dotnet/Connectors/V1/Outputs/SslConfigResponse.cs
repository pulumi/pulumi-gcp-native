// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Connectors.V1.Outputs
{

    /// <summary>
    /// SSL Configuration of a connection
    /// </summary>
    [OutputType]
    public sealed class SslConfigResponse
    {
        /// <summary>
        /// Additional SSL related field values
        /// </summary>
        public readonly ImmutableArray<Outputs.ConfigVariableResponse> AdditionalVariables;
        /// <summary>
        /// Type of Client Cert (PEM/JKS/.. etc.)
        /// </summary>
        public readonly string ClientCertType;
        /// <summary>
        /// Client Certificate
        /// </summary>
        public readonly Outputs.SecretResponse ClientCertificate;
        /// <summary>
        /// Client Private Key
        /// </summary>
        public readonly Outputs.SecretResponse ClientPrivateKey;
        /// <summary>
        /// Secret containing the passphrase protecting the Client Private Key
        /// </summary>
        public readonly Outputs.SecretResponse ClientPrivateKeyPass;
        /// <summary>
        /// Private Server Certificate. Needs to be specified if trust model is `PRIVATE`.
        /// </summary>
        public readonly Outputs.SecretResponse PrivateServerCertificate;
        /// <summary>
        /// Type of Server Cert (PEM/JKS/.. etc.)
        /// </summary>
        public readonly string ServerCertType;
        /// <summary>
        /// Trust Model of the SSL connection
        /// </summary>
        public readonly string TrustModel;
        /// <summary>
        /// Controls the ssl type for the given connector version.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Bool for enabling SSL
        /// </summary>
        public readonly bool UseSsl;

        [OutputConstructor]
        private SslConfigResponse(
            ImmutableArray<Outputs.ConfigVariableResponse> additionalVariables,

            string clientCertType,

            Outputs.SecretResponse clientCertificate,

            Outputs.SecretResponse clientPrivateKey,

            Outputs.SecretResponse clientPrivateKeyPass,

            Outputs.SecretResponse privateServerCertificate,

            string serverCertType,

            string trustModel,

            string type,

            bool useSsl)
        {
            AdditionalVariables = additionalVariables;
            ClientCertType = clientCertType;
            ClientCertificate = clientCertificate;
            ClientPrivateKey = clientPrivateKey;
            ClientPrivateKeyPass = clientPrivateKeyPass;
            PrivateServerCertificate = privateServerCertificate;
            ServerCertType = serverCertType;
            TrustModel = trustModel;
            Type = type;
            UseSsl = useSsl;
        }
    }
}
