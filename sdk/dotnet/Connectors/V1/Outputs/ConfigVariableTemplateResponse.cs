// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Connectors.V1.Outputs
{

    /// <summary>
    /// ConfigVariableTemplate provides metadata about a `ConfigVariable` that is used in a Connection.
    /// </summary>
    [OutputType]
    public sealed class ConfigVariableTemplateResponse
    {
        /// <summary>
        /// Authorization code link options. To be populated if `ValueType` is `AUTHORIZATION_CODE`
        /// </summary>
        public readonly Outputs.AuthorizationCodeLinkResponse AuthorizationCodeLink;
        /// <summary>
        /// Description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Display name of the parameter.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Enum options. To be populated if `ValueType` is `ENUM`
        /// </summary>
        public readonly ImmutableArray<Outputs.EnumOptionResponse> EnumOptions;
        /// <summary>
        /// Optional. enum source denotes the source of api to fill the enum options
        /// </summary>
        public readonly string EnumSource;
        /// <summary>
        /// Indicates if current template is part of advanced settings
        /// </summary>
        public readonly bool IsAdvanced;
        /// <summary>
        /// Key of the config variable.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// Optional. Location Tyep denotes where this value should be sent in BYOC connections.
        /// </summary>
        public readonly string LocationType;
        /// <summary>
        /// Flag represents that this `ConfigVariable` must be provided for a connection.
        /// </summary>
        public readonly bool Required;
        /// <summary>
        /// Condition under which a field would be required. The condition can be represented in the form of a logical expression.
        /// </summary>
        public readonly Outputs.LogicalExpressionResponse RequiredCondition;
        /// <summary>
        /// Role grant configuration for the config variable.
        /// </summary>
        public readonly Outputs.RoleGrantResponse RoleGrant;
        /// <summary>
        /// State of the config variable.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Regular expression in RE2 syntax used for validating the `value` of a `ConfigVariable`.
        /// </summary>
        public readonly string ValidationRegex;
        /// <summary>
        /// Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation.
        /// </summary>
        public readonly string ValueType;

        [OutputConstructor]
        private ConfigVariableTemplateResponse(
            Outputs.AuthorizationCodeLinkResponse authorizationCodeLink,

            string description,

            string displayName,

            ImmutableArray<Outputs.EnumOptionResponse> enumOptions,

            string enumSource,

            bool isAdvanced,

            string key,

            string locationType,

            bool required,

            Outputs.LogicalExpressionResponse requiredCondition,

            Outputs.RoleGrantResponse roleGrant,

            string state,

            string validationRegex,

            string valueType)
        {
            AuthorizationCodeLink = authorizationCodeLink;
            Description = description;
            DisplayName = displayName;
            EnumOptions = enumOptions;
            EnumSource = enumSource;
            IsAdvanced = isAdvanced;
            Key = key;
            LocationType = locationType;
            Required = required;
            RequiredCondition = requiredCondition;
            RoleGrant = roleGrant;
            State = state;
            ValidationRegex = validationRegex;
            ValueType = valueType;
        }
    }
}
