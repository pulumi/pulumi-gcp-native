// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Connectors.V1
{
    /// <summary>
    /// Creates a new Connection in a given project and location.
    /// Auto-naming is currently not supported for this resource.
    /// </summary>
    [GoogleNativeResourceType("google-native:connectors/v1:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. Configuration for establishing the connection's authentication with an external system.
        /// </summary>
        [Output("authConfig")]
        public Output<Outputs.AuthConfigResponse> AuthConfig { get; private set; } = null!;

        /// <summary>
        /// Optional. Configuration for configuring the connection with an external system.
        /// </summary>
        [Output("configVariables")]
        public Output<ImmutableArray<Outputs.ConfigVariableResponse>> ConfigVariables { get; private set; } = null!;

        /// <summary>
        /// Required. Identifier to assign to the Connection. Must be unique within scope of the parent resource.
        /// </summary>
        [Output("connectionId")]
        public Output<string> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// Connector version on which the connection is created. The format is: projects/*/locations/*/providers/*/connectors/*/versions/* Only global location is supported for ConnectorVersion resource.
        /// </summary>
        [Output("connectorVersion")]
        public Output<string> ConnectorVersion { get; private set; } = null!;

        /// <summary>
        /// Created time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Optional. Description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s).
        /// </summary>
        [Output("destinationConfigs")]
        public Output<ImmutableArray<Outputs.DestinationConfigResponse>> DestinationConfigs { get; private set; } = null!;

        /// <summary>
        /// GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}
        /// </summary>
        [Output("envoyImageLocation")]
        public Output<string> EnvoyImageLocation { get; private set; } = null!;

        /// <summary>
        /// GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}
        /// </summary>
        [Output("imageLocation")]
        public Output<string> ImageLocation { get; private set; } = null!;

        /// <summary>
        /// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Optional. Configuration that indicates whether or not the Connection can be edited.
        /// </summary>
        [Output("lockConfig")]
        public Output<Outputs.LockConfigResponse> LockConfig { get; private set; } = null!;

        /// <summary>
        /// Optional. Log configuration for the connection.
        /// </summary>
        [Output("logConfig")]
        public Output<Outputs.ConnectorsLogConfigResponse> LogConfig { get; private set; } = null!;

        /// <summary>
        /// Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Optional. Node configuration for the connection.
        /// </summary>
        [Output("nodeConfig")]
        public Output<Outputs.NodeConfigResponse> NodeConfig { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Optional. Service account needed for runtime plane to access GCP resources.
        /// </summary>
        [Output("serviceAccount")]
        public Output<string> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
        /// </summary>
        [Output("serviceDirectory")]
        public Output<string> ServiceDirectory { get; private set; } = null!;

        /// <summary>
        /// Optional. Ssl config of a connection
        /// </summary>
        [Output("sslConfig")]
        public Output<Outputs.SslConfigResponse> SslConfig { get; private set; } = null!;

        /// <summary>
        /// Current status of the connection.
        /// </summary>
        [Output("status")]
        public Output<Outputs.ConnectionStatusResponse> Status { get; private set; } = null!;

        /// <summary>
        /// This subscription type enum states the subscription type of the project.
        /// </summary>
        [Output("subscriptionType")]
        public Output<string> SubscriptionType { get; private set; } = null!;

        /// <summary>
        /// Optional. Suspended indicates if a user has suspended a connection or not.
        /// </summary>
        [Output("suspended")]
        public Output<bool> Suspended { get; private set; } = null!;

        /// <summary>
        /// Updated time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("google-native:connectors/v1:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:connectors/v1:Connection", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "connectionId",
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. Configuration for establishing the connection's authentication with an external system.
        /// </summary>
        [Input("authConfig")]
        public Input<Inputs.AuthConfigArgs>? AuthConfig { get; set; }

        [Input("configVariables")]
        private InputList<Inputs.ConfigVariableArgs>? _configVariables;

        /// <summary>
        /// Optional. Configuration for configuring the connection with an external system.
        /// </summary>
        public InputList<Inputs.ConfigVariableArgs> ConfigVariables
        {
            get => _configVariables ?? (_configVariables = new InputList<Inputs.ConfigVariableArgs>());
            set => _configVariables = value;
        }

        /// <summary>
        /// Required. Identifier to assign to the Connection. Must be unique within scope of the parent resource.
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        /// <summary>
        /// Connector version on which the connection is created. The format is: projects/*/locations/*/providers/*/connectors/*/versions/* Only global location is supported for ConnectorVersion resource.
        /// </summary>
        [Input("connectorVersion", required: true)]
        public Input<string> ConnectorVersion { get; set; } = null!;

        /// <summary>
        /// Optional. Description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destinationConfigs")]
        private InputList<Inputs.DestinationConfigArgs>? _destinationConfigs;

        /// <summary>
        /// Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s).
        /// </summary>
        public InputList<Inputs.DestinationConfigArgs> DestinationConfigs
        {
            get => _destinationConfigs ?? (_destinationConfigs = new InputList<Inputs.DestinationConfigArgs>());
            set => _destinationConfigs = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Optional. Configuration that indicates whether or not the Connection can be edited.
        /// </summary>
        [Input("lockConfig")]
        public Input<Inputs.LockConfigArgs>? LockConfig { get; set; }

        /// <summary>
        /// Optional. Log configuration for the connection.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.ConnectorsLogConfigArgs>? LogConfig { get; set; }

        /// <summary>
        /// Optional. Node configuration for the connection.
        /// </summary>
        [Input("nodeConfig")]
        public Input<Inputs.NodeConfigArgs>? NodeConfig { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Optional. Service account needed for runtime plane to access GCP resources.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// Optional. Ssl config of a connection
        /// </summary>
        [Input("sslConfig")]
        public Input<Inputs.SslConfigArgs>? SslConfig { get; set; }

        /// <summary>
        /// Optional. Suspended indicates if a user has suspended a connection or not.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }
}
