// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Connectors.V1
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of authentication configured.
    /// </summary>
    [EnumType]
    public readonly struct AuthConfigAuthType : IEquatable<AuthConfigAuthType>
    {
        private readonly string _value;

        private AuthConfigAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Authentication type not specified.
        /// </summary>
        public static AuthConfigAuthType AuthTypeUnspecified { get; } = new AuthConfigAuthType("AUTH_TYPE_UNSPECIFIED");
        /// <summary>
        /// Username and Password Authentication.
        /// </summary>
        public static AuthConfigAuthType UserPassword { get; } = new AuthConfigAuthType("USER_PASSWORD");
        /// <summary>
        /// JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication
        /// </summary>
        public static AuthConfigAuthType Oauth2JwtBearer { get; } = new AuthConfigAuthType("OAUTH2_JWT_BEARER");
        /// <summary>
        /// Oauth 2.0 Client Credentials Grant Authentication
        /// </summary>
        public static AuthConfigAuthType Oauth2ClientCredentials { get; } = new AuthConfigAuthType("OAUTH2_CLIENT_CREDENTIALS");
        /// <summary>
        /// SSH Public Key Authentication
        /// </summary>
        public static AuthConfigAuthType SshPublicKey { get; } = new AuthConfigAuthType("SSH_PUBLIC_KEY");
        /// <summary>
        /// Oauth 2.0 Authorization Code Flow
        /// </summary>
        public static AuthConfigAuthType Oauth2AuthCodeFlow { get; } = new AuthConfigAuthType("OAUTH2_AUTH_CODE_FLOW");
        /// <summary>
        /// Google authentication
        /// </summary>
        public static AuthConfigAuthType GoogleAuthentication { get; } = new AuthConfigAuthType("GOOGLE_AUTHENTICATION");

        public static bool operator ==(AuthConfigAuthType left, AuthConfigAuthType right) => left.Equals(right);
        public static bool operator !=(AuthConfigAuthType left, AuthConfigAuthType right) => !left.Equals(right);

        public static explicit operator string(AuthConfigAuthType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthConfigAuthType other && Equals(other);
        public bool Equals(AuthConfigAuthType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. enum source denotes the source of api to fill the enum options
    /// </summary>
    [EnumType]
    public readonly struct ConfigVariableTemplateEnumSource : IEquatable<ConfigVariableTemplateEnumSource>
    {
        private readonly string _value;

        private ConfigVariableTemplateEnumSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Api type unspecified.
        /// </summary>
        public static ConfigVariableTemplateEnumSource EnumSourceUnspecified { get; } = new ConfigVariableTemplateEnumSource("ENUM_SOURCE_UNSPECIFIED");
        /// <summary>
        /// list event types.
        /// </summary>
        public static ConfigVariableTemplateEnumSource EventTypesApi { get; } = new ConfigVariableTemplateEnumSource("EVENT_TYPES_API");

        public static bool operator ==(ConfigVariableTemplateEnumSource left, ConfigVariableTemplateEnumSource right) => left.Equals(right);
        public static bool operator !=(ConfigVariableTemplateEnumSource left, ConfigVariableTemplateEnumSource right) => !left.Equals(right);

        public static explicit operator string(ConfigVariableTemplateEnumSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigVariableTemplateEnumSource other && Equals(other);
        public bool Equals(ConfigVariableTemplateEnumSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Location Tyep denotes where this value should be sent in BYOC connections.
    /// </summary>
    [EnumType]
    public readonly struct ConfigVariableTemplateLocationType : IEquatable<ConfigVariableTemplateLocationType>
    {
        private readonly string _value;

        private ConfigVariableTemplateLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Location type unspecified.
        /// </summary>
        public static ConfigVariableTemplateLocationType LocationTypeUnspecified { get; } = new ConfigVariableTemplateLocationType("LOCATION_TYPE_UNSPECIFIED");
        /// <summary>
        /// Request header.
        /// </summary>
        public static ConfigVariableTemplateLocationType Header { get; } = new ConfigVariableTemplateLocationType("HEADER");
        /// <summary>
        /// Request Payload.
        /// </summary>
        public static ConfigVariableTemplateLocationType Payload { get; } = new ConfigVariableTemplateLocationType("PAYLOAD");
        /// <summary>
        /// Request query param.
        /// </summary>
        public static ConfigVariableTemplateLocationType QueryParam { get; } = new ConfigVariableTemplateLocationType("QUERY_PARAM");
        /// <summary>
        /// Request path param.
        /// </summary>
        public static ConfigVariableTemplateLocationType PathParam { get; } = new ConfigVariableTemplateLocationType("PATH_PARAM");

        public static bool operator ==(ConfigVariableTemplateLocationType left, ConfigVariableTemplateLocationType right) => left.Equals(right);
        public static bool operator !=(ConfigVariableTemplateLocationType left, ConfigVariableTemplateLocationType right) => !left.Equals(right);

        public static explicit operator string(ConfigVariableTemplateLocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigVariableTemplateLocationType other && Equals(other);
        public bool Equals(ConfigVariableTemplateLocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the config variable.
    /// </summary>
    [EnumType]
    public readonly struct ConfigVariableTemplateState : IEquatable<ConfigVariableTemplateState>
    {
        private readonly string _value;

        private ConfigVariableTemplateState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Status is unspecified.
        /// </summary>
        public static ConfigVariableTemplateState StateUnspecified { get; } = new ConfigVariableTemplateState("STATE_UNSPECIFIED");
        /// <summary>
        /// Config variable is active
        /// </summary>
        public static ConfigVariableTemplateState Active { get; } = new ConfigVariableTemplateState("ACTIVE");
        /// <summary>
        /// Config variable is deprecated.
        /// </summary>
        public static ConfigVariableTemplateState Deprecated { get; } = new ConfigVariableTemplateState("DEPRECATED");

        public static bool operator ==(ConfigVariableTemplateState left, ConfigVariableTemplateState right) => left.Equals(right);
        public static bool operator !=(ConfigVariableTemplateState left, ConfigVariableTemplateState right) => !left.Equals(right);

        public static explicit operator string(ConfigVariableTemplateState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigVariableTemplateState other && Equals(other);
        public bool Equals(ConfigVariableTemplateState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation.
    /// </summary>
    [EnumType]
    public readonly struct ConfigVariableTemplateValueType : IEquatable<ConfigVariableTemplateValueType>
    {
        private readonly string _value;

        private ConfigVariableTemplateValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Value type is not specified.
        /// </summary>
        public static ConfigVariableTemplateValueType ValueTypeUnspecified { get; } = new ConfigVariableTemplateValueType("VALUE_TYPE_UNSPECIFIED");
        /// <summary>
        /// Value type is string.
        /// </summary>
        public static ConfigVariableTemplateValueType String { get; } = new ConfigVariableTemplateValueType("STRING");
        /// <summary>
        /// Value type is integer.
        /// </summary>
        public static ConfigVariableTemplateValueType Int { get; } = new ConfigVariableTemplateValueType("INT");
        /// <summary>
        /// Value type is boolean.
        /// </summary>
        public static ConfigVariableTemplateValueType Bool { get; } = new ConfigVariableTemplateValueType("BOOL");
        /// <summary>
        /// Value type is secret.
        /// </summary>
        public static ConfigVariableTemplateValueType Secret { get; } = new ConfigVariableTemplateValueType("SECRET");
        /// <summary>
        /// Value type is enum.
        /// </summary>
        public static ConfigVariableTemplateValueType Enum { get; } = new ConfigVariableTemplateValueType("ENUM");
        /// <summary>
        /// Value type is authorization code.
        /// </summary>
        public static ConfigVariableTemplateValueType AuthorizationCode { get; } = new ConfigVariableTemplateValueType("AUTHORIZATION_CODE");
        /// <summary>
        /// Encryption Key.
        /// </summary>
        public static ConfigVariableTemplateValueType EncryptionKey { get; } = new ConfigVariableTemplateValueType("ENCRYPTION_KEY");

        public static bool operator ==(ConfigVariableTemplateValueType left, ConfigVariableTemplateValueType right) => left.Equals(right);
        public static bool operator !=(ConfigVariableTemplateValueType left, ConfigVariableTemplateValueType right) => !left.Equals(right);

        public static explicit operator string(ConfigVariableTemplateValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigVariableTemplateValueType other && Equals(other);
        public bool Equals(ConfigVariableTemplateValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Eventing enablement type. Will be nil if eventing is not enabled.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionEventingEnablementType : IEquatable<ConnectionEventingEnablementType>
    {
        private readonly string _value;

        private ConnectionEventingEnablementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Eventing Enablement Type Unspecifeied.
        /// </summary>
        public static ConnectionEventingEnablementType EventingEnablementTypeUnspecified { get; } = new ConnectionEventingEnablementType("EVENTING_ENABLEMENT_TYPE_UNSPECIFIED");
        /// <summary>
        /// Both connection and eventing.
        /// </summary>
        public static ConnectionEventingEnablementType EventingAndConnection { get; } = new ConnectionEventingEnablementType("EVENTING_AND_CONNECTION");
        /// <summary>
        /// Only Eventing.
        /// </summary>
        public static ConnectionEventingEnablementType OnlyEventing { get; } = new ConnectionEventingEnablementType("ONLY_EVENTING");

        public static bool operator ==(ConnectionEventingEnablementType left, ConnectionEventingEnablementType right) => left.Equals(right);
        public static bool operator !=(ConnectionEventingEnablementType left, ConnectionEventingEnablementType right) => !left.Equals(right);

        public static explicit operator string(ConnectionEventingEnablementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionEventingEnablementType other && Equals(other);
        public bool Equals(ConnectionEventingEnablementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Type of the custom connector.
    /// </summary>
    [EnumType]
    public readonly struct CustomConnectorCustomConnectorType : IEquatable<CustomConnectorCustomConnectorType>
    {
        private readonly string _value;

        private CustomConnectorCustomConnectorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Connector type is not specified.
        /// </summary>
        public static CustomConnectorCustomConnectorType CustomConnectorTypeUnspecified { get; } = new CustomConnectorCustomConnectorType("CUSTOM_CONNECTOR_TYPE_UNSPECIFIED");
        /// <summary>
        /// OpenAPI connector.
        /// </summary>
        public static CustomConnectorCustomConnectorType OpenApi { get; } = new CustomConnectorCustomConnectorType("OPEN_API");
        /// <summary>
        /// Proto connector.
        /// </summary>
        public static CustomConnectorCustomConnectorType Proto { get; } = new CustomConnectorCustomConnectorType("PROTO");

        public static bool operator ==(CustomConnectorCustomConnectorType left, CustomConnectorCustomConnectorType right) => left.Equals(right);
        public static bool operator !=(CustomConnectorCustomConnectorType left, CustomConnectorCustomConnectorType right) => !left.Equals(right);

        public static explicit operator string(CustomConnectorCustomConnectorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomConnectorCustomConnectorType other && Equals(other);
        public bool Equals(CustomConnectorCustomConnectorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type.
    /// </summary>
    [EnumType]
    public readonly struct EncryptionKeyType : IEquatable<EncryptionKeyType>
    {
        private readonly string _value;

        private EncryptionKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Value type is not specified.
        /// </summary>
        public static EncryptionKeyType TypeUnspecified { get; } = new EncryptionKeyType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Google Managed.
        /// </summary>
        public static EncryptionKeyType GoogleManaged { get; } = new EncryptionKeyType("GOOGLE_MANAGED");
        /// <summary>
        /// Customer Managed.
        /// </summary>
        public static EncryptionKeyType CustomerManaged { get; } = new EncryptionKeyType("CUSTOMER_MANAGED");

        public static bool operator ==(EncryptionKeyType left, EncryptionKeyType right) => left.Equals(right);
        public static bool operator !=(EncryptionKeyType left, EncryptionKeyType right) => !left.Equals(right);

        public static explicit operator string(EncryptionKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionKeyType other && Equals(other);
        public bool Equals(EncryptionKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// type of the destination
    /// </summary>
    [EnumType]
    public readonly struct EventSubscriptionDestinationType : IEquatable<EventSubscriptionDestinationType>
    {
        private readonly string _value;

        private EventSubscriptionDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default state.
        /// </summary>
        public static EventSubscriptionDestinationType TypeUnspecified { get; } = new EventSubscriptionDestinationType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Endpoint - Hit the value of endpoint when event is received
        /// </summary>
        public static EventSubscriptionDestinationType Endpoint { get; } = new EventSubscriptionDestinationType("ENDPOINT");

        public static bool operator ==(EventSubscriptionDestinationType left, EventSubscriptionDestinationType right) => left.Equals(right);
        public static bool operator !=(EventSubscriptionDestinationType left, EventSubscriptionDestinationType right) => !left.Equals(right);

        public static explicit operator string(EventSubscriptionDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventSubscriptionDestinationType other && Equals(other);
        public bool Equals(EventSubscriptionDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Comparator to use for comparing the field value.
    /// </summary>
    [EnumType]
    public readonly struct FieldComparisonComparator : IEquatable<FieldComparisonComparator>
    {
        private readonly string _value;

        private FieldComparisonComparator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The default value.
        /// </summary>
        public static FieldComparisonComparator ComparatorUnspecified { get; } = new FieldComparisonComparator("COMPARATOR_UNSPECIFIED");
        /// <summary>
        /// The field value must be equal to the specified value.
        /// </summary>
        public static FieldComparisonComparator EqualsValue { get; } = new FieldComparisonComparator("EQUALS");
        /// <summary>
        /// The field value must not be equal to the specified value.
        /// </summary>
        public static FieldComparisonComparator NotEquals { get; } = new FieldComparisonComparator("NOT_EQUALS");

        public static bool operator ==(FieldComparisonComparator left, FieldComparisonComparator right) => left.Equals(right);
        public static bool operator !=(FieldComparisonComparator left, FieldComparisonComparator right) => !left.Equals(right);

        public static explicit operator string(FieldComparisonComparator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FieldComparisonComparator other && Equals(other);
        public bool Equals(FieldComparisonComparator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Type of the JMS Source. i.e. Queue or Topic
    /// </summary>
    [EnumType]
    public readonly struct JMSType : IEquatable<JMSType>
    {
        private readonly string _value;

        private JMSType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default state.
        /// </summary>
        public static JMSType TypeUnspecified { get; } = new JMSType("TYPE_UNSPECIFIED");
        /// <summary>
        /// JMS Queue.
        /// </summary>
        public static JMSType Queue { get; } = new JMSType("QUEUE");
        /// <summary>
        /// JMS Topic.
        /// </summary>
        public static JMSType Topic { get; } = new JMSType("TOPIC");

        public static bool operator ==(JMSType left, JMSType right) => left.Equals(right);
        public static bool operator !=(JMSType left, JMSType right) => !left.Equals(right);

        public static explicit operator string(JMSType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JMSType other && Equals(other);
        public bool Equals(JMSType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The logical operator to use between the fields and conditions.
    /// </summary>
    [EnumType]
    public readonly struct LogicalExpressionLogicalOperator : IEquatable<LogicalExpressionLogicalOperator>
    {
        private readonly string _value;

        private LogicalExpressionLogicalOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The default value.
        /// </summary>
        public static LogicalExpressionLogicalOperator OperatorUnspecified { get; } = new LogicalExpressionLogicalOperator("OPERATOR_UNSPECIFIED");
        /// <summary>
        /// AND operator; The conditions must all be true.
        /// </summary>
        public static LogicalExpressionLogicalOperator And { get; } = new LogicalExpressionLogicalOperator("AND");
        /// <summary>
        /// OR operator; At least one of the conditions must be true.
        /// </summary>
        public static LogicalExpressionLogicalOperator Or { get; } = new LogicalExpressionLogicalOperator("OR");

        public static bool operator ==(LogicalExpressionLogicalOperator left, LogicalExpressionLogicalOperator right) => left.Equals(right);
        public static bool operator !=(LogicalExpressionLogicalOperator left, LogicalExpressionLogicalOperator right) => !left.Equals(right);

        public static explicit operator string(LogicalExpressionLogicalOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LogicalExpressionLogicalOperator other && Equals(other);
        public bool Equals(LogicalExpressionLogicalOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Different types of resource supported.
    /// </summary>
    [EnumType]
    public readonly struct ResourceType : IEquatable<ResourceType>
    {
        private readonly string _value;

        private ResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Value type is not specified.
        /// </summary>
        public static ResourceType TypeUnspecified { get; } = new ResourceType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Google Cloud Project Resource.
        /// </summary>
        public static ResourceType GcpProject { get; } = new ResourceType("GCP_PROJECT");
        /// <summary>
        /// Any Google Cloud Resource which is identified uniquely by IAM.
        /// </summary>
        public static ResourceType GcpResource { get; } = new ResourceType("GCP_RESOURCE");
        /// <summary>
        /// Google Cloud Secret Resource.
        /// </summary>
        public static ResourceType GcpSecretmanagerSecret { get; } = new ResourceType("GCP_SECRETMANAGER_SECRET");
        /// <summary>
        /// Google Cloud Secret Version Resource.
        /// </summary>
        public static ResourceType GcpSecretmanagerSecretVersion { get; } = new ResourceType("GCP_SECRETMANAGER_SECRET_VERSION");

        public static bool operator ==(ResourceType left, ResourceType right) => left.Equals(right);
        public static bool operator !=(ResourceType left, ResourceType right) => !left.Equals(right);

        public static explicit operator string(ResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceType other && Equals(other);
        public bool Equals(ResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Prinicipal/Identity for whom the role need to assigned.
    /// </summary>
    [EnumType]
    public readonly struct RoleGrantPrincipal : IEquatable<RoleGrantPrincipal>
    {
        private readonly string _value;

        private RoleGrantPrincipal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Value type is not specified.
        /// </summary>
        public static RoleGrantPrincipal PrincipalUnspecified { get; } = new RoleGrantPrincipal("PRINCIPAL_UNSPECIFIED");
        /// <summary>
        /// Service Account used for Connector workload identity This is either the default service account if unspecified or Service Account provided by Customers through BYOSA.
        /// </summary>
        public static RoleGrantPrincipal ConnectorSa { get; } = new RoleGrantPrincipal("CONNECTOR_SA");

        public static bool operator ==(RoleGrantPrincipal left, RoleGrantPrincipal right) => left.Equals(right);
        public static bool operator !=(RoleGrantPrincipal left, RoleGrantPrincipal right) => !left.Equals(right);

        public static explicit operator string(RoleGrantPrincipal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoleGrantPrincipal other && Equals(other);
        public bool Equals(RoleGrantPrincipal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of Client Cert (PEM/JKS/.. etc.)
    /// </summary>
    [EnumType]
    public readonly struct SslConfigClientCertType : IEquatable<SslConfigClientCertType>
    {
        private readonly string _value;

        private SslConfigClientCertType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Cert type unspecified.
        /// </summary>
        public static SslConfigClientCertType CertTypeUnspecified { get; } = new SslConfigClientCertType("CERT_TYPE_UNSPECIFIED");
        /// <summary>
        /// Privacy Enhanced Mail (PEM) Type
        /// </summary>
        public static SslConfigClientCertType Pem { get; } = new SslConfigClientCertType("PEM");

        public static bool operator ==(SslConfigClientCertType left, SslConfigClientCertType right) => left.Equals(right);
        public static bool operator !=(SslConfigClientCertType left, SslConfigClientCertType right) => !left.Equals(right);

        public static explicit operator string(SslConfigClientCertType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslConfigClientCertType other && Equals(other);
        public bool Equals(SslConfigClientCertType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of Server Cert (PEM/JKS/.. etc.)
    /// </summary>
    [EnumType]
    public readonly struct SslConfigServerCertType : IEquatable<SslConfigServerCertType>
    {
        private readonly string _value;

        private SslConfigServerCertType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Cert type unspecified.
        /// </summary>
        public static SslConfigServerCertType CertTypeUnspecified { get; } = new SslConfigServerCertType("CERT_TYPE_UNSPECIFIED");
        /// <summary>
        /// Privacy Enhanced Mail (PEM) Type
        /// </summary>
        public static SslConfigServerCertType Pem { get; } = new SslConfigServerCertType("PEM");

        public static bool operator ==(SslConfigServerCertType left, SslConfigServerCertType right) => left.Equals(right);
        public static bool operator !=(SslConfigServerCertType left, SslConfigServerCertType right) => !left.Equals(right);

        public static explicit operator string(SslConfigServerCertType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslConfigServerCertType other && Equals(other);
        public bool Equals(SslConfigServerCertType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Trust Model of the SSL connection
    /// </summary>
    [EnumType]
    public readonly struct SslConfigTrustModel : IEquatable<SslConfigTrustModel>
    {
        private readonly string _value;

        private SslConfigTrustModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Public Trust Model. Takes the Default Java trust store.
        /// </summary>
        public static SslConfigTrustModel Public { get; } = new SslConfigTrustModel("PUBLIC");
        /// <summary>
        /// Private Trust Model. Takes custom/private trust store.
        /// </summary>
        public static SslConfigTrustModel Private { get; } = new SslConfigTrustModel("PRIVATE");
        /// <summary>
        /// Insecure Trust Model. Accept all certificates.
        /// </summary>
        public static SslConfigTrustModel Insecure { get; } = new SslConfigTrustModel("INSECURE");

        public static bool operator ==(SslConfigTrustModel left, SslConfigTrustModel right) => left.Equals(right);
        public static bool operator !=(SslConfigTrustModel left, SslConfigTrustModel right) => !left.Equals(right);

        public static explicit operator string(SslConfigTrustModel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslConfigTrustModel other && Equals(other);
        public bool Equals(SslConfigTrustModel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Controls the ssl type for the given connector version.
    /// </summary>
    [EnumType]
    public readonly struct SslConfigType : IEquatable<SslConfigType>
    {
        private readonly string _value;

        private SslConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No SSL configuration required.
        /// </summary>
        public static SslConfigType SslTypeUnspecified { get; } = new SslConfigType("SSL_TYPE_UNSPECIFIED");
        /// <summary>
        /// TLS Handshake
        /// </summary>
        public static SslConfigType Tls { get; } = new SslConfigType("TLS");
        /// <summary>
        /// mutual TLS (MTLS) Handshake
        /// </summary>
        public static SslConfigType Mtls { get; } = new SslConfigType("MTLS");

        public static bool operator ==(SslConfigType left, SslConfigType right) => left.Equals(right);
        public static bool operator !=(SslConfigType left, SslConfigType right) => !left.Equals(right);

        public static explicit operator string(SslConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslConfigType other && Equals(other);
        public bool Equals(SslConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
