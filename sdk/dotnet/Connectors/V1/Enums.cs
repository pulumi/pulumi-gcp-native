// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Connectors.V1
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of authentication configured.
    /// </summary>
    [EnumType]
    public readonly struct AuthConfigAuthType : IEquatable<AuthConfigAuthType>
    {
        private readonly string _value;

        private AuthConfigAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Authentication type not specified.
        /// </summary>
        public static AuthConfigAuthType AuthTypeUnspecified { get; } = new AuthConfigAuthType("AUTH_TYPE_UNSPECIFIED");
        /// <summary>
        /// Username and Password Authentication.
        /// </summary>
        public static AuthConfigAuthType UserPassword { get; } = new AuthConfigAuthType("USER_PASSWORD");
        /// <summary>
        /// JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication
        /// </summary>
        public static AuthConfigAuthType Oauth2JwtBearer { get; } = new AuthConfigAuthType("OAUTH2_JWT_BEARER");
        /// <summary>
        /// Oauth 2.0 Client Credentials Grant Authentication
        /// </summary>
        public static AuthConfigAuthType Oauth2ClientCredentials { get; } = new AuthConfigAuthType("OAUTH2_CLIENT_CREDENTIALS");
        /// <summary>
        /// SSH Public Key Authentication
        /// </summary>
        public static AuthConfigAuthType SshPublicKey { get; } = new AuthConfigAuthType("SSH_PUBLIC_KEY");
        /// <summary>
        /// Oauth 2.0 Authorization Code Flow
        /// </summary>
        public static AuthConfigAuthType Oauth2AuthCodeFlow { get; } = new AuthConfigAuthType("OAUTH2_AUTH_CODE_FLOW");

        public static bool operator ==(AuthConfigAuthType left, AuthConfigAuthType right) => left.Equals(right);
        public static bool operator !=(AuthConfigAuthType left, AuthConfigAuthType right) => !left.Equals(right);

        public static explicit operator string(AuthConfigAuthType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthConfigAuthType other && Equals(other);
        public bool Equals(AuthConfigAuthType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Eventing enablement type. Will be nil if eventing is not enabled.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionEventingEnablementType : IEquatable<ConnectionEventingEnablementType>
    {
        private readonly string _value;

        private ConnectionEventingEnablementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Eventing Enablement Type Unspecifeied.
        /// </summary>
        public static ConnectionEventingEnablementType EventingEnablementTypeUnspecified { get; } = new ConnectionEventingEnablementType("EVENTING_ENABLEMENT_TYPE_UNSPECIFIED");
        /// <summary>
        /// Both connection and eventing.
        /// </summary>
        public static ConnectionEventingEnablementType EventingAndConnection { get; } = new ConnectionEventingEnablementType("EVENTING_AND_CONNECTION");
        /// <summary>
        /// Only Eventing.
        /// </summary>
        public static ConnectionEventingEnablementType OnlyEventing { get; } = new ConnectionEventingEnablementType("ONLY_EVENTING");

        public static bool operator ==(ConnectionEventingEnablementType left, ConnectionEventingEnablementType right) => left.Equals(right);
        public static bool operator !=(ConnectionEventingEnablementType left, ConnectionEventingEnablementType right) => !left.Equals(right);

        public static explicit operator string(ConnectionEventingEnablementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionEventingEnablementType other && Equals(other);
        public bool Equals(ConnectionEventingEnablementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Type of the custom connector.
    /// </summary>
    [EnumType]
    public readonly struct CustomConnectorCustomConnectorType : IEquatable<CustomConnectorCustomConnectorType>
    {
        private readonly string _value;

        private CustomConnectorCustomConnectorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Connector type is not specified.
        /// </summary>
        public static CustomConnectorCustomConnectorType CustomConnectorTypeUnspecified { get; } = new CustomConnectorCustomConnectorType("CUSTOM_CONNECTOR_TYPE_UNSPECIFIED");
        /// <summary>
        /// OpenAPI connector.
        /// </summary>
        public static CustomConnectorCustomConnectorType OpenApi { get; } = new CustomConnectorCustomConnectorType("OPEN_API");
        /// <summary>
        /// Proto connector.
        /// </summary>
        public static CustomConnectorCustomConnectorType Proto { get; } = new CustomConnectorCustomConnectorType("PROTO");

        public static bool operator ==(CustomConnectorCustomConnectorType left, CustomConnectorCustomConnectorType right) => left.Equals(right);
        public static bool operator !=(CustomConnectorCustomConnectorType left, CustomConnectorCustomConnectorType right) => !left.Equals(right);

        public static explicit operator string(CustomConnectorCustomConnectorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomConnectorCustomConnectorType other && Equals(other);
        public bool Equals(CustomConnectorCustomConnectorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Type of the customConnector.
    /// </summary>
    [EnumType]
    public readonly struct CustomConnectorVersionType : IEquatable<CustomConnectorVersionType>
    {
        private readonly string _value;

        private CustomConnectorVersionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Connector type is not specified.
        /// </summary>
        public static CustomConnectorVersionType CustomConnectorTypeUnspecified { get; } = new CustomConnectorVersionType("CUSTOM_CONNECTOR_TYPE_UNSPECIFIED");
        /// <summary>
        /// OpenAPI connector.
        /// </summary>
        public static CustomConnectorVersionType OpenApi { get; } = new CustomConnectorVersionType("OPEN_API");
        /// <summary>
        /// Proto connector.
        /// </summary>
        public static CustomConnectorVersionType Proto { get; } = new CustomConnectorVersionType("PROTO");

        public static bool operator ==(CustomConnectorVersionType left, CustomConnectorVersionType right) => left.Equals(right);
        public static bool operator !=(CustomConnectorVersionType left, CustomConnectorVersionType right) => !left.Equals(right);

        public static explicit operator string(CustomConnectorVersionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomConnectorVersionType other && Equals(other);
        public bool Equals(CustomConnectorVersionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type.
    /// </summary>
    [EnumType]
    public readonly struct EncryptionKeyType : IEquatable<EncryptionKeyType>
    {
        private readonly string _value;

        private EncryptionKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Value type is not specified.
        /// </summary>
        public static EncryptionKeyType TypeUnspecified { get; } = new EncryptionKeyType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Google Managed.
        /// </summary>
        public static EncryptionKeyType GoogleManaged { get; } = new EncryptionKeyType("GOOGLE_MANAGED");
        /// <summary>
        /// Customer Managed.
        /// </summary>
        public static EncryptionKeyType CustomerManaged { get; } = new EncryptionKeyType("CUSTOMER_MANAGED");

        public static bool operator ==(EncryptionKeyType left, EncryptionKeyType right) => left.Equals(right);
        public static bool operator !=(EncryptionKeyType left, EncryptionKeyType right) => !left.Equals(right);

        public static explicit operator string(EncryptionKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionKeyType other && Equals(other);
        public bool Equals(EncryptionKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// type of the destination
    /// </summary>
    [EnumType]
    public readonly struct EventSubscriptionDestinationType : IEquatable<EventSubscriptionDestinationType>
    {
        private readonly string _value;

        private EventSubscriptionDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default state.
        /// </summary>
        public static EventSubscriptionDestinationType TypeUnspecified { get; } = new EventSubscriptionDestinationType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Endpoint - Hit the value of endpoint when event is received
        /// </summary>
        public static EventSubscriptionDestinationType Endpoint { get; } = new EventSubscriptionDestinationType("ENDPOINT");

        public static bool operator ==(EventSubscriptionDestinationType left, EventSubscriptionDestinationType right) => left.Equals(right);
        public static bool operator !=(EventSubscriptionDestinationType left, EventSubscriptionDestinationType right) => !left.Equals(right);

        public static explicit operator string(EventSubscriptionDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventSubscriptionDestinationType other && Equals(other);
        public bool Equals(EventSubscriptionDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Type of the JMS Source. i.e. Queue or Topic
    /// </summary>
    [EnumType]
    public readonly struct JMSType : IEquatable<JMSType>
    {
        private readonly string _value;

        private JMSType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default state.
        /// </summary>
        public static JMSType TypeUnspecified { get; } = new JMSType("TYPE_UNSPECIFIED");
        /// <summary>
        /// JMS Queue.
        /// </summary>
        public static JMSType Queue { get; } = new JMSType("QUEUE");
        /// <summary>
        /// JMS Topic.
        /// </summary>
        public static JMSType Topic { get; } = new JMSType("TOPIC");

        public static bool operator ==(JMSType left, JMSType right) => left.Equals(right);
        public static bool operator !=(JMSType left, JMSType right) => !left.Equals(right);

        public static explicit operator string(JMSType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JMSType other && Equals(other);
        public bool Equals(JMSType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of Client Cert (PEM/JKS/.. etc.)
    /// </summary>
    [EnumType]
    public readonly struct SslConfigClientCertType : IEquatable<SslConfigClientCertType>
    {
        private readonly string _value;

        private SslConfigClientCertType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Cert type unspecified.
        /// </summary>
        public static SslConfigClientCertType CertTypeUnspecified { get; } = new SslConfigClientCertType("CERT_TYPE_UNSPECIFIED");
        /// <summary>
        /// Privacy Enhanced Mail (PEM) Type
        /// </summary>
        public static SslConfigClientCertType Pem { get; } = new SslConfigClientCertType("PEM");

        public static bool operator ==(SslConfigClientCertType left, SslConfigClientCertType right) => left.Equals(right);
        public static bool operator !=(SslConfigClientCertType left, SslConfigClientCertType right) => !left.Equals(right);

        public static explicit operator string(SslConfigClientCertType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslConfigClientCertType other && Equals(other);
        public bool Equals(SslConfigClientCertType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of Server Cert (PEM/JKS/.. etc.)
    /// </summary>
    [EnumType]
    public readonly struct SslConfigServerCertType : IEquatable<SslConfigServerCertType>
    {
        private readonly string _value;

        private SslConfigServerCertType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Cert type unspecified.
        /// </summary>
        public static SslConfigServerCertType CertTypeUnspecified { get; } = new SslConfigServerCertType("CERT_TYPE_UNSPECIFIED");
        /// <summary>
        /// Privacy Enhanced Mail (PEM) Type
        /// </summary>
        public static SslConfigServerCertType Pem { get; } = new SslConfigServerCertType("PEM");

        public static bool operator ==(SslConfigServerCertType left, SslConfigServerCertType right) => left.Equals(right);
        public static bool operator !=(SslConfigServerCertType left, SslConfigServerCertType right) => !left.Equals(right);

        public static explicit operator string(SslConfigServerCertType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslConfigServerCertType other && Equals(other);
        public bool Equals(SslConfigServerCertType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Trust Model of the SSL connection
    /// </summary>
    [EnumType]
    public readonly struct SslConfigTrustModel : IEquatable<SslConfigTrustModel>
    {
        private readonly string _value;

        private SslConfigTrustModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Public Trust Model. Takes the Default Java trust store.
        /// </summary>
        public static SslConfigTrustModel Public { get; } = new SslConfigTrustModel("PUBLIC");
        /// <summary>
        /// Private Trust Model. Takes custom/private trust store.
        /// </summary>
        public static SslConfigTrustModel Private { get; } = new SslConfigTrustModel("PRIVATE");
        /// <summary>
        /// Insecure Trust Model. Accept all certificates.
        /// </summary>
        public static SslConfigTrustModel Insecure { get; } = new SslConfigTrustModel("INSECURE");

        public static bool operator ==(SslConfigTrustModel left, SslConfigTrustModel right) => left.Equals(right);
        public static bool operator !=(SslConfigTrustModel left, SslConfigTrustModel right) => !left.Equals(right);

        public static explicit operator string(SslConfigTrustModel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslConfigTrustModel other && Equals(other);
        public bool Equals(SslConfigTrustModel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Controls the ssl type for the given connector version.
    /// </summary>
    [EnumType]
    public readonly struct SslConfigType : IEquatable<SslConfigType>
    {
        private readonly string _value;

        private SslConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No SSL configuration required.
        /// </summary>
        public static SslConfigType SslTypeUnspecified { get; } = new SslConfigType("SSL_TYPE_UNSPECIFIED");
        /// <summary>
        /// TLS Handshake
        /// </summary>
        public static SslConfigType Tls { get; } = new SslConfigType("TLS");
        /// <summary>
        /// mutual TLS (MTLS) Handshake
        /// </summary>
        public static SslConfigType Mtls { get; } = new SslConfigType("MTLS");

        public static bool operator ==(SslConfigType left, SslConfigType right) => left.Equals(right);
        public static bool operator !=(SslConfigType left, SslConfigType right) => !left.Equals(right);

        public static explicit operator string(SslConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslConfigType other && Equals(other);
        public bool Equals(SslConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
