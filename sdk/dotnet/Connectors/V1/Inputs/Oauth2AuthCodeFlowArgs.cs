// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Connectors.V1.Inputs
{

    /// <summary>
    /// Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.
    /// </summary>
    public sealed class Oauth2AuthCodeFlowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authorization code to be exchanged for access and refresh tokens.
        /// </summary>
        [Input("authCode")]
        public Input<string>? AuthCode { get; set; }

        /// <summary>
        /// Auth URL for Authorization Code Flow
        /// </summary>
        [Input("authUri")]
        public Input<string>? AuthUri { get; set; }

        /// <summary>
        /// Client ID for user-provided OAuth app.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// Client secret for user-provided OAuth app.
        /// </summary>
        [Input("clientSecret")]
        public Input<Inputs.SecretArgs>? ClientSecret { get; set; }

        /// <summary>
        /// Whether to enable PKCE when the user performs the auth code flow.
        /// </summary>
        [Input("enablePkce")]
        public Input<bool>? EnablePkce { get; set; }

        /// <summary>
        /// PKCE verifier to be used during the auth code exchange.
        /// </summary>
        [Input("pkceVerifier")]
        public Input<string>? PkceVerifier { get; set; }

        /// <summary>
        /// Redirect URI to be provided during the auth code exchange.
        /// </summary>
        [Input("redirectUri")]
        public Input<string>? RedirectUri { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Scopes the connection will request when the user performs the auth code flow.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        public Oauth2AuthCodeFlowArgs()
        {
        }
        public static new Oauth2AuthCodeFlowArgs Empty => new Oauth2AuthCodeFlowArgs();
    }
}
