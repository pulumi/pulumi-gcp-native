// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Connectors.V1
{
    public static class GetEventSubscription
    {
        /// <summary>
        /// Gets details of a single EventSubscription.
        /// </summary>
        public static Task<GetEventSubscriptionResult> InvokeAsync(GetEventSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEventSubscriptionResult>("google-native:connectors/v1:getEventSubscription", args ?? new GetEventSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single EventSubscription.
        /// </summary>
        public static Output<GetEventSubscriptionResult> Invoke(GetEventSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventSubscriptionResult>("google-native:connectors/v1:getEventSubscription", args ?? new GetEventSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId", required: true)]
        public string ConnectionId { get; set; } = null!;

        [Input("eventSubscriptionId", required: true)]
        public string EventSubscriptionId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetEventSubscriptionArgs()
        {
        }
        public static new GetEventSubscriptionArgs Empty => new GetEventSubscriptionArgs();
    }

    public sealed class GetEventSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        [Input("eventSubscriptionId", required: true)]
        public Input<string> EventSubscriptionId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetEventSubscriptionInvokeArgs()
        {
        }
        public static new GetEventSubscriptionInvokeArgs Empty => new GetEventSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetEventSubscriptionResult
    {
        /// <summary>
        /// Created time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. The destination to hit when we receive an event
        /// </summary>
        public readonly Outputs.EventSubscriptionDestinationResponse Destinations;
        /// <summary>
        /// Optional. Event type id of the event of current EventSubscription.
        /// </summary>
        public readonly string EventTypeId;
        /// <summary>
        /// Optional. JMS is the source for the event listener.
        /// </summary>
        public readonly Outputs.JMSResponse Jms;
        /// <summary>
        /// Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. Status indicates the status of the event subscription resource
        /// </summary>
        public readonly Outputs.EventSubscriptionStatusResponse Status;
        /// <summary>
        /// Optional. name of the Subscriber for the current EventSubscription.
        /// </summary>
        public readonly string Subscriber;
        /// <summary>
        /// Optional. Link for Subscriber of the current EventSubscription.
        /// </summary>
        public readonly string SubscriberLink;
        /// <summary>
        /// Updated time.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetEventSubscriptionResult(
            string createTime,

            Outputs.EventSubscriptionDestinationResponse destinations,

            string eventTypeId,

            Outputs.JMSResponse jms,

            string name,

            Outputs.EventSubscriptionStatusResponse status,

            string subscriber,

            string subscriberLink,

            string updateTime)
        {
            CreateTime = createTime;
            Destinations = destinations;
            EventTypeId = eventTypeId;
            Jms = jms;
            Name = name;
            Status = status;
            Subscriber = subscriber;
            SubscriberLink = subscriberLink;
            UpdateTime = updateTime;
        }
    }
}
