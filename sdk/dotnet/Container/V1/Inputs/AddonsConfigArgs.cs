// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Container.V1.Inputs
{

    /// <summary>
    /// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
    /// </summary>
    public sealed class AddonsConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
        /// </summary>
        [Input("cloudRunConfig")]
        public Input<Inputs.CloudRunConfigArgs>? CloudRunConfig { get; set; }

        /// <summary>
        /// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
        /// </summary>
        [Input("configConnectorConfig")]
        public Input<Inputs.ConfigConnectorConfigArgs>? ConfigConnectorConfig { get; set; }

        /// <summary>
        /// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
        /// </summary>
        [Input("dnsCacheConfig")]
        public Input<Inputs.DnsCacheConfigArgs>? DnsCacheConfig { get; set; }

        /// <summary>
        /// Configuration for the Compute Engine Persistent Disk CSI driver.
        /// </summary>
        [Input("gcePersistentDiskCsiDriverConfig")]
        public Input<Inputs.GcePersistentDiskCsiDriverConfigArgs>? GcePersistentDiskCsiDriverConfig { get; set; }

        /// <summary>
        /// Configuration for the GCP Filestore CSI driver.
        /// </summary>
        [Input("gcpFilestoreCsiDriverConfig")]
        public Input<Inputs.GcpFilestoreCsiDriverConfigArgs>? GcpFilestoreCsiDriverConfig { get; set; }

        /// <summary>
        /// Configuration for the Backup for GKE agent addon.
        /// </summary>
        [Input("gkeBackupAgentConfig")]
        public Input<Inputs.GkeBackupAgentConfigArgs>? GkeBackupAgentConfig { get; set; }

        /// <summary>
        /// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
        /// </summary>
        [Input("horizontalPodAutoscaling")]
        public Input<Inputs.HorizontalPodAutoscalingArgs>? HorizontalPodAutoscaling { get; set; }

        /// <summary>
        /// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
        /// </summary>
        [Input("httpLoadBalancing")]
        public Input<Inputs.HttpLoadBalancingArgs>? HttpLoadBalancing { get; set; }

        /// <summary>
        /// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
        /// </summary>
        [Input("kubernetesDashboard")]
        public Input<Inputs.KubernetesDashboardArgs>? KubernetesDashboard { get; set; }

        /// <summary>
        /// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
        /// </summary>
        [Input("networkPolicyConfig")]
        public Input<Inputs.NetworkPolicyConfigArgs>? NetworkPolicyConfig { get; set; }

        public AddonsConfigArgs()
        {
        }
        public static new AddonsConfigArgs Empty => new AddonsConfigArgs();
    }
}
