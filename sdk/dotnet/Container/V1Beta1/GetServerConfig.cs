// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Container.V1Beta1
{
    public static class GetServerConfig
    {
        /// <summary>
        /// Returns configuration info about the Google Kubernetes Engine service.
        /// </summary>
        public static Task<GetServerConfigResult> InvokeAsync(GetServerConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerConfigResult>("google-native:container/v1beta1:getServerConfig", args ?? new GetServerConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Returns configuration info about the Google Kubernetes Engine service.
        /// </summary>
        public static Output<GetServerConfigResult> Invoke(GetServerConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerConfigResult>("google-native:container/v1beta1:getServerConfig", args ?? new GetServerConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetServerConfigArgs()
        {
        }
        public static new GetServerConfigArgs Empty => new GetServerConfigArgs();
    }

    public sealed class GetServerConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetServerConfigInvokeArgs()
        {
        }
        public static new GetServerConfigInvokeArgs Empty => new GetServerConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerConfigResult
    {
        /// <summary>
        /// List of release channel configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.ReleaseChannelConfigResponse> Channels;
        /// <summary>
        /// Version of Kubernetes the service deploys by default.
        /// </summary>
        public readonly string DefaultClusterVersion;
        /// <summary>
        /// Default image type.
        /// </summary>
        public readonly string DefaultImageType;
        /// <summary>
        /// List of valid image types.
        /// </summary>
        public readonly ImmutableArray<string> ValidImageTypes;
        /// <summary>
        /// List of valid master versions, in descending order.
        /// </summary>
        public readonly ImmutableArray<string> ValidMasterVersions;
        /// <summary>
        /// List of valid node upgrade target versions, in descending order.
        /// </summary>
        public readonly ImmutableArray<string> ValidNodeVersions;
        /// <summary>
        /// Maps of Kubernetes version and supported Windows server versions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.WindowsVersionsResponse> WindowsVersionMaps;

        [OutputConstructor]
        private GetServerConfigResult(
            ImmutableArray<Outputs.ReleaseChannelConfigResponse> channels,

            string defaultClusterVersion,

            string defaultImageType,

            ImmutableArray<string> validImageTypes,

            ImmutableArray<string> validMasterVersions,

            ImmutableArray<string> validNodeVersions,

            ImmutableDictionary<string, Outputs.WindowsVersionsResponse> windowsVersionMaps)
        {
            Channels = channels;
            DefaultClusterVersion = defaultClusterVersion;
            DefaultImageType = defaultImageType;
            ValidImageTypes = validImageTypes;
            ValidMasterVersions = validMasterVersions;
            ValidNodeVersions = validNodeVersions;
            WindowsVersionMaps = windowsVersionMaps;
        }
    }
}
