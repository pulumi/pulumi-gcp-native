// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Container.V1Beta1.Outputs
{

    /// <summary>
    /// NetworkConfig reports the relative names of network &amp; subnetwork.
    /// </summary>
    [OutputType]
    public sealed class NetworkConfigResponse
    {
        /// <summary>
        /// The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
        /// </summary>
        public readonly string DatapathProvider;
        /// <summary>
        /// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
        /// </summary>
        public readonly Outputs.DefaultSnatStatusResponse DefaultSnatStatus;
        /// <summary>
        /// DNSConfig contains clusterDNS config for this cluster.
        /// </summary>
        public readonly Outputs.DNSConfigResponse DnsConfig;
        /// <summary>
        /// Whether FQDN Network Policy is enabled on this cluster.
        /// </summary>
        public readonly bool EnableFqdnNetworkPolicy;
        /// <summary>
        /// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
        /// </summary>
        public readonly bool EnableIntraNodeVisibility;
        /// <summary>
        /// Whether L4ILB Subsetting is enabled for this cluster.
        /// </summary>
        public readonly bool EnableL4ilbSubsetting;
        /// <summary>
        /// Whether multi-networking is enabled for this cluster.
        /// </summary>
        public readonly bool EnableMultiNetworking;
        /// <summary>
        /// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
        /// </summary>
        public readonly Outputs.GatewayAPIConfigResponse GatewayApiConfig;
        /// <summary>
        /// Specify the details of in-transit encryption.
        /// </summary>
        public readonly string InTransitEncryptionConfig;
        /// <summary>
        /// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// Network bandwidth tier configuration.
        /// </summary>
        public readonly Outputs.ClusterNetworkPerformanceConfigResponse NetworkPerformanceConfig;
        /// <summary>
        /// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
        /// </summary>
        public readonly string PrivateIpv6GoogleAccess;
        /// <summary>
        /// ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
        /// </summary>
        public readonly Outputs.ServiceExternalIPsConfigResponse ServiceExternalIpsConfig;
        /// <summary>
        /// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
        /// </summary>
        public readonly string Subnetwork;

        [OutputConstructor]
        private NetworkConfigResponse(
            string datapathProvider,

            Outputs.DefaultSnatStatusResponse defaultSnatStatus,

            Outputs.DNSConfigResponse dnsConfig,

            bool enableFqdnNetworkPolicy,

            bool enableIntraNodeVisibility,

            bool enableL4ilbSubsetting,

            bool enableMultiNetworking,

            Outputs.GatewayAPIConfigResponse gatewayApiConfig,

            string inTransitEncryptionConfig,

            string network,

            Outputs.ClusterNetworkPerformanceConfigResponse networkPerformanceConfig,

            string privateIpv6GoogleAccess,

            Outputs.ServiceExternalIPsConfigResponse serviceExternalIpsConfig,

            string subnetwork)
        {
            DatapathProvider = datapathProvider;
            DefaultSnatStatus = defaultSnatStatus;
            DnsConfig = dnsConfig;
            EnableFqdnNetworkPolicy = enableFqdnNetworkPolicy;
            EnableIntraNodeVisibility = enableIntraNodeVisibility;
            EnableL4ilbSubsetting = enableL4ilbSubsetting;
            EnableMultiNetworking = enableMultiNetworking;
            GatewayApiConfig = gatewayApiConfig;
            InTransitEncryptionConfig = inTransitEncryptionConfig;
            Network = network;
            NetworkPerformanceConfig = networkPerformanceConfig;
            PrivateIpv6GoogleAccess = privateIpv6GoogleAccess;
            ServiceExternalIpsConfig = serviceExternalIpsConfig;
            Subnetwork = subnetwork;
        }
    }
}
