// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataplex.V1.Outputs
{

    /// <summary>
    /// MetadataTemplate definition for AspectType
    /// </summary>
    [OutputType]
    public sealed class GoogleCloudDataplexV1AspectTypeMetadataTemplateResponse
    {
        /// <summary>
        /// Optional. Specifies annotations on this field.
        /// </summary>
        public readonly Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateAnnotationsResponse Annotations;
        /// <summary>
        /// Optional. array_items needs to be set if the type is array. array_items can refer to a primitive field or a complex (record only) field. To specify a primitive field, just name and type needs to be set in the nested MetadataTemplate. The recommended value for the name field is item, as this is not used in the actual payload.
        /// </summary>
        public readonly Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateResponse ArrayItems;
        /// <summary>
        /// Optional. Specifies the constraints on this field.
        /// </summary>
        public readonly Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateConstraintsResponse Constraints;
        /// <summary>
        /// Optional. The list of values for an enum type. Needs to be defined if the type is enum.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateEnumValueResponse> EnumValues;
        /// <summary>
        /// Optional. Index is used to encode Template messages. The value of index can range between 1 and 2,147,483,647. Index must be unique within all fields in a Template. (Nested Templates can reuse indexes). Once a Template is defined, the index cannot be changed, because it identifies the field in the actual storage format. Index is a mandatory field, but it is optional for top level fields, and map/array "values" definitions.
        /// </summary>
        public readonly int Index;
        /// <summary>
        /// Optional. map_items needs to be set if the type is map. map_items can refer to a primitive field or a complex (record only) field. To specify a primitive field, just name and type needs to be set in the nested MetadataTemplate. The recommended value for the name field is item, as this is not used in the actual payload.
        /// </summary>
        public readonly Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateResponse MapItems;
        /// <summary>
        /// The name of the field.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. Field definition, needs to be specified if the type is record. Defines the nested fields.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateResponse> RecordFields;
        /// <summary>
        /// The datatype of this field. The following values are supported: Primitive types (string, integer, boolean, double, datetime); datetime must be of the format RFC3339 UTC "Zulu" (Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"). Complex types (enum, array, map, record).
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Optional. Id can be used if this definition of the field needs to be reused later. Id needs to be unique across the entire template. Id can only be specified if the field type is record.
        /// </summary>
        public readonly string TypeId;
        /// <summary>
        /// Optional. A reference to another field definition (instead of an inline definition). The value must be equal to the value of an id field defined elsewhere in the MetadataTemplate. Only fields with type as record can refer to other fields.
        /// </summary>
        public readonly string TypeRef;

        [OutputConstructor]
        private GoogleCloudDataplexV1AspectTypeMetadataTemplateResponse(
            Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateAnnotationsResponse annotations,

            Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateResponse arrayItems,

            Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateConstraintsResponse constraints,

            ImmutableArray<Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateEnumValueResponse> enumValues,

            int index,

            Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateResponse mapItems,

            string name,

            ImmutableArray<Outputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateResponse> recordFields,

            string type,

            string typeId,

            string typeRef)
        {
            Annotations = annotations;
            ArrayItems = arrayItems;
            Constraints = constraints;
            EnumValues = enumValues;
            Index = index;
            MapItems = mapItems;
            Name = name;
            RecordFields = recordFields;
            Type = type;
            TypeId = typeId;
            TypeRef = typeRef;
        }
    }
}
