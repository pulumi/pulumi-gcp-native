// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataplex.V1
{
    public static class GetDataAttributeBinding
    {
        /// <summary>
        /// Retrieves a DataAttributeBinding resource.
        /// </summary>
        public static Task<GetDataAttributeBindingResult> InvokeAsync(GetDataAttributeBindingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataAttributeBindingResult>("google-native:dataplex/v1:getDataAttributeBinding", args ?? new GetDataAttributeBindingArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a DataAttributeBinding resource.
        /// </summary>
        public static Output<GetDataAttributeBindingResult> Invoke(GetDataAttributeBindingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataAttributeBindingResult>("google-native:dataplex/v1:getDataAttributeBinding", args ?? new GetDataAttributeBindingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataAttributeBindingArgs : global::Pulumi.InvokeArgs
    {
        [Input("dataAttributeBindingId", required: true)]
        public string DataAttributeBindingId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDataAttributeBindingArgs()
        {
        }
        public static new GetDataAttributeBindingArgs Empty => new GetDataAttributeBindingArgs();
    }

    public sealed class GetDataAttributeBindingInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("dataAttributeBindingId", required: true)]
        public Input<string> DataAttributeBindingId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDataAttributeBindingInvokeArgs()
        {
        }
        public static new GetDataAttributeBindingInvokeArgs Empty => new GetDataAttributeBindingInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataAttributeBindingResult
    {
        /// <summary>
        /// Optional. List of attributes to be associated with the resource, provided in the form: projects/{project}/locations/{location}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}
        /// </summary>
        public readonly ImmutableArray<string> Attributes;
        /// <summary>
        /// The time when the DataAttributeBinding was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. Description of the DataAttributeBinding.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. User friendly display name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Etags must be used when calling the DeleteDataAttributeBinding and the UpdateDataAttributeBinding method.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Optional. User-defined labels for the DataAttributeBinding.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The relative resource name of the Data Attribute Binding, of the form: projects/{project_number}/locations/{location}/dataAttributeBindings/{data_attribute_binding_id}
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. The list of paths for items within the associated resource (eg. columns within a table) along with attribute bindings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudDataplexV1DataAttributeBindingPathResponse> Paths;
        /// <summary>
        /// Optional. Immutable. The resource name of the resource that is binded to attributes. Presently, only entity resource is supported in the form: projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity_id} Must belong in the same project and region as the attribute binding, and there can only exist one active binding for a resource.
        /// </summary>
        public readonly string Resource;
        /// <summary>
        /// System generated globally unique ID for the DataAttributeBinding. This ID will be different if the DataAttributeBinding is deleted and re-created with the same name.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// The time when the DataAttributeBinding was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetDataAttributeBindingResult(
            ImmutableArray<string> attributes,

            string createTime,

            string description,

            string displayName,

            string etag,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<Outputs.GoogleCloudDataplexV1DataAttributeBindingPathResponse> paths,

            string resource,

            string uid,

            string updateTime)
        {
            Attributes = attributes;
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            Etag = etag;
            Labels = labels;
            Name = name;
            Paths = paths;
            Resource = resource;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
