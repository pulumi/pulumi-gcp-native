// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataplex.V1.Inputs
{

    /// <summary>
    /// MetadataTemplate definition for AspectType
    /// </summary>
    public sealed class GoogleCloudDataplexV1AspectTypeMetadataTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. Specifies annotations on this field.
        /// </summary>
        [Input("annotations")]
        public Input<Inputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateAnnotationsArgs>? Annotations { get; set; }

        /// <summary>
        /// Optional. array_items needs to be set if the type is array. array_items can refer to a primitive field or a complex (record only) field. To specify a primitive field, just name and type needs to be set in the nested MetadataTemplate. The recommended value for the name field is item, as this is not used in the actual payload.
        /// </summary>
        [Input("arrayItems")]
        public Input<Inputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateArgs>? ArrayItems { get; set; }

        /// <summary>
        /// Optional. Specifies the constraints on this field.
        /// </summary>
        [Input("constraints")]
        public Input<Inputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateConstraintsArgs>? Constraints { get; set; }

        [Input("enumValues")]
        private InputList<Inputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateEnumValueArgs>? _enumValues;

        /// <summary>
        /// Optional. The list of values for an enum type. Needs to be defined if the type is enum.
        /// </summary>
        public InputList<Inputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateEnumValueArgs> EnumValues
        {
            get => _enumValues ?? (_enumValues = new InputList<Inputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateEnumValueArgs>());
            set => _enumValues = value;
        }

        /// <summary>
        /// Optional. Index is used to encode Template messages. The value of index can range between 1 and 2,147,483,647. Index must be unique within all fields in a Template. (Nested Templates can reuse indexes). Once a Template is defined, the index cannot be changed, because it identifies the field in the actual storage format. Index is a mandatory field, but it is optional for top level fields, and map/array "values" definitions.
        /// </summary>
        [Input("index")]
        public Input<int>? Index { get; set; }

        /// <summary>
        /// Optional. map_items needs to be set if the type is map. map_items can refer to a primitive field or a complex (record only) field. To specify a primitive field, just name and type needs to be set in the nested MetadataTemplate. The recommended value for the name field is item, as this is not used in the actual payload.
        /// </summary>
        [Input("mapItems")]
        public Input<Inputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateArgs>? MapItems { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("recordFields")]
        private InputList<Inputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateArgs>? _recordFields;

        /// <summary>
        /// Optional. Field definition, needs to be specified if the type is record. Defines the nested fields.
        /// </summary>
        public InputList<Inputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateArgs> RecordFields
        {
            get => _recordFields ?? (_recordFields = new InputList<Inputs.GoogleCloudDataplexV1AspectTypeMetadataTemplateArgs>());
            set => _recordFields = value;
        }

        /// <summary>
        /// The datatype of this field. The following values are supported: Primitive types (string, integer, boolean, double, datetime); datetime must be of the format RFC3339 UTC "Zulu" (Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"). Complex types (enum, array, map, record).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Optional. Id can be used if this definition of the field needs to be reused later. Id needs to be unique across the entire template. Id can only be specified if the field type is record.
        /// </summary>
        [Input("typeId")]
        public Input<string>? TypeId { get; set; }

        /// <summary>
        /// Optional. A reference to another field definition (instead of an inline definition). The value must be equal to the value of an id field defined elsewhere in the MetadataTemplate. Only fields with type as record can refer to other fields.
        /// </summary>
        [Input("typeRef")]
        public Input<string>? TypeRef { get; set; }

        public GoogleCloudDataplexV1AspectTypeMetadataTemplateArgs()
        {
        }
        public static new GoogleCloudDataplexV1AspectTypeMetadataTemplateArgs Empty => new GoogleCloudDataplexV1AspectTypeMetadataTemplateArgs();
    }
}
