// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Backupdr.V1
{
    public static class GetManagementServer
    {
        /// <summary>
        /// Gets details of a single ManagementServer.
        /// </summary>
        public static Task<GetManagementServerResult> InvokeAsync(GetManagementServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagementServerResult>("google-native:backupdr/v1:getManagementServer", args ?? new GetManagementServerArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single ManagementServer.
        /// </summary>
        public static Output<GetManagementServerResult> Invoke(GetManagementServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagementServerResult>("google-native:backupdr/v1:getManagementServer", args ?? new GetManagementServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagementServerArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("managementServerId", required: true)]
        public string ManagementServerId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetManagementServerArgs()
        {
        }
        public static new GetManagementServerArgs Empty => new GetManagementServerArgs();
    }

    public sealed class GetManagementServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("managementServerId", required: true)]
        public Input<string> ManagementServerId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetManagementServerInvokeArgs()
        {
        }
        public static new GetManagementServerInvokeArgs Empty => new GetManagementServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagementServerResult
    {
        /// <summary>
        /// The time when the instance was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. The description of the ManagementServer instance (2048 characters or less).
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. Server specified ETag for the ManagementServer resource to prevent simultaneous updates from overwiting each other.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Optional. Resource labels to represent user provided metadata. Labels currently defined: 1. migrate_from_go= If set to true, the MS is created in migration ready mode.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The hostname or ip address of the exposed AGM endpoints, used by clients to connect to AGM/RD graphical user interface and APIs.
        /// </summary>
        public readonly Outputs.ManagementURIResponse ManagementUri;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// VPC networks to which the ManagementServer instance is connected. For this version, only a single network is supported.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkConfigResponse> Networks;
        /// <summary>
        /// The OAuth 2.0 client id is required to make API calls to the BackupDR instance API of this ManagementServer. This is the value that should be provided in the ‘aud’ field of the OIDC ID Token (see openid specification https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
        /// </summary>
        public readonly string Oauth2ClientId;
        /// <summary>
        /// The ManagementServer state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The type of the ManagementServer resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The time when the instance was updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The hostnames of the exposed AGM endpoints for both types of user i.e. 1p and 3p, used to connect AGM/RM UI.
        /// </summary>
        public readonly Outputs.WorkforceIdentityBasedManagementURIResponse WorkforceIdentityBasedManagementUri;
        /// <summary>
        /// The OAuth client IDs for both types of user i.e. 1p and 3p.
        /// </summary>
        public readonly Outputs.WorkforceIdentityBasedOAuth2ClientIDResponse WorkforceIdentityBasedOauth2ClientId;

        [OutputConstructor]
        private GetManagementServerResult(
            string createTime,

            string description,

            string etag,

            ImmutableDictionary<string, string> labels,

            Outputs.ManagementURIResponse managementUri,

            string name,

            ImmutableArray<Outputs.NetworkConfigResponse> networks,

            string oauth2ClientId,

            string state,

            string type,

            string updateTime,

            Outputs.WorkforceIdentityBasedManagementURIResponse workforceIdentityBasedManagementUri,

            Outputs.WorkforceIdentityBasedOAuth2ClientIDResponse workforceIdentityBasedOauth2ClientId)
        {
            CreateTime = createTime;
            Description = description;
            Etag = etag;
            Labels = labels;
            ManagementUri = managementUri;
            Name = name;
            Networks = networks;
            Oauth2ClientId = oauth2ClientId;
            State = state;
            Type = type;
            UpdateTime = updateTime;
            WorkforceIdentityBasedManagementUri = workforceIdentityBasedManagementUri;
            WorkforceIdentityBasedOauth2ClientId = workforceIdentityBasedOauth2ClientId;
        }
    }
}
