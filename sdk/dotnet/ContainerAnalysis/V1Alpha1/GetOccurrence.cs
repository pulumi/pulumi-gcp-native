// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ContainerAnalysis.V1Alpha1
{
    public static class GetOccurrence
    {
        /// <summary>
        /// Returns the requested `Occurrence`.
        /// </summary>
        public static Task<GetOccurrenceResult> InvokeAsync(GetOccurrenceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOccurrenceResult>("google-native:containeranalysis/v1alpha1:getOccurrence", args ?? new GetOccurrenceArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the requested `Occurrence`.
        /// </summary>
        public static Output<GetOccurrenceResult> Invoke(GetOccurrenceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOccurrenceResult>("google-native:containeranalysis/v1alpha1:getOccurrence", args ?? new GetOccurrenceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOccurrenceArgs : global::Pulumi.InvokeArgs
    {
        [Input("occurrenceId", required: true)]
        public string OccurrenceId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetOccurrenceArgs()
        {
        }
        public static new GetOccurrenceArgs Empty => new GetOccurrenceArgs();
    }

    public sealed class GetOccurrenceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("occurrenceId", required: true)]
        public Input<string> OccurrenceId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetOccurrenceInvokeArgs()
        {
        }
        public static new GetOccurrenceInvokeArgs Empty => new GetOccurrenceInvokeArgs();
    }


    [OutputType]
    public sealed class GetOccurrenceResult
    {
        /// <summary>
        /// Describes an attestation of an artifact.
        /// </summary>
        public readonly Outputs.AttestationResponse Attestation;
        /// <summary>
        /// Build details for a verifiable build.
        /// </summary>
        public readonly Outputs.BuildDetailsResponse BuildDetails;
        /// <summary>
        /// Describes whether or not a resource passes compliance checks.
        /// </summary>
        public readonly Outputs.ComplianceOccurrenceResponse Compliance;
        /// <summary>
        /// The time this `Occurrence` was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Describes the deployment of an artifact on a runtime.
        /// </summary>
        public readonly Outputs.DeploymentResponse Deployment;
        /// <summary>
        /// Describes how this resource derives from the basis in the associated note.
        /// </summary>
        public readonly Outputs.DerivedResponse DerivedImage;
        /// <summary>
        /// Describes the initial scan status for this resource.
        /// </summary>
        public readonly Outputs.DiscoveredResponse Discovered;
        /// <summary>
        /// This represents a DSSE attestation occurrence
        /// </summary>
        public readonly Outputs.DSSEAttestationOccurrenceResponse DsseAttestation;
        /// <summary>
        /// https://github.com/secure-systems-lab/dsse
        /// </summary>
        public readonly Outputs.EnvelopeResponse Envelope;
        /// <summary>
        /// Describes the installation of a package on the linked resource.
        /// </summary>
        public readonly Outputs.InstallationResponse Installation;
        /// <summary>
        /// This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The name of the `Occurrence` in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests.
        /// </summary>
        public readonly string NoteName;
        /// <summary>
        /// A description of actions that can be taken to remedy the `Note`
        /// </summary>
        public readonly string Remediation;
        /// <summary>
        ///  The resource for which the `Occurrence` applies.
        /// </summary>
        public readonly Outputs.ResourceResponse Resource;
        /// <summary>
        /// The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.
        /// </summary>
        public readonly string ResourceUrl;
        /// <summary>
        /// Describes a specific software bill of materials document.
        /// </summary>
        public readonly Outputs.DocumentOccurrenceResponse Sbom;
        /// <summary>
        /// This represents an SBOM reference occurrence
        /// </summary>
        public readonly Outputs.SBOMReferenceOccurrenceResponse SbomReference;
        /// <summary>
        /// Describes a specific SPDX File.
        /// </summary>
        public readonly Outputs.FileOccurrenceResponse SpdxFile;
        /// <summary>
        /// Describes a specific SPDX Package.
        /// </summary>
        public readonly Outputs.PackageInfoOccurrenceResponse SpdxPackage;
        /// <summary>
        /// Describes a specific relationship between SPDX elements.
        /// </summary>
        public readonly Outputs.RelationshipOccurrenceResponse SpdxRelationship;
        /// <summary>
        /// The time this `Occurrence` was last updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// Describes an upgrade.
        /// </summary>
        public readonly Outputs.UpgradeOccurrenceResponse Upgrade;
        /// <summary>
        /// Details of a security vulnerability note.
        /// </summary>
        public readonly Outputs.VulnerabilityDetailsResponse VulnerabilityDetails;

        [OutputConstructor]
        private GetOccurrenceResult(
            Outputs.AttestationResponse attestation,

            Outputs.BuildDetailsResponse buildDetails,

            Outputs.ComplianceOccurrenceResponse compliance,

            string createTime,

            Outputs.DeploymentResponse deployment,

            Outputs.DerivedResponse derivedImage,

            Outputs.DiscoveredResponse discovered,

            Outputs.DSSEAttestationOccurrenceResponse dsseAttestation,

            Outputs.EnvelopeResponse envelope,

            Outputs.InstallationResponse installation,

            string kind,

            string name,

            string noteName,

            string remediation,

            Outputs.ResourceResponse resource,

            string resourceUrl,

            Outputs.DocumentOccurrenceResponse sbom,

            Outputs.SBOMReferenceOccurrenceResponse sbomReference,

            Outputs.FileOccurrenceResponse spdxFile,

            Outputs.PackageInfoOccurrenceResponse spdxPackage,

            Outputs.RelationshipOccurrenceResponse spdxRelationship,

            string updateTime,

            Outputs.UpgradeOccurrenceResponse upgrade,

            Outputs.VulnerabilityDetailsResponse vulnerabilityDetails)
        {
            Attestation = attestation;
            BuildDetails = buildDetails;
            Compliance = compliance;
            CreateTime = createTime;
            Deployment = deployment;
            DerivedImage = derivedImage;
            Discovered = discovered;
            DsseAttestation = dsseAttestation;
            Envelope = envelope;
            Installation = installation;
            Kind = kind;
            Name = name;
            NoteName = noteName;
            Remediation = remediation;
            Resource = resource;
            ResourceUrl = resourceUrl;
            Sbom = sbom;
            SbomReference = sbomReference;
            SpdxFile = spdxFile;
            SpdxPackage = spdxPackage;
            SpdxRelationship = spdxRelationship;
            UpdateTime = updateTime;
            Upgrade = upgrade;
            VulnerabilityDetails = vulnerabilityDetails;
        }
    }
}
