// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ContainerAnalysis.V1Alpha1.Outputs
{

    /// <summary>
    /// Used by Occurrence to point to where the vulnerability exists and how to fix it.
    /// </summary>
    [OutputType]
    public sealed class VulnerabilityDetailsResponse
    {
        /// <summary>
        /// The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
        /// </summary>
        public readonly double CvssScore;
        /// <summary>
        /// The CVSS v2 score of this vulnerability.
        /// </summary>
        public readonly Outputs.CVSSResponse CvssV2;
        /// <summary>
        /// The CVSS v3 score of this vulnerability.
        /// </summary>
        public readonly Outputs.CVSSResponse CvssV3;
        /// <summary>
        /// CVSS version used to populate cvss_score and severity.
        /// </summary>
        public readonly string CvssVersion;
        /// <summary>
        /// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
        /// </summary>
        public readonly string EffectiveSeverity;
        /// <summary>
        /// The set of affected locations and their fixes (if available) within the associated resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.PackageIssueResponse> PackageIssue;
        /// <summary>
        /// The note provider assigned Severity of the vulnerability.
        /// </summary>
        public readonly string Severity;
        /// <summary>
        /// The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// VexAssessment provides all publisher provided Vex information that is related to this vulnerability for this resource.
        /// </summary>
        public readonly Outputs.VexAssessmentResponse VexAssessment;

        [OutputConstructor]
        private VulnerabilityDetailsResponse(
            double cvssScore,

            Outputs.CVSSResponse cvssV2,

            Outputs.CVSSResponse cvssV3,

            string cvssVersion,

            string effectiveSeverity,

            ImmutableArray<Outputs.PackageIssueResponse> packageIssue,

            string severity,

            string type,

            Outputs.VexAssessmentResponse vexAssessment)
        {
            CvssScore = cvssScore;
            CvssV2 = cvssV2;
            CvssV3 = cvssV3;
            CvssVersion = cvssVersion;
            EffectiveSeverity = effectiveSeverity;
            PackageIssue = packageIssue;
            Severity = severity;
            Type = type;
            VexAssessment = vexAssessment;
        }
    }
}
