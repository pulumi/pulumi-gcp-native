// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ContainerAnalysis.V1Alpha1.Inputs
{

    /// <summary>
    /// Message encapsulating build provenance details.
    /// </summary>
    public sealed class BuildDetailsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
        /// </summary>
        [Input("intotoProvenance")]
        public Input<Inputs.InTotoProvenanceArgs>? IntotoProvenance { get; set; }

        /// <summary>
        /// In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
        /// </summary>
        [Input("intotoStatement")]
        public Input<Inputs.InTotoStatementArgs>? IntotoStatement { get; set; }

        /// <summary>
        /// The actual provenance
        /// </summary>
        [Input("provenance")]
        public Input<Inputs.BuildProvenanceArgs>? Provenance { get; set; }

        /// <summary>
        /// Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
        /// </summary>
        [Input("provenanceBytes")]
        public Input<string>? ProvenanceBytes { get; set; }

        public BuildDetailsArgs()
        {
        }
        public static new BuildDetailsArgs Empty => new BuildDetailsArgs();
    }
}
