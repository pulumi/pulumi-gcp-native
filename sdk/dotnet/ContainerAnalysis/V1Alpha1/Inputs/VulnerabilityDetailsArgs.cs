// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ContainerAnalysis.V1Alpha1.Inputs
{

    /// <summary>
    /// Used by Occurrence to point to where the vulnerability exists and how to fix it.
    /// </summary>
    public sealed class VulnerabilityDetailsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CVSS v2 score of this vulnerability.
        /// </summary>
        [Input("cvssV2")]
        public Input<Inputs.CVSSArgs>? CvssV2 { get; set; }

        /// <summary>
        /// The CVSS v3 score of this vulnerability.
        /// </summary>
        [Input("cvssV3")]
        public Input<Inputs.CVSSArgs>? CvssV3 { get; set; }

        /// <summary>
        /// The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
        /// </summary>
        [Input("effectiveSeverity")]
        public Input<Pulumi.GoogleNative.ContainerAnalysis.V1Alpha1.VulnerabilityDetailsEffectiveSeverity>? EffectiveSeverity { get; set; }

        /// <summary>
        /// Occurrence-specific extra details about the vulnerability.
        /// </summary>
        [Input("extraDetails")]
        public Input<string>? ExtraDetails { get; set; }

        [Input("packageIssue")]
        private InputList<Inputs.PackageIssueArgs>? _packageIssue;

        /// <summary>
        /// The set of affected locations and their fixes (if available) within the associated resource.
        /// </summary>
        public InputList<Inputs.PackageIssueArgs> PackageIssue
        {
            get => _packageIssue ?? (_packageIssue = new InputList<Inputs.PackageIssueArgs>());
            set => _packageIssue = value;
        }

        /// <summary>
        /// The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// VexAssessment provides all publisher provided Vex information that is related to this vulnerability for this resource.
        /// </summary>
        [Input("vexAssessment")]
        public Input<Inputs.VexAssessmentArgs>? VexAssessment { get; set; }

        public VulnerabilityDetailsArgs()
        {
        }
        public static new VulnerabilityDetailsArgs Empty => new VulnerabilityDetailsArgs();
    }
}
