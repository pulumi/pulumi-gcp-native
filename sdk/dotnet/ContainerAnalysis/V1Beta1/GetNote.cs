// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ContainerAnalysis.V1Beta1
{
    public static class GetNote
    {
        /// <summary>
        /// Gets the specified note.
        /// </summary>
        public static Task<GetNoteResult> InvokeAsync(GetNoteArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNoteResult>("google-native:containeranalysis/v1beta1:getNote", args ?? new GetNoteArgs(), options.WithVersion());
    }


    public sealed class GetNoteArgs : Pulumi.InvokeArgs
    {
        [Input("noteId", required: true)]
        public string NoteId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetNoteArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNoteResult
    {
        /// <summary>
        /// A note describing an attestation role.
        /// </summary>
        public readonly Outputs.AuthorityResponse AttestationAuthority;
        /// <summary>
        /// A note describing a base image.
        /// </summary>
        public readonly Outputs.BasisResponse BaseImage;
        /// <summary>
        /// A note describing build provenance for a verifiable build.
        /// </summary>
        public readonly Outputs.BuildResponse Build;
        /// <summary>
        /// The time this note was created. This field can be used as a filter in list requests.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// A note describing something that can be deployed.
        /// </summary>
        public readonly Outputs.DeployableResponse Deployable;
        /// <summary>
        /// A note describing the initial analysis of a resource.
        /// </summary>
        public readonly Outputs.DiscoveryResponse Discovery;
        /// <summary>
        /// Time of expiration for this note. Empty if note does not expire.
        /// </summary>
        public readonly string ExpirationTime;
        /// <summary>
        /// A note describing an in-toto link.
        /// </summary>
        public readonly Outputs.InTotoResponse Intoto;
        /// <summary>
        /// The type of analysis. This field can be used as a filter in list requests.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// A detailed description of this note.
        /// </summary>
        public readonly string LongDescription;
        /// <summary>
        /// The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A note describing a package hosted by various package managers.
        /// </summary>
        public readonly Outputs.PackageResponse Package;
        /// <summary>
        /// Other notes related to this note.
        /// </summary>
        public readonly ImmutableArray<string> RelatedNoteNames;
        /// <summary>
        /// URLs associated with this note.
        /// </summary>
        public readonly ImmutableArray<Outputs.RelatedUrlResponse> RelatedUrl;
        /// <summary>
        /// A one sentence description of this note.
        /// </summary>
        public readonly string ShortDescription;
        /// <summary>
        /// The time this note was last updated. This field can be used as a filter in list requests.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// A note describing a package vulnerability.
        /// </summary>
        public readonly Outputs.VulnerabilityResponse Vulnerability;

        [OutputConstructor]
        private GetNoteResult(
            Outputs.AuthorityResponse attestationAuthority,

            Outputs.BasisResponse baseImage,

            Outputs.BuildResponse build,

            string createTime,

            Outputs.DeployableResponse deployable,

            Outputs.DiscoveryResponse discovery,

            string expirationTime,

            Outputs.InTotoResponse intoto,

            string kind,

            string longDescription,

            string name,

            Outputs.PackageResponse package,

            ImmutableArray<string> relatedNoteNames,

            ImmutableArray<Outputs.RelatedUrlResponse> relatedUrl,

            string shortDescription,

            string updateTime,

            Outputs.VulnerabilityResponse vulnerability)
        {
            AttestationAuthority = attestationAuthority;
            BaseImage = baseImage;
            Build = build;
            CreateTime = createTime;
            Deployable = deployable;
            Discovery = discovery;
            ExpirationTime = expirationTime;
            Intoto = intoto;
            Kind = kind;
            LongDescription = longDescription;
            Name = name;
            Package = package;
            RelatedNoteNames = relatedNoteNames;
            RelatedUrl = relatedUrl;
            ShortDescription = shortDescription;
            UpdateTime = updateTime;
            Vulnerability = vulnerability;
        }
    }
}
