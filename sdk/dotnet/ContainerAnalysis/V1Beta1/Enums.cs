// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.ContainerAnalysis.V1Beta1
{
    /// <summary>
    /// The alias kind.
    /// </summary>
    [EnumType]
    public readonly struct AliasContextKind : IEquatable<AliasContextKind>
    {
        private readonly string _value;

        private AliasContextKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown.
        /// </summary>
        public static AliasContextKind KindUnspecified { get; } = new AliasContextKind("KIND_UNSPECIFIED");
        /// <summary>
        /// Git tag.
        /// </summary>
        public static AliasContextKind Fixed { get; } = new AliasContextKind("FIXED");
        /// <summary>
        /// Git branch.
        /// </summary>
        public static AliasContextKind Movable { get; } = new AliasContextKind("MOVABLE");
        /// <summary>
        /// Used to specify non-standard aliases. For example, if a Git repo has a ref named "refs/foo/bar".
        /// </summary>
        public static AliasContextKind Other { get; } = new AliasContextKind("OTHER");

        public static bool operator ==(AliasContextKind left, AliasContextKind right) => left.Equals(right);
        public static bool operator !=(AliasContextKind left, AliasContextKind right) => !left.Equals(right);

        public static explicit operator string(AliasContextKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AliasContextKind other && Equals(other);
        public bool Equals(AliasContextKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the key, either stored in `public_key` or referenced in `key_id`.
    /// </summary>
    [EnumType]
    public readonly struct BuildSignatureKeyType : IEquatable<BuildSignatureKeyType>
    {
        private readonly string _value;

        private BuildSignatureKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// `KeyType` is not set.
        /// </summary>
        public static BuildSignatureKeyType KeyTypeUnspecified { get; } = new BuildSignatureKeyType("KEY_TYPE_UNSPECIFIED");
        /// <summary>
        /// `PGP ASCII Armored` public key.
        /// </summary>
        public static BuildSignatureKeyType PgpAsciiArmored { get; } = new BuildSignatureKeyType("PGP_ASCII_ARMORED");
        /// <summary>
        /// `PKIX PEM` public key.
        /// </summary>
        public static BuildSignatureKeyType PkixPem { get; } = new BuildSignatureKeyType("PKIX_PEM");

        public static bool operator ==(BuildSignatureKeyType left, BuildSignatureKeyType right) => left.Equals(right);
        public static bool operator !=(BuildSignatureKeyType left, BuildSignatureKeyType right) => !left.Equals(right);

        public static explicit operator string(BuildSignatureKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BuildSignatureKeyType other && Equals(other);
        public bool Equals(BuildSignatureKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CVSSv3AttackComplexity : IEquatable<CVSSv3AttackComplexity>
    {
        private readonly string _value;

        private CVSSv3AttackComplexity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CVSSv3AttackComplexity AttackComplexityUnspecified { get; } = new CVSSv3AttackComplexity("ATTACK_COMPLEXITY_UNSPECIFIED");
        public static CVSSv3AttackComplexity AttackComplexityLow { get; } = new CVSSv3AttackComplexity("ATTACK_COMPLEXITY_LOW");
        public static CVSSv3AttackComplexity AttackComplexityHigh { get; } = new CVSSv3AttackComplexity("ATTACK_COMPLEXITY_HIGH");

        public static bool operator ==(CVSSv3AttackComplexity left, CVSSv3AttackComplexity right) => left.Equals(right);
        public static bool operator !=(CVSSv3AttackComplexity left, CVSSv3AttackComplexity right) => !left.Equals(right);

        public static explicit operator string(CVSSv3AttackComplexity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CVSSv3AttackComplexity other && Equals(other);
        public bool Equals(CVSSv3AttackComplexity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
    /// </summary>
    [EnumType]
    public readonly struct CVSSv3AttackVector : IEquatable<CVSSv3AttackVector>
    {
        private readonly string _value;

        private CVSSv3AttackVector(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CVSSv3AttackVector AttackVectorUnspecified { get; } = new CVSSv3AttackVector("ATTACK_VECTOR_UNSPECIFIED");
        public static CVSSv3AttackVector AttackVectorNetwork { get; } = new CVSSv3AttackVector("ATTACK_VECTOR_NETWORK");
        public static CVSSv3AttackVector AttackVectorAdjacent { get; } = new CVSSv3AttackVector("ATTACK_VECTOR_ADJACENT");
        public static CVSSv3AttackVector AttackVectorLocal { get; } = new CVSSv3AttackVector("ATTACK_VECTOR_LOCAL");
        public static CVSSv3AttackVector AttackVectorPhysical { get; } = new CVSSv3AttackVector("ATTACK_VECTOR_PHYSICAL");

        public static bool operator ==(CVSSv3AttackVector left, CVSSv3AttackVector right) => left.Equals(right);
        public static bool operator !=(CVSSv3AttackVector left, CVSSv3AttackVector right) => !left.Equals(right);

        public static explicit operator string(CVSSv3AttackVector value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CVSSv3AttackVector other && Equals(other);
        public bool Equals(CVSSv3AttackVector other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CVSSv3AvailabilityImpact : IEquatable<CVSSv3AvailabilityImpact>
    {
        private readonly string _value;

        private CVSSv3AvailabilityImpact(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CVSSv3AvailabilityImpact ImpactUnspecified { get; } = new CVSSv3AvailabilityImpact("IMPACT_UNSPECIFIED");
        public static CVSSv3AvailabilityImpact ImpactHigh { get; } = new CVSSv3AvailabilityImpact("IMPACT_HIGH");
        public static CVSSv3AvailabilityImpact ImpactLow { get; } = new CVSSv3AvailabilityImpact("IMPACT_LOW");
        public static CVSSv3AvailabilityImpact ImpactNone { get; } = new CVSSv3AvailabilityImpact("IMPACT_NONE");

        public static bool operator ==(CVSSv3AvailabilityImpact left, CVSSv3AvailabilityImpact right) => left.Equals(right);
        public static bool operator !=(CVSSv3AvailabilityImpact left, CVSSv3AvailabilityImpact right) => !left.Equals(right);

        public static explicit operator string(CVSSv3AvailabilityImpact value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CVSSv3AvailabilityImpact other && Equals(other);
        public bool Equals(CVSSv3AvailabilityImpact other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CVSSv3ConfidentialityImpact : IEquatable<CVSSv3ConfidentialityImpact>
    {
        private readonly string _value;

        private CVSSv3ConfidentialityImpact(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CVSSv3ConfidentialityImpact ImpactUnspecified { get; } = new CVSSv3ConfidentialityImpact("IMPACT_UNSPECIFIED");
        public static CVSSv3ConfidentialityImpact ImpactHigh { get; } = new CVSSv3ConfidentialityImpact("IMPACT_HIGH");
        public static CVSSv3ConfidentialityImpact ImpactLow { get; } = new CVSSv3ConfidentialityImpact("IMPACT_LOW");
        public static CVSSv3ConfidentialityImpact ImpactNone { get; } = new CVSSv3ConfidentialityImpact("IMPACT_NONE");

        public static bool operator ==(CVSSv3ConfidentialityImpact left, CVSSv3ConfidentialityImpact right) => left.Equals(right);
        public static bool operator !=(CVSSv3ConfidentialityImpact left, CVSSv3ConfidentialityImpact right) => !left.Equals(right);

        public static explicit operator string(CVSSv3ConfidentialityImpact value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CVSSv3ConfidentialityImpact other && Equals(other);
        public bool Equals(CVSSv3ConfidentialityImpact other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CVSSv3IntegrityImpact : IEquatable<CVSSv3IntegrityImpact>
    {
        private readonly string _value;

        private CVSSv3IntegrityImpact(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CVSSv3IntegrityImpact ImpactUnspecified { get; } = new CVSSv3IntegrityImpact("IMPACT_UNSPECIFIED");
        public static CVSSv3IntegrityImpact ImpactHigh { get; } = new CVSSv3IntegrityImpact("IMPACT_HIGH");
        public static CVSSv3IntegrityImpact ImpactLow { get; } = new CVSSv3IntegrityImpact("IMPACT_LOW");
        public static CVSSv3IntegrityImpact ImpactNone { get; } = new CVSSv3IntegrityImpact("IMPACT_NONE");

        public static bool operator ==(CVSSv3IntegrityImpact left, CVSSv3IntegrityImpact right) => left.Equals(right);
        public static bool operator !=(CVSSv3IntegrityImpact left, CVSSv3IntegrityImpact right) => !left.Equals(right);

        public static explicit operator string(CVSSv3IntegrityImpact value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CVSSv3IntegrityImpact other && Equals(other);
        public bool Equals(CVSSv3IntegrityImpact other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CVSSv3PrivilegesRequired : IEquatable<CVSSv3PrivilegesRequired>
    {
        private readonly string _value;

        private CVSSv3PrivilegesRequired(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CVSSv3PrivilegesRequired PrivilegesRequiredUnspecified { get; } = new CVSSv3PrivilegesRequired("PRIVILEGES_REQUIRED_UNSPECIFIED");
        public static CVSSv3PrivilegesRequired PrivilegesRequiredNone { get; } = new CVSSv3PrivilegesRequired("PRIVILEGES_REQUIRED_NONE");
        public static CVSSv3PrivilegesRequired PrivilegesRequiredLow { get; } = new CVSSv3PrivilegesRequired("PRIVILEGES_REQUIRED_LOW");
        public static CVSSv3PrivilegesRequired PrivilegesRequiredHigh { get; } = new CVSSv3PrivilegesRequired("PRIVILEGES_REQUIRED_HIGH");

        public static bool operator ==(CVSSv3PrivilegesRequired left, CVSSv3PrivilegesRequired right) => left.Equals(right);
        public static bool operator !=(CVSSv3PrivilegesRequired left, CVSSv3PrivilegesRequired right) => !left.Equals(right);

        public static explicit operator string(CVSSv3PrivilegesRequired value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CVSSv3PrivilegesRequired other && Equals(other);
        public bool Equals(CVSSv3PrivilegesRequired other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CVSSv3Scope : IEquatable<CVSSv3Scope>
    {
        private readonly string _value;

        private CVSSv3Scope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CVSSv3Scope ScopeUnspecified { get; } = new CVSSv3Scope("SCOPE_UNSPECIFIED");
        public static CVSSv3Scope ScopeUnchanged { get; } = new CVSSv3Scope("SCOPE_UNCHANGED");
        public static CVSSv3Scope ScopeChanged { get; } = new CVSSv3Scope("SCOPE_CHANGED");

        public static bool operator ==(CVSSv3Scope left, CVSSv3Scope right) => left.Equals(right);
        public static bool operator !=(CVSSv3Scope left, CVSSv3Scope right) => !left.Equals(right);

        public static explicit operator string(CVSSv3Scope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CVSSv3Scope other && Equals(other);
        public bool Equals(CVSSv3Scope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CVSSv3UserInteraction : IEquatable<CVSSv3UserInteraction>
    {
        private readonly string _value;

        private CVSSv3UserInteraction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CVSSv3UserInteraction UserInteractionUnspecified { get; } = new CVSSv3UserInteraction("USER_INTERACTION_UNSPECIFIED");
        public static CVSSv3UserInteraction UserInteractionNone { get; } = new CVSSv3UserInteraction("USER_INTERACTION_NONE");
        public static CVSSv3UserInteraction UserInteractionRequired { get; } = new CVSSv3UserInteraction("USER_INTERACTION_REQUIRED");

        public static bool operator ==(CVSSv3UserInteraction left, CVSSv3UserInteraction right) => left.Equals(right);
        public static bool operator !=(CVSSv3UserInteraction left, CVSSv3UserInteraction right) => !left.Equals(right);

        public static explicit operator string(CVSSv3UserInteraction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CVSSv3UserInteraction other && Equals(other);
        public bool Equals(CVSSv3UserInteraction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Platform hosting this deployment.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentPlatform : IEquatable<DeploymentPlatform>
    {
        private readonly string _value;

        private DeploymentPlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown.
        /// </summary>
        public static DeploymentPlatform PlatformUnspecified { get; } = new DeploymentPlatform("PLATFORM_UNSPECIFIED");
        /// <summary>
        /// Google Container Engine.
        /// </summary>
        public static DeploymentPlatform Gke { get; } = new DeploymentPlatform("GKE");
        /// <summary>
        /// Google App Engine: Flexible Environment.
        /// </summary>
        public static DeploymentPlatform Flex { get; } = new DeploymentPlatform("FLEX");
        /// <summary>
        /// Custom user-defined platform.
        /// </summary>
        public static DeploymentPlatform Custom { get; } = new DeploymentPlatform("CUSTOM");

        public static bool operator ==(DeploymentPlatform left, DeploymentPlatform right) => left.Equals(right);
        public static bool operator !=(DeploymentPlatform left, DeploymentPlatform right) => !left.Equals(right);

        public static explicit operator string(DeploymentPlatform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentPlatform other && Equals(other);
        public bool Equals(DeploymentPlatform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of discovery for the resource.
    /// </summary>
    [EnumType]
    public readonly struct DiscoveredAnalysisStatus : IEquatable<DiscoveredAnalysisStatus>
    {
        private readonly string _value;

        private DiscoveredAnalysisStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown.
        /// </summary>
        public static DiscoveredAnalysisStatus AnalysisStatusUnspecified { get; } = new DiscoveredAnalysisStatus("ANALYSIS_STATUS_UNSPECIFIED");
        /// <summary>
        /// Resource is known but no action has been taken yet.
        /// </summary>
        public static DiscoveredAnalysisStatus Pending { get; } = new DiscoveredAnalysisStatus("PENDING");
        /// <summary>
        /// Resource is being analyzed.
        /// </summary>
        public static DiscoveredAnalysisStatus Scanning { get; } = new DiscoveredAnalysisStatus("SCANNING");
        /// <summary>
        /// Analysis has finished successfully.
        /// </summary>
        public static DiscoveredAnalysisStatus FinishedSuccess { get; } = new DiscoveredAnalysisStatus("FINISHED_SUCCESS");
        /// <summary>
        /// Analysis has finished unsuccessfully, the analysis itself is in a bad state.
        /// </summary>
        public static DiscoveredAnalysisStatus FinishedFailed { get; } = new DiscoveredAnalysisStatus("FINISHED_FAILED");
        /// <summary>
        /// The resource is known not to be supported
        /// </summary>
        public static DiscoveredAnalysisStatus FinishedUnsupported { get; } = new DiscoveredAnalysisStatus("FINISHED_UNSUPPORTED");

        public static bool operator ==(DiscoveredAnalysisStatus left, DiscoveredAnalysisStatus right) => left.Equals(right);
        public static bool operator !=(DiscoveredAnalysisStatus left, DiscoveredAnalysisStatus right) => !left.Equals(right);

        public static explicit operator string(DiscoveredAnalysisStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiscoveredAnalysisStatus other && Equals(other);
        public bool Equals(DiscoveredAnalysisStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the resource is continuously analyzed.
    /// </summary>
    [EnumType]
    public readonly struct DiscoveredContinuousAnalysis : IEquatable<DiscoveredContinuousAnalysis>
    {
        private readonly string _value;

        private DiscoveredContinuousAnalysis(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown.
        /// </summary>
        public static DiscoveredContinuousAnalysis ContinuousAnalysisUnspecified { get; } = new DiscoveredContinuousAnalysis("CONTINUOUS_ANALYSIS_UNSPECIFIED");
        /// <summary>
        /// The resource is continuously analyzed.
        /// </summary>
        public static DiscoveredContinuousAnalysis Active { get; } = new DiscoveredContinuousAnalysis("ACTIVE");
        /// <summary>
        /// The resource is ignored for continuous analysis.
        /// </summary>
        public static DiscoveredContinuousAnalysis Inactive { get; } = new DiscoveredContinuousAnalysis("INACTIVE");

        public static bool operator ==(DiscoveredContinuousAnalysis left, DiscoveredContinuousAnalysis right) => left.Equals(right);
        public static bool operator !=(DiscoveredContinuousAnalysis left, DiscoveredContinuousAnalysis right) => !left.Equals(right);

        public static explicit operator string(DiscoveredContinuousAnalysis value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiscoveredContinuousAnalysis other && Equals(other);
        public bool Equals(DiscoveredContinuousAnalysis other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Immutable. The kind of analysis that is handled by this discovery.
    /// </summary>
    [EnumType]
    public readonly struct DiscoveryAnalysisKind : IEquatable<DiscoveryAnalysisKind>
    {
        private readonly string _value;

        private DiscoveryAnalysisKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value. This value is unused.
        /// </summary>
        public static DiscoveryAnalysisKind NoteKindUnspecified { get; } = new DiscoveryAnalysisKind("NOTE_KIND_UNSPECIFIED");
        /// <summary>
        /// The note and occurrence represent a package vulnerability.
        /// </summary>
        public static DiscoveryAnalysisKind Vulnerability { get; } = new DiscoveryAnalysisKind("VULNERABILITY");
        /// <summary>
        /// The note and occurrence assert build provenance.
        /// </summary>
        public static DiscoveryAnalysisKind Build { get; } = new DiscoveryAnalysisKind("BUILD");
        /// <summary>
        /// This represents an image basis relationship.
        /// </summary>
        public static DiscoveryAnalysisKind Image { get; } = new DiscoveryAnalysisKind("IMAGE");
        /// <summary>
        /// This represents a package installed via a package manager.
        /// </summary>
        public static DiscoveryAnalysisKind Package { get; } = new DiscoveryAnalysisKind("PACKAGE");
        /// <summary>
        /// The note and occurrence track deployment events.
        /// </summary>
        public static DiscoveryAnalysisKind Deployment { get; } = new DiscoveryAnalysisKind("DEPLOYMENT");
        /// <summary>
        /// The note and occurrence track the initial discovery status of a resource.
        /// </summary>
        public static DiscoveryAnalysisKind Discovery { get; } = new DiscoveryAnalysisKind("DISCOVERY");
        /// <summary>
        /// This represents a logical "role" that can attest to artifacts.
        /// </summary>
        public static DiscoveryAnalysisKind Attestation { get; } = new DiscoveryAnalysisKind("ATTESTATION");
        /// <summary>
        /// This represents an in-toto link.
        /// </summary>
        public static DiscoveryAnalysisKind Intoto { get; } = new DiscoveryAnalysisKind("INTOTO");

        public static bool operator ==(DiscoveryAnalysisKind left, DiscoveryAnalysisKind right) => left.Equals(right);
        public static bool operator !=(DiscoveryAnalysisKind left, DiscoveryAnalysisKind right) => !left.Equals(right);

        public static explicit operator string(DiscoveryAnalysisKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiscoveryAnalysisKind other && Equals(other);
        public bool Equals(DiscoveryAnalysisKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The CPU architecture for which packages in this distribution channel were built.
    /// </summary>
    [EnumType]
    public readonly struct DistributionArchitecture : IEquatable<DistributionArchitecture>
    {
        private readonly string _value;

        private DistributionArchitecture(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown architecture.
        /// </summary>
        public static DistributionArchitecture ArchitectureUnspecified { get; } = new DistributionArchitecture("ARCHITECTURE_UNSPECIFIED");
        /// <summary>
        /// X86 architecture.
        /// </summary>
        public static DistributionArchitecture X86 { get; } = new DistributionArchitecture("X86");
        /// <summary>
        /// X64 architecture.
        /// </summary>
        public static DistributionArchitecture X64 { get; } = new DistributionArchitecture("X64");

        public static bool operator ==(DistributionArchitecture left, DistributionArchitecture right) => left.Equals(right);
        public static bool operator !=(DistributionArchitecture left, DistributionArchitecture right) => !left.Equals(right);

        public static explicit operator string(DistributionArchitecture value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DistributionArchitecture other && Equals(other);
        public bool Equals(DistributionArchitecture other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
    /// </summary>
    [EnumType]
    public readonly struct GenericSignedAttestationContentType : IEquatable<GenericSignedAttestationContentType>
    {
        private readonly string _value;

        private GenericSignedAttestationContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// `ContentType` is not set.
        /// </summary>
        public static GenericSignedAttestationContentType ContentTypeUnspecified { get; } = new GenericSignedAttestationContentType("CONTENT_TYPE_UNSPECIFIED");
        /// <summary>
        /// Atomic format attestation signature. See https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md The payload extracted in `plaintext` is a JSON blob conforming to the linked schema.
        /// </summary>
        public static GenericSignedAttestationContentType SimpleSigningJson { get; } = new GenericSignedAttestationContentType("SIMPLE_SIGNING_JSON");

        public static bool operator ==(GenericSignedAttestationContentType left, GenericSignedAttestationContentType right) => left.Equals(right);
        public static bool operator !=(GenericSignedAttestationContentType left, GenericSignedAttestationContentType right) => !left.Equals(right);

        public static explicit operator string(GenericSignedAttestationContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GenericSignedAttestationContentType other && Equals(other);
        public bool Equals(GenericSignedAttestationContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
    /// </summary>
    [EnumType]
    public readonly struct GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity : IEquatable<GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity>
    {
        private readonly string _value;

        private GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown.
        /// </summary>
        public static GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity SeverityUnspecified { get; } = new GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("SEVERITY_UNSPECIFIED");
        /// <summary>
        /// Minimal severity.
        /// </summary>
        public static GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity Minimal { get; } = new GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("MINIMAL");
        /// <summary>
        /// Low severity.
        /// </summary>
        public static GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity Low { get; } = new GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("LOW");
        /// <summary>
        /// Medium severity.
        /// </summary>
        public static GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity Medium { get; } = new GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("MEDIUM");
        /// <summary>
        /// High severity.
        /// </summary>
        public static GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity High { get; } = new GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("HIGH");
        /// <summary>
        /// Critical severity.
        /// </summary>
        public static GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity Critical { get; } = new GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity("CRITICAL");

        public static bool operator ==(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity left, GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity right) => left.Equals(right);
        public static bool operator !=(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity left, GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity right) => !left.Equals(right);

        public static explicit operator string(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity other && Equals(other);
        public bool Equals(GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The recovered Dockerfile directive used to construct this layer.
    /// </summary>
    [EnumType]
    public readonly struct LayerDirective : IEquatable<LayerDirective>
    {
        private readonly string _value;

        private LayerDirective(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value for unsupported/missing directive.
        /// </summary>
        public static LayerDirective DirectiveUnspecified { get; } = new LayerDirective("DIRECTIVE_UNSPECIFIED");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Maintainer { get; } = new LayerDirective("MAINTAINER");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Run { get; } = new LayerDirective("RUN");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Cmd { get; } = new LayerDirective("CMD");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Label { get; } = new LayerDirective("LABEL");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Expose { get; } = new LayerDirective("EXPOSE");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Env { get; } = new LayerDirective("ENV");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Add { get; } = new LayerDirective("ADD");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Copy { get; } = new LayerDirective("COPY");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Entrypoint { get; } = new LayerDirective("ENTRYPOINT");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Volume { get; } = new LayerDirective("VOLUME");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective User { get; } = new LayerDirective("USER");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Workdir { get; } = new LayerDirective("WORKDIR");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Arg { get; } = new LayerDirective("ARG");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Onbuild { get; } = new LayerDirective("ONBUILD");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Stopsignal { get; } = new LayerDirective("STOPSIGNAL");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Healthcheck { get; } = new LayerDirective("HEALTHCHECK");
        /// <summary>
        /// https://docs.docker.com/engine/reference/builder/
        /// </summary>
        public static LayerDirective Shell { get; } = new LayerDirective("SHELL");

        public static bool operator ==(LayerDirective left, LayerDirective right) => left.Equals(right);
        public static bool operator !=(LayerDirective left, LayerDirective right) => !left.Equals(right);

        public static explicit operator string(LayerDirective value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LayerDirective other && Equals(other);
        public bool Equals(LayerDirective other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
    /// </summary>
    [EnumType]
    public readonly struct PgpSignedAttestationContentType : IEquatable<PgpSignedAttestationContentType>
    {
        private readonly string _value;

        private PgpSignedAttestationContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// `ContentType` is not set.
        /// </summary>
        public static PgpSignedAttestationContentType ContentTypeUnspecified { get; } = new PgpSignedAttestationContentType("CONTENT_TYPE_UNSPECIFIED");
        /// <summary>
        /// Atomic format attestation signature. See https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md The payload extracted from `signature` is a JSON blob conforming to the linked schema.
        /// </summary>
        public static PgpSignedAttestationContentType SimpleSigningJson { get; } = new PgpSignedAttestationContentType("SIMPLE_SIGNING_JSON");

        public static bool operator ==(PgpSignedAttestationContentType left, PgpSignedAttestationContentType right) => left.Equals(right);
        public static bool operator !=(PgpSignedAttestationContentType left, PgpSignedAttestationContentType right) => !left.Equals(right);

        public static explicit operator string(PgpSignedAttestationContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PgpSignedAttestationContentType other && Equals(other);
        public bool Equals(PgpSignedAttestationContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
    /// </summary>
    [EnumType]
    public readonly struct VersionKind : IEquatable<VersionKind>
    {
        private readonly string _value;

        private VersionKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown.
        /// </summary>
        public static VersionKind VersionKindUnspecified { get; } = new VersionKind("VERSION_KIND_UNSPECIFIED");
        /// <summary>
        /// A standard package version.
        /// </summary>
        public static VersionKind Normal { get; } = new VersionKind("NORMAL");
        /// <summary>
        /// A special version representing negative infinity.
        /// </summary>
        public static VersionKind Minimum { get; } = new VersionKind("MINIMUM");
        /// <summary>
        /// A special version representing positive infinity.
        /// </summary>
        public static VersionKind Maximum { get; } = new VersionKind("MAXIMUM");

        public static bool operator ==(VersionKind left, VersionKind right) => left.Equals(right);
        public static bool operator !=(VersionKind left, VersionKind right) => !left.Equals(right);

        public static explicit operator string(VersionKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VersionKind other && Equals(other);
        public bool Equals(VersionKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Note provider assigned impact of the vulnerability.
    /// </summary>
    [EnumType]
    public readonly struct VulnerabilitySeverity : IEquatable<VulnerabilitySeverity>
    {
        private readonly string _value;

        private VulnerabilitySeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown.
        /// </summary>
        public static VulnerabilitySeverity SeverityUnspecified { get; } = new VulnerabilitySeverity("SEVERITY_UNSPECIFIED");
        /// <summary>
        /// Minimal severity.
        /// </summary>
        public static VulnerabilitySeverity Minimal { get; } = new VulnerabilitySeverity("MINIMAL");
        /// <summary>
        /// Low severity.
        /// </summary>
        public static VulnerabilitySeverity Low { get; } = new VulnerabilitySeverity("LOW");
        /// <summary>
        /// Medium severity.
        /// </summary>
        public static VulnerabilitySeverity Medium { get; } = new VulnerabilitySeverity("MEDIUM");
        /// <summary>
        /// High severity.
        /// </summary>
        public static VulnerabilitySeverity High { get; } = new VulnerabilitySeverity("HIGH");
        /// <summary>
        /// Critical severity.
        /// </summary>
        public static VulnerabilitySeverity Critical { get; } = new VulnerabilitySeverity("CRITICAL");

        public static bool operator ==(VulnerabilitySeverity left, VulnerabilitySeverity right) => left.Equals(right);
        public static bool operator !=(VulnerabilitySeverity left, VulnerabilitySeverity right) => !left.Equals(right);

        public static explicit operator string(VulnerabilitySeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VulnerabilitySeverity other && Equals(other);
        public bool Equals(VulnerabilitySeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
