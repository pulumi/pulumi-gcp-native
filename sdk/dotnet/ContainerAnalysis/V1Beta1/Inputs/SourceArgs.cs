// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ContainerAnalysis.V1Beta1.Inputs
{

    /// <summary>
    /// Source describes the location of the source used for the build.
    /// </summary>
    public sealed class SourceArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalContexts")]
        private InputList<Inputs.SourceContextArgs>? _additionalContexts;

        /// <summary>
        /// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
        /// </summary>
        public InputList<Inputs.SourceContextArgs> AdditionalContexts
        {
            get => _additionalContexts ?? (_additionalContexts = new InputList<Inputs.SourceContextArgs>());
            set => _additionalContexts = value;
        }

        /// <summary>
        /// If provided, the input binary artifacts for the build came from this location.
        /// </summary>
        [Input("artifactStorageSourceUri")]
        public Input<string>? ArtifactStorageSourceUri { get; set; }

        /// <summary>
        /// If provided, the source code used for the build came from this location.
        /// </summary>
        [Input("context")]
        public Input<Inputs.SourceContextArgs>? Context { get; set; }

        [Input("fileHashes")]
        private InputMap<Inputs.FileHashesArgs>? _fileHashes;

        /// <summary>
        /// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
        /// </summary>
        public InputMap<Inputs.FileHashesArgs> FileHashes
        {
            get => _fileHashes ?? (_fileHashes = new InputMap<Inputs.FileHashesArgs>());
            set => _fileHashes = value;
        }

        public SourceArgs()
        {
        }
        public static new SourceArgs Empty => new SourceArgs();
    }
}
