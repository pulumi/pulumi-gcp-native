// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.ContainerAnalysis.V1Beta1.Outputs
{

    /// <summary>
    /// Vulnerability provides metadata about a security vulnerability in a Note.
    /// </summary>
    [OutputType]
    public sealed class VulnerabilityResponse
    {
        /// <summary>
        /// The CVSS score for this vulnerability.
        /// </summary>
        public readonly double CvssScore;
        /// <summary>
        /// The full description of the CVSS for version 2.
        /// </summary>
        public readonly Outputs.CVSSResponse CvssV2;
        /// <summary>
        /// The full description of the CVSS for version 3.
        /// </summary>
        public readonly Outputs.CVSSv3Response CvssV3;
        /// <summary>
        /// CVSS version used to populate cvss_score and severity.
        /// </summary>
        public readonly string CvssVersion;
        /// <summary>
        /// A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
        /// </summary>
        public readonly ImmutableArray<string> Cwe;
        /// <summary>
        /// All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
        /// </summary>
        public readonly ImmutableArray<Outputs.DetailResponse> Details;
        /// <summary>
        /// Note provider assigned impact of the vulnerability.
        /// </summary>
        public readonly string Severity;
        /// <summary>
        /// The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
        /// </summary>
        public readonly string SourceUpdateTime;
        /// <summary>
        /// Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
        /// </summary>
        public readonly ImmutableArray<Outputs.WindowsDetailResponse> WindowsDetails;

        [OutputConstructor]
        private VulnerabilityResponse(
            double cvssScore,

            Outputs.CVSSResponse cvssV2,

            Outputs.CVSSv3Response cvssV3,

            string cvssVersion,

            ImmutableArray<string> cwe,

            ImmutableArray<Outputs.DetailResponse> details,

            string severity,

            string sourceUpdateTime,

            ImmutableArray<Outputs.WindowsDetailResponse> windowsDetails)
        {
            CvssScore = cvssScore;
            CvssV2 = cvssV2;
            CvssV3 = cvssV3;
            CvssVersion = cvssVersion;
            Cwe = cwe;
            Details = details;
            Severity = severity;
            SourceUpdateTime = sourceUpdateTime;
            WindowsDetails = windowsDetails;
        }
    }
}
