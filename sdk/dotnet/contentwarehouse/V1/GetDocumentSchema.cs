// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.contentwarehouse.V1
{
    public static class GetDocumentSchema
    {
        /// <summary>
        /// Gets a document schema. Returns NOT_FOUND if the document schema does not exist.
        /// </summary>
        public static Task<GetDocumentSchemaResult> InvokeAsync(GetDocumentSchemaArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDocumentSchemaResult>("google-native:contentwarehouse/v1:getDocumentSchema", args ?? new GetDocumentSchemaArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a document schema. Returns NOT_FOUND if the document schema does not exist.
        /// </summary>
        public static Output<GetDocumentSchemaResult> Invoke(GetDocumentSchemaInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDocumentSchemaResult>("google-native:contentwarehouse/v1:getDocumentSchema", args ?? new GetDocumentSchemaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDocumentSchemaArgs : global::Pulumi.InvokeArgs
    {
        [Input("documentSchemaId", required: true)]
        public string DocumentSchemaId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDocumentSchemaArgs()
        {
        }
        public static new GetDocumentSchemaArgs Empty => new GetDocumentSchemaArgs();
    }

    public sealed class GetDocumentSchemaInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("documentSchemaId", required: true)]
        public Input<string> DocumentSchemaId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDocumentSchemaInvokeArgs()
        {
        }
        public static new GetDocumentSchemaInvokeArgs Empty => new GetDocumentSchemaInvokeArgs();
    }


    [OutputType]
    public sealed class GetDocumentSchemaResult
    {
        /// <summary>
        /// The time when the document schema is created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Schema description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Name of the schema given by the user. Must be unique per customer.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Document Type, true refers the document is a folder, otherwise it is a typical document.
        /// </summary>
        public readonly bool DocumentIsFolder;
        /// <summary>
        /// The resource name of the document schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}. The name is ignored when creating a document schema.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Document details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudContentwarehouseV1PropertyDefinitionResponse> PropertyDefinitions;
        /// <summary>
        /// The time when the document schema is last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetDocumentSchemaResult(
            string createTime,

            string description,

            string displayName,

            bool documentIsFolder,

            string name,

            ImmutableArray<Outputs.GoogleCloudContentwarehouseV1PropertyDefinitionResponse> propertyDefinitions,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            DocumentIsFolder = documentIsFolder;
            Name = name;
            PropertyDefinitions = propertyDefinitions;
            UpdateTime = updateTime;
        }
    }
}
