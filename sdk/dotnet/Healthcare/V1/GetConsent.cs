// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Healthcare.V1
{
    public static class GetConsent
    {
        /// <summary>
        /// Gets the specified revision of a Consent, or the latest revision if `revision_id` is not specified in the resource name.
        /// </summary>
        public static Task<GetConsentResult> InvokeAsync(GetConsentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConsentResult>("google-native:healthcare/v1:getConsent", args ?? new GetConsentArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified revision of a Consent, or the latest revision if `revision_id` is not specified in the resource name.
        /// </summary>
        public static Output<GetConsentResult> Invoke(GetConsentInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConsentResult>("google-native:healthcare/v1:getConsent", args ?? new GetConsentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConsentArgs : global::Pulumi.InvokeArgs
    {
        [Input("consentId", required: true)]
        public string ConsentId { get; set; } = null!;

        [Input("consentStoreId", required: true)]
        public string ConsentStoreId { get; set; } = null!;

        [Input("datasetId", required: true)]
        public string DatasetId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetConsentArgs()
        {
        }
        public static new GetConsentArgs Empty => new GetConsentArgs();
    }

    public sealed class GetConsentInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("consentId", required: true)]
        public Input<string> ConsentId { get; set; } = null!;

        [Input("consentStoreId", required: true)]
        public Input<string> ConsentStoreId { get; set; } = null!;

        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetConsentInvokeArgs()
        {
        }
        public static new GetConsentInvokeArgs Empty => new GetConsentInvokeArgs();
    }


    [OutputType]
    public sealed class GetConsentResult
    {
        /// <summary>
        /// The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
        /// </summary>
        public readonly string ConsentArtifact;
        /// <summary>
        /// Timestamp in UTC of when this Consent is considered expired.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudHealthcareV1ConsentPolicyResponse> Policies;
        /// <summary>
        /// The timestamp that the revision was created.
        /// </summary>
        public readonly string RevisionCreateTime;
        /// <summary>
        /// The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.
        /// </summary>
        public readonly string RevisionId;
        /// <summary>
        /// Indicates the current state of this Consent.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Input only. The time to live for this Consent from when it is created.
        /// </summary>
        public readonly string Ttl;
        /// <summary>
        /// User's UUID provided by the client.
        /// </summary>
        public readonly string UserId;

        [OutputConstructor]
        private GetConsentResult(
            string consentArtifact,

            string expireTime,

            ImmutableDictionary<string, string> metadata,

            string name,

            ImmutableArray<Outputs.GoogleCloudHealthcareV1ConsentPolicyResponse> policies,

            string revisionCreateTime,

            string revisionId,

            string state,

            string ttl,

            string userId)
        {
            ConsentArtifact = consentArtifact;
            ExpireTime = expireTime;
            Metadata = metadata;
            Name = name;
            Policies = policies;
            RevisionCreateTime = revisionCreateTime;
            RevisionId = revisionId;
            State = state;
            Ttl = ttl;
            UserId = userId;
        }
    }
}
