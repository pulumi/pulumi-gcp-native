// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Healthcare.V1
{
    public static class GetHl7V2Store
    {
        /// <summary>
        /// Gets the specified HL7v2 store.
        /// </summary>
        public static Task<GetHl7V2StoreResult> InvokeAsync(GetHl7V2StoreArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetHl7V2StoreResult>("google-native:healthcare/v1:getHl7V2Store", args ?? new GetHl7V2StoreArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified HL7v2 store.
        /// </summary>
        public static Output<GetHl7V2StoreResult> Invoke(GetHl7V2StoreInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetHl7V2StoreResult>("google-native:healthcare/v1:getHl7V2Store", args ?? new GetHl7V2StoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHl7V2StoreArgs : Pulumi.InvokeArgs
    {
        [Input("datasetId", required: true)]
        public string DatasetId { get; set; } = null!;

        [Input("hl7V2StoreId", required: true)]
        public string Hl7V2StoreId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetHl7V2StoreArgs()
        {
        }
    }

    public sealed class GetHl7V2StoreInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        [Input("hl7V2StoreId", required: true)]
        public Input<string> Hl7V2StoreId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetHl7V2StoreInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetHl7V2StoreResult
    {
        /// <summary>
        /// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Resource name of the HL7v2 store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest &amp; Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.
        /// </summary>
        public readonly ImmutableArray<Outputs.Hl7V2NotificationConfigResponse> NotificationConfigs;
        /// <summary>
        /// The configuration for the parser. It determines how the server parses the messages.
        /// </summary>
        public readonly Outputs.ParserConfigResponse ParserConfig;
        /// <summary>
        /// Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.
        /// </summary>
        public readonly bool RejectDuplicateMessage;

        [OutputConstructor]
        private GetHl7V2StoreResult(
            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<Outputs.Hl7V2NotificationConfigResponse> notificationConfigs,

            Outputs.ParserConfigResponse parserConfig,

            bool rejectDuplicateMessage)
        {
            Labels = labels;
            Name = name;
            NotificationConfigs = notificationConfigs;
            ParserConfig = parserConfig;
            RejectDuplicateMessage = rejectDuplicateMessage;
        }
    }
}
