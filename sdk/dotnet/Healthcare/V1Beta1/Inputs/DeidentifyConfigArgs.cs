// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Healthcare.V1Beta1.Inputs
{

    /// <summary>
    /// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
    /// </summary>
    public sealed class DeidentifyConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configures how annotations, meaning that the location and infoType of sensitive information findings, are created during de-identification. If unspecified, no annotations are created.
        /// </summary>
        [Input("annotation")]
        public Input<Inputs.AnnotationConfigArgs>? Annotation { get; set; }

        /// <summary>
        /// Configures de-id of application/DICOM content. Deprecated. Use `dicom_tag_config` instead.
        /// </summary>
        [Input("dicom")]
        public Input<Inputs.DicomConfigArgs>? Dicom { get; set; }

        /// <summary>
        /// Configures de-id of application/FHIR content. Deprecated. Use `fhir_field_config` instead.
        /// </summary>
        [Input("fhir")]
        public Input<Inputs.FhirConfigArgs>? Fhir { get; set; }

        /// <summary>
        /// Configures the de-identification of image pixels in the source_dataset. Deprecated. Use `dicom_tag_config.options.clean_image` instead.
        /// </summary>
        [Input("image")]
        public Input<Inputs.ImageConfigArgs>? Image { get; set; }

        /// <summary>
        /// Details about the work the de-identify operation performed.
        /// </summary>
        [Input("operationMetadata")]
        public Input<Inputs.DeidentifyOperationMetadataArgs>? OperationMetadata { get; set; }

        /// <summary>
        /// Configures de-identification of text wherever it is found in the source_dataset.
        /// </summary>
        [Input("text")]
        public Input<Inputs.TextConfigArgs>? Text { get; set; }

        public DeidentifyConfigArgs()
        {
        }
        public static new DeidentifyConfigArgs Empty => new DeidentifyConfigArgs();
    }
}
