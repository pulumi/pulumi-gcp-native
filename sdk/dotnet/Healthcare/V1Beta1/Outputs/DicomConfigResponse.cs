// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Healthcare.V1Beta1.Outputs
{

    /// <summary>
    /// Specifies the parameters needed for de-identification of DICOM stores.
    /// </summary>
    [OutputType]
    public sealed class DicomConfigResponse
    {
        /// <summary>
        /// Tag filtering profile that determines which tags to keep/remove.
        /// </summary>
        public readonly string FilterProfile;
        /// <summary>
        /// List of tags to keep. Remove all other tags.
        /// </summary>
        public readonly Outputs.TagFilterListResponse KeepList;
        /// <summary>
        /// List of tags to remove. Keep all other tags.
        /// </summary>
        public readonly Outputs.TagFilterListResponse RemoveList;
        /// <summary>
        /// If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: "Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity." http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
        /// </summary>
        public readonly bool SkipIdRedaction;

        [OutputConstructor]
        private DicomConfigResponse(
            string filterProfile,

            Outputs.TagFilterListResponse keepList,

            Outputs.TagFilterListResponse removeList,

            bool skipIdRedaction)
        {
            FilterProfile = filterProfile;
            KeepList = keepList;
            RemoveList = removeList;
            SkipIdRedaction = skipIdRedaction;
        }
    }
}
