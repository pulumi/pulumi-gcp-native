// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.GoogleNative.Healthcare.V1Beta1
{
    public static class GetAnnotation
    {
        /// <summary>
        /// Gets an Annotation.
        /// </summary>
        public static Task<GetAnnotationResult> InvokeAsync(GetAnnotationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAnnotationResult>("google-native:healthcare/v1beta1:getAnnotation", args ?? new GetAnnotationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an Annotation.
        /// </summary>
        public static Output<GetAnnotationResult> Invoke(GetAnnotationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAnnotationResult>("google-native:healthcare/v1beta1:getAnnotation", args ?? new GetAnnotationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAnnotationArgs : Pulumi.InvokeArgs
    {
        [Input("annotationId", required: true)]
        public string AnnotationId { get; set; } = null!;

        [Input("annotationStoreId", required: true)]
        public string AnnotationStoreId { get; set; } = null!;

        [Input("datasetId", required: true)]
        public string DatasetId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetAnnotationArgs()
        {
        }
    }

    public sealed class GetAnnotationInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("annotationId", required: true)]
        public Input<string> AnnotationId { get; set; } = null!;

        [Input("annotationStoreId", required: true)]
        public Input<string> AnnotationStoreId { get; set; } = null!;

        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetAnnotationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAnnotationResult
    {
        /// <summary>
        /// Details of the source.
        /// </summary>
        public readonly Outputs.AnnotationSourceResponse AnnotationSource;
        /// <summary>
        /// Additional information for this annotation record, such as annotator and verifier information or study campaign.
        /// </summary>
        public readonly ImmutableDictionary<string, string> CustomData;
        /// <summary>
        /// Annotations for images. For example, bounding polygons.
        /// </summary>
        public readonly Outputs.ImageAnnotationResponse ImageAnnotation;
        /// <summary>
        /// Resource name of the Annotation, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Annotations for resource. For example, classification tags.
        /// </summary>
        public readonly Outputs.ResourceAnnotationResponse ResourceAnnotation;
        /// <summary>
        /// Annotations for sensitive texts. For example, a range that describes the location of sensitive text.
        /// </summary>
        public readonly Outputs.SensitiveTextAnnotationResponse TextAnnotation;

        [OutputConstructor]
        private GetAnnotationResult(
            Outputs.AnnotationSourceResponse annotationSource,

            ImmutableDictionary<string, string> customData,

            Outputs.ImageAnnotationResponse imageAnnotation,

            string name,

            Outputs.ResourceAnnotationResponse resourceAnnotation,

            Outputs.SensitiveTextAnnotationResponse textAnnotation)
        {
            AnnotationSource = annotationSource;
            CustomData = customData;
            ImageAnnotation = imageAnnotation;
            Name = name;
            ResourceAnnotation = resourceAnnotation;
            TextAnnotation = textAnnotation;
        }
    }
}
