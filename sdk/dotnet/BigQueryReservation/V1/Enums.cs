// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.BigQueryReservation.V1
{
    /// <summary>
    /// Edition of the capacity commitment.
    /// </summary>
    [EnumType]
    public readonly struct CapacityCommitmentEdition : IEquatable<CapacityCommitmentEdition>
    {
        private readonly string _value;

        private CapacityCommitmentEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value, which will be treated as ENTERPRISE.
        /// </summary>
        public static CapacityCommitmentEdition EditionUnspecified { get; } = new CapacityCommitmentEdition("EDITION_UNSPECIFIED");
        /// <summary>
        /// Standard edition.
        /// </summary>
        public static CapacityCommitmentEdition Standard { get; } = new CapacityCommitmentEdition("STANDARD");
        /// <summary>
        /// Enterprise edition.
        /// </summary>
        public static CapacityCommitmentEdition Enterprise { get; } = new CapacityCommitmentEdition("ENTERPRISE");
        /// <summary>
        /// Enterprise plus edition.
        /// </summary>
        public static CapacityCommitmentEdition EnterprisePlus { get; } = new CapacityCommitmentEdition("ENTERPRISE_PLUS");

        public static bool operator ==(CapacityCommitmentEdition left, CapacityCommitmentEdition right) => left.Equals(right);
        public static bool operator !=(CapacityCommitmentEdition left, CapacityCommitmentEdition right) => !left.Equals(right);

        public static explicit operator string(CapacityCommitmentEdition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CapacityCommitmentEdition other && Equals(other);
        public bool Equals(CapacityCommitmentEdition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Capacity commitment commitment plan.
    /// </summary>
    [EnumType]
    public readonly struct CapacityCommitmentPlan : IEquatable<CapacityCommitmentPlan>
    {
        private readonly string _value;

        private CapacityCommitmentPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Invalid plan value. Requests with this value will be rejected with error code `google.rpc.Code.INVALID_ARGUMENT`.
        /// </summary>
        public static CapacityCommitmentPlan CommitmentPlanUnspecified { get; } = new CapacityCommitmentPlan("COMMITMENT_PLAN_UNSPECIFIED");
        /// <summary>
        /// Flex commitments have committed period of 1 minute after becoming ACTIVE. After that, they are not in a committed period anymore and can be removed any time.
        /// </summary>
        public static CapacityCommitmentPlan Flex { get; } = new CapacityCommitmentPlan("FLEX");
        /// <summary>
        /// Same as FLEX, should only be used if flat-rate commitments are still available.
        /// </summary>
        public static CapacityCommitmentPlan FlexFlatRate { get; } = new CapacityCommitmentPlan("FLEX_FLAT_RATE");
        /// <summary>
        /// Trial commitments have a committed period of 182 days after becoming ACTIVE. After that, they are converted to a new commitment based on the `renewal_plan`. Default `renewal_plan` for Trial commitment is Flex so that it can be deleted right after committed period ends.
        /// </summary>
        public static CapacityCommitmentPlan Trial { get; } = new CapacityCommitmentPlan("TRIAL");
        /// <summary>
        /// Monthly commitments have a committed period of 30 days after becoming ACTIVE. After that, they are not in a committed period anymore and can be removed any time.
        /// </summary>
        public static CapacityCommitmentPlan Monthly { get; } = new CapacityCommitmentPlan("MONTHLY");
        /// <summary>
        /// Same as MONTHLY, should only be used if flat-rate commitments are still available.
        /// </summary>
        public static CapacityCommitmentPlan MonthlyFlatRate { get; } = new CapacityCommitmentPlan("MONTHLY_FLAT_RATE");
        /// <summary>
        /// Annual commitments have a committed period of 365 days after becoming ACTIVE. After that they are converted to a new commitment based on the renewal_plan.
        /// </summary>
        public static CapacityCommitmentPlan Annual { get; } = new CapacityCommitmentPlan("ANNUAL");
        /// <summary>
        /// Same as ANNUAL, should only be used if flat-rate commitments are still available.
        /// </summary>
        public static CapacityCommitmentPlan AnnualFlatRate { get; } = new CapacityCommitmentPlan("ANNUAL_FLAT_RATE");
        /// <summary>
        /// 3-year commitments have a committed period of 1095(3 * 365) days after becoming ACTIVE. After that they are converted to a new commitment based on the renewal_plan.
        /// </summary>
        public static CapacityCommitmentPlan ThreeYear { get; } = new CapacityCommitmentPlan("THREE_YEAR");
        /// <summary>
        /// Should only be used for `renewal_plan` and is only meaningful if edition is specified to values other than EDITION_UNSPECIFIED. Otherwise CreateCapacityCommitmentRequest or UpdateCapacityCommitmentRequest will be rejected with error code `google.rpc.Code.INVALID_ARGUMENT`. If the renewal_plan is NONE, capacity commitment will be removed at the end of its commitment period.
        /// </summary>
        public static CapacityCommitmentPlan None { get; } = new CapacityCommitmentPlan("NONE");

        public static bool operator ==(CapacityCommitmentPlan left, CapacityCommitmentPlan right) => left.Equals(right);
        public static bool operator !=(CapacityCommitmentPlan left, CapacityCommitmentPlan right) => !left.Equals(right);

        public static explicit operator string(CapacityCommitmentPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CapacityCommitmentPlan other && Equals(other);
        public bool Equals(CapacityCommitmentPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
    /// </summary>
    [EnumType]
    public readonly struct CapacityCommitmentRenewalPlan : IEquatable<CapacityCommitmentRenewalPlan>
    {
        private readonly string _value;

        private CapacityCommitmentRenewalPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Invalid plan value. Requests with this value will be rejected with error code `google.rpc.Code.INVALID_ARGUMENT`.
        /// </summary>
        public static CapacityCommitmentRenewalPlan CommitmentPlanUnspecified { get; } = new CapacityCommitmentRenewalPlan("COMMITMENT_PLAN_UNSPECIFIED");
        /// <summary>
        /// Flex commitments have committed period of 1 minute after becoming ACTIVE. After that, they are not in a committed period anymore and can be removed any time.
        /// </summary>
        public static CapacityCommitmentRenewalPlan Flex { get; } = new CapacityCommitmentRenewalPlan("FLEX");
        /// <summary>
        /// Same as FLEX, should only be used if flat-rate commitments are still available.
        /// </summary>
        public static CapacityCommitmentRenewalPlan FlexFlatRate { get; } = new CapacityCommitmentRenewalPlan("FLEX_FLAT_RATE");
        /// <summary>
        /// Trial commitments have a committed period of 182 days after becoming ACTIVE. After that, they are converted to a new commitment based on the `renewal_plan`. Default `renewal_plan` for Trial commitment is Flex so that it can be deleted right after committed period ends.
        /// </summary>
        public static CapacityCommitmentRenewalPlan Trial { get; } = new CapacityCommitmentRenewalPlan("TRIAL");
        /// <summary>
        /// Monthly commitments have a committed period of 30 days after becoming ACTIVE. After that, they are not in a committed period anymore and can be removed any time.
        /// </summary>
        public static CapacityCommitmentRenewalPlan Monthly { get; } = new CapacityCommitmentRenewalPlan("MONTHLY");
        /// <summary>
        /// Same as MONTHLY, should only be used if flat-rate commitments are still available.
        /// </summary>
        public static CapacityCommitmentRenewalPlan MonthlyFlatRate { get; } = new CapacityCommitmentRenewalPlan("MONTHLY_FLAT_RATE");
        /// <summary>
        /// Annual commitments have a committed period of 365 days after becoming ACTIVE. After that they are converted to a new commitment based on the renewal_plan.
        /// </summary>
        public static CapacityCommitmentRenewalPlan Annual { get; } = new CapacityCommitmentRenewalPlan("ANNUAL");
        /// <summary>
        /// Same as ANNUAL, should only be used if flat-rate commitments are still available.
        /// </summary>
        public static CapacityCommitmentRenewalPlan AnnualFlatRate { get; } = new CapacityCommitmentRenewalPlan("ANNUAL_FLAT_RATE");
        /// <summary>
        /// 3-year commitments have a committed period of 1095(3 * 365) days after becoming ACTIVE. After that they are converted to a new commitment based on the renewal_plan.
        /// </summary>
        public static CapacityCommitmentRenewalPlan ThreeYear { get; } = new CapacityCommitmentRenewalPlan("THREE_YEAR");
        /// <summary>
        /// Should only be used for `renewal_plan` and is only meaningful if edition is specified to values other than EDITION_UNSPECIFIED. Otherwise CreateCapacityCommitmentRequest or UpdateCapacityCommitmentRequest will be rejected with error code `google.rpc.Code.INVALID_ARGUMENT`. If the renewal_plan is NONE, capacity commitment will be removed at the end of its commitment period.
        /// </summary>
        public static CapacityCommitmentRenewalPlan None { get; } = new CapacityCommitmentRenewalPlan("NONE");

        public static bool operator ==(CapacityCommitmentRenewalPlan left, CapacityCommitmentRenewalPlan right) => left.Equals(right);
        public static bool operator !=(CapacityCommitmentRenewalPlan left, CapacityCommitmentRenewalPlan right) => !left.Equals(right);

        public static explicit operator string(CapacityCommitmentRenewalPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CapacityCommitmentRenewalPlan other && Equals(other);
        public bool Equals(CapacityCommitmentRenewalPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Edition of the reservation.
    /// </summary>
    [EnumType]
    public readonly struct ReservationEdition : IEquatable<ReservationEdition>
    {
        private readonly string _value;

        private ReservationEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value, which will be treated as ENTERPRISE.
        /// </summary>
        public static ReservationEdition EditionUnspecified { get; } = new ReservationEdition("EDITION_UNSPECIFIED");
        /// <summary>
        /// Standard edition.
        /// </summary>
        public static ReservationEdition Standard { get; } = new ReservationEdition("STANDARD");
        /// <summary>
        /// Enterprise edition.
        /// </summary>
        public static ReservationEdition Enterprise { get; } = new ReservationEdition("ENTERPRISE");
        /// <summary>
        /// Enterprise plus edition.
        /// </summary>
        public static ReservationEdition EnterprisePlus { get; } = new ReservationEdition("ENTERPRISE_PLUS");

        public static bool operator ==(ReservationEdition left, ReservationEdition right) => left.Equals(right);
        public static bool operator !=(ReservationEdition left, ReservationEdition right) => !left.Equals(right);

        public static explicit operator string(ReservationEdition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReservationEdition other && Equals(other);
        public bool Equals(ReservationEdition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
