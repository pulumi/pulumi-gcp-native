// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.GoogleNative.BigQueryReservation.V1
{
    public static class GetReservation
    {
        /// <summary>
        /// Returns information about the reservation.
        /// </summary>
        public static Task<GetReservationResult> InvokeAsync(GetReservationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetReservationResult>("google-native:bigqueryreservation/v1:getReservation", args ?? new GetReservationArgs(), options.WithDefaults());

        /// <summary>
        /// Returns information about the reservation.
        /// </summary>
        public static Output<GetReservationResult> Invoke(GetReservationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetReservationResult>("google-native:bigqueryreservation/v1:getReservation", args ?? new GetReservationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReservationArgs : Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("reservationId", required: true)]
        public string ReservationId { get; set; } = null!;

        public GetReservationArgs()
        {
        }
    }

    public sealed class GetReservationInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("reservationId", required: true)]
        public Input<string> ReservationId { get; set; } = null!;

        public GetReservationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetReservationResult
    {
        /// <summary>
        /// Creation time of the reservation.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// If false, any query or pipeline job using this reservation will use idle slots from other reservations within the same admin project. If true, a query or pipeline job using this reservation will execute with the slot capacity specified in the slot_capacity field at most.
        /// </summary>
        public readonly bool IgnoreIdleSlots;
        /// <summary>
        /// The resource name of the reservation, e.g., `projects/*/locations/*/reservations/team1-prod`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the unit of parallelism. Queries using this reservation might use more slots during runtime if ignore_idle_slots is set to false. If the new reservation's slot capacity exceed the project's slot capacity or if total slot capacity of the new reservation and its siblings exceeds the project's slot capacity, the request will fail with `google.rpc.Code.RESOURCE_EXHAUSTED`. NOTE: for reservations in US or EU multi-regions slot capacity constraints are checked separately for default and auxiliary regions. See multi_region_auxiliary flag for more details.
        /// </summary>
        public readonly string SlotCapacity;
        /// <summary>
        /// Last update time of the reservation.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetReservationResult(
            string creationTime,

            bool ignoreIdleSlots,

            string name,

            string slotCapacity,

            string updateTime)
        {
            CreationTime = creationTime;
            IgnoreIdleSlots = ignoreIdleSlots;
            Name = name;
            SlotCapacity = slotCapacity;
            UpdateTime = updateTime;
        }
    }
}
