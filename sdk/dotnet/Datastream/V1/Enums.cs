// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Datastream.V1
{
    /// <summary>
    /// Compression of the loaded JSON file.
    /// </summary>
    [EnumType]
    public readonly struct JsonFileFormatCompression : IEquatable<JsonFileFormatCompression>
    {
        private readonly string _value;

        private JsonFileFormatCompression(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified json file compression.
        /// </summary>
        public static JsonFileFormatCompression JsonCompressionUnspecified { get; } = new JsonFileFormatCompression("JSON_COMPRESSION_UNSPECIFIED");
        /// <summary>
        /// Do not compress JSON file.
        /// </summary>
        public static JsonFileFormatCompression NoCompression { get; } = new JsonFileFormatCompression("NO_COMPRESSION");
        /// <summary>
        /// Gzip compression.
        /// </summary>
        public static JsonFileFormatCompression Gzip { get; } = new JsonFileFormatCompression("GZIP");

        public static bool operator ==(JsonFileFormatCompression left, JsonFileFormatCompression right) => left.Equals(right);
        public static bool operator !=(JsonFileFormatCompression left, JsonFileFormatCompression right) => !left.Equals(right);

        public static explicit operator string(JsonFileFormatCompression value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JsonFileFormatCompression other && Equals(other);
        public bool Equals(JsonFileFormatCompression other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The schema file format along JSON data files.
    /// </summary>
    [EnumType]
    public readonly struct JsonFileFormatSchemaFileFormat : IEquatable<JsonFileFormatSchemaFileFormat>
    {
        private readonly string _value;

        private JsonFileFormatSchemaFileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified schema file format.
        /// </summary>
        public static JsonFileFormatSchemaFileFormat SchemaFileFormatUnspecified { get; } = new JsonFileFormatSchemaFileFormat("SCHEMA_FILE_FORMAT_UNSPECIFIED");
        /// <summary>
        /// Do not attach schema file.
        /// </summary>
        public static JsonFileFormatSchemaFileFormat NoSchemaFile { get; } = new JsonFileFormatSchemaFileFormat("NO_SCHEMA_FILE");
        /// <summary>
        /// Avro schema format.
        /// </summary>
        public static JsonFileFormatSchemaFileFormat AvroSchemaFile { get; } = new JsonFileFormatSchemaFileFormat("AVRO_SCHEMA_FILE");

        public static bool operator ==(JsonFileFormatSchemaFileFormat left, JsonFileFormatSchemaFileFormat right) => left.Equals(right);
        public static bool operator !=(JsonFileFormatSchemaFileFormat left, JsonFileFormatSchemaFileFormat right) => !left.Equals(right);

        public static explicit operator string(JsonFileFormatSchemaFileFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JsonFileFormatSchemaFileFormat other && Equals(other);
        public bool Equals(JsonFileFormatSchemaFileFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the stream.
    /// </summary>
    [EnumType]
    public readonly struct StreamState : IEquatable<StreamState>
    {
        private readonly string _value;

        private StreamState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified stream state.
        /// </summary>
        public static StreamState StateUnspecified { get; } = new StreamState("STATE_UNSPECIFIED");
        /// <summary>
        /// The stream has been created but has not yet started streaming data.
        /// </summary>
        public static StreamState NotStarted { get; } = new StreamState("NOT_STARTED");
        /// <summary>
        /// The stream is running.
        /// </summary>
        public static StreamState Running { get; } = new StreamState("RUNNING");
        /// <summary>
        /// The stream is paused.
        /// </summary>
        public static StreamState Paused { get; } = new StreamState("PAUSED");
        /// <summary>
        /// The stream is in maintenance mode. Updates are rejected on the resource in this state.
        /// </summary>
        public static StreamState Maintenance { get; } = new StreamState("MAINTENANCE");
        /// <summary>
        /// The stream is experiencing an error that is preventing data from being streamed.
        /// </summary>
        public static StreamState Failed { get; } = new StreamState("FAILED");
        /// <summary>
        /// The stream has experienced a terminal failure.
        /// </summary>
        public static StreamState FailedPermanently { get; } = new StreamState("FAILED_PERMANENTLY");
        /// <summary>
        /// The stream is starting, but not yet running.
        /// </summary>
        public static StreamState Starting { get; } = new StreamState("STARTING");
        /// <summary>
        /// The Stream is no longer reading new events, but still writing events in the buffer.
        /// </summary>
        public static StreamState Draining { get; } = new StreamState("DRAINING");

        public static bool operator ==(StreamState left, StreamState right) => left.Equals(right);
        public static bool operator !=(StreamState left, StreamState right) => !left.Equals(right);

        public static explicit operator string(StreamState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StreamState other && Equals(other);
        public bool Equals(StreamState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
