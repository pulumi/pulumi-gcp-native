// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.GKEHub.V1.Inputs
{

    /// <summary>
    /// Configuration for the SAML Auth flow.
    /// </summary>
    public sealed class IdentityServiceSamlConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("attributeMapping")]
        private InputMap<string>? _attributeMapping;

        /// <summary>
        /// Optional. The mapping of additional user attributes like nickname, birthday and address etc.. `key` is the name of this additional attribute. `value` is a string presenting as CEL(common expression language, go/cel) used for getting the value from the resources. Take nickname as an example, in this case, `key` is "attribute.nickname" and `value` is "assertion.nickname".
        /// </summary>
        public InputMap<string> AttributeMapping
        {
            get => _attributeMapping ?? (_attributeMapping = new InputMap<string>());
            set => _attributeMapping = value;
        }

        /// <summary>
        /// Optional. Prefix to prepend to group name.
        /// </summary>
        [Input("groupPrefix")]
        public Input<string>? GroupPrefix { get; set; }

        /// <summary>
        /// Optional. The SAML attribute to read groups from. This value is expected to be a string and will be passed along as-is (with the option of being prefixed by the `group_prefix`).
        /// </summary>
        [Input("groupsAttribute")]
        public Input<string>? GroupsAttribute { get; set; }

        [Input("identityProviderCertificates", required: true)]
        private InputList<string>? _identityProviderCertificates;

        /// <summary>
        /// The list of IdP certificates to validate the SAML response against.
        /// </summary>
        public InputList<string> IdentityProviderCertificates
        {
            get => _identityProviderCertificates ?? (_identityProviderCertificates = new InputList<string>());
            set => _identityProviderCertificates = value;
        }

        /// <summary>
        /// The entity ID of the SAML IdP.
        /// </summary>
        [Input("identityProviderId", required: true)]
        public Input<string> IdentityProviderId { get; set; } = null!;

        /// <summary>
        /// The URI where the SAML IdP exposes the SSO service.
        /// </summary>
        [Input("identityProviderSsoUri", required: true)]
        public Input<string> IdentityProviderSsoUri { get; set; } = null!;

        /// <summary>
        /// Optional. The SAML attribute to read username from. If unspecified, the username will be read from the NameID element of the assertion in SAML response. This value is expected to be a string and will be passed along as-is (with the option of being prefixed by the `user_prefix`).
        /// </summary>
        [Input("userAttribute")]
        public Input<string>? UserAttribute { get; set; }

        /// <summary>
        /// Optional. Prefix to prepend to user name.
        /// </summary>
        [Input("userPrefix")]
        public Input<string>? UserPrefix { get; set; }

        public IdentityServiceSamlConfigArgs()
        {
        }
        public static new IdentityServiceSamlConfigArgs Empty => new IdentityServiceSamlConfigArgs();
    }
}
