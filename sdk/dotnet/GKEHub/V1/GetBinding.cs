// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.GKEHub.V1
{
    public static class GetBinding
    {
        /// <summary>
        /// Returns the details of a MembershipBinding.
        /// </summary>
        public static Task<GetBindingResult> InvokeAsync(GetBindingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBindingResult>("google-native:gkehub/v1:getBinding", args ?? new GetBindingArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the details of a MembershipBinding.
        /// </summary>
        public static Output<GetBindingResult> Invoke(GetBindingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBindingResult>("google-native:gkehub/v1:getBinding", args ?? new GetBindingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBindingArgs : global::Pulumi.InvokeArgs
    {
        [Input("bindingId", required: true)]
        public string BindingId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("membershipId", required: true)]
        public string MembershipId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetBindingArgs()
        {
        }
        public static new GetBindingArgs Empty => new GetBindingArgs();
    }

    public sealed class GetBindingInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("bindingId", required: true)]
        public Input<string> BindingId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("membershipId", required: true)]
        public Input<string> MembershipId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetBindingInvokeArgs()
        {
        }
        public static new GetBindingInvokeArgs Empty => new GetBindingInvokeArgs();
    }


    [OutputType]
    public sealed class GetBindingResult
    {
        /// <summary>
        /// When the membership binding was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// When the membership binding was deleted.
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// Optional. Labels for this MembershipBinding.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name for the membershipbinding itself `projects/{project}/locations/{location}/memberships/{membership}/bindings/{membershipbinding}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A Scope resource name in the format `projects/*/locations/*/scopes/*`.
        /// </summary>
        public readonly string Scope;
        /// <summary>
        /// State of the membership binding resource.
        /// </summary>
        public readonly Outputs.MembershipBindingLifecycleStateResponse State;
        /// <summary>
        /// Google-generated UUID for this resource. This is unique across all membershipbinding resources. If a membershipbinding resource is deleted and another resource with the same name is created, it gets a different uid.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// When the membership binding was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetBindingResult(
            string createTime,

            string deleteTime,

            ImmutableDictionary<string, string> labels,

            string name,

            string scope,

            Outputs.MembershipBindingLifecycleStateResponse state,

            string uid,

            string updateTime)
        {
            CreateTime = createTime;
            DeleteTime = deleteTime;
            Labels = labels;
            Name = name;
            Scope = scope;
            State = state;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
