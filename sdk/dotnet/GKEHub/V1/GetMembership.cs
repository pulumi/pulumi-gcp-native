// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.GKEHub.V1
{
    public static class GetMembership
    {
        /// <summary>
        /// Gets the details of a Membership.
        /// </summary>
        public static Task<GetMembershipResult> InvokeAsync(GetMembershipArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMembershipResult>("google-native:gkehub/v1:getMembership", args ?? new GetMembershipArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of a Membership.
        /// </summary>
        public static Output<GetMembershipResult> Invoke(GetMembershipInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetMembershipResult>("google-native:gkehub/v1:getMembership", args ?? new GetMembershipInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMembershipArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("membershipId", required: true)]
        public string MembershipId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetMembershipArgs()
        {
        }
        public static new GetMembershipArgs Empty => new GetMembershipArgs();
    }

    public sealed class GetMembershipInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("membershipId", required: true)]
        public Input<string> MembershipId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetMembershipInvokeArgs()
        {
        }
        public static new GetMembershipInvokeArgs Empty => new GetMembershipInvokeArgs();
    }


    [OutputType]
    public sealed class GetMembershipResult
    {
        /// <summary>
        /// Optional. How to identify workloads from this Membership. See the documentation on Workload Identity for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
        /// </summary>
        public readonly Outputs.AuthorityResponse Authority;
        /// <summary>
        /// When the Membership was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// When the Membership was deleted.
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// Description of this membership, limited to 63 characters. Must match the regex: `a-zA-Z0-9*` This field is present for legacy purposes.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. Endpoint information to reach this member.
        /// </summary>
        public readonly Outputs.MembershipEndpointResponse Endpoint;
        /// <summary>
        /// Optional. An externally-generated and managed ID for this Membership. This ID may be modified after creation, but this is not recommended. The ID must match the regex: `a-zA-Z0-9*` If this Membership represents a Kubernetes cluster, this value should be set to the UID of the `kube-system` namespace object.
        /// </summary>
        public readonly string ExternalId;
        /// <summary>
        /// Optional. GCP labels for this membership.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// For clusters using Connect, the timestamp of the most recent connection established with Google Cloud. This time is updated every several minutes, not continuously. For clusters that do not use GKE Connect, or that have never connected successfully, this field will be unset.
        /// </summary>
        public readonly string LastConnectionTime;
        /// <summary>
        /// The full, unique name of this Membership resource in the format `projects/*/locations/*/memberships/{membership_id}`, set during creation. `membership_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// State of the Membership resource.
        /// </summary>
        public readonly Outputs.MembershipStateResponse State;
        /// <summary>
        /// Google-generated UUID for this resource. This is unique across all Membership resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.
        /// </summary>
        public readonly string UniqueId;
        /// <summary>
        /// When the Membership was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetMembershipResult(
            Outputs.AuthorityResponse authority,

            string createTime,

            string deleteTime,

            string description,

            Outputs.MembershipEndpointResponse endpoint,

            string externalId,

            ImmutableDictionary<string, string> labels,

            string lastConnectionTime,

            string name,

            Outputs.MembershipStateResponse state,

            string uniqueId,

            string updateTime)
        {
            Authority = authority;
            CreateTime = createTime;
            DeleteTime = deleteTime;
            Description = description;
            Endpoint = endpoint;
            ExternalId = externalId;
            Labels = labels;
            LastConnectionTime = lastConnectionTime;
            Name = name;
            State = state;
            UniqueId = uniqueId;
            UpdateTime = updateTime;
        }
    }
}
