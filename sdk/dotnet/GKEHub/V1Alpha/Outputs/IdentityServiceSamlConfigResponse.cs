// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.GKEHub.V1Alpha.Outputs
{

    /// <summary>
    /// Configuration for the SAML Auth flow.
    /// </summary>
    [OutputType]
    public sealed class IdentityServiceSamlConfigResponse
    {
        /// <summary>
        /// Optional. The mapping of additional user attributes like nickname, birthday and address etc.. `key` is the name of this additional attribute. `value` is a string presenting as CEL(common expression language, go/cel) used for getting the value from the resources. Take nickname as an example, in this case, `key` is "attribute.nickname" and `value` is "assertion.nickname".
        /// </summary>
        public readonly ImmutableDictionary<string, string> AttributeMapping;
        /// <summary>
        /// Optional. Prefix to prepend to group name.
        /// </summary>
        public readonly string GroupPrefix;
        /// <summary>
        /// Optional. The SAML attribute to read groups from. This value is expected to be a string and will be passed along as-is (with the option of being prefixed by the `group_prefix`).
        /// </summary>
        public readonly string GroupsAttribute;
        /// <summary>
        /// The list of IdP certificates to validate the SAML response against.
        /// </summary>
        public readonly ImmutableArray<string> IdentityProviderCertificates;
        /// <summary>
        /// The entity ID of the SAML IdP.
        /// </summary>
        public readonly string IdentityProviderId;
        /// <summary>
        /// The URI where the SAML IdP exposes the SSO service.
        /// </summary>
        public readonly string IdentityProviderSsoUri;
        /// <summary>
        /// Optional. The SAML attribute to read username from. If unspecified, the username will be read from the NameID element of the assertion in SAML response. This value is expected to be a string and will be passed along as-is (with the option of being prefixed by the `user_prefix`).
        /// </summary>
        public readonly string UserAttribute;
        /// <summary>
        /// Optional. Prefix to prepend to user name.
        /// </summary>
        public readonly string UserPrefix;

        [OutputConstructor]
        private IdentityServiceSamlConfigResponse(
            ImmutableDictionary<string, string> attributeMapping,

            string groupPrefix,

            string groupsAttribute,

            ImmutableArray<string> identityProviderCertificates,

            string identityProviderId,

            string identityProviderSsoUri,

            string userAttribute,

            string userPrefix)
        {
            AttributeMapping = attributeMapping;
            GroupPrefix = groupPrefix;
            GroupsAttribute = groupsAttribute;
            IdentityProviderCertificates = identityProviderCertificates;
            IdentityProviderId = identityProviderId;
            IdentityProviderSsoUri = identityProviderSsoUri;
            UserAttribute = userAttribute;
            UserPrefix = userPrefix;
        }
    }
}
