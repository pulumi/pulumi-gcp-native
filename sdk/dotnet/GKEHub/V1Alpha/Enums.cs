// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.GKEHub.V1Alpha
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Mode of operation for binauthz policy evaluation.
    /// </summary>
    [EnumType]
    public readonly struct BinaryAuthorizationConfigEvaluationMode : IEquatable<BinaryAuthorizationConfigEvaluationMode>
    {
        private readonly string _value;

        private BinaryAuthorizationConfigEvaluationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value
        /// </summary>
        public static BinaryAuthorizationConfigEvaluationMode EvaluationModeUnspecified { get; } = new BinaryAuthorizationConfigEvaluationMode("EVALUATION_MODE_UNSPECIFIED");
        /// <summary>
        /// Disable BinaryAuthorization
        /// </summary>
        public static BinaryAuthorizationConfigEvaluationMode Disabled { get; } = new BinaryAuthorizationConfigEvaluationMode("DISABLED");
        /// <summary>
        /// Use Binary Authorization with the policies specified in policy_bindings.
        /// </summary>
        public static BinaryAuthorizationConfigEvaluationMode PolicyBindings { get; } = new BinaryAuthorizationConfigEvaluationMode("POLICY_BINDINGS");

        public static bool operator ==(BinaryAuthorizationConfigEvaluationMode left, BinaryAuthorizationConfigEvaluationMode right) => left.Equals(right);
        public static bool operator !=(BinaryAuthorizationConfigEvaluationMode left, BinaryAuthorizationConfigEvaluationMode right) => !left.Equals(right);

        public static explicit operator string(BinaryAuthorizationConfigEvaluationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BinaryAuthorizationConfigEvaluationMode other && Equals(other);
        public bool Equals(BinaryAuthorizationConfigEvaluationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether it is allowed to run the privileged builds on the cluster or not.
    /// </summary>
    [EnumType]
    public readonly struct CloudBuildMembershipSpecSecurityPolicy : IEquatable<CloudBuildMembershipSpecSecurityPolicy>
    {
        private readonly string _value;

        private CloudBuildMembershipSpecSecurityPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified policy
        /// </summary>
        public static CloudBuildMembershipSpecSecurityPolicy SecurityPolicyUnspecified { get; } = new CloudBuildMembershipSpecSecurityPolicy("SECURITY_POLICY_UNSPECIFIED");
        /// <summary>
        /// Privileged build pods are disallowed
        /// </summary>
        public static CloudBuildMembershipSpecSecurityPolicy NonPrivileged { get; } = new CloudBuildMembershipSpecSecurityPolicy("NON_PRIVILEGED");
        /// <summary>
        /// Privileged build pods are allowed
        /// </summary>
        public static CloudBuildMembershipSpecSecurityPolicy Privileged { get; } = new CloudBuildMembershipSpecSecurityPolicy("PRIVILEGED");

        public static bool operator ==(CloudBuildMembershipSpecSecurityPolicy left, CloudBuildMembershipSpecSecurityPolicy right) => left.Equals(right);
        public static bool operator !=(CloudBuildMembershipSpecSecurityPolicy left, CloudBuildMembershipSpecSecurityPolicy right) => !left.Equals(right);

        public static explicit operator string(CloudBuildMembershipSpecSecurityPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CloudBuildMembershipSpecSecurityPolicy other && Equals(other);
        public bool Equals(CloudBuildMembershipSpecSecurityPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConfigManagementPolicyControllerMonitoringBackendsItem : IEquatable<ConfigManagementPolicyControllerMonitoringBackendsItem>
    {
        private readonly string _value;

        private ConfigManagementPolicyControllerMonitoringBackendsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Backend cannot be determined
        /// </summary>
        public static ConfigManagementPolicyControllerMonitoringBackendsItem MonitoringBackendUnspecified { get; } = new ConfigManagementPolicyControllerMonitoringBackendsItem("MONITORING_BACKEND_UNSPECIFIED");
        /// <summary>
        /// Prometheus backend for monitoring
        /// </summary>
        public static ConfigManagementPolicyControllerMonitoringBackendsItem Prometheus { get; } = new ConfigManagementPolicyControllerMonitoringBackendsItem("PROMETHEUS");
        /// <summary>
        /// Stackdriver/Cloud Monitoring backend for monitoring
        /// </summary>
        public static ConfigManagementPolicyControllerMonitoringBackendsItem CloudMonitoring { get; } = new ConfigManagementPolicyControllerMonitoringBackendsItem("CLOUD_MONITORING");

        public static bool operator ==(ConfigManagementPolicyControllerMonitoringBackendsItem left, ConfigManagementPolicyControllerMonitoringBackendsItem right) => left.Equals(right);
        public static bool operator !=(ConfigManagementPolicyControllerMonitoringBackendsItem left, ConfigManagementPolicyControllerMonitoringBackendsItem right) => !left.Equals(right);

        public static explicit operator string(ConfigManagementPolicyControllerMonitoringBackendsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigManagementPolicyControllerMonitoringBackendsItem other && Equals(other);
        public bool Equals(ConfigManagementPolicyControllerMonitoringBackendsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Immutable. Specifies CA configuration.
    /// </summary>
    [EnumType]
    public readonly struct FeatureSpecProvisionGoogleCa : IEquatable<FeatureSpecProvisionGoogleCa>
    {
        private readonly string _value;

        private FeatureSpecProvisionGoogleCa(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Disable default Google managed CA.
        /// </summary>
        public static FeatureSpecProvisionGoogleCa GoogleCaProvisioningUnspecified { get; } = new FeatureSpecProvisionGoogleCa("GOOGLE_CA_PROVISIONING_UNSPECIFIED");
        /// <summary>
        /// Disable default Google managed CA.
        /// </summary>
        public static FeatureSpecProvisionGoogleCa Disabled { get; } = new FeatureSpecProvisionGoogleCa("DISABLED");
        /// <summary>
        /// Use default Google managed CA.
        /// </summary>
        public static FeatureSpecProvisionGoogleCa Enabled { get; } = new FeatureSpecProvisionGoogleCa("ENABLED");
        /// <summary>
        /// Workload certificate feature is enabled, and the entire certificate provisioning process is managed by Google with managed CAS which is more secure than the default CA.
        /// </summary>
        public static FeatureSpecProvisionGoogleCa EnabledWithManagedCa { get; } = new FeatureSpecProvisionGoogleCa("ENABLED_WITH_MANAGED_CA");
        /// <summary>
        /// Workload certificate feature is enabled, and the entire certificate provisioning process is using the default CA which is free.
        /// </summary>
        public static FeatureSpecProvisionGoogleCa EnabledWithDefaultCa { get; } = new FeatureSpecProvisionGoogleCa("ENABLED_WITH_DEFAULT_CA");

        public static bool operator ==(FeatureSpecProvisionGoogleCa left, FeatureSpecProvisionGoogleCa right) => left.Equals(right);
        public static bool operator !=(FeatureSpecProvisionGoogleCa left, FeatureSpecProvisionGoogleCa right) => !left.Equals(right);

        public static explicit operator string(FeatureSpecProvisionGoogleCa value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FeatureSpecProvisionGoogleCa other && Equals(other);
        public bool Equals(FeatureSpecProvisionGoogleCa other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// mode configures the logs routing mode.
    /// </summary>
    [EnumType]
    public readonly struct FleetObservabilityRoutingConfigMode : IEquatable<FleetObservabilityRoutingConfigMode>
    {
        private readonly string _value;

        private FleetObservabilityRoutingConfigMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// If UNSPECIFIED, fleet logging feature is disabled.
        /// </summary>
        public static FleetObservabilityRoutingConfigMode ModeUnspecified { get; } = new FleetObservabilityRoutingConfigMode("MODE_UNSPECIFIED");
        /// <summary>
        /// logs will be copied to the destination project.
        /// </summary>
        public static FleetObservabilityRoutingConfigMode Copy { get; } = new FleetObservabilityRoutingConfigMode("COPY");
        /// <summary>
        /// logs will be moved to the destination project.
        /// </summary>
        public static FleetObservabilityRoutingConfigMode Move { get; } = new FleetObservabilityRoutingConfigMode("MOVE");

        public static bool operator ==(FleetObservabilityRoutingConfigMode left, FleetObservabilityRoutingConfigMode right) => left.Equals(right);
        public static bool operator !=(FleetObservabilityRoutingConfigMode left, FleetObservabilityRoutingConfigMode right) => !left.Equals(right);

        public static explicit operator string(FleetObservabilityRoutingConfigMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetObservabilityRoutingConfigMode other && Equals(other);
        public bool Equals(FleetObservabilityRoutingConfigMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies workload certificate management.
    /// </summary>
    [EnumType]
    public readonly struct MembershipSpecCertificateManagement : IEquatable<MembershipSpecCertificateManagement>
    {
        private readonly string _value;

        private MembershipSpecCertificateManagement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Disable workload certificate feature.
        /// </summary>
        public static MembershipSpecCertificateManagement CertificateManagementUnspecified { get; } = new MembershipSpecCertificateManagement("CERTIFICATE_MANAGEMENT_UNSPECIFIED");
        /// <summary>
        /// Disable workload certificate feature.
        /// </summary>
        public static MembershipSpecCertificateManagement Disabled { get; } = new MembershipSpecCertificateManagement("DISABLED");
        /// <summary>
        /// Enable workload certificate feature.
        /// </summary>
        public static MembershipSpecCertificateManagement Enabled { get; } = new MembershipSpecCertificateManagement("ENABLED");

        public static bool operator ==(MembershipSpecCertificateManagement left, MembershipSpecCertificateManagement right) => left.Equals(right);
        public static bool operator !=(MembershipSpecCertificateManagement left, MembershipSpecCertificateManagement right) => !left.Equals(right);

        public static explicit operator string(MembershipSpecCertificateManagement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MembershipSpecCertificateManagement other && Equals(other);
        public bool Equals(MembershipSpecCertificateManagement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Deprecated: This field will be ignored and should not be set. Customer's billing structure.
    /// </summary>
    [EnumType]
    public readonly struct MultiClusterIngressFeatureSpecBilling : IEquatable<MultiClusterIngressFeatureSpecBilling>
    {
        private readonly string _value;

        private MultiClusterIngressFeatureSpecBilling(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown
        /// </summary>
        public static MultiClusterIngressFeatureSpecBilling BillingUnspecified { get; } = new MultiClusterIngressFeatureSpecBilling("BILLING_UNSPECIFIED");
        /// <summary>
        /// User pays a fee per-endpoint.
        /// </summary>
        public static MultiClusterIngressFeatureSpecBilling PayAsYouGo { get; } = new MultiClusterIngressFeatureSpecBilling("PAY_AS_YOU_GO");
        /// <summary>
        /// User is paying for Anthos as a whole.
        /// </summary>
        public static MultiClusterIngressFeatureSpecBilling AnthosLicense { get; } = new MultiClusterIngressFeatureSpecBilling("ANTHOS_LICENSE");

        public static bool operator ==(MultiClusterIngressFeatureSpecBilling left, MultiClusterIngressFeatureSpecBilling right) => left.Equals(right);
        public static bool operator !=(MultiClusterIngressFeatureSpecBilling left, MultiClusterIngressFeatureSpecBilling right) => !left.Equals(right);

        public static explicit operator string(MultiClusterIngressFeatureSpecBilling value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MultiClusterIngressFeatureSpecBilling other && Equals(other);
        public bool Equals(MultiClusterIngressFeatureSpecBilling other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// actuation_mode controls the behavior of the controller
    /// </summary>
    [EnumType]
    public readonly struct NamespaceActuationFeatureSpecActuationMode : IEquatable<NamespaceActuationFeatureSpecActuationMode>
    {
        private readonly string _value;

        private NamespaceActuationFeatureSpecActuationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// ACTUATION_MODE_UNSPECIFIED is similar to CREATE_AND_DELETE_IF_CREATED in the default controller behavior.
        /// </summary>
        public static NamespaceActuationFeatureSpecActuationMode ActuationModeUnspecified { get; } = new NamespaceActuationFeatureSpecActuationMode("ACTUATION_MODE_UNSPECIFIED");
        /// <summary>
        /// ACTUATION_MODE_CREATE_AND_DELETE_IF_CREATED has the controller create cluster namespaces for each fleet namespace and it deletes only the ones it created, which are identified by a label.
        /// </summary>
        public static NamespaceActuationFeatureSpecActuationMode ActuationModeCreateAndDeleteIfCreated { get; } = new NamespaceActuationFeatureSpecActuationMode("ACTUATION_MODE_CREATE_AND_DELETE_IF_CREATED");
        /// <summary>
        /// ACTUATION_MODE_ADD_AND_REMOVE_FLEET_LABELS has the controller only apply labels to cluster namespaces to signal fleet namespace enablement. It doesn't create or delete cluster namespaces.
        /// </summary>
        public static NamespaceActuationFeatureSpecActuationMode ActuationModeAddAndRemoveFleetLabels { get; } = new NamespaceActuationFeatureSpecActuationMode("ACTUATION_MODE_ADD_AND_REMOVE_FLEET_LABELS");

        public static bool operator ==(NamespaceActuationFeatureSpecActuationMode left, NamespaceActuationFeatureSpecActuationMode right) => left.Equals(right);
        public static bool operator !=(NamespaceActuationFeatureSpecActuationMode left, NamespaceActuationFeatureSpecActuationMode right) => !left.Equals(right);

        public static explicit operator string(NamespaceActuationFeatureSpecActuationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NamespaceActuationFeatureSpecActuationMode other && Equals(other);
        public bool Equals(NamespaceActuationFeatureSpecActuationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Immutable. The on prem cluster's type.
    /// </summary>
    [EnumType]
    public readonly struct OnPremClusterClusterType : IEquatable<OnPremClusterClusterType>
    {
        private readonly string _value;

        private OnPremClusterClusterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The ClusterType is not set.
        /// </summary>
        public static OnPremClusterClusterType ClustertypeUnspecified { get; } = new OnPremClusterClusterType("CLUSTERTYPE_UNSPECIFIED");
        /// <summary>
        /// The ClusterType is bootstrap cluster.
        /// </summary>
        public static OnPremClusterClusterType Bootstrap { get; } = new OnPremClusterClusterType("BOOTSTRAP");
        /// <summary>
        /// The ClusterType is baremetal hybrid cluster.
        /// </summary>
        public static OnPremClusterClusterType Hybrid { get; } = new OnPremClusterClusterType("HYBRID");
        /// <summary>
        /// The ClusterType is baremetal standalone cluster.
        /// </summary>
        public static OnPremClusterClusterType Standalone { get; } = new OnPremClusterClusterType("STANDALONE");
        /// <summary>
        /// The ClusterType is user cluster.
        /// </summary>
        public static OnPremClusterClusterType User { get; } = new OnPremClusterClusterType("USER");

        public static bool operator ==(OnPremClusterClusterType left, OnPremClusterClusterType right) => left.Equals(right);
        public static bool operator !=(OnPremClusterClusterType left, OnPremClusterClusterType right) => !left.Equals(right);

        public static explicit operator string(OnPremClusterClusterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OnPremClusterClusterType other && Equals(other);
        public bool Equals(OnPremClusterClusterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type specifies which type of origin is set.
    /// </summary>
    [EnumType]
    public readonly struct OriginType : IEquatable<OriginType>
    {
        private readonly string _value;

        private OriginType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Type is unknown or not set.
        /// </summary>
        public static OriginType TypeUnspecified { get; } = new OriginType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Per-Membership spec was inherited from the fleet-level default.
        /// </summary>
        public static OriginType Fleet { get; } = new OriginType("FLEET");
        /// <summary>
        /// Per-Membership spec was inherited from the fleet-level default but is now out of sync with the current default.
        /// </summary>
        public static OriginType FleetOutOfSync { get; } = new OriginType("FLEET_OUT_OF_SYNC");
        /// <summary>
        /// Per-Membership spec was inherited from a user specification.
        /// </summary>
        public static OriginType User { get; } = new OriginType("USER");

        public static bool operator ==(OriginType left, OriginType right) => left.Equals(right);
        public static bool operator !=(OriginType left, OriginType right) => !left.Equals(right);

        public static explicit operator string(OriginType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginType other && Equals(other);
        public bool Equals(OriginType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
    /// </summary>
    [EnumType]
    public readonly struct PolicyControllerHubConfigInstallSpec : IEquatable<PolicyControllerHubConfigInstallSpec>
    {
        private readonly string _value;

        private PolicyControllerHubConfigInstallSpec(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Spec is unknown.
        /// </summary>
        public static PolicyControllerHubConfigInstallSpec InstallSpecUnspecified { get; } = new PolicyControllerHubConfigInstallSpec("INSTALL_SPEC_UNSPECIFIED");
        /// <summary>
        /// Request to uninstall Policy Controller.
        /// </summary>
        public static PolicyControllerHubConfigInstallSpec InstallSpecNotInstalled { get; } = new PolicyControllerHubConfigInstallSpec("INSTALL_SPEC_NOT_INSTALLED");
        /// <summary>
        /// Request to install and enable Policy Controller.
        /// </summary>
        public static PolicyControllerHubConfigInstallSpec InstallSpecEnabled { get; } = new PolicyControllerHubConfigInstallSpec("INSTALL_SPEC_ENABLED");
        /// <summary>
        /// Request to suspend Policy Controller i.e. its webhooks. If Policy Controller is not installed, it will be installed but suspended.
        /// </summary>
        public static PolicyControllerHubConfigInstallSpec InstallSpecSuspended { get; } = new PolicyControllerHubConfigInstallSpec("INSTALL_SPEC_SUSPENDED");
        /// <summary>
        /// Request to stop all reconciliation actions by PoCo Hub controller. This is a breakglass mechanism to stop PoCo Hub from affecting cluster resources.
        /// </summary>
        public static PolicyControllerHubConfigInstallSpec InstallSpecDetached { get; } = new PolicyControllerHubConfigInstallSpec("INSTALL_SPEC_DETACHED");

        public static bool operator ==(PolicyControllerHubConfigInstallSpec left, PolicyControllerHubConfigInstallSpec right) => left.Equals(right);
        public static bool operator !=(PolicyControllerHubConfigInstallSpec left, PolicyControllerHubConfigInstallSpec right) => !left.Equals(right);

        public static explicit operator string(PolicyControllerHubConfigInstallSpec value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyControllerHubConfigInstallSpec other && Equals(other);
        public bool Equals(PolicyControllerHubConfigInstallSpec other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PolicyControllerMonitoringConfigBackendsItem : IEquatable<PolicyControllerMonitoringConfigBackendsItem>
    {
        private readonly string _value;

        private PolicyControllerMonitoringConfigBackendsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Backend cannot be determined
        /// </summary>
        public static PolicyControllerMonitoringConfigBackendsItem MonitoringBackendUnspecified { get; } = new PolicyControllerMonitoringConfigBackendsItem("MONITORING_BACKEND_UNSPECIFIED");
        /// <summary>
        /// Prometheus backend for monitoring
        /// </summary>
        public static PolicyControllerMonitoringConfigBackendsItem Prometheus { get; } = new PolicyControllerMonitoringConfigBackendsItem("PROMETHEUS");
        /// <summary>
        /// Stackdriver/Cloud Monitoring backend for monitoring
        /// </summary>
        public static PolicyControllerMonitoringConfigBackendsItem CloudMonitoring { get; } = new PolicyControllerMonitoringConfigBackendsItem("CLOUD_MONITORING");

        public static bool operator ==(PolicyControllerMonitoringConfigBackendsItem left, PolicyControllerMonitoringConfigBackendsItem right) => left.Equals(right);
        public static bool operator !=(PolicyControllerMonitoringConfigBackendsItem left, PolicyControllerMonitoringConfigBackendsItem right) => !left.Equals(right);

        public static explicit operator string(PolicyControllerMonitoringConfigBackendsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyControllerMonitoringConfigBackendsItem other && Equals(other);
        public bool Equals(PolicyControllerMonitoringConfigBackendsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Pod affinity configuration.
    /// </summary>
    [EnumType]
    public readonly struct PolicyControllerPolicyControllerDeploymentConfigPodAffinity : IEquatable<PolicyControllerPolicyControllerDeploymentConfigPodAffinity>
    {
        private readonly string _value;

        private PolicyControllerPolicyControllerDeploymentConfigPodAffinity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No affinity configuration has been specified.
        /// </summary>
        public static PolicyControllerPolicyControllerDeploymentConfigPodAffinity AffinityUnspecified { get; } = new PolicyControllerPolicyControllerDeploymentConfigPodAffinity("AFFINITY_UNSPECIFIED");
        /// <summary>
        /// Affinity configurations will be removed from the deployment.
        /// </summary>
        public static PolicyControllerPolicyControllerDeploymentConfigPodAffinity NoAffinity { get; } = new PolicyControllerPolicyControllerDeploymentConfigPodAffinity("NO_AFFINITY");
        /// <summary>
        /// Anti-affinity configuration will be applied to this deployment. Default for admissions deployment.
        /// </summary>
        public static PolicyControllerPolicyControllerDeploymentConfigPodAffinity AntiAffinity { get; } = new PolicyControllerPolicyControllerDeploymentConfigPodAffinity("ANTI_AFFINITY");

        public static bool operator ==(PolicyControllerPolicyControllerDeploymentConfigPodAffinity left, PolicyControllerPolicyControllerDeploymentConfigPodAffinity right) => left.Equals(right);
        public static bool operator !=(PolicyControllerPolicyControllerDeploymentConfigPodAffinity left, PolicyControllerPolicyControllerDeploymentConfigPodAffinity right) => !left.Equals(right);

        public static explicit operator string(PolicyControllerPolicyControllerDeploymentConfigPodAffinity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyControllerPolicyControllerDeploymentConfigPodAffinity other && Equals(other);
        public bool Equals(PolicyControllerPolicyControllerDeploymentConfigPodAffinity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configures the manner in which the template library is installed on the cluster.
    /// </summary>
    [EnumType]
    public readonly struct PolicyControllerTemplateLibraryConfigInstallation : IEquatable<PolicyControllerTemplateLibraryConfigInstallation>
    {
        private readonly string _value;

        private PolicyControllerTemplateLibraryConfigInstallation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No installation strategy has been specified.
        /// </summary>
        public static PolicyControllerTemplateLibraryConfigInstallation InstallationUnspecified { get; } = new PolicyControllerTemplateLibraryConfigInstallation("INSTALLATION_UNSPECIFIED");
        /// <summary>
        /// Do not install the template library.
        /// </summary>
        public static PolicyControllerTemplateLibraryConfigInstallation NotInstalled { get; } = new PolicyControllerTemplateLibraryConfigInstallation("NOT_INSTALLED");
        /// <summary>
        /// Install the entire template library.
        /// </summary>
        public static PolicyControllerTemplateLibraryConfigInstallation All { get; } = new PolicyControllerTemplateLibraryConfigInstallation("ALL");

        public static bool operator ==(PolicyControllerTemplateLibraryConfigInstallation left, PolicyControllerTemplateLibraryConfigInstallation right) => left.Equals(right);
        public static bool operator !=(PolicyControllerTemplateLibraryConfigInstallation left, PolicyControllerTemplateLibraryConfigInstallation right) => !left.Equals(right);

        public static explicit operator string(PolicyControllerTemplateLibraryConfigInstallation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyControllerTemplateLibraryConfigInstallation other && Equals(other);
        public bool Equals(PolicyControllerTemplateLibraryConfigInstallation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// predefined_role is the Kubernetes default role to use
    /// </summary>
    [EnumType]
    public readonly struct RolePredefinedRole : IEquatable<RolePredefinedRole>
    {
        private readonly string _value;

        private RolePredefinedRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// UNKNOWN
        /// </summary>
        public static RolePredefinedRole Unknown { get; } = new RolePredefinedRole("UNKNOWN");
        /// <summary>
        /// ADMIN has EDIT and RBAC permissions
        /// </summary>
        public static RolePredefinedRole Admin { get; } = new RolePredefinedRole("ADMIN");
        /// <summary>
        /// EDIT can edit all resources except RBAC
        /// </summary>
        public static RolePredefinedRole Edit { get; } = new RolePredefinedRole("EDIT");
        /// <summary>
        /// VIEW can only read resources
        /// </summary>
        public static RolePredefinedRole View { get; } = new RolePredefinedRole("VIEW");
        /// <summary>
        /// ANTHOS_SUPPORT gives Google Support read-only access to a number of cluster resources.
        /// </summary>
        public static RolePredefinedRole AnthosSupport { get; } = new RolePredefinedRole("ANTHOS_SUPPORT");

        public static bool operator ==(RolePredefinedRole left, RolePredefinedRole right) => left.Equals(right);
        public static bool operator !=(RolePredefinedRole left, RolePredefinedRole right) => !left.Equals(right);

        public static explicit operator string(RolePredefinedRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RolePredefinedRole other && Equals(other);
        public bool Equals(RolePredefinedRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets which mode to use for Security Posture features.
    /// </summary>
    [EnumType]
    public readonly struct SecurityPostureConfigMode : IEquatable<SecurityPostureConfigMode>
    {
        private readonly string _value;

        private SecurityPostureConfigMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value not specified.
        /// </summary>
        public static SecurityPostureConfigMode ModeUnspecified { get; } = new SecurityPostureConfigMode("MODE_UNSPECIFIED");
        /// <summary>
        /// Disables Security Posture features on the cluster.
        /// </summary>
        public static SecurityPostureConfigMode Disabled { get; } = new SecurityPostureConfigMode("DISABLED");
        /// <summary>
        /// Applies Security Posture features on the cluster.
        /// </summary>
        public static SecurityPostureConfigMode Basic { get; } = new SecurityPostureConfigMode("BASIC");

        public static bool operator ==(SecurityPostureConfigMode left, SecurityPostureConfigMode right) => left.Equals(right);
        public static bool operator !=(SecurityPostureConfigMode left, SecurityPostureConfigMode right) => !left.Equals(right);

        public static explicit operator string(SecurityPostureConfigMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityPostureConfigMode other && Equals(other);
        public bool Equals(SecurityPostureConfigMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets which mode to use for vulnerability scanning.
    /// </summary>
    [EnumType]
    public readonly struct SecurityPostureConfigVulnerabilityMode : IEquatable<SecurityPostureConfigVulnerabilityMode>
    {
        private readonly string _value;

        private SecurityPostureConfigVulnerabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value not specified.
        /// </summary>
        public static SecurityPostureConfigVulnerabilityMode VulnerabilityModeUnspecified { get; } = new SecurityPostureConfigVulnerabilityMode("VULNERABILITY_MODE_UNSPECIFIED");
        /// <summary>
        /// Disables vulnerability scanning on the cluster.
        /// </summary>
        public static SecurityPostureConfigVulnerabilityMode VulnerabilityDisabled { get; } = new SecurityPostureConfigVulnerabilityMode("VULNERABILITY_DISABLED");
        /// <summary>
        /// Applies basic vulnerability scanning on the cluster.
        /// </summary>
        public static SecurityPostureConfigVulnerabilityMode VulnerabilityBasic { get; } = new SecurityPostureConfigVulnerabilityMode("VULNERABILITY_BASIC");
        /// <summary>
        /// Applies the Security Posture's vulnerability on cluster Enterprise level features.
        /// </summary>
        public static SecurityPostureConfigVulnerabilityMode VulnerabilityEnterprise { get; } = new SecurityPostureConfigVulnerabilityMode("VULNERABILITY_ENTERPRISE");

        public static bool operator ==(SecurityPostureConfigVulnerabilityMode left, SecurityPostureConfigVulnerabilityMode right) => left.Equals(right);
        public static bool operator !=(SecurityPostureConfigVulnerabilityMode left, SecurityPostureConfigVulnerabilityMode right) => !left.Equals(right);

        public static explicit operator string(SecurityPostureConfigVulnerabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityPostureConfigVulnerabilityMode other && Equals(other);
        public bool Equals(SecurityPostureConfigVulnerabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Deprecated: use `management` instead Enables automatic control plane management.
    /// </summary>
    [EnumType]
    public readonly struct ServiceMeshMembershipSpecControlPlane : IEquatable<ServiceMeshMembershipSpecControlPlane>
    {
        private readonly string _value;

        private ServiceMeshMembershipSpecControlPlane(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified
        /// </summary>
        public static ServiceMeshMembershipSpecControlPlane ControlPlaneManagementUnspecified { get; } = new ServiceMeshMembershipSpecControlPlane("CONTROL_PLANE_MANAGEMENT_UNSPECIFIED");
        /// <summary>
        /// Google should provision a control plane revision and make it available in the cluster. Google will enroll this revision in a release channel and keep it up to date. The control plane revision may be a managed service, or a managed install.
        /// </summary>
        public static ServiceMeshMembershipSpecControlPlane Automatic { get; } = new ServiceMeshMembershipSpecControlPlane("AUTOMATIC");
        /// <summary>
        /// User will manually configure the control plane (e.g. via CLI, or via the ControlPlaneRevision KRM API)
        /// </summary>
        public static ServiceMeshMembershipSpecControlPlane Manual { get; } = new ServiceMeshMembershipSpecControlPlane("MANUAL");

        public static bool operator ==(ServiceMeshMembershipSpecControlPlane left, ServiceMeshMembershipSpecControlPlane right) => left.Equals(right);
        public static bool operator !=(ServiceMeshMembershipSpecControlPlane left, ServiceMeshMembershipSpecControlPlane right) => !left.Equals(right);

        public static explicit operator string(ServiceMeshMembershipSpecControlPlane value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceMeshMembershipSpecControlPlane other && Equals(other);
        public bool Equals(ServiceMeshMembershipSpecControlPlane other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines which release channel to use for default injection and service mesh APIs.
    /// </summary>
    [EnumType]
    public readonly struct ServiceMeshMembershipSpecDefaultChannel : IEquatable<ServiceMeshMembershipSpecDefaultChannel>
    {
        private readonly string _value;

        private ServiceMeshMembershipSpecDefaultChannel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified
        /// </summary>
        public static ServiceMeshMembershipSpecDefaultChannel ChannelUnspecified { get; } = new ServiceMeshMembershipSpecDefaultChannel("CHANNEL_UNSPECIFIED");
        /// <summary>
        /// RAPID channel is offered on an early access basis for customers who want to test new releases.
        /// </summary>
        public static ServiceMeshMembershipSpecDefaultChannel Rapid { get; } = new ServiceMeshMembershipSpecDefaultChannel("RAPID");
        /// <summary>
        /// REGULAR channel is intended for production users who want to take advantage of new features.
        /// </summary>
        public static ServiceMeshMembershipSpecDefaultChannel Regular { get; } = new ServiceMeshMembershipSpecDefaultChannel("REGULAR");
        /// <summary>
        /// STABLE channel includes versions that are known to be stable and reliable in production.
        /// </summary>
        public static ServiceMeshMembershipSpecDefaultChannel Stable { get; } = new ServiceMeshMembershipSpecDefaultChannel("STABLE");

        public static bool operator ==(ServiceMeshMembershipSpecDefaultChannel left, ServiceMeshMembershipSpecDefaultChannel right) => left.Equals(right);
        public static bool operator !=(ServiceMeshMembershipSpecDefaultChannel left, ServiceMeshMembershipSpecDefaultChannel right) => !left.Equals(right);

        public static explicit operator string(ServiceMeshMembershipSpecDefaultChannel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceMeshMembershipSpecDefaultChannel other && Equals(other);
        public bool Equals(ServiceMeshMembershipSpecDefaultChannel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enables automatic Service Mesh management.
    /// </summary>
    [EnumType]
    public readonly struct ServiceMeshMembershipSpecManagement : IEquatable<ServiceMeshMembershipSpecManagement>
    {
        private readonly string _value;

        private ServiceMeshMembershipSpecManagement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified
        /// </summary>
        public static ServiceMeshMembershipSpecManagement ManagementUnspecified { get; } = new ServiceMeshMembershipSpecManagement("MANAGEMENT_UNSPECIFIED");
        /// <summary>
        /// Google should manage my Service Mesh for the cluster.
        /// </summary>
        public static ServiceMeshMembershipSpecManagement ManagementAutomatic { get; } = new ServiceMeshMembershipSpecManagement("MANAGEMENT_AUTOMATIC");
        /// <summary>
        /// User will manually configure their service mesh components.
        /// </summary>
        public static ServiceMeshMembershipSpecManagement ManagementManual { get; } = new ServiceMeshMembershipSpecManagement("MANAGEMENT_MANUAL");

        public static bool operator ==(ServiceMeshMembershipSpecManagement left, ServiceMeshMembershipSpecManagement right) => left.Equals(right);
        public static bool operator !=(ServiceMeshMembershipSpecManagement left, ServiceMeshMembershipSpecManagement right) => !left.Equals(right);

        public static explicit operator string(ServiceMeshMembershipSpecManagement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceMeshMembershipSpecManagement other && Equals(other);
        public bool Equals(ServiceMeshMembershipSpecManagement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
