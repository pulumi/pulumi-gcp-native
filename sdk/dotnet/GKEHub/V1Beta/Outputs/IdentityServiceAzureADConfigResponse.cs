// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.GKEHub.V1Beta.Outputs
{

    /// <summary>
    /// Configuration for the AzureAD Auth flow.
    /// </summary>
    [OutputType]
    public sealed class IdentityServiceAzureADConfigResponse
    {
        /// <summary>
        /// ID for the registered client application that makes authentication requests to the Azure AD identity provider.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.
        /// </summary>
        public readonly string ClientSecret;
        /// <summary>
        /// Encrypted AzureAD client secret.
        /// </summary>
        public readonly string EncryptedClientSecret;
        /// <summary>
        /// Optional. Format of the AzureAD groups that the client wants for auth.
        /// </summary>
        public readonly string GroupFormat;
        /// <summary>
        /// The redirect URL that kubectl uses for authorization.
        /// </summary>
        public readonly string KubectlRedirectUri;
        /// <summary>
        /// Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.
        /// </summary>
        public readonly string Tenant;
        /// <summary>
        /// Optional. Claim in the AzureAD ID Token that holds the user details.
        /// </summary>
        public readonly string UserClaim;

        [OutputConstructor]
        private IdentityServiceAzureADConfigResponse(
            string clientId,

            string clientSecret,

            string encryptedClientSecret,

            string groupFormat,

            string kubectlRedirectUri,

            string tenant,

            string userClaim)
        {
            ClientId = clientId;
            ClientSecret = clientSecret;
            EncryptedClientSecret = encryptedClientSecret;
            GroupFormat = groupFormat;
            KubectlRedirectUri = kubectlRedirectUri;
            Tenant = tenant;
            UserClaim = userClaim;
        }
    }
}
