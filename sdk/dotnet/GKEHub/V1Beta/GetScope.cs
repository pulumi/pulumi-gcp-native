// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.GKEHub.V1Beta
{
    public static class GetScope
    {
        /// <summary>
        /// Returns the details of a Scope.
        /// </summary>
        public static Task<GetScopeResult> InvokeAsync(GetScopeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScopeResult>("google-native:gkehub/v1beta:getScope", args ?? new GetScopeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the details of a Scope.
        /// </summary>
        public static Output<GetScopeResult> Invoke(GetScopeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScopeResult>("google-native:gkehub/v1beta:getScope", args ?? new GetScopeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScopeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("scopeId", required: true)]
        public string ScopeId { get; set; } = null!;

        public GetScopeArgs()
        {
        }
        public static new GetScopeArgs Empty => new GetScopeArgs();
    }

    public sealed class GetScopeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("scopeId", required: true)]
        public Input<string> ScopeId { get; set; } = null!;

        public GetScopeInvokeArgs()
        {
        }
        public static new GetScopeInvokeArgs Empty => new GetScopeInvokeArgs();
    }


    [OutputType]
    public sealed class GetScopeResult
    {
        /// <summary>
        /// When the scope was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// When the scope was deleted.
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// Optional. Labels for this Scope.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name for the scope `projects/{project}/locations/{location}/scopes/{scope}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each namespace under the Scope. Scope-level labels take precedence over Namespace-level labels (`namespace_labels` in the Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
        /// </summary>
        public readonly ImmutableDictionary<string, string> NamespaceLabels;
        /// <summary>
        /// State of the scope resource.
        /// </summary>
        public readonly Outputs.ScopeLifecycleStateResponse State;
        /// <summary>
        /// Google-generated UUID for this resource. This is unique across all scope resources. If a scope resource is deleted and another resource with the same name is created, it gets a different uid.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// When the scope was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetScopeResult(
            string createTime,

            string deleteTime,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableDictionary<string, string> namespaceLabels,

            Outputs.ScopeLifecycleStateResponse state,

            string uid,

            string updateTime)
        {
            CreateTime = createTime;
            DeleteTime = deleteTime;
            Labels = labels;
            Name = name;
            NamespaceLabels = namespaceLabels;
            State = state;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
