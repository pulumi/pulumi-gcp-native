// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Securitycenter.V1Beta1
{
    /// <summary>
    /// Creates a finding. The corresponding source must exist for finding creation to succeed.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:securitycenter/v1beta1:OrganizationSourceFinding")]
    public partial class OrganizationSourceFinding : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a OrganizationSourceFinding resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationSourceFinding(string name, OrganizationSourceFindingArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:securitycenter/v1beta1:OrganizationSourceFinding", name, args ?? new OrganizationSourceFindingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationSourceFinding(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:securitycenter/v1beta1:OrganizationSourceFinding", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationSourceFinding resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationSourceFinding Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new OrganizationSourceFinding(name, id, options);
        }
    }

    public sealed class OrganizationSourceFindingArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The additional taxonomy group within findings from a given source. This field is immutable after creation time. Example: "XSS_FLASH_INJECTION"
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// The time at which the finding was created in Security Command Center.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The time at which the event took place, or when an update to the finding occurred. For example, if the finding represents an open firewall it would capture the time the detector believes the firewall became open. The accuracy is determined by the detector. If the finding were to be resolved afterward, this time would reflect when the finding was resolved.
        /// </summary>
        [Input("eventTime")]
        public Input<string>? EventTime { get; set; }

        /// <summary>
        /// The URI that, if available, points to a web page outside of Security Command Center where additional information about the finding can be found. This field is guaranteed to be either empty or a well formed URL.
        /// </summary>
        [Input("externalUri")]
        public Input<string>? ExternalUri { get; set; }

        /// <summary>
        /// The relative resource name of this finding. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organizationsId", required: true)]
        public Input<string> OrganizationsId { get; set; } = null!;

        /// <summary>
        /// Immutable. The relative resource name of the source the finding belongs to. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name This field is immutable after creation time. For example: "organizations/{organization_id}/sources/{source_id}"
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// For findings on Google Cloud resources, the full resource name of the Google Cloud resource this finding is for. See: https://cloud.google.com/apis/design/resource_names#full_resource_name When the finding is for a non-Google Cloud resource, the resourceName can be a customer or partner defined string. This field is immutable after creation time.
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        [Input("sourceProperties")]
        private InputMap<string>? _sourceProperties;

        /// <summary>
        /// Source specific properties. These properties are managed by the source that writes the finding. The key names in the source_properties map must be between 1 and 255 characters, and must start with a letter and contain alphanumeric characters or underscores only.
        /// </summary>
        public InputMap<string> SourceProperties
        {
            get => _sourceProperties ?? (_sourceProperties = new InputMap<string>());
            set => _sourceProperties = value;
        }

        [Input("sourcesId", required: true)]
        public Input<string> SourcesId { get; set; } = null!;

        /// <summary>
        /// The state of the finding.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public OrganizationSourceFindingArgs()
        {
        }
    }
}
