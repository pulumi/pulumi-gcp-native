// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Securitycenter.V1
{
    public static class GetOrganizationMuteConfig
    {
        /// <summary>
        /// Gets a mute config.
        /// </summary>
        public static Task<GetOrganizationMuteConfigResult> InvokeAsync(GetOrganizationMuteConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationMuteConfigResult>("google-native:securitycenter/v1:getOrganizationMuteConfig", args ?? new GetOrganizationMuteConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a mute config.
        /// </summary>
        public static Output<GetOrganizationMuteConfigResult> Invoke(GetOrganizationMuteConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationMuteConfigResult>("google-native:securitycenter/v1:getOrganizationMuteConfig", args ?? new GetOrganizationMuteConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrganizationMuteConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("muteConfigId", required: true)]
        public string MuteConfigId { get; set; } = null!;

        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        public GetOrganizationMuteConfigArgs()
        {
        }
        public static new GetOrganizationMuteConfigArgs Empty => new GetOrganizationMuteConfigArgs();
    }

    public sealed class GetOrganizationMuteConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("muteConfigId", required: true)]
        public Input<string> MuteConfigId { get; set; } = null!;

        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        public GetOrganizationMuteConfigInvokeArgs()
        {
        }
        public static new GetOrganizationMuteConfigInvokeArgs Empty => new GetOrganizationMuteConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrganizationMuteConfigResult
    {
        /// <summary>
        /// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config creation.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// A description of the mute config.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The human readable name to be displayed for the mute config.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// An expression that defines the filter to apply across create/update events of findings. While creating a filter string, be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is created under the project = Y scope, it might not match any findings. The following field and operator combinations are supported: * severity: `=`, `:` * category: `=`, `:` * resource.name: `=`, `:` * resource.project_name: `=`, `:` * resource.project_display_name: `=`, `:` * resource.folders.resource_folder: `=`, `:` * resource.parent_name: `=`, `:` * resource.parent_display_name: `=`, `:` * resource.type: `=`, `:` * finding_class: `=`, `:` * indicator.ip_addresses: `=`, `:` * indicator.domains: `=`, `:`
        /// </summary>
        public readonly string Filter;
        /// <summary>
        /// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if provided on config creation or update.
        /// </summary>
        public readonly string MostRecentEditor;
        /// <summary>
        /// This field will be ignored if provided on config creation. Format "organizations/{organization}/muteConfigs/{mute_config}" "folders/{folder}/muteConfigs/{mute_config}" "projects/{project}/muteConfigs/{mute_config}"
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The most recent time at which the mute config was updated. This field is set by the server and will be ignored if provided on config creation or update.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetOrganizationMuteConfigResult(
            string createTime,

            string description,

            string displayName,

            string filter,

            string mostRecentEditor,

            string name,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            Filter = filter;
            MostRecentEditor = mostRecentEditor;
            Name = name;
            UpdateTime = updateTime;
        }
    }
}
