// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1Beta1
{
    public static class GetArtifact
    {
        /// <summary>
        /// Retrieves a specific Artifact.
        /// </summary>
        public static Task<GetArtifactResult> InvokeAsync(GetArtifactArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetArtifactResult>("google-native:aiplatform/v1beta1:getArtifact", args ?? new GetArtifactArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a specific Artifact.
        /// </summary>
        public static Output<GetArtifactResult> Invoke(GetArtifactInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetArtifactResult>("google-native:aiplatform/v1beta1:getArtifact", args ?? new GetArtifactInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetArtifactArgs : global::Pulumi.InvokeArgs
    {
        [Input("artifactId", required: true)]
        public string ArtifactId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("metadataStoreId", required: true)]
        public string MetadataStoreId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetArtifactArgs()
        {
        }
        public static new GetArtifactArgs Empty => new GetArtifactArgs();
    }

    public sealed class GetArtifactInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("artifactId", required: true)]
        public Input<string> ArtifactId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("metadataStoreId", required: true)]
        public Input<string> MetadataStoreId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetArtifactInvokeArgs()
        {
        }
        public static new GetArtifactInvokeArgs Empty => new GetArtifactInvokeArgs();
    }


    [OutputType]
    public sealed class GetArtifactResult
    {
        /// <summary>
        /// Timestamp when this Artifact was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Description of the Artifact
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User provided display name of the Artifact. May be up to 128 Unicode characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The labels with user-defined metadata to organize your Artifacts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Artifact (System labels are excluded).
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Properties of the Artifact. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Metadata;
        /// <summary>
        /// The resource name of the Artifact.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
        /// </summary>
        public readonly string SchemaTitle;
        /// <summary>
        /// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
        /// </summary>
        public readonly string SchemaVersion;
        /// <summary>
        /// The state of this Artifact. This is a property of the Artifact, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines), and the system does not prescribe or check the validity of state transitions.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Timestamp when this Artifact was last updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The uniform resource identifier of the artifact file. May be empty if there is no actual artifact file.
        /// </summary>
        public readonly string Uri;

        [OutputConstructor]
        private GetArtifactResult(
            string createTime,

            string description,

            string displayName,

            string etag,

            ImmutableDictionary<string, string> labels,

            ImmutableDictionary<string, object> metadata,

            string name,

            string schemaTitle,

            string schemaVersion,

            string state,

            string updateTime,

            string uri)
        {
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            Etag = etag;
            Labels = labels;
            Metadata = metadata;
            Name = name;
            SchemaTitle = schemaTitle;
            SchemaVersion = schemaVersion;
            State = state;
            UpdateTime = updateTime;
            Uri = uri;
        }
    }
}
