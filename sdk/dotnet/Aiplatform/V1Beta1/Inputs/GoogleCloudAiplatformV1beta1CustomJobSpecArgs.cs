// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1Beta1.Inputs
{

    /// <summary>
    /// Represents the spec of a CustomJob.
    /// </summary>
    public sealed class GoogleCloudAiplatformV1beta1CustomJobSpecArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Cloud Storage location to store the output of this CustomJob or HyperparameterTuningJob. For HyperparameterTuningJob, the baseOutputDirectory of each child CustomJob backing a Trial is set to a subdirectory of name id under its parent HyperparameterTuningJob's baseOutputDirectory. The following Vertex AI environment variables will be passed to containers or python modules when this field is set: For CustomJob: * AIP_MODEL_DIR = `/model/` * AIP_CHECKPOINT_DIR = `/checkpoints/` * AIP_TENSORBOARD_LOG_DIR = `/logs/` For CustomJob backing a Trial of HyperparameterTuningJob: * AIP_MODEL_DIR = `//model/` * AIP_CHECKPOINT_DIR = `//checkpoints/` * AIP_TENSORBOARD_LOG_DIR = `//logs/`
        /// </summary>
        [Input("baseOutputDirectory")]
        public Input<Inputs.GoogleCloudAiplatformV1beta1GcsDestinationArgs>? BaseOutputDirectory { get; set; }

        /// <summary>
        /// Optional. Whether you want Vertex AI to enable access to the customized dashboard in training chief container. If set to `true`, you can access the dashboard at the URIs given by CustomJob.web_access_uris or Trial.web_access_uris (within HyperparameterTuningJob.trials).
        /// </summary>
        [Input("enableDashboardAccess")]
        public Input<bool>? EnableDashboardAccess { get; set; }

        /// <summary>
        /// Optional. Whether you want Vertex AI to enable [interactive shell access](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) to training containers. If set to `true`, you can access interactive shells at the URIs given by CustomJob.web_access_uris or Trial.web_access_uris (within HyperparameterTuningJob.trials).
        /// </summary>
        [Input("enableWebAccess")]
        public Input<bool>? EnableWebAccess { get; set; }

        /// <summary>
        /// Optional. The Experiment associated with this job. Format: `projects/{project}/locations/{location}/metadataStores/{metadataStores}/contexts/{experiment-name}`
        /// </summary>
        [Input("experiment")]
        public Input<string>? Experiment { get; set; }

        /// <summary>
        /// Optional. The Experiment Run associated with this job. Format: `projects/{project}/locations/{location}/metadataStores/{metadataStores}/contexts/{experiment-name}-{experiment-run-name}`
        /// </summary>
        [Input("experimentRun")]
        public Input<string>? ExperimentRun { get; set; }

        /// <summary>
        /// Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the job is not peered with any network.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// Optional. The ID of the PersistentResource in the same Project and Location which to run If this is specified, the job will be run on existing machines held by the PersistentResource instead of on-demand short-live machines. The network and CMEK configs on the job should be consistent with those on the PersistentResource, otherwise, the job will be rejected.
        /// </summary>
        [Input("persistentResourceId")]
        public Input<string>? PersistentResourceId { get; set; }

        /// <summary>
        /// The ID of the location to store protected artifacts. e.g. us-central1. Populate only when the location is different than CustomJob location. List of supported locations: https://cloud.google.com/vertex-ai/docs/general/locations
        /// </summary>
        [Input("protectedArtifactLocationId")]
        public Input<string>? ProtectedArtifactLocationId { get; set; }

        [Input("reservedIpRanges")]
        private InputList<string>? _reservedIpRanges;

        /// <summary>
        /// Optional. A list of names for the reserved ip ranges under the VPC network that can be used for this job. If set, we will deploy the job within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
        /// </summary>
        public InputList<string> ReservedIpRanges
        {
            get => _reservedIpRanges ?? (_reservedIpRanges = new InputList<string>());
            set => _reservedIpRanges = value;
        }

        /// <summary>
        /// Scheduling options for a CustomJob.
        /// </summary>
        [Input("scheduling")]
        public Input<Inputs.GoogleCloudAiplatformV1beta1SchedulingArgs>? Scheduling { get; set; }

        /// <summary>
        /// Specifies the service account for workload run-as account. Users submitting jobs must have act-as permission on this run-as account. If unspecified, the [Vertex AI Custom Code Service Agent](https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) for the CustomJob's project is used.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// Optional. The name of a Vertex AI Tensorboard resource to which this CustomJob will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
        /// </summary>
        [Input("tensorboard")]
        public Input<string>? Tensorboard { get; set; }

        [Input("workerPoolSpecs", required: true)]
        private InputList<Inputs.GoogleCloudAiplatformV1beta1WorkerPoolSpecArgs>? _workerPoolSpecs;

        /// <summary>
        /// The spec of the worker pools including machine type and Docker image. All worker pools except the first one are optional and can be skipped by providing an empty value.
        /// </summary>
        public InputList<Inputs.GoogleCloudAiplatformV1beta1WorkerPoolSpecArgs> WorkerPoolSpecs
        {
            get => _workerPoolSpecs ?? (_workerPoolSpecs = new InputList<Inputs.GoogleCloudAiplatformV1beta1WorkerPoolSpecArgs>());
            set => _workerPoolSpecs = value;
        }

        public GoogleCloudAiplatformV1beta1CustomJobSpecArgs()
        {
        }
        public static new GoogleCloudAiplatformV1beta1CustomJobSpecArgs Empty => new GoogleCloudAiplatformV1beta1CustomJobSpecArgs();
    }
}
