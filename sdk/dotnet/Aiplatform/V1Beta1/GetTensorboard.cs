// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1Beta1
{
    public static class GetTensorboard
    {
        /// <summary>
        /// Gets a Tensorboard.
        /// </summary>
        public static Task<GetTensorboardResult> InvokeAsync(GetTensorboardArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTensorboardResult>("google-native:aiplatform/v1beta1:getTensorboard", args ?? new GetTensorboardArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Tensorboard.
        /// </summary>
        public static Output<GetTensorboardResult> Invoke(GetTensorboardInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTensorboardResult>("google-native:aiplatform/v1beta1:getTensorboard", args ?? new GetTensorboardInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTensorboardArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("tensorboardId", required: true)]
        public string TensorboardId { get; set; } = null!;

        public GetTensorboardArgs()
        {
        }
        public static new GetTensorboardArgs Empty => new GetTensorboardArgs();
    }

    public sealed class GetTensorboardInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tensorboardId", required: true)]
        public Input<string> TensorboardId { get; set; } = null!;

        public GetTensorboardInvokeArgs()
        {
        }
        public static new GetTensorboardInvokeArgs Empty => new GetTensorboardInvokeArgs();
    }


    [OutputType]
    public sealed class GetTensorboardResult
    {
        /// <summary>
        /// Consumer project Cloud Storage path prefix used to store blob data, which can either be a bucket or directory. Does not end with a '/'.
        /// </summary>
        public readonly string BlobStoragePathPrefix;
        /// <summary>
        /// Timestamp when this Tensorboard was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Description of this Tensorboard.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User provided name of this Tensorboard.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
        /// </summary>
        public readonly Outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse EncryptionSpec;
        /// <summary>
        /// Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Used to indicate if the TensorBoard instance is the default one. Each project &amp; region can have at most one default TensorBoard instance. Creation of a default TensorBoard instance and updating an existing TensorBoard instance to be default will mark all other TensorBoard instances (if any) as non default.
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// The labels with user-defined metadata to organize your Tensorboards. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Tensorboard (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Name of the Tensorboard. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of Runs stored in this Tensorboard.
        /// </summary>
        public readonly int RunCount;
        /// <summary>
        /// Timestamp when this Tensorboard was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetTensorboardResult(
            string blobStoragePathPrefix,

            string createTime,

            string description,

            string displayName,

            Outputs.GoogleCloudAiplatformV1beta1EncryptionSpecResponse encryptionSpec,

            string etag,

            bool isDefault,

            ImmutableDictionary<string, string> labels,

            string name,

            int runCount,

            string updateTime)
        {
            BlobStoragePathPrefix = blobStoragePathPrefix;
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            EncryptionSpec = encryptionSpec;
            Etag = etag;
            IsDefault = isDefault;
            Labels = labels;
            Name = name;
            RunCount = runCount;
            UpdateTime = updateTime;
        }
    }
}
