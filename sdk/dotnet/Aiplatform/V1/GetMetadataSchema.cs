// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1
{
    public static class GetMetadataSchema
    {
        /// <summary>
        /// Retrieves a specific MetadataSchema.
        /// </summary>
        public static Task<GetMetadataSchemaResult> InvokeAsync(GetMetadataSchemaArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetadataSchemaResult>("google-native:aiplatform/v1:getMetadataSchema", args ?? new GetMetadataSchemaArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a specific MetadataSchema.
        /// </summary>
        public static Output<GetMetadataSchemaResult> Invoke(GetMetadataSchemaInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetadataSchemaResult>("google-native:aiplatform/v1:getMetadataSchema", args ?? new GetMetadataSchemaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetadataSchemaArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("metadataSchemaId", required: true)]
        public string MetadataSchemaId { get; set; } = null!;

        [Input("metadataStoreId", required: true)]
        public string MetadataStoreId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetMetadataSchemaArgs()
        {
        }
        public static new GetMetadataSchemaArgs Empty => new GetMetadataSchemaArgs();
    }

    public sealed class GetMetadataSchemaInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("metadataSchemaId", required: true)]
        public Input<string> MetadataSchemaId { get; set; } = null!;

        [Input("metadataStoreId", required: true)]
        public Input<string> MetadataStoreId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetMetadataSchemaInvokeArgs()
        {
        }
        public static new GetMetadataSchemaInvokeArgs Empty => new GetMetadataSchemaInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetadataSchemaResult
    {
        /// <summary>
        /// Timestamp when this MetadataSchema was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Description of the Metadata Schema
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The resource name of the MetadataSchema.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
        /// </summary>
        public readonly string Schema;
        /// <summary>
        /// The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
        /// </summary>
        public readonly string SchemaType;
        /// <summary>
        /// The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
        /// </summary>
        public readonly string SchemaVersion;

        [OutputConstructor]
        private GetMetadataSchemaResult(
            string createTime,

            string description,

            string name,

            string schema,

            string schemaType,

            string schemaVersion)
        {
            CreateTime = createTime;
            Description = description;
            Name = name;
            Schema = schema;
            SchemaType = schemaType;
            SchemaVersion = schemaVersion;
        }
    }
}
