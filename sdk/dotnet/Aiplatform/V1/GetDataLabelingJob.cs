// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1
{
    public static class GetDataLabelingJob
    {
        /// <summary>
        /// Gets a DataLabelingJob.
        /// </summary>
        public static Task<GetDataLabelingJobResult> InvokeAsync(GetDataLabelingJobArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataLabelingJobResult>("google-native:aiplatform/v1:getDataLabelingJob", args ?? new GetDataLabelingJobArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a DataLabelingJob.
        /// </summary>
        public static Output<GetDataLabelingJobResult> Invoke(GetDataLabelingJobInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataLabelingJobResult>("google-native:aiplatform/v1:getDataLabelingJob", args ?? new GetDataLabelingJobInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataLabelingJobArgs : global::Pulumi.InvokeArgs
    {
        [Input("dataLabelingJobId", required: true)]
        public string DataLabelingJobId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDataLabelingJobArgs()
        {
        }
        public static new GetDataLabelingJobArgs Empty => new GetDataLabelingJobArgs();
    }

    public sealed class GetDataLabelingJobInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("dataLabelingJobId", required: true)]
        public Input<string> DataLabelingJobId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDataLabelingJobInvokeArgs()
        {
        }
        public static new GetDataLabelingJobInvokeArgs Empty => new GetDataLabelingJobInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataLabelingJobResult
    {
        /// <summary>
        /// Parameters that configure the active learning pipeline. Active learning will label the data incrementally via several iterations. For every iteration, it will select a batch of data based on the sampling strategy.
        /// </summary>
        public readonly Outputs.GoogleCloudAiplatformV1ActiveLearningConfigResponse ActiveLearningConfig;
        /// <summary>
        /// Labels to assign to annotations generated by this DataLabelingJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
        /// </summary>
        public readonly ImmutableDictionary<string, string> AnnotationLabels;
        /// <summary>
        /// Timestamp when this DataLabelingJob was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Estimated cost(in US dollars) that the DataLabelingJob has incurred to date.
        /// </summary>
        public readonly Outputs.GoogleTypeMoneyResponse CurrentSpend;
        /// <summary>
        /// Dataset resource names. Right now we only support labeling from a single Dataset. Format: `projects/{project}/locations/{location}/datasets/{dataset}`
        /// </summary>
        public readonly ImmutableArray<string> Datasets;
        /// <summary>
        /// The user-defined name of the DataLabelingJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a DataLabelingJob.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Customer-managed encryption key spec for a DataLabelingJob. If set, this DataLabelingJob will be secured by this key. Note: Annotations created in the DataLabelingJob are associated with the EncryptionSpec of the Dataset they are exported to.
        /// </summary>
        public readonly Outputs.GoogleCloudAiplatformV1EncryptionSpecResponse EncryptionSpec;
        /// <summary>
        /// DataLabelingJob errors. It is only populated when job's state is `JOB_STATE_FAILED` or `JOB_STATE_CANCELLED`.
        /// </summary>
        public readonly Outputs.GoogleRpcStatusResponse Error;
        /// <summary>
        /// Input config parameters for the DataLabelingJob.
        /// </summary>
        public readonly object Inputs;
        /// <summary>
        /// Points to a YAML file stored on Google Cloud Storage describing the config for a specific type of DataLabelingJob. The schema files that can be used here are found in the https://storage.googleapis.com/google-cloud-aiplatform bucket in the /schema/datalabelingjob/inputs/ folder.
        /// </summary>
        public readonly string InputsSchemaUri;
        /// <summary>
        /// The Google Cloud Storage location of the instruction pdf. This pdf is shared with labelers, and provides detailed description on how to label DataItems in Datasets.
        /// </summary>
        public readonly string InstructionUri;
        /// <summary>
        /// Number of labelers to work on each DataItem.
        /// </summary>
        public readonly int LabelerCount;
        /// <summary>
        /// Current labeling job progress percentage scaled in interval [0, 100], indicating the percentage of DataItems that has been finished.
        /// </summary>
        public readonly int LabelingProgress;
        /// <summary>
        /// The labels with user-defined metadata to organize your DataLabelingJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable. Following system labels exist for each DataLabelingJob: * "aiplatform.googleapis.com/schema": output only, its value is the inputs_schema's title.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Resource name of the DataLabelingJob.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The SpecialistPools' resource names associated with this job.
        /// </summary>
        public readonly ImmutableArray<string> SpecialistPools;
        /// <summary>
        /// The detailed state of the job.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Timestamp when this DataLabelingJob was updated most recently.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetDataLabelingJobResult(
            Outputs.GoogleCloudAiplatformV1ActiveLearningConfigResponse activeLearningConfig,

            ImmutableDictionary<string, string> annotationLabels,

            string createTime,

            Outputs.GoogleTypeMoneyResponse currentSpend,

            ImmutableArray<string> datasets,

            string displayName,

            Outputs.GoogleCloudAiplatformV1EncryptionSpecResponse encryptionSpec,

            Outputs.GoogleRpcStatusResponse error,

            object inputs,

            string inputsSchemaUri,

            string instructionUri,

            int labelerCount,

            int labelingProgress,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<string> specialistPools,

            string state,

            string updateTime)
        {
            ActiveLearningConfig = activeLearningConfig;
            AnnotationLabels = annotationLabels;
            CreateTime = createTime;
            CurrentSpend = currentSpend;
            Datasets = datasets;
            DisplayName = displayName;
            EncryptionSpec = encryptionSpec;
            Error = error;
            Inputs = inputs;
            InputsSchemaUri = inputsSchemaUri;
            InstructionUri = instructionUri;
            LabelerCount = labelerCount;
            LabelingProgress = labelingProgress;
            Labels = labels;
            Name = name;
            SpecialistPools = specialistPools;
            State = state;
            UpdateTime = updateTime;
        }
    }
}
