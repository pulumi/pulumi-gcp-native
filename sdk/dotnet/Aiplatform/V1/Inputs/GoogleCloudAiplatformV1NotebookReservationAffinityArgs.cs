// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1.Inputs
{

    /// <summary>
    /// Notebook Reservation Affinity for consuming Zonal reservation.
    /// </summary>
    public sealed class GoogleCloudAiplatformV1NotebookReservationAffinityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the type of reservation from which this instance can consume resources: RESERVATION_ANY (default), RESERVATION_SPECIFIC, or RESERVATION_NONE. See Consuming reserved instances for examples.
        /// </summary>
        [Input("consumeReservationType", required: true)]
        public Input<Pulumi.GoogleNative.Aiplatform.V1.GoogleCloudAiplatformV1NotebookReservationAffinityConsumeReservationType> ConsumeReservationType { get; set; } = null!;

        /// <summary>
        /// Optional. Corresponds to the label key of a reservation resource. To target a RESERVATION_SPECIFIC by name, use compute.googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("values")]
        private InputList<string>? _values;

        /// <summary>
        /// Optional. Corresponds to the label values of a reservation resource. This must be the full path name of Reservation.
        /// </summary>
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public GoogleCloudAiplatformV1NotebookReservationAffinityArgs()
        {
        }
        public static new GoogleCloudAiplatformV1NotebookReservationAffinityArgs Empty => new GoogleCloudAiplatformV1NotebookReservationAffinityArgs();
    }
}
