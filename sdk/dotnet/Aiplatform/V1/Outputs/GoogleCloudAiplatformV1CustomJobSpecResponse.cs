// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1.Outputs
{

    /// <summary>
    /// Represents the spec of a CustomJob.
    /// </summary>
    [OutputType]
    public sealed class GoogleCloudAiplatformV1CustomJobSpecResponse
    {
        /// <summary>
        /// The Cloud Storage location to store the output of this CustomJob or HyperparameterTuningJob. For HyperparameterTuningJob, the baseOutputDirectory of each child CustomJob backing a Trial is set to a subdirectory of name id under its parent HyperparameterTuningJob's baseOutputDirectory. The following Vertex AI environment variables will be passed to containers or python modules when this field is set: For CustomJob: * AIP_MODEL_DIR = `/model/` * AIP_CHECKPOINT_DIR = `/checkpoints/` * AIP_TENSORBOARD_LOG_DIR = `/logs/` For CustomJob backing a Trial of HyperparameterTuningJob: * AIP_MODEL_DIR = `//model/` * AIP_CHECKPOINT_DIR = `//checkpoints/` * AIP_TENSORBOARD_LOG_DIR = `//logs/`
        /// </summary>
        public readonly Outputs.GoogleCloudAiplatformV1GcsDestinationResponse BaseOutputDirectory;
        /// <summary>
        /// Optional. Whether you want Vertex AI to enable access to the customized dashboard in training chief container. If set to `true`, you can access the dashboard at the URIs given by CustomJob.web_access_uris or Trial.web_access_uris (within HyperparameterTuningJob.trials).
        /// </summary>
        public readonly bool EnableDashboardAccess;
        /// <summary>
        /// Optional. Whether you want Vertex AI to enable [interactive shell access](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) to training containers. If set to `true`, you can access interactive shells at the URIs given by CustomJob.web_access_uris or Trial.web_access_uris (within HyperparameterTuningJob.trials).
        /// </summary>
        public readonly bool EnableWebAccess;
        /// <summary>
        /// Optional. The Experiment associated with this job. Format: `projects/{project}/locations/{location}/metadataStores/{metadataStores}/contexts/{experiment-name}`
        /// </summary>
        public readonly string Experiment;
        /// <summary>
        /// Optional. The Experiment Run associated with this job. Format: `projects/{project}/locations/{location}/metadataStores/{metadataStores}/contexts/{experiment-name}-{experiment-run-name}`
        /// </summary>
        public readonly string ExperimentRun;
        /// <summary>
        /// Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the job is not peered with any network.
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// The ID of the location to store protected artifacts. e.g. us-central1. Populate only when the location is different than CustomJob location. List of supported locations: https://cloud.google.com/vertex-ai/docs/general/locations
        /// </summary>
        public readonly string ProtectedArtifactLocationId;
        /// <summary>
        /// Optional. A list of names for the reserved ip ranges under the VPC network that can be used for this job. If set, we will deploy the job within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].
        /// </summary>
        public readonly ImmutableArray<string> ReservedIpRanges;
        /// <summary>
        /// Scheduling options for a CustomJob.
        /// </summary>
        public readonly Outputs.GoogleCloudAiplatformV1SchedulingResponse Scheduling;
        /// <summary>
        /// Specifies the service account for workload run-as account. Users submitting jobs must have act-as permission on this run-as account. If unspecified, the [Vertex AI Custom Code Service Agent](https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) for the CustomJob's project is used.
        /// </summary>
        public readonly string ServiceAccount;
        /// <summary>
        /// Optional. The name of a Vertex AI Tensorboard resource to which this CustomJob will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
        /// </summary>
        public readonly string Tensorboard;
        /// <summary>
        /// The spec of the worker pools including machine type and Docker image. All worker pools except the first one are optional and can be skipped by providing an empty value.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudAiplatformV1WorkerPoolSpecResponse> WorkerPoolSpecs;

        [OutputConstructor]
        private GoogleCloudAiplatformV1CustomJobSpecResponse(
            Outputs.GoogleCloudAiplatformV1GcsDestinationResponse baseOutputDirectory,

            bool enableDashboardAccess,

            bool enableWebAccess,

            string experiment,

            string experimentRun,

            string network,

            string protectedArtifactLocationId,

            ImmutableArray<string> reservedIpRanges,

            Outputs.GoogleCloudAiplatformV1SchedulingResponse scheduling,

            string serviceAccount,

            string tensorboard,

            ImmutableArray<Outputs.GoogleCloudAiplatformV1WorkerPoolSpecResponse> workerPoolSpecs)
        {
            BaseOutputDirectory = baseOutputDirectory;
            EnableDashboardAccess = enableDashboardAccess;
            EnableWebAccess = enableWebAccess;
            Experiment = experiment;
            ExperimentRun = experimentRun;
            Network = network;
            ProtectedArtifactLocationId = protectedArtifactLocationId;
            ReservedIpRanges = reservedIpRanges;
            Scheduling = scheduling;
            ServiceAccount = serviceAccount;
            Tensorboard = tensorboard;
            WorkerPoolSpecs = workerPoolSpecs;
        }
    }
}
