// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1
{
    public static class GetExperiment
    {
        /// <summary>
        /// Gets a TensorboardExperiment.
        /// </summary>
        public static Task<GetExperimentResult> InvokeAsync(GetExperimentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExperimentResult>("google-native:aiplatform/v1:getExperiment", args ?? new GetExperimentArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a TensorboardExperiment.
        /// </summary>
        public static Output<GetExperimentResult> Invoke(GetExperimentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExperimentResult>("google-native:aiplatform/v1:getExperiment", args ?? new GetExperimentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExperimentArgs : global::Pulumi.InvokeArgs
    {
        [Input("experimentId", required: true)]
        public string ExperimentId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("tensorboardId", required: true)]
        public string TensorboardId { get; set; } = null!;

        public GetExperimentArgs()
        {
        }
        public static new GetExperimentArgs Empty => new GetExperimentArgs();
    }

    public sealed class GetExperimentInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("experimentId", required: true)]
        public Input<string> ExperimentId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tensorboardId", required: true)]
        public Input<string> TensorboardId { get; set; } = null!;

        public GetExperimentInvokeArgs()
        {
        }
        public static new GetExperimentInvokeArgs Empty => new GetExperimentInvokeArgs();
    }


    [OutputType]
    public sealed class GetExperimentResult
    {
        /// <summary>
        /// Timestamp when this TensorboardExperiment was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Description of this TensorboardExperiment.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User provided name of this TensorboardExperiment.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The labels with user-defined metadata to organize your TensorboardExperiment. Label keys and values cannot be longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Dataset (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `aiplatform.googleapis.com/` and are immutable. The following system labels exist for each Dataset: * `aiplatform.googleapis.com/dataset_metadata_schema`: output only. Its value is the metadata_schema's title.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Name of the TensorboardExperiment. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Immutable. Source of the TensorboardExperiment. Example: a custom training job.
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// Timestamp when this TensorboardExperiment was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetExperimentResult(
            string createTime,

            string description,

            string displayName,

            string etag,

            ImmutableDictionary<string, string> labels,

            string name,

            string source,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            Etag = etag;
            Labels = labels;
            Name = name;
            Source = source;
            UpdateTime = updateTime;
        }
    }
}
