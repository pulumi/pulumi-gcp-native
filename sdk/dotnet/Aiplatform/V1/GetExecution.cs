// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1
{
    public static class GetExecution
    {
        /// <summary>
        /// Retrieves a specific Execution.
        /// </summary>
        public static Task<GetExecutionResult> InvokeAsync(GetExecutionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExecutionResult>("google-native:aiplatform/v1:getExecution", args ?? new GetExecutionArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a specific Execution.
        /// </summary>
        public static Output<GetExecutionResult> Invoke(GetExecutionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExecutionResult>("google-native:aiplatform/v1:getExecution", args ?? new GetExecutionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExecutionArgs : global::Pulumi.InvokeArgs
    {
        [Input("executionId", required: true)]
        public string ExecutionId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("metadataStoreId", required: true)]
        public string MetadataStoreId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetExecutionArgs()
        {
        }
        public static new GetExecutionArgs Empty => new GetExecutionArgs();
    }

    public sealed class GetExecutionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("executionId", required: true)]
        public Input<string> ExecutionId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("metadataStoreId", required: true)]
        public Input<string> MetadataStoreId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetExecutionInvokeArgs()
        {
        }
        public static new GetExecutionInvokeArgs Empty => new GetExecutionInvokeArgs();
    }


    [OutputType]
    public sealed class GetExecutionResult
    {
        /// <summary>
        /// Timestamp when this Execution was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Description of the Execution
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User provided display name of the Execution. May be up to 128 Unicode characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The labels with user-defined metadata to organize your Executions. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Execution (System labels are excluded).
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Properties of the Execution. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Metadata;
        /// <summary>
        /// The resource name of the Execution.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
        /// </summary>
        public readonly string SchemaTitle;
        /// <summary>
        /// The version of the schema in `schema_title` to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
        /// </summary>
        public readonly string SchemaVersion;
        /// <summary>
        /// The state of this Execution. This is a property of the Execution, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines) and the system does not prescribe or check the validity of state transitions.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Timestamp when this Execution was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetExecutionResult(
            string createTime,

            string description,

            string displayName,

            string etag,

            ImmutableDictionary<string, string> labels,

            ImmutableDictionary<string, object> metadata,

            string name,

            string schemaTitle,

            string schemaVersion,

            string state,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            Etag = etag;
            Labels = labels;
            Metadata = metadata;
            Name = name;
            SchemaTitle = schemaTitle;
            SchemaVersion = schemaVersion;
            State = state;
            UpdateTime = updateTime;
        }
    }
}
