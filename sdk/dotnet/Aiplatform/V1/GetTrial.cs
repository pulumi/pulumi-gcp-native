// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1
{
    public static class GetTrial
    {
        /// <summary>
        /// Gets a Trial.
        /// </summary>
        public static Task<GetTrialResult> InvokeAsync(GetTrialArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTrialResult>("google-native:aiplatform/v1:getTrial", args ?? new GetTrialArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Trial.
        /// </summary>
        public static Output<GetTrialResult> Invoke(GetTrialInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTrialResult>("google-native:aiplatform/v1:getTrial", args ?? new GetTrialInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTrialArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("studyId", required: true)]
        public string StudyId { get; set; } = null!;

        [Input("trialId", required: true)]
        public string TrialId { get; set; } = null!;

        public GetTrialArgs()
        {
        }
        public static new GetTrialArgs Empty => new GetTrialArgs();
    }

    public sealed class GetTrialInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("studyId", required: true)]
        public Input<string> StudyId { get; set; } = null!;

        [Input("trialId", required: true)]
        public Input<string> TrialId { get; set; } = null!;

        public GetTrialInvokeArgs()
        {
        }
        public static new GetTrialInvokeArgs Empty => new GetTrialInvokeArgs();
    }


    [OutputType]
    public sealed class GetTrialResult
    {
        /// <summary>
        /// The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.
        /// </summary>
        public readonly string CustomJob;
        /// <summary>
        /// Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.
        /// </summary>
        public readonly string EndTime;
        /// <summary>
        /// The final measurement containing the objective value.
        /// </summary>
        public readonly Outputs.GoogleCloudAiplatformV1MeasurementResponse FinalMeasurement;
        /// <summary>
        /// A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.
        /// </summary>
        public readonly string InfeasibleReason;
        /// <summary>
        /// A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudAiplatformV1MeasurementResponse> Measurements;
        /// <summary>
        /// Resource name of the Trial assigned by the service.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The parameters of the Trial.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudAiplatformV1TrialParameterResponse> Parameters;
        /// <summary>
        /// Time when the Trial was started.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// The detailed state of the Trial.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.
        /// </summary>
        public readonly ImmutableDictionary<string, string> WebAccessUris;

        [OutputConstructor]
        private GetTrialResult(
            string clientId,

            string customJob,

            string endTime,

            Outputs.GoogleCloudAiplatformV1MeasurementResponse finalMeasurement,

            string infeasibleReason,

            ImmutableArray<Outputs.GoogleCloudAiplatformV1MeasurementResponse> measurements,

            string name,

            ImmutableArray<Outputs.GoogleCloudAiplatformV1TrialParameterResponse> parameters,

            string startTime,

            string state,

            ImmutableDictionary<string, string> webAccessUris)
        {
            ClientId = clientId;
            CustomJob = customJob;
            EndTime = endTime;
            FinalMeasurement = finalMeasurement;
            InfeasibleReason = infeasibleReason;
            Measurements = measurements;
            Name = name;
            Parameters = parameters;
            StartTime = startTime;
            State = state;
            WebAccessUris = webAccessUris;
        }
    }
}
