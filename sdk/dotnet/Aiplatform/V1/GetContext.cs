// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Aiplatform.V1
{
    public static class GetContext
    {
        /// <summary>
        /// Retrieves a specific Context.
        /// </summary>
        public static Task<GetContextResult> InvokeAsync(GetContextArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContextResult>("google-native:aiplatform/v1:getContext", args ?? new GetContextArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a specific Context.
        /// </summary>
        public static Output<GetContextResult> Invoke(GetContextInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContextResult>("google-native:aiplatform/v1:getContext", args ?? new GetContextInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContextArgs : global::Pulumi.InvokeArgs
    {
        [Input("contextId", required: true)]
        public string ContextId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("metadataStoreId", required: true)]
        public string MetadataStoreId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetContextArgs()
        {
        }
        public static new GetContextArgs Empty => new GetContextArgs();
    }

    public sealed class GetContextInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("contextId", required: true)]
        public Input<string> ContextId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("metadataStoreId", required: true)]
        public Input<string> MetadataStoreId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetContextInvokeArgs()
        {
        }
        public static new GetContextInvokeArgs Empty => new GetContextInvokeArgs();
    }


    [OutputType]
    public sealed class GetContextResult
    {
        /// <summary>
        /// Timestamp when this Context was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Description of the Context
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User provided display name of the Context. May be up to 128 Unicode characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// An eTag used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Metadata;
        /// <summary>
        /// Immutable. The resource name of the Context.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of resource names of Contexts that are parents of this Context. A Context may have at most 10 parent_contexts.
        /// </summary>
        public readonly ImmutableArray<string> ParentContexts;
        /// <summary>
        /// The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
        /// </summary>
        public readonly string SchemaTitle;
        /// <summary>
        /// The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.
        /// </summary>
        public readonly string SchemaVersion;
        /// <summary>
        /// Timestamp when this Context was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetContextResult(
            string createTime,

            string description,

            string displayName,

            string etag,

            ImmutableDictionary<string, string> labels,

            ImmutableDictionary<string, object> metadata,

            string name,

            ImmutableArray<string> parentContexts,

            string schemaTitle,

            string schemaVersion,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            Etag = etag;
            Labels = labels;
            Metadata = metadata;
            Name = name;
            ParentContexts = parentContexts;
            SchemaTitle = schemaTitle;
            SchemaVersion = schemaVersion;
            UpdateTime = updateTime;
        }
    }
}
