// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Ml.V1
{
    /// <summary>
    /// Required. The optimization goal of the metric.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1_StudyConfig_MetricSpecGoal : IEquatable<GoogleCloudMlV1_StudyConfig_MetricSpecGoal>
    {
        private readonly string _value;

        private GoogleCloudMlV1_StudyConfig_MetricSpecGoal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Goal Type will default to maximize.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_MetricSpecGoal GoalTypeUnspecified { get; } = new GoogleCloudMlV1_StudyConfig_MetricSpecGoal("GOAL_TYPE_UNSPECIFIED");
        /// <summary>
        /// Maximize the goal metric.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_MetricSpecGoal Maximize { get; } = new GoogleCloudMlV1_StudyConfig_MetricSpecGoal("MAXIMIZE");
        /// <summary>
        /// Minimize the goal metric.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_MetricSpecGoal Minimize { get; } = new GoogleCloudMlV1_StudyConfig_MetricSpecGoal("MINIMIZE");

        public static bool operator ==(GoogleCloudMlV1_StudyConfig_MetricSpecGoal left, GoogleCloudMlV1_StudyConfig_MetricSpecGoal right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1_StudyConfig_MetricSpecGoal left, GoogleCloudMlV1_StudyConfig_MetricSpecGoal right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1_StudyConfig_MetricSpecGoal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1_StudyConfig_MetricSpecGoal other && Equals(other);
        public bool Equals(GoogleCloudMlV1_StudyConfig_MetricSpecGoal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How the parameter should be scaled. Leave unset for categorical parameters.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType : IEquatable<GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType>
    {
        private readonly string _value;

        private GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// By default, no scaling is applied.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType ScaleTypeUnspecified { get; } = new GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType("SCALE_TYPE_UNSPECIFIED");
        /// <summary>
        /// Scales the feasible space to (0, 1) linearly.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType UnitLinearScale { get; } = new GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType("UNIT_LINEAR_SCALE");
        /// <summary>
        /// Scales the feasible space logarithmically to (0, 1). The entire feasible space must be strictly positive.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType UnitLogScale { get; } = new GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType("UNIT_LOG_SCALE");
        /// <summary>
        /// Scales the feasible space "reverse" logarithmically to (0, 1). The result is that values close to the top of the feasible space are spread out more than points near the bottom. The entire feasible space must be strictly positive.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType UnitReverseLogScale { get; } = new GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType("UNIT_REVERSE_LOG_SCALE");

        public static bool operator ==(GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType left, GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType left, GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType other && Equals(other);
        public bool Equals(GoogleCloudMlV1_StudyConfig_ParameterSpecScaleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The type of the parameter.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1_StudyConfig_ParameterSpecType : IEquatable<GoogleCloudMlV1_StudyConfig_ParameterSpecType>
    {
        private readonly string _value;

        private GoogleCloudMlV1_StudyConfig_ParameterSpecType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// You must specify a valid type. Using this unspecified type will result in an error.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_ParameterSpecType ParameterTypeUnspecified { get; } = new GoogleCloudMlV1_StudyConfig_ParameterSpecType("PARAMETER_TYPE_UNSPECIFIED");
        /// <summary>
        /// Type for real-valued parameters.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_ParameterSpecType Double { get; } = new GoogleCloudMlV1_StudyConfig_ParameterSpecType("DOUBLE");
        /// <summary>
        /// Type for integral parameters.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_ParameterSpecType Integer { get; } = new GoogleCloudMlV1_StudyConfig_ParameterSpecType("INTEGER");
        /// <summary>
        /// The parameter is categorical, with a value chosen from the categories field.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_ParameterSpecType Categorical { get; } = new GoogleCloudMlV1_StudyConfig_ParameterSpecType("CATEGORICAL");
        /// <summary>
        /// The parameter is real valued, with a fixed set of feasible points. If `type==DISCRETE`, feasible_points must be provided, and {`min_value`, `max_value`} will be ignored.
        /// </summary>
        public static GoogleCloudMlV1_StudyConfig_ParameterSpecType Discrete { get; } = new GoogleCloudMlV1_StudyConfig_ParameterSpecType("DISCRETE");

        public static bool operator ==(GoogleCloudMlV1_StudyConfig_ParameterSpecType left, GoogleCloudMlV1_StudyConfig_ParameterSpecType right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1_StudyConfig_ParameterSpecType left, GoogleCloudMlV1_StudyConfig_ParameterSpecType right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1_StudyConfig_ParameterSpecType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1_StudyConfig_ParameterSpecType other && Equals(other);
        public bool Equals(GoogleCloudMlV1_StudyConfig_ParameterSpecType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of accelerator to use.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__AcceleratorConfigType : IEquatable<GoogleCloudMlV1__AcceleratorConfigType>
    {
        private readonly string _value;

        private GoogleCloudMlV1__AcceleratorConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified accelerator type. Default to no GPU.
        /// </summary>
        public static GoogleCloudMlV1__AcceleratorConfigType AcceleratorTypeUnspecified { get; } = new GoogleCloudMlV1__AcceleratorConfigType("ACCELERATOR_TYPE_UNSPECIFIED");
        /// <summary>
        /// Nvidia Tesla K80 GPU.
        /// </summary>
        public static GoogleCloudMlV1__AcceleratorConfigType NvidiaTeslaK80 { get; } = new GoogleCloudMlV1__AcceleratorConfigType("NVIDIA_TESLA_K80");
        /// <summary>
        /// Nvidia Tesla P100 GPU.
        /// </summary>
        public static GoogleCloudMlV1__AcceleratorConfigType NvidiaTeslaP100 { get; } = new GoogleCloudMlV1__AcceleratorConfigType("NVIDIA_TESLA_P100");
        /// <summary>
        /// Nvidia V100 GPU.
        /// </summary>
        public static GoogleCloudMlV1__AcceleratorConfigType NvidiaTeslaV100 { get; } = new GoogleCloudMlV1__AcceleratorConfigType("NVIDIA_TESLA_V100");
        /// <summary>
        /// Nvidia Tesla P4 GPU.
        /// </summary>
        public static GoogleCloudMlV1__AcceleratorConfigType NvidiaTeslaP4 { get; } = new GoogleCloudMlV1__AcceleratorConfigType("NVIDIA_TESLA_P4");
        /// <summary>
        /// Nvidia T4 GPU.
        /// </summary>
        public static GoogleCloudMlV1__AcceleratorConfigType NvidiaTeslaT4 { get; } = new GoogleCloudMlV1__AcceleratorConfigType("NVIDIA_TESLA_T4");
        /// <summary>
        /// Nvidia A100 GPU.
        /// </summary>
        public static GoogleCloudMlV1__AcceleratorConfigType NvidiaTeslaA100 { get; } = new GoogleCloudMlV1__AcceleratorConfigType("NVIDIA_TESLA_A100");
        /// <summary>
        /// TPU v2.
        /// </summary>
        public static GoogleCloudMlV1__AcceleratorConfigType TpuV2 { get; } = new GoogleCloudMlV1__AcceleratorConfigType("TPU_V2");
        /// <summary>
        /// TPU v3.
        /// </summary>
        public static GoogleCloudMlV1__AcceleratorConfigType TpuV3 { get; } = new GoogleCloudMlV1__AcceleratorConfigType("TPU_V3");

        public static bool operator ==(GoogleCloudMlV1__AcceleratorConfigType left, GoogleCloudMlV1__AcceleratorConfigType right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__AcceleratorConfigType left, GoogleCloudMlV1__AcceleratorConfigType right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__AcceleratorConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__AcceleratorConfigType other && Equals(other);
        public bool Equals(GoogleCloudMlV1__AcceleratorConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Output only. The detailed state of the trial.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__HyperparameterOutputState : IEquatable<GoogleCloudMlV1__HyperparameterOutputState>
    {
        private readonly string _value;

        private GoogleCloudMlV1__HyperparameterOutputState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The job state is unspecified.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterOutputState StateUnspecified { get; } = new GoogleCloudMlV1__HyperparameterOutputState("STATE_UNSPECIFIED");
        /// <summary>
        /// The job has been just created and processing has not yet begun.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterOutputState Queued { get; } = new GoogleCloudMlV1__HyperparameterOutputState("QUEUED");
        /// <summary>
        /// The service is preparing to run the job.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterOutputState Preparing { get; } = new GoogleCloudMlV1__HyperparameterOutputState("PREPARING");
        /// <summary>
        /// The job is in progress.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterOutputState Running { get; } = new GoogleCloudMlV1__HyperparameterOutputState("RUNNING");
        /// <summary>
        /// The job completed successfully.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterOutputState Succeeded { get; } = new GoogleCloudMlV1__HyperparameterOutputState("SUCCEEDED");
        /// <summary>
        /// The job failed. `error_message` should contain the details of the failure.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterOutputState Failed { get; } = new GoogleCloudMlV1__HyperparameterOutputState("FAILED");
        /// <summary>
        /// The job is being cancelled. `error_message` should describe the reason for the cancellation.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterOutputState Cancelling { get; } = new GoogleCloudMlV1__HyperparameterOutputState("CANCELLING");
        /// <summary>
        /// The job has been cancelled. `error_message` should describe the reason for the cancellation.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterOutputState Cancelled { get; } = new GoogleCloudMlV1__HyperparameterOutputState("CANCELLED");

        public static bool operator ==(GoogleCloudMlV1__HyperparameterOutputState left, GoogleCloudMlV1__HyperparameterOutputState right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__HyperparameterOutputState left, GoogleCloudMlV1__HyperparameterOutputState right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__HyperparameterOutputState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__HyperparameterOutputState other && Equals(other);
        public bool Equals(GoogleCloudMlV1__HyperparameterOutputState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The search algorithm specified for the hyperparameter tuning job. Uses the default AI Platform hyperparameter tuning algorithm if unspecified.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__HyperparameterSpecAlgorithm : IEquatable<GoogleCloudMlV1__HyperparameterSpecAlgorithm>
    {
        private readonly string _value;

        private GoogleCloudMlV1__HyperparameterSpecAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The default algorithm used by the hyperparameter tuning service. This is a Bayesian optimization algorithm.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterSpecAlgorithm AlgorithmUnspecified { get; } = new GoogleCloudMlV1__HyperparameterSpecAlgorithm("ALGORITHM_UNSPECIFIED");
        /// <summary>
        /// Simple grid search within the feasible space. To use grid search, all parameters must be `INTEGER`, `CATEGORICAL`, or `DISCRETE`.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterSpecAlgorithm GridSearch { get; } = new GoogleCloudMlV1__HyperparameterSpecAlgorithm("GRID_SEARCH");
        /// <summary>
        /// Simple random search within the feasible space.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterSpecAlgorithm RandomSearch { get; } = new GoogleCloudMlV1__HyperparameterSpecAlgorithm("RANDOM_SEARCH");

        public static bool operator ==(GoogleCloudMlV1__HyperparameterSpecAlgorithm left, GoogleCloudMlV1__HyperparameterSpecAlgorithm right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__HyperparameterSpecAlgorithm left, GoogleCloudMlV1__HyperparameterSpecAlgorithm right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__HyperparameterSpecAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__HyperparameterSpecAlgorithm other && Equals(other);
        public bool Equals(GoogleCloudMlV1__HyperparameterSpecAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The type of goal to use for tuning. Available types are `MAXIMIZE` and `MINIMIZE`. Defaults to `MAXIMIZE`.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__HyperparameterSpecGoal : IEquatable<GoogleCloudMlV1__HyperparameterSpecGoal>
    {
        private readonly string _value;

        private GoogleCloudMlV1__HyperparameterSpecGoal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Goal Type will default to maximize.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterSpecGoal GoalTypeUnspecified { get; } = new GoogleCloudMlV1__HyperparameterSpecGoal("GOAL_TYPE_UNSPECIFIED");
        /// <summary>
        /// Maximize the goal metric.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterSpecGoal Maximize { get; } = new GoogleCloudMlV1__HyperparameterSpecGoal("MAXIMIZE");
        /// <summary>
        /// Minimize the goal metric.
        /// </summary>
        public static GoogleCloudMlV1__HyperparameterSpecGoal Minimize { get; } = new GoogleCloudMlV1__HyperparameterSpecGoal("MINIMIZE");

        public static bool operator ==(GoogleCloudMlV1__HyperparameterSpecGoal left, GoogleCloudMlV1__HyperparameterSpecGoal right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__HyperparameterSpecGoal left, GoogleCloudMlV1__HyperparameterSpecGoal right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__HyperparameterSpecGoal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__HyperparameterSpecGoal other && Equals(other);
        public bool Equals(GoogleCloudMlV1__HyperparameterSpecGoal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// metric name.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__MetricSpecName : IEquatable<GoogleCloudMlV1__MetricSpecName>
    {
        private readonly string _value;

        private GoogleCloudMlV1__MetricSpecName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified MetricName.
        /// </summary>
        public static GoogleCloudMlV1__MetricSpecName MetricNameUnspecified { get; } = new GoogleCloudMlV1__MetricSpecName("METRIC_NAME_UNSPECIFIED");
        /// <summary>
        /// CPU usage.
        /// </summary>
        public static GoogleCloudMlV1__MetricSpecName CpuUsage { get; } = new GoogleCloudMlV1__MetricSpecName("CPU_USAGE");
        /// <summary>
        /// GPU duty cycle.
        /// </summary>
        public static GoogleCloudMlV1__MetricSpecName GpuDutyCycle { get; } = new GoogleCloudMlV1__MetricSpecName("GPU_DUTY_CYCLE");

        public static bool operator ==(GoogleCloudMlV1__MetricSpecName left, GoogleCloudMlV1__MetricSpecName right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__MetricSpecName left, GoogleCloudMlV1__MetricSpecName right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__MetricSpecName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__MetricSpecName other && Equals(other);
        public bool Equals(GoogleCloudMlV1__MetricSpecName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__ParameterSpecScaleType : IEquatable<GoogleCloudMlV1__ParameterSpecScaleType>
    {
        private readonly string _value;

        private GoogleCloudMlV1__ParameterSpecScaleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// By default, no scaling is applied.
        /// </summary>
        public static GoogleCloudMlV1__ParameterSpecScaleType None { get; } = new GoogleCloudMlV1__ParameterSpecScaleType("NONE");
        /// <summary>
        /// Scales the feasible space to (0, 1) linearly.
        /// </summary>
        public static GoogleCloudMlV1__ParameterSpecScaleType UnitLinearScale { get; } = new GoogleCloudMlV1__ParameterSpecScaleType("UNIT_LINEAR_SCALE");
        /// <summary>
        /// Scales the feasible space logarithmically to (0, 1). The entire feasible space must be strictly positive.
        /// </summary>
        public static GoogleCloudMlV1__ParameterSpecScaleType UnitLogScale { get; } = new GoogleCloudMlV1__ParameterSpecScaleType("UNIT_LOG_SCALE");
        /// <summary>
        /// Scales the feasible space "reverse" logarithmically to (0, 1). The result is that values close to the top of the feasible space are spread out more than points near the bottom. The entire feasible space must be strictly positive.
        /// </summary>
        public static GoogleCloudMlV1__ParameterSpecScaleType UnitReverseLogScale { get; } = new GoogleCloudMlV1__ParameterSpecScaleType("UNIT_REVERSE_LOG_SCALE");

        public static bool operator ==(GoogleCloudMlV1__ParameterSpecScaleType left, GoogleCloudMlV1__ParameterSpecScaleType right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__ParameterSpecScaleType left, GoogleCloudMlV1__ParameterSpecScaleType right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__ParameterSpecScaleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__ParameterSpecScaleType other && Equals(other);
        public bool Equals(GoogleCloudMlV1__ParameterSpecScaleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The type of the parameter.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__ParameterSpecType : IEquatable<GoogleCloudMlV1__ParameterSpecType>
    {
        private readonly string _value;

        private GoogleCloudMlV1__ParameterSpecType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// You must specify a valid type. Using this unspecified type will result in an error.
        /// </summary>
        public static GoogleCloudMlV1__ParameterSpecType ParameterTypeUnspecified { get; } = new GoogleCloudMlV1__ParameterSpecType("PARAMETER_TYPE_UNSPECIFIED");
        /// <summary>
        /// Type for real-valued parameters.
        /// </summary>
        public static GoogleCloudMlV1__ParameterSpecType Double { get; } = new GoogleCloudMlV1__ParameterSpecType("DOUBLE");
        /// <summary>
        /// Type for integral parameters.
        /// </summary>
        public static GoogleCloudMlV1__ParameterSpecType Integer { get; } = new GoogleCloudMlV1__ParameterSpecType("INTEGER");
        /// <summary>
        /// The parameter is categorical, with a value chosen from the categories field.
        /// </summary>
        public static GoogleCloudMlV1__ParameterSpecType Categorical { get; } = new GoogleCloudMlV1__ParameterSpecType("CATEGORICAL");
        /// <summary>
        /// The parameter is real valued, with a fixed set of feasible points. If `type==DISCRETE`, feasible_points must be provided, and {`min_value`, `max_value`} will be ignored.
        /// </summary>
        public static GoogleCloudMlV1__ParameterSpecType Discrete { get; } = new GoogleCloudMlV1__ParameterSpecType("DISCRETE");

        public static bool operator ==(GoogleCloudMlV1__ParameterSpecType left, GoogleCloudMlV1__ParameterSpecType right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__ParameterSpecType left, GoogleCloudMlV1__ParameterSpecType right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__ParameterSpecType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__ParameterSpecType other && Equals(other);
        public bool Equals(GoogleCloudMlV1__ParameterSpecType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The format of the input data files.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__PredictionInputDataFormat : IEquatable<GoogleCloudMlV1__PredictionInputDataFormat>
    {
        private readonly string _value;

        private GoogleCloudMlV1__PredictionInputDataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified format.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputDataFormat DataFormatUnspecified { get; } = new GoogleCloudMlV1__PredictionInputDataFormat("DATA_FORMAT_UNSPECIFIED");
        /// <summary>
        /// Each line of the file is a JSON dictionary representing one record.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputDataFormat Json { get; } = new GoogleCloudMlV1__PredictionInputDataFormat("JSON");
        /// <summary>
        /// Deprecated. Use JSON instead.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputDataFormat Text { get; } = new GoogleCloudMlV1__PredictionInputDataFormat("TEXT");
        /// <summary>
        /// The source file is a TFRecord file. Currently available only for input data.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputDataFormat TfRecord { get; } = new GoogleCloudMlV1__PredictionInputDataFormat("TF_RECORD");
        /// <summary>
        /// The source file is a GZIP-compressed TFRecord file. Currently available only for input data.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputDataFormat TfRecordGzip { get; } = new GoogleCloudMlV1__PredictionInputDataFormat("TF_RECORD_GZIP");
        /// <summary>
        /// Values are comma-separated rows, with keys in a separate file. Currently available only for output data.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputDataFormat Csv { get; } = new GoogleCloudMlV1__PredictionInputDataFormat("CSV");

        public static bool operator ==(GoogleCloudMlV1__PredictionInputDataFormat left, GoogleCloudMlV1__PredictionInputDataFormat right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__PredictionInputDataFormat left, GoogleCloudMlV1__PredictionInputDataFormat right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__PredictionInputDataFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__PredictionInputDataFormat other && Equals(other);
        public bool Equals(GoogleCloudMlV1__PredictionInputDataFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Format of the output data files, defaults to JSON.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__PredictionInputOutputDataFormat : IEquatable<GoogleCloudMlV1__PredictionInputOutputDataFormat>
    {
        private readonly string _value;

        private GoogleCloudMlV1__PredictionInputOutputDataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified format.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputOutputDataFormat DataFormatUnspecified { get; } = new GoogleCloudMlV1__PredictionInputOutputDataFormat("DATA_FORMAT_UNSPECIFIED");
        /// <summary>
        /// Each line of the file is a JSON dictionary representing one record.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputOutputDataFormat Json { get; } = new GoogleCloudMlV1__PredictionInputOutputDataFormat("JSON");
        /// <summary>
        /// Deprecated. Use JSON instead.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputOutputDataFormat Text { get; } = new GoogleCloudMlV1__PredictionInputOutputDataFormat("TEXT");
        /// <summary>
        /// The source file is a TFRecord file. Currently available only for input data.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputOutputDataFormat TfRecord { get; } = new GoogleCloudMlV1__PredictionInputOutputDataFormat("TF_RECORD");
        /// <summary>
        /// The source file is a GZIP-compressed TFRecord file. Currently available only for input data.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputOutputDataFormat TfRecordGzip { get; } = new GoogleCloudMlV1__PredictionInputOutputDataFormat("TF_RECORD_GZIP");
        /// <summary>
        /// Values are comma-separated rows, with keys in a separate file. Currently available only for output data.
        /// </summary>
        public static GoogleCloudMlV1__PredictionInputOutputDataFormat Csv { get; } = new GoogleCloudMlV1__PredictionInputOutputDataFormat("CSV");

        public static bool operator ==(GoogleCloudMlV1__PredictionInputOutputDataFormat left, GoogleCloudMlV1__PredictionInputOutputDataFormat right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__PredictionInputOutputDataFormat left, GoogleCloudMlV1__PredictionInputOutputDataFormat right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__PredictionInputOutputDataFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__PredictionInputOutputDataFormat other && Equals(other);
        public bool Equals(GoogleCloudMlV1__PredictionInputOutputDataFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The search algorithm specified for the study.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__StudyConfigAlgorithm : IEquatable<GoogleCloudMlV1__StudyConfigAlgorithm>
    {
        private readonly string _value;

        private GoogleCloudMlV1__StudyConfigAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The default algorithm used by the Cloud AI Platform Vizier service.
        /// </summary>
        public static GoogleCloudMlV1__StudyConfigAlgorithm AlgorithmUnspecified { get; } = new GoogleCloudMlV1__StudyConfigAlgorithm("ALGORITHM_UNSPECIFIED");
        /// <summary>
        /// Gaussian Process Bandit.
        /// </summary>
        public static GoogleCloudMlV1__StudyConfigAlgorithm GaussianProcessBandit { get; } = new GoogleCloudMlV1__StudyConfigAlgorithm("GAUSSIAN_PROCESS_BANDIT");
        /// <summary>
        /// Simple grid search within the feasible space. To use grid search, all parameters must be `INTEGER`, `CATEGORICAL`, or `DISCRETE`.
        /// </summary>
        public static GoogleCloudMlV1__StudyConfigAlgorithm GridSearch { get; } = new GoogleCloudMlV1__StudyConfigAlgorithm("GRID_SEARCH");
        /// <summary>
        /// Simple random search within the feasible space.
        /// </summary>
        public static GoogleCloudMlV1__StudyConfigAlgorithm RandomSearch { get; } = new GoogleCloudMlV1__StudyConfigAlgorithm("RANDOM_SEARCH");

        public static bool operator ==(GoogleCloudMlV1__StudyConfigAlgorithm left, GoogleCloudMlV1__StudyConfigAlgorithm right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__StudyConfigAlgorithm left, GoogleCloudMlV1__StudyConfigAlgorithm right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__StudyConfigAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__StudyConfigAlgorithm other && Equals(other);
        public bool Equals(GoogleCloudMlV1__StudyConfigAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Specifies the machine types, the number of replicas for workers and parameter servers.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__TrainingInputScaleTier : IEquatable<GoogleCloudMlV1__TrainingInputScaleTier>
    {
        private readonly string _value;

        private GoogleCloudMlV1__TrainingInputScaleTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A single worker instance. This tier is suitable for learning how to use Cloud ML, and for experimenting with new models using small datasets.
        /// </summary>
        public static GoogleCloudMlV1__TrainingInputScaleTier Basic { get; } = new GoogleCloudMlV1__TrainingInputScaleTier("BASIC");
        /// <summary>
        /// Many workers and a few parameter servers.
        /// </summary>
        public static GoogleCloudMlV1__TrainingInputScaleTier Standard1 { get; } = new GoogleCloudMlV1__TrainingInputScaleTier("STANDARD_1");
        /// <summary>
        /// A large number of workers with many parameter servers.
        /// </summary>
        public static GoogleCloudMlV1__TrainingInputScaleTier Premium1 { get; } = new GoogleCloudMlV1__TrainingInputScaleTier("PREMIUM_1");
        /// <summary>
        /// A single worker instance [with a GPU](/ai-platform/training/docs/using-gpus).
        /// </summary>
        public static GoogleCloudMlV1__TrainingInputScaleTier BasicGpu { get; } = new GoogleCloudMlV1__TrainingInputScaleTier("BASIC_GPU");
        /// <summary>
        /// A single worker instance with a [Cloud TPU](/ml-engine/docs/tensorflow/using-tpus).
        /// </summary>
        public static GoogleCloudMlV1__TrainingInputScaleTier BasicTpu { get; } = new GoogleCloudMlV1__TrainingInputScaleTier("BASIC_TPU");
        /// <summary>
        /// The CUSTOM tier is not a set tier, but rather enables you to use your own cluster specification. When you use this tier, set values to configure your processing cluster according to these guidelines: * You _must_ set `TrainingInput.masterType` to specify the type of machine to use for your master node. This is the only required setting. * You _may_ set `TrainingInput.workerCount` to specify the number of workers to use. If you specify one or more workers, you _must_ also set `TrainingInput.workerType` to specify the type of machine to use for your worker nodes. * You _may_ set `TrainingInput.parameterServerCount` to specify the number of parameter servers to use. If you specify one or more parameter servers, you _must_ also set `TrainingInput.parameterServerType` to specify the type of machine to use for your parameter servers. Note that all of your workers must use the same machine type, which can be different from your parameter server type and master type. Your parameter servers must likewise use the same machine type, which can be different from your worker type and master type.
        /// </summary>
        public static GoogleCloudMlV1__TrainingInputScaleTier Custom { get; } = new GoogleCloudMlV1__TrainingInputScaleTier("CUSTOM");

        public static bool operator ==(GoogleCloudMlV1__TrainingInputScaleTier left, GoogleCloudMlV1__TrainingInputScaleTier right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__TrainingInputScaleTier left, GoogleCloudMlV1__TrainingInputScaleTier right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__TrainingInputScaleTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__TrainingInputScaleTier other && Equals(other);
        public bool Equals(GoogleCloudMlV1__TrainingInputScaleTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The machine learning framework AI Platform uses to train this version of the model. Valid values are `TENSORFLOW`, `SCIKIT_LEARN`, `XGBOOST`. If you do not specify a framework, AI Platform will analyze files in the deployment_uri to determine a framework. If you choose `SCIKIT_LEARN` or `XGBOOST`, you must also set the runtime version of the model to 1.4 or greater. Do **not** specify a framework if you're deploying a [custom prediction routine](/ai-platform/prediction/docs/custom-prediction-routines) or if you're using a [custom container](/ai-platform/prediction/docs/use-custom-container).
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__VersionFramework : IEquatable<GoogleCloudMlV1__VersionFramework>
    {
        private readonly string _value;

        private GoogleCloudMlV1__VersionFramework(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified framework. Assigns a value based on the file suffix.
        /// </summary>
        public static GoogleCloudMlV1__VersionFramework FrameworkUnspecified { get; } = new GoogleCloudMlV1__VersionFramework("FRAMEWORK_UNSPECIFIED");
        /// <summary>
        /// Tensorflow framework.
        /// </summary>
        public static GoogleCloudMlV1__VersionFramework Tensorflow { get; } = new GoogleCloudMlV1__VersionFramework("TENSORFLOW");
        /// <summary>
        /// Scikit-learn framework.
        /// </summary>
        public static GoogleCloudMlV1__VersionFramework ScikitLearn { get; } = new GoogleCloudMlV1__VersionFramework("SCIKIT_LEARN");
        /// <summary>
        /// XGBoost framework.
        /// </summary>
        public static GoogleCloudMlV1__VersionFramework Xgboost { get; } = new GoogleCloudMlV1__VersionFramework("XGBOOST");

        public static bool operator ==(GoogleCloudMlV1__VersionFramework left, GoogleCloudMlV1__VersionFramework right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__VersionFramework left, GoogleCloudMlV1__VersionFramework right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__VersionFramework value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__VersionFramework other && Equals(other);
        public bool Equals(GoogleCloudMlV1__VersionFramework other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Output only. The state of a version.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudMlV1__VersionState : IEquatable<GoogleCloudMlV1__VersionState>
    {
        private readonly string _value;

        private GoogleCloudMlV1__VersionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The version state is unspecified.
        /// </summary>
        public static GoogleCloudMlV1__VersionState Unknown { get; } = new GoogleCloudMlV1__VersionState("UNKNOWN");
        /// <summary>
        /// The version is ready for prediction.
        /// </summary>
        public static GoogleCloudMlV1__VersionState Ready { get; } = new GoogleCloudMlV1__VersionState("READY");
        /// <summary>
        /// The version is being created. New UpdateVersion and DeleteVersion requests will fail if a version is in the CREATING state.
        /// </summary>
        public static GoogleCloudMlV1__VersionState Creating { get; } = new GoogleCloudMlV1__VersionState("CREATING");
        /// <summary>
        /// The version failed to be created, possibly cancelled. `error_message` should contain the details of the failure.
        /// </summary>
        public static GoogleCloudMlV1__VersionState Failed { get; } = new GoogleCloudMlV1__VersionState("FAILED");
        /// <summary>
        /// The version is being deleted. New UpdateVersion and DeleteVersion requests will fail if a version is in the DELETING state.
        /// </summary>
        public static GoogleCloudMlV1__VersionState Deleting { get; } = new GoogleCloudMlV1__VersionState("DELETING");
        /// <summary>
        /// The version is being updated. New UpdateVersion and DeleteVersion requests will fail if a version is in the UPDATING state.
        /// </summary>
        public static GoogleCloudMlV1__VersionState Updating { get; } = new GoogleCloudMlV1__VersionState("UPDATING");

        public static bool operator ==(GoogleCloudMlV1__VersionState left, GoogleCloudMlV1__VersionState right) => left.Equals(right);
        public static bool operator !=(GoogleCloudMlV1__VersionState left, GoogleCloudMlV1__VersionState right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudMlV1__VersionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudMlV1__VersionState other && Equals(other);
        public bool Equals(GoogleCloudMlV1__VersionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct GoogleIamV1__AuditLogConfigLogType : IEquatable<GoogleIamV1__AuditLogConfigLogType>
    {
        private readonly string _value;

        private GoogleIamV1__AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static GoogleIamV1__AuditLogConfigLogType LogTypeUnspecified { get; } = new GoogleIamV1__AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static GoogleIamV1__AuditLogConfigLogType AdminRead { get; } = new GoogleIamV1__AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static GoogleIamV1__AuditLogConfigLogType DataWrite { get; } = new GoogleIamV1__AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static GoogleIamV1__AuditLogConfigLogType DataRead { get; } = new GoogleIamV1__AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(GoogleIamV1__AuditLogConfigLogType left, GoogleIamV1__AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(GoogleIamV1__AuditLogConfigLogType left, GoogleIamV1__AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(GoogleIamV1__AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleIamV1__AuditLogConfigLogType other && Equals(other);
        public bool Equals(GoogleIamV1__AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Output only. The detailed state of a job.
    /// </summary>
    [EnumType]
    public readonly struct JobState : IEquatable<JobState>
    {
        private readonly string _value;

        private JobState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The job state is unspecified.
        /// </summary>
        public static JobState StateUnspecified { get; } = new JobState("STATE_UNSPECIFIED");
        /// <summary>
        /// The job has been just created and processing has not yet begun.
        /// </summary>
        public static JobState Queued { get; } = new JobState("QUEUED");
        /// <summary>
        /// The service is preparing to run the job.
        /// </summary>
        public static JobState Preparing { get; } = new JobState("PREPARING");
        /// <summary>
        /// The job is in progress.
        /// </summary>
        public static JobState Running { get; } = new JobState("RUNNING");
        /// <summary>
        /// The job completed successfully.
        /// </summary>
        public static JobState Succeeded { get; } = new JobState("SUCCEEDED");
        /// <summary>
        /// The job failed. `error_message` should contain the details of the failure.
        /// </summary>
        public static JobState Failed { get; } = new JobState("FAILED");
        /// <summary>
        /// The job is being cancelled. `error_message` should describe the reason for the cancellation.
        /// </summary>
        public static JobState Cancelling { get; } = new JobState("CANCELLING");
        /// <summary>
        /// The job has been cancelled. `error_message` should describe the reason for the cancellation.
        /// </summary>
        public static JobState Cancelled { get; } = new JobState("CANCELLED");

        public static bool operator ==(JobState left, JobState right) => left.Equals(right);
        public static bool operator !=(JobState left, JobState right) => !left.Equals(right);

        public static explicit operator string(JobState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobState other && Equals(other);
        public bool Equals(JobState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The detailed state of a trial.
    /// </summary>
    [EnumType]
    public readonly struct TrialState : IEquatable<TrialState>
    {
        private readonly string _value;

        private TrialState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The trial state is unspecified.
        /// </summary>
        public static TrialState StateUnspecified { get; } = new TrialState("STATE_UNSPECIFIED");
        /// <summary>
        /// Indicates that a specific trial has been requested, but it has not yet been suggested by the service.
        /// </summary>
        public static TrialState Requested { get; } = new TrialState("REQUESTED");
        /// <summary>
        /// Indicates that the trial has been suggested.
        /// </summary>
        public static TrialState Active { get; } = new TrialState("ACTIVE");
        /// <summary>
        /// Indicates that the trial is done, and either has a final_measurement set, or is marked as trial_infeasible.
        /// </summary>
        public static TrialState Completed { get; } = new TrialState("COMPLETED");
        /// <summary>
        /// Indicates that the trial should stop according to the service.
        /// </summary>
        public static TrialState Stopping { get; } = new TrialState("STOPPING");

        public static bool operator ==(TrialState left, TrialState right) => left.Equals(right);
        public static bool operator !=(TrialState left, TrialState right) => !left.Equals(right);

        public static explicit operator string(TrialState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrialState other && Equals(other);
        public bool Equals(TrialState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The machine learning framework AI Platform uses to train this version of the model. Valid values are `TENSORFLOW`, `SCIKIT_LEARN`, `XGBOOST`. If you do not specify a framework, AI Platform will analyze files in the deployment_uri to determine a framework. If you choose `SCIKIT_LEARN` or `XGBOOST`, you must also set the runtime version of the model to 1.4 or greater. Do **not** specify a framework if you're deploying a [custom prediction routine](/ai-platform/prediction/docs/custom-prediction-routines) or if you're using a [custom container](/ai-platform/prediction/docs/use-custom-container).
    /// </summary>
    [EnumType]
    public readonly struct VersionFramework : IEquatable<VersionFramework>
    {
        private readonly string _value;

        private VersionFramework(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified framework. Assigns a value based on the file suffix.
        /// </summary>
        public static VersionFramework FrameworkUnspecified { get; } = new VersionFramework("FRAMEWORK_UNSPECIFIED");
        /// <summary>
        /// Tensorflow framework.
        /// </summary>
        public static VersionFramework Tensorflow { get; } = new VersionFramework("TENSORFLOW");
        /// <summary>
        /// Scikit-learn framework.
        /// </summary>
        public static VersionFramework ScikitLearn { get; } = new VersionFramework("SCIKIT_LEARN");
        /// <summary>
        /// XGBoost framework.
        /// </summary>
        public static VersionFramework Xgboost { get; } = new VersionFramework("XGBOOST");

        public static bool operator ==(VersionFramework left, VersionFramework right) => left.Equals(right);
        public static bool operator !=(VersionFramework left, VersionFramework right) => !left.Equals(right);

        public static explicit operator string(VersionFramework value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VersionFramework other && Equals(other);
        public bool Equals(VersionFramework other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Output only. The state of a version.
    /// </summary>
    [EnumType]
    public readonly struct VersionState : IEquatable<VersionState>
    {
        private readonly string _value;

        private VersionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The version state is unspecified.
        /// </summary>
        public static VersionState Unknown { get; } = new VersionState("UNKNOWN");
        /// <summary>
        /// The version is ready for prediction.
        /// </summary>
        public static VersionState Ready { get; } = new VersionState("READY");
        /// <summary>
        /// The version is being created. New UpdateVersion and DeleteVersion requests will fail if a version is in the CREATING state.
        /// </summary>
        public static VersionState Creating { get; } = new VersionState("CREATING");
        /// <summary>
        /// The version failed to be created, possibly cancelled. `error_message` should contain the details of the failure.
        /// </summary>
        public static VersionState Failed { get; } = new VersionState("FAILED");
        /// <summary>
        /// The version is being deleted. New UpdateVersion and DeleteVersion requests will fail if a version is in the DELETING state.
        /// </summary>
        public static VersionState Deleting { get; } = new VersionState("DELETING");
        /// <summary>
        /// The version is being updated. New UpdateVersion and DeleteVersion requests will fail if a version is in the UPDATING state.
        /// </summary>
        public static VersionState Updating { get; } = new VersionState("UPDATING");

        public static bool operator ==(VersionState left, VersionState right) => left.Equals(right);
        public static bool operator !=(VersionState left, VersionState right) => !left.Equals(right);

        public static explicit operator string(VersionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VersionState other && Equals(other);
        public bool Equals(VersionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
