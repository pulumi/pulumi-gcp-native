// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Datamigration.V1
{
    public static class GetMappingRule
    {
        /// <summary>
        /// Gets the details of a mapping rule.
        /// </summary>
        public static Task<GetMappingRuleResult> InvokeAsync(GetMappingRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMappingRuleResult>("google-native:datamigration/v1:getMappingRule", args ?? new GetMappingRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of a mapping rule.
        /// </summary>
        public static Output<GetMappingRuleResult> Invoke(GetMappingRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMappingRuleResult>("google-native:datamigration/v1:getMappingRule", args ?? new GetMappingRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMappingRuleArgs : global::Pulumi.InvokeArgs
    {
        [Input("conversionWorkspaceId", required: true)]
        public string ConversionWorkspaceId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("mappingRuleId", required: true)]
        public string MappingRuleId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetMappingRuleArgs()
        {
        }
        public static new GetMappingRuleArgs Empty => new GetMappingRuleArgs();
    }

    public sealed class GetMappingRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("conversionWorkspaceId", required: true)]
        public Input<string> ConversionWorkspaceId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("mappingRuleId", required: true)]
        public Input<string> MappingRuleId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetMappingRuleInvokeArgs()
        {
        }
        public static new GetMappingRuleInvokeArgs Empty => new GetMappingRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetMappingRuleResult
    {
        /// <summary>
        /// Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
        /// </summary>
        public readonly Outputs.ConditionalColumnSetValueResponse ConditionalColumnSetValue;
        /// <summary>
        /// Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
        /// </summary>
        public readonly Outputs.ConvertRowIdToColumnResponse ConvertRowidColumn;
        /// <summary>
        /// Optional. A human readable name
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Optional. Rule to specify how multiple entities should be relocated into a different schema.
        /// </summary>
        public readonly Outputs.EntityMoveResponse EntityMove;
        /// <summary>
        /// The rule filter
        /// </summary>
        public readonly Outputs.MappingRuleFilterResponse Filter;
        /// <summary>
        /// Optional. Rule to specify the list of columns to include or exclude from a table.
        /// </summary>
        public readonly Outputs.FilterTableColumnsResponse FilterTableColumns;
        /// <summary>
        /// Optional. Rule to specify how multiple columns should be converted to a different data type.
        /// </summary>
        public readonly Outputs.MultiColumnDatatypeChangeResponse MultiColumnDataTypeChange;
        /// <summary>
        /// Optional. Rule to specify how multiple entities should be renamed.
        /// </summary>
        public readonly Outputs.MultiEntityRenameResponse MultiEntityRename;
        /// <summary>
        /// Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The timestamp that the revision was created.
        /// </summary>
        public readonly string RevisionCreateTime;
        /// <summary>
        /// The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
        /// </summary>
        public readonly string RevisionId;
        /// <summary>
        /// The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
        /// </summary>
        public readonly string RuleOrder;
        /// <summary>
        /// The rule scope
        /// </summary>
        public readonly string RuleScope;
        /// <summary>
        /// Optional. Rule to specify the primary key for a table
        /// </summary>
        public readonly Outputs.SetTablePrimaryKeyResponse SetTablePrimaryKey;
        /// <summary>
        /// Optional. Rule to specify how a single column is converted.
        /// </summary>
        public readonly Outputs.SingleColumnChangeResponse SingleColumnChange;
        /// <summary>
        /// Optional. Rule to specify how a single entity should be renamed.
        /// </summary>
        public readonly Outputs.SingleEntityRenameResponse SingleEntityRename;
        /// <summary>
        /// Optional. Rule to specify how a single package is converted.
        /// </summary>
        public readonly Outputs.SinglePackageChangeResponse SinglePackageChange;
        /// <summary>
        /// Optional. Rule to change the sql code for an entity, for example, function, procedure.
        /// </summary>
        public readonly Outputs.SourceSqlChangeResponse SourceSqlChange;
        /// <summary>
        /// Optional. The mapping rule state
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetMappingRuleResult(
            Outputs.ConditionalColumnSetValueResponse conditionalColumnSetValue,

            Outputs.ConvertRowIdToColumnResponse convertRowidColumn,

            string displayName,

            Outputs.EntityMoveResponse entityMove,

            Outputs.MappingRuleFilterResponse filter,

            Outputs.FilterTableColumnsResponse filterTableColumns,

            Outputs.MultiColumnDatatypeChangeResponse multiColumnDataTypeChange,

            Outputs.MultiEntityRenameResponse multiEntityRename,

            string name,

            string revisionCreateTime,

            string revisionId,

            string ruleOrder,

            string ruleScope,

            Outputs.SetTablePrimaryKeyResponse setTablePrimaryKey,

            Outputs.SingleColumnChangeResponse singleColumnChange,

            Outputs.SingleEntityRenameResponse singleEntityRename,

            Outputs.SinglePackageChangeResponse singlePackageChange,

            Outputs.SourceSqlChangeResponse sourceSqlChange,

            string state)
        {
            ConditionalColumnSetValue = conditionalColumnSetValue;
            ConvertRowidColumn = convertRowidColumn;
            DisplayName = displayName;
            EntityMove = entityMove;
            Filter = filter;
            FilterTableColumns = filterTableColumns;
            MultiColumnDataTypeChange = multiColumnDataTypeChange;
            MultiEntityRename = multiEntityRename;
            Name = name;
            RevisionCreateTime = revisionCreateTime;
            RevisionId = revisionId;
            RuleOrder = ruleOrder;
            RuleScope = ruleScope;
            SetTablePrimaryKey = setTablePrimaryKey;
            SingleColumnChange = singleColumnChange;
            SingleEntityRename = singleEntityRename;
            SinglePackageChange = singlePackageChange;
            SourceSqlChange = sourceSqlChange;
            State = state;
        }
    }
}
