// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Datamigration.V1.Inputs
{

    /// <summary>
    /// Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
    /// </summary>
    public sealed class ConditionalColumnSetValueArgs : global::Pulumi.ResourceArgs
    {
        [Input("customFeatures")]
        private InputMap<object>? _customFeatures;

        /// <summary>
        /// Optional. Custom engine specific features.
        /// </summary>
        public InputMap<object> CustomFeatures
        {
            get => _customFeatures ?? (_customFeatures = new InputMap<object>());
            set => _customFeatures = value;
        }

        /// <summary>
        /// Optional. Optional filter on source column precision and scale. Used for fixed point numbers such as NUMERIC/NUMBER data types.
        /// </summary>
        [Input("sourceNumericFilter")]
        public Input<Inputs.SourceNumericFilterArgs>? SourceNumericFilter { get; set; }

        /// <summary>
        /// Optional. Optional filter on source column length. Used for text based data types like varchar.
        /// </summary>
        [Input("sourceTextFilter")]
        public Input<Inputs.SourceTextFilterArgs>? SourceTextFilter { get; set; }

        /// <summary>
        /// Description of data transformation during migration.
        /// </summary>
        [Input("valueTransformation", required: true)]
        public Input<Inputs.ValueTransformationArgs> ValueTransformation { get; set; } = null!;

        public ConditionalColumnSetValueArgs()
        {
        }
        public static new ConditionalColumnSetValueArgs Empty => new ConditionalColumnSetValueArgs();
    }
}
