// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Datamigration.V1.Inputs
{

    /// <summary>
    /// Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
    /// </summary>
    public sealed class MultiColumnDatatypeChangeArgs : global::Pulumi.ResourceArgs
    {
        [Input("customFeatures")]
        private InputMap<object>? _customFeatures;

        /// <summary>
        /// Optional. Custom engine specific features.
        /// </summary>
        public InputMap<object> CustomFeatures
        {
            get => _customFeatures ?? (_customFeatures = new InputMap<object>());
            set => _customFeatures = value;
        }

        /// <summary>
        /// New data type.
        /// </summary>
        [Input("newDataType", required: true)]
        public Input<string> NewDataType { get; set; } = null!;

        /// <summary>
        /// Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
        /// </summary>
        [Input("overrideFractionalSecondsPrecision")]
        public Input<int>? OverrideFractionalSecondsPrecision { get; set; }

        /// <summary>
        /// Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
        /// </summary>
        [Input("overrideLength")]
        public Input<string>? OverrideLength { get; set; }

        /// <summary>
        /// Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
        /// </summary>
        [Input("overridePrecision")]
        public Input<int>? OverridePrecision { get; set; }

        /// <summary>
        /// Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
        /// </summary>
        [Input("overrideScale")]
        public Input<int>? OverrideScale { get; set; }

        /// <summary>
        /// Filter on source data type.
        /// </summary>
        [Input("sourceDataTypeFilter", required: true)]
        public Input<string> SourceDataTypeFilter { get; set; } = null!;

        /// <summary>
        /// Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
        /// </summary>
        [Input("sourceNumericFilter")]
        public Input<Inputs.SourceNumericFilterArgs>? SourceNumericFilter { get; set; }

        /// <summary>
        /// Optional. Filter for text-based data types like varchar.
        /// </summary>
        [Input("sourceTextFilter")]
        public Input<Inputs.SourceTextFilterArgs>? SourceTextFilter { get; set; }

        public MultiColumnDatatypeChangeArgs()
        {
        }
        public static new MultiColumnDatatypeChangeArgs Empty => new MultiColumnDatatypeChangeArgs();
    }
}
