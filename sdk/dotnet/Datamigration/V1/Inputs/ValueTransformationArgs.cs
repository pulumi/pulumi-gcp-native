// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Datamigration.V1.Inputs
{

    /// <summary>
    /// Description of data transformation during migration as part of the ConditionalColumnSetValue.
    /// </summary>
    public sealed class ValueTransformationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. Applies a hash function on the data
        /// </summary>
        [Input("applyHash")]
        public Input<Inputs.ApplyHashArgs>? ApplyHash { get; set; }

        /// <summary>
        /// Optional. Set to max_value - if integer or numeric, will use int.maxvalue, etc
        /// </summary>
        [Input("assignMaxValue")]
        public Input<Inputs.EmptyArgs>? AssignMaxValue { get; set; }

        /// <summary>
        /// Optional. Set to min_value - if integer or numeric, will use int.minvalue, etc
        /// </summary>
        [Input("assignMinValue")]
        public Input<Inputs.EmptyArgs>? AssignMinValue { get; set; }

        /// <summary>
        /// Optional. Set to null
        /// </summary>
        [Input("assignNull")]
        public Input<Inputs.EmptyArgs>? AssignNull { get; set; }

        /// <summary>
        /// Optional. Set to a specific value (value is converted to fit the target data type)
        /// </summary>
        [Input("assignSpecificValue")]
        public Input<Inputs.AssignSpecificValueArgs>? AssignSpecificValue { get; set; }

        /// <summary>
        /// Optional. Filter on relation between source value and compare value of type double.
        /// </summary>
        [Input("doubleComparison")]
        public Input<Inputs.DoubleComparisonFilterArgs>? DoubleComparison { get; set; }

        /// <summary>
        /// Optional. Filter on relation between source value and compare value of type integer.
        /// </summary>
        [Input("intComparison")]
        public Input<Inputs.IntComparisonFilterArgs>? IntComparison { get; set; }

        /// <summary>
        /// Optional. Value is null
        /// </summary>
        [Input("isNull")]
        public Input<Inputs.EmptyArgs>? IsNull { get; set; }

        /// <summary>
        /// Optional. Allows the data to change scale
        /// </summary>
        [Input("roundScale")]
        public Input<Inputs.RoundToScaleArgs>? RoundScale { get; set; }

        /// <summary>
        /// Optional. Value is found in the specified list.
        /// </summary>
        [Input("valueList")]
        public Input<Inputs.ValueListFilterArgs>? ValueList { get; set; }

        public ValueTransformationArgs()
        {
        }
        public static new ValueTransformationArgs Empty => new ValueTransformationArgs();
    }
}
