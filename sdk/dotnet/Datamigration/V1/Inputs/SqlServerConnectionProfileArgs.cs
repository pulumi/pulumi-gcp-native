// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Datamigration.V1.Inputs
{

    /// <summary>
    /// Specifies connection parameters required specifically for SQL Server databases.
    /// </summary>
    public sealed class SqlServerConnectionProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The backup details in Cloud Storage for homogeneous migration to Cloud SQL for SQL Server.
        /// </summary>
        [Input("backups")]
        public Input<Inputs.SqlServerBackupsArgs>? Backups { get; set; }

        /// <summary>
        /// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        /// </summary>
        [Input("cloudSqlId")]
        public Input<string>? CloudSqlId { get; set; }

        /// <summary>
        /// Forward SSH tunnel connectivity.
        /// </summary>
        [Input("forwardSshConnectivity")]
        public Input<Inputs.ForwardSshTunnelConnectivityArgs>? ForwardSshConnectivity { get; set; }

        /// <summary>
        /// The IP or hostname of the source SQL Server database.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        /// <summary>
        /// The network port of the source SQL Server database.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// Private connectivity.
        /// </summary>
        [Input("privateConnectivity")]
        public Input<Inputs.PrivateConnectivityArgs>? PrivateConnectivity { get; set; }

        /// <summary>
        /// Private Service Connect connectivity.
        /// </summary>
        [Input("privateServiceConnectConnectivity")]
        public Input<Inputs.PrivateServiceConnectConnectivityArgs>? PrivateServiceConnectConnectivity { get; set; }

        /// <summary>
        /// SSL configuration for the destination to connect to the source database.
        /// </summary>
        [Input("ssl")]
        public Input<Inputs.SslConfigArgs>? Ssl { get; set; }

        /// <summary>
        /// Static IP connectivity data (default, no additional details needed).
        /// </summary>
        [Input("staticIpConnectivity")]
        public Input<Inputs.StaticIpConnectivityArgs>? StaticIpConnectivity { get; set; }

        /// <summary>
        /// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public SqlServerConnectionProfileArgs()
        {
        }
        public static new SqlServerConnectionProfileArgs Empty => new SqlServerConnectionProfileArgs();
    }
}
