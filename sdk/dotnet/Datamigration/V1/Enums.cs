// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Datamigration.V1
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
    /// </summary>
    [EnumType]
    public readonly struct CloudSqlSettingsActivationPolicy : IEquatable<CloudSqlSettingsActivationPolicy>
    {
        private readonly string _value;

        private CloudSqlSettingsActivationPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// unspecified policy.
        /// </summary>
        public static CloudSqlSettingsActivationPolicy SqlActivationPolicyUnspecified { get; } = new CloudSqlSettingsActivationPolicy("SQL_ACTIVATION_POLICY_UNSPECIFIED");
        /// <summary>
        /// The instance is always up and running.
        /// </summary>
        public static CloudSqlSettingsActivationPolicy Always { get; } = new CloudSqlSettingsActivationPolicy("ALWAYS");
        /// <summary>
        /// The instance should never spin up.
        /// </summary>
        public static CloudSqlSettingsActivationPolicy Never { get; } = new CloudSqlSettingsActivationPolicy("NEVER");

        public static bool operator ==(CloudSqlSettingsActivationPolicy left, CloudSqlSettingsActivationPolicy right) => left.Equals(right);
        public static bool operator !=(CloudSqlSettingsActivationPolicy left, CloudSqlSettingsActivationPolicy right) => !left.Equals(right);

        public static explicit operator string(CloudSqlSettingsActivationPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CloudSqlSettingsActivationPolicy other && Equals(other);
        public bool Equals(CloudSqlSettingsActivationPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of storage: `PD_SSD` (default) or `PD_HDD`.
    /// </summary>
    [EnumType]
    public readonly struct CloudSqlSettingsDataDiskType : IEquatable<CloudSqlSettingsDataDiskType>
    {
        private readonly string _value;

        private CloudSqlSettingsDataDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified.
        /// </summary>
        public static CloudSqlSettingsDataDiskType SqlDataDiskTypeUnspecified { get; } = new CloudSqlSettingsDataDiskType("SQL_DATA_DISK_TYPE_UNSPECIFIED");
        /// <summary>
        /// SSD disk.
        /// </summary>
        public static CloudSqlSettingsDataDiskType PdSsd { get; } = new CloudSqlSettingsDataDiskType("PD_SSD");
        /// <summary>
        /// HDD disk.
        /// </summary>
        public static CloudSqlSettingsDataDiskType PdHdd { get; } = new CloudSqlSettingsDataDiskType("PD_HDD");

        public static bool operator ==(CloudSqlSettingsDataDiskType left, CloudSqlSettingsDataDiskType right) => left.Equals(right);
        public static bool operator !=(CloudSqlSettingsDataDiskType left, CloudSqlSettingsDataDiskType right) => !left.Equals(right);

        public static explicit operator string(CloudSqlSettingsDataDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CloudSqlSettingsDataDiskType other && Equals(other);
        public bool Equals(CloudSqlSettingsDataDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The database engine type and version.
    /// </summary>
    [EnumType]
    public readonly struct CloudSqlSettingsDatabaseVersion : IEquatable<CloudSqlSettingsDatabaseVersion>
    {
        private readonly string _value;

        private CloudSqlSettingsDatabaseVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified version.
        /// </summary>
        public static CloudSqlSettingsDatabaseVersion SqlDatabaseVersionUnspecified { get; } = new CloudSqlSettingsDatabaseVersion("SQL_DATABASE_VERSION_UNSPECIFIED");
        /// <summary>
        /// MySQL 5.6.
        /// </summary>
        public static CloudSqlSettingsDatabaseVersion Mysql56 { get; } = new CloudSqlSettingsDatabaseVersion("MYSQL_5_6");
        /// <summary>
        /// MySQL 5.7.
        /// </summary>
        public static CloudSqlSettingsDatabaseVersion Mysql57 { get; } = new CloudSqlSettingsDatabaseVersion("MYSQL_5_7");
        /// <summary>
        /// PostgreSQL 9.6.
        /// </summary>
        public static CloudSqlSettingsDatabaseVersion Postgres96 { get; } = new CloudSqlSettingsDatabaseVersion("POSTGRES_9_6");
        /// <summary>
        /// PostgreSQL 11.
        /// </summary>
        public static CloudSqlSettingsDatabaseVersion Postgres11 { get; } = new CloudSqlSettingsDatabaseVersion("POSTGRES_11");
        /// <summary>
        /// PostgreSQL 10.
        /// </summary>
        public static CloudSqlSettingsDatabaseVersion Postgres10 { get; } = new CloudSqlSettingsDatabaseVersion("POSTGRES_10");
        /// <summary>
        /// MySQL 8.0.
        /// </summary>
        public static CloudSqlSettingsDatabaseVersion Mysql80 { get; } = new CloudSqlSettingsDatabaseVersion("MYSQL_8_0");
        /// <summary>
        /// PostgreSQL 12.
        /// </summary>
        public static CloudSqlSettingsDatabaseVersion Postgres12 { get; } = new CloudSqlSettingsDatabaseVersion("POSTGRES_12");
        /// <summary>
        /// PostgreSQL 13.
        /// </summary>
        public static CloudSqlSettingsDatabaseVersion Postgres13 { get; } = new CloudSqlSettingsDatabaseVersion("POSTGRES_13");
        /// <summary>
        /// PostgreSQL 14.
        /// </summary>
        public static CloudSqlSettingsDatabaseVersion Postgres14 { get; } = new CloudSqlSettingsDatabaseVersion("POSTGRES_14");

        public static bool operator ==(CloudSqlSettingsDatabaseVersion left, CloudSqlSettingsDatabaseVersion right) => left.Equals(right);
        public static bool operator !=(CloudSqlSettingsDatabaseVersion left, CloudSqlSettingsDatabaseVersion right) => !left.Equals(right);

        public static explicit operator string(CloudSqlSettingsDatabaseVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CloudSqlSettingsDatabaseVersion other && Equals(other);
        public bool Equals(CloudSqlSettingsDatabaseVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The database provider.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionProfileProvider : IEquatable<ConnectionProfileProvider>
    {
        private readonly string _value;

        private ConnectionProfileProvider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The database provider is unknown.
        /// </summary>
        public static ConnectionProfileProvider DatabaseProviderUnspecified { get; } = new ConnectionProfileProvider("DATABASE_PROVIDER_UNSPECIFIED");
        /// <summary>
        /// CloudSQL runs the database.
        /// </summary>
        public static ConnectionProfileProvider Cloudsql { get; } = new ConnectionProfileProvider("CLOUDSQL");
        /// <summary>
        /// RDS runs the database.
        /// </summary>
        public static ConnectionProfileProvider Rds { get; } = new ConnectionProfileProvider("RDS");
        /// <summary>
        /// Amazon Aurora.
        /// </summary>
        public static ConnectionProfileProvider Aurora { get; } = new ConnectionProfileProvider("AURORA");

        public static bool operator ==(ConnectionProfileProvider left, ConnectionProfileProvider right) => left.Equals(right);
        public static bool operator !=(ConnectionProfileProvider left, ConnectionProfileProvider right) => !left.Equals(right);

        public static explicit operator string(ConnectionProfileProvider value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionProfileProvider other && Equals(other);
        public bool Equals(ConnectionProfileProvider other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current connection profile state (e.g. DRAFT, READY, or FAILED).
    /// </summary>
    [EnumType]
    public readonly struct ConnectionProfileState : IEquatable<ConnectionProfileState>
    {
        private readonly string _value;

        private ConnectionProfileState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The state of the connection profile is unknown.
        /// </summary>
        public static ConnectionProfileState StateUnspecified { get; } = new ConnectionProfileState("STATE_UNSPECIFIED");
        /// <summary>
        /// The connection profile is in draft mode and fully editable.
        /// </summary>
        public static ConnectionProfileState Draft { get; } = new ConnectionProfileState("DRAFT");
        /// <summary>
        /// The connection profile is being created.
        /// </summary>
        public static ConnectionProfileState Creating { get; } = new ConnectionProfileState("CREATING");
        /// <summary>
        /// The connection profile is ready.
        /// </summary>
        public static ConnectionProfileState Ready { get; } = new ConnectionProfileState("READY");
        /// <summary>
        /// The connection profile is being updated.
        /// </summary>
        public static ConnectionProfileState Updating { get; } = new ConnectionProfileState("UPDATING");
        /// <summary>
        /// The connection profile is being deleted.
        /// </summary>
        public static ConnectionProfileState Deleting { get; } = new ConnectionProfileState("DELETING");
        /// <summary>
        /// The connection profile has been deleted.
        /// </summary>
        public static ConnectionProfileState Deleted { get; } = new ConnectionProfileState("DELETED");
        /// <summary>
        /// The last action on the connection profile failed.
        /// </summary>
        public static ConnectionProfileState Failed { get; } = new ConnectionProfileState("FAILED");

        public static bool operator ==(ConnectionProfileState left, ConnectionProfileState right) => left.Equals(right);
        public static bool operator !=(ConnectionProfileState left, ConnectionProfileState right) => !left.Equals(right);

        public static explicit operator string(ConnectionProfileState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionProfileState other && Equals(other);
        public bool Equals(ConnectionProfileState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The database engine.
    /// </summary>
    [EnumType]
    public readonly struct DatabaseTypeEngine : IEquatable<DatabaseTypeEngine>
    {
        private readonly string _value;

        private DatabaseTypeEngine(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The source database engine of the migration job is unknown.
        /// </summary>
        public static DatabaseTypeEngine DatabaseEngineUnspecified { get; } = new DatabaseTypeEngine("DATABASE_ENGINE_UNSPECIFIED");
        /// <summary>
        /// The source engine is MySQL.
        /// </summary>
        public static DatabaseTypeEngine Mysql { get; } = new DatabaseTypeEngine("MYSQL");
        /// <summary>
        /// The source engine is PostgreSQL.
        /// </summary>
        public static DatabaseTypeEngine Postgresql { get; } = new DatabaseTypeEngine("POSTGRESQL");

        public static bool operator ==(DatabaseTypeEngine left, DatabaseTypeEngine right) => left.Equals(right);
        public static bool operator !=(DatabaseTypeEngine left, DatabaseTypeEngine right) => !left.Equals(right);

        public static explicit operator string(DatabaseTypeEngine value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseTypeEngine other && Equals(other);
        public bool Equals(DatabaseTypeEngine other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The database provider.
    /// </summary>
    [EnumType]
    public readonly struct DatabaseTypeProvider : IEquatable<DatabaseTypeProvider>
    {
        private readonly string _value;

        private DatabaseTypeProvider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The database provider is unknown.
        /// </summary>
        public static DatabaseTypeProvider DatabaseProviderUnspecified { get; } = new DatabaseTypeProvider("DATABASE_PROVIDER_UNSPECIFIED");
        /// <summary>
        /// CloudSQL runs the database.
        /// </summary>
        public static DatabaseTypeProvider Cloudsql { get; } = new DatabaseTypeProvider("CLOUDSQL");
        /// <summary>
        /// RDS runs the database.
        /// </summary>
        public static DatabaseTypeProvider Rds { get; } = new DatabaseTypeProvider("RDS");
        /// <summary>
        /// Amazon Aurora.
        /// </summary>
        public static DatabaseTypeProvider Aurora { get; } = new DatabaseTypeProvider("AURORA");

        public static bool operator ==(DatabaseTypeProvider left, DatabaseTypeProvider right) => left.Equals(right);
        public static bool operator !=(DatabaseTypeProvider left, DatabaseTypeProvider right) => !left.Equals(right);

        public static explicit operator string(DatabaseTypeProvider value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseTypeProvider other && Equals(other);
        public bool Equals(DatabaseTypeProvider other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current migration job state.
    /// </summary>
    [EnumType]
    public readonly struct MigrationJobState : IEquatable<MigrationJobState>
    {
        private readonly string _value;

        private MigrationJobState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The state of the migration job is unknown.
        /// </summary>
        public static MigrationJobState StateUnspecified { get; } = new MigrationJobState("STATE_UNSPECIFIED");
        /// <summary>
        /// The migration job is down for maintenance.
        /// </summary>
        public static MigrationJobState Maintenance { get; } = new MigrationJobState("MAINTENANCE");
        /// <summary>
        /// The migration job is in draft mode and no resources are created.
        /// </summary>
        public static MigrationJobState Draft { get; } = new MigrationJobState("DRAFT");
        /// <summary>
        /// The migration job is being created.
        /// </summary>
        public static MigrationJobState Creating { get; } = new MigrationJobState("CREATING");
        /// <summary>
        /// The migration job is created and not started.
        /// </summary>
        public static MigrationJobState NotStarted { get; } = new MigrationJobState("NOT_STARTED");
        /// <summary>
        /// The migration job is running.
        /// </summary>
        public static MigrationJobState Running { get; } = new MigrationJobState("RUNNING");
        /// <summary>
        /// The migration job failed.
        /// </summary>
        public static MigrationJobState Failed { get; } = new MigrationJobState("FAILED");
        /// <summary>
        /// The migration job has been completed.
        /// </summary>
        public static MigrationJobState Completed { get; } = new MigrationJobState("COMPLETED");
        /// <summary>
        /// The migration job is being deleted.
        /// </summary>
        public static MigrationJobState Deleting { get; } = new MigrationJobState("DELETING");
        /// <summary>
        /// The migration job is being stopped.
        /// </summary>
        public static MigrationJobState Stopping { get; } = new MigrationJobState("STOPPING");
        /// <summary>
        /// The migration job is currently stopped.
        /// </summary>
        public static MigrationJobState Stopped { get; } = new MigrationJobState("STOPPED");
        /// <summary>
        /// The migration job has been deleted.
        /// </summary>
        public static MigrationJobState Deleted { get; } = new MigrationJobState("DELETED");
        /// <summary>
        /// The migration job is being updated.
        /// </summary>
        public static MigrationJobState Updating { get; } = new MigrationJobState("UPDATING");
        /// <summary>
        /// The migration job is starting.
        /// </summary>
        public static MigrationJobState Starting { get; } = new MigrationJobState("STARTING");
        /// <summary>
        /// The migration job is restarting.
        /// </summary>
        public static MigrationJobState Restarting { get; } = new MigrationJobState("RESTARTING");
        /// <summary>
        /// The migration job is resuming.
        /// </summary>
        public static MigrationJobState Resuming { get; } = new MigrationJobState("RESUMING");

        public static bool operator ==(MigrationJobState left, MigrationJobState right) => left.Equals(right);
        public static bool operator !=(MigrationJobState left, MigrationJobState right) => !left.Equals(right);

        public static explicit operator string(MigrationJobState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MigrationJobState other && Equals(other);
        public bool Equals(MigrationJobState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The migration job type.
    /// </summary>
    [EnumType]
    public readonly struct MigrationJobType : IEquatable<MigrationJobType>
    {
        private readonly string _value;

        private MigrationJobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The type of the migration job is unknown.
        /// </summary>
        public static MigrationJobType TypeUnspecified { get; } = new MigrationJobType("TYPE_UNSPECIFIED");
        /// <summary>
        /// The migration job is a one time migration.
        /// </summary>
        public static MigrationJobType OneTime { get; } = new MigrationJobType("ONE_TIME");
        /// <summary>
        /// The migration job is a continuous migration.
        /// </summary>
        public static MigrationJobType Continuous { get; } = new MigrationJobType("CONTINUOUS");

        public static bool operator ==(MigrationJobType left, MigrationJobType right) => left.Equals(right);
        public static bool operator !=(MigrationJobType left, MigrationJobType right) => !left.Equals(right);

        public static explicit operator string(MigrationJobType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MigrationJobType other && Equals(other);
        public bool Equals(MigrationJobType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
