// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Datamigration.V1
{
    /// <summary>
    /// Creates a new mapping rule for a given conversion workspace.
    /// </summary>
    [GoogleNativeResourceType("google-native:datamigration/v1:MappingRule")]
    public partial class MappingRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
        /// </summary>
        [Output("conditionalColumnSetValue")]
        public Output<Outputs.ConditionalColumnSetValueResponse> ConditionalColumnSetValue { get; private set; } = null!;

        [Output("conversionWorkspaceId")]
        public Output<string> ConversionWorkspaceId { get; private set; } = null!;

        /// <summary>
        /// Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
        /// </summary>
        [Output("convertRowidColumn")]
        public Output<Outputs.ConvertRowIdToColumnResponse> ConvertRowidColumn { get; private set; } = null!;

        /// <summary>
        /// Optional. A human readable name
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Optional. Rule to specify how multiple entities should be relocated into a different schema.
        /// </summary>
        [Output("entityMove")]
        public Output<Outputs.EntityMoveResponse> EntityMove { get; private set; } = null!;

        /// <summary>
        /// The rule filter
        /// </summary>
        [Output("filter")]
        public Output<Outputs.MappingRuleFilterResponse> Filter { get; private set; } = null!;

        /// <summary>
        /// Optional. Rule to specify the list of columns to include or exclude from a table.
        /// </summary>
        [Output("filterTableColumns")]
        public Output<Outputs.FilterTableColumnsResponse> FilterTableColumns { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Required. The ID of the rule to create.
        /// </summary>
        [Output("mappingRuleId")]
        public Output<string> MappingRuleId { get; private set; } = null!;

        /// <summary>
        /// Optional. Rule to specify how multiple columns should be converted to a different data type.
        /// </summary>
        [Output("multiColumnDataTypeChange")]
        public Output<Outputs.MultiColumnDatatypeChangeResponse> MultiColumnDataTypeChange { get; private set; } = null!;

        /// <summary>
        /// Optional. Rule to specify how multiple entities should be renamed.
        /// </summary>
        [Output("multiEntityRename")]
        public Output<Outputs.MultiEntityRenameResponse> MultiEntityRename { get; private set; } = null!;

        /// <summary>
        /// Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// The timestamp that the revision was created.
        /// </summary>
        [Output("revisionCreateTime")]
        public Output<string> RevisionCreateTime { get; private set; } = null!;

        /// <summary>
        /// The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
        /// </summary>
        [Output("revisionId")]
        public Output<string> RevisionId { get; private set; } = null!;

        /// <summary>
        /// The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
        /// </summary>
        [Output("ruleOrder")]
        public Output<string> RuleOrder { get; private set; } = null!;

        /// <summary>
        /// The rule scope
        /// </summary>
        [Output("ruleScope")]
        public Output<string> RuleScope { get; private set; } = null!;

        /// <summary>
        /// Optional. Rule to specify the primary key for a table
        /// </summary>
        [Output("setTablePrimaryKey")]
        public Output<Outputs.SetTablePrimaryKeyResponse> SetTablePrimaryKey { get; private set; } = null!;

        /// <summary>
        /// Optional. Rule to specify how a single column is converted.
        /// </summary>
        [Output("singleColumnChange")]
        public Output<Outputs.SingleColumnChangeResponse> SingleColumnChange { get; private set; } = null!;

        /// <summary>
        /// Optional. Rule to specify how a single entity should be renamed.
        /// </summary>
        [Output("singleEntityRename")]
        public Output<Outputs.SingleEntityRenameResponse> SingleEntityRename { get; private set; } = null!;

        /// <summary>
        /// Optional. Rule to specify how a single package is converted.
        /// </summary>
        [Output("singlePackageChange")]
        public Output<Outputs.SinglePackageChangeResponse> SinglePackageChange { get; private set; } = null!;

        /// <summary>
        /// Optional. Rule to change the sql code for an entity, for example, function, procedure.
        /// </summary>
        [Output("sourceSqlChange")]
        public Output<Outputs.SourceSqlChangeResponse> SourceSqlChange { get; private set; } = null!;

        /// <summary>
        /// Optional. The mapping rule state
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a MappingRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MappingRule(string name, MappingRuleArgs args, CustomResourceOptions? options = null)
            : base("google-native:datamigration/v1:MappingRule", name, args ?? new MappingRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MappingRule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:datamigration/v1:MappingRule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "conversionWorkspaceId",
                    "location",
                    "mappingRuleId",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MappingRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MappingRule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MappingRule(name, id, options);
        }
    }

    public sealed class MappingRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
        /// </summary>
        [Input("conditionalColumnSetValue")]
        public Input<Inputs.ConditionalColumnSetValueArgs>? ConditionalColumnSetValue { get; set; }

        [Input("conversionWorkspaceId", required: true)]
        public Input<string> ConversionWorkspaceId { get; set; } = null!;

        /// <summary>
        /// Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
        /// </summary>
        [Input("convertRowidColumn")]
        public Input<Inputs.ConvertRowIdToColumnArgs>? ConvertRowidColumn { get; set; }

        /// <summary>
        /// Optional. A human readable name
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Optional. Rule to specify how multiple entities should be relocated into a different schema.
        /// </summary>
        [Input("entityMove")]
        public Input<Inputs.EntityMoveArgs>? EntityMove { get; set; }

        /// <summary>
        /// The rule filter
        /// </summary>
        [Input("filter", required: true)]
        public Input<Inputs.MappingRuleFilterArgs> Filter { get; set; } = null!;

        /// <summary>
        /// Optional. Rule to specify the list of columns to include or exclude from a table.
        /// </summary>
        [Input("filterTableColumns")]
        public Input<Inputs.FilterTableColumnsArgs>? FilterTableColumns { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Required. The ID of the rule to create.
        /// </summary>
        [Input("mappingRuleId", required: true)]
        public Input<string> MappingRuleId { get; set; } = null!;

        /// <summary>
        /// Optional. Rule to specify how multiple columns should be converted to a different data type.
        /// </summary>
        [Input("multiColumnDataTypeChange")]
        public Input<Inputs.MultiColumnDatatypeChangeArgs>? MultiColumnDataTypeChange { get; set; }

        /// <summary>
        /// Optional. Rule to specify how multiple entities should be renamed.
        /// </summary>
        [Input("multiEntityRename")]
        public Input<Inputs.MultiEntityRenameArgs>? MultiEntityRename { get; set; }

        /// <summary>
        /// Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
        /// </summary>
        [Input("ruleOrder", required: true)]
        public Input<string> RuleOrder { get; set; } = null!;

        /// <summary>
        /// The rule scope
        /// </summary>
        [Input("ruleScope", required: true)]
        public Input<Pulumi.GoogleNative.Datamigration.V1.MappingRuleRuleScope> RuleScope { get; set; } = null!;

        /// <summary>
        /// Optional. Rule to specify the primary key for a table
        /// </summary>
        [Input("setTablePrimaryKey")]
        public Input<Inputs.SetTablePrimaryKeyArgs>? SetTablePrimaryKey { get; set; }

        /// <summary>
        /// Optional. Rule to specify how a single column is converted.
        /// </summary>
        [Input("singleColumnChange")]
        public Input<Inputs.SingleColumnChangeArgs>? SingleColumnChange { get; set; }

        /// <summary>
        /// Optional. Rule to specify how a single entity should be renamed.
        /// </summary>
        [Input("singleEntityRename")]
        public Input<Inputs.SingleEntityRenameArgs>? SingleEntityRename { get; set; }

        /// <summary>
        /// Optional. Rule to specify how a single package is converted.
        /// </summary>
        [Input("singlePackageChange")]
        public Input<Inputs.SinglePackageChangeArgs>? SinglePackageChange { get; set; }

        /// <summary>
        /// Optional. Rule to change the sql code for an entity, for example, function, procedure.
        /// </summary>
        [Input("sourceSqlChange")]
        public Input<Inputs.SourceSqlChangeArgs>? SourceSqlChange { get; set; }

        /// <summary>
        /// Optional. The mapping rule state
        /// </summary>
        [Input("state")]
        public Input<Pulumi.GoogleNative.Datamigration.V1.MappingRuleState>? State { get; set; }

        public MappingRuleArgs()
        {
        }
        public static new MappingRuleArgs Empty => new MappingRuleArgs();
    }
}
