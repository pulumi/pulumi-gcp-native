// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Datamigration.V1.Outputs
{

    /// <summary>
    /// Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
    /// </summary>
    [OutputType]
    public sealed class SingleColumnChangeResponse
    {
        /// <summary>
        /// Optional. Is the column of array type.
        /// </summary>
        public readonly bool Array;
        /// <summary>
        /// Optional. The length of the array, only relevant if the column type is an array.
        /// </summary>
        public readonly int ArrayLength;
        /// <summary>
        /// Optional. Is the column auto-generated/identity.
        /// </summary>
        public readonly bool AutoGenerated;
        /// <summary>
        /// Optional. Charset override - instead of table level charset.
        /// </summary>
        public readonly string Charset;
        /// <summary>
        /// Optional. Collation override - instead of table level collation.
        /// </summary>
        public readonly string Collation;
        /// <summary>
        /// Optional. Comment associated with the column.
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// Optional. Custom engine specific features.
        /// </summary>
        public readonly ImmutableDictionary<string, object> CustomFeatures;
        /// <summary>
        /// Optional. Column data type name.
        /// </summary>
        public readonly string DataType;
        /// <summary>
        /// Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
        /// </summary>
        public readonly int FractionalSecondsPrecision;
        /// <summary>
        /// Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
        /// </summary>
        public readonly string Length;
        /// <summary>
        /// Optional. Is the column nullable.
        /// </summary>
        public readonly bool Nullable;
        /// <summary>
        /// Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
        /// </summary>
        public readonly int Precision;
        /// <summary>
        /// Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
        /// </summary>
        public readonly int Scale;
        /// <summary>
        /// Optional. Specifies the list of values allowed in the column.
        /// </summary>
        public readonly ImmutableArray<string> SetValues;
        /// <summary>
        /// Optional. Is the column a UDT (User-defined Type).
        /// </summary>
        public readonly bool Udt;

        [OutputConstructor]
        private SingleColumnChangeResponse(
            bool array,

            int arrayLength,

            bool autoGenerated,

            string charset,

            string collation,

            string comment,

            ImmutableDictionary<string, object> customFeatures,

            string dataType,

            int fractionalSecondsPrecision,

            string length,

            bool nullable,

            int precision,

            int scale,

            ImmutableArray<string> setValues,

            bool udt)
        {
            Array = array;
            ArrayLength = arrayLength;
            AutoGenerated = autoGenerated;
            Charset = charset;
            Collation = collation;
            Comment = comment;
            CustomFeatures = customFeatures;
            DataType = dataType;
            FractionalSecondsPrecision = fractionalSecondsPrecision;
            Length = length;
            Nullable = nullable;
            Precision = precision;
            Scale = scale;
            SetValues = setValues;
            Udt = udt;
        }
    }
}
