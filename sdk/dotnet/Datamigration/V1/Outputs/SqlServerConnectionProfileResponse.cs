// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Datamigration.V1.Outputs
{

    /// <summary>
    /// Specifies connection parameters required specifically for SQL Server databases.
    /// </summary>
    [OutputType]
    public sealed class SqlServerConnectionProfileResponse
    {
        /// <summary>
        /// The backup details in Cloud Storage for homogeneous migration to Cloud SQL for SQL Server.
        /// </summary>
        public readonly Outputs.SqlServerBackupsResponse Backups;
        /// <summary>
        /// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
        /// </summary>
        public readonly string CloudSqlId;
        /// <summary>
        /// Forward SSH tunnel connectivity.
        /// </summary>
        public readonly Outputs.ForwardSshTunnelConnectivityResponse ForwardSshConnectivity;
        /// <summary>
        /// The IP or hostname of the source SQL Server database.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Indicates whether a new password is included in the request.
        /// </summary>
        public readonly bool PasswordSet;
        /// <summary>
        /// The network port of the source SQL Server database.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Private connectivity.
        /// </summary>
        public readonly Outputs.PrivateConnectivityResponse PrivateConnectivity;
        /// <summary>
        /// Private Service Connect connectivity.
        /// </summary>
        public readonly Outputs.PrivateServiceConnectConnectivityResponse PrivateServiceConnectConnectivity;
        /// <summary>
        /// SSL configuration for the destination to connect to the source database.
        /// </summary>
        public readonly Outputs.SslConfigResponse Ssl;
        /// <summary>
        /// Static IP connectivity data (default, no additional details needed).
        /// </summary>
        public readonly Outputs.StaticIpConnectivityResponse StaticIpConnectivity;
        /// <summary>
        /// The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private SqlServerConnectionProfileResponse(
            Outputs.SqlServerBackupsResponse backups,

            string cloudSqlId,

            Outputs.ForwardSshTunnelConnectivityResponse forwardSshConnectivity,

            string host,

            string password,

            bool passwordSet,

            int port,

            Outputs.PrivateConnectivityResponse privateConnectivity,

            Outputs.PrivateServiceConnectConnectivityResponse privateServiceConnectConnectivity,

            Outputs.SslConfigResponse ssl,

            Outputs.StaticIpConnectivityResponse staticIpConnectivity,

            string username)
        {
            Backups = backups;
            CloudSqlId = cloudSqlId;
            ForwardSshConnectivity = forwardSshConnectivity;
            Host = host;
            Password = password;
            PasswordSet = passwordSet;
            Port = port;
            PrivateConnectivity = privateConnectivity;
            PrivateServiceConnectConnectivity = privateServiceConnectConnectivity;
            Ssl = ssl;
            StaticIpConnectivity = staticIpConnectivity;
            Username = username;
        }
    }
}
