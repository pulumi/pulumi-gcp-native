// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Datamigration.V1.Outputs
{

    /// <summary>
    /// A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
    /// </summary>
    [OutputType]
    public sealed class MappingRuleFilterResponse
    {
        /// <summary>
        /// Optional. The rule should be applied to specific entities defined by their fully qualified names.
        /// </summary>
        public readonly ImmutableArray<string> Entities;
        /// <summary>
        /// Optional. The rule should be applied to entities whose non-qualified name contains the given string.
        /// </summary>
        public readonly string EntityNameContains;
        /// <summary>
        /// Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
        /// </summary>
        public readonly string EntityNamePrefix;
        /// <summary>
        /// Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
        /// </summary>
        public readonly string EntityNameSuffix;
        /// <summary>
        /// Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
        /// </summary>
        public readonly string ParentEntity;

        [OutputConstructor]
        private MappingRuleFilterResponse(
            ImmutableArray<string> entities,

            string entityNameContains,

            string entityNamePrefix,

            string entityNameSuffix,

            string parentEntity)
        {
            Entities = entities;
            EntityNameContains = entityNameContains;
            EntityNamePrefix = entityNamePrefix;
            EntityNameSuffix = entityNameSuffix;
            ParentEntity = parentEntity;
        }
    }
}
