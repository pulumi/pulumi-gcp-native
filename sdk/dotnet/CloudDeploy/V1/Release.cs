// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudDeploy.V1
{
    /// <summary>
    /// Creates a new Release in a given project and location.
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:clouddeploy/v1:Release")]
    public partial class Release : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether this is an abandoned release.
        /// </summary>
        [Output("abandoned")]
        public Output<bool> Abandoned { get; private set; } = null!;

        /// <summary>
        /// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>> Annotations { get; private set; } = null!;

        /// <summary>
        /// List of artifacts to pass through to Skaffold command.
        /// </summary>
        [Output("buildArtifacts")]
        public Output<ImmutableArray<Outputs.BuildArtifactResponse>> BuildArtifacts { get; private set; } = null!;

        /// <summary>
        /// Information around the state of the Release.
        /// </summary>
        [Output("condition")]
        public Output<Outputs.ReleaseConditionResponse> Condition { get; private set; } = null!;

        /// <summary>
        /// Time at which the `Release` was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        [Output("deliveryPipelineId")]
        public Output<string> DeliveryPipelineId { get; private set; } = null!;

        /// <summary>
        /// Snapshot of the parent pipeline taken at release creation time.
        /// </summary>
        [Output("deliveryPipelineSnapshot")]
        public Output<Outputs.DeliveryPipelineResponse> DeliveryPipelineSnapshot { get; private set; } = null!;

        /// <summary>
        /// Optional. The deploy parameters to use for all targets in this release.
        /// </summary>
        [Output("deployParameters")]
        public Output<ImmutableDictionary<string, string>> DeployParameters { get; private set; } = null!;

        /// <summary>
        /// Description of the `Release`. Max length is 255 characters.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 128 bytes.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Optional. Name of the `Release`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Required. ID of the `Release`.
        /// </summary>
        [Output("releaseId")]
        public Output<string> ReleaseId { get; private set; } = null!;

        /// <summary>
        /// Time at which the render completed.
        /// </summary>
        [Output("renderEndTime")]
        public Output<string> RenderEndTime { get; private set; } = null!;

        /// <summary>
        /// Time at which the render began.
        /// </summary>
        [Output("renderStartTime")]
        public Output<string> RenderStartTime { get; private set; } = null!;

        /// <summary>
        /// Current state of the render operation.
        /// </summary>
        [Output("renderState")]
        public Output<string> RenderState { get; private set; } = null!;

        /// <summary>
        /// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// Filepath of the Skaffold config inside of the config URI.
        /// </summary>
        [Output("skaffoldConfigPath")]
        public Output<string> SkaffoldConfigPath { get; private set; } = null!;

        /// <summary>
        /// Cloud Storage URI of tar.gz archive containing Skaffold configuration.
        /// </summary>
        [Output("skaffoldConfigUri")]
        public Output<string> SkaffoldConfigUri { get; private set; } = null!;

        /// <summary>
        /// The Skaffold version to use when operating on this release, such as "1.20.0". Not all versions are valid; Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.
        /// </summary>
        [Output("skaffoldVersion")]
        public Output<string> SkaffoldVersion { get; private set; } = null!;

        /// <summary>
        /// Map from target ID to the target artifacts created during the render operation.
        /// </summary>
        [Output("targetArtifacts")]
        public Output<ImmutableDictionary<string, Outputs.TargetArtifactResponse>> TargetArtifacts { get; private set; } = null!;

        /// <summary>
        /// Map from target ID to details of the render operation for that target.
        /// </summary>
        [Output("targetRenders")]
        public Output<ImmutableDictionary<string, Outputs.TargetRenderResponse>> TargetRenders { get; private set; } = null!;

        /// <summary>
        /// Snapshot of the targets taken at release creation time.
        /// </summary>
        [Output("targetSnapshots")]
        public Output<ImmutableArray<Outputs.TargetResponse>> TargetSnapshots { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the `Release`.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a Release resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Release(string name, ReleaseArgs args, CustomResourceOptions? options = null)
            : base("google-native:clouddeploy/v1:Release", name, args ?? new ReleaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Release(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:clouddeploy/v1:Release", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "deliveryPipelineId",
                    "location",
                    "project",
                    "releaseId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Release resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Release Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Release(name, id, options);
        }
    }

    public sealed class ReleaseArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("buildArtifacts")]
        private InputList<Inputs.BuildArtifactArgs>? _buildArtifacts;

        /// <summary>
        /// List of artifacts to pass through to Skaffold command.
        /// </summary>
        public InputList<Inputs.BuildArtifactArgs> BuildArtifacts
        {
            get => _buildArtifacts ?? (_buildArtifacts = new InputList<Inputs.BuildArtifactArgs>());
            set => _buildArtifacts = value;
        }

        [Input("deliveryPipelineId", required: true)]
        public Input<string> DeliveryPipelineId { get; set; } = null!;

        [Input("deployParameters")]
        private InputMap<string>? _deployParameters;

        /// <summary>
        /// Optional. The deploy parameters to use for all targets in this release.
        /// </summary>
        public InputMap<string> DeployParameters
        {
            get => _deployParameters ?? (_deployParameters = new InputMap<string>());
            set => _deployParameters = value;
        }

        /// <summary>
        /// Description of the `Release`. Max length is 255 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 128 bytes.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Optional. Name of the `Release`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Required. ID of the `Release`.
        /// </summary>
        [Input("releaseId", required: true)]
        public Input<string> ReleaseId { get; set; } = null!;

        /// <summary>
        /// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// Filepath of the Skaffold config inside of the config URI.
        /// </summary>
        [Input("skaffoldConfigPath")]
        public Input<string>? SkaffoldConfigPath { get; set; }

        /// <summary>
        /// Cloud Storage URI of tar.gz archive containing Skaffold configuration.
        /// </summary>
        [Input("skaffoldConfigUri")]
        public Input<string>? SkaffoldConfigUri { get; set; }

        /// <summary>
        /// The Skaffold version to use when operating on this release, such as "1.20.0". Not all versions are valid; Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.
        /// </summary>
        [Input("skaffoldVersion")]
        public Input<string>? SkaffoldVersion { get; set; }

        public ReleaseArgs()
        {
        }
        public static new ReleaseArgs Empty => new ReleaseArgs();
    }
}
