// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudDeploy.V1
{
    public static class GetRelease
    {
        /// <summary>
        /// Gets details of a single Release.
        /// </summary>
        public static Task<GetReleaseResult> InvokeAsync(GetReleaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReleaseResult>("google-native:clouddeploy/v1:getRelease", args ?? new GetReleaseArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Release.
        /// </summary>
        public static Output<GetReleaseResult> Invoke(GetReleaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReleaseResult>("google-native:clouddeploy/v1:getRelease", args ?? new GetReleaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReleaseArgs : global::Pulumi.InvokeArgs
    {
        [Input("deliveryPipelineId", required: true)]
        public string DeliveryPipelineId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("releaseId", required: true)]
        public string ReleaseId { get; set; } = null!;

        public GetReleaseArgs()
        {
        }
        public static new GetReleaseArgs Empty => new GetReleaseArgs();
    }

    public sealed class GetReleaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("deliveryPipelineId", required: true)]
        public Input<string> DeliveryPipelineId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("releaseId", required: true)]
        public Input<string> ReleaseId { get; set; } = null!;

        public GetReleaseInvokeArgs()
        {
        }
        public static new GetReleaseInvokeArgs Empty => new GetReleaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetReleaseResult
    {
        /// <summary>
        /// Indicates whether this is an abandoned release.
        /// </summary>
        public readonly bool Abandoned;
        /// <summary>
        /// User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// List of artifacts to pass through to Skaffold command.
        /// </summary>
        public readonly ImmutableArray<Outputs.BuildArtifactResponse> BuildArtifacts;
        /// <summary>
        /// Information around the state of the Release.
        /// </summary>
        public readonly Outputs.ReleaseConditionResponse Condition;
        /// <summary>
        /// Time at which the `Release` was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Snapshot of the parent pipeline taken at release creation time.
        /// </summary>
        public readonly Outputs.DeliveryPipelineResponse DeliveryPipelineSnapshot;
        /// <summary>
        /// Optional. The deploy parameters to use for all targets in this release.
        /// </summary>
        public readonly ImmutableDictionary<string, string> DeployParameters;
        /// <summary>
        /// Description of the `Release`. Max length is 255 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be &lt;= 128 bytes.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Optional. Name of the `Release`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Time at which the render completed.
        /// </summary>
        public readonly string RenderEndTime;
        /// <summary>
        /// Time at which the render began.
        /// </summary>
        public readonly string RenderStartTime;
        /// <summary>
        /// Current state of the render operation.
        /// </summary>
        public readonly string RenderState;
        /// <summary>
        /// Filepath of the Skaffold config inside of the config URI.
        /// </summary>
        public readonly string SkaffoldConfigPath;
        /// <summary>
        /// Cloud Storage URI of tar.gz archive containing Skaffold configuration.
        /// </summary>
        public readonly string SkaffoldConfigUri;
        /// <summary>
        /// The Skaffold version to use when operating on this release, such as "1.20.0". Not all versions are valid; Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.
        /// </summary>
        public readonly string SkaffoldVersion;
        /// <summary>
        /// Map from target ID to the target artifacts created during the render operation.
        /// </summary>
        public readonly Outputs.TargetArtifactResponse TargetArtifacts;
        /// <summary>
        /// Map from target ID to details of the render operation for that target.
        /// </summary>
        public readonly Outputs.TargetRenderResponse TargetRenders;
        /// <summary>
        /// Snapshot of the targets taken at release creation time.
        /// </summary>
        public readonly ImmutableArray<Outputs.TargetResponse> TargetSnapshots;
        /// <summary>
        /// Unique identifier of the `Release`.
        /// </summary>
        public readonly string Uid;

        [OutputConstructor]
        private GetReleaseResult(
            bool abandoned,

            ImmutableDictionary<string, string> annotations,

            ImmutableArray<Outputs.BuildArtifactResponse> buildArtifacts,

            Outputs.ReleaseConditionResponse condition,

            string createTime,

            Outputs.DeliveryPipelineResponse deliveryPipelineSnapshot,

            ImmutableDictionary<string, string> deployParameters,

            string description,

            string etag,

            ImmutableDictionary<string, string> labels,

            string name,

            string renderEndTime,

            string renderStartTime,

            string renderState,

            string skaffoldConfigPath,

            string skaffoldConfigUri,

            string skaffoldVersion,

            Outputs.TargetArtifactResponse targetArtifacts,

            Outputs.TargetRenderResponse targetRenders,

            ImmutableArray<Outputs.TargetResponse> targetSnapshots,

            string uid)
        {
            Abandoned = abandoned;
            Annotations = annotations;
            BuildArtifacts = buildArtifacts;
            Condition = condition;
            CreateTime = createTime;
            DeliveryPipelineSnapshot = deliveryPipelineSnapshot;
            DeployParameters = deployParameters;
            Description = description;
            Etag = etag;
            Labels = labels;
            Name = name;
            RenderEndTime = renderEndTime;
            RenderStartTime = renderStartTime;
            RenderState = renderState;
            SkaffoldConfigPath = skaffoldConfigPath;
            SkaffoldConfigUri = skaffoldConfigUri;
            SkaffoldVersion = skaffoldVersion;
            TargetArtifacts = targetArtifacts;
            TargetRenders = targetRenders;
            TargetSnapshots = targetSnapshots;
            Uid = uid;
        }
    }
}
