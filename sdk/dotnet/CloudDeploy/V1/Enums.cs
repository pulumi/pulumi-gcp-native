// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.CloudDeploy.V1
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ExecutionConfigUsagesItem : IEquatable<ExecutionConfigUsagesItem>
    {
        private readonly string _value;

        private ExecutionConfigUsagesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value. This value is unused.
        /// </summary>
        public static ExecutionConfigUsagesItem ExecutionEnvironmentUsageUnspecified { get; } = new ExecutionConfigUsagesItem("EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED");
        /// <summary>
        /// Use for rendering.
        /// </summary>
        public static ExecutionConfigUsagesItem Render { get; } = new ExecutionConfigUsagesItem("RENDER");
        /// <summary>
        /// Use for deploying and deployment hooks.
        /// </summary>
        public static ExecutionConfigUsagesItem Deploy { get; } = new ExecutionConfigUsagesItem("DEPLOY");
        /// <summary>
        /// Use for deployment verification.
        /// </summary>
        public static ExecutionConfigUsagesItem Verify { get; } = new ExecutionConfigUsagesItem("VERIFY");
        /// <summary>
        /// Use for predeploy job execution.
        /// </summary>
        public static ExecutionConfigUsagesItem Predeploy { get; } = new ExecutionConfigUsagesItem("PREDEPLOY");
        /// <summary>
        /// Use for postdeploy job execution.
        /// </summary>
        public static ExecutionConfigUsagesItem Postdeploy { get; } = new ExecutionConfigUsagesItem("POSTDEPLOY");

        public static bool operator ==(ExecutionConfigUsagesItem left, ExecutionConfigUsagesItem right) => left.Equals(right);
        public static bool operator !=(ExecutionConfigUsagesItem left, ExecutionConfigUsagesItem right) => !left.Equals(right);

        public static explicit operator string(ExecutionConfigUsagesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExecutionConfigUsagesItem other && Equals(other);
        public bool Equals(ExecutionConfigUsagesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.
    /// </summary>
    [EnumType]
    public readonly struct RetryBackoffMode : IEquatable<RetryBackoffMode>
    {
        private readonly string _value;

        private RetryBackoffMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No WaitMode is specified.
        /// </summary>
        public static RetryBackoffMode BackoffModeUnspecified { get; } = new RetryBackoffMode("BACKOFF_MODE_UNSPECIFIED");
        /// <summary>
        /// Increases the wait time linearly.
        /// </summary>
        public static RetryBackoffMode BackoffModeLinear { get; } = new RetryBackoffMode("BACKOFF_MODE_LINEAR");
        /// <summary>
        /// Increases the wait time exponentially.
        /// </summary>
        public static RetryBackoffMode BackoffModeExponential { get; } = new RetryBackoffMode("BACKOFF_MODE_EXPONENTIAL");

        public static bool operator ==(RetryBackoffMode left, RetryBackoffMode right) => left.Equals(right);
        public static bool operator !=(RetryBackoffMode left, RetryBackoffMode right) => !left.Equals(right);

        public static explicit operator string(RetryBackoffMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RetryBackoffMode other && Equals(other);
        public bool Equals(RetryBackoffMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
