// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BeyondCorp.V1Alpha
{
    public static class GetConnector
    {
        /// <summary>
        /// Gets details of a single Connector.
        /// </summary>
        public static Task<GetConnectorResult> InvokeAsync(GetConnectorArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConnectorResult>("google-native:beyondcorp/v1alpha:getConnector", args ?? new GetConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Connector.
        /// </summary>
        public static Output<GetConnectorResult> Invoke(GetConnectorInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConnectorResult>("google-native:beyondcorp/v1alpha:getConnector", args ?? new GetConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectorArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectorId", required: true)]
        public string ConnectorId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetConnectorArgs()
        {
        }
        public static new GetConnectorArgs Empty => new GetConnectorArgs();
    }

    public sealed class GetConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectorId", required: true)]
        public Input<string> ConnectorId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetConnectorInvokeArgs()
        {
        }
        public static new GetConnectorInvokeArgs Empty => new GetConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectorResult
    {
        /// <summary>
        /// Timestamp when the resource was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. An arbitrary user-provided name for the connector. Cannot exceed 64 characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Optional. Resource labels to represent user provided metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Unique resource name of the connector. The name is ignored when creating a connector.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Principal information about the Identity of the connector.
        /// </summary>
        public readonly Outputs.PrincipalInfoResponse PrincipalInfo;
        /// <summary>
        /// Optional. Resource info of the connector.
        /// </summary>
        public readonly Outputs.ResourceInfoResponse ResourceInfo;
        /// <summary>
        /// The current state of the connector.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// A unique identifier for the instance generated by the system.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// Timestamp when the resource was last modified.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetConnectorResult(
            string createTime,

            string displayName,

            ImmutableDictionary<string, string> labels,

            string name,

            Outputs.PrincipalInfoResponse principalInfo,

            Outputs.ResourceInfoResponse resourceInfo,

            string state,

            string uid,

            string updateTime)
        {
            CreateTime = createTime;
            DisplayName = displayName;
            Labels = labels;
            Name = name;
            PrincipalInfo = principalInfo;
            ResourceInfo = resourceInfo;
            State = state;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
