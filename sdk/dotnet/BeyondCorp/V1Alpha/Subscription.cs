// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BeyondCorp.V1Alpha
{
    /// <summary>
    /// Creates a new BeyondCorp Enterprise Subscription in a given organization. Location will always be global as BeyondCorp subscriptions are per organization.
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:beyondcorp/v1alpha:Subscription")]
    public partial class Subscription : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Represents that, if subscription will renew or end when the term ends.
        /// </summary>
        [Output("autoRenewEnabled")]
        public Output<bool> AutoRenewEnabled { get; private set; } = null!;

        /// <summary>
        /// Create time of the subscription.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// End time of the subscription.
        /// </summary>
        [Output("endTime")]
        public Output<string> EndTime { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Unique resource name of the Subscription. The name is ignored when creating a subscription.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// Number of seats in the subscription.
        /// </summary>
        [Output("seatCount")]
        public Output<string> SeatCount { get; private set; } = null!;

        /// <summary>
        /// SKU of subscription.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// Start time of the subscription.
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// The current state of the subscription.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Type of subscription.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Subscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subscription(string name, SubscriptionArgs args, CustomResourceOptions? options = null)
            : base("google-native:beyondcorp/v1alpha:Subscription", name, args ?? new SubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subscription(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:beyondcorp/v1alpha:Subscription", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "organizationId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subscription Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Subscription(name, id, options);
        }
    }

    public sealed class SubscriptionArgs : global::Pulumi.ResourceArgs
    {
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Unique resource name of the Subscription. The name is ignored when creating a subscription.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// SKU of subscription.
        /// </summary>
        [Input("sku", required: true)]
        public Input<Pulumi.GoogleNative.BeyondCorp.V1Alpha.SubscriptionSku> Sku { get; set; } = null!;

        /// <summary>
        /// Type of subscription.
        /// </summary>
        [Input("type", required: true)]
        public Input<Pulumi.GoogleNative.BeyondCorp.V1Alpha.SubscriptionType> Type { get; set; } = null!;

        public SubscriptionArgs()
        {
        }
        public static new SubscriptionArgs Empty => new SubscriptionArgs();
    }
}
