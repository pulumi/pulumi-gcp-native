// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BeyondCorp.V1Alpha
{
    public static class GetClientConnectorService
    {
        /// <summary>
        /// Gets details of a single ClientConnectorService.
        /// </summary>
        public static Task<GetClientConnectorServiceResult> InvokeAsync(GetClientConnectorServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClientConnectorServiceResult>("google-native:beyondcorp/v1alpha:getClientConnectorService", args ?? new GetClientConnectorServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single ClientConnectorService.
        /// </summary>
        public static Output<GetClientConnectorServiceResult> Invoke(GetClientConnectorServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClientConnectorServiceResult>("google-native:beyondcorp/v1alpha:getClientConnectorService", args ?? new GetClientConnectorServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClientConnectorServiceArgs : global::Pulumi.InvokeArgs
    {
        [Input("clientConnectorServiceId", required: true)]
        public string ClientConnectorServiceId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetClientConnectorServiceArgs()
        {
        }
        public static new GetClientConnectorServiceArgs Empty => new GetClientConnectorServiceArgs();
    }

    public sealed class GetClientConnectorServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clientConnectorServiceId", required: true)]
        public Input<string> ClientConnectorServiceId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetClientConnectorServiceInvokeArgs()
        {
        }
        public static new GetClientConnectorServiceInvokeArgs Empty => new GetClientConnectorServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetClientConnectorServiceResult
    {
        /// <summary>
        /// [Output only] Create time stamp.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. User-provided name. The display name should follow certain format. * Must be 6 to 30 characters in length. * Can only contain lowercase letters, numbers, and hyphens. * Must start with a letter.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The details of the egress settings.
        /// </summary>
        public readonly Outputs.EgressResponse Egress;
        /// <summary>
        /// The details of the ingress settings.
        /// </summary>
        public readonly Outputs.IngressResponse Ingress;
        /// <summary>
        /// Name of resource. The name is ignored during creation.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The operational state of the ClientConnectorService.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// [Output only] Update time stamp.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetClientConnectorServiceResult(
            string createTime,

            string displayName,

            Outputs.EgressResponse egress,

            Outputs.IngressResponse ingress,

            string name,

            string state,

            string updateTime)
        {
            CreateTime = createTime;
            DisplayName = displayName;
            Egress = egress;
            Ingress = ingress;
            Name = name;
            State = state;
            UpdateTime = updateTime;
        }
    }
}
