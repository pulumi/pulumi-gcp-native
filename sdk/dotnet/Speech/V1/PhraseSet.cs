// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Speech.V1
{
    /// <summary>
    /// Create a set of phrase hints. Each item in the set can be a single word or a multi-word phrase. The items in the PhraseSet are favored by the recognition model when you send a call that includes the PhraseSet.
    /// </summary>
    [GoogleNativeResourceType("google-native:speech/v1:PhraseSet")]
    public partial class PhraseSet : Pulumi.CustomResource
    {
        /// <summary>
        /// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
        /// </summary>
        [Output("boost")]
        public Output<double> Boost { get; private set; } = null!;

        /// <summary>
        /// The resource name of the phrase set.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of word and phrases.
        /// </summary>
        [Output("phrases")]
        public Output<ImmutableArray<Outputs.PhraseResponse>> Phrases { get; private set; } = null!;


        /// <summary>
        /// Create a PhraseSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PhraseSet(string name, PhraseSetArgs args, CustomResourceOptions? options = null)
            : base("google-native:speech/v1:PhraseSet", name, args ?? new PhraseSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PhraseSet(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:speech/v1:PhraseSet", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PhraseSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PhraseSet Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PhraseSet(name, id, options);
        }
    }

    public sealed class PhraseSetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
        /// </summary>
        [Input("boost")]
        public Input<double>? Boost { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the phrase set.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID to use for the phrase set, which will become the final component of the phrase set's resource name. This value should restrict to letters, numbers, and hyphens, with the first character a letter, the last a letter or a number, and be 4-63 characters.
        /// </summary>
        [Input("phraseSetId", required: true)]
        public Input<string> PhraseSetId { get; set; } = null!;

        [Input("phrases")]
        private InputList<Inputs.PhraseArgs>? _phrases;

        /// <summary>
        /// A list of word and phrases.
        /// </summary>
        public InputList<Inputs.PhraseArgs> Phrases
        {
            get => _phrases ?? (_phrases = new InputList<Inputs.PhraseArgs>());
            set => _phrases = value;
        }

        [Input("project")]
        public Input<string>? Project { get; set; }

        public PhraseSetArgs()
        {
        }
    }
}
