// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Speech.V1
{
    public static class GetPhraseSet
    {
        /// <summary>
        /// Get a phrase set.
        /// </summary>
        public static Task<GetPhraseSetResult> InvokeAsync(GetPhraseSetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPhraseSetResult>("google-native:speech/v1:getPhraseSet", args ?? new GetPhraseSetArgs(), options.WithDefaults());

        /// <summary>
        /// Get a phrase set.
        /// </summary>
        public static Output<GetPhraseSetResult> Invoke(GetPhraseSetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPhraseSetResult>("google-native:speech/v1:getPhraseSet", args ?? new GetPhraseSetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPhraseSetArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("phraseSetId", required: true)]
        public string PhraseSetId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetPhraseSetArgs()
        {
        }
        public static new GetPhraseSetArgs Empty => new GetPhraseSetArgs();
    }

    public sealed class GetPhraseSetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("phraseSetId", required: true)]
        public Input<string> PhraseSetId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetPhraseSetInvokeArgs()
        {
        }
        public static new GetPhraseSetInvokeArgs Empty => new GetPhraseSetInvokeArgs();
    }


    [OutputType]
    public sealed class GetPhraseSetResult
    {
        /// <summary>
        /// Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.
        /// </summary>
        public readonly double Boost;
        /// <summary>
        /// The time at which this resource was requested for deletion. This field is not used.
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// User-settable, human-readable name for the PhraseSet. Must be 63 characters or less. This field is not used.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The time at which this resource will be purged. This field is not used.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
        /// </summary>
        public readonly string KmsKeyName;
        /// <summary>
        /// The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.
        /// </summary>
        public readonly string KmsKeyVersionName;
        /// <summary>
        /// The resource name of the phrase set.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of word and phrases.
        /// </summary>
        public readonly ImmutableArray<Outputs.PhraseResponse> Phrases;
        /// <summary>
        /// Whether or not this PhraseSet is in the process of being updated. This field is not used.
        /// </summary>
        public readonly bool Reconciling;
        /// <summary>
        /// The CustomClass lifecycle state. This field is not used.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// System-assigned unique identifier for the PhraseSet. This field is not used.
        /// </summary>
        public readonly string Uid;

        [OutputConstructor]
        private GetPhraseSetResult(
            ImmutableDictionary<string, string> annotations,

            double boost,

            string deleteTime,

            string displayName,

            string etag,

            string expireTime,

            string kmsKeyName,

            string kmsKeyVersionName,

            string name,

            ImmutableArray<Outputs.PhraseResponse> phrases,

            bool reconciling,

            string state,

            string uid)
        {
            Annotations = annotations;
            Boost = boost;
            DeleteTime = deleteTime;
            DisplayName = displayName;
            Etag = etag;
            ExpireTime = expireTime;
            KmsKeyName = kmsKeyName;
            KmsKeyVersionName = kmsKeyVersionName;
            Name = name;
            Phrases = phrases;
            Reconciling = reconciling;
            State = state;
            Uid = uid;
        }
    }
}
