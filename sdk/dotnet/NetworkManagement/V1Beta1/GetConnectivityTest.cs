// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.GoogleNative.NetworkManagement.V1Beta1
{
    public static class GetConnectivityTest
    {
        /// <summary>
        /// Gets the details of a specific Connectivity Test.
        /// </summary>
        public static Task<GetConnectivityTestResult> InvokeAsync(GetConnectivityTestArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConnectivityTestResult>("google-native:networkmanagement/v1beta1:getConnectivityTest", args ?? new GetConnectivityTestArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of a specific Connectivity Test.
        /// </summary>
        public static Output<GetConnectivityTestResult> Invoke(GetConnectivityTestInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConnectivityTestResult>("google-native:networkmanagement/v1beta1:getConnectivityTest", args ?? new GetConnectivityTestInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectivityTestArgs : Pulumi.InvokeArgs
    {
        [Input("connectivityTestId", required: true)]
        public string ConnectivityTestId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetConnectivityTestArgs()
        {
        }
    }

    public sealed class GetConnectivityTestInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("connectivityTestId", required: true)]
        public Input<string> ConnectivityTestId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetConnectivityTestInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetConnectivityTestResult
    {
        /// <summary>
        /// The time the test was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Destination specification of the Connectivity Test. You can use a combination of destination IP address, Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from route information. If the destination you specify is a VM instance and the instance has multiple network interfaces, then you must also specify either a destination IP address or VPC network to identify the destination interface. A reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints that you don't intend to test.
        /// </summary>
        public readonly Outputs.EndpointResponse Destination;
        /// <summary>
        /// The display name of a Connectivity Test.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Resource labels to represent user-provided metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The probing details of this test from the latest run, present for applicable tests only. The details are updated when creating a new test, updating an existing test, or triggering a one-time rerun of an existing test.
        /// </summary>
        public readonly Outputs.ProbingDetailsResponse ProbingDetails;
        /// <summary>
        /// IP Protocol of the test. When not provided, "TCP" is assumed.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The reachability details of this test from the latest run. The details are updated when creating a new test, updating an existing test, or triggering a one-time rerun of an existing test.
        /// </summary>
        public readonly Outputs.ReachabilityDetailsResponse ReachabilityDetails;
        /// <summary>
        /// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.
        /// </summary>
        public readonly ImmutableArray<string> RelatedProjects;
        /// <summary>
        /// Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information. If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend to test.
        /// </summary>
        public readonly Outputs.EndpointResponse Source;
        /// <summary>
        /// The time the test's configuration was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetConnectivityTestResult(
            string createTime,

            string description,

            Outputs.EndpointResponse destination,

            string displayName,

            ImmutableDictionary<string, string> labels,

            string name,

            Outputs.ProbingDetailsResponse probingDetails,

            string protocol,

            Outputs.ReachabilityDetailsResponse reachabilityDetails,

            ImmutableArray<string> relatedProjects,

            Outputs.EndpointResponse source,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            Destination = destination;
            DisplayName = displayName;
            Labels = labels;
            Name = name;
            ProbingDetails = probingDetails;
            Protocol = protocol;
            ReachabilityDetails = reachabilityDetails;
            RelatedProjects = relatedProjects;
            Source = source;
            UpdateTime = updateTime;
        }
    }
}
