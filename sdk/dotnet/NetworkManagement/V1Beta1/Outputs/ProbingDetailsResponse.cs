// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkManagement.V1Beta1.Outputs
{

    /// <summary>
    /// Results of active probing from the last run of the test.
    /// </summary>
    [OutputType]
    public sealed class ProbingDetailsResponse
    {
        /// <summary>
        /// The reason probing was aborted.
        /// </summary>
        public readonly string AbortCause;
        /// <summary>
        /// The source and destination endpoints derived from the test input and used for active probing.
        /// </summary>
        public readonly Outputs.EndpointInfoResponse EndpointInfo;
        /// <summary>
        /// Details about an internal failure or the cancellation of active probing.
        /// </summary>
        public readonly Outputs.StatusResponse Error;
        /// <summary>
        /// Latency as measured by active probing in one direction: from the source to the destination endpoint.
        /// </summary>
        public readonly Outputs.LatencyDistributionResponse ProbingLatency;
        /// <summary>
        /// The overall result of active probing.
        /// </summary>
        public readonly string Result;
        /// <summary>
        /// Number of probes sent.
        /// </summary>
        public readonly int SentProbeCount;
        /// <summary>
        /// Number of probes that reached the destination.
        /// </summary>
        public readonly int SuccessfulProbeCount;
        /// <summary>
        /// The time that reachability was assessed through active probing.
        /// </summary>
        public readonly string VerifyTime;

        [OutputConstructor]
        private ProbingDetailsResponse(
            string abortCause,

            Outputs.EndpointInfoResponse endpointInfo,

            Outputs.StatusResponse error,

            Outputs.LatencyDistributionResponse probingLatency,

            string result,

            int sentProbeCount,

            int successfulProbeCount,

            string verifyTime)
        {
            AbortCause = abortCause;
            EndpointInfo = endpointInfo;
            Error = error;
            ProbingLatency = probingLatency;
            Result = result;
            SentProbeCount = sentProbeCount;
            SuccessfulProbeCount = successfulProbeCount;
            VerifyTime = verifyTime;
        }
    }
}
