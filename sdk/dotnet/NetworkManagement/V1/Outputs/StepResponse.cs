// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GcpNative.NetworkManagement.V1.Outputs
{

    [OutputType]
    public sealed class StepResponse
    {
        /// <summary>
        /// Display info of the final state "abort" and reason.
        /// </summary>
        public readonly Outputs.AbortInfoResponse Abort;
        /// <summary>
        /// This is a step that leads to the final state Drop.
        /// </summary>
        public readonly bool CausesDrop;
        /// <summary>
        /// Display info of the final state "deliver" and reason.
        /// </summary>
        public readonly Outputs.DeliverInfoResponse Deliver;
        /// <summary>
        /// A description of the step. Usually this is a summary of the state.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Display info of the final state "drop" and reason.
        /// </summary>
        public readonly Outputs.DropInfoResponse Drop;
        /// <summary>
        /// Display info of the source and destination under analysis. The endpoint info in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
        /// </summary>
        public readonly Outputs.EndpointInfoResponse Endpoint;
        /// <summary>
        /// Display info of a Compute Engine firewall rule.
        /// </summary>
        public readonly Outputs.FirewallInfoResponse Firewall;
        /// <summary>
        /// Display info of the final state "forward" and reason.
        /// </summary>
        public readonly Outputs.ForwardInfoResponse Forward;
        /// <summary>
        /// Display info of a Compute Engine forwarding rule.
        /// </summary>
        public readonly Outputs.ForwardingRuleInfoResponse ForwardingRule;
        /// <summary>
        /// Display info of a Compute Engine instance.
        /// </summary>
        public readonly Outputs.InstanceInfoResponse Instance;
        /// <summary>
        /// Display info of the load balancers.
        /// </summary>
        public readonly Outputs.LoadBalancerInfoResponse LoadBalancer;
        /// <summary>
        /// Display info of a GCP network.
        /// </summary>
        public readonly Outputs.NetworkInfoResponse Network;
        /// <summary>
        /// Project ID that contains the configuration this step is validating.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Display info of a Compute Engine route.
        /// </summary>
        public readonly Outputs.RouteInfoResponse Route;
        /// <summary>
        /// Each step is in one of the pre-defined states.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Display info of a Compute Engine VPN gateway.
        /// </summary>
        public readonly Outputs.VpnGatewayInfoResponse VpnGateway;
        /// <summary>
        /// Display info of a Compute Engine VPN tunnel.
        /// </summary>
        public readonly Outputs.VpnTunnelInfoResponse VpnTunnel;

        [OutputConstructor]
        private StepResponse(
            Outputs.AbortInfoResponse abort,

            bool causesDrop,

            Outputs.DeliverInfoResponse deliver,

            string description,

            Outputs.DropInfoResponse drop,

            Outputs.EndpointInfoResponse endpoint,

            Outputs.FirewallInfoResponse firewall,

            Outputs.ForwardInfoResponse forward,

            Outputs.ForwardingRuleInfoResponse forwardingRule,

            Outputs.InstanceInfoResponse instance,

            Outputs.LoadBalancerInfoResponse loadBalancer,

            Outputs.NetworkInfoResponse network,

            string projectId,

            Outputs.RouteInfoResponse route,

            string state,

            Outputs.VpnGatewayInfoResponse vpnGateway,

            Outputs.VpnTunnelInfoResponse vpnTunnel)
        {
            Abort = abort;
            CausesDrop = causesDrop;
            Deliver = deliver;
            Description = description;
            Drop = drop;
            Endpoint = endpoint;
            Firewall = firewall;
            Forward = forward;
            ForwardingRule = forwardingRule;
            Instance = instance;
            LoadBalancer = loadBalancer;
            Network = network;
            ProjectId = projectId;
            Route = route;
            State = state;
            VpnGateway = vpnGateway;
            VpnTunnel = vpnTunnel;
        }
    }
}
