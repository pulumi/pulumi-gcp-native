// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.WorkloadManager.V1
{
    /// <summary>
    /// Creates a new Evaluation in a given project and location.
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:workloadmanager/v1:Evaluation")]
    public partial class Evaluation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [Output only] Create time stamp
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The Cloud Storage bucket name for custom rules.
        /// </summary>
        [Output("customRulesBucket")]
        public Output<string> CustomRulesBucket { get; private set; } = null!;

        /// <summary>
        /// Description of the Evaluation
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Required. Id of the requesting object
        /// </summary>
        [Output("evaluationId")]
        public Output<string> EvaluationId { get; private set; } = null!;

        /// <summary>
        /// Labels as key value pairs
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// annotations as key value pairs
        /// </summary>
        [Output("resourceFilter")]
        public Output<Outputs.ResourceFilterResponse> ResourceFilter { get; private set; } = null!;

        /// <summary>
        /// [Output only] The updated rule ids if exist.
        /// </summary>
        [Output("resourceStatus")]
        public Output<Outputs.ResourceStatusResponse> ResourceStatus { get; private set; } = null!;

        /// <summary>
        /// the name of the rule
        /// </summary>
        [Output("ruleNames")]
        public Output<ImmutableArray<string>> RuleNames { get; private set; } = null!;

        /// <summary>
        /// [Output only] The updated rule ids if exist.
        /// </summary>
        [Output("ruleVersions")]
        public Output<ImmutableArray<string>> RuleVersions { get; private set; } = null!;

        /// <summary>
        /// crontab format schedule for scheduled evaluation, currently only support the following schedule: "0 */1 * * *", "0 */6 * * *", "0 */12 * * *", "0 0 */1 * *", "0 0 */7 * *",
        /// </summary>
        [Output("schedule")]
        public Output<string> Schedule { get; private set; } = null!;

        /// <summary>
        /// [Output only] Update time stamp
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Evaluation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Evaluation(string name, EvaluationArgs args, CustomResourceOptions? options = null)
            : base("google-native:workloadmanager/v1:Evaluation", name, args ?? new EvaluationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Evaluation(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:workloadmanager/v1:Evaluation", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "evaluationId",
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Evaluation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Evaluation Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Evaluation(name, id, options);
        }
    }

    public sealed class EvaluationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Cloud Storage bucket name for custom rules.
        /// </summary>
        [Input("customRulesBucket")]
        public Input<string>? CustomRulesBucket { get; set; }

        /// <summary>
        /// Description of the Evaluation
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Required. Id of the requesting object
        /// </summary>
        [Input("evaluationId", required: true)]
        public Input<string> EvaluationId { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels as key value pairs
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// annotations as key value pairs
        /// </summary>
        [Input("resourceFilter")]
        public Input<Inputs.ResourceFilterArgs>? ResourceFilter { get; set; }

        [Input("ruleNames")]
        private InputList<string>? _ruleNames;

        /// <summary>
        /// the name of the rule
        /// </summary>
        public InputList<string> RuleNames
        {
            get => _ruleNames ?? (_ruleNames = new InputList<string>());
            set => _ruleNames = value;
        }

        /// <summary>
        /// crontab format schedule for scheduled evaluation, currently only support the following schedule: "0 */1 * * *", "0 */6 * * *", "0 */12 * * *", "0 0 */1 * *", "0 0 */7 * *",
        /// </summary>
        [Input("schedule")]
        public Input<string>? Schedule { get; set; }

        public EvaluationArgs()
        {
        }
        public static new EvaluationArgs Empty => new EvaluationArgs();
    }
}
