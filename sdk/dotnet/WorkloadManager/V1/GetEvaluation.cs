// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.WorkloadManager.V1
{
    public static class GetEvaluation
    {
        /// <summary>
        /// Gets details of a single Evaluation.
        /// </summary>
        public static Task<GetEvaluationResult> InvokeAsync(GetEvaluationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEvaluationResult>("google-native:workloadmanager/v1:getEvaluation", args ?? new GetEvaluationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Evaluation.
        /// </summary>
        public static Output<GetEvaluationResult> Invoke(GetEvaluationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEvaluationResult>("google-native:workloadmanager/v1:getEvaluation", args ?? new GetEvaluationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEvaluationArgs : global::Pulumi.InvokeArgs
    {
        [Input("evaluationId", required: true)]
        public string EvaluationId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetEvaluationArgs()
        {
        }
        public static new GetEvaluationArgs Empty => new GetEvaluationArgs();
    }

    public sealed class GetEvaluationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("evaluationId", required: true)]
        public Input<string> EvaluationId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetEvaluationInvokeArgs()
        {
        }
        public static new GetEvaluationInvokeArgs Empty => new GetEvaluationInvokeArgs();
    }


    [OutputType]
    public sealed class GetEvaluationResult
    {
        /// <summary>
        /// [Output only] Create time stamp
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Description of the Evaluation
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Labels as key value pairs
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// annotations as key value pairs
        /// </summary>
        public readonly Outputs.ResourceFilterResponse ResourceFilter;
        /// <summary>
        /// [Output only] The updated rule ids if exist.
        /// </summary>
        public readonly Outputs.ResourceStatusResponse ResourceStatus;
        /// <summary>
        /// the name of the rule
        /// </summary>
        public readonly ImmutableArray<string> RuleNames;
        /// <summary>
        /// [Output only] The updated rule ids if exist.
        /// </summary>
        public readonly ImmutableArray<string> RuleVersions;
        /// <summary>
        /// crontab format schedule for scheduled evaluation, example: 0 */3 * * *
        /// </summary>
        public readonly string Schedule;
        /// <summary>
        /// [Output only] Update time stamp
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetEvaluationResult(
            string createTime,

            string description,

            ImmutableDictionary<string, string> labels,

            string name,

            Outputs.ResourceFilterResponse resourceFilter,

            Outputs.ResourceStatusResponse resourceStatus,

            ImmutableArray<string> ruleNames,

            ImmutableArray<string> ruleVersions,

            string schedule,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            Labels = labels;
            Name = name;
            ResourceFilter = resourceFilter;
            ResourceStatus = resourceStatus;
            RuleNames = ruleNames;
            RuleVersions = ruleVersions;
            Schedule = schedule;
            UpdateTime = updateTime;
        }
    }
}
