// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigtableAdmin.V2
{
    public static class GetAuthorizedView
    {
        /// <summary>
        /// Gets information from a specified AuthorizedView.
        /// </summary>
        public static Task<GetAuthorizedViewResult> InvokeAsync(GetAuthorizedViewArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthorizedViewResult>("google-native:bigtableadmin/v2:getAuthorizedView", args ?? new GetAuthorizedViewArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information from a specified AuthorizedView.
        /// </summary>
        public static Output<GetAuthorizedViewResult> Invoke(GetAuthorizedViewInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthorizedViewResult>("google-native:bigtableadmin/v2:getAuthorizedView", args ?? new GetAuthorizedViewInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthorizedViewArgs : global::Pulumi.InvokeArgs
    {
        [Input("authorizedViewId", required: true)]
        public string AuthorizedViewId { get; set; } = null!;

        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("tableId", required: true)]
        public string TableId { get; set; } = null!;

        [Input("view")]
        public string? View { get; set; }

        public GetAuthorizedViewArgs()
        {
        }
        public static new GetAuthorizedViewArgs Empty => new GetAuthorizedViewArgs();
    }

    public sealed class GetAuthorizedViewInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("authorizedViewId", required: true)]
        public Input<string> AuthorizedViewId { get; set; } = null!;

        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tableId", required: true)]
        public Input<string> TableId { get; set; } = null!;

        [Input("view")]
        public Input<string>? View { get; set; }

        public GetAuthorizedViewInvokeArgs()
        {
        }
        public static new GetAuthorizedViewInvokeArgs Empty => new GetAuthorizedViewInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthorizedViewResult
    {
        /// <summary>
        /// Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
        /// </summary>
        public readonly bool DeletionProtection;
        /// <summary>
        /// The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// An AuthorizedView permitting access to an explicit subset of a Table.
        /// </summary>
        public readonly Outputs.GoogleBigtableAdminV2AuthorizedViewSubsetViewResponse SubsetView;

        [OutputConstructor]
        private GetAuthorizedViewResult(
            bool deletionProtection,

            string etag,

            string name,

            Outputs.GoogleBigtableAdminV2AuthorizedViewSubsetViewResponse subsetView)
        {
            DeletionProtection = deletionProtection;
            Etag = etag;
            Name = name;
            SubsetView = subsetView;
        }
    }
}
