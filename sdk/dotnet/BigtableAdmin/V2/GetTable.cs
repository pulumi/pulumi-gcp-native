// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigtableAdmin.V2
{
    public static class GetTable
    {
        /// <summary>
        /// Gets metadata information about the specified table.
        /// </summary>
        public static Task<GetTableResult> InvokeAsync(GetTableArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTableResult>("google-native:bigtableadmin/v2:getTable", args ?? new GetTableArgs(), options.WithDefaults());

        /// <summary>
        /// Gets metadata information about the specified table.
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTableResult>("google-native:bigtableadmin/v2:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTableArgs : Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("tableId", required: true)]
        public string TableId { get; set; } = null!;

        [Input("view")]
        public string? View { get; set; }

        public GetTableArgs()
        {
        }
    }

    public sealed class GetTableInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tableId", required: true)]
        public Input<string> TableId { get; set; } = null!;

        [Input("view")]
        public Input<string>? View { get; set; }

        public GetTableInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTableResult
    {
        /// <summary>
        /// Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`
        /// </summary>
        public readonly ImmutableDictionary<string, string> ClusterStates;
        /// <summary>
        /// The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `FULL`
        /// </summary>
        public readonly ImmutableDictionary<string, string> ColumnFamilies;
        /// <summary>
        /// Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.
        /// </summary>
        public readonly string Granularity;
        /// <summary>
        /// The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// If this table was restored from another data source (e.g. a backup), this field will be populated with information about the restore.
        /// </summary>
        public readonly Outputs.RestoreInfoResponse RestoreInfo;

        [OutputConstructor]
        private GetTableResult(
            ImmutableDictionary<string, string> clusterStates,

            ImmutableDictionary<string, string> columnFamilies,

            string granularity,

            string name,

            Outputs.RestoreInfoResponse restoreInfo)
        {
            ClusterStates = clusterStates;
            ColumnFamilies = columnFamilies;
            Granularity = granularity;
            Name = name;
            RestoreInfo = restoreInfo;
        }
    }
}
