// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigtableAdmin.V2
{
    public static class GetCluster
    {
        /// <summary>
        /// Gets information about a cluster.
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("google-native:bigtableadmin/v2:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a cluster.
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("google-native:bigtableadmin/v2:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// Configuration for this cluster.
        /// </summary>
        public readonly Outputs.ClusterConfigResponse ClusterConfig;
        /// <summary>
        /// Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.
        /// </summary>
        public readonly string DefaultStorageType;
        /// <summary>
        /// Immutable. The encryption configuration for CMEK-protected clusters.
        /// </summary>
        public readonly Outputs.EncryptionConfigResponse EncryptionConfig;
        /// <summary>
        /// Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance.
        /// </summary>
        public readonly int ServeNodes;
        /// <summary>
        /// The current state of the cluster.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetClusterResult(
            Outputs.ClusterConfigResponse clusterConfig,

            string defaultStorageType,

            Outputs.EncryptionConfigResponse encryptionConfig,

            string location,

            string name,

            int serveNodes,

            string state)
        {
            ClusterConfig = clusterConfig;
            DefaultStorageType = defaultStorageType;
            EncryptionConfig = encryptionConfig;
            Location = location;
            Name = name;
            ServeNodes = serveNodes;
            State = state;
        }
    }
}
