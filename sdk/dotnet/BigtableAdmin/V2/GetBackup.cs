// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigtableAdmin.V2
{
    public static class GetBackup
    {
        /// <summary>
        /// Gets metadata on a pending or completed Cloud Bigtable Backup.
        /// </summary>
        public static Task<GetBackupResult> InvokeAsync(GetBackupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupResult>("google-native:bigtableadmin/v2:getBackup", args ?? new GetBackupArgs(), options.WithDefaults());

        /// <summary>
        /// Gets metadata on a pending or completed Cloud Bigtable Backup.
        /// </summary>
        public static Output<GetBackupResult> Invoke(GetBackupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupResult>("google-native:bigtableadmin/v2:getBackup", args ?? new GetBackupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupArgs : global::Pulumi.InvokeArgs
    {
        [Input("backupId", required: true)]
        public string BackupId { get; set; } = null!;

        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetBackupArgs()
        {
        }
        public static new GetBackupArgs Empty => new GetBackupArgs();
    }

    public sealed class GetBackupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("backupId", required: true)]
        public Input<string> BackupId { get; set; } = null!;

        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetBackupInvokeArgs()
        {
        }
        public static new GetBackupInvokeArgs Empty => new GetBackupInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupResult
    {
        /// <summary>
        /// The encryption information for the backup.
        /// </summary>
        public readonly Outputs.EncryptionInfoResponse EncryptionInfo;
        /// <summary>
        /// `end_time` is the time that the backup was finished. The row data in the backup will be no newer than this timestamp.
        /// </summary>
        public readonly string EndTime;
        /// <summary>
        /// The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 30 days from the time the request is received. Once the `expire_time` has passed, Cloud Bigtable will delete the backup and free the resources used by the backup.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// A globally unique identifier for the backup which cannot be changed. Values are of the form `projects/{project}/instances/{instance}/clusters/{cluster}/ backups/_a-zA-Z0-9*` The final segment of the name must be between 1 and 50 characters in length. The backup is stored in the cluster identified by the prefix of the backup name of the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Size of the backup in bytes.
        /// </summary>
        public readonly string SizeBytes;
        /// <summary>
        /// Name of the backup from which this backup was copied. If a backup is not created by copying a backup, this field will be empty. Values are of the form: projects//instances//backups/.
        /// </summary>
        public readonly string SourceBackup;
        /// <summary>
        /// Immutable. Name of the table from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects/{project}/instances/{instance}/tables/{source_table}`.
        /// </summary>
        public readonly string SourceTable;
        /// <summary>
        /// `start_time` is the time that the backup was started (i.e. approximately the time the CreateBackup request is received). The row data in this backup will be no older than this timestamp.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// The current state of the backup.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetBackupResult(
            Outputs.EncryptionInfoResponse encryptionInfo,

            string endTime,

            string expireTime,

            string name,

            string sizeBytes,

            string sourceBackup,

            string sourceTable,

            string startTime,

            string state)
        {
            EncryptionInfo = encryptionInfo;
            EndTime = endTime;
            ExpireTime = expireTime;
            Name = name;
            SizeBytes = sizeBytes;
            SourceBackup = sourceBackup;
            SourceTable = sourceTable;
            StartTime = startTime;
            State = state;
        }
    }
}
