// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigtableAdmin.V2.Outputs
{

    /// <summary>
    /// Approximate statistics related to a table. These statistics are calculated infrequently, while simultaneously, data in the table can change rapidly. Thus the values reported here (e.g. row count) are very likely out-of date, even the instant they are received in this API. Thus, only treat these values as approximate. IMPORTANT: Everything below is approximate, unless otherwise specified.
    /// </summary>
    [OutputType]
    public sealed class TableStatsResponse
    {
        /// <summary>
        /// How many cells are present per column (column family, column qualifier) combinations, averaged over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in "family:col" and 1 cell in "other:col" (4 cells / 2 columns) * A row with 1 cell in "family:col", 7 cells in "family:other_col", and 7 cells in "other:data" (15 cells / 3 columns) would report (4 + 15)/(2 + 3) = 3.8 in this field.
        /// </summary>
        public readonly double AverageCellsPerColumn;
        /// <summary>
        /// How many (column family, column qualifier) combinations are present per row in the table, averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in "family:col" and "other:col" (2 distinct columns) * A row with cells in "family:col", "family:other_col", and "other:data" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this field.
        /// </summary>
        public readonly double AverageColumnsPerRow;
        /// <summary>
        /// This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all contents out).
        /// </summary>
        public readonly string LogicalDataBytes;
        /// <summary>
        /// How many rows are in the table.
        /// </summary>
        public readonly string RowCount;

        [OutputConstructor]
        private TableStatsResponse(
            double averageCellsPerColumn,

            double averageColumnsPerRow,

            string logicalDataBytes,

            string rowCount)
        {
            AverageCellsPerColumn = averageCellsPerColumn;
            AverageColumnsPerRow = averageColumnsPerRow;
            LogicalDataBytes = logicalDataBytes;
            RowCount = rowCount;
        }
    }
}
