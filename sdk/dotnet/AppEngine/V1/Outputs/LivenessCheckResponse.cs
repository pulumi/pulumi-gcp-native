// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.AppEngine.V1.Outputs
{

    /// <summary>
    /// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
    /// </summary>
    [OutputType]
    public sealed class LivenessCheckResponse
    {
        /// <summary>
        /// Interval between health checks.
        /// </summary>
        public readonly string CheckInterval;
        /// <summary>
        /// Number of consecutive failed checks required before considering the VM unhealthy.
        /// </summary>
        public readonly int FailureThreshold;
        /// <summary>
        /// Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The initial delay before starting to execute the checks.
        /// </summary>
        public readonly string InitialDelay;
        /// <summary>
        /// The request path.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// Number of consecutive successful checks required before considering the VM healthy.
        /// </summary>
        public readonly int SuccessThreshold;
        /// <summary>
        /// Time before the check is considered failed.
        /// </summary>
        public readonly string Timeout;

        [OutputConstructor]
        private LivenessCheckResponse(
            string checkInterval,

            int failureThreshold,

            string host,

            string initialDelay,

            string path,

            int successThreshold,

            string timeout)
        {
            CheckInterval = checkInterval;
            FailureThreshold = failureThreshold;
            Host = host;
            InitialDelay = initialDelay;
            Path = path;
            SuccessThreshold = successThreshold;
            Timeout = timeout;
        }
    }
}
