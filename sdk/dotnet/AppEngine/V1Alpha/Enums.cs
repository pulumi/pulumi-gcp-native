// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.AppEngine.V1Alpha
{
    /// <summary>
    /// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
    /// </summary>
    [EnumType]
    public readonly struct ManagedCertificateStatus : IEquatable<ManagedCertificateStatus>
    {
        private readonly string _value;

        private ManagedCertificateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedCertificateStatus UnspecifiedStatus { get; } = new ManagedCertificateStatus("UNSPECIFIED_STATUS");
        /// <summary>
        /// Certificate was successfully obtained and inserted into the serving system.
        /// </summary>
        public static ManagedCertificateStatus Ok { get; } = new ManagedCertificateStatus("OK");
        /// <summary>
        /// Certificate is under active attempts to acquire or renew.
        /// </summary>
        public static ManagedCertificateStatus Pending { get; } = new ManagedCertificateStatus("PENDING");
        /// <summary>
        /// Most recent renewal failed due to a system failure and will be retried. System failure is likely transient, and subsequent renewal attempts may succeed. The last successfully provisioned certificate may still be serving.
        /// </summary>
        public static ManagedCertificateStatus FailedRetryingInternal { get; } = new ManagedCertificateStatus("FAILED_RETRYING_INTERNAL");
        /// <summary>
        /// Most recent renewal failed due to an invalid DNS setup and will be retried. Renewal attempts will continue to fail until the certificate domain's DNS configuration is fixed. The last successfully provisioned certificate may still be serving.
        /// </summary>
        public static ManagedCertificateStatus FailedRetryingNotVisible { get; } = new ManagedCertificateStatus("FAILED_RETRYING_NOT_VISIBLE");
        /// <summary>
        /// All renewal attempts have been exhausted. Most recent renewal failed due to an invalid DNS setup and will not be retried. The last successfully provisioned certificate may still be serving.
        /// </summary>
        public static ManagedCertificateStatus FailedPermanentlyNotVisible { get; } = new ManagedCertificateStatus("FAILED_PERMANENTLY_NOT_VISIBLE");
        /// <summary>
        /// Most recent renewal failed due to an explicit CAA record that does not include one of the in-use CAs (Google CA and Let's Encrypt). Renewals will continue to fail until the CAA is reconfigured. The last successfully provisioned certificate may still be serving.
        /// </summary>
        public static ManagedCertificateStatus FailedRetryingCaaForbidden { get; } = new ManagedCertificateStatus("FAILED_RETRYING_CAA_FORBIDDEN");
        /// <summary>
        /// Most recent renewal failed due to a CAA retrieval failure. This means that the domain's DNS provider does not properly handle CAA records, failing requests for CAA records when no CAA records are defined. Renewals will continue to fail until the DNS provider is changed or a CAA record is added for the given domain. The last successfully provisioned certificate may still be serving.
        /// </summary>
        public static ManagedCertificateStatus FailedRetryingCaaChecking { get; } = new ManagedCertificateStatus("FAILED_RETRYING_CAA_CHECKING");

        public static bool operator ==(ManagedCertificateStatus left, ManagedCertificateStatus right) => left.Equals(right);
        public static bool operator !=(ManagedCertificateStatus left, ManagedCertificateStatus right) => !left.Equals(right);

        public static explicit operator string(ManagedCertificateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedCertificateStatus other && Equals(other);
        public bool Equals(ManagedCertificateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Resource record type. Example: AAAA.
    /// </summary>
    [EnumType]
    public readonly struct ResourceRecordType : IEquatable<ResourceRecordType>
    {
        private readonly string _value;

        private ResourceRecordType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// An A resource record. Data is an IPv4 address.
        /// </summary>
        public static ResourceRecordType A { get; } = new ResourceRecordType("A");
        /// <summary>
        /// An AAAA resource record. Data is an IPv6 address.
        /// </summary>
        public static ResourceRecordType Aaaa { get; } = new ResourceRecordType("AAAA");
        /// <summary>
        /// A CNAME resource record. Data is a domain name to be aliased.
        /// </summary>
        public static ResourceRecordType Cname { get; } = new ResourceRecordType("CNAME");

        public static bool operator ==(ResourceRecordType left, ResourceRecordType right) => left.Equals(right);
        public static bool operator !=(ResourceRecordType left, ResourceRecordType right) => !left.Equals(right);

        public static explicit operator string(ResourceRecordType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceRecordType other && Equals(other);
        public bool Equals(ResourceRecordType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
