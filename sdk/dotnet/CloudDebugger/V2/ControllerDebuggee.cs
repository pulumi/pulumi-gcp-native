// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GcpNative.CloudDebugger.V2
{
    /// <summary>
    /// Registers the debuggee with the controller service. All agents attached to the same application must call this method with exactly the same request content to get back the same stable `debuggee_id`. Agents should call this method again whenever `google.rpc.Code.NOT_FOUND` is returned from any controller method. This protocol allows the controller service to disable debuggees, recover from data loss, or change the `debuggee_id` format. Agents must handle `debuggee_id` value changing upon re-registration.
    /// </summary>
    [GcpNativeResourceType("gcp-native:clouddebugger/v2:ControllerDebuggee")]
    public partial class ControllerDebuggee : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a ControllerDebuggee resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ControllerDebuggee(string name, ControllerDebuggeeArgs? args = null, CustomResourceOptions? options = null)
            : base("gcp-native:clouddebugger/v2:ControllerDebuggee", name, args ?? new ControllerDebuggeeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ControllerDebuggee(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("gcp-native:clouddebugger/v2:ControllerDebuggee", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ControllerDebuggee resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ControllerDebuggee Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ControllerDebuggee(name, id, options);
        }
    }

    public sealed class ControllerDebuggeeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. Debuggee information to register. The fields `project`, `uniquifier`, `description` and `agent_version` of the debuggee must be set.
        /// </summary>
        [Input("debuggee")]
        public Input<Inputs.DebuggeeArgs>? Debuggee { get; set; }

        public ControllerDebuggeeArgs()
        {
        }
    }
}
