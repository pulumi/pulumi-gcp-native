// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GcpNative.CloudDebugger.V2.Inputs
{

    /// <summary>
    /// Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.
    /// </summary>
    public sealed class DebuggeeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).
        /// </summary>
        [Input("agentVersion")]
        public Input<string>? AgentVersion { get; set; }

        /// <summary>
        /// Used when setting breakpoint canary for this debuggee.
        /// </summary>
        [Input("canaryMode")]
        public Input<string>? CanaryMode { get; set; }

        /// <summary>
        /// Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("extSourceContexts")]
        private InputList<Inputs.ExtendedSourceContextArgs>? _extSourceContexts;

        /// <summary>
        /// References to the locations and revisions of the source code used in the deployed application.
        /// </summary>
        public InputList<Inputs.ExtendedSourceContextArgs> ExtSourceContexts
        {
            get => _extSourceContexts ?? (_extSourceContexts = new InputList<Inputs.ExtendedSourceContextArgs>());
            set => _extSourceContexts = value;
        }

        /// <summary>
        /// Unique identifier for the debuggee generated by the controller service.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// If set to `true`, indicates that the agent should disable itself and detach from the debuggee.
        /// </summary>
        [Input("isDisabled")]
        public Input<bool>? IsDisabled { get; set; }

        /// <summary>
        /// If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.
        /// </summary>
        [Input("isInactive")]
        public Input<bool>? IsInactive { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of custom debuggee properties, populated by the agent, to be displayed to the user.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("sourceContexts")]
        private InputList<Inputs.SourceContextArgs>? _sourceContexts;

        /// <summary>
        /// References to the locations and revisions of the source code used in the deployed application.
        /// </summary>
        public InputList<Inputs.SourceContextArgs> SourceContexts
        {
            get => _sourceContexts ?? (_sourceContexts = new InputList<Inputs.SourceContextArgs>());
            set => _sourceContexts = value;
        }

        /// <summary>
        /// Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status.
        /// </summary>
        [Input("status")]
        public Input<Inputs.StatusMessageArgs>? Status { get; set; }

        /// <summary>
        /// Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.
        /// </summary>
        [Input("uniquifier")]
        public Input<string>? Uniquifier { get; set; }

        public DebuggeeArgs()
        {
        }
    }
}
