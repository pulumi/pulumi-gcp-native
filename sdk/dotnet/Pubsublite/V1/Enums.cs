// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Pubsublite.V1
{
    /// <summary>
    /// The DeliveryRequirement for this subscription.
    /// </summary>
    [EnumType]
    public readonly struct DeliveryConfigDeliveryRequirement : IEquatable<DeliveryConfigDeliveryRequirement>
    {
        private readonly string _value;

        private DeliveryConfigDeliveryRequirement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value. This value is unused.
        /// </summary>
        public static DeliveryConfigDeliveryRequirement DeliveryRequirementUnspecified { get; } = new DeliveryConfigDeliveryRequirement("DELIVERY_REQUIREMENT_UNSPECIFIED");
        /// <summary>
        /// The server does not wait for a published message to be successfully written to storage before delivering it to subscribers.
        /// </summary>
        public static DeliveryConfigDeliveryRequirement DeliverImmediately { get; } = new DeliveryConfigDeliveryRequirement("DELIVER_IMMEDIATELY");
        /// <summary>
        /// The server will not deliver a published message to subscribers until the message has been successfully written to storage. This will result in higher end-to-end latency, but consistent delivery.
        /// </summary>
        public static DeliveryConfigDeliveryRequirement DeliverAfterStored { get; } = new DeliveryConfigDeliveryRequirement("DELIVER_AFTER_STORED");

        public static bool operator ==(DeliveryConfigDeliveryRequirement left, DeliveryConfigDeliveryRequirement right) => left.Equals(right);
        public static bool operator !=(DeliveryConfigDeliveryRequirement left, DeliveryConfigDeliveryRequirement right) => !left.Equals(right);

        public static explicit operator string(DeliveryConfigDeliveryRequirement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeliveryConfigDeliveryRequirement other && Equals(other);
        public bool Equals(DeliveryConfigDeliveryRequirement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The desired state of this export. Setting this to values other than `ACTIVE` and `PAUSED` will result in an error.
    /// </summary>
    [EnumType]
    public readonly struct ExportConfigDesiredState : IEquatable<ExportConfigDesiredState>
    {
        private readonly string _value;

        private ExportConfigDesiredState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value. This value is unused.
        /// </summary>
        public static ExportConfigDesiredState StateUnspecified { get; } = new ExportConfigDesiredState("STATE_UNSPECIFIED");
        /// <summary>
        /// Messages are being exported.
        /// </summary>
        public static ExportConfigDesiredState Active { get; } = new ExportConfigDesiredState("ACTIVE");
        /// <summary>
        /// Exporting messages is suspended.
        /// </summary>
        public static ExportConfigDesiredState Paused { get; } = new ExportConfigDesiredState("PAUSED");
        /// <summary>
        /// Messages cannot be exported due to permission denied errors. Output only.
        /// </summary>
        public static ExportConfigDesiredState PermissionDenied { get; } = new ExportConfigDesiredState("PERMISSION_DENIED");
        /// <summary>
        /// Messages cannot be exported due to missing resources. Output only.
        /// </summary>
        public static ExportConfigDesiredState NotFound { get; } = new ExportConfigDesiredState("NOT_FOUND");

        public static bool operator ==(ExportConfigDesiredState left, ExportConfigDesiredState right) => left.Equals(right);
        public static bool operator !=(ExportConfigDesiredState left, ExportConfigDesiredState right) => !left.Equals(right);

        public static explicit operator string(ExportConfigDesiredState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExportConfigDesiredState other && Equals(other);
        public bool Equals(ExportConfigDesiredState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
