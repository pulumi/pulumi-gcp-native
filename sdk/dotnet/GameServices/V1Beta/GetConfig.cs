// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.GoogleNative.GameServices.V1Beta
{
    public static class GetConfig
    {
        /// <summary>
        /// Gets details of a single game server config.
        /// </summary>
        public static Task<GetConfigResult> InvokeAsync(GetConfigArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConfigResult>("google-native:gameservices/v1beta:getConfig", args ?? new GetConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single game server config.
        /// </summary>
        public static Output<GetConfigResult> Invoke(GetConfigInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConfigResult>("google-native:gameservices/v1beta:getConfig", args ?? new GetConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigArgs : Pulumi.InvokeArgs
    {
        [Input("configId", required: true)]
        public string ConfigId { get; set; } = null!;

        [Input("gameServerDeploymentId", required: true)]
        public string GameServerDeploymentId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetConfigArgs()
        {
        }
    }

    public sealed class GetConfigInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        [Input("gameServerDeploymentId", required: true)]
        public Input<string> GameServerDeploymentId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetConfigInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetConfigResult
    {
        /// <summary>
        /// The creation time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The description of the game server config.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// FleetConfig contains a list of Agones fleet specs. Only one FleetConfig is allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.FleetConfigResponse> FleetConfigs;
        /// <summary>
        /// The labels associated with this game server config. Each label is a key-value pair.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name of the game server config, in the following form: `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}`. For example, `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The autoscaling settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScalingConfigResponse> ScalingConfigs;
        /// <summary>
        /// The last-modified time.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetConfigResult(
            string createTime,

            string description,

            ImmutableArray<Outputs.FleetConfigResponse> fleetConfigs,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<Outputs.ScalingConfigResponse> scalingConfigs,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            FleetConfigs = fleetConfigs;
            Labels = labels;
            Name = name;
            ScalingConfigs = scalingConfigs;
            UpdateTime = updateTime;
        }
    }
}
