// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Tpu.V1
{
    /// <summary>
    /// Creates a node.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:tpu/v1:Node")]
    public partial class Node : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a Node resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Node(string name, NodeArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:tpu/v1:Node", name, args ?? new NodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Node(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:tpu/v1:Node", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Node resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Node Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Node(name, id, options);
        }
    }

    public sealed class NodeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. The type of hardware accelerators associated with this node.
        /// </summary>
        [Input("acceleratorType")]
        public Input<string>? AcceleratorType { get; set; }

        /// <summary>
        /// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
        /// </summary>
        [Input("cidrBlock")]
        public Input<string>? CidrBlock { get; set; }

        /// <summary>
        /// Output only. The time when the node was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The user-supplied description of the TPU. Maximum of 512 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The health status of the TPU node.
        /// </summary>
        [Input("health")]
        public Input<string>? Health { get; set; }

        /// <summary>
        /// Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.
        /// </summary>
        [Input("healthDescription")]
        public Input<string>? HealthDescription { get; set; }

        /// <summary>
        /// Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user-provided metadata.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("locationsId", required: true)]
        public Input<string> LocationsId { get; set; } = null!;

        /// <summary>
        /// Output only. Immutable. The name of the TPU
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of a network they wish to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on which this API has been activated. If none is provided, "default" will be used.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        [Input("networkEndpoints")]
        private InputList<Inputs.NetworkEndpointArgs>? _networkEndpoints;

        /// <summary>
        /// Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the node reach out to the 0th entry in this map first.
        /// </summary>
        public InputList<Inputs.NetworkEndpointArgs> NetworkEndpoints
        {
            get => _networkEndpoints ?? (_networkEndpoints = new InputList<Inputs.NetworkEndpointArgs>());
            set => _networkEndpoints = value;
        }

        [Input("nodesId", required: true)]
        public Input<string> NodesId { get; set; } = null!;

        /// <summary>
        /// Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        [Input("projectsId", required: true)]
        public Input<string> ProjectsId { get; set; } = null!;

        /// <summary>
        /// The scheduling options for this node.
        /// </summary>
        [Input("schedulingConfig")]
        public Input<Inputs.SchedulingConfigArgs>? SchedulingConfig { get; set; }

        /// <summary>
        /// Output only. The service account used to run the tensor flow services within the node. To share resources, including Google Cloud Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// Output only. The current state for the TPU Node.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("symptoms")]
        private InputList<Inputs.SymptomArgs>? _symptoms;

        /// <summary>
        /// Output only. The Symptoms that have occurred to the TPU Node.
        /// </summary>
        public InputList<Inputs.SymptomArgs> Symptoms
        {
            get => _symptoms ?? (_symptoms = new InputList<Inputs.SymptomArgs>());
            set => _symptoms = value;
        }

        /// <summary>
        /// Required. The version of Tensorflow running in the Node.
        /// </summary>
        [Input("tensorflowVersion")]
        public Input<string>? TensorflowVersion { get; set; }

        /// <summary>
        /// Whether the VPC peering for the node is set up through Service Networking API. The VPC Peering should be set up before provisioning the node. If this field is set, cidr_block field should not be specified. If the network, that you want to peer the TPU Node to, is Shared VPC networks, the node must be created with this this field enabled.
        /// </summary>
        [Input("useServiceNetworking")]
        public Input<bool>? UseServiceNetworking { get; set; }

        public NodeArgs()
        {
        }
    }
}
