// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.DiscoveryEngine.V1Alpha
{
    public static class GetDataStore
    {
        /// <summary>
        /// Gets a DataStore.
        /// </summary>
        public static Task<GetDataStoreResult> InvokeAsync(GetDataStoreArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataStoreResult>("google-native:discoveryengine/v1alpha:getDataStore", args ?? new GetDataStoreArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a DataStore.
        /// </summary>
        public static Output<GetDataStoreResult> Invoke(GetDataStoreInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataStoreResult>("google-native:discoveryengine/v1alpha:getDataStore", args ?? new GetDataStoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataStoreArgs : global::Pulumi.InvokeArgs
    {
        [Input("collectionId", required: true)]
        public string CollectionId { get; set; } = null!;

        [Input("dataStoreId", required: true)]
        public string DataStoreId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDataStoreArgs()
        {
        }
        public static new GetDataStoreArgs Empty => new GetDataStoreArgs();
    }

    public sealed class GetDataStoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("collectionId", required: true)]
        public Input<string> CollectionId { get; set; } = null!;

        [Input("dataStoreId", required: true)]
        public Input<string> DataStoreId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDataStoreInvokeArgs()
        {
        }
        public static new GetDataStoreInvokeArgs Empty => new GetDataStoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataStoreResult
    {
        /// <summary>
        /// Immutable. Whether data in the DataStore has ACL information. If set to `true`, the source data must have ACL. ACL will be ingested when data is ingested by DocumentService.ImportDocuments methods. When ACL is enabled for the DataStore, Document can't be accessed by calling DocumentService.GetDocument or DocumentService.ListDocuments. Currently ACL is only supported in `GENERIC` industry vertical with non-`PUBLIC_WEBSITE` content config.
        /// </summary>
        public readonly bool AclEnabled;
        /// <summary>
        /// Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.
        /// </summary>
        public readonly string ContentConfig;
        /// <summary>
        /// Timestamp the DataStore was created at.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The id of the default Schema asscociated to this data store.
        /// </summary>
        public readonly string DefaultSchemaId;
        /// <summary>
        /// The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Configuration for Document understanding and enrichment.
        /// </summary>
        public readonly Outputs.GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfigResponse DocumentProcessingConfig;
        /// <summary>
        /// Data store level identity provider config.
        /// </summary>
        public readonly Outputs.GoogleCloudDiscoveryengineV1alphaIdpConfigResponse IdpConfig;
        /// <summary>
        /// Immutable. The industry vertical that the data store registers.
        /// </summary>
        public readonly string IndustryVertical;
        /// <summary>
        /// Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.
        /// </summary>
        public readonly ImmutableArray<string> SolutionTypes;
        /// <summary>
        /// The start schema to use for this DataStore when provisioning it. If unset, a default vertical specialized schema will be used. This field is only used by CreateDataStore API, and will be ignored if used in other APIs. This field will be omitted from all API responses including CreateDataStore API. To retrieve a schema of a DataStore, use SchemaService.GetSchema API instead. The provided schema will be validated against certain rules on schema. Learn more from [this doc](https://cloud.google.com/generative-ai-app-builder/docs/provide-schema).
        /// </summary>
        public readonly Outputs.GoogleCloudDiscoveryengineV1alphaSchemaResponse StartingSchema;

        [OutputConstructor]
        private GetDataStoreResult(
            bool aclEnabled,

            string contentConfig,

            string createTime,

            string defaultSchemaId,

            string displayName,

            Outputs.GoogleCloudDiscoveryengineV1alphaDocumentProcessingConfigResponse documentProcessingConfig,

            Outputs.GoogleCloudDiscoveryengineV1alphaIdpConfigResponse idpConfig,

            string industryVertical,

            string name,

            ImmutableArray<string> solutionTypes,

            Outputs.GoogleCloudDiscoveryengineV1alphaSchemaResponse startingSchema)
        {
            AclEnabled = aclEnabled;
            ContentConfig = contentConfig;
            CreateTime = createTime;
            DefaultSchemaId = defaultSchemaId;
            DisplayName = displayName;
            DocumentProcessingConfig = documentProcessingConfig;
            IdpConfig = idpConfig;
            IndustryVertical = industryVertical;
            Name = name;
            SolutionTypes = solutionTypes;
            StartingSchema = startingSchema;
        }
    }
}
