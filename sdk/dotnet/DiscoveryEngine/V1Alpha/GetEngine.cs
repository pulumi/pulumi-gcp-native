// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.DiscoveryEngine.V1Alpha
{
    public static class GetEngine
    {
        /// <summary>
        /// Gets a Engine.
        /// </summary>
        public static Task<GetEngineResult> InvokeAsync(GetEngineArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEngineResult>("google-native:discoveryengine/v1alpha:getEngine", args ?? new GetEngineArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Engine.
        /// </summary>
        public static Output<GetEngineResult> Invoke(GetEngineInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEngineResult>("google-native:discoveryengine/v1alpha:getEngine", args ?? new GetEngineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEngineArgs : global::Pulumi.InvokeArgs
    {
        [Input("collectionId", required: true)]
        public string CollectionId { get; set; } = null!;

        [Input("engineId", required: true)]
        public string EngineId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetEngineArgs()
        {
        }
        public static new GetEngineArgs Empty => new GetEngineArgs();
    }

    public sealed class GetEngineInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("collectionId", required: true)]
        public Input<string> CollectionId { get; set; } = null!;

        [Input("engineId", required: true)]
        public Input<string> EngineId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetEngineInvokeArgs()
        {
        }
        public static new GetEngineInvokeArgs Empty => new GetEngineInvokeArgs();
    }


    [OutputType]
    public sealed class GetEngineResult
    {
        /// <summary>
        /// Configurations for the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT.
        /// </summary>
        public readonly Outputs.GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigResponse ChatEngineConfig;
        /// <summary>
        /// Additional information of the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT.
        /// </summary>
        public readonly Outputs.GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadataResponse ChatEngineMetadata;
        /// <summary>
        /// Common config spec that specifies the metadata of the engine.
        /// </summary>
        public readonly Outputs.GoogleCloudDiscoveryengineV1alphaEngineCommonConfigResponse CommonConfig;
        /// <summary>
        /// Timestamp the Recommendation Engine was created at.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary intializations.
        /// </summary>
        public readonly ImmutableArray<string> DataStoreIds;
        /// <summary>
        /// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
        /// </summary>
        public readonly string IndustryVertical;
        /// <summary>
        /// Configurations for the Media Engine. Only applicable on the data stores with solution_type SOLUTION_TYPE_RECOMMENDATION and IndustryVertical.MEDIA vertical.
        /// </summary>
        public readonly Outputs.GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigResponse MediaRecommendationEngineConfig;
        /// <summary>
        /// Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Additional information of a recommendation engine. Only applicable if solution_type is SOLUTION_TYPE_RECOMMENDATION.
        /// </summary>
        public readonly Outputs.GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadataResponse RecommendationMetadata;
        /// <summary>
        /// Configurations for the Search Engine. Only applicable if solution_type is SOLUTION_TYPE_SEARCH.
        /// </summary>
        public readonly Outputs.GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigResponse SearchEngineConfig;
        /// <summary>
        /// Additional config specs for a `similar-items` engine.
        /// </summary>
        public readonly Outputs.GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfigResponse SimilarDocumentsConfig;
        /// <summary>
        /// The solutions of the engine.
        /// </summary>
        public readonly string SolutionType;
        /// <summary>
        /// Timestamp the Recommendation Engine was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetEngineResult(
            Outputs.GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigResponse chatEngineConfig,

            Outputs.GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadataResponse chatEngineMetadata,

            Outputs.GoogleCloudDiscoveryengineV1alphaEngineCommonConfigResponse commonConfig,

            string createTime,

            ImmutableArray<string> dataStoreIds,

            string displayName,

            string industryVertical,

            Outputs.GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigResponse mediaRecommendationEngineConfig,

            string name,

            Outputs.GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadataResponse recommendationMetadata,

            Outputs.GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigResponse searchEngineConfig,

            Outputs.GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfigResponse similarDocumentsConfig,

            string solutionType,

            string updateTime)
        {
            ChatEngineConfig = chatEngineConfig;
            ChatEngineMetadata = chatEngineMetadata;
            CommonConfig = commonConfig;
            CreateTime = createTime;
            DataStoreIds = dataStoreIds;
            DisplayName = displayName;
            IndustryVertical = industryVertical;
            MediaRecommendationEngineConfig = mediaRecommendationEngineConfig;
            Name = name;
            RecommendationMetadata = recommendationMetadata;
            SearchEngineConfig = searchEngineConfig;
            SimilarDocumentsConfig = similarDocumentsConfig;
            SolutionType = solutionType;
            UpdateTime = updateTime;
        }
    }
}
