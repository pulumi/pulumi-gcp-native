// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.DiscoveryEngine.V1Beta
{
    public static class GetSchema
    {
        /// <summary>
        /// Gets a Schema.
        /// </summary>
        public static Task<GetSchemaResult> InvokeAsync(GetSchemaArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSchemaResult>("google-native:discoveryengine/v1beta:getSchema", args ?? new GetSchemaArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Schema.
        /// </summary>
        public static Output<GetSchemaResult> Invoke(GetSchemaInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchemaResult>("google-native:discoveryengine/v1beta:getSchema", args ?? new GetSchemaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSchemaArgs : global::Pulumi.InvokeArgs
    {
        [Input("collectionId", required: true)]
        public string CollectionId { get; set; } = null!;

        [Input("dataStoreId", required: true)]
        public string DataStoreId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("schemaId", required: true)]
        public string SchemaId { get; set; } = null!;

        public GetSchemaArgs()
        {
        }
        public static new GetSchemaArgs Empty => new GetSchemaArgs();
    }

    public sealed class GetSchemaInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("collectionId", required: true)]
        public Input<string> CollectionId { get; set; } = null!;

        [Input("dataStoreId", required: true)]
        public Input<string> DataStoreId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("schemaId", required: true)]
        public Input<string> SchemaId { get; set; } = null!;

        public GetSchemaInvokeArgs()
        {
        }
        public static new GetSchemaInvokeArgs Empty => new GetSchemaInvokeArgs();
    }


    [OutputType]
    public sealed class GetSchemaResult
    {
        /// <summary>
        /// The JSON representation of the schema.
        /// </summary>
        public readonly string JsonSchema;
        /// <summary>
        /// Immutable. The full resource name of the schema, in the format of `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The structured representation of the schema.
        /// </summary>
        public readonly ImmutableDictionary<string, object> StructSchema;

        [OutputConstructor]
        private GetSchemaResult(
            string jsonSchema,

            string name,

            ImmutableDictionary<string, object> structSchema)
        {
            JsonSchema = jsonSchema;
            Name = name;
            StructSchema = structSchema;
        }
    }
}
