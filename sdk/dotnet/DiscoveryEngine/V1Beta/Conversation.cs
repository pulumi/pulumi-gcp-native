// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.DiscoveryEngine.V1Beta
{
    /// <summary>
    /// Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned.
    /// Auto-naming is currently not supported for this resource.
    /// </summary>
    [GoogleNativeResourceType("google-native:discoveryengine/v1beta:Conversation")]
    public partial class Conversation : global::Pulumi.CustomResource
    {
        [Output("collectionId")]
        public Output<string> CollectionId { get; private set; } = null!;

        [Output("dataStoreId")]
        public Output<string> DataStoreId { get; private set; } = null!;

        /// <summary>
        /// The time the conversation finished.
        /// </summary>
        [Output("endTime")]
        public Output<string> EndTime { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Conversation messages.
        /// </summary>
        [Output("messages")]
        public Output<ImmutableArray<Outputs.GoogleCloudDiscoveryengineV1betaConversationMessageResponse>> Messages { get; private set; } = null!;

        /// <summary>
        /// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The time the conversation started.
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// The state of the Conversation.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for tracking users.
        /// </summary>
        [Output("userPseudoId")]
        public Output<string> UserPseudoId { get; private set; } = null!;


        /// <summary>
        /// Create a Conversation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Conversation(string name, ConversationArgs args, CustomResourceOptions? options = null)
            : base("google-native:discoveryengine/v1beta:Conversation", name, args ?? new ConversationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Conversation(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:discoveryengine/v1beta:Conversation", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "collectionId",
                    "dataStoreId",
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Conversation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Conversation Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Conversation(name, id, options);
        }
    }

    public sealed class ConversationArgs : global::Pulumi.ResourceArgs
    {
        [Input("collectionId", required: true)]
        public Input<string> CollectionId { get; set; } = null!;

        [Input("dataStoreId", required: true)]
        public Input<string> DataStoreId { get; set; } = null!;

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("messages")]
        private InputList<Inputs.GoogleCloudDiscoveryengineV1betaConversationMessageArgs>? _messages;

        /// <summary>
        /// Conversation messages.
        /// </summary>
        public InputList<Inputs.GoogleCloudDiscoveryengineV1betaConversationMessageArgs> Messages
        {
            get => _messages ?? (_messages = new InputList<Inputs.GoogleCloudDiscoveryengineV1betaConversationMessageArgs>());
            set => _messages = value;
        }

        /// <summary>
        /// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The state of the Conversation.
        /// </summary>
        [Input("state")]
        public Input<Pulumi.GoogleNative.DiscoveryEngine.V1Beta.ConversationState>? State { get; set; }

        /// <summary>
        /// A unique identifier for tracking users.
        /// </summary>
        [Input("userPseudoId")]
        public Input<string>? UserPseudoId { get; set; }

        public ConversationArgs()
        {
        }
        public static new ConversationArgs Empty => new ConversationArgs();
    }
}
