// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataform.V1Beta1
{
    public static class GetCompilationResult
    {
        /// <summary>
        /// Fetches a single CompilationResult.
        /// </summary>
        public static Task<GetCompilationResultResult> InvokeAsync(GetCompilationResultArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCompilationResultResult>("google-native:dataform/v1beta1:getCompilationResult", args ?? new GetCompilationResultArgs(), options.WithDefaults());

        /// <summary>
        /// Fetches a single CompilationResult.
        /// </summary>
        public static Output<GetCompilationResultResult> Invoke(GetCompilationResultInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCompilationResultResult>("google-native:dataform/v1beta1:getCompilationResult", args ?? new GetCompilationResultInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCompilationResultArgs : global::Pulumi.InvokeArgs
    {
        [Input("compilationResultId", required: true)]
        public string CompilationResultId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetCompilationResultArgs()
        {
        }
        public static new GetCompilationResultArgs Empty => new GetCompilationResultArgs();
    }

    public sealed class GetCompilationResultInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("compilationResultId", required: true)]
        public Input<string> CompilationResultId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetCompilationResultInvokeArgs()
        {
        }
        public static new GetCompilationResultInvokeArgs Empty => new GetCompilationResultInvokeArgs();
    }


    [OutputType]
    public sealed class GetCompilationResultResult
    {
        /// <summary>
        /// Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
        /// </summary>
        public readonly Outputs.CodeCompilationConfigResponse CodeCompilationConfig;
        /// <summary>
        /// Errors encountered during project compilation.
        /// </summary>
        public readonly ImmutableArray<Outputs.CompilationErrorResponse> CompilationErrors;
        /// <summary>
        /// The version of `@dataform/core` that was used for compilation.
        /// </summary>
        public readonly string DataformCoreVersion;
        /// <summary>
        /// Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
        /// </summary>
        public readonly string GitCommitish;
        /// <summary>
        /// The compilation result's name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.
        /// </summary>
        public readonly string ReleaseConfig;
        /// <summary>
        /// The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.
        /// </summary>
        public readonly string ResolvedGitCommitSha;
        /// <summary>
        /// Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.
        /// </summary>
        public readonly string Workspace;

        [OutputConstructor]
        private GetCompilationResultResult(
            Outputs.CodeCompilationConfigResponse codeCompilationConfig,

            ImmutableArray<Outputs.CompilationErrorResponse> compilationErrors,

            string dataformCoreVersion,

            string gitCommitish,

            string name,

            string releaseConfig,

            string resolvedGitCommitSha,

            string workspace)
        {
            CodeCompilationConfig = codeCompilationConfig;
            CompilationErrors = compilationErrors;
            DataformCoreVersion = dataformCoreVersion;
            GitCommitish = gitCommitish;
            Name = name;
            ReleaseConfig = releaseConfig;
            ResolvedGitCommitSha = resolvedGitCommitSha;
            Workspace = workspace;
        }
    }
}
