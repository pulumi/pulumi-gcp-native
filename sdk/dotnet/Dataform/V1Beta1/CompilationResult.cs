// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataform.V1Beta1
{
    /// <summary>
    /// Creates a new CompilationResult in a given project and location.
    /// Auto-naming is currently not supported for this resource.
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:dataform/v1beta1:CompilationResult")]
    public partial class CompilationResult : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
        /// </summary>
        [Output("codeCompilationConfig")]
        public Output<Outputs.CodeCompilationConfigResponse> CodeCompilationConfig { get; private set; } = null!;

        /// <summary>
        /// Errors encountered during project compilation.
        /// </summary>
        [Output("compilationErrors")]
        public Output<ImmutableArray<Outputs.CompilationErrorResponse>> CompilationErrors { get; private set; } = null!;

        /// <summary>
        /// The version of `@dataform/core` that was used for compilation.
        /// </summary>
        [Output("dataformCoreVersion")]
        public Output<string> DataformCoreVersion { get; private set; } = null!;

        /// <summary>
        /// Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
        /// </summary>
        [Output("gitCommitish")]
        public Output<string> GitCommitish { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The compilation result's name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.
        /// </summary>
        [Output("releaseConfig")]
        public Output<string> ReleaseConfig { get; private set; } = null!;

        [Output("repositoryId")]
        public Output<string> RepositoryId { get; private set; } = null!;

        /// <summary>
        /// The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.
        /// </summary>
        [Output("resolvedGitCommitSha")]
        public Output<string> ResolvedGitCommitSha { get; private set; } = null!;

        /// <summary>
        /// Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.
        /// </summary>
        [Output("workspace")]
        public Output<string> Workspace { get; private set; } = null!;


        /// <summary>
        /// Create a CompilationResult resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CompilationResult(string name, CompilationResultArgs args, CustomResourceOptions? options = null)
            : base("google-native:dataform/v1beta1:CompilationResult", name, args ?? new CompilationResultArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CompilationResult(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:dataform/v1beta1:CompilationResult", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                    "repositoryId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CompilationResult resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CompilationResult Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CompilationResult(name, id, options);
        }
    }

    public sealed class CompilationResultArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
        /// </summary>
        [Input("codeCompilationConfig")]
        public Input<Inputs.CodeCompilationConfigArgs>? CodeCompilationConfig { get; set; }

        /// <summary>
        /// Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
        /// </summary>
        [Input("gitCommitish")]
        public Input<string>? GitCommitish { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.
        /// </summary>
        [Input("releaseConfig")]
        public Input<string>? ReleaseConfig { get; set; }

        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        /// <summary>
        /// Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.
        /// </summary>
        [Input("workspace")]
        public Input<string>? Workspace { get; set; }

        public CompilationResultArgs()
        {
        }
        public static new CompilationResultArgs Empty => new CompilationResultArgs();
    }
}
