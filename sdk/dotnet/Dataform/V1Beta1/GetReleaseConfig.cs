// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataform.V1Beta1
{
    public static class GetReleaseConfig
    {
        /// <summary>
        /// Fetches a single ReleaseConfig.
        /// </summary>
        public static Task<GetReleaseConfigResult> InvokeAsync(GetReleaseConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReleaseConfigResult>("google-native:dataform/v1beta1:getReleaseConfig", args ?? new GetReleaseConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Fetches a single ReleaseConfig.
        /// </summary>
        public static Output<GetReleaseConfigResult> Invoke(GetReleaseConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReleaseConfigResult>("google-native:dataform/v1beta1:getReleaseConfig", args ?? new GetReleaseConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReleaseConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("releaseConfigId", required: true)]
        public string ReleaseConfigId { get; set; } = null!;

        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetReleaseConfigArgs()
        {
        }
        public static new GetReleaseConfigArgs Empty => new GetReleaseConfigArgs();
    }

    public sealed class GetReleaseConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("releaseConfigId", required: true)]
        public Input<string> ReleaseConfigId { get; set; } = null!;

        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetReleaseConfigInvokeArgs()
        {
        }
        public static new GetReleaseConfigInvokeArgs Empty => new GetReleaseConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetReleaseConfigResult
    {
        /// <summary>
        /// Optional. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
        /// </summary>
        public readonly Outputs.CodeCompilationConfigResponse CodeCompilationConfig;
        /// <summary>
        /// Optional. Optional schedule (in cron format) for automatic creation of compilation results.
        /// </summary>
        public readonly string CronSchedule;
        /// <summary>
        /// Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
        /// </summary>
        public readonly string GitCommitish;
        /// <summary>
        /// The release config's name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Records of the 10 most recent scheduled release attempts. Updated whenever automatic creation of a compilation result is triggered by cron_schedule.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScheduledReleaseRecordResponse> RecentScheduledReleaseRecords;
        /// <summary>
        /// Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is created from this release config, or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.
        /// </summary>
        public readonly string ReleaseCompilationResult;
        /// <summary>
        /// Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
        /// </summary>
        public readonly string TimeZone;

        [OutputConstructor]
        private GetReleaseConfigResult(
            Outputs.CodeCompilationConfigResponse codeCompilationConfig,

            string cronSchedule,

            string gitCommitish,

            string name,

            ImmutableArray<Outputs.ScheduledReleaseRecordResponse> recentScheduledReleaseRecords,

            string releaseCompilationResult,

            string timeZone)
        {
            CodeCompilationConfig = codeCompilationConfig;
            CronSchedule = cronSchedule;
            GitCommitish = gitCommitish;
            Name = name;
            RecentScheduledReleaseRecords = recentScheduledReleaseRecords;
            ReleaseCompilationResult = releaseCompilationResult;
            TimeZone = timeZone;
        }
    }
}
