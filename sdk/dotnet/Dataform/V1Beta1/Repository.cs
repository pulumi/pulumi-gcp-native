// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataform.V1Beta1
{
    /// <summary>
    /// Creates a new Repository in a given project and location.
    /// Auto-naming is currently not supported for this resource.
    /// </summary>
    [GoogleNativeResourceType("google-native:dataform/v1beta1:Repository")]
    public partial class Repository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. If set, configures this repository to be linked to a Git remote.
        /// </summary>
        [Output("gitRemoteSettings")]
        public Output<Outputs.GitRemoteSettingsResponse> GitRemoteSettings { get; private set; } = null!;

        /// <summary>
        /// Optional. Input only. The initial commit file contents. Represented as map from file path to contents. The path is the full file path to commit including filename, from repository root.
        /// </summary>
        [Output("initialCommitFileContents")]
        public Output<ImmutableDictionary<string, string>> InitialCommitFileContents { get; private set; } = null!;

        /// <summary>
        /// Optional. Input only. An optional initial commit metadata for the Repository. The Repository must not have a value for `git_remote_settings.url`.
        /// </summary>
        [Output("initialCommitMetadata")]
        public Output<Outputs.CommitMetadataResponse> InitialCommitMetadata { get; private set; } = null!;

        /// <summary>
        /// Optional. Repository user labels.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The repository's name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format.
        /// </summary>
        [Output("npmrcEnvironmentVariablesSecretVersion")]
        public Output<string> NpmrcEnvironmentVariablesSecretVersion { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Required. The ID to use for the repository, which will become the final component of the repository's resource name.
        /// </summary>
        [Output("repositoryId")]
        public Output<string> RepositoryId { get; private set; } = null!;

        /// <summary>
        /// Optional. If set, fields of `workspace_compilation_overrides` override the default compilation settings that are specified in dataform.json when creating workspace-scoped compilation results. See documentation for `WorkspaceCompilationOverrides` for more information.
        /// </summary>
        [Output("workspaceCompilationOverrides")]
        public Output<Outputs.WorkspaceCompilationOverridesResponse> WorkspaceCompilationOverrides { get; private set; } = null!;


        /// <summary>
        /// Create a Repository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repository(string name, RepositoryArgs args, CustomResourceOptions? options = null)
            : base("google-native:dataform/v1beta1:Repository", name, args ?? new RepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repository(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:dataform/v1beta1:Repository", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                    "repositoryId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repository Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Repository(name, id, options);
        }
    }

    public sealed class RepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. If set, configures this repository to be linked to a Git remote.
        /// </summary>
        [Input("gitRemoteSettings")]
        public Input<Inputs.GitRemoteSettingsArgs>? GitRemoteSettings { get; set; }

        [Input("initialCommitFileContents")]
        private InputMap<string>? _initialCommitFileContents;

        /// <summary>
        /// Optional. Input only. The initial commit file contents. Represented as map from file path to contents. The path is the full file path to commit including filename, from repository root.
        /// </summary>
        public InputMap<string> InitialCommitFileContents
        {
            get => _initialCommitFileContents ?? (_initialCommitFileContents = new InputMap<string>());
            set => _initialCommitFileContents = value;
        }

        /// <summary>
        /// Optional. Input only. An optional initial commit metadata for the Repository. The Repository must not have a value for `git_remote_settings.url`.
        /// </summary>
        [Input("initialCommitMetadata")]
        public Input<Inputs.CommitMetadataArgs>? InitialCommitMetadata { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Repository user labels.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format.
        /// </summary>
        [Input("npmrcEnvironmentVariablesSecretVersion")]
        public Input<string>? NpmrcEnvironmentVariablesSecretVersion { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Required. The ID to use for the repository, which will become the final component of the repository's resource name.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        /// <summary>
        /// Optional. If set, fields of `workspace_compilation_overrides` override the default compilation settings that are specified in dataform.json when creating workspace-scoped compilation results. See documentation for `WorkspaceCompilationOverrides` for more information.
        /// </summary>
        [Input("workspaceCompilationOverrides")]
        public Input<Inputs.WorkspaceCompilationOverridesArgs>? WorkspaceCompilationOverrides { get; set; }

        public RepositoryArgs()
        {
        }
        public static new RepositoryArgs Empty => new RepositoryArgs();
    }
}
