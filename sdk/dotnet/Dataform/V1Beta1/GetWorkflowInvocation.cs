// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataform.V1Beta1
{
    public static class GetWorkflowInvocation
    {
        /// <summary>
        /// Fetches a single WorkflowInvocation.
        /// </summary>
        public static Task<GetWorkflowInvocationResult> InvokeAsync(GetWorkflowInvocationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkflowInvocationResult>("google-native:dataform/v1beta1:getWorkflowInvocation", args ?? new GetWorkflowInvocationArgs(), options.WithDefaults());

        /// <summary>
        /// Fetches a single WorkflowInvocation.
        /// </summary>
        public static Output<GetWorkflowInvocationResult> Invoke(GetWorkflowInvocationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkflowInvocationResult>("google-native:dataform/v1beta1:getWorkflowInvocation", args ?? new GetWorkflowInvocationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkflowInvocationArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        [Input("workflowInvocationId", required: true)]
        public string WorkflowInvocationId { get; set; } = null!;

        public GetWorkflowInvocationArgs()
        {
        }
        public static new GetWorkflowInvocationArgs Empty => new GetWorkflowInvocationArgs();
    }

    public sealed class GetWorkflowInvocationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        [Input("workflowInvocationId", required: true)]
        public Input<string> WorkflowInvocationId { get; set; } = null!;

        public GetWorkflowInvocationInvokeArgs()
        {
        }
        public static new GetWorkflowInvocationInvokeArgs Empty => new GetWorkflowInvocationInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkflowInvocationResult
    {
        /// <summary>
        /// Immutable. The name of the compilation result to compile. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.
        /// </summary>
        public readonly string CompilationResult;
        /// <summary>
        /// Immutable. If left unset, a default InvocationConfig will be used.
        /// </summary>
        public readonly Outputs.InvocationConfigResponse InvocationConfig;
        /// <summary>
        /// This workflow invocation's timing details.
        /// </summary>
        public readonly Outputs.IntervalResponse InvocationTiming;
        /// <summary>
        /// The workflow invocation's name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// This workflow invocation's current state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Immutable. The name of the workflow config to invoke. Must be in the format `projects/*/locations/*/repositories/*/workflowConfigs/*`.
        /// </summary>
        public readonly string WorkflowConfig;

        [OutputConstructor]
        private GetWorkflowInvocationResult(
            string compilationResult,

            Outputs.InvocationConfigResponse invocationConfig,

            Outputs.IntervalResponse invocationTiming,

            string name,

            string state,

            string workflowConfig)
        {
            CompilationResult = compilationResult;
            InvocationConfig = invocationConfig;
            InvocationTiming = invocationTiming;
            Name = name;
            State = state;
            WorkflowConfig = workflowConfig;
        }
    }
}
