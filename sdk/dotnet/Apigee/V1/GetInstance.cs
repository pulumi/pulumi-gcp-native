// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Apigee.V1
{
    public static class GetInstance
    {
        /// <summary>
        /// Gets the details for an Apigee runtime instance. **Note:** Not supported for Apigee hybrid.
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("google-native:apigee/v1:getInstance", args ?? new GetInstanceArgs(), options.WithVersion());
    }


    public sealed class GetInstanceArgs : Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        public GetInstanceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        /// <summary>
        /// Time the instance was created in milliseconds since epoch.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Optional. Description of the instance.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only. Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
        /// </summary>
        public readonly string DiskEncryptionKeyName;
        /// <summary>
        /// Optional. Display name for the instance.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Internal hostname or IP address of the Apigee endpoint used by clients to connect to the service.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// Time the instance was last modified in milliseconds since epoch.
        /// </summary>
        public readonly string LastModifiedAt;
        /// <summary>
        /// Required. Compute Engine location where the instance resides.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Required. Resource ID of the instance. Values must match the regular expression `^a-z{0,30}[a-z\d]$`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. Size of the CIDR block range that will be reserved by the instance. PAID organizations support `SLASH_16` to `SLASH_20` and defaults to `SLASH_16`. Evaluation organizations support only `SLASH_23`.
        /// </summary>
        public readonly string PeeringCidrRange;
        /// <summary>
        /// Port number of the exposed Apigee endpoint.
        /// </summary>
        public readonly string Port;
        /// <summary>
        /// State of the instance. Values other than `ACTIVE` means the resource is not ready to use.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetInstanceResult(
            string createdAt,

            string description,

            string diskEncryptionKeyName,

            string displayName,

            string host,

            string lastModifiedAt,

            string location,

            string name,

            string peeringCidrRange,

            string port,

            string state)
        {
            CreatedAt = createdAt;
            Description = description;
            DiskEncryptionKeyName = diskEncryptionKeyName;
            DisplayName = displayName;
            Host = host;
            LastModifiedAt = lastModifiedAt;
            Location = location;
            Name = name;
            PeeringCidrRange = peeringCidrRange;
            Port = port;
            State = state;
        }
    }
}
