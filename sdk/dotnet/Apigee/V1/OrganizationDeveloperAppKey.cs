// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GcpNative.Apigee.V1
{
    /// <summary>
    /// Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee hybrid from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API.
    /// </summary>
    [GcpNativeResourceType("gcp-native:apigee/v1:OrganizationDeveloperAppKey")]
    public partial class OrganizationDeveloperAppKey : Pulumi.CustomResource
    {
        /// <summary>
        /// List of API products for which the credential can be used. **Note**: Do not specify the list of API products when creating a consumer key and secret for a developer app. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created.
        /// </summary>
        [Output("apiProducts")]
        public Output<ImmutableArray<object>> ApiProducts { get; private set; } = null!;

        /// <summary>
        /// List of attributes associated with the credential.
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableArray<Outputs.GoogleCloudApigeeV1AttributeResponse>> Attributes { get; private set; } = null!;

        /// <summary>
        /// Consumer key.
        /// </summary>
        [Output("consumerKey")]
        public Output<string> ConsumerKey { get; private set; } = null!;

        /// <summary>
        /// Secret key.
        /// </summary>
        [Output("consumerSecret")]
        public Output<string> ConsumerSecret { get; private set; } = null!;

        /// <summary>
        /// Time the developer app expires in milliseconds since epoch.
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// Input only. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
        /// </summary>
        [Output("expiresInSeconds")]
        public Output<string> ExpiresInSeconds { get; private set; } = null!;

        /// <summary>
        /// Time the developer app was created in milliseconds since epoch.
        /// </summary>
        [Output("issuedAt")]
        public Output<string> IssuedAt { get; private set; } = null!;

        /// <summary>
        /// Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// Status of the credential. Valid values include `approved` or `revoked`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationDeveloperAppKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationDeveloperAppKey(string name, OrganizationDeveloperAppKeyArgs args, CustomResourceOptions? options = null)
            : base("gcp-native:apigee/v1:OrganizationDeveloperAppKey", name, args ?? new OrganizationDeveloperAppKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationDeveloperAppKey(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("gcp-native:apigee/v1:OrganizationDeveloperAppKey", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationDeveloperAppKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationDeveloperAppKey Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new OrganizationDeveloperAppKey(name, id, options);
        }
    }

    public sealed class OrganizationDeveloperAppKeyArgs : Pulumi.ResourceArgs
    {
        [Input("apiProducts")]
        private InputList<object>? _apiProducts;

        /// <summary>
        /// List of API products for which the credential can be used. **Note**: Do not specify the list of API products when creating a consumer key and secret for a developer app. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created.
        /// </summary>
        public InputList<object> ApiProducts
        {
            get => _apiProducts ?? (_apiProducts = new InputList<object>());
            set => _apiProducts = value;
        }

        [Input("appsId", required: true)]
        public Input<string> AppsId { get; set; } = null!;

        [Input("attributes")]
        private InputList<Inputs.GoogleCloudApigeeV1AttributeArgs>? _attributes;

        /// <summary>
        /// List of attributes associated with the credential.
        /// </summary>
        public InputList<Inputs.GoogleCloudApigeeV1AttributeArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.GoogleCloudApigeeV1AttributeArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// Consumer key.
        /// </summary>
        [Input("consumerKey")]
        public Input<string>? ConsumerKey { get; set; }

        /// <summary>
        /// Secret key.
        /// </summary>
        [Input("consumerSecret")]
        public Input<string>? ConsumerSecret { get; set; }

        [Input("developersId", required: true)]
        public Input<string> DevelopersId { get; set; } = null!;

        /// <summary>
        /// Time the developer app expires in milliseconds since epoch.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// Input only. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
        /// </summary>
        [Input("expiresInSeconds")]
        public Input<string>? ExpiresInSeconds { get; set; }

        /// <summary>
        /// Time the developer app was created in milliseconds since epoch.
        /// </summary>
        [Input("issuedAt")]
        public Input<string>? IssuedAt { get; set; }

        [Input("keysId", required: true)]
        public Input<string> KeysId { get; set; } = null!;

        [Input("organizationsId", required: true)]
        public Input<string> OrganizationsId { get; set; } = null!;

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Status of the credential. Valid values include `approved` or `revoked`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public OrganizationDeveloperAppKeyArgs()
        {
        }
    }
}
