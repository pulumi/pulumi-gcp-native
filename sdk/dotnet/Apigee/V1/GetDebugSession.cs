// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Apigee.V1
{
    public static class GetDebugSession
    {
        /// <summary>
        /// Retrieves a debug session.
        /// </summary>
        public static Task<GetDebugSessionResult> InvokeAsync(GetDebugSessionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDebugSessionResult>("google-native:apigee/v1:getDebugSession", args ?? new GetDebugSessionArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a debug session.
        /// </summary>
        public static Output<GetDebugSessionResult> Invoke(GetDebugSessionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDebugSessionResult>("google-native:apigee/v1:getDebugSession", args ?? new GetDebugSessionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDebugSessionArgs : Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public string ApiId { get; set; } = null!;

        [Input("debugsessionId", required: true)]
        public string DebugsessionId { get; set; } = null!;

        [Input("environmentId", required: true)]
        public string EnvironmentId { get; set; } = null!;

        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        [Input("revisionId", required: true)]
        public string RevisionId { get; set; } = null!;

        public GetDebugSessionArgs()
        {
        }
    }

    public sealed class GetDebugSessionInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        [Input("debugsessionId", required: true)]
        public Input<string> DebugsessionId { get; set; } = null!;

        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("revisionId", required: true)]
        public Input<string> RevisionId { get; set; } = null!;

        public GetDebugSessionInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDebugSessionResult
    {
        /// <summary>
        /// Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.
        /// </summary>
        public readonly int Count;
        /// <summary>
        /// The first transaction creation timestamp, recorded by UAP.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.
        /// </summary>
        public readonly string Filter;
        /// <summary>
        /// A unique ID for this DebugSession.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. The time in seconds after which this DebugSession should end. This value will override the value in query param, if both are provided.
        /// </summary>
        public readonly string Timeout;
        /// <summary>
        /// Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.
        /// </summary>
        public readonly int Tracesize;
        /// <summary>
        /// Optional. The length of time, in seconds, that this debug session is valid, starting from when it's received in the control plane. Min = 1, Max = 15, Default = 10.
        /// </summary>
        public readonly int Validity;

        [OutputConstructor]
        private GetDebugSessionResult(
            int count,

            string createTime,

            string filter,

            string name,

            string timeout,

            int tracesize,

            int validity)
        {
            Count = count;
            CreateTime = createTime;
            Filter = filter;
            Name = name;
            Timeout = timeout;
            Tracesize = tracesize;
            Validity = validity;
        }
    }
}
