// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudSearch.V1
{
    public static class GetItem
    {
        /// <summary>
        /// Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
        /// </summary>
        public static Task<GetItemResult> InvokeAsync(GetItemArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetItemResult>("google-native:cloudsearch/v1:getItem", args ?? new GetItemArgs(), options.WithDefaults());

        /// <summary>
        /// Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
        /// </summary>
        public static Output<GetItemResult> Invoke(GetItemInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetItemResult>("google-native:cloudsearch/v1:getItem", args ?? new GetItemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetItemArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectorName")]
        public string? ConnectorName { get; set; }

        [Input("datasourceId", required: true)]
        public string DatasourceId { get; set; } = null!;

        [Input("debugOptionsEnableDebugging")]
        public bool? DebugOptionsEnableDebugging { get; set; }

        [Input("itemId", required: true)]
        public string ItemId { get; set; } = null!;

        public GetItemArgs()
        {
        }
        public static new GetItemArgs Empty => new GetItemArgs();
    }

    public sealed class GetItemInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectorName")]
        public Input<string>? ConnectorName { get; set; }

        [Input("datasourceId", required: true)]
        public Input<string> DatasourceId { get; set; } = null!;

        [Input("debugOptionsEnableDebugging")]
        public Input<bool>? DebugOptionsEnableDebugging { get; set; }

        [Input("itemId", required: true)]
        public Input<string> ItemId { get; set; } = null!;

        public GetItemInvokeArgs()
        {
        }
        public static new GetItemInvokeArgs Empty => new GetItemInvokeArgs();
    }


    [OutputType]
    public sealed class GetItemResult
    {
        /// <summary>
        /// Access control list for this item.
        /// </summary>
        public readonly Outputs.ItemAclResponse Acl;
        /// <summary>
        /// Item content to be indexed and made text searchable.
        /// </summary>
        public readonly Outputs.ItemContentResponse Content;
        /// <summary>
        /// The type for this item.
        /// </summary>
        public readonly string ItemType;
        /// <summary>
        /// The metadata information.
        /// </summary>
        public readonly Outputs.ItemMetadataResponse Metadata;
        /// <summary>
        /// The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Additional state connector can store for this item. The maximum length is 10000 bytes.
        /// </summary>
        public readonly string Payload;
        /// <summary>
        /// Queue this item belongs to. The maximum length is 100 characters.
        /// </summary>
        public readonly string Queue;
        /// <summary>
        /// Status of the item. Output only field.
        /// </summary>
        public readonly Outputs.ItemStatusResponse Status;
        /// <summary>
        /// The structured data for the item that should conform to a registered object definition in the schema for the data source.
        /// </summary>
        public readonly Outputs.ItemStructuredDataResponse StructuredData;
        /// <summary>
        /// The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetItemResult(
            Outputs.ItemAclResponse acl,

            Outputs.ItemContentResponse content,

            string itemType,

            Outputs.ItemMetadataResponse metadata,

            string name,

            string payload,

            string queue,

            Outputs.ItemStatusResponse status,

            Outputs.ItemStructuredDataResponse structuredData,

            string version)
        {
            Acl = acl;
            Content = content;
            ItemType = itemType;
            Metadata = metadata;
            Name = name;
            Payload = payload;
            Queue = queue;
            Status = status;
            StructuredData = structuredData;
            Version = version;
        }
    }
}
