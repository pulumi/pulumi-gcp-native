// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudSearch.V1
{
    /// <summary>
    /// Creates a search application. **Note:** This API requires an admin account to execute.
    /// </summary>
    [GoogleNativeResourceType("google-native:cloudsearch/v1:SearchApplication")]
    public partial class SearchApplication : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Retrictions applied to the configurations. The maximum number of elements is 10.
        /// </summary>
        [Output("dataSourceRestrictions")]
        public Output<ImmutableArray<Outputs.DataSourceRestrictionResponse>> DataSourceRestrictions { get; private set; } = null!;

        /// <summary>
        /// The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above.
        /// </summary>
        [Output("defaultFacetOptions")]
        public Output<ImmutableArray<Outputs.FacetOptionsResponse>> DefaultFacetOptions { get; private set; } = null!;

        /// <summary>
        /// The default options for sorting the search results
        /// </summary>
        [Output("defaultSortOptions")]
        public Output<Outputs.SortOptionsResponse> DefaultSortOptions { get; private set; } = null!;

        /// <summary>
        /// Display name of the Search Application. The maximum length is 300 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Indicates whether audit logging is on/off for requests made for the search application in query APIs.
        /// </summary>
        [Output("enableAuditLog")]
        public Output<bool> EnableAuditLog { get; private set; } = null!;

        /// <summary>
        /// The name of the Search Application. Format: searchapplications/{application_id}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// IDs of the Long Running Operations (LROs) currently running for this schema. Output only field.
        /// </summary>
        [Output("operationIds")]
        public Output<ImmutableArray<string>> OperationIds { get; private set; } = null!;

        /// <summary>
        /// The default options for query interpretation
        /// </summary>
        [Output("queryInterpretationConfig")]
        public Output<Outputs.QueryInterpretationConfigResponse> QueryInterpretationConfig { get; private set; } = null!;

        /// <summary>
        /// With each result we should return the URI for its thumbnail (when applicable)
        /// </summary>
        [Output("returnResultThumbnailUrls")]
        public Output<bool> ReturnResultThumbnailUrls { get; private set; } = null!;

        /// <summary>
        /// Configuration for ranking results.
        /// </summary>
        [Output("scoringConfig")]
        public Output<Outputs.ScoringConfigResponse> ScoringConfig { get; private set; } = null!;

        /// <summary>
        /// Configuration for a sources specified in data_source_restrictions.
        /// </summary>
        [Output("sourceConfig")]
        public Output<ImmutableArray<Outputs.SourceConfigResponse>> SourceConfig { get; private set; } = null!;


        /// <summary>
        /// Create a SearchApplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SearchApplication(string name, SearchApplicationArgs? args = null, CustomResourceOptions? options = null)
            : base("google-native:cloudsearch/v1:SearchApplication", name, args ?? new SearchApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SearchApplication(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:cloudsearch/v1:SearchApplication", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SearchApplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SearchApplication Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SearchApplication(name, id, options);
        }
    }

    public sealed class SearchApplicationArgs : global::Pulumi.ResourceArgs
    {
        [Input("dataSourceRestrictions")]
        private InputList<Inputs.DataSourceRestrictionArgs>? _dataSourceRestrictions;

        /// <summary>
        /// Retrictions applied to the configurations. The maximum number of elements is 10.
        /// </summary>
        public InputList<Inputs.DataSourceRestrictionArgs> DataSourceRestrictions
        {
            get => _dataSourceRestrictions ?? (_dataSourceRestrictions = new InputList<Inputs.DataSourceRestrictionArgs>());
            set => _dataSourceRestrictions = value;
        }

        [Input("defaultFacetOptions")]
        private InputList<Inputs.FacetOptionsArgs>? _defaultFacetOptions;

        /// <summary>
        /// The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above.
        /// </summary>
        public InputList<Inputs.FacetOptionsArgs> DefaultFacetOptions
        {
            get => _defaultFacetOptions ?? (_defaultFacetOptions = new InputList<Inputs.FacetOptionsArgs>());
            set => _defaultFacetOptions = value;
        }

        /// <summary>
        /// The default options for sorting the search results
        /// </summary>
        [Input("defaultSortOptions")]
        public Input<Inputs.SortOptionsArgs>? DefaultSortOptions { get; set; }

        /// <summary>
        /// Display name of the Search Application. The maximum length is 300 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Indicates whether audit logging is on/off for requests made for the search application in query APIs.
        /// </summary>
        [Input("enableAuditLog")]
        public Input<bool>? EnableAuditLog { get; set; }

        /// <summary>
        /// The name of the Search Application. Format: searchapplications/{application_id}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The default options for query interpretation
        /// </summary>
        [Input("queryInterpretationConfig")]
        public Input<Inputs.QueryInterpretationConfigArgs>? QueryInterpretationConfig { get; set; }

        /// <summary>
        /// With each result we should return the URI for its thumbnail (when applicable)
        /// </summary>
        [Input("returnResultThumbnailUrls")]
        public Input<bool>? ReturnResultThumbnailUrls { get; set; }

        /// <summary>
        /// Configuration for ranking results.
        /// </summary>
        [Input("scoringConfig")]
        public Input<Inputs.ScoringConfigArgs>? ScoringConfig { get; set; }

        [Input("sourceConfig")]
        private InputList<Inputs.SourceConfigArgs>? _sourceConfig;

        /// <summary>
        /// Configuration for a sources specified in data_source_restrictions.
        /// </summary>
        public InputList<Inputs.SourceConfigArgs> SourceConfig
        {
            get => _sourceConfig ?? (_sourceConfig = new InputList<Inputs.SourceConfigArgs>());
            set => _sourceConfig = value;
        }

        public SearchApplicationArgs()
        {
        }
        public static new SearchApplicationArgs Empty => new SearchApplicationArgs();
    }
}
