// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudSearch.V1
{
    /// <summary>
    /// Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
    /// Auto-naming is currently not supported for this resource.
    /// </summary>
    [GoogleNativeResourceType("google-native:cloudsearch/v1:Item")]
    public partial class Item : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access control list for this item.
        /// </summary>
        [Output("acl")]
        public Output<Outputs.ItemAclResponse> Acl { get; private set; } = null!;

        /// <summary>
        /// Item content to be indexed and made text searchable.
        /// </summary>
        [Output("content")]
        public Output<Outputs.ItemContentResponse> Content { get; private set; } = null!;

        [Output("datasourceId")]
        public Output<string> DatasourceId { get; private set; } = null!;

        [Output("itemId")]
        public Output<string> ItemId { get; private set; } = null!;

        /// <summary>
        /// The type for this item.
        /// </summary>
        [Output("itemType")]
        public Output<string> ItemType { get; private set; } = null!;

        /// <summary>
        /// The metadata information.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ItemMetadataResponse> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Additional state connector can store for this item. The maximum length is 10000 bytes.
        /// </summary>
        [Output("payload")]
        public Output<string> Payload { get; private set; } = null!;

        /// <summary>
        /// Queue this item belongs to. The maximum length is 100 characters.
        /// </summary>
        [Output("queue")]
        public Output<string> Queue { get; private set; } = null!;

        /// <summary>
        /// Status of the item. Output only field.
        /// </summary>
        [Output("status")]
        public Output<Outputs.ItemStatusResponse> Status { get; private set; } = null!;

        /// <summary>
        /// The structured data for the item that should conform to a registered object definition in the schema for the data source.
        /// </summary>
        [Output("structuredData")]
        public Output<Outputs.ItemStructuredDataResponse> StructuredData { get; private set; } = null!;

        /// <summary>
        /// The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Item resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Item(string name, ItemArgs args, CustomResourceOptions? options = null)
            : base("google-native:cloudsearch/v1:Item", name, args ?? new ItemArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Item(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:cloudsearch/v1:Item", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "datasourceId",
                    "itemId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Item resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Item Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Item(name, id, options);
        }
    }

    public sealed class ItemArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
        /// </summary>
        [Input("connectorName")]
        public Input<string>? ConnectorName { get; set; }

        [Input("datasourceId", required: true)]
        public Input<string> DatasourceId { get; set; } = null!;

        /// <summary>
        /// Common debug options.
        /// </summary>
        [Input("debugOptions")]
        public Input<Inputs.DebugOptionsArgs>? DebugOptions { get; set; }

        [Input("itemId", required: true)]
        public Input<string> ItemId { get; set; } = null!;

        public ItemArgs()
        {
        }
        public static new ItemArgs Empty => new ItemArgs();
    }
}
