// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.FirebaseHosting.V1Beta1.Outputs
{

    /// <summary>
    /// The current certificate provisioning status information for a domain.
    /// </summary>
    [OutputType]
    public sealed class DomainProvisioningResponse
    {
        /// <summary>
        /// The TXT records (for the certificate challenge) that were found at the last DNS fetch.
        /// </summary>
        public readonly ImmutableArray<string> CertChallengeDiscoveredTxt;
        /// <summary>
        /// The DNS challenge for generating a certificate.
        /// </summary>
        public readonly Outputs.CertDnsChallengeResponse CertChallengeDns;
        /// <summary>
        /// The HTTP challenge for generating a certificate.
        /// </summary>
        public readonly Outputs.CertHttpChallengeResponse CertChallengeHttp;
        /// <summary>
        /// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
        /// </summary>
        public readonly string CertStatus;
        /// <summary>
        /// The IPs found at the last DNS fetch.
        /// </summary>
        public readonly ImmutableArray<string> DiscoveredIps;
        /// <summary>
        /// The time at which the last DNS fetch occurred.
        /// </summary>
        public readonly string DnsFetchTime;
        /// <summary>
        /// The DNS record match status as of the last DNS fetch.
        /// </summary>
        public readonly string DnsStatus;
        /// <summary>
        /// The list of IPs to which the domain is expected to resolve.
        /// </summary>
        public readonly ImmutableArray<string> ExpectedIps;

        [OutputConstructor]
        private DomainProvisioningResponse(
            ImmutableArray<string> certChallengeDiscoveredTxt,

            Outputs.CertDnsChallengeResponse certChallengeDns,

            Outputs.CertHttpChallengeResponse certChallengeHttp,

            string certStatus,

            ImmutableArray<string> discoveredIps,

            string dnsFetchTime,

            string dnsStatus,

            ImmutableArray<string> expectedIps)
        {
            CertChallengeDiscoveredTxt = certChallengeDiscoveredTxt;
            CertChallengeDns = certChallengeDns;
            CertChallengeHttp = certChallengeHttp;
            CertStatus = certStatus;
            DiscoveredIps = discoveredIps;
            DnsFetchTime = dnsFetchTime;
            DnsStatus = dnsStatus;
            ExpectedIps = expectedIps;
        }
    }
}
