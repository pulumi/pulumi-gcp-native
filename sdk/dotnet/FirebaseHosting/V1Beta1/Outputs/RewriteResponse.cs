// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.FirebaseHosting.V1Beta1.Outputs
{

    /// <summary>
    /// A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
    /// </summary>
    [OutputType]
    public sealed class RewriteResponse
    {
        /// <summary>
        /// The request will be forwarded to Firebase Dynamic Links.
        /// </summary>
        public readonly bool DynamicLinks;
        /// <summary>
        /// The function to proxy requests to. Must match the exported function name exactly.
        /// </summary>
        public readonly string Function;
        /// <summary>
        /// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
        /// </summary>
        public readonly string Glob;
        /// <summary>
        /// The URL path to rewrite the request to.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// The user-supplied RE2 regular expression to match against the request URL path.
        /// </summary>
        public readonly string Regex;
        /// <summary>
        /// The request will be forwarded to Cloud Run.
        /// </summary>
        public readonly Outputs.CloudRunRewriteResponse Run;

        [OutputConstructor]
        private RewriteResponse(
            bool dynamicLinks,

            string function,

            string glob,

            string path,

            string regex,

            Outputs.CloudRunRewriteResponse run)
        {
            DynamicLinks = dynamicLinks;
            Function = function;
            Glob = glob;
            Path = path;
            Regex = regex;
            Run = run;
        }
    }
}
