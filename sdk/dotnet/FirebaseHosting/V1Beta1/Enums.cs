// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.FirebaseHosting.V1Beta1
{
    /// <summary>
    /// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
    /// </summary>
    [EnumType]
    public readonly struct DomainProvisioningCertStatus : IEquatable<DomainProvisioningCertStatus>
    {
        private readonly string _value;

        private DomainProvisioningCertStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified certificate provisioning status.
        /// </summary>
        public static DomainProvisioningCertStatus CertStatusUnspecified { get; } = new DomainProvisioningCertStatus("CERT_STATUS_UNSPECIFIED");
        /// <summary>
        /// Waiting for certificate challenge to be created.
        /// </summary>
        public static DomainProvisioningCertStatus CertPending { get; } = new DomainProvisioningCertStatus("CERT_PENDING");
        /// <summary>
        /// Waiting for certificate challenge to be met.
        /// </summary>
        public static DomainProvisioningCertStatus CertMissing { get; } = new DomainProvisioningCertStatus("CERT_MISSING");
        /// <summary>
        /// Certificate challenge met; attempting to acquire/propagate certificate.
        /// </summary>
        public static DomainProvisioningCertStatus CertProcessing { get; } = new DomainProvisioningCertStatus("CERT_PROCESSING");
        /// <summary>
        /// Certificate obtained; propagating to the CDN.
        /// </summary>
        public static DomainProvisioningCertStatus CertPropagating { get; } = new DomainProvisioningCertStatus("CERT_PROPAGATING");
        /// <summary>
        /// Certificate provisioned and deployed across the CDN.
        /// </summary>
        public static DomainProvisioningCertStatus CertActive { get; } = new DomainProvisioningCertStatus("CERT_ACTIVE");
        /// <summary>
        /// Certificate provisioning failed in a non-recoverable manner.
        /// </summary>
        public static DomainProvisioningCertStatus CertError { get; } = new DomainProvisioningCertStatus("CERT_ERROR");

        public static bool operator ==(DomainProvisioningCertStatus left, DomainProvisioningCertStatus right) => left.Equals(right);
        public static bool operator !=(DomainProvisioningCertStatus left, DomainProvisioningCertStatus right) => !left.Equals(right);

        public static explicit operator string(DomainProvisioningCertStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainProvisioningCertStatus other && Equals(other);
        public bool Equals(DomainProvisioningCertStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The DNS record match status as of the last DNS fetch.
    /// </summary>
    [EnumType]
    public readonly struct DomainProvisioningDnsStatus : IEquatable<DomainProvisioningDnsStatus>
    {
        private readonly string _value;

        private DomainProvisioningDnsStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified DNS status.
        /// </summary>
        public static DomainProvisioningDnsStatus DnsStatusUnspecified { get; } = new DomainProvisioningDnsStatus("DNS_STATUS_UNSPECIFIED");
        /// <summary>
        /// No DNS records have been specified for this domain yet.
        /// </summary>
        public static DomainProvisioningDnsStatus DnsPending { get; } = new DomainProvisioningDnsStatus("DNS_PENDING");
        /// <summary>
        /// None of the required DNS records have been detected on the domain.
        /// </summary>
        public static DomainProvisioningDnsStatus DnsMissing { get; } = new DomainProvisioningDnsStatus("DNS_MISSING");
        /// <summary>
        /// Some of the required DNS records were detected, but not all of them. No extra (non-required) DNS records were detected.
        /// </summary>
        public static DomainProvisioningDnsStatus DnsPartialMatch { get; } = new DomainProvisioningDnsStatus("DNS_PARTIAL_MATCH");
        /// <summary>
        /// All required DNS records were detected. No extra (non-required) DNS records were detected.
        /// </summary>
        public static DomainProvisioningDnsStatus DnsMatch { get; } = new DomainProvisioningDnsStatus("DNS_MATCH");
        /// <summary>
        /// The domain has at least one of the required DNS records, and it has at least one extra (non-required) DNS record.
        /// </summary>
        public static DomainProvisioningDnsStatus DnsExtraneousMatch { get; } = new DomainProvisioningDnsStatus("DNS_EXTRANEOUS_MATCH");

        public static bool operator ==(DomainProvisioningDnsStatus left, DomainProvisioningDnsStatus right) => left.Equals(right);
        public static bool operator !=(DomainProvisioningDnsStatus left, DomainProvisioningDnsStatus right) => !left.Equals(right);

        public static explicit operator string(DomainProvisioningDnsStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainProvisioningDnsStatus other && Equals(other);
        public bool Equals(DomainProvisioningDnsStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The redirect status code.
    /// </summary>
    [EnumType]
    public readonly struct DomainRedirectType : IEquatable<DomainRedirectType>
    {
        private readonly string _value;

        private DomainRedirectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The default redirect type; should not be intentionlly used.
        /// </summary>
        public static DomainRedirectType RedirectTypeUnspecified { get; } = new DomainRedirectType("REDIRECT_TYPE_UNSPECIFIED");
        /// <summary>
        /// The redirect will respond with an HTTP status code of `301 Moved Permanently`.
        /// </summary>
        public static DomainRedirectType MovedPermanently { get; } = new DomainRedirectType("MOVED_PERMANENTLY");

        public static bool operator ==(DomainRedirectType left, DomainRedirectType right) => left.Equals(right);
        public static bool operator !=(DomainRedirectType left, DomainRedirectType right) => !left.Equals(right);

        public static explicit operator string(DomainRedirectType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainRedirectType other && Equals(other);
        public bool Equals(DomainRedirectType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Output only. Additional status of the domain association.
    /// </summary>
    [EnumType]
    public readonly struct DomainStatus : IEquatable<DomainStatus>
    {
        private readonly string _value;

        private DomainStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified domain association status.
        /// </summary>
        public static DomainStatus DomainStatusUnspecified { get; } = new DomainStatus("DOMAIN_STATUS_UNSPECIFIED");
        /// <summary>
        /// An external operation is in progress on the domain association and no further operations can be performed until it is complete. Formerly used for metabase updates. Not currently used
        /// </summary>
        public static DomainStatus DomainChangePending { get; } = new DomainStatus("DOMAIN_CHANGE_PENDING");
        /// <summary>
        /// The domain association is active and no additional action is required.
        /// </summary>
        public static DomainStatus DomainActive { get; } = new DomainStatus("DOMAIN_ACTIVE");
        /// <summary>
        /// The domain was previously verified in the legacy system. User must reverify the domain through the ownership service.
        /// </summary>
        public static DomainStatus DomainVerificationRequired { get; } = new DomainStatus("DOMAIN_VERIFICATION_REQUIRED");
        /// <summary>
        /// The domain verification has been lost and the domain is in the grace period before being removed from the Firebase Hosting site.
        /// </summary>
        public static DomainStatus DomainVerificationLost { get; } = new DomainStatus("DOMAIN_VERIFICATION_LOST");

        public static bool operator ==(DomainStatus left, DomainStatus right) => left.Equals(right);
        public static bool operator !=(DomainStatus left, DomainStatus right) => !left.Equals(right);

        public static explicit operator string(DomainStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainStatus other && Equals(other);
        public bool Equals(DomainStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
