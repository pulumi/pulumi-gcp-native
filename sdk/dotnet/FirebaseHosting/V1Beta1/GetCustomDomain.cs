// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.FirebaseHosting.V1Beta1
{
    public static class GetCustomDomain
    {
        /// <summary>
        /// Gets the specified `CustomDomain`.
        /// </summary>
        public static Task<GetCustomDomainResult> InvokeAsync(GetCustomDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCustomDomainResult>("google-native:firebasehosting/v1beta1:getCustomDomain", args ?? new GetCustomDomainArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified `CustomDomain`.
        /// </summary>
        public static Output<GetCustomDomainResult> Invoke(GetCustomDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCustomDomainResult>("google-native:firebasehosting/v1beta1:getCustomDomain", args ?? new GetCustomDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCustomDomainArgs : global::Pulumi.InvokeArgs
    {
        [Input("customDomainId", required: true)]
        public string CustomDomainId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("siteId", required: true)]
        public string SiteId { get; set; } = null!;

        public GetCustomDomainArgs()
        {
        }
        public static new GetCustomDomainArgs Empty => new GetCustomDomainArgs();
    }

    public sealed class GetCustomDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("customDomainId", required: true)]
        public Input<string> CustomDomainId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        public GetCustomDomainInvokeArgs()
        {
        }
        public static new GetCustomDomainInvokeArgs Empty => new GetCustomDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetCustomDomainResult
    {
        /// <summary>
        /// Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// The SSL certificate Hosting has for this custom domain's domain name. For new custom domains, this often represents Hosting's intent to create a certificate, rather than an actual cert. Check the `state` field for more.
        /// </summary>
        public readonly Outputs.CertificateResponse Cert;
        /// <summary>
        /// A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
        /// </summary>
        public readonly string CertPreference;
        /// <summary>
        /// The custom domain's create time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// The `HostState` of the domain name this `CustomDomain` refers to.
        /// </summary>
        public readonly string HostState;
        /// <summary>
        /// A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.
        /// </summary>
        public readonly ImmutableArray<Outputs.StatusResponse> Issues;
        /// <summary>
        /// Labels used for extra metadata and/or filtering.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The fully-qualified name of the `CustomDomain`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The `OwnershipState` of the domain name this `CustomDomain` refers to.
        /// </summary>
        public readonly string OwnershipState;
        /// <summary>
        /// A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.
        /// </summary>
        public readonly bool Reconciling;
        /// <summary>
        /// A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
        /// </summary>
        public readonly string RedirectTarget;
        /// <summary>
        /// A set of updates you should make to the domain name's DNS records to let Hosting serve secure content on its behalf.
        /// </summary>
        public readonly Outputs.DnsUpdatesResponse RequiredDnsUpdates;
        /// <summary>
        /// The last time the `CustomDomain` was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetCustomDomainResult(
            ImmutableDictionary<string, string> annotations,

            Outputs.CertificateResponse cert,

            string certPreference,

            string createTime,

            string deleteTime,

            string etag,

            string expireTime,

            string hostState,

            ImmutableArray<Outputs.StatusResponse> issues,

            ImmutableDictionary<string, string> labels,

            string name,

            string ownershipState,

            bool reconciling,

            string redirectTarget,

            Outputs.DnsUpdatesResponse requiredDnsUpdates,

            string updateTime)
        {
            Annotations = annotations;
            Cert = cert;
            CertPreference = certPreference;
            CreateTime = createTime;
            DeleteTime = deleteTime;
            Etag = etag;
            ExpireTime = expireTime;
            HostState = hostState;
            Issues = issues;
            Labels = labels;
            Name = name;
            OwnershipState = ownershipState;
            Reconciling = reconciling;
            RedirectTarget = redirectTarget;
            RequiredDnsUpdates = requiredDnsUpdates;
            UpdateTime = updateTime;
        }
    }
}
