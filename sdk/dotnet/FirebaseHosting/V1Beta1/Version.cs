// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.FirebaseHosting.V1Beta1
{
    /// <summary>
    /// Creates a new version for the specified site.
    /// </summary>
    [GoogleNativeResourceType("google-native:firebasehosting/v1beta1:Version")]
    public partial class Version : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
        /// </summary>
        [Output("config")]
        public Output<Outputs.ServingConfigResponse> Config { get; private set; } = null!;

        /// <summary>
        /// The time at which the version was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Identifies the user who created the version.
        /// </summary>
        [Output("createUser")]
        public Output<Outputs.ActingUserResponse> CreateUser { get; private set; } = null!;

        /// <summary>
        /// The time at which the version was `DELETED`.
        /// </summary>
        [Output("deleteTime")]
        public Output<string> DeleteTime { get; private set; } = null!;

        /// <summary>
        /// Identifies the user who `DELETED` the version.
        /// </summary>
        [Output("deleteUser")]
        public Output<Outputs.ActingUserResponse> DeleteUser { get; private set; } = null!;

        /// <summary>
        /// The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
        /// </summary>
        [Output("fileCount")]
        public Output<string> FileCount { get; private set; } = null!;

        /// <summary>
        /// The time at which the version was `FINALIZED`.
        /// </summary>
        [Output("finalizeTime")]
        public Output<string> FinalizeTime { get; private set; } = null!;

        /// <summary>
        /// Identifies the user who `FINALIZED` the version.
        /// </summary>
        [Output("finalizeUser")]
        public Output<Outputs.ActingUserResponse> FinalizeUser { get; private set; } = null!;

        /// <summary>
        /// The labels used for extra metadata and/or filtering.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        [Output("siteId")]
        public Output<string> SiteId { get; private set; } = null!;

        /// <summary>
        /// The self-reported size of the version. This value is used for a pre-emptive quota check for legacy version uploads.
        /// </summary>
        [Output("sizeBytes")]
        public Output<string?> SizeBytes { get; private set; } = null!;

        /// <summary>
        /// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
        /// </summary>
        [Output("versionBytes")]
        public Output<string> VersionBytes { get; private set; } = null!;

        /// <summary>
        /// A unique id for the new version. This is was only specified for legacy version creations, and should be blank.
        /// </summary>
        [Output("versionId")]
        public Output<string?> VersionId { get; private set; } = null!;


        /// <summary>
        /// Create a Version resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Version(string name, VersionArgs args, CustomResourceOptions? options = null)
            : base("google-native:firebasehosting/v1beta1:Version", name, args ?? new VersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Version(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:firebasehosting/v1beta1:Version", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "project",
                    "siteId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Version resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Version Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Version(name, id, options);
        }
    }

    public sealed class VersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ServingConfigArgs>? Config { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels used for extra metadata and/or filtering.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        /// <summary>
        /// The self-reported size of the version. This value is used for a pre-emptive quota check for legacy version uploads.
        /// </summary>
        [Input("sizeBytes")]
        public Input<string>? SizeBytes { get; set; }

        /// <summary>
        /// A unique id for the new version. This is was only specified for legacy version creations, and should be blank.
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        public VersionArgs()
        {
        }
        public static new VersionArgs Empty => new VersionArgs();
    }
}
