// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.FirebaseHosting.V1Beta1.Inputs
{

    /// <summary>
    /// The current certificate provisioning status information for a domain.
    /// </summary>
    public sealed class DomainProvisioningArgs : Pulumi.ResourceArgs
    {
        [Input("certChallengeDiscoveredTxt")]
        private InputList<string>? _certChallengeDiscoveredTxt;

        /// <summary>
        /// The TXT records (for the certificate challenge) that were found at the last DNS fetch.
        /// </summary>
        public InputList<string> CertChallengeDiscoveredTxt
        {
            get => _certChallengeDiscoveredTxt ?? (_certChallengeDiscoveredTxt = new InputList<string>());
            set => _certChallengeDiscoveredTxt = value;
        }

        /// <summary>
        /// The DNS challenge for generating a certificate.
        /// </summary>
        [Input("certChallengeDns")]
        public Input<Inputs.CertDnsChallengeArgs>? CertChallengeDns { get; set; }

        /// <summary>
        /// The HTTP challenge for generating a certificate.
        /// </summary>
        [Input("certChallengeHttp")]
        public Input<Inputs.CertHttpChallengeArgs>? CertChallengeHttp { get; set; }

        /// <summary>
        /// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
        /// </summary>
        [Input("certStatus")]
        public Input<string>? CertStatus { get; set; }

        [Input("discoveredIps")]
        private InputList<string>? _discoveredIps;

        /// <summary>
        /// The IPs found at the last DNS fetch.
        /// </summary>
        public InputList<string> DiscoveredIps
        {
            get => _discoveredIps ?? (_discoveredIps = new InputList<string>());
            set => _discoveredIps = value;
        }

        /// <summary>
        /// The time at which the last DNS fetch occurred.
        /// </summary>
        [Input("dnsFetchTime")]
        public Input<string>? DnsFetchTime { get; set; }

        /// <summary>
        /// The DNS record match status as of the last DNS fetch.
        /// </summary>
        [Input("dnsStatus")]
        public Input<string>? DnsStatus { get; set; }

        [Input("expectedIps")]
        private InputList<string>? _expectedIps;

        /// <summary>
        /// The list of IPs to which the domain is expected to resolve.
        /// </summary>
        public InputList<string> ExpectedIps
        {
            get => _expectedIps ?? (_expectedIps = new InputList<string>());
            set => _expectedIps = value;
        }

        public DomainProvisioningArgs()
        {
        }
    }
}
