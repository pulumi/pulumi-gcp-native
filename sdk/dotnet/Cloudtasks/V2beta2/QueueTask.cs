// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Cloudtasks.V2beta2
{
    /// <summary>
    /// Creates a task and adds it to a queue. Tasks cannot be updated after creation; there is no UpdateTask command. * For App Engine queues, the maximum task size is 100KB. * For pull queues, the maximum task size is 1MB.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:cloudtasks/v2beta2:QueueTask")]
    public partial class QueueTask : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a QueueTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public QueueTask(string name, QueueTaskArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:cloudtasks/v2beta2:QueueTask", name, args ?? new QueueTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private QueueTask(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:cloudtasks/v2beta2:QueueTask", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing QueueTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static QueueTask Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new QueueTask(name, id, options);
        }
    }

    public sealed class QueueTaskArgs : Pulumi.ResourceArgs
    {
        [Input("locationsId", required: true)]
        public Input<string> LocationsId { get; set; } = null!;

        [Input("projectsId", required: true)]
        public Input<string> ProjectsId { get; set; } = null!;

        [Input("queuesId", required: true)]
        public Input<string> QueuesId { get; set; } = null!;

        /// <summary>
        /// The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
        /// </summary>
        [Input("responseView")]
        public Input<string>? ResponseView { get; set; }

        /// <summary>
        /// Required. The task to add. Task names have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`. The user can optionally specify a task name. If a name is not specified then the system will generate a random unique task id, which will be set in the task returned in the response. If schedule_time is not set or is in the past then Cloud Tasks will set it to the current time. Task De-duplication: Explicitly specifying a task ID enables task de-duplication. If a task's ID is identical to that of an existing task or a task that was deleted or completed recently then the call will fail with ALREADY_EXISTS. If the task's queue was created using Cloud Tasks, then another task with the same name can't be created for ~1hour after the original task was deleted or completed. If the task's queue was created using queue.yaml or queue.xml, then another task with the same name can't be created for ~9days after the original task was deleted or completed. Because there is an extra lookup cost to identify duplicate task names, these CreateTask calls have significantly increased latency. Using hashed strings for the task id or for the prefix of the task id is recommended. Choosing task ids that are sequential or have sequential prefixes, for example using a timestamp, causes an increase in latency and error rates in all task commands. The infrastructure relies on an approximately uniform distribution of task ids to store and serve tasks efficiently.
        /// </summary>
        [Input("task")]
        public Input<Inputs.TaskArgs>? Task { get; set; }

        [Input("tasksId", required: true)]
        public Input<string> TasksId { get; set; } = null!;

        public QueueTaskArgs()
        {
        }
    }
}
