// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Contentwarehouse.V1
{
    public static class GetDocument
    {
        /// <summary>
        /// Gets a document. Returns NOT_FOUND if the document does not exist.
        /// </summary>
        public static Task<GetDocumentResult> InvokeAsync(GetDocumentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDocumentResult>("google-native:contentwarehouse/v1:getDocument", args ?? new GetDocumentArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a document. Returns NOT_FOUND if the document does not exist.
        /// </summary>
        public static Output<GetDocumentResult> Invoke(GetDocumentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDocumentResult>("google-native:contentwarehouse/v1:getDocument", args ?? new GetDocumentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDocumentArgs : global::Pulumi.InvokeArgs
    {
        [Input("documentId", required: true)]
        public string DocumentId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDocumentArgs()
        {
        }
        public static new GetDocumentArgs Empty => new GetDocumentArgs();
    }

    public sealed class GetDocumentInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("documentId", required: true)]
        public Input<string> DocumentId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDocumentInvokeArgs()
        {
        }
        public static new GetDocumentInvokeArgs Empty => new GetDocumentInvokeArgs();
    }


    [OutputType]
    public sealed class GetDocumentResult
    {
        /// <summary>
        /// Document AI format to save the structured content, including OCR.
        /// </summary>
        public readonly Outputs.GoogleCloudDocumentaiV1DocumentResponse CloudAiDocument;
        /// <summary>
        /// Indicates the category (image, audio, video etc.) of the original content.
        /// </summary>
        public readonly string ContentCategory;
        /// <summary>
        /// The time when the document is created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The user who creates the document.
        /// </summary>
        public readonly string Creator;
        /// <summary>
        /// Display name of the document given by the user. This name will be displayed in the UI. Customer can populate this field with the name of the document. This differs from the 'title' field as 'title' is optional and stores the top heading in the document.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Uri to display the document, for example, in the UI.
        /// </summary>
        public readonly string DisplayUri;
        /// <summary>
        /// If linked to a Collection with RetentionPolicy, the date when the document becomes mutable.
        /// </summary>
        public readonly string DispositionTime;
        /// <summary>
        /// The Document schema name. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
        /// </summary>
        public readonly string DocumentSchemaName;
        /// <summary>
        /// Raw document content.
        /// </summary>
        public readonly string InlineRawDocument;
        /// <summary>
        /// Indicates if the document has a legal hold on it.
        /// </summary>
        public readonly bool LegalHold;
        /// <summary>
        /// The resource name of the document. Format: projects/{project_number}/locations/{location}/documents/{document_id}. The name is ignored when creating a document.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Other document format, such as PPTX, XLXS
        /// </summary>
        public readonly string PlainText;
        /// <summary>
        /// List of values that are user supplied metadata.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudContentwarehouseV1PropertyResponse> Properties;
        /// <summary>
        /// This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.
        /// </summary>
        public readonly string RawDocumentFileType;
        /// <summary>
        /// Raw document file in Cloud Storage path.
        /// </summary>
        public readonly string RawDocumentPath;
        /// <summary>
        /// The reference ID set by customers. Must be unique per project and location.
        /// </summary>
        public readonly string ReferenceId;
        /// <summary>
        /// If true, text extraction will not be performed.
        /// </summary>
        public readonly bool TextExtractionDisabled;
        /// <summary>
        /// If true, text extraction will be performed.
        /// </summary>
        public readonly bool TextExtractionEnabled;
        /// <summary>
        /// Title that describes the document. This can be the top heading or text that describes the document.
        /// </summary>
        public readonly string Title;
        /// <summary>
        /// The time when the document is last updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The user who lastly updates the document.
        /// </summary>
        public readonly string Updater;

        [OutputConstructor]
        private GetDocumentResult(
            Outputs.GoogleCloudDocumentaiV1DocumentResponse cloudAiDocument,

            string contentCategory,

            string createTime,

            string creator,

            string displayName,

            string displayUri,

            string dispositionTime,

            string documentSchemaName,

            string inlineRawDocument,

            bool legalHold,

            string name,

            string plainText,

            ImmutableArray<Outputs.GoogleCloudContentwarehouseV1PropertyResponse> properties,

            string rawDocumentFileType,

            string rawDocumentPath,

            string referenceId,

            bool textExtractionDisabled,

            bool textExtractionEnabled,

            string title,

            string updateTime,

            string updater)
        {
            CloudAiDocument = cloudAiDocument;
            ContentCategory = contentCategory;
            CreateTime = createTime;
            Creator = creator;
            DisplayName = displayName;
            DisplayUri = displayUri;
            DispositionTime = dispositionTime;
            DocumentSchemaName = documentSchemaName;
            InlineRawDocument = inlineRawDocument;
            LegalHold = legalHold;
            Name = name;
            PlainText = plainText;
            Properties = properties;
            RawDocumentFileType = rawDocumentFileType;
            RawDocumentPath = rawDocumentPath;
            ReferenceId = referenceId;
            TextExtractionDisabled = textExtractionDisabled;
            TextExtractionEnabled = textExtractionEnabled;
            Title = title;
            UpdateTime = updateTime;
            Updater = updater;
        }
    }
}
