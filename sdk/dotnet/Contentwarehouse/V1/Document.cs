// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Contentwarehouse.V1
{
    /// <summary>
    /// Creates a document.
    /// </summary>
    [GoogleNativeResourceType("google-native:contentwarehouse/v1:Document")]
    public partial class Document : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Document AI format to save the structured content, including OCR.
        /// </summary>
        [Output("cloudAiDocument")]
        public Output<Outputs.GoogleCloudDocumentaiV1DocumentResponse> CloudAiDocument { get; private set; } = null!;

        /// <summary>
        /// Indicates the category (image, audio, video etc.) of the original content.
        /// </summary>
        [Output("contentCategory")]
        public Output<string> ContentCategory { get; private set; } = null!;

        /// <summary>
        /// The time when the document is created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The user who creates the document.
        /// </summary>
        [Output("creator")]
        public Output<string> Creator { get; private set; } = null!;

        /// <summary>
        /// Display name of the document given by the user. This name will be displayed in the UI. Customer can populate this field with the name of the document. This differs from the 'title' field as 'title' is optional and stores the top heading in the document.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Uri to display the document, for example, in the UI.
        /// </summary>
        [Output("displayUri")]
        public Output<string> DisplayUri { get; private set; } = null!;

        /// <summary>
        /// If linked to a Collection with RetentionPolicy, the date when the document becomes mutable.
        /// </summary>
        [Output("dispositionTime")]
        public Output<string> DispositionTime { get; private set; } = null!;

        /// <summary>
        /// The Document schema name. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
        /// </summary>
        [Output("documentSchemaName")]
        public Output<string> DocumentSchemaName { get; private set; } = null!;

        /// <summary>
        /// Raw document content.
        /// </summary>
        [Output("inlineRawDocument")]
        public Output<string> InlineRawDocument { get; private set; } = null!;

        /// <summary>
        /// Indicates if the document has a legal hold on it.
        /// </summary>
        [Output("legalHold")]
        public Output<bool> LegalHold { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name of the document. Format: projects/{project_number}/locations/{location}/documents/{document_id}. The name is ignored when creating a document.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Other document format, such as PPTX, XLXS
        /// </summary>
        [Output("plainText")]
        public Output<string> PlainText { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// List of values that are user supplied metadata.
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.GoogleCloudContentwarehouseV1PropertyResponse>> Properties { get; private set; } = null!;

        /// <summary>
        /// This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.
        /// </summary>
        [Output("rawDocumentFileType")]
        public Output<string> RawDocumentFileType { get; private set; } = null!;

        /// <summary>
        /// Raw document file in Cloud Storage path.
        /// </summary>
        [Output("rawDocumentPath")]
        public Output<string> RawDocumentPath { get; private set; } = null!;

        /// <summary>
        /// The reference ID set by customers. Must be unique per project and location.
        /// </summary>
        [Output("referenceId")]
        public Output<string> ReferenceId { get; private set; } = null!;

        /// <summary>
        /// If true, text extraction will not be performed.
        /// </summary>
        [Output("textExtractionDisabled")]
        public Output<bool> TextExtractionDisabled { get; private set; } = null!;

        /// <summary>
        /// If true, text extraction will be performed.
        /// </summary>
        [Output("textExtractionEnabled")]
        public Output<bool> TextExtractionEnabled { get; private set; } = null!;

        /// <summary>
        /// Title that describes the document. This can be the top heading or text that describes the document.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// The time when the document is last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The user who lastly updates the document.
        /// </summary>
        [Output("updater")]
        public Output<string> Updater { get; private set; } = null!;


        /// <summary>
        /// Create a Document resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Document(string name, DocumentArgs args, CustomResourceOptions? options = null)
            : base("google-native:contentwarehouse/v1:Document", name, args ?? new DocumentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Document(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:contentwarehouse/v1:Document", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Document resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Document Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Document(name, id, options);
        }
    }

    public sealed class DocumentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Document AI format to save the structured content, including OCR.
        /// </summary>
        [Input("cloudAiDocument")]
        public Input<Inputs.GoogleCloudDocumentaiV1DocumentArgs>? CloudAiDocument { get; set; }

        /// <summary>
        /// Request Option for processing Cloud AI Document in Document Warehouse. This field offers limited support for mapping entities from Cloud AI Document to Warehouse Document. Please consult with product team before using this field and other available options.
        /// </summary>
        [Input("cloudAiDocumentOption")]
        public Input<Inputs.GoogleCloudContentwarehouseV1CloudAIDocumentOptionArgs>? CloudAiDocumentOption { get; set; }

        /// <summary>
        /// Indicates the category (image, audio, video etc.) of the original content.
        /// </summary>
        [Input("contentCategory")]
        public Input<Pulumi.GoogleNative.Contentwarehouse.V1.DocumentContentCategory>? ContentCategory { get; set; }

        /// <summary>
        /// Field mask for creating Document fields. If mask path is empty, it means all fields are masked. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
        /// </summary>
        [Input("createMask")]
        public Input<string>? CreateMask { get; set; }

        /// <summary>
        /// The user who creates the document.
        /// </summary>
        [Input("creator")]
        public Input<string>? Creator { get; set; }

        /// <summary>
        /// Display name of the document given by the user. This name will be displayed in the UI. Customer can populate this field with the name of the document. This differs from the 'title' field as 'title' is optional and stores the top heading in the document.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Uri to display the document, for example, in the UI.
        /// </summary>
        [Input("displayUri")]
        public Input<string>? DisplayUri { get; set; }

        /// <summary>
        /// The Document schema name. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
        /// </summary>
        [Input("documentSchemaName")]
        public Input<string>? DocumentSchemaName { get; set; }

        /// <summary>
        /// Raw document content.
        /// </summary>
        [Input("inlineRawDocument")]
        public Input<string>? InlineRawDocument { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name of the document. Format: projects/{project_number}/locations/{location}/documents/{document_id}. The name is ignored when creating a document.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Other document format, such as PPTX, XLXS
        /// </summary>
        [Input("plainText")]
        public Input<string>? PlainText { get; set; }

        /// <summary>
        /// Default document policy during creation. This refers to an Identity and Access (IAM) policy, which specifies access controls for the Document. Conditions defined in the policy will be ignored.
        /// </summary>
        [Input("policy")]
        public Input<Inputs.GoogleIamV1PolicyArgs>? Policy { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("properties")]
        private InputList<Inputs.GoogleCloudContentwarehouseV1PropertyArgs>? _properties;

        /// <summary>
        /// List of values that are user supplied metadata.
        /// </summary>
        public InputList<Inputs.GoogleCloudContentwarehouseV1PropertyArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.GoogleCloudContentwarehouseV1PropertyArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.
        /// </summary>
        [Input("rawDocumentFileType")]
        public Input<Pulumi.GoogleNative.Contentwarehouse.V1.DocumentRawDocumentFileType>? RawDocumentFileType { get; set; }

        /// <summary>
        /// Raw document file in Cloud Storage path.
        /// </summary>
        [Input("rawDocumentPath")]
        public Input<string>? RawDocumentPath { get; set; }

        /// <summary>
        /// The reference ID set by customers. Must be unique per project and location.
        /// </summary>
        [Input("referenceId")]
        public Input<string>? ReferenceId { get; set; }

        /// <summary>
        /// The meta information collected about the end user, used to enforce access control for the service.
        /// </summary>
        [Input("requestMetadata")]
        public Input<Inputs.GoogleCloudContentwarehouseV1RequestMetadataArgs>? RequestMetadata { get; set; }

        /// <summary>
        /// If true, text extraction will not be performed.
        /// </summary>
        [Input("textExtractionDisabled")]
        public Input<bool>? TextExtractionDisabled { get; set; }

        /// <summary>
        /// If true, text extraction will be performed.
        /// </summary>
        [Input("textExtractionEnabled")]
        public Input<bool>? TextExtractionEnabled { get; set; }

        /// <summary>
        /// Title that describes the document. This can be the top heading or text that describes the document.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The user who lastly updates the document.
        /// </summary>
        [Input("updater")]
        public Input<string>? Updater { get; set; }

        public DocumentArgs()
        {
        }
        public static new DocumentArgs Empty => new DocumentArgs();
    }
}
