// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudIoT.V1
{
    /// <summary>
    /// Creates a device registry that contains devices.
    /// </summary>
    [GoogleNativeResourceType("google-native:cloudiot/v1:Registry")]
    public partial class Registry : Pulumi.CustomResource
    {
        /// <summary>
        /// The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.
        /// </summary>
        [Output("credentials")]
        public Output<ImmutableArray<Outputs.RegistryCredentialResponse>> Credentials { get; private set; } = null!;

        /// <summary>
        /// The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device's registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.
        /// </summary>
        [Output("eventNotificationConfigs")]
        public Output<ImmutableArray<Outputs.EventNotificationConfigResponse>> EventNotificationConfigs { get; private set; } = null!;

        /// <summary>
        /// The DeviceService (HTTP) configuration for this device registry.
        /// </summary>
        [Output("httpConfig")]
        public Output<Outputs.HttpConfigResponse> HttpConfig { get; private set; } = null!;

        /// <summary>
        /// **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
        /// </summary>
        [Output("logLevel")]
        public Output<string> LogLevel { get; private set; } = null!;

        /// <summary>
        /// The MQTT configuration for this device registry.
        /// </summary>
        [Output("mqttConfig")]
        public Output<Outputs.MqttConfigResponse> MqttConfig { get; private set; } = null!;

        /// <summary>
        /// The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The configuration for notification of new states received from the device. State updates are guaranteed to be stored in the state history, but notifications to Cloud Pub/Sub are not guaranteed. For example, if permissions are misconfigured or the specified topic doesn't exist, no notification will be published but the state will still be stored in Cloud IoT Core.
        /// </summary>
        [Output("stateNotificationConfig")]
        public Output<Outputs.StateNotificationConfigResponse> StateNotificationConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Registry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Registry(string name, RegistryArgs? args = null, CustomResourceOptions? options = null)
            : base("google-native:cloudiot/v1:Registry", name, args ?? new RegistryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Registry(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:cloudiot/v1:Registry", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Registry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Registry Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Registry(name, id, options);
        }
    }

    public sealed class RegistryArgs : Pulumi.ResourceArgs
    {
        [Input("credentials")]
        private InputList<Inputs.RegistryCredentialArgs>? _credentials;

        /// <summary>
        /// The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.
        /// </summary>
        public InputList<Inputs.RegistryCredentialArgs> Credentials
        {
            get => _credentials ?? (_credentials = new InputList<Inputs.RegistryCredentialArgs>());
            set => _credentials = value;
        }

        [Input("eventNotificationConfigs")]
        private InputList<Inputs.EventNotificationConfigArgs>? _eventNotificationConfigs;

        /// <summary>
        /// The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device's registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.
        /// </summary>
        public InputList<Inputs.EventNotificationConfigArgs> EventNotificationConfigs
        {
            get => _eventNotificationConfigs ?? (_eventNotificationConfigs = new InputList<Inputs.EventNotificationConfigArgs>());
            set => _eventNotificationConfigs = value;
        }

        /// <summary>
        /// The DeviceService (HTTP) configuration for this device registry.
        /// </summary>
        [Input("httpConfig")]
        public Input<Inputs.HttpConfigArgs>? HttpConfig { get; set; }

        /// <summary>
        /// The identifier of this device registry. For example, `myRegistry`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
        /// </summary>
        [Input("logLevel")]
        public Input<Pulumi.GoogleNative.CloudIoT.V1.RegistryLogLevel>? LogLevel { get; set; }

        /// <summary>
        /// The MQTT configuration for this device registry.
        /// </summary>
        [Input("mqttConfig")]
        public Input<Inputs.MqttConfigArgs>? MqttConfig { get; set; }

        /// <summary>
        /// The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The configuration for notification of new states received from the device. State updates are guaranteed to be stored in the state history, but notifications to Cloud Pub/Sub are not guaranteed. For example, if permissions are misconfigured or the specified topic doesn't exist, no notification will be published but the state will still be stored in Cloud IoT Core.
        /// </summary>
        [Input("stateNotificationConfig")]
        public Input<Inputs.StateNotificationConfigArgs>? StateNotificationConfig { get; set; }

        public RegistryArgs()
        {
        }
    }
}
