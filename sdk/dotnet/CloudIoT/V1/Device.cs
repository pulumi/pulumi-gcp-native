// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudIoT.V1
{
    /// <summary>
    /// Creates a device in a device registry.
    /// </summary>
    [GoogleNativeResourceType("google-native:cloudiot/v1:Device")]
    public partial class Device : Pulumi.CustomResource
    {
        /// <summary>
        /// If a device is blocked, connections or requests from this device will fail. Can be used to temporarily prevent the device from connecting if, for example, the sensor is generating bad data and needs maintenance.
        /// </summary>
        [Output("blocked")]
        public Output<bool> Blocked { get; private set; } = null!;

        /// <summary>
        /// The most recent device configuration, which is eventually sent from Cloud IoT Core to the device. If not present on creation, the configuration will be initialized with an empty payload and version value of `1`. To update this field after creation, use the `DeviceManager.ModifyCloudToDeviceConfig` method.
        /// </summary>
        [Output("config")]
        public Output<Outputs.DeviceConfigResponse> Config { get; private set; } = null!;

        /// <summary>
        /// The credentials used to authenticate this device. To allow credential rotation without interruption, multiple device credentials can be bound to this device. No more than 3 credentials can be bound to a single device at a time. When new credentials are added to a device, they are verified against the registry credentials. For details, see the description of the `DeviceRegistry.credentials` field.
        /// </summary>
        [Output("credentials")]
        public Output<ImmutableArray<Outputs.DeviceCredentialResponse>> Credentials { get; private set; } = null!;

        /// <summary>
        /// Gateway-related configuration and state.
        /// </summary>
        [Output("gatewayConfig")]
        public Output<Outputs.GatewayConfigResponse> GatewayConfig { get; private set; } = null!;

        /// <summary>
        /// [Output only] The last time a cloud-to-device config version acknowledgment was received from the device. This field is only for configurations sent through MQTT.
        /// </summary>
        [Output("lastConfigAckTime")]
        public Output<string> LastConfigAckTime { get; private set; } = null!;

        /// <summary>
        /// [Output only] The last time a cloud-to-device config version was sent to the device.
        /// </summary>
        [Output("lastConfigSendTime")]
        public Output<string> LastConfigSendTime { get; private set; } = null!;

        /// <summary>
        /// [Output only] The error message of the most recent error, such as a failure to publish to Cloud Pub/Sub. 'last_error_time' is the timestamp of this field. If no errors have occurred, this field has an empty message and the status code 0 == OK. Otherwise, this field is expected to have a status code other than OK.
        /// </summary>
        [Output("lastErrorStatus")]
        public Output<Outputs.StatusResponse> LastErrorStatus { get; private set; } = null!;

        /// <summary>
        /// [Output only] The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub. This field is the timestamp of 'last_error_status'.
        /// </summary>
        [Output("lastErrorTime")]
        public Output<string> LastErrorTime { get; private set; } = null!;

        /// <summary>
        /// [Output only] The last time a telemetry event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
        /// </summary>
        [Output("lastEventTime")]
        public Output<string> LastEventTime { get; private set; } = null!;

        /// <summary>
        /// [Output only] The last time an MQTT `PINGREQ` was received. This field applies only to devices connecting through MQTT. MQTT clients usually only send `PINGREQ` messages if the connection is idle, and no other messages have been sent. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
        /// </summary>
        [Output("lastHeartbeatTime")]
        public Output<string> LastHeartbeatTime { get; private set; } = null!;

        /// <summary>
        /// [Output only] The last time a state event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
        /// </summary>
        [Output("lastStateTime")]
        public Output<string> LastStateTime { get; private set; } = null!;

        /// <summary>
        /// **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.
        /// </summary>
        [Output("logLevel")]
        public Output<string> LogLevel { get; private set; } = null!;

        /// <summary>
        /// The metadata key-value pairs assigned to the device. This metadata is not interpreted or indexed by Cloud IoT Core. It can be used to add contextual information for the device. Keys must conform to the regular expression a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings. Each value must be less than or equal to 32 KB in size. The total size of all keys and values must be less than 256 KB, and the maximum number of key-value pairs is 500.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        /// <summary>
        /// The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// [Output only] A server-defined unique numeric ID for the device. This is a more compact way to identify devices, and it is globally unique.
        /// </summary>
        [Output("numId")]
        public Output<string> NumId { get; private set; } = null!;

        /// <summary>
        /// [Output only] The state most recently received from the device. If no state has been reported, this field is not present.
        /// </summary>
        [Output("state")]
        public Output<Outputs.DeviceStateResponse> State { get; private set; } = null!;


        /// <summary>
        /// Create a Device resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Device(string name, DeviceArgs args, CustomResourceOptions? options = null)
            : base("google-native:cloudiot/v1:Device", name, args ?? new DeviceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Device(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:cloudiot/v1:Device", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Device resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Device Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Device(name, id, options);
        }
    }

    public sealed class DeviceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If a device is blocked, connections or requests from this device will fail. Can be used to temporarily prevent the device from connecting if, for example, the sensor is generating bad data and needs maintenance.
        /// </summary>
        [Input("blocked")]
        public Input<bool>? Blocked { get; set; }

        /// <summary>
        /// The most recent device configuration, which is eventually sent from Cloud IoT Core to the device. If not present on creation, the configuration will be initialized with an empty payload and version value of `1`. To update this field after creation, use the `DeviceManager.ModifyCloudToDeviceConfig` method.
        /// </summary>
        [Input("config")]
        public Input<Inputs.DeviceConfigArgs>? Config { get; set; }

        [Input("credentials")]
        private InputList<Inputs.DeviceCredentialArgs>? _credentials;

        /// <summary>
        /// The credentials used to authenticate this device. To allow credential rotation without interruption, multiple device credentials can be bound to this device. No more than 3 credentials can be bound to a single device at a time. When new credentials are added to a device, they are verified against the registry credentials. For details, see the description of the `DeviceRegistry.credentials` field.
        /// </summary>
        public InputList<Inputs.DeviceCredentialArgs> Credentials
        {
            get => _credentials ?? (_credentials = new InputList<Inputs.DeviceCredentialArgs>());
            set => _credentials = value;
        }

        /// <summary>
        /// Gateway-related configuration and state.
        /// </summary>
        [Input("gatewayConfig")]
        public Input<Inputs.GatewayConfigArgs>? GatewayConfig { get; set; }

        /// <summary>
        /// The user-defined device identifier. The device ID must be unique within a device registry.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.
        /// </summary>
        [Input("logLevel")]
        public Input<Pulumi.GoogleNative.CloudIoT.V1.DeviceLogLevel>? LogLevel { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// The metadata key-value pairs assigned to the device. This metadata is not interpreted or indexed by Cloud IoT Core. It can be used to add contextual information for the device. Keys must conform to the regular expression a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings. Each value must be less than or equal to 32 KB in size. The total size of all keys and values must be less than 256 KB, and the maximum number of key-value pairs is 500.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        public DeviceArgs()
        {
        }
    }
}
