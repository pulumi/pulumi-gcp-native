// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Logging.V2
{
    public static class GetBucketView
    {
        /// <summary>
        /// Gets a view on a log bucket.
        /// </summary>
        public static Task<GetBucketViewResult> InvokeAsync(GetBucketViewArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBucketViewResult>("google-native:logging/v2:getBucketView", args ?? new GetBucketViewArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a view on a log bucket.
        /// </summary>
        public static Output<GetBucketViewResult> Invoke(GetBucketViewInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBucketViewResult>("google-native:logging/v2:getBucketView", args ?? new GetBucketViewInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBucketViewArgs : global::Pulumi.InvokeArgs
    {
        [Input("bucketId", required: true)]
        public string BucketId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("viewId", required: true)]
        public string ViewId { get; set; } = null!;

        public GetBucketViewArgs()
        {
        }
        public static new GetBucketViewArgs Empty => new GetBucketViewArgs();
    }

    public sealed class GetBucketViewInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("bucketId", required: true)]
        public Input<string> BucketId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("viewId", required: true)]
        public Input<string> ViewId { get; set; } = null!;

        public GetBucketViewInvokeArgs()
        {
        }
        public static new GetBucketViewInvokeArgs Empty => new GetBucketViewInvokeArgs();
    }


    [OutputType]
    public sealed class GetBucketViewResult
    {
        /// <summary>
        /// The creation timestamp of the view.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. Describes this view.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. Filter that restricts which log entries in a bucket are visible in this view.Filters must be logical conjunctions that use the AND operator, and they can use any of the following qualifiers: SOURCE(), which specifies a project, folder, organization, or billing account of origin. resource.type, which specifies the resource type. LOG_ID(), which identifies the log.They can also use the negations of these qualifiers with the NOT operator.For example:SOURCE("projects/myproject") AND resource.type = "gce_instance" AND NOT LOG_ID("stdout")
        /// </summary>
        public readonly string Filter;
        /// <summary>
        /// The resource name of the view.For example:projects/my-project/locations/global/buckets/my-bucket/views/my-view
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The last update timestamp of the view.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetBucketViewResult(
            string createTime,

            string description,

            string filter,

            string name,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            Filter = filter;
            Name = name;
            UpdateTime = updateTime;
        }
    }
}
