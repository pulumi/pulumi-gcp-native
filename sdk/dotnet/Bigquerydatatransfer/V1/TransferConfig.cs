// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Bigquerydatatransfer.V1
{
    /// <summary>
    /// Creates a new data transfer configuration.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:bigquerydatatransfer/v1:TransferConfig")]
    public partial class TransferConfig : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a TransferConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TransferConfig(string name, TransferConfigArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:bigquerydatatransfer/v1:TransferConfig", name, args ?? new TransferConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TransferConfig(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:bigquerydatatransfer/v1:TransferConfig", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TransferConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TransferConfig Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new TransferConfig(name, id, options);
        }
    }

    public sealed class TransferConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
        /// </summary>
        [Input("dataRefreshWindowDays")]
        public Input<int>? DataRefreshWindowDays { get; set; }

        /// <summary>
        /// Data source id. Cannot be changed once data transfer is created.
        /// </summary>
        [Input("dataSourceId")]
        public Input<string>? DataSourceId { get; set; }

        /// <summary>
        /// Output only. Region in which BigQuery dataset is located.
        /// </summary>
        [Input("datasetRegion")]
        public Input<string>? DatasetRegion { get; set; }

        /// <summary>
        /// The BigQuery target dataset id.
        /// </summary>
        [Input("destinationDatasetId")]
        public Input<string>? DestinationDatasetId { get; set; }

        /// <summary>
        /// Is this config disabled. When set to true, no runs are scheduled for a given transfer.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// User specified display name for the data transfer.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Email notifications will be sent according to these preferences to the email address of the user who owns this transfer config.
        /// </summary>
        [Input("emailPreferences")]
        public Input<Inputs.EmailPreferencesArgs>? EmailPreferences { get; set; }

        /// <summary>
        /// The resource name of the transfer config. Transfer config names have the form `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`. Where `config_id` is usually a uuid, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Output only. Next time when data transfer will run.
        /// </summary>
        [Input("nextRunTime")]
        public Input<string>? NextRunTime { get; set; }

        /// <summary>
        /// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish.
        /// </summary>
        [Input("notificationPubsubTopic")]
        public Input<string>? NotificationPubsubTopic { get; set; }

        [Input("params")]
        private InputMap<string>? _params;

        /// <summary>
        /// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
        /// </summary>
        public InputMap<string> Params
        {
            get => _params ?? (_params = new InputMap<string>());
            set => _params = value;
        }

        [Input("projectsId", required: true)]
        public Input<string> ProjectsId { get; set; } = null!;

        /// <summary>
        /// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: the granularity should be at least 8 hours, or less frequent.
        /// </summary>
        [Input("schedule")]
        public Input<string>? Schedule { get; set; }

        /// <summary>
        /// Options customizing the data transfer schedule.
        /// </summary>
        [Input("scheduleOptions")]
        public Input<Inputs.ScheduleOptionsArgs>? ScheduleOptions { get; set; }

        /// <summary>
        /// Output only. State of the most recently updated transfer run.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("transferConfigsId", required: true)]
        public Input<string> TransferConfigsId { get; set; } = null!;

        /// <summary>
        /// Output only. Data transfer modification time. Ignored by server on input.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Deprecated. Unique ID of the user on whose behalf transfer is done.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public TransferConfigArgs()
        {
        }
    }
}
