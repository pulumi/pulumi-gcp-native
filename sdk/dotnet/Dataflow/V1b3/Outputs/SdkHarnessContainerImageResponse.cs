// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataflow.V1b3.Outputs
{

    /// <summary>
    /// Defines a SDK harness container for executing Dataflow pipelines.
    /// </summary>
    [OutputType]
    public sealed class SdkHarnessContainerImageResponse
    {
        /// <summary>
        /// The set of capabilities enumerated in the above Environment proto. See also https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/beam_runner_api.proto
        /// </summary>
        public readonly ImmutableArray<string> Capabilities;
        /// <summary>
        /// A docker container image that resides in Google Container Registry.
        /// </summary>
        public readonly string ContainerImage;
        /// <summary>
        /// Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
        /// </summary>
        public readonly string EnvironmentId;
        /// <summary>
        /// If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
        /// </summary>
        public readonly bool UseSingleCorePerContainer;

        [OutputConstructor]
        private SdkHarnessContainerImageResponse(
            ImmutableArray<string> capabilities,

            string containerImage,

            string environmentId,

            bool useSingleCorePerContainer)
        {
            Capabilities = capabilities;
            ContainerImage = containerImage;
            EnvironmentId = environmentId;
            UseSingleCorePerContainer = useSingleCorePerContainer;
        }
    }
}
