// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Dataflow.V1b3
{
    /// <summary>
    /// The algorithm to use for autoscaling.
    /// </summary>
    [EnumType]
    public readonly struct AutoscalingSettingsAlgorithm : IEquatable<AutoscalingSettingsAlgorithm>
    {
        private readonly string _value;

        private AutoscalingSettingsAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The algorithm is unknown, or unspecified.
        /// </summary>
        public static AutoscalingSettingsAlgorithm AutoscalingAlgorithmUnknown { get; } = new AutoscalingSettingsAlgorithm("AUTOSCALING_ALGORITHM_UNKNOWN");
        /// <summary>
        /// Disable autoscaling.
        /// </summary>
        public static AutoscalingSettingsAlgorithm AutoscalingAlgorithmNone { get; } = new AutoscalingSettingsAlgorithm("AUTOSCALING_ALGORITHM_NONE");
        /// <summary>
        /// Increase worker count over time to reduce job execution time.
        /// </summary>
        public static AutoscalingSettingsAlgorithm AutoscalingAlgorithmBasic { get; } = new AutoscalingSettingsAlgorithm("AUTOSCALING_ALGORITHM_BASIC");

        public static bool operator ==(AutoscalingSettingsAlgorithm left, AutoscalingSettingsAlgorithm right) => left.Equals(right);
        public static bool operator !=(AutoscalingSettingsAlgorithm left, AutoscalingSettingsAlgorithm right) => !left.Equals(right);

        public static explicit operator string(AutoscalingSettingsAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoscalingSettingsAlgorithm other && Equals(other);
        public bool Equals(AutoscalingSettingsAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Which Flexible Resource Scheduling mode to run in.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentFlexResourceSchedulingGoal : IEquatable<EnvironmentFlexResourceSchedulingGoal>
    {
        private readonly string _value;

        private EnvironmentFlexResourceSchedulingGoal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Run in the default mode.
        /// </summary>
        public static EnvironmentFlexResourceSchedulingGoal FlexrsUnspecified { get; } = new EnvironmentFlexResourceSchedulingGoal("FLEXRS_UNSPECIFIED");
        /// <summary>
        /// Optimize for lower execution time.
        /// </summary>
        public static EnvironmentFlexResourceSchedulingGoal FlexrsSpeedOptimized { get; } = new EnvironmentFlexResourceSchedulingGoal("FLEXRS_SPEED_OPTIMIZED");
        /// <summary>
        /// Optimize for lower cost.
        /// </summary>
        public static EnvironmentFlexResourceSchedulingGoal FlexrsCostOptimized { get; } = new EnvironmentFlexResourceSchedulingGoal("FLEXRS_COST_OPTIMIZED");

        public static bool operator ==(EnvironmentFlexResourceSchedulingGoal left, EnvironmentFlexResourceSchedulingGoal right) => left.Equals(right);
        public static bool operator !=(EnvironmentFlexResourceSchedulingGoal left, EnvironmentFlexResourceSchedulingGoal right) => !left.Equals(right);

        public static explicit operator string(EnvironmentFlexResourceSchedulingGoal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentFlexResourceSchedulingGoal other && Equals(other);
        public bool Equals(EnvironmentFlexResourceSchedulingGoal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Executions stage states allow the same set of values as JobState.
    /// </summary>
    [EnumType]
    public readonly struct ExecutionStageStateExecutionStageState : IEquatable<ExecutionStageStateExecutionStageState>
    {
        private readonly string _value;

        private ExecutionStageStateExecutionStageState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The job's run state isn't specified.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateUnknown { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_UNKNOWN");
        /// <summary>
        /// `JOB_STATE_STOPPED` indicates that the job has not yet started to run.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateStopped { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_STOPPED");
        /// <summary>
        /// `JOB_STATE_RUNNING` indicates that the job is currently running.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateRunning { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_RUNNING");
        /// <summary>
        /// `JOB_STATE_DONE` indicates that the job has successfully completed. This is a terminal job state. This state may be set by the Cloud Dataflow service, as a transition from `JOB_STATE_RUNNING`. It may also be set via a Cloud Dataflow `UpdateJob` call, if the job has not yet reached a terminal state.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateDone { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_DONE");
        /// <summary>
        /// `JOB_STATE_FAILED` indicates that the job has failed. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateFailed { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_FAILED");
        /// <summary>
        /// `JOB_STATE_CANCELLED` indicates that the job has been explicitly cancelled. This is a terminal job state. This state may only be set via a Cloud Dataflow `UpdateJob` call, and only if the job has not yet reached another terminal state.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateCancelled { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_CANCELLED");
        /// <summary>
        /// `JOB_STATE_UPDATED` indicates that the job was successfully updated, meaning that this job was stopped and another job was started, inheriting state from this one. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateUpdated { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_UPDATED");
        /// <summary>
        /// `JOB_STATE_DRAINING` indicates that the job is in the process of draining. A draining job has stopped pulling from its input sources and is processing any data that remains in-flight. This state may be set via a Cloud Dataflow `UpdateJob` call, but only as a transition from `JOB_STATE_RUNNING`. Jobs that are draining may only transition to `JOB_STATE_DRAINED`, `JOB_STATE_CANCELLED`, or `JOB_STATE_FAILED`.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateDraining { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_DRAINING");
        /// <summary>
        /// `JOB_STATE_DRAINED` indicates that the job has been drained. A drained job terminated by stopping pulling from its input sources and processing any data that remained in-flight when draining was requested. This state is a terminal state, may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_DRAINING`.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateDrained { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_DRAINED");
        /// <summary>
        /// `JOB_STATE_PENDING` indicates that the job has been created but is not yet running. Jobs that are pending may only transition to `JOB_STATE_RUNNING`, or `JOB_STATE_FAILED`.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStatePending { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_PENDING");
        /// <summary>
        /// `JOB_STATE_CANCELLING` indicates that the job has been explicitly cancelled and is in the process of stopping. Jobs that are cancelling may only transition to `JOB_STATE_CANCELLED` or `JOB_STATE_FAILED`.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateCancelling { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_CANCELLING");
        /// <summary>
        /// `JOB_STATE_QUEUED` indicates that the job has been created but is being delayed until launch. Jobs that are queued may only transition to `JOB_STATE_PENDING` or `JOB_STATE_CANCELLED`.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateQueued { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_QUEUED");
        /// <summary>
        /// `JOB_STATE_RESOURCE_CLEANING_UP` indicates that the batch job's associated resources are currently being cleaned up after a successful run. Currently, this is an opt-in feature, please reach out to Cloud support team if you are interested.
        /// </summary>
        public static ExecutionStageStateExecutionStageState JobStateResourceCleaningUp { get; } = new ExecutionStageStateExecutionStageState("JOB_STATE_RESOURCE_CLEANING_UP");

        public static bool operator ==(ExecutionStageStateExecutionStageState left, ExecutionStageStateExecutionStageState right) => left.Equals(right);
        public static bool operator !=(ExecutionStageStateExecutionStageState left, ExecutionStageStateExecutionStageState right) => !left.Equals(right);

        public static explicit operator string(ExecutionStageStateExecutionStageState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExecutionStageStateExecutionStageState other && Equals(other);
        public bool Equals(ExecutionStageStateExecutionStageState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of transform this stage is executing.
    /// </summary>
    [EnumType]
    public readonly struct ExecutionStageSummaryKind : IEquatable<ExecutionStageSummaryKind>
    {
        private readonly string _value;

        private ExecutionStageSummaryKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unrecognized transform type.
        /// </summary>
        public static ExecutionStageSummaryKind UnknownKind { get; } = new ExecutionStageSummaryKind("UNKNOWN_KIND");
        /// <summary>
        /// ParDo transform.
        /// </summary>
        public static ExecutionStageSummaryKind ParDoKind { get; } = new ExecutionStageSummaryKind("PAR_DO_KIND");
        /// <summary>
        /// Group By Key transform.
        /// </summary>
        public static ExecutionStageSummaryKind GroupByKeyKind { get; } = new ExecutionStageSummaryKind("GROUP_BY_KEY_KIND");
        /// <summary>
        /// Flatten transform.
        /// </summary>
        public static ExecutionStageSummaryKind FlattenKind { get; } = new ExecutionStageSummaryKind("FLATTEN_KIND");
        /// <summary>
        /// Read transform.
        /// </summary>
        public static ExecutionStageSummaryKind ReadKind { get; } = new ExecutionStageSummaryKind("READ_KIND");
        /// <summary>
        /// Write transform.
        /// </summary>
        public static ExecutionStageSummaryKind WriteKind { get; } = new ExecutionStageSummaryKind("WRITE_KIND");
        /// <summary>
        /// Constructs from a constant value, such as with Create.of.
        /// </summary>
        public static ExecutionStageSummaryKind ConstantKind { get; } = new ExecutionStageSummaryKind("CONSTANT_KIND");
        /// <summary>
        /// Creates a Singleton view of a collection.
        /// </summary>
        public static ExecutionStageSummaryKind SingletonKind { get; } = new ExecutionStageSummaryKind("SINGLETON_KIND");
        /// <summary>
        /// Opening or closing a shuffle session, often as part of a GroupByKey.
        /// </summary>
        public static ExecutionStageSummaryKind ShuffleKind { get; } = new ExecutionStageSummaryKind("SHUFFLE_KIND");

        public static bool operator ==(ExecutionStageSummaryKind left, ExecutionStageSummaryKind right) => left.Equals(right);
        public static bool operator !=(ExecutionStageSummaryKind left, ExecutionStageSummaryKind right) => !left.Equals(right);

        public static explicit operator string(ExecutionStageSummaryKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExecutionStageSummaryKind other && Equals(other);
        public bool Equals(ExecutionStageSummaryKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.
    /// </summary>
    [EnumType]
    public readonly struct JobCurrentState : IEquatable<JobCurrentState>
    {
        private readonly string _value;

        private JobCurrentState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The job's run state isn't specified.
        /// </summary>
        public static JobCurrentState JobStateUnknown { get; } = new JobCurrentState("JOB_STATE_UNKNOWN");
        /// <summary>
        /// `JOB_STATE_STOPPED` indicates that the job has not yet started to run.
        /// </summary>
        public static JobCurrentState JobStateStopped { get; } = new JobCurrentState("JOB_STATE_STOPPED");
        /// <summary>
        /// `JOB_STATE_RUNNING` indicates that the job is currently running.
        /// </summary>
        public static JobCurrentState JobStateRunning { get; } = new JobCurrentState("JOB_STATE_RUNNING");
        /// <summary>
        /// `JOB_STATE_DONE` indicates that the job has successfully completed. This is a terminal job state. This state may be set by the Cloud Dataflow service, as a transition from `JOB_STATE_RUNNING`. It may also be set via a Cloud Dataflow `UpdateJob` call, if the job has not yet reached a terminal state.
        /// </summary>
        public static JobCurrentState JobStateDone { get; } = new JobCurrentState("JOB_STATE_DONE");
        /// <summary>
        /// `JOB_STATE_FAILED` indicates that the job has failed. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
        /// </summary>
        public static JobCurrentState JobStateFailed { get; } = new JobCurrentState("JOB_STATE_FAILED");
        /// <summary>
        /// `JOB_STATE_CANCELLED` indicates that the job has been explicitly cancelled. This is a terminal job state. This state may only be set via a Cloud Dataflow `UpdateJob` call, and only if the job has not yet reached another terminal state.
        /// </summary>
        public static JobCurrentState JobStateCancelled { get; } = new JobCurrentState("JOB_STATE_CANCELLED");
        /// <summary>
        /// `JOB_STATE_UPDATED` indicates that the job was successfully updated, meaning that this job was stopped and another job was started, inheriting state from this one. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
        /// </summary>
        public static JobCurrentState JobStateUpdated { get; } = new JobCurrentState("JOB_STATE_UPDATED");
        /// <summary>
        /// `JOB_STATE_DRAINING` indicates that the job is in the process of draining. A draining job has stopped pulling from its input sources and is processing any data that remains in-flight. This state may be set via a Cloud Dataflow `UpdateJob` call, but only as a transition from `JOB_STATE_RUNNING`. Jobs that are draining may only transition to `JOB_STATE_DRAINED`, `JOB_STATE_CANCELLED`, or `JOB_STATE_FAILED`.
        /// </summary>
        public static JobCurrentState JobStateDraining { get; } = new JobCurrentState("JOB_STATE_DRAINING");
        /// <summary>
        /// `JOB_STATE_DRAINED` indicates that the job has been drained. A drained job terminated by stopping pulling from its input sources and processing any data that remained in-flight when draining was requested. This state is a terminal state, may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_DRAINING`.
        /// </summary>
        public static JobCurrentState JobStateDrained { get; } = new JobCurrentState("JOB_STATE_DRAINED");
        /// <summary>
        /// `JOB_STATE_PENDING` indicates that the job has been created but is not yet running. Jobs that are pending may only transition to `JOB_STATE_RUNNING`, or `JOB_STATE_FAILED`.
        /// </summary>
        public static JobCurrentState JobStatePending { get; } = new JobCurrentState("JOB_STATE_PENDING");
        /// <summary>
        /// `JOB_STATE_CANCELLING` indicates that the job has been explicitly cancelled and is in the process of stopping. Jobs that are cancelling may only transition to `JOB_STATE_CANCELLED` or `JOB_STATE_FAILED`.
        /// </summary>
        public static JobCurrentState JobStateCancelling { get; } = new JobCurrentState("JOB_STATE_CANCELLING");
        /// <summary>
        /// `JOB_STATE_QUEUED` indicates that the job has been created but is being delayed until launch. Jobs that are queued may only transition to `JOB_STATE_PENDING` or `JOB_STATE_CANCELLED`.
        /// </summary>
        public static JobCurrentState JobStateQueued { get; } = new JobCurrentState("JOB_STATE_QUEUED");
        /// <summary>
        /// `JOB_STATE_RESOURCE_CLEANING_UP` indicates that the batch job's associated resources are currently being cleaned up after a successful run. Currently, this is an opt-in feature, please reach out to Cloud support team if you are interested.
        /// </summary>
        public static JobCurrentState JobStateResourceCleaningUp { get; } = new JobCurrentState("JOB_STATE_RESOURCE_CLEANING_UP");

        public static bool operator ==(JobCurrentState left, JobCurrentState right) => left.Equals(right);
        public static bool operator !=(JobCurrentState left, JobCurrentState right) => !left.Equals(right);

        public static explicit operator string(JobCurrentState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobCurrentState other && Equals(other);
        public bool Equals(JobCurrentState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The job's requested state. `UpdateJob` may be used to switch between the `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING` states, by setting requested_state. `UpdateJob` may also be used to directly set a job's requested state to `JOB_STATE_CANCELLED` or `JOB_STATE_DONE`, irrevocably terminating the job if it has not already reached a terminal state.
    /// </summary>
    [EnumType]
    public readonly struct JobRequestedState : IEquatable<JobRequestedState>
    {
        private readonly string _value;

        private JobRequestedState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The job's run state isn't specified.
        /// </summary>
        public static JobRequestedState JobStateUnknown { get; } = new JobRequestedState("JOB_STATE_UNKNOWN");
        /// <summary>
        /// `JOB_STATE_STOPPED` indicates that the job has not yet started to run.
        /// </summary>
        public static JobRequestedState JobStateStopped { get; } = new JobRequestedState("JOB_STATE_STOPPED");
        /// <summary>
        /// `JOB_STATE_RUNNING` indicates that the job is currently running.
        /// </summary>
        public static JobRequestedState JobStateRunning { get; } = new JobRequestedState("JOB_STATE_RUNNING");
        /// <summary>
        /// `JOB_STATE_DONE` indicates that the job has successfully completed. This is a terminal job state. This state may be set by the Cloud Dataflow service, as a transition from `JOB_STATE_RUNNING`. It may also be set via a Cloud Dataflow `UpdateJob` call, if the job has not yet reached a terminal state.
        /// </summary>
        public static JobRequestedState JobStateDone { get; } = new JobRequestedState("JOB_STATE_DONE");
        /// <summary>
        /// `JOB_STATE_FAILED` indicates that the job has failed. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
        /// </summary>
        public static JobRequestedState JobStateFailed { get; } = new JobRequestedState("JOB_STATE_FAILED");
        /// <summary>
        /// `JOB_STATE_CANCELLED` indicates that the job has been explicitly cancelled. This is a terminal job state. This state may only be set via a Cloud Dataflow `UpdateJob` call, and only if the job has not yet reached another terminal state.
        /// </summary>
        public static JobRequestedState JobStateCancelled { get; } = new JobRequestedState("JOB_STATE_CANCELLED");
        /// <summary>
        /// `JOB_STATE_UPDATED` indicates that the job was successfully updated, meaning that this job was stopped and another job was started, inheriting state from this one. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
        /// </summary>
        public static JobRequestedState JobStateUpdated { get; } = new JobRequestedState("JOB_STATE_UPDATED");
        /// <summary>
        /// `JOB_STATE_DRAINING` indicates that the job is in the process of draining. A draining job has stopped pulling from its input sources and is processing any data that remains in-flight. This state may be set via a Cloud Dataflow `UpdateJob` call, but only as a transition from `JOB_STATE_RUNNING`. Jobs that are draining may only transition to `JOB_STATE_DRAINED`, `JOB_STATE_CANCELLED`, or `JOB_STATE_FAILED`.
        /// </summary>
        public static JobRequestedState JobStateDraining { get; } = new JobRequestedState("JOB_STATE_DRAINING");
        /// <summary>
        /// `JOB_STATE_DRAINED` indicates that the job has been drained. A drained job terminated by stopping pulling from its input sources and processing any data that remained in-flight when draining was requested. This state is a terminal state, may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_DRAINING`.
        /// </summary>
        public static JobRequestedState JobStateDrained { get; } = new JobRequestedState("JOB_STATE_DRAINED");
        /// <summary>
        /// `JOB_STATE_PENDING` indicates that the job has been created but is not yet running. Jobs that are pending may only transition to `JOB_STATE_RUNNING`, or `JOB_STATE_FAILED`.
        /// </summary>
        public static JobRequestedState JobStatePending { get; } = new JobRequestedState("JOB_STATE_PENDING");
        /// <summary>
        /// `JOB_STATE_CANCELLING` indicates that the job has been explicitly cancelled and is in the process of stopping. Jobs that are cancelling may only transition to `JOB_STATE_CANCELLED` or `JOB_STATE_FAILED`.
        /// </summary>
        public static JobRequestedState JobStateCancelling { get; } = new JobRequestedState("JOB_STATE_CANCELLING");
        /// <summary>
        /// `JOB_STATE_QUEUED` indicates that the job has been created but is being delayed until launch. Jobs that are queued may only transition to `JOB_STATE_PENDING` or `JOB_STATE_CANCELLED`.
        /// </summary>
        public static JobRequestedState JobStateQueued { get; } = new JobRequestedState("JOB_STATE_QUEUED");
        /// <summary>
        /// `JOB_STATE_RESOURCE_CLEANING_UP` indicates that the batch job's associated resources are currently being cleaned up after a successful run. Currently, this is an opt-in feature, please reach out to Cloud support team if you are interested.
        /// </summary>
        public static JobRequestedState JobStateResourceCleaningUp { get; } = new JobRequestedState("JOB_STATE_RESOURCE_CLEANING_UP");

        public static bool operator ==(JobRequestedState left, JobRequestedState right) => left.Equals(right);
        public static bool operator !=(JobRequestedState left, JobRequestedState right) => !left.Equals(right);

        public static explicit operator string(JobRequestedState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobRequestedState other && Equals(other);
        public bool Equals(JobRequestedState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of Cloud Dataflow job.
    /// </summary>
    [EnumType]
    public readonly struct JobType : IEquatable<JobType>
    {
        private readonly string _value;

        private JobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The type of the job is unspecified, or unknown.
        /// </summary>
        public static JobType JobTypeUnknown { get; } = new JobType("JOB_TYPE_UNKNOWN");
        /// <summary>
        /// A batch job with a well-defined end point: data is read, data is processed, data is written, and the job is done.
        /// </summary>
        public static JobType JobTypeBatch { get; } = new JobType("JOB_TYPE_BATCH");
        /// <summary>
        /// A continuously streaming job with no end: data is read, processed, and written continuously.
        /// </summary>
        public static JobType JobTypeStreaming { get; } = new JobType("JOB_TYPE_STREAMING");

        public static bool operator ==(JobType left, JobType right) => left.Equals(right);
        public static bool operator !=(JobType left, JobType right) => !left.Equals(right);

        public static explicit operator string(JobType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobType other && Equals(other);
        public bool Equals(JobType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Configuration for VM IPs.
    /// </summary>
    [EnumType]
    public readonly struct RuntimeEnvironmentIpConfiguration : IEquatable<RuntimeEnvironmentIpConfiguration>
    {
        private readonly string _value;

        private RuntimeEnvironmentIpConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The configuration is unknown, or unspecified.
        /// </summary>
        public static RuntimeEnvironmentIpConfiguration WorkerIpUnspecified { get; } = new RuntimeEnvironmentIpConfiguration("WORKER_IP_UNSPECIFIED");
        /// <summary>
        /// Workers should have public IP addresses.
        /// </summary>
        public static RuntimeEnvironmentIpConfiguration WorkerIpPublic { get; } = new RuntimeEnvironmentIpConfiguration("WORKER_IP_PUBLIC");
        /// <summary>
        /// Workers should have private IP addresses.
        /// </summary>
        public static RuntimeEnvironmentIpConfiguration WorkerIpPrivate { get; } = new RuntimeEnvironmentIpConfiguration("WORKER_IP_PRIVATE");

        public static bool operator ==(RuntimeEnvironmentIpConfiguration left, RuntimeEnvironmentIpConfiguration right) => left.Equals(right);
        public static bool operator !=(RuntimeEnvironmentIpConfiguration left, RuntimeEnvironmentIpConfiguration right) => !left.Equals(right);

        public static explicit operator string(RuntimeEnvironmentIpConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuntimeEnvironmentIpConfiguration other && Equals(other);
        public bool Equals(RuntimeEnvironmentIpConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The support status for this SDK version.
    /// </summary>
    [EnumType]
    public readonly struct SdkVersionSdkSupportStatus : IEquatable<SdkVersionSdkSupportStatus>
    {
        private readonly string _value;

        private SdkVersionSdkSupportStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Cloud Dataflow is unaware of this version.
        /// </summary>
        public static SdkVersionSdkSupportStatus Unknown { get; } = new SdkVersionSdkSupportStatus("UNKNOWN");
        /// <summary>
        /// This is a known version of an SDK, and is supported.
        /// </summary>
        public static SdkVersionSdkSupportStatus Supported { get; } = new SdkVersionSdkSupportStatus("SUPPORTED");
        /// <summary>
        /// A newer version of the SDK family exists, and an update is recommended.
        /// </summary>
        public static SdkVersionSdkSupportStatus Stale { get; } = new SdkVersionSdkSupportStatus("STALE");
        /// <summary>
        /// This version of the SDK is deprecated and will eventually be unsupported.
        /// </summary>
        public static SdkVersionSdkSupportStatus Deprecated { get; } = new SdkVersionSdkSupportStatus("DEPRECATED");
        /// <summary>
        /// Support for this SDK version has ended and it should no longer be used.
        /// </summary>
        public static SdkVersionSdkSupportStatus Unsupported { get; } = new SdkVersionSdkSupportStatus("UNSUPPORTED");

        public static bool operator ==(SdkVersionSdkSupportStatus left, SdkVersionSdkSupportStatus right) => left.Equals(right);
        public static bool operator !=(SdkVersionSdkSupportStatus left, SdkVersionSdkSupportStatus right) => !left.Equals(right);

        public static explicit operator string(SdkVersionSdkSupportStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SdkVersionSdkSupportStatus other && Equals(other);
        public bool Equals(SdkVersionSdkSupportStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of transform.
    /// </summary>
    [EnumType]
    public readonly struct TransformSummaryKind : IEquatable<TransformSummaryKind>
    {
        private readonly string _value;

        private TransformSummaryKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unrecognized transform type.
        /// </summary>
        public static TransformSummaryKind UnknownKind { get; } = new TransformSummaryKind("UNKNOWN_KIND");
        /// <summary>
        /// ParDo transform.
        /// </summary>
        public static TransformSummaryKind ParDoKind { get; } = new TransformSummaryKind("PAR_DO_KIND");
        /// <summary>
        /// Group By Key transform.
        /// </summary>
        public static TransformSummaryKind GroupByKeyKind { get; } = new TransformSummaryKind("GROUP_BY_KEY_KIND");
        /// <summary>
        /// Flatten transform.
        /// </summary>
        public static TransformSummaryKind FlattenKind { get; } = new TransformSummaryKind("FLATTEN_KIND");
        /// <summary>
        /// Read transform.
        /// </summary>
        public static TransformSummaryKind ReadKind { get; } = new TransformSummaryKind("READ_KIND");
        /// <summary>
        /// Write transform.
        /// </summary>
        public static TransformSummaryKind WriteKind { get; } = new TransformSummaryKind("WRITE_KIND");
        /// <summary>
        /// Constructs from a constant value, such as with Create.of.
        /// </summary>
        public static TransformSummaryKind ConstantKind { get; } = new TransformSummaryKind("CONSTANT_KIND");
        /// <summary>
        /// Creates a Singleton view of a collection.
        /// </summary>
        public static TransformSummaryKind SingletonKind { get; } = new TransformSummaryKind("SINGLETON_KIND");
        /// <summary>
        /// Opening or closing a shuffle session, often as part of a GroupByKey.
        /// </summary>
        public static TransformSummaryKind ShuffleKind { get; } = new TransformSummaryKind("SHUFFLE_KIND");

        public static bool operator ==(TransformSummaryKind left, TransformSummaryKind right) => left.Equals(right);
        public static bool operator !=(TransformSummaryKind left, TransformSummaryKind right) => !left.Equals(right);

        public static explicit operator string(TransformSummaryKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransformSummaryKind other && Equals(other);
        public bool Equals(TransformSummaryKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
    /// </summary>
    [EnumType]
    public readonly struct WorkerPoolDefaultPackageSet : IEquatable<WorkerPoolDefaultPackageSet>
    {
        private readonly string _value;

        private WorkerPoolDefaultPackageSet(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The default set of packages to stage is unknown, or unspecified.
        /// </summary>
        public static WorkerPoolDefaultPackageSet DefaultPackageSetUnknown { get; } = new WorkerPoolDefaultPackageSet("DEFAULT_PACKAGE_SET_UNKNOWN");
        /// <summary>
        /// Indicates that no packages should be staged at the worker unless explicitly specified by the job.
        /// </summary>
        public static WorkerPoolDefaultPackageSet DefaultPackageSetNone { get; } = new WorkerPoolDefaultPackageSet("DEFAULT_PACKAGE_SET_NONE");
        /// <summary>
        /// Stage packages typically useful to workers written in Java.
        /// </summary>
        public static WorkerPoolDefaultPackageSet DefaultPackageSetJava { get; } = new WorkerPoolDefaultPackageSet("DEFAULT_PACKAGE_SET_JAVA");
        /// <summary>
        /// Stage packages typically useful to workers written in Python.
        /// </summary>
        public static WorkerPoolDefaultPackageSet DefaultPackageSetPython { get; } = new WorkerPoolDefaultPackageSet("DEFAULT_PACKAGE_SET_PYTHON");

        public static bool operator ==(WorkerPoolDefaultPackageSet left, WorkerPoolDefaultPackageSet right) => left.Equals(right);
        public static bool operator !=(WorkerPoolDefaultPackageSet left, WorkerPoolDefaultPackageSet right) => !left.Equals(right);

        public static explicit operator string(WorkerPoolDefaultPackageSet value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkerPoolDefaultPackageSet other && Equals(other);
        public bool Equals(WorkerPoolDefaultPackageSet other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configuration for VM IPs.
    /// </summary>
    [EnumType]
    public readonly struct WorkerPoolIpConfiguration : IEquatable<WorkerPoolIpConfiguration>
    {
        private readonly string _value;

        private WorkerPoolIpConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The configuration is unknown, or unspecified.
        /// </summary>
        public static WorkerPoolIpConfiguration WorkerIpUnspecified { get; } = new WorkerPoolIpConfiguration("WORKER_IP_UNSPECIFIED");
        /// <summary>
        /// Workers should have public IP addresses.
        /// </summary>
        public static WorkerPoolIpConfiguration WorkerIpPublic { get; } = new WorkerPoolIpConfiguration("WORKER_IP_PUBLIC");
        /// <summary>
        /// Workers should have private IP addresses.
        /// </summary>
        public static WorkerPoolIpConfiguration WorkerIpPrivate { get; } = new WorkerPoolIpConfiguration("WORKER_IP_PRIVATE");

        public static bool operator ==(WorkerPoolIpConfiguration left, WorkerPoolIpConfiguration right) => left.Equals(right);
        public static bool operator !=(WorkerPoolIpConfiguration left, WorkerPoolIpConfiguration right) => !left.Equals(right);

        public static explicit operator string(WorkerPoolIpConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkerPoolIpConfiguration other && Equals(other);
        public bool Equals(WorkerPoolIpConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
    /// </summary>
    [EnumType]
    public readonly struct WorkerPoolTeardownPolicy : IEquatable<WorkerPoolTeardownPolicy>
    {
        private readonly string _value;

        private WorkerPoolTeardownPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The teardown policy isn't specified, or is unknown.
        /// </summary>
        public static WorkerPoolTeardownPolicy TeardownPolicyUnknown { get; } = new WorkerPoolTeardownPolicy("TEARDOWN_POLICY_UNKNOWN");
        /// <summary>
        /// Always teardown the resource.
        /// </summary>
        public static WorkerPoolTeardownPolicy TeardownAlways { get; } = new WorkerPoolTeardownPolicy("TEARDOWN_ALWAYS");
        /// <summary>
        /// Teardown the resource on success. This is useful for debugging failures.
        /// </summary>
        public static WorkerPoolTeardownPolicy TeardownOnSuccess { get; } = new WorkerPoolTeardownPolicy("TEARDOWN_ON_SUCCESS");
        /// <summary>
        /// Never teardown the resource. This is useful for debugging and development.
        /// </summary>
        public static WorkerPoolTeardownPolicy TeardownNever { get; } = new WorkerPoolTeardownPolicy("TEARDOWN_NEVER");

        public static bool operator ==(WorkerPoolTeardownPolicy left, WorkerPoolTeardownPolicy right) => left.Equals(right);
        public static bool operator !=(WorkerPoolTeardownPolicy left, WorkerPoolTeardownPolicy right) => !left.Equals(right);

        public static explicit operator string(WorkerPoolTeardownPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkerPoolTeardownPolicy other && Equals(other);
        public bool Equals(WorkerPoolTeardownPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
