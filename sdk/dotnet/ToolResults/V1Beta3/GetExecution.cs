// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.GoogleNative.ToolResults.V1Beta3
{
    public static class GetExecution
    {
        /// <summary>
        /// Gets an Execution. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Execution does not exist
        /// </summary>
        public static Task<GetExecutionResult> InvokeAsync(GetExecutionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetExecutionResult>("google-native:toolresults/v1beta3:getExecution", args ?? new GetExecutionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an Execution. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Execution does not exist
        /// </summary>
        public static Output<GetExecutionResult> Invoke(GetExecutionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetExecutionResult>("google-native:toolresults/v1beta3:getExecution", args ?? new GetExecutionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExecutionArgs : Pulumi.InvokeArgs
    {
        [Input("executionId", required: true)]
        public string ExecutionId { get; set; } = null!;

        [Input("historyId", required: true)]
        public string HistoryId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetExecutionArgs()
        {
        }
    }

    public sealed class GetExecutionInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("executionId", required: true)]
        public Input<string> ExecutionId { get; set; } = null!;

        [Input("historyId", required: true)]
        public Input<string> HistoryId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetExecutionInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetExecutionResult
    {
        /// <summary>
        /// The time when the Execution status transitioned to COMPLETE. This value will be set automatically when state transitions to COMPLETE. - In response: set if the execution state is COMPLETE. - In create/update request: never set
        /// </summary>
        public readonly Outputs.TimestampResponse CompletionTime;
        /// <summary>
        /// The time when the Execution was created. This value will be set automatically when CreateExecution is called. - In response: always set - In create/update request: never set
        /// </summary>
        public readonly Outputs.TimestampResponse CreationTime;
        /// <summary>
        /// The dimensions along which different steps in this execution may vary. This must remain fixed over the life of the execution. Returns INVALID_ARGUMENT if this field is set in an update request. Returns INVALID_ARGUMENT if the same name occurs in more than one dimension_definition. Returns INVALID_ARGUMENT if the size of the list is over 100. - In response: present if set by create - In create request: optional - In update request: never set
        /// </summary>
        public readonly ImmutableArray<Outputs.MatrixDimensionDefinitionResponse> DimensionDefinitions;
        /// <summary>
        /// A unique identifier within a History for this Execution. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create/update request: never set
        /// </summary>
        public readonly string ExecutionId;
        /// <summary>
        /// Classify the result, for example into SUCCESS or FAILURE - In response: present if set by create/update request - In create/update request: optional
        /// </summary>
        public readonly Outputs.OutcomeResponse Outcome;
        /// <summary>
        /// Lightweight information about execution request. - In response: present if set by create - In create: optional - In update: optional
        /// </summary>
        public readonly Outputs.SpecificationResponse Specification;
        /// <summary>
        /// The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
        /// </summary>
        public readonly string State;
        /// <summary>
        /// TestExecution Matrix ID that the TestExecutionService uses. - In response: present if set by create - In create: optional - In update: never set
        /// </summary>
        public readonly string TestExecutionMatrixId;

        [OutputConstructor]
        private GetExecutionResult(
            Outputs.TimestampResponse completionTime,

            Outputs.TimestampResponse creationTime,

            ImmutableArray<Outputs.MatrixDimensionDefinitionResponse> dimensionDefinitions,

            string executionId,

            Outputs.OutcomeResponse outcome,

            Outputs.SpecificationResponse specification,

            string state,

            string testExecutionMatrixId)
        {
            CompletionTime = completionTime;
            CreationTime = creationTime;
            DimensionDefinitions = dimensionDefinitions;
            ExecutionId = executionId;
            Outcome = outcome;
            Specification = specification;
            State = state;
            TestExecutionMatrixId = testExecutionMatrixId;
        }
    }
}
