// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.ToolResults.V1Beta3
{
    [EnumType]
    public readonly struct BasicPerfSampleSeriesPerfMetricType : IEquatable<BasicPerfSampleSeriesPerfMetricType>
    {
        private readonly string _value;

        private BasicPerfSampleSeriesPerfMetricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BasicPerfSampleSeriesPerfMetricType PerfMetricTypeUnspecified { get; } = new BasicPerfSampleSeriesPerfMetricType("perfMetricTypeUnspecified");
        public static BasicPerfSampleSeriesPerfMetricType Memory { get; } = new BasicPerfSampleSeriesPerfMetricType("memory");
        public static BasicPerfSampleSeriesPerfMetricType Cpu { get; } = new BasicPerfSampleSeriesPerfMetricType("cpu");
        public static BasicPerfSampleSeriesPerfMetricType Network { get; } = new BasicPerfSampleSeriesPerfMetricType("network");
        public static BasicPerfSampleSeriesPerfMetricType Graphics { get; } = new BasicPerfSampleSeriesPerfMetricType("graphics");

        public static bool operator ==(BasicPerfSampleSeriesPerfMetricType left, BasicPerfSampleSeriesPerfMetricType right) => left.Equals(right);
        public static bool operator !=(BasicPerfSampleSeriesPerfMetricType left, BasicPerfSampleSeriesPerfMetricType right) => !left.Equals(right);

        public static explicit operator string(BasicPerfSampleSeriesPerfMetricType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BasicPerfSampleSeriesPerfMetricType other && Equals(other);
        public bool Equals(BasicPerfSampleSeriesPerfMetricType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BasicPerfSampleSeriesPerfUnit : IEquatable<BasicPerfSampleSeriesPerfUnit>
    {
        private readonly string _value;

        private BasicPerfSampleSeriesPerfUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BasicPerfSampleSeriesPerfUnit PerfUnitUnspecified { get; } = new BasicPerfSampleSeriesPerfUnit("perfUnitUnspecified");
        public static BasicPerfSampleSeriesPerfUnit Kibibyte { get; } = new BasicPerfSampleSeriesPerfUnit("kibibyte");
        public static BasicPerfSampleSeriesPerfUnit Percent { get; } = new BasicPerfSampleSeriesPerfUnit("percent");
        public static BasicPerfSampleSeriesPerfUnit BytesPerSecond { get; } = new BasicPerfSampleSeriesPerfUnit("bytesPerSecond");
        public static BasicPerfSampleSeriesPerfUnit FramesPerSecond { get; } = new BasicPerfSampleSeriesPerfUnit("framesPerSecond");
        public static BasicPerfSampleSeriesPerfUnit Byte { get; } = new BasicPerfSampleSeriesPerfUnit("byte");

        public static bool operator ==(BasicPerfSampleSeriesPerfUnit left, BasicPerfSampleSeriesPerfUnit right) => left.Equals(right);
        public static bool operator !=(BasicPerfSampleSeriesPerfUnit left, BasicPerfSampleSeriesPerfUnit right) => !left.Equals(right);

        public static explicit operator string(BasicPerfSampleSeriesPerfUnit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BasicPerfSampleSeriesPerfUnit other && Equals(other);
        public bool Equals(BasicPerfSampleSeriesPerfUnit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BasicPerfSampleSeriesSampleSeriesLabel : IEquatable<BasicPerfSampleSeriesSampleSeriesLabel>
    {
        private readonly string _value;

        private BasicPerfSampleSeriesSampleSeriesLabel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BasicPerfSampleSeriesSampleSeriesLabel SampleSeriesTypeUnspecified { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("sampleSeriesTypeUnspecified");
        /// <summary>
        /// Memory sample series
        /// </summary>
        public static BasicPerfSampleSeriesSampleSeriesLabel MemoryRssPrivate { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("memoryRssPrivate");
        public static BasicPerfSampleSeriesSampleSeriesLabel MemoryRssShared { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("memoryRssShared");
        public static BasicPerfSampleSeriesSampleSeriesLabel MemoryRssTotal { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("memoryRssTotal");
        public static BasicPerfSampleSeriesSampleSeriesLabel MemoryTotal { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("memoryTotal");
        /// <summary>
        /// CPU sample series
        /// </summary>
        public static BasicPerfSampleSeriesSampleSeriesLabel CpuUser { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("cpuUser");
        public static BasicPerfSampleSeriesSampleSeriesLabel CpuKernel { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("cpuKernel");
        public static BasicPerfSampleSeriesSampleSeriesLabel CpuTotal { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("cpuTotal");
        /// <summary>
        /// Network sample series
        /// </summary>
        public static BasicPerfSampleSeriesSampleSeriesLabel NtBytesTransferred { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("ntBytesTransferred");
        public static BasicPerfSampleSeriesSampleSeriesLabel NtBytesReceived { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("ntBytesReceived");
        public static BasicPerfSampleSeriesSampleSeriesLabel NetworkSent { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("networkSent");
        public static BasicPerfSampleSeriesSampleSeriesLabel NetworkReceived { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("networkReceived");
        /// <summary>
        /// Graphics sample series
        /// </summary>
        public static BasicPerfSampleSeriesSampleSeriesLabel GraphicsFrameRate { get; } = new BasicPerfSampleSeriesSampleSeriesLabel("graphicsFrameRate");

        public static bool operator ==(BasicPerfSampleSeriesSampleSeriesLabel left, BasicPerfSampleSeriesSampleSeriesLabel right) => left.Equals(right);
        public static bool operator !=(BasicPerfSampleSeriesSampleSeriesLabel left, BasicPerfSampleSeriesSampleSeriesLabel right) => !left.Equals(right);

        public static explicit operator string(BasicPerfSampleSeriesSampleSeriesLabel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BasicPerfSampleSeriesSampleSeriesLabel other && Equals(other);
        public bool Equals(BasicPerfSampleSeriesSampleSeriesLabel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
    /// </summary>
    [EnumType]
    public readonly struct ExecutionState : IEquatable<ExecutionState>
    {
        private readonly string _value;

        private ExecutionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Should never be in this state. Exists for proto deserialization backward compatibility.
        /// </summary>
        public static ExecutionState UnknownState { get; } = new ExecutionState("unknownState");
        /// <summary>
        /// The Execution/Step is created, ready to run, but not running yet. If an Execution/Step is created without initial state, it is assumed that the Execution/Step is in PENDING state.
        /// </summary>
        public static ExecutionState Pending { get; } = new ExecutionState("pending");
        /// <summary>
        /// The Execution/Step is in progress.
        /// </summary>
        public static ExecutionState InProgress { get; } = new ExecutionState("inProgress");
        /// <summary>
        /// The finalized, immutable state. Steps/Executions in this state cannot be modified.
        /// </summary>
        public static ExecutionState Complete { get; } = new ExecutionState("complete");

        public static bool operator ==(ExecutionState left, ExecutionState right) => left.Equals(right);
        public static bool operator !=(ExecutionState left, ExecutionState right) => !left.Equals(right);

        public static explicit operator string(ExecutionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExecutionState other && Equals(other);
        public bool Equals(ExecutionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
    /// </summary>
    [EnumType]
    public readonly struct HistoryTestPlatform : IEquatable<HistoryTestPlatform>
    {
        private readonly string _value;

        private HistoryTestPlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HistoryTestPlatform UnknownPlatform { get; } = new HistoryTestPlatform("unknownPlatform");
        public static HistoryTestPlatform Android { get; } = new HistoryTestPlatform("android");
        public static HistoryTestPlatform Ios { get; } = new HistoryTestPlatform("ios");

        public static bool operator ==(HistoryTestPlatform left, HistoryTestPlatform right) => left.Equals(right);
        public static bool operator !=(HistoryTestPlatform left, HistoryTestPlatform right) => !left.Equals(right);

        public static explicit operator string(HistoryTestPlatform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HistoryTestPlatform other && Equals(other);
        public bool Equals(HistoryTestPlatform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IndividualOutcomeOutcomeSummary : IEquatable<IndividualOutcomeOutcomeSummary>
    {
        private readonly string _value;

        private IndividualOutcomeOutcomeSummary(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Do not use. For proto versioning only.
        /// </summary>
        public static IndividualOutcomeOutcomeSummary Unset { get; } = new IndividualOutcomeOutcomeSummary("unset");
        /// <summary>
        /// The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
        /// </summary>
        public static IndividualOutcomeOutcomeSummary Success { get; } = new IndividualOutcomeOutcomeSummary("success");
        /// <summary>
        /// A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
        /// </summary>
        public static IndividualOutcomeOutcomeSummary Failure { get; } = new IndividualOutcomeOutcomeSummary("failure");
        /// <summary>
        /// Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
        /// </summary>
        public static IndividualOutcomeOutcomeSummary Inconclusive { get; } = new IndividualOutcomeOutcomeSummary("inconclusive");
        /// <summary>
        /// All tests were skipped, for instance: - All device configurations were incompatible.
        /// </summary>
        public static IndividualOutcomeOutcomeSummary Skipped { get; } = new IndividualOutcomeOutcomeSummary("skipped");
        /// <summary>
        /// A group of steps that were run with the same configuration had both failure and success outcomes.
        /// </summary>
        public static IndividualOutcomeOutcomeSummary Flaky { get; } = new IndividualOutcomeOutcomeSummary("flaky");

        public static bool operator ==(IndividualOutcomeOutcomeSummary left, IndividualOutcomeOutcomeSummary right) => left.Equals(right);
        public static bool operator !=(IndividualOutcomeOutcomeSummary left, IndividualOutcomeOutcomeSummary right) => !left.Equals(right);

        public static explicit operator string(IndividualOutcomeOutcomeSummary value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndividualOutcomeOutcomeSummary other && Equals(other);
        public bool Equals(IndividualOutcomeOutcomeSummary other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The simplest way to interpret a result. Required
    /// </summary>
    [EnumType]
    public readonly struct OutcomeSummary : IEquatable<OutcomeSummary>
    {
        private readonly string _value;

        private OutcomeSummary(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Do not use. For proto versioning only.
        /// </summary>
        public static OutcomeSummary Unset { get; } = new OutcomeSummary("unset");
        /// <summary>
        /// The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
        /// </summary>
        public static OutcomeSummary Success { get; } = new OutcomeSummary("success");
        /// <summary>
        /// A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
        /// </summary>
        public static OutcomeSummary Failure { get; } = new OutcomeSummary("failure");
        /// <summary>
        /// Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
        /// </summary>
        public static OutcomeSummary Inconclusive { get; } = new OutcomeSummary("inconclusive");
        /// <summary>
        /// All tests were skipped, for instance: - All device configurations were incompatible.
        /// </summary>
        public static OutcomeSummary Skipped { get; } = new OutcomeSummary("skipped");
        /// <summary>
        /// A group of steps that were run with the same configuration had both failure and success outcomes.
        /// </summary>
        public static OutcomeSummary Flaky { get; } = new OutcomeSummary("flaky");

        public static bool operator ==(OutcomeSummary left, OutcomeSummary right) => left.Equals(right);
        public static bool operator !=(OutcomeSummary left, OutcomeSummary right) => !left.Equals(right);

        public static explicit operator string(OutcomeSummary value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OutcomeSummary other && Equals(other);
        public bool Equals(OutcomeSummary other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Rollup test status of multiple steps that were run with the same configuration as a group.
    /// </summary>
    [EnumType]
    public readonly struct PrimaryStepRollUp : IEquatable<PrimaryStepRollUp>
    {
        private readonly string _value;

        private PrimaryStepRollUp(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Do not use. For proto versioning only.
        /// </summary>
        public static PrimaryStepRollUp Unset { get; } = new PrimaryStepRollUp("unset");
        /// <summary>
        /// The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
        /// </summary>
        public static PrimaryStepRollUp Success { get; } = new PrimaryStepRollUp("success");
        /// <summary>
        /// A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
        /// </summary>
        public static PrimaryStepRollUp Failure { get; } = new PrimaryStepRollUp("failure");
        /// <summary>
        /// Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
        /// </summary>
        public static PrimaryStepRollUp Inconclusive { get; } = new PrimaryStepRollUp("inconclusive");
        /// <summary>
        /// All tests were skipped, for instance: - All device configurations were incompatible.
        /// </summary>
        public static PrimaryStepRollUp Skipped { get; } = new PrimaryStepRollUp("skipped");
        /// <summary>
        /// A group of steps that were run with the same configuration had both failure and success outcomes.
        /// </summary>
        public static PrimaryStepRollUp Flaky { get; } = new PrimaryStepRollUp("flaky");

        public static bool operator ==(PrimaryStepRollUp left, PrimaryStepRollUp right) => left.Equals(right);
        public static bool operator !=(PrimaryStepRollUp left, PrimaryStepRollUp right) => !left.Equals(right);

        public static explicit operator string(PrimaryStepRollUp value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrimaryStepRollUp other && Equals(other);
        public bool Equals(PrimaryStepRollUp other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -&gt; COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional
    /// </summary>
    [EnumType]
    public readonly struct StepState : IEquatable<StepState>
    {
        private readonly string _value;

        private StepState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Should never be in this state. Exists for proto deserialization backward compatibility.
        /// </summary>
        public static StepState UnknownState { get; } = new StepState("unknownState");
        /// <summary>
        /// The Execution/Step is created, ready to run, but not running yet. If an Execution/Step is created without initial state, it is assumed that the Execution/Step is in PENDING state.
        /// </summary>
        public static StepState Pending { get; } = new StepState("pending");
        /// <summary>
        /// The Execution/Step is in progress.
        /// </summary>
        public static StepState InProgress { get; } = new StepState("inProgress");
        /// <summary>
        /// The finalized, immutable state. Steps/Executions in this state cannot be modified.
        /// </summary>
        public static StepState Complete { get; } = new StepState("complete");

        public static bool operator ==(StepState left, StepState right) => left.Equals(right);
        public static bool operator !=(StepState left, StepState right) => !left.Equals(right);

        public static explicit operator string(StepState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StepState other && Equals(other);
        public bool Equals(StepState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Category of issue. Required.
    /// </summary>
    [EnumType]
    public readonly struct TestIssueCategory : IEquatable<TestIssueCategory>
    {
        private readonly string _value;

        private TestIssueCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default unspecified category. Do not use. For versioning only.
        /// </summary>
        public static TestIssueCategory UnspecifiedCategory { get; } = new TestIssueCategory("unspecifiedCategory");
        /// <summary>
        /// Issue is not specific to a particular test kind (e.g., a native crash).
        /// </summary>
        public static TestIssueCategory Common { get; } = new TestIssueCategory("common");
        /// <summary>
        /// Issue is specific to Robo run.
        /// </summary>
        public static TestIssueCategory Robo { get; } = new TestIssueCategory("robo");

        public static bool operator ==(TestIssueCategory left, TestIssueCategory right) => left.Equals(right);
        public static bool operator !=(TestIssueCategory left, TestIssueCategory right) => !left.Equals(right);

        public static explicit operator string(TestIssueCategory value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TestIssueCategory other && Equals(other);
        public bool Equals(TestIssueCategory other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Severity of issue. Required.
    /// </summary>
    [EnumType]
    public readonly struct TestIssueSeverity : IEquatable<TestIssueSeverity>
    {
        private readonly string _value;

        private TestIssueSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default unspecified severity. Do not use. For versioning only.
        /// </summary>
        public static TestIssueSeverity UnspecifiedSeverity { get; } = new TestIssueSeverity("unspecifiedSeverity");
        /// <summary>
        /// Non critical issue, providing users with some info about the test run.
        /// </summary>
        public static TestIssueSeverity Info { get; } = new TestIssueSeverity("info");
        /// <summary>
        /// Non critical issue, providing users with some hints on improving their testing experience, e.g., suggesting to use Game Loops.
        /// </summary>
        public static TestIssueSeverity Suggestion { get; } = new TestIssueSeverity("suggestion");
        /// <summary>
        /// Potentially critical issue.
        /// </summary>
        public static TestIssueSeverity Warning { get; } = new TestIssueSeverity("warning");
        /// <summary>
        /// Critical issue.
        /// </summary>
        public static TestIssueSeverity Severe { get; } = new TestIssueSeverity("severe");

        public static bool operator ==(TestIssueSeverity left, TestIssueSeverity right) => left.Equals(right);
        public static bool operator !=(TestIssueSeverity left, TestIssueSeverity right) => !left.Equals(right);

        public static explicit operator string(TestIssueSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TestIssueSeverity other && Equals(other);
        public bool Equals(TestIssueSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of issue. Required.
    /// </summary>
    [EnumType]
    public readonly struct TestIssueType : IEquatable<TestIssueType>
    {
        private readonly string _value;

        private TestIssueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default unspecified type. Do not use. For versioning only.
        /// </summary>
        public static TestIssueType UnspecifiedType { get; } = new TestIssueType("unspecifiedType");
        /// <summary>
        /// Issue is a fatal exception.
        /// </summary>
        public static TestIssueType FatalException { get; } = new TestIssueType("fatalException");
        /// <summary>
        /// Issue is a native crash.
        /// </summary>
        public static TestIssueType NativeCrash { get; } = new TestIssueType("nativeCrash");
        /// <summary>
        /// Issue is an ANR crash.
        /// </summary>
        public static TestIssueType Anr { get; } = new TestIssueType("anr");
        /// <summary>
        /// Issue is an unused robo directive.
        /// </summary>
        public static TestIssueType UnusedRoboDirective { get; } = new TestIssueType("unusedRoboDirective");
        /// <summary>
        /// Issue is a suggestion to use orchestrator.
        /// </summary>
        public static TestIssueType CompatibleWithOrchestrator { get; } = new TestIssueType("compatibleWithOrchestrator");
        /// <summary>
        /// Issue with finding a launcher activity
        /// </summary>
        public static TestIssueType LauncherActivityNotFound { get; } = new TestIssueType("launcherActivityNotFound");
        /// <summary>
        /// Issue with resolving a user-provided intent to start an activity
        /// </summary>
        public static TestIssueType StartActivityNotFound { get; } = new TestIssueType("startActivityNotFound");
        /// <summary>
        /// A Robo script was not fully executed.
        /// </summary>
        public static TestIssueType IncompleteRoboScriptExecution { get; } = new TestIssueType("incompleteRoboScriptExecution");
        /// <summary>
        /// A Robo script was fully and successfully executed.
        /// </summary>
        public static TestIssueType CompleteRoboScriptExecution { get; } = new TestIssueType("completeRoboScriptExecution");
        /// <summary>
        /// The APK failed to install.
        /// </summary>
        public static TestIssueType FailedToInstall { get; } = new TestIssueType("failedToInstall");
        /// <summary>
        /// The app-under-test has deep links, but none were provided to Robo.
        /// </summary>
        public static TestIssueType AvailableDeepLinks { get; } = new TestIssueType("availableDeepLinks");
        /// <summary>
        /// App accessed a non-sdk Api.
        /// </summary>
        public static TestIssueType NonSdkApiUsageViolation { get; } = new TestIssueType("nonSdkApiUsageViolation");
        /// <summary>
        /// App accessed a non-sdk Api (new detailed report)
        /// </summary>
        public static TestIssueType NonSdkApiUsageReport { get; } = new TestIssueType("nonSdkApiUsageReport");
        /// <summary>
        /// Robo crawl encountered at least one screen with elements that are not Android UI widgets.
        /// </summary>
        public static TestIssueType EncounteredNonAndroidUiWidgetScreen { get; } = new TestIssueType("encounteredNonAndroidUiWidgetScreen");
        /// <summary>
        /// Robo crawl encountered at least one probable login screen.
        /// </summary>
        public static TestIssueType EncounteredLoginScreen { get; } = new TestIssueType("encounteredLoginScreen");
        /// <summary>
        /// Robo signed in with Google.
        /// </summary>
        public static TestIssueType PerformedGoogleLogin { get; } = new TestIssueType("performedGoogleLogin");
        /// <summary>
        /// iOS App crashed with an exception.
        /// </summary>
        public static TestIssueType IosException { get; } = new TestIssueType("iosException");
        /// <summary>
        /// iOS App crashed without an exception (e.g. killed).
        /// </summary>
        public static TestIssueType IosCrash { get; } = new TestIssueType("iosCrash");
        /// <summary>
        /// Robo crawl involved performing some monkey actions.
        /// </summary>
        public static TestIssueType PerformedMonkeyActions { get; } = new TestIssueType("performedMonkeyActions");
        /// <summary>
        /// Robo crawl used a Robo directive.
        /// </summary>
        public static TestIssueType UsedRoboDirective { get; } = new TestIssueType("usedRoboDirective");
        /// <summary>
        /// Robo crawl used a Robo directive to ignore an UI element.
        /// </summary>
        public static TestIssueType UsedRoboIgnoreDirective { get; } = new TestIssueType("usedRoboIgnoreDirective");
        /// <summary>
        /// Robo did not crawl some potentially important parts of the app.
        /// </summary>
        public static TestIssueType InsufficientCoverage { get; } = new TestIssueType("insufficientCoverage");
        /// <summary>
        /// Robo crawl involved some in-app purchases.
        /// </summary>
        public static TestIssueType InAppPurchases { get; } = new TestIssueType("inAppPurchases");
        /// <summary>
        /// Crash dialog was detected during the test execution
        /// </summary>
        public static TestIssueType CrashDialogError { get; } = new TestIssueType("crashDialogError");
        /// <summary>
        /// UI element depth is greater than the threshold
        /// </summary>
        public static TestIssueType UiElementsTooDeep { get; } = new TestIssueType("uiElementsTooDeep");
        /// <summary>
        /// Blank screen is found in the Robo crawl
        /// </summary>
        public static TestIssueType BlankScreen { get; } = new TestIssueType("blankScreen");
        /// <summary>
        /// Overlapping UI elements are found in the Robo crawl
        /// </summary>
        public static TestIssueType OverlappingUiElements { get; } = new TestIssueType("overlappingUiElements");
        /// <summary>
        /// An uncaught Unity exception was detected (these don't crash apps).
        /// </summary>
        public static TestIssueType UnityException { get; } = new TestIssueType("unityException");
        /// <summary>
        /// Device running out of memory was detected
        /// </summary>
        public static TestIssueType DeviceOutOfMemory { get; } = new TestIssueType("deviceOutOfMemory");
        /// <summary>
        /// Problems detected while collecting logcat
        /// </summary>
        public static TestIssueType LogcatCollectionError { get; } = new TestIssueType("logcatCollectionError");
        /// <summary>
        /// Robo detected a splash screen provided by app (vs. Android OS splash screen).
        /// </summary>
        public static TestIssueType DetectedAppSplashScreen { get; } = new TestIssueType("detectedAppSplashScreen");

        public static bool operator ==(TestIssueType left, TestIssueType right) => left.Equals(right);
        public static bool operator !=(TestIssueType left, TestIssueType right) => !left.Equals(right);

        public static explicit operator string(TestIssueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TestIssueType other && Equals(other);
        public bool Equals(TestIssueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
