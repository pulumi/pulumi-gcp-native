// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Billingbudgets.V1Beta1
{
    /// <summary>
    /// Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget will track usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it will track usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod : IEquatable<GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod>
    {
        private readonly string _value;

        private GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Calendar period is unset. This is the default if the budget is for a custom time period (CustomPeriod).
        /// </summary>
        public static GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod CalendarPeriodUnspecified { get; } = new GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod("CALENDAR_PERIOD_UNSPECIFIED");
        /// <summary>
        /// A month. Month starts on the first day of each month, such as January 1, February 1, March 1, and so on.
        /// </summary>
        public static GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod Month { get; } = new GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod("MONTH");
        /// <summary>
        /// A quarter. Quarters start on dates January 1, April 1, July 1, and October 1 of each year.
        /// </summary>
        public static GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod Quarter { get; } = new GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod("QUARTER");
        /// <summary>
        /// A year. Year starts on January 1.
        /// </summary>
        public static GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod Year { get; } = new GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod("YEAR");

        public static bool operator ==(GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod left, GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod right) => left.Equals(right);
        public static bool operator !=(GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod left, GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod other && Equals(other);
        public bool Equals(GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment : IEquatable<GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment>
    {
        private readonly string _value;

        private GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment CreditTypesTreatmentUnspecified { get; } = new GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment("CREDIT_TYPES_TREATMENT_UNSPECIFIED");
        /// <summary>
        /// All types of credit are subtracted from the gross cost to determine the spend for threshold calculations.
        /// </summary>
        public static GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment IncludeAllCredits { get; } = new GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment("INCLUDE_ALL_CREDITS");
        /// <summary>
        /// All types of credit are added to the net cost to determine the spend for threshold calculations.
        /// </summary>
        public static GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment ExcludeAllCredits { get; } = new GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment("EXCLUDE_ALL_CREDITS");
        /// <summary>
        /// [Credit types](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type) specified in the credit_types field are subtracted from the gross cost to determine the spend for threshold calculations.
        /// </summary>
        public static GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment IncludeSpecifiedCredits { get; } = new GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment("INCLUDE_SPECIFIED_CREDITS");

        public static bool operator ==(GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment left, GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment right) => left.Equals(right);
        public static bool operator !=(GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment left, GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment other && Equals(other);
        public bool Equals(GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The type of basis used to determine if spend has passed the threshold. Behavior defaults to CURRENT_SPEND if not set.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis : IEquatable<GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis>
    {
        private readonly string _value;

        private GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified threshold basis.
        /// </summary>
        public static GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis BasisUnspecified { get; } = new GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis("BASIS_UNSPECIFIED");
        /// <summary>
        /// Use current spend as the basis for comparison against the threshold.
        /// </summary>
        public static GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis CurrentSpend { get; } = new GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis("CURRENT_SPEND");
        /// <summary>
        /// Use forecasted spend for the period as the basis for comparison against the threshold. FORECASTED_SPEND can only be set when the budget's time period is a Filter.calendar_period. It cannot be set in combination with Filter.custom_period.
        /// </summary>
        public static GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis ForecastedSpend { get; } = new GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis("FORECASTED_SPEND");

        public static bool operator ==(GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis left, GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis right) => left.Equals(right);
        public static bool operator !=(GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis left, GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis other && Equals(other);
        public bool Equals(GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
