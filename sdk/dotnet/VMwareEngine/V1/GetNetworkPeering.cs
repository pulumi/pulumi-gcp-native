// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.VMwareEngine.V1
{
    public static class GetNetworkPeering
    {
        /// <summary>
        /// Retrieves a `NetworkPeering` resource by its resource name. The resource contains details of the network peering, such as peered networks, import and export custom route configurations, and peering state.
        /// </summary>
        public static Task<GetNetworkPeeringResult> InvokeAsync(GetNetworkPeeringArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkPeeringResult>("google-native:vmwareengine/v1:getNetworkPeering", args ?? new GetNetworkPeeringArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a `NetworkPeering` resource by its resource name. The resource contains details of the network peering, such as peered networks, import and export custom route configurations, and peering state.
        /// </summary>
        public static Output<GetNetworkPeeringResult> Invoke(GetNetworkPeeringInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkPeeringResult>("google-native:vmwareengine/v1:getNetworkPeering", args ?? new GetNetworkPeeringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkPeeringArgs : global::Pulumi.InvokeArgs
    {
        [Input("networkPeeringId", required: true)]
        public string NetworkPeeringId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetNetworkPeeringArgs()
        {
        }
        public static new GetNetworkPeeringArgs Empty => new GetNetworkPeeringArgs();
    }

    public sealed class GetNetworkPeeringInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("networkPeeringId", required: true)]
        public Input<string> NetworkPeeringId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetNetworkPeeringInvokeArgs()
        {
        }
        public static new GetNetworkPeeringInvokeArgs Empty => new GetNetworkPeeringInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkPeeringResult
    {
        /// <summary>
        /// Creation time of this resource.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. User-provided description for this network peering.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.
        /// </summary>
        public readonly bool ExchangeSubnetRoutes;
        /// <summary>
        /// Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
        /// </summary>
        public readonly bool ExportCustomRoutes;
        /// <summary>
        /// Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
        /// </summary>
        public readonly bool ExportCustomRoutesWithPublicIp;
        /// <summary>
        /// Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
        /// </summary>
        public readonly bool ImportCustomRoutes;
        /// <summary>
        /// Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
        /// </summary>
        public readonly bool ImportCustomRoutesWithPublicIp;
        /// <summary>
        /// The resource name of the network peering. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/networkPeerings/my-peering`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.
        /// </summary>
        public readonly int PeerMtu;
        /// <summary>
        /// The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.
        /// </summary>
        public readonly string PeerNetwork;
        /// <summary>
        /// The type of the network to peer with the VMware Engine network.
        /// </summary>
        public readonly string PeerNetworkType;
        /// <summary>
        /// State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer network. New values may be added to this enum when appropriate.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Output Only. Details about the current state of the network peering.
        /// </summary>
        public readonly string StateDetails;
        /// <summary>
        /// System-generated unique identifier for the resource.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// Last update time of this resource.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
        /// </summary>
        public readonly string VmwareEngineNetwork;

        [OutputConstructor]
        private GetNetworkPeeringResult(
            string createTime,

            string description,

            bool exchangeSubnetRoutes,

            bool exportCustomRoutes,

            bool exportCustomRoutesWithPublicIp,

            bool importCustomRoutes,

            bool importCustomRoutesWithPublicIp,

            string name,

            int peerMtu,

            string peerNetwork,

            string peerNetworkType,

            string state,

            string stateDetails,

            string uid,

            string updateTime,

            string vmwareEngineNetwork)
        {
            CreateTime = createTime;
            Description = description;
            ExchangeSubnetRoutes = exchangeSubnetRoutes;
            ExportCustomRoutes = exportCustomRoutes;
            ExportCustomRoutesWithPublicIp = exportCustomRoutesWithPublicIp;
            ImportCustomRoutes = importCustomRoutes;
            ImportCustomRoutesWithPublicIp = importCustomRoutesWithPublicIp;
            Name = name;
            PeerMtu = peerMtu;
            PeerNetwork = peerNetwork;
            PeerNetworkType = peerNetworkType;
            State = state;
            StateDetails = stateDetails;
            Uid = uid;
            UpdateTime = updateTime;
            VmwareEngineNetwork = vmwareEngineNetwork;
        }
    }
}
