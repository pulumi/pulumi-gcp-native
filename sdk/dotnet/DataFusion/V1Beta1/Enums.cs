// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.DataFusion.V1Beta1
{
    /// <summary>
    /// The log type that this config enables.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogConfigLogType : IEquatable<AuditLogConfigLogType>
    {
        private readonly string _value;

        private AuditLogConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default case. Should never be this.
        /// </summary>
        public static AuditLogConfigLogType LogTypeUnspecified { get; } = new AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED");
        /// <summary>
        /// Admin reads. Example: CloudIAM getIamPolicy
        /// </summary>
        public static AuditLogConfigLogType AdminRead { get; } = new AuditLogConfigLogType("ADMIN_READ");
        /// <summary>
        /// Data writes. Example: CloudSQL Users create
        /// </summary>
        public static AuditLogConfigLogType DataWrite { get; } = new AuditLogConfigLogType("DATA_WRITE");
        /// <summary>
        /// Data reads. Example: CloudSQL Users list
        /// </summary>
        public static AuditLogConfigLogType DataRead { get; } = new AuditLogConfigLogType("DATA_READ");

        public static bool operator ==(AuditLogConfigLogType left, AuditLogConfigLogType right) => left.Equals(right);
        public static bool operator !=(AuditLogConfigLogType left, AuditLogConfigLogType right) => !left.Equals(right);

        public static explicit operator string(AuditLogConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogConfigLogType other && Equals(other);
        public bool Equals(AuditLogConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Instance type.
    /// </summary>
    [EnumType]
    public readonly struct InstanceType : IEquatable<InstanceType>
    {
        private readonly string _value;

        private InstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No type specified. The instance creation will fail.
        /// </summary>
        public static InstanceType TypeUnspecified { get; } = new InstanceType("TYPE_UNSPECIFIED");
        /// <summary>
        /// Basic Data Fusion instance. In Basic type, the user will be able to create data pipelines using point and click UI. However, there are certain limitations, such as fewer number of concurrent pipelines, no support for streaming pipelines, etc.
        /// </summary>
        public static InstanceType Basic { get; } = new InstanceType("BASIC");
        /// <summary>
        /// Enterprise Data Fusion instance. In Enterprise type, the user will have all features available, such as support for streaming pipelines, unlimited number of concurrent pipelines, etc.
        /// </summary>
        public static InstanceType Enterprise { get; } = new InstanceType("ENTERPRISE");
        /// <summary>
        /// Developer Data Fusion instance. In Developer type, the user will have all features available but with restrictive capabilities. This is to help enterprises design and develop their data ingestion and integration pipelines at low cost.
        /// </summary>
        public static InstanceType Developer { get; } = new InstanceType("DEVELOPER");

        public static bool operator ==(InstanceType left, InstanceType right) => left.Equals(right);
        public static bool operator !=(InstanceType left, InstanceType right) => !left.Equals(right);

        public static explicit operator string(InstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceType other && Equals(other);
        public bool Equals(InstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Type of connection for establishing private IP connectivity between the Data Fusion customer project VPC and the corresponding tenant project from a predefined list of available connection modes. If this field is unspecified for a private instance, VPC peering is used.
    /// </summary>
    [EnumType]
    public readonly struct NetworkConfigConnectionType : IEquatable<NetworkConfigConnectionType>
    {
        private readonly string _value;

        private NetworkConfigConnectionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No specific connection type was requested, the default value of VPC_PEERING is chosen.
        /// </summary>
        public static NetworkConfigConnectionType ConnectionTypeUnspecified { get; } = new NetworkConfigConnectionType("CONNECTION_TYPE_UNSPECIFIED");
        /// <summary>
        /// Requests the use of VPC peerings for connecting the consumer and tenant projects.
        /// </summary>
        public static NetworkConfigConnectionType VpcPeering { get; } = new NetworkConfigConnectionType("VPC_PEERING");
        /// <summary>
        /// Requests the use of Private Service Connect Interfaces for connecting the consumer and tenant projects.
        /// </summary>
        public static NetworkConfigConnectionType PrivateServiceConnectInterfaces { get; } = new NetworkConfigConnectionType("PRIVATE_SERVICE_CONNECT_INTERFACES");

        public static bool operator ==(NetworkConfigConnectionType left, NetworkConfigConnectionType right) => left.Equals(right);
        public static bool operator !=(NetworkConfigConnectionType left, NetworkConfigConnectionType right) => !left.Equals(right);

        public static explicit operator string(NetworkConfigConnectionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkConfigConnectionType other && Equals(other);
        public bool Equals(NetworkConfigConnectionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
