// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkSecurity.V1Beta1
{
    /// <summary>
    /// Creates a new FirewallEndpointAssociation in a given project and location.
    /// Auto-naming is currently not supported for this resource.
    /// </summary>
    [GoogleNativeResourceType("google-native:networksecurity/v1beta1:FirewallEndpointAssociation")]
    public partial class FirewallEndpointAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Create time stamp
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The URL of the FirewallEndpoint that is being associated.
        /// </summary>
        [Output("firewallEndpoint")]
        public Output<string> FirewallEndpoint { get; private set; } = null!;

        /// <summary>
        /// Optional. Id of the requesting object. If auto-generating Id server-side, remove this field and firewall_endpoint_association_id from the method_signature of Create RPC.
        /// </summary>
        [Output("firewallEndpointAssociationId")]
        public Output<string?> FirewallEndpointAssociationId { get; private set; } = null!;

        /// <summary>
        /// Optional. Labels as key value pairs
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// name of resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The URL of the network that is being associated.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Whether reconciling is in progress, recommended per https://google.aip.dev/128.
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// Current state of the association.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Optional. The URL of the TlsInspectionPolicy that is being associated.
        /// </summary>
        [Output("tlsInspectionPolicy")]
        public Output<string> TlsInspectionPolicy { get; private set; } = null!;

        /// <summary>
        /// Update time stamp
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a FirewallEndpointAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirewallEndpointAssociation(string name, FirewallEndpointAssociationArgs args, CustomResourceOptions? options = null)
            : base("google-native:networksecurity/v1beta1:FirewallEndpointAssociation", name, args ?? new FirewallEndpointAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirewallEndpointAssociation(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:networksecurity/v1beta1:FirewallEndpointAssociation", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirewallEndpointAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirewallEndpointAssociation Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new FirewallEndpointAssociation(name, id, options);
        }
    }

    public sealed class FirewallEndpointAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL of the FirewallEndpoint that is being associated.
        /// </summary>
        [Input("firewallEndpoint", required: true)]
        public Input<string> FirewallEndpoint { get; set; } = null!;

        /// <summary>
        /// Optional. Id of the requesting object. If auto-generating Id server-side, remove this field and firewall_endpoint_association_id from the method_signature of Create RPC.
        /// </summary>
        [Input("firewallEndpointAssociationId")]
        public Input<string>? FirewallEndpointAssociationId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels as key value pairs
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The URL of the network that is being associated.
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// Optional. The URL of the TlsInspectionPolicy that is being associated.
        /// </summary>
        [Input("tlsInspectionPolicy")]
        public Input<string>? TlsInspectionPolicy { get; set; }

        public FirewallEndpointAssociationArgs()
        {
        }
        public static new FirewallEndpointAssociationArgs Empty => new FirewallEndpointAssociationArgs();
    }
}
