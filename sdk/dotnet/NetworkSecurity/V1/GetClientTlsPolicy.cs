// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkSecurity.V1
{
    public static class GetClientTlsPolicy
    {
        /// <summary>
        /// Gets details of a single ClientTlsPolicy.
        /// </summary>
        public static Task<GetClientTlsPolicyResult> InvokeAsync(GetClientTlsPolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClientTlsPolicyResult>("google-native:networksecurity/v1:getClientTlsPolicy", args ?? new GetClientTlsPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single ClientTlsPolicy.
        /// </summary>
        public static Output<GetClientTlsPolicyResult> Invoke(GetClientTlsPolicyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetClientTlsPolicyResult>("google-native:networksecurity/v1:getClientTlsPolicy", args ?? new GetClientTlsPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClientTlsPolicyArgs : Pulumi.InvokeArgs
    {
        [Input("clientTlsPolicyId", required: true)]
        public string ClientTlsPolicyId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetClientTlsPolicyArgs()
        {
        }
    }

    public sealed class GetClientTlsPolicyInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("clientTlsPolicyId", required: true)]
        public Input<string> ClientTlsPolicyId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetClientTlsPolicyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClientTlsPolicyResult
    {
        /// <summary>
        /// Optional. Defines a mechanism to provision client identity (public and private keys) for peer to peer authentication. The presence of this dictates mTLS.
        /// </summary>
        public readonly Outputs.GoogleCloudNetworksecurityV1CertificateProviderResponse ClientCertificate;
        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. Free-text description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. Set of label tags associated with the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Name of the ClientTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/clientTlsPolicies/{client_tls_policy}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. Defines the mechanism to obtain the Certificate Authority certificate to validate the server certificate. If empty, client does not validate the server certificate.
        /// </summary>
        public readonly ImmutableArray<Outputs.ValidationCAResponse> ServerValidationCa;
        /// <summary>
        /// Optional. Server Name Indication string to present to the server during TLS handshake. E.g: "secure.example.com".
        /// </summary>
        public readonly string Sni;
        /// <summary>
        /// The timestamp when the resource was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetClientTlsPolicyResult(
            Outputs.GoogleCloudNetworksecurityV1CertificateProviderResponse clientCertificate,

            string createTime,

            string description,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<Outputs.ValidationCAResponse> serverValidationCa,

            string sni,

            string updateTime)
        {
            ClientCertificate = clientCertificate;
            CreateTime = createTime;
            Description = description;
            Labels = labels;
            Name = name;
            ServerValidationCa = serverValidationCa;
            Sni = sni;
            UpdateTime = updateTime;
        }
    }
}
