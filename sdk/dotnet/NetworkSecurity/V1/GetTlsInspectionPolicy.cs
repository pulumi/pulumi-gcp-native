// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkSecurity.V1
{
    public static class GetTlsInspectionPolicy
    {
        /// <summary>
        /// Gets details of a single TlsInspectionPolicy.
        /// </summary>
        public static Task<GetTlsInspectionPolicyResult> InvokeAsync(GetTlsInspectionPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTlsInspectionPolicyResult>("google-native:networksecurity/v1:getTlsInspectionPolicy", args ?? new GetTlsInspectionPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single TlsInspectionPolicy.
        /// </summary>
        public static Output<GetTlsInspectionPolicyResult> Invoke(GetTlsInspectionPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTlsInspectionPolicyResult>("google-native:networksecurity/v1:getTlsInspectionPolicy", args ?? new GetTlsInspectionPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTlsInspectionPolicyArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("tlsInspectionPolicyId", required: true)]
        public string TlsInspectionPolicyId { get; set; } = null!;

        public GetTlsInspectionPolicyArgs()
        {
        }
        public static new GetTlsInspectionPolicyArgs Empty => new GetTlsInspectionPolicyArgs();
    }

    public sealed class GetTlsInspectionPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tlsInspectionPolicyId", required: true)]
        public Input<string> TlsInspectionPolicyId { get; set; } = null!;

        public GetTlsInspectionPolicyInvokeArgs()
        {
        }
        public static new GetTlsInspectionPolicyInvokeArgs Empty => new GetTlsInspectionPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetTlsInspectionPolicyResult
    {
        /// <summary>
        /// A CA pool resource used to issue interception certificates. The CA pool string has a relative resource path following the form "projects/{project}/locations/{location}/caPools/{ca_pool}".
        /// </summary>
        public readonly string CaPool;
        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. List of custom TLS cipher suites selected. This field is valid only if the selected tls_feature_profile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        public readonly ImmutableArray<string> CustomTlsFeatures;
        /// <summary>
        /// Optional. Free-text description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trust_config. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trust_config will be accepted. This defaults to FALSE (use public CAs in addition to trust_config) for backwards compatibility, but trusting public root CAs is *not recommended* unless the traffic in question is outbound to public web servers. When possible, prefer setting this to "false" and explicitly specifying trusted CAs and certificates in a TrustConfig. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        public readonly bool ExcludePublicCaSet;
        /// <summary>
        /// Optional. Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        public readonly string MinTlsVersion;
        /// <summary>
        /// Name of the resource. Name is of the form projects/{project}/locations/{location}/tlsInspectionPolicies/{tls_inspection_policy} tls_inspection_policy should match the pattern:(^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers ("PROFILE_COMPATIBLE"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        public readonly string TlsFeatureProfile;
        /// <summary>
        /// Optional. A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form "projects/{project}/locations/{location}/trustConfigs/{trust_config}". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Note that Secure Web Proxy does not yet honor this field.
        /// </summary>
        public readonly string TrustConfig;
        /// <summary>
        /// The timestamp when the resource was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetTlsInspectionPolicyResult(
            string caPool,

            string createTime,

            ImmutableArray<string> customTlsFeatures,

            string description,

            bool excludePublicCaSet,

            string minTlsVersion,

            string name,

            string tlsFeatureProfile,

            string trustConfig,

            string updateTime)
        {
            CaPool = caPool;
            CreateTime = createTime;
            CustomTlsFeatures = customTlsFeatures;
            Description = description;
            ExcludePublicCaSet = excludePublicCaSet;
            MinTlsVersion = minTlsVersion;
            Name = name;
            TlsFeatureProfile = tlsFeatureProfile;
            TrustConfig = trustConfig;
            UpdateTime = updateTime;
        }
    }
}
