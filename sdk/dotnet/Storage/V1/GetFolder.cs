// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Storage.V1
{
    public static class GetFolder
    {
        /// <summary>
        /// Returns metadata for the specified folder. Only applicable to buckets with hierarchical namespace enabled.
        /// </summary>
        public static Task<GetFolderResult> InvokeAsync(GetFolderArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFolderResult>("google-native:storage/v1:getFolder", args ?? new GetFolderArgs(), options.WithDefaults());

        /// <summary>
        /// Returns metadata for the specified folder. Only applicable to buckets with hierarchical namespace enabled.
        /// </summary>
        public static Output<GetFolderResult> Invoke(GetFolderInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFolderResult>("google-native:storage/v1:getFolder", args ?? new GetFolderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFolderArgs : global::Pulumi.InvokeArgs
    {
        [Input("bucket", required: true)]
        public string Bucket { get; set; } = null!;

        [Input("folder", required: true)]
        public string Folder { get; set; } = null!;

        [Input("ifMetagenerationMatch")]
        public string? IfMetagenerationMatch { get; set; }

        [Input("ifMetagenerationNotMatch")]
        public string? IfMetagenerationNotMatch { get; set; }

        public GetFolderArgs()
        {
        }
        public static new GetFolderArgs Empty => new GetFolderArgs();
    }

    public sealed class GetFolderInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        [Input("folder", required: true)]
        public Input<string> Folder { get; set; } = null!;

        [Input("ifMetagenerationMatch")]
        public Input<string>? IfMetagenerationMatch { get; set; }

        [Input("ifMetagenerationNotMatch")]
        public Input<string>? IfMetagenerationNotMatch { get; set; }

        public GetFolderInvokeArgs()
        {
        }
        public static new GetFolderInvokeArgs Empty => new GetFolderInvokeArgs();
    }


    [OutputType]
    public sealed class GetFolderResult
    {
        /// <summary>
        /// The name of the bucket containing this folder.
        /// </summary>
        public readonly string Bucket;
        /// <summary>
        /// The creation time of the folder in RFC 3339 format.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The kind of item this is. For folders, this is always storage#folder.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The version of the metadata for this folder. Used for preconditions and for detecting changes in metadata.
        /// </summary>
        public readonly string Metageneration;
        /// <summary>
        /// The name of the folder. Required if not specified by URL parameter.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Only present if the folder is part of an ongoing rename folder operation. Contains information which can be used to query the operation status.
        /// </summary>
        public readonly Outputs.FolderPendingRenameInfoResponse PendingRenameInfo;
        /// <summary>
        /// The link to this folder.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The modification time of the folder metadata in RFC 3339 format.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetFolderResult(
            string bucket,

            string createTime,

            string kind,

            string metageneration,

            string name,

            Outputs.FolderPendingRenameInfoResponse pendingRenameInfo,

            string selfLink,

            string updateTime)
        {
            Bucket = bucket;
            CreateTime = createTime;
            Kind = kind;
            Metageneration = metageneration;
            Name = name;
            PendingRenameInfo = pendingRenameInfo;
            SelfLink = selfLink;
            UpdateTime = updateTime;
        }
    }
}
