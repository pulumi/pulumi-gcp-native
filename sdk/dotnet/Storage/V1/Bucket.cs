// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Storage.V1
{
    /// <summary>
    /// Creates a new bucket.
    /// </summary>
    [GoogleNativeResourceType("google-native:storage/v1:Bucket")]
    public partial class Bucket : Pulumi.CustomResource
    {
        /// <summary>
        /// Access controls on the bucket.
        /// </summary>
        [Output("acl")]
        public Output<ImmutableArray<Outputs.BucketAccessControlResponse>> Acl { get; private set; } = null!;

        /// <summary>
        /// The bucket's Autoclass configuration.
        /// </summary>
        [Output("autoclass")]
        public Output<Outputs.BucketAutoclassResponse> Autoclass { get; private set; } = null!;

        /// <summary>
        /// The bucket's billing configuration.
        /// </summary>
        [Output("billing")]
        public Output<Outputs.BucketBillingResponse> Billing { get; private set; } = null!;

        /// <summary>
        /// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
        /// </summary>
        [Output("cors")]
        public Output<ImmutableArray<Outputs.BucketCorsItemResponse>> Cors { get; private set; } = null!;

        /// <summary>
        /// The bucket's custom placement configuration for Custom Dual Regions.
        /// </summary>
        [Output("customPlacementConfig")]
        public Output<Outputs.BucketCustomPlacementConfigResponse> CustomPlacementConfig { get; private set; } = null!;

        /// <summary>
        /// The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
        /// </summary>
        [Output("defaultEventBasedHold")]
        public Output<bool> DefaultEventBasedHold { get; private set; } = null!;

        /// <summary>
        /// Default access controls to apply to new objects when no ACL is provided.
        /// </summary>
        [Output("defaultObjectAcl")]
        public Output<ImmutableArray<Outputs.ObjectAccessControlResponse>> DefaultObjectAcl { get; private set; } = null!;

        /// <summary>
        /// Encryption configuration for a bucket.
        /// </summary>
        [Output("encryption")]
        public Output<Outputs.BucketEncryptionResponse> Encryption { get; private set; } = null!;

        /// <summary>
        /// HTTP 1.1 Entity tag for the bucket.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The bucket's IAM configuration.
        /// </summary>
        [Output("iamConfiguration")]
        public Output<Outputs.BucketIamConfigurationResponse> IamConfiguration { get; private set; } = null!;

        /// <summary>
        /// The kind of item this is. For buckets, this is always storage#bucket.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// User-provided labels, in key/value pairs.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The bucket's lifecycle configuration. See lifecycle management for more information.
        /// </summary>
        [Output("lifecycle")]
        public Output<Outputs.BucketLifecycleResponse> Lifecycle { get; private set; } = null!;

        /// <summary>
        /// The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The type of the bucket location.
        /// </summary>
        [Output("locationType")]
        public Output<string> LocationType { get; private set; } = null!;

        /// <summary>
        /// The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
        /// </summary>
        [Output("logging")]
        public Output<Outputs.BucketLoggingResponse> Logging { get; private set; } = null!;

        /// <summary>
        /// The metadata generation of this bucket.
        /// </summary>
        [Output("metageneration")]
        public Output<string> Metageneration { get; private set; } = null!;

        /// <summary>
        /// The name of the bucket.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The owner of the bucket. This is always the project team's owner group.
        /// </summary>
        [Output("owner")]
        public Output<Outputs.BucketOwnerResponse> Owner { get; private set; } = null!;

        /// <summary>
        /// The project number of the project the bucket belongs to.
        /// </summary>
        [Output("projectNumber")]
        public Output<string> ProjectNumber { get; private set; } = null!;

        /// <summary>
        /// The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
        /// </summary>
        [Output("retentionPolicy")]
        public Output<Outputs.BucketRetentionPolicyResponse> RetentionPolicy { get; private set; } = null!;

        /// <summary>
        /// The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
        /// </summary>
        [Output("rpo")]
        public Output<string> Rpo { get; private set; } = null!;

        /// <summary>
        /// Reserved for future use.
        /// </summary>
        [Output("satisfiesPZS")]
        public Output<bool> SatisfiesPZS { get; private set; } = null!;

        /// <summary>
        /// The URI of this bucket.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
        /// </summary>
        [Output("storageClass")]
        public Output<string> StorageClass { get; private set; } = null!;

        /// <summary>
        /// The creation time of the bucket in RFC 3339 format.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The modification time of the bucket in RFC 3339 format.
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;

        /// <summary>
        /// The bucket's versioning configuration.
        /// </summary>
        [Output("versioning")]
        public Output<Outputs.BucketVersioningResponse> Versioning { get; private set; } = null!;

        /// <summary>
        /// The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
        /// </summary>
        [Output("website")]
        public Output<Outputs.BucketWebsiteResponse> Website { get; private set; } = null!;


        /// <summary>
        /// Create a Bucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Bucket(string name, BucketArgs? args = null, CustomResourceOptions? options = null)
            : base("google-native:storage/v1:Bucket", name, args ?? new BucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Bucket(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:storage/v1:Bucket", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Bucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Bucket Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Bucket(name, id, options);
        }
    }

    public sealed class BucketArgs : Pulumi.ResourceArgs
    {
        [Input("acl")]
        private InputList<Inputs.BucketAccessControlArgs>? _acl;

        /// <summary>
        /// Access controls on the bucket.
        /// </summary>
        public InputList<Inputs.BucketAccessControlArgs> Acl
        {
            get => _acl ?? (_acl = new InputList<Inputs.BucketAccessControlArgs>());
            set => _acl = value;
        }

        /// <summary>
        /// The bucket's Autoclass configuration.
        /// </summary>
        [Input("autoclass")]
        public Input<Inputs.BucketAutoclassArgs>? Autoclass { get; set; }

        /// <summary>
        /// The bucket's billing configuration.
        /// </summary>
        [Input("billing")]
        public Input<Inputs.BucketBillingArgs>? Billing { get; set; }

        [Input("cors")]
        private InputList<Inputs.BucketCorsItemArgs>? _cors;

        /// <summary>
        /// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
        /// </summary>
        public InputList<Inputs.BucketCorsItemArgs> Cors
        {
            get => _cors ?? (_cors = new InputList<Inputs.BucketCorsItemArgs>());
            set => _cors = value;
        }

        /// <summary>
        /// The bucket's custom placement configuration for Custom Dual Regions.
        /// </summary>
        [Input("customPlacementConfig")]
        public Input<Inputs.BucketCustomPlacementConfigArgs>? CustomPlacementConfig { get; set; }

        /// <summary>
        /// The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
        /// </summary>
        [Input("defaultEventBasedHold")]
        public Input<bool>? DefaultEventBasedHold { get; set; }

        [Input("defaultObjectAcl")]
        private InputList<Inputs.ObjectAccessControlArgs>? _defaultObjectAcl;

        /// <summary>
        /// Default access controls to apply to new objects when no ACL is provided.
        /// </summary>
        public InputList<Inputs.ObjectAccessControlArgs> DefaultObjectAcl
        {
            get => _defaultObjectAcl ?? (_defaultObjectAcl = new InputList<Inputs.ObjectAccessControlArgs>());
            set => _defaultObjectAcl = value;
        }

        /// <summary>
        /// Encryption configuration for a bucket.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.BucketEncryptionArgs>? Encryption { get; set; }

        /// <summary>
        /// HTTP 1.1 Entity tag for the bucket.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The bucket's IAM configuration.
        /// </summary>
        [Input("iamConfiguration")]
        public Input<Inputs.BucketIamConfigurationArgs>? IamConfiguration { get; set; }

        /// <summary>
        /// The ID of the bucket. For buckets, the id and name properties are the same.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The kind of item this is. For buckets, this is always storage#bucket.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-provided labels, in key/value pairs.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The bucket's lifecycle configuration. See lifecycle management for more information.
        /// </summary>
        [Input("lifecycle")]
        public Input<Inputs.BucketLifecycleArgs>? Lifecycle { get; set; }

        /// <summary>
        /// The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The type of the bucket location.
        /// </summary>
        [Input("locationType")]
        public Input<string>? LocationType { get; set; }

        /// <summary>
        /// The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
        /// </summary>
        [Input("logging")]
        public Input<Inputs.BucketLoggingArgs>? Logging { get; set; }

        /// <summary>
        /// The metadata generation of this bucket.
        /// </summary>
        [Input("metageneration")]
        public Input<string>? Metageneration { get; set; }

        /// <summary>
        /// The name of the bucket.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The owner of the bucket. This is always the project team's owner group.
        /// </summary>
        [Input("owner")]
        public Input<Inputs.BucketOwnerArgs>? Owner { get; set; }

        /// <summary>
        /// Apply a predefined set of access controls to this bucket.
        /// </summary>
        [Input("predefinedAcl")]
        public Input<string>? PredefinedAcl { get; set; }

        /// <summary>
        /// Apply a predefined set of default object access controls to this bucket.
        /// </summary>
        [Input("predefinedDefaultObjectAcl")]
        public Input<string>? PredefinedDefaultObjectAcl { get; set; }

        /// <summary>
        /// A valid API project identifier.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The project number of the project the bucket belongs to.
        /// </summary>
        [Input("projectNumber")]
        public Input<string>? ProjectNumber { get; set; }

        /// <summary>
        /// Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
        /// </summary>
        [Input("projection")]
        public Input<string>? Projection { get; set; }

        /// <summary>
        /// The project to be billed for this request if the target bucket is requester-pays bucket.
        /// </summary>
        [Input("provisionalUserProject")]
        public Input<string>? ProvisionalUserProject { get; set; }

        /// <summary>
        /// The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
        /// </summary>
        [Input("retentionPolicy")]
        public Input<Inputs.BucketRetentionPolicyArgs>? RetentionPolicy { get; set; }

        /// <summary>
        /// The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
        /// </summary>
        [Input("rpo")]
        public Input<string>? Rpo { get; set; }

        /// <summary>
        /// Reserved for future use.
        /// </summary>
        [Input("satisfiesPZS")]
        public Input<bool>? SatisfiesPZS { get; set; }

        /// <summary>
        /// The URI of this bucket.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
        /// </summary>
        [Input("storageClass")]
        public Input<string>? StorageClass { get; set; }

        /// <summary>
        /// The creation time of the bucket in RFC 3339 format.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The modification time of the bucket in RFC 3339 format.
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        /// <summary>
        /// The project to be billed for this request.
        /// </summary>
        [Input("userProject")]
        public Input<string>? UserProject { get; set; }

        /// <summary>
        /// The bucket's versioning configuration.
        /// </summary>
        [Input("versioning")]
        public Input<Inputs.BucketVersioningArgs>? Versioning { get; set; }

        /// <summary>
        /// The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
        /// </summary>
        [Input("website")]
        public Input<Inputs.BucketWebsiteArgs>? Website { get; set; }

        public BucketArgs()
        {
        }
    }
}
