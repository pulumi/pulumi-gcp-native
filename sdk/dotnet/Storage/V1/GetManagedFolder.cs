// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Storage.V1
{
    public static class GetManagedFolder
    {
        /// <summary>
        /// Returns metadata of the specified managed folder.
        /// </summary>
        public static Task<GetManagedFolderResult> InvokeAsync(GetManagedFolderArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedFolderResult>("google-native:storage/v1:getManagedFolder", args ?? new GetManagedFolderArgs(), options.WithDefaults());

        /// <summary>
        /// Returns metadata of the specified managed folder.
        /// </summary>
        public static Output<GetManagedFolderResult> Invoke(GetManagedFolderInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedFolderResult>("google-native:storage/v1:getManagedFolder", args ?? new GetManagedFolderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedFolderArgs : global::Pulumi.InvokeArgs
    {
        [Input("bucket", required: true)]
        public string Bucket { get; set; } = null!;

        [Input("ifMetagenerationMatch")]
        public string? IfMetagenerationMatch { get; set; }

        [Input("ifMetagenerationNotMatch")]
        public string? IfMetagenerationNotMatch { get; set; }

        [Input("managedFolder", required: true)]
        public string ManagedFolder { get; set; } = null!;

        public GetManagedFolderArgs()
        {
        }
        public static new GetManagedFolderArgs Empty => new GetManagedFolderArgs();
    }

    public sealed class GetManagedFolderInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        [Input("ifMetagenerationMatch")]
        public Input<string>? IfMetagenerationMatch { get; set; }

        [Input("ifMetagenerationNotMatch")]
        public Input<string>? IfMetagenerationNotMatch { get; set; }

        [Input("managedFolder", required: true)]
        public Input<string> ManagedFolder { get; set; } = null!;

        public GetManagedFolderInvokeArgs()
        {
        }
        public static new GetManagedFolderInvokeArgs Empty => new GetManagedFolderInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedFolderResult
    {
        /// <summary>
        /// The name of the bucket containing this managed folder.
        /// </summary>
        public readonly string Bucket;
        /// <summary>
        /// The creation time of the managed folder in RFC 3339 format.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The kind of item this is. For managed folders, this is always storage#managedFolder.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The version of the metadata for this managed folder. Used for preconditions and for detecting changes in metadata.
        /// </summary>
        public readonly string Metageneration;
        /// <summary>
        /// The name of the managed folder. Required if not specified by URL parameter.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The link to this managed folder.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The last update time of the managed folder metadata in RFC 3339 format.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetManagedFolderResult(
            string bucket,

            string createTime,

            string kind,

            string metageneration,

            string name,

            string selfLink,

            string updateTime)
        {
            Bucket = bucket;
            CreateTime = createTime;
            Kind = kind;
            Metageneration = metageneration;
            Name = name;
            SelfLink = selfLink;
            UpdateTime = updateTime;
        }
    }
}
