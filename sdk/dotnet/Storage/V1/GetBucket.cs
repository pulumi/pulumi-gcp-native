// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Storage.V1
{
    public static class GetBucket
    {
        /// <summary>
        /// Returns metadata for the specified bucket.
        /// </summary>
        public static Task<GetBucketResult> InvokeAsync(GetBucketArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBucketResult>("google-native:storage/v1:getBucket", args ?? new GetBucketArgs(), options.WithDefaults());

        /// <summary>
        /// Returns metadata for the specified bucket.
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetBucketResult>("google-native:storage/v1:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBucketArgs : global::Pulumi.InvokeArgs
    {
        [Input("bucket", required: true)]
        public string Bucket { get; set; } = null!;

        [Input("ifMetagenerationMatch")]
        public string? IfMetagenerationMatch { get; set; }

        [Input("ifMetagenerationNotMatch")]
        public string? IfMetagenerationNotMatch { get; set; }

        [Input("projection")]
        public string? Projection { get; set; }

        [Input("userProject")]
        public string? UserProject { get; set; }

        public GetBucketArgs()
        {
        }
        public static new GetBucketArgs Empty => new GetBucketArgs();
    }

    public sealed class GetBucketInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        [Input("ifMetagenerationMatch")]
        public Input<string>? IfMetagenerationMatch { get; set; }

        [Input("ifMetagenerationNotMatch")]
        public Input<string>? IfMetagenerationNotMatch { get; set; }

        [Input("projection")]
        public Input<string>? Projection { get; set; }

        [Input("userProject")]
        public Input<string>? UserProject { get; set; }

        public GetBucketInvokeArgs()
        {
        }
        public static new GetBucketInvokeArgs Empty => new GetBucketInvokeArgs();
    }


    [OutputType]
    public sealed class GetBucketResult
    {
        /// <summary>
        /// Access controls on the bucket.
        /// </summary>
        public readonly ImmutableArray<Outputs.BucketAccessControlResponse> Acl;
        /// <summary>
        /// The bucket's Autoclass configuration.
        /// </summary>
        public readonly Outputs.BucketAutoclassResponse Autoclass;
        /// <summary>
        /// The bucket's billing configuration.
        /// </summary>
        public readonly Outputs.BucketBillingResponse Billing;
        /// <summary>
        /// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.BucketCorsItemResponse> Cors;
        /// <summary>
        /// The bucket's custom placement configuration for Custom Dual Regions.
        /// </summary>
        public readonly Outputs.BucketCustomPlacementConfigResponse CustomPlacementConfig;
        /// <summary>
        /// The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
        /// </summary>
        public readonly bool DefaultEventBasedHold;
        /// <summary>
        /// Default access controls to apply to new objects when no ACL is provided.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObjectAccessControlResponse> DefaultObjectAcl;
        /// <summary>
        /// Encryption configuration for a bucket.
        /// </summary>
        public readonly Outputs.BucketEncryptionResponse Encryption;
        /// <summary>
        /// HTTP 1.1 Entity tag for the bucket.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The bucket's IAM configuration.
        /// </summary>
        public readonly Outputs.BucketIamConfigurationResponse IamConfiguration;
        /// <summary>
        /// The kind of item this is. For buckets, this is always storage#bucket.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// User-provided labels, in key/value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The bucket's lifecycle configuration. See lifecycle management for more information.
        /// </summary>
        public readonly Outputs.BucketLifecycleResponse Lifecycle;
        /// <summary>
        /// The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The type of the bucket location.
        /// </summary>
        public readonly string LocationType;
        /// <summary>
        /// The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
        /// </summary>
        public readonly Outputs.BucketLoggingResponse Logging;
        /// <summary>
        /// The metadata generation of this bucket.
        /// </summary>
        public readonly string Metageneration;
        /// <summary>
        /// The name of the bucket.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The owner of the bucket. This is always the project team's owner group.
        /// </summary>
        public readonly Outputs.BucketOwnerResponse Owner;
        /// <summary>
        /// The project number of the project the bucket belongs to.
        /// </summary>
        public readonly string ProjectNumber;
        /// <summary>
        /// The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
        /// </summary>
        public readonly Outputs.BucketRetentionPolicyResponse RetentionPolicy;
        /// <summary>
        /// The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
        /// </summary>
        public readonly string Rpo;
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        public readonly bool SatisfiesPZS;
        /// <summary>
        /// The URI of this bucket.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
        /// </summary>
        public readonly string StorageClass;
        /// <summary>
        /// The creation time of the bucket in RFC 3339 format.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The modification time of the bucket in RFC 3339 format.
        /// </summary>
        public readonly string Updated;
        /// <summary>
        /// The bucket's versioning configuration.
        /// </summary>
        public readonly Outputs.BucketVersioningResponse Versioning;
        /// <summary>
        /// The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
        /// </summary>
        public readonly Outputs.BucketWebsiteResponse Website;

        [OutputConstructor]
        private GetBucketResult(
            ImmutableArray<Outputs.BucketAccessControlResponse> acl,

            Outputs.BucketAutoclassResponse autoclass,

            Outputs.BucketBillingResponse billing,

            ImmutableArray<Outputs.BucketCorsItemResponse> cors,

            Outputs.BucketCustomPlacementConfigResponse customPlacementConfig,

            bool defaultEventBasedHold,

            ImmutableArray<Outputs.ObjectAccessControlResponse> defaultObjectAcl,

            Outputs.BucketEncryptionResponse encryption,

            string etag,

            Outputs.BucketIamConfigurationResponse iamConfiguration,

            string kind,

            ImmutableDictionary<string, string> labels,

            Outputs.BucketLifecycleResponse lifecycle,

            string location,

            string locationType,

            Outputs.BucketLoggingResponse logging,

            string metageneration,

            string name,

            Outputs.BucketOwnerResponse owner,

            string projectNumber,

            Outputs.BucketRetentionPolicyResponse retentionPolicy,

            string rpo,

            bool satisfiesPZS,

            string selfLink,

            string storageClass,

            string timeCreated,

            string updated,

            Outputs.BucketVersioningResponse versioning,

            Outputs.BucketWebsiteResponse website)
        {
            Acl = acl;
            Autoclass = autoclass;
            Billing = billing;
            Cors = cors;
            CustomPlacementConfig = customPlacementConfig;
            DefaultEventBasedHold = defaultEventBasedHold;
            DefaultObjectAcl = defaultObjectAcl;
            Encryption = encryption;
            Etag = etag;
            IamConfiguration = iamConfiguration;
            Kind = kind;
            Labels = labels;
            Lifecycle = lifecycle;
            Location = location;
            LocationType = locationType;
            Logging = logging;
            Metageneration = metageneration;
            Name = name;
            Owner = owner;
            ProjectNumber = projectNumber;
            RetentionPolicy = retentionPolicy;
            Rpo = rpo;
            SatisfiesPZS = satisfiesPZS;
            SelfLink = selfLink;
            StorageClass = storageClass;
            TimeCreated = timeCreated;
            Updated = updated;
            Versioning = versioning;
            Website = website;
        }
    }
}
