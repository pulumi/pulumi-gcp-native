// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Storage.V1
{
    public static class GetBucketObject
    {
        /// <summary>
        /// Retrieves an object or its metadata.
        /// </summary>
        public static Task<GetBucketObjectResult> InvokeAsync(GetBucketObjectArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBucketObjectResult>("google-native:storage/v1:getBucketObject", args ?? new GetBucketObjectArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves an object or its metadata.
        /// </summary>
        public static Output<GetBucketObjectResult> Invoke(GetBucketObjectInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBucketObjectResult>("google-native:storage/v1:getBucketObject", args ?? new GetBucketObjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBucketObjectArgs : global::Pulumi.InvokeArgs
    {
        [Input("bucket", required: true)]
        public string Bucket { get; set; } = null!;

        [Input("generation")]
        public string? Generation { get; set; }

        [Input("ifGenerationMatch")]
        public string? IfGenerationMatch { get; set; }

        [Input("ifGenerationNotMatch")]
        public string? IfGenerationNotMatch { get; set; }

        [Input("ifMetagenerationMatch")]
        public string? IfMetagenerationMatch { get; set; }

        [Input("ifMetagenerationNotMatch")]
        public string? IfMetagenerationNotMatch { get; set; }

        [Input("object", required: true)]
        public string Object { get; set; } = null!;

        [Input("projection")]
        public string? Projection { get; set; }

        [Input("softDeleted")]
        public bool? SoftDeleted { get; set; }

        [Input("userProject")]
        public string? UserProject { get; set; }

        public GetBucketObjectArgs()
        {
        }
        public static new GetBucketObjectArgs Empty => new GetBucketObjectArgs();
    }

    public sealed class GetBucketObjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        [Input("generation")]
        public Input<string>? Generation { get; set; }

        [Input("ifGenerationMatch")]
        public Input<string>? IfGenerationMatch { get; set; }

        [Input("ifGenerationNotMatch")]
        public Input<string>? IfGenerationNotMatch { get; set; }

        [Input("ifMetagenerationMatch")]
        public Input<string>? IfMetagenerationMatch { get; set; }

        [Input("ifMetagenerationNotMatch")]
        public Input<string>? IfMetagenerationNotMatch { get; set; }

        [Input("object", required: true)]
        public Input<string> Object { get; set; } = null!;

        [Input("projection")]
        public Input<string>? Projection { get; set; }

        [Input("softDeleted")]
        public Input<bool>? SoftDeleted { get; set; }

        [Input("userProject")]
        public Input<string>? UserProject { get; set; }

        public GetBucketObjectInvokeArgs()
        {
        }
        public static new GetBucketObjectInvokeArgs Empty => new GetBucketObjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetBucketObjectResult
    {
        /// <summary>
        /// Access controls on the object.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObjectAccessControlResponse> Acl;
        /// <summary>
        /// The name of the bucket containing this object.
        /// </summary>
        public readonly string Bucket;
        /// <summary>
        /// Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.
        /// </summary>
        public readonly string CacheControl;
        /// <summary>
        /// Number of underlying components that make up this object. Components are accumulated by compose operations.
        /// </summary>
        public readonly int ComponentCount;
        /// <summary>
        /// Content-Disposition of the object data.
        /// </summary>
        public readonly string ContentDisposition;
        /// <summary>
        /// Content-Encoding of the object data.
        /// </summary>
        public readonly string ContentEncoding;
        /// <summary>
        /// Content-Language of the object data.
        /// </summary>
        public readonly string ContentLanguage;
        /// <summary>
        /// Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
        /// </summary>
        public readonly string ContentType;
        /// <summary>
        /// CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
        /// </summary>
        public readonly string Crc32c;
        /// <summary>
        /// A timestamp in RFC 3339 format specified by the user for an object.
        /// </summary>
        public readonly string CustomTime;
        /// <summary>
        /// Metadata of customer-supplied encryption key, if the object is encrypted by such a key.
        /// </summary>
        public readonly Outputs.BucketObjectCustomerEncryptionResponse CustomerEncryption;
        /// <summary>
        /// HTTP 1.1 Entity tag for the object.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
        /// </summary>
        public readonly bool EventBasedHold;
        /// <summary>
        /// The content generation of this object. Used for object versioning.
        /// </summary>
        public readonly string Generation;
        /// <summary>
        /// This is the time (in the future) when the soft-deleted object will no longer be restorable. It is equal to the soft delete time plus the current soft delete retention duration of the bucket.
        /// </summary>
        public readonly string HardDeleteTime;
        /// <summary>
        /// The kind of item this is. For objects, this is always storage#object.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.
        /// </summary>
        public readonly string KmsKeyName;
        /// <summary>
        /// MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
        /// </summary>
        public readonly string Md5Hash;
        /// <summary>
        /// Media download link.
        /// </summary>
        public readonly string MediaLink;
        /// <summary>
        /// User-provided metadata, in key/value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
        /// </summary>
        public readonly string Metageneration;
        /// <summary>
        /// The name of the object. Required if not specified by URL parameter.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The owner of the object. This will always be the uploader of the object.
        /// </summary>
        public readonly Outputs.BucketObjectOwnerResponse Owner;
        /// <summary>
        /// A collection of object level retention parameters.
        /// </summary>
        public readonly Outputs.BucketObjectRetentionResponse Retention;
        /// <summary>
        /// A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
        /// </summary>
        public readonly string RetentionExpirationTime;
        /// <summary>
        /// The link to this object.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// Content-Length of the data in bytes.
        /// </summary>
        public readonly string Size;
        /// <summary>
        /// The time at which the object became soft-deleted in RFC 3339 format.
        /// </summary>
        public readonly string SoftDeleteTime;
        /// <summary>
        /// Storage class of the object.
        /// </summary>
        public readonly string StorageClass;
        /// <summary>
        /// Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
        /// </summary>
        public readonly bool TemporaryHold;
        /// <summary>
        /// The creation time of the object in RFC 3339 format.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time at which the object became noncurrent in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
        /// </summary>
        public readonly string TimeDeleted;
        /// <summary>
        /// The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.
        /// </summary>
        public readonly string TimeStorageClassUpdated;
        /// <summary>
        /// The modification time of the object metadata in RFC 3339 format. Set initially to object creation time and then updated whenever any metadata of the object changes. This includes changes made by a requester, such as modifying custom metadata, as well as changes made by Cloud Storage on behalf of a requester, such as changing the storage class based on an Object Lifecycle Configuration.
        /// </summary>
        public readonly string Updated;

        [OutputConstructor]
        private GetBucketObjectResult(
            ImmutableArray<Outputs.ObjectAccessControlResponse> acl,

            string bucket,

            string cacheControl,

            int componentCount,

            string contentDisposition,

            string contentEncoding,

            string contentLanguage,

            string contentType,

            string crc32c,

            string customTime,

            Outputs.BucketObjectCustomerEncryptionResponse customerEncryption,

            string etag,

            bool eventBasedHold,

            string generation,

            string hardDeleteTime,

            string kind,

            string kmsKeyName,

            string md5Hash,

            string mediaLink,

            ImmutableDictionary<string, string> metadata,

            string metageneration,

            string name,

            Outputs.BucketObjectOwnerResponse owner,

            Outputs.BucketObjectRetentionResponse retention,

            string retentionExpirationTime,

            string selfLink,

            string size,

            string softDeleteTime,

            string storageClass,

            bool temporaryHold,

            string timeCreated,

            string timeDeleted,

            string timeStorageClassUpdated,

            string updated)
        {
            Acl = acl;
            Bucket = bucket;
            CacheControl = cacheControl;
            ComponentCount = componentCount;
            ContentDisposition = contentDisposition;
            ContentEncoding = contentEncoding;
            ContentLanguage = contentLanguage;
            ContentType = contentType;
            Crc32c = crc32c;
            CustomTime = customTime;
            CustomerEncryption = customerEncryption;
            Etag = etag;
            EventBasedHold = eventBasedHold;
            Generation = generation;
            HardDeleteTime = hardDeleteTime;
            Kind = kind;
            KmsKeyName = kmsKeyName;
            Md5Hash = md5Hash;
            MediaLink = mediaLink;
            Metadata = metadata;
            Metageneration = metageneration;
            Name = name;
            Owner = owner;
            Retention = retention;
            RetentionExpirationTime = retentionExpirationTime;
            SelfLink = selfLink;
            Size = size;
            SoftDeleteTime = softDeleteTime;
            StorageClass = storageClass;
            TemporaryHold = temporaryHold;
            TimeCreated = timeCreated;
            TimeDeleted = timeDeleted;
            TimeStorageClassUpdated = timeStorageClassUpdated;
            Updated = updated;
        }
    }
}
