// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Storage.V1
{
    /// <summary>
    /// Stores a new object and metadata.
    /// </summary>
    [GoogleNativeResourceType("google-native:storage/v1:BucketObject")]
    public partial class BucketObject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access controls on the object.
        /// </summary>
        [Output("acl")]
        public Output<ImmutableArray<Outputs.ObjectAccessControlResponse>> Acl { get; private set; } = null!;

        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.
        /// </summary>
        [Output("cacheControl")]
        public Output<string> CacheControl { get; private set; } = null!;

        /// <summary>
        /// Number of underlying components that make up this object. Components are accumulated by compose operations.
        /// </summary>
        [Output("componentCount")]
        public Output<int> ComponentCount { get; private set; } = null!;

        /// <summary>
        /// Content-Disposition of the object data.
        /// </summary>
        [Output("contentDisposition")]
        public Output<string> ContentDisposition { get; private set; } = null!;

        /// <summary>
        /// If set, sets the contentEncoding property of the final object to this value. Setting this parameter is equivalent to setting the contentEncoding metadata property. This can be useful when uploading an object with uploadType=media to indicate the encoding of the content being uploaded.
        /// </summary>
        [Output("contentEncoding")]
        public Output<string> ContentEncoding { get; private set; } = null!;

        /// <summary>
        /// Content-Language of the object data.
        /// </summary>
        [Output("contentLanguage")]
        public Output<string> ContentLanguage { get; private set; } = null!;

        /// <summary>
        /// Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
        /// </summary>
        [Output("contentType")]
        public Output<string> ContentType { get; private set; } = null!;

        /// <summary>
        /// CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
        /// </summary>
        [Output("crc32c")]
        public Output<string> Crc32c { get; private set; } = null!;

        /// <summary>
        /// A timestamp in RFC 3339 format specified by the user for an object.
        /// </summary>
        [Output("customTime")]
        public Output<string> CustomTime { get; private set; } = null!;

        /// <summary>
        /// Metadata of customer-supplied encryption key, if the object is encrypted by such a key.
        /// </summary>
        [Output("customerEncryption")]
        public Output<Outputs.BucketObjectCustomerEncryptionResponse> CustomerEncryption { get; private set; } = null!;

        /// <summary>
        /// HTTP 1.1 Entity tag for the object.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
        /// </summary>
        [Output("eventBasedHold")]
        public Output<bool> EventBasedHold { get; private set; } = null!;

        /// <summary>
        /// The content generation of this object. Used for object versioning.
        /// </summary>
        [Output("generation")]
        public Output<string> Generation { get; private set; } = null!;

        /// <summary>
        /// This is the time (in the future) when the soft-deleted object will no longer be restorable. It is equal to the soft delete time plus the current soft delete retention duration of the bucket.
        /// </summary>
        [Output("hardDeleteTime")]
        public Output<string> HardDeleteTime { get; private set; } = null!;

        /// <summary>
        /// Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
        /// </summary>
        [Output("ifGenerationMatch")]
        public Output<string?> IfGenerationMatch { get; private set; } = null!;

        /// <summary>
        /// Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
        /// </summary>
        [Output("ifGenerationNotMatch")]
        public Output<string?> IfGenerationNotMatch { get; private set; } = null!;

        /// <summary>
        /// Makes the operation conditional on whether the object's current metageneration matches the given value.
        /// </summary>
        [Output("ifMetagenerationMatch")]
        public Output<string?> IfMetagenerationMatch { get; private set; } = null!;

        /// <summary>
        /// Makes the operation conditional on whether the object's current metageneration does not match the given value.
        /// </summary>
        [Output("ifMetagenerationNotMatch")]
        public Output<string?> IfMetagenerationNotMatch { get; private set; } = null!;

        /// <summary>
        /// The kind of item this is. For objects, this is always storage#object.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any.
        /// </summary>
        [Output("kmsKeyName")]
        public Output<string> KmsKeyName { get; private set; } = null!;

        /// <summary>
        /// MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
        /// </summary>
        [Output("md5Hash")]
        public Output<string> Md5Hash { get; private set; } = null!;

        /// <summary>
        /// Media download link.
        /// </summary>
        [Output("mediaLink")]
        public Output<string> MediaLink { get; private set; } = null!;

        /// <summary>
        /// User-provided metadata, in key/value pairs.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>> Metadata { get; private set; } = null!;

        /// <summary>
        /// The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
        /// </summary>
        [Output("metageneration")]
        public Output<string> Metageneration { get; private set; } = null!;

        /// <summary>
        /// Name of the object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The owner of the object. This will always be the uploader of the object.
        /// </summary>
        [Output("owner")]
        public Output<Outputs.BucketObjectOwnerResponse> Owner { get; private set; } = null!;

        /// <summary>
        /// Apply a predefined set of access controls to this object.
        /// </summary>
        [Output("predefinedAcl")]
        public Output<string?> PredefinedAcl { get; private set; } = null!;

        /// <summary>
        /// Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full.
        /// </summary>
        [Output("projection")]
        public Output<string?> Projection { get; private set; } = null!;

        /// <summary>
        /// A collection of object level retention parameters.
        /// </summary>
        [Output("retention")]
        public Output<Outputs.BucketObjectRetentionResponse> Retention { get; private set; } = null!;

        /// <summary>
        /// A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
        /// </summary>
        [Output("retentionExpirationTime")]
        public Output<string> RetentionExpirationTime { get; private set; } = null!;

        /// <summary>
        /// The link to this object.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Content-Length of the data in bytes.
        /// </summary>
        [Output("size")]
        public Output<string> Size { get; private set; } = null!;

        /// <summary>
        /// The time at which the object became soft-deleted in RFC 3339 format.
        /// </summary>
        [Output("softDeleteTime")]
        public Output<string> SoftDeleteTime { get; private set; } = null!;

        /// <summary>
        /// Storage class of the object.
        /// </summary>
        [Output("storageClass")]
        public Output<string> StorageClass { get; private set; } = null!;

        /// <summary>
        /// Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
        /// </summary>
        [Output("temporaryHold")]
        public Output<bool> TemporaryHold { get; private set; } = null!;

        /// <summary>
        /// The creation time of the object in RFC 3339 format.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time at which the object became noncurrent in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
        /// </summary>
        [Output("timeDeleted")]
        public Output<string> TimeDeleted { get; private set; } = null!;

        /// <summary>
        /// The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.
        /// </summary>
        [Output("timeStorageClassUpdated")]
        public Output<string> TimeStorageClassUpdated { get; private set; } = null!;

        /// <summary>
        /// The modification time of the object metadata in RFC 3339 format. Set initially to object creation time and then updated whenever any metadata of the object changes. This includes changes made by a requester, such as modifying custom metadata, as well as changes made by Cloud Storage on behalf of a requester, such as changing the storage class based on an Object Lifecycle Configuration.
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;

        /// <summary>
        /// The project to be billed for this request. Required for Requester Pays buckets.
        /// </summary>
        [Output("userProject")]
        public Output<string?> UserProject { get; private set; } = null!;


        /// <summary>
        /// Create a BucketObject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BucketObject(string name, BucketObjectArgs args, CustomResourceOptions? options = null)
            : base("google-native:storage/v1:BucketObject", name, args ?? new BucketObjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BucketObject(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:storage/v1:BucketObject", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "bucket",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BucketObject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BucketObject Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new BucketObject(name, id, options);
        }
    }

    public sealed class BucketObjectArgs : global::Pulumi.ResourceArgs
    {
        [Input("acl")]
        private InputList<Inputs.ObjectAccessControlArgs>? _acl;

        /// <summary>
        /// Access controls on the object.
        /// </summary>
        public InputList<Inputs.ObjectAccessControlArgs> Acl
        {
            get => _acl ?? (_acl = new InputList<Inputs.ObjectAccessControlArgs>());
            set => _acl = value;
        }

        /// <summary>
        /// The name of the bucket containing this object.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.
        /// </summary>
        [Input("cacheControl")]
        public Input<string>? CacheControl { get; set; }

        /// <summary>
        /// Number of underlying components that make up this object. Components are accumulated by compose operations.
        /// </summary>
        [Input("componentCount")]
        public Input<int>? ComponentCount { get; set; }

        /// <summary>
        /// Content-Disposition of the object data.
        /// </summary>
        [Input("contentDisposition")]
        public Input<string>? ContentDisposition { get; set; }

        /// <summary>
        /// Content-Encoding of the object data.
        /// </summary>
        [Input("contentEncoding")]
        public Input<string>? ContentEncoding { get; set; }

        /// <summary>
        /// Content-Language of the object data.
        /// </summary>
        [Input("contentLanguage")]
        public Input<string>? ContentLanguage { get; set; }

        /// <summary>
        /// Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
        /// </summary>
        [Input("crc32c")]
        public Input<string>? Crc32c { get; set; }

        /// <summary>
        /// A timestamp in RFC 3339 format specified by the user for an object.
        /// </summary>
        [Input("customTime")]
        public Input<string>? CustomTime { get; set; }

        /// <summary>
        /// Metadata of customer-supplied encryption key, if the object is encrypted by such a key.
        /// </summary>
        [Input("customerEncryption")]
        public Input<Inputs.BucketObjectCustomerEncryptionArgs>? CustomerEncryption { get; set; }

        /// <summary>
        /// HTTP 1.1 Entity tag for the object.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
        /// </summary>
        [Input("eventBasedHold")]
        public Input<bool>? EventBasedHold { get; set; }

        /// <summary>
        /// The content generation of this object. Used for object versioning.
        /// </summary>
        [Input("generation")]
        public Input<string>? Generation { get; set; }

        /// <summary>
        /// This is the time (in the future) when the soft-deleted object will no longer be restorable. It is equal to the soft delete time plus the current soft delete retention duration of the bucket.
        /// </summary>
        [Input("hardDeleteTime")]
        public Input<string>? HardDeleteTime { get; set; }

        /// <summary>
        /// The ID of the object, including the bucket name, object name, and generation number.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
        /// </summary>
        [Input("ifGenerationMatch")]
        public Input<string>? IfGenerationMatch { get; set; }

        /// <summary>
        /// Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
        /// </summary>
        [Input("ifGenerationNotMatch")]
        public Input<string>? IfGenerationNotMatch { get; set; }

        /// <summary>
        /// Makes the operation conditional on whether the object's current metageneration matches the given value.
        /// </summary>
        [Input("ifMetagenerationMatch")]
        public Input<string>? IfMetagenerationMatch { get; set; }

        /// <summary>
        /// Makes the operation conditional on whether the object's current metageneration does not match the given value.
        /// </summary>
        [Input("ifMetagenerationNotMatch")]
        public Input<string>? IfMetagenerationNotMatch { get; set; }

        /// <summary>
        /// The kind of item this is. For objects, this is always storage#object.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        /// <summary>
        /// MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
        /// </summary>
        [Input("md5Hash")]
        public Input<string>? Md5Hash { get; set; }

        /// <summary>
        /// Media download link.
        /// </summary>
        [Input("mediaLink")]
        public Input<string>? MediaLink { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// User-provided metadata, in key/value pairs.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
        /// </summary>
        [Input("metageneration")]
        public Input<string>? Metageneration { get; set; }

        /// <summary>
        /// The name of the object. Required if not specified by URL parameter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The owner of the object. This will always be the uploader of the object.
        /// </summary>
        [Input("owner")]
        public Input<Inputs.BucketObjectOwnerArgs>? Owner { get; set; }

        /// <summary>
        /// Apply a predefined set of access controls to this object.
        /// </summary>
        [Input("predefinedAcl")]
        public Input<string>? PredefinedAcl { get; set; }

        /// <summary>
        /// Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full.
        /// </summary>
        [Input("projection")]
        public Input<string>? Projection { get; set; }

        /// <summary>
        /// A collection of object level retention parameters.
        /// </summary>
        [Input("retention")]
        public Input<Inputs.BucketObjectRetentionArgs>? Retention { get; set; }

        /// <summary>
        /// A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
        /// </summary>
        [Input("retentionExpirationTime")]
        public Input<string>? RetentionExpirationTime { get; set; }

        /// <summary>
        /// The link to this object.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// Content-Length of the data in bytes.
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        /// <summary>
        /// The time at which the object became soft-deleted in RFC 3339 format.
        /// </summary>
        [Input("softDeleteTime")]
        public Input<string>? SoftDeleteTime { get; set; }

        [Input("source")]
        public Input<AssetOrArchive>? Source { get; set; }

        /// <summary>
        /// Storage class of the object.
        /// </summary>
        [Input("storageClass")]
        public Input<string>? StorageClass { get; set; }

        /// <summary>
        /// Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
        /// </summary>
        [Input("temporaryHold")]
        public Input<bool>? TemporaryHold { get; set; }

        /// <summary>
        /// The creation time of the object in RFC 3339 format.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time at which the object became noncurrent in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
        /// </summary>
        [Input("timeDeleted")]
        public Input<string>? TimeDeleted { get; set; }

        /// <summary>
        /// The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.
        /// </summary>
        [Input("timeStorageClassUpdated")]
        public Input<string>? TimeStorageClassUpdated { get; set; }

        /// <summary>
        /// The modification time of the object metadata in RFC 3339 format. Set initially to object creation time and then updated whenever any metadata of the object changes. This includes changes made by a requester, such as modifying custom metadata, as well as changes made by Cloud Storage on behalf of a requester, such as changing the storage class based on an Object Lifecycle Configuration.
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        /// <summary>
        /// The project to be billed for this request. Required for Requester Pays buckets.
        /// </summary>
        [Input("userProject")]
        public Input<string>? UserProject { get; set; }

        public BucketObjectArgs()
        {
        }
        public static new BucketObjectArgs Empty => new BucketObjectArgs();
    }
}
