// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Firebasehosting.V1beta1
{
    /// <summary>
    /// Creates a domain mapping on the specified site.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:firebasehosting/v1beta1:SiteDomain")]
    public partial class SiteDomain : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a SiteDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SiteDomain(string name, SiteDomainArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:firebasehosting/v1beta1:SiteDomain", name, args ?? new SiteDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SiteDomain(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:firebasehosting/v1beta1:SiteDomain", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SiteDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SiteDomain Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SiteDomain(name, id, options);
        }
    }

    public sealed class SiteDomainArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. The domain name of the association.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// If set, the domain should redirect with the provided parameters.
        /// </summary>
        [Input("domainRedirect")]
        public Input<Inputs.DomainRedirectArgs>? DomainRedirect { get; set; }

        [Input("domainsId", required: true)]
        public Input<string> DomainsId { get; set; } = null!;

        /// <summary>
        /// Output only. Information about the provisioning of certificates and the health of the DNS resolution for the domain.
        /// </summary>
        [Input("provisioning")]
        public Input<Inputs.DomainProvisioningArgs>? Provisioning { get; set; }

        /// <summary>
        /// Required. The site name of the association.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        [Input("sitesId", required: true)]
        public Input<string> SitesId { get; set; } = null!;

        /// <summary>
        /// Output only. Additional status of the domain association.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Output only. The time at which the domain was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public SiteDomainArgs()
        {
        }
    }
}
