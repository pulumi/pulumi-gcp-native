// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Firebasehosting.V1beta1.Inputs
{

    /// <summary>
    /// A `Version` is a configuration and a collection of static files which determine how a site is displayed.
    /// </summary>
    public sealed class VersionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ServingConfigArgs>? Config { get; set; }

        /// <summary>
        /// Output only. The time at which the version was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Output only. Identifies the user who created the version.
        /// </summary>
        [Input("createUser")]
        public Input<Inputs.ActingUserArgs>? CreateUser { get; set; }

        /// <summary>
        /// Output only. The time at which the version was `DELETED`.
        /// </summary>
        [Input("deleteTime")]
        public Input<string>? DeleteTime { get; set; }

        /// <summary>
        /// Output only. Identifies the user who `DELETED` the version.
        /// </summary>
        [Input("deleteUser")]
        public Input<Inputs.ActingUserArgs>? DeleteUser { get; set; }

        /// <summary>
        /// Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
        /// </summary>
        [Input("fileCount")]
        public Input<string>? FileCount { get; set; }

        /// <summary>
        /// Output only. The time at which the version was `FINALIZED`.
        /// </summary>
        [Input("finalizeTime")]
        public Input<string>? FinalizeTime { get; set; }

        /// <summary>
        /// Output only. Identifies the user who `FINALIZED` the version.
        /// </summary>
        [Input("finalizeUser")]
        public Input<Inputs.ActingUserArgs>? FinalizeUser { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels used for extra metadata and/or filtering.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Deprecated in favor of [site channels](sites.channels).
        /// </summary>
        [Input("preview")]
        public Input<Inputs.PreviewConfigArgs>? Preview { get; set; }

        /// <summary>
        /// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
        /// </summary>
        [Input("versionBytes")]
        public Input<string>? VersionBytes { get; set; }

        public VersionArgs()
        {
        }
    }
}
