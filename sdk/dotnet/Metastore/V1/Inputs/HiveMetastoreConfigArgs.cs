// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Metastore.V1.Inputs
{

    /// <summary>
    /// Specifies configuration information specific to running Hive metastore software as the metastore service.
    /// </summary>
    public sealed class HiveMetastoreConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("configOverrides")]
        private InputMap<string>? _configOverrides;

        /// <summary>
        /// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.
        /// </summary>
        public InputMap<string> ConfigOverrides
        {
            get => _configOverrides ?? (_configOverrides = new InputMap<string>());
            set => _configOverrides = value;
        }

        /// <summary>
        /// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
        /// </summary>
        [Input("kerberosConfig")]
        public Input<Inputs.KerberosConfigArgs>? KerberosConfig { get; set; }

        /// <summary>
        /// Immutable. The Hive metastore schema version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public HiveMetastoreConfigArgs()
        {
        }
        public static new HiveMetastoreConfigArgs Empty => new HiveMetastoreConfigArgs();
    }
}
