// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Metastore.V1Alpha
{
    /// <summary>
    /// Creates a new MetadataImport in a given project and location.
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:metastore/v1alpha:MetadataImport")]
    public partial class MetadataImport : Pulumi.CustomResource
    {
        /// <summary>
        /// The time when the metadata import was started.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Immutable. A database dump from a pre-existing metastore's database.
        /// </summary>
        [Output("databaseDump")]
        public Output<Outputs.DatabaseDumpResponse> DatabaseDump { get; private set; } = null!;

        /// <summary>
        /// The description of the metadata import.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The time when the metadata import finished.
        /// </summary>
        [Output("endTime")]
        public Output<string> EndTime { get; private set; } = null!;

        /// <summary>
        /// Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The current state of the metadata import.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The time when the metadata import was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a MetadataImport resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetadataImport(string name, MetadataImportArgs args, CustomResourceOptions? options = null)
            : base("google-native:metastore/v1alpha:MetadataImport", name, args ?? new MetadataImportArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetadataImport(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:metastore/v1alpha:MetadataImport", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetadataImport resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetadataImport Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MetadataImport(name, id, options);
        }
    }

    public sealed class MetadataImportArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Immutable. A database dump from a pre-existing metastore's database.
        /// </summary>
        [Input("databaseDump")]
        public Input<Inputs.DatabaseDumpArgs>? DatabaseDump { get; set; }

        /// <summary>
        /// The description of the metadata import.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("metadataImportId", required: true)]
        public Input<string> MetadataImportId { get; set; } = null!;

        /// <summary>
        /// Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public MetadataImportArgs()
        {
        }
    }
}
