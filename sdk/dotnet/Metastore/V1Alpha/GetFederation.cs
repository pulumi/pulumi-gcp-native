// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Metastore.V1Alpha
{
    public static class GetFederation
    {
        /// <summary>
        /// Gets the details of a single federation.
        /// </summary>
        public static Task<GetFederationResult> InvokeAsync(GetFederationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFederationResult>("google-native:metastore/v1alpha:getFederation", args ?? new GetFederationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of a single federation.
        /// </summary>
        public static Output<GetFederationResult> Invoke(GetFederationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFederationResult>("google-native:metastore/v1alpha:getFederation", args ?? new GetFederationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFederationArgs : global::Pulumi.InvokeArgs
    {
        [Input("federationId", required: true)]
        public string FederationId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetFederationArgs()
        {
        }
        public static new GetFederationArgs Empty => new GetFederationArgs();
    }

    public sealed class GetFederationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("federationId", required: true)]
        public Input<string> FederationId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetFederationInvokeArgs()
        {
        }
        public static new GetFederationInvokeArgs Empty => new GetFederationInvokeArgs();
    }


    [OutputType]
    public sealed class GetFederationResult
    {
        /// <summary>
        /// A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.
        /// </summary>
        public readonly Outputs.BackendMetastoreResponse BackendMetastores;
        /// <summary>
        /// The time when the metastore federation was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The federation endpoint.
        /// </summary>
        public readonly string EndpointUri;
        /// <summary>
        /// User-defined labels for the metastore federation.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The current state of the federation.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Additional information about the current state of the metastore federation, if available.
        /// </summary>
        public readonly string StateMessage;
        /// <summary>
        /// The globally unique resource identifier of the metastore federation.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// The time when the metastore federation was last updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetFederationResult(
            Outputs.BackendMetastoreResponse backendMetastores,

            string createTime,

            string endpointUri,

            ImmutableDictionary<string, string> labels,

            string name,

            string state,

            string stateMessage,

            string uid,

            string updateTime,

            string version)
        {
            BackendMetastores = backendMetastores;
            CreateTime = createTime;
            EndpointUri = endpointUri;
            Labels = labels;
            Name = name;
            State = state;
            StateMessage = stateMessage;
            Uid = uid;
            UpdateTime = updateTime;
            Version = version;
        }
    }
}
