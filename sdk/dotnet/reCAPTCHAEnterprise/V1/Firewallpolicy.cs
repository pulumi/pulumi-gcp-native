// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.reCAPTCHAEnterprise.V1
{
    /// <summary>
    /// Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA Enterprise actions can be executed. A project may have a maximum of 1000 policies.
    /// </summary>
    [GoogleNativeResourceType("google-native:recaptchaenterprise/v1:Firewallpolicy")]
    public partial class Firewallpolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. The actions that the caller should take regarding user access. There should be at most one terminal action. A terminal action is any action that forces a response, such as `AllowAction`, `BlockAction` or `SubstituteAction`. Zero or more non-terminal actions such as `SetHeader` might be specified. A single policy can contain up to 16 actions.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.GoogleCloudRecaptchaenterpriseV1FirewallActionResponse>> Actions { get; private set; } = null!;

        /// <summary>
        /// Optional. A CEL (Common Expression Language) conditional expression that specifies if this policy applies to an incoming user request. If this condition evaluates to true and the requested path matched the path pattern, the associated actions should be executed by the caller. The condition string is checked for CEL syntax correctness on creation. For more information, see the [CEL spec](https://github.com/google/cel-spec) and its [language definition](https://github.com/google/cel-spec/blob/master/doc/langdef.md). A condition has a max length of 500 characters.
        /// </summary>
        [Output("condition")]
        public Output<string> Condition { get; private set; } = null!;

        /// <summary>
        /// Optional. A description of what this policy aims to achieve, for convenience purposes. The description can at most include 256 UTF-8 characters.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Identifier. The resource name for the FirewallPolicy in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Optional. The path for which this policy applies, specified as a glob pattern. For more information on glob, see the [manual page](https://man7.org/linux/man-pages/man7/glob.7.html). A path has a max length of 200 characters.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a Firewallpolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Firewallpolicy(string name, FirewallpolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("google-native:recaptchaenterprise/v1:Firewallpolicy", name, args ?? new FirewallpolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Firewallpolicy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:recaptchaenterprise/v1:Firewallpolicy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Firewallpolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Firewallpolicy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Firewallpolicy(name, id, options);
        }
    }

    public sealed class FirewallpolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.GoogleCloudRecaptchaenterpriseV1FirewallActionArgs>? _actions;

        /// <summary>
        /// Optional. The actions that the caller should take regarding user access. There should be at most one terminal action. A terminal action is any action that forces a response, such as `AllowAction`, `BlockAction` or `SubstituteAction`. Zero or more non-terminal actions such as `SetHeader` might be specified. A single policy can contain up to 16 actions.
        /// </summary>
        public InputList<Inputs.GoogleCloudRecaptchaenterpriseV1FirewallActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.GoogleCloudRecaptchaenterpriseV1FirewallActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// Optional. A CEL (Common Expression Language) conditional expression that specifies if this policy applies to an incoming user request. If this condition evaluates to true and the requested path matched the path pattern, the associated actions should be executed by the caller. The condition string is checked for CEL syntax correctness on creation. For more information, see the [CEL spec](https://github.com/google/cel-spec) and its [language definition](https://github.com/google/cel-spec/blob/master/doc/langdef.md). A condition has a max length of 500 characters.
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// Optional. A description of what this policy aims to achieve, for convenience purposes. The description can at most include 256 UTF-8 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Identifier. The resource name for the FirewallPolicy in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Optional. The path for which this policy applies, specified as a glob pattern. For more information on glob, see the [manual page](https://man7.org/linux/man-pages/man7/glob.7.html). A path has a max length of 200 characters.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        public FirewallpolicyArgs()
        {
        }
        public static new FirewallpolicyArgs Empty => new FirewallpolicyArgs();
    }
}
