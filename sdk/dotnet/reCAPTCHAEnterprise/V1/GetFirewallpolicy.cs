// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.reCAPTCHAEnterprise.V1
{
    public static class GetFirewallpolicy
    {
        /// <summary>
        /// Returns the specified firewall policy.
        /// </summary>
        public static Task<GetFirewallpolicyResult> InvokeAsync(GetFirewallpolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirewallpolicyResult>("google-native:recaptchaenterprise/v1:getFirewallpolicy", args ?? new GetFirewallpolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the specified firewall policy.
        /// </summary>
        public static Output<GetFirewallpolicyResult> Invoke(GetFirewallpolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallpolicyResult>("google-native:recaptchaenterprise/v1:getFirewallpolicy", args ?? new GetFirewallpolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallpolicyArgs : global::Pulumi.InvokeArgs
    {
        [Input("firewallpolicyId", required: true)]
        public string FirewallpolicyId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetFirewallpolicyArgs()
        {
        }
        public static new GetFirewallpolicyArgs Empty => new GetFirewallpolicyArgs();
    }

    public sealed class GetFirewallpolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("firewallpolicyId", required: true)]
        public Input<string> FirewallpolicyId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetFirewallpolicyInvokeArgs()
        {
        }
        public static new GetFirewallpolicyInvokeArgs Empty => new GetFirewallpolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirewallpolicyResult
    {
        /// <summary>
        /// The actions that the caller should take regarding user access. There should be at most one terminal action. A terminal action is any action that forces a response, such as AllowAction, BlockAction or SubstituteAction. Zero or more non-terminal actions such as SetHeader might be specified. A single policy can contain up to 16 actions.
        /// </summary>
        public readonly ImmutableArray<Outputs.GoogleCloudRecaptchaenterpriseV1FirewallActionResponse> Actions;
        /// <summary>
        /// A CEL (Common Expression Language) conditional expression that specifies if this policy applies to an incoming user request. If this condition evaluates to true and the requested path matched the path pattern, the associated actions should be executed by the caller. The condition string is checked for CEL syntax correctness on creation. For more information, see the [CEL spec](https://github.com/google/cel-spec) and its [language definition](https://github.com/google/cel-spec/blob/master/doc/langdef.md). A condition has a max length of 500 characters.
        /// </summary>
        public readonly string Condition;
        /// <summary>
        /// A description of what this policy aims to achieve, for convenience purposes. The description can at most include 256 UTF-8 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The resource name for the FirewallPolicy in the format "projects/{project}/firewallpolicies/{firewallpolicy}".
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The path for which this policy applies, specified as a glob pattern. For more information on glob, see the [manual page](https://man7.org/linux/man-pages/man7/glob.7.html). A path has a max length of 200 characters.
        /// </summary>
        public readonly string Path;

        [OutputConstructor]
        private GetFirewallpolicyResult(
            ImmutableArray<Outputs.GoogleCloudRecaptchaenterpriseV1FirewallActionResponse> actions,

            string condition,

            string description,

            string name,

            string path)
        {
            Actions = actions;
            Condition = condition;
            Description = description;
            Name = name;
            Path = path;
        }
    }
}
