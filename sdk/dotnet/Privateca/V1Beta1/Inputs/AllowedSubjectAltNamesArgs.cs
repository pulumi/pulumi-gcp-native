// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Privateca.V1Beta1.Inputs
{

    /// <summary>
    /// AllowedSubjectAltNames specifies the allowed values for SubjectAltNames by the CertificateAuthority when issuing Certificates.
    /// </summary>
    public sealed class AllowedSubjectAltNamesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. Specifies if to allow custom X509Extension values.
        /// </summary>
        [Input("allowCustomSans")]
        public Input<bool>? AllowCustomSans { get; set; }

        /// <summary>
        /// Optional. Specifies if glob patterns used for allowed_dns_names allow wildcard certificates. If this is set, certificate requests with wildcard domains will be permitted to match a glob pattern specified in allowed_dns_names. Otherwise, certificate requests with wildcard domains will be permitted only if allowed_dns_names contains a literal wildcard.
        /// </summary>
        [Input("allowGlobbingDnsWildcards")]
        public Input<bool>? AllowGlobbingDnsWildcards { get; set; }

        [Input("allowedDnsNames")]
        private InputList<string>? _allowedDnsNames;

        /// <summary>
        /// Optional. Contains valid, fully-qualified host names. Glob patterns are also supported. To allow an explicit wildcard certificate, escape with backlash (i.e. `\*`). E.g. for globbed entries: `*bar.com` will allow `foo.bar.com`, but not `*.bar.com`, unless the allow_globbing_dns_wildcards field is set. E.g. for wildcard entries: `\*.bar.com` will allow `*.bar.com`, but not `foo.bar.com`.
        /// </summary>
        public InputList<string> AllowedDnsNames
        {
            get => _allowedDnsNames ?? (_allowedDnsNames = new InputList<string>());
            set => _allowedDnsNames = value;
        }

        [Input("allowedEmailAddresses")]
        private InputList<string>? _allowedEmailAddresses;

        /// <summary>
        /// Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also supported.
        /// </summary>
        public InputList<string> AllowedEmailAddresses
        {
            get => _allowedEmailAddresses ?? (_allowedEmailAddresses = new InputList<string>());
            set => _allowedEmailAddresses = value;
        }

        [Input("allowedIps")]
        private InputList<string>? _allowedIps;

        /// <summary>
        /// Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6 addresses and subnet ranges. Subnet ranges are specified using the '/' notation (e.g. 10.0.0.0/8, 2001:700:300:1800::/64). Glob patterns are supported only for ip address entries (i.e. not for subnet ranges).
        /// </summary>
        public InputList<string> AllowedIps
        {
            get => _allowedIps ?? (_allowedIps = new InputList<string>());
            set => _allowedIps = value;
        }

        [Input("allowedUris")]
        private InputList<string>? _allowedUris;

        /// <summary>
        /// Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To match across path seperators (i.e. '/') use the double star glob pattern (i.e. '**').
        /// </summary>
        public InputList<string> AllowedUris
        {
            get => _allowedUris ?? (_allowedUris = new InputList<string>());
            set => _allowedUris = value;
        }

        public AllowedSubjectAltNamesArgs()
        {
        }
    }
}
