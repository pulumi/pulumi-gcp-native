// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.GoogleNative.Privateca.V1
{
    public static class GetCertificate
    {
        /// <summary>
        /// Returns a Certificate.
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("google-native:privateca/v1:getCertificate", args ?? new GetCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a Certificate.
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("google-native:privateca/v1:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateArgs : Pulumi.InvokeArgs
    {
        [Input("caPoolId", required: true)]
        public string CaPoolId { get; set; } = null!;

        [Input("certificateId", required: true)]
        public string CertificateId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetCertificateArgs()
        {
        }
    }

    public sealed class GetCertificateInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("caPoolId", required: true)]
        public Input<string> CaPoolId { get; set; } = null!;

        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetCertificateInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        /// <summary>
        /// A structured description of the issued X.509 certificate.
        /// </summary>
        public readonly Outputs.CertificateDescriptionResponse CertificateDescription;
        /// <summary>
        /// Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
        /// </summary>
        public readonly string CertificateTemplate;
        /// <summary>
        /// Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
        /// </summary>
        public readonly Outputs.CertificateConfigResponse Config;
        /// <summary>
        /// The time at which this Certificate was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The resource name of the issuing CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
        /// </summary>
        public readonly string IssuerCertificateAuthority;
        /// <summary>
        /// Optional. Labels with user-defined metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
        /// </summary>
        public readonly string Lifetime;
        /// <summary>
        /// The resource name for this Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The pem-encoded, signed X.509 certificate.
        /// </summary>
        public readonly string PemCertificate;
        /// <summary>
        /// The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
        /// </summary>
        public readonly ImmutableArray<string> PemCertificateChain;
        /// <summary>
        /// Immutable. A pem-encoded X.509 certificate signing request (CSR).
        /// </summary>
        public readonly string PemCsr;
        /// <summary>
        /// Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if this field is present.
        /// </summary>
        public readonly Outputs.RevocationDetailsResponse RevocationDetails;
        /// <summary>
        /// Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
        /// </summary>
        public readonly string SubjectMode;
        /// <summary>
        /// The time at which this Certificate was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetCertificateResult(
            Outputs.CertificateDescriptionResponse certificateDescription,

            string certificateTemplate,

            Outputs.CertificateConfigResponse config,

            string createTime,

            string issuerCertificateAuthority,

            ImmutableDictionary<string, string> labels,

            string lifetime,

            string name,

            string pemCertificate,

            ImmutableArray<string> pemCertificateChain,

            string pemCsr,

            Outputs.RevocationDetailsResponse revocationDetails,

            string subjectMode,

            string updateTime)
        {
            CertificateDescription = certificateDescription;
            CertificateTemplate = certificateTemplate;
            Config = config;
            CreateTime = createTime;
            IssuerCertificateAuthority = issuerCertificateAuthority;
            Labels = labels;
            Lifetime = lifetime;
            Name = name;
            PemCertificate = pemCertificate;
            PemCertificateChain = pemCertificateChain;
            PemCsr = pemCsr;
            RevocationDetails = revocationDetails;
            SubjectMode = subjectMode;
            UpdateTime = updateTime;
        }
    }
}
