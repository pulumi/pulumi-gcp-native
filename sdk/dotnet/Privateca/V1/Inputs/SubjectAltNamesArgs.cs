// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Privateca.V1.Inputs
{

    /// <summary>
    /// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
    /// </summary>
    public sealed class SubjectAltNamesArgs : Pulumi.ResourceArgs
    {
        [Input("customSans")]
        private InputList<Inputs.X509ExtensionArgs>? _customSans;

        /// <summary>
        /// Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.
        /// </summary>
        public InputList<Inputs.X509ExtensionArgs> CustomSans
        {
            get => _customSans ?? (_customSans = new InputList<Inputs.X509ExtensionArgs>());
            set => _customSans = value;
        }

        [Input("dnsNames")]
        private InputList<string>? _dnsNames;

        /// <summary>
        /// Contains only valid, fully-qualified host names.
        /// </summary>
        public InputList<string> DnsNames
        {
            get => _dnsNames ?? (_dnsNames = new InputList<string>());
            set => _dnsNames = value;
        }

        [Input("emailAddresses")]
        private InputList<string>? _emailAddresses;

        /// <summary>
        /// Contains only valid RFC 2822 E-mail addresses.
        /// </summary>
        public InputList<string> EmailAddresses
        {
            get => _emailAddresses ?? (_emailAddresses = new InputList<string>());
            set => _emailAddresses = value;
        }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("uris")]
        private InputList<string>? _uris;

        /// <summary>
        /// Contains only valid RFC 3986 URIs.
        /// </summary>
        public InputList<string> Uris
        {
            get => _uris ?? (_uris = new InputList<string>());
            set => _uris = value;
        }

        public SubjectAltNamesArgs()
        {
        }
    }
}
