// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Privateca.V1
{
    public static class GetCertificateAuthority
    {
        /// <summary>
        /// Returns a CertificateAuthority.
        /// </summary>
        public static Task<GetCertificateAuthorityResult> InvokeAsync(GetCertificateAuthorityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateAuthorityResult>("google-native:privateca/v1:getCertificateAuthority", args ?? new GetCertificateAuthorityArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a CertificateAuthority.
        /// </summary>
        public static Output<GetCertificateAuthorityResult> Invoke(GetCertificateAuthorityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateAuthorityResult>("google-native:privateca/v1:getCertificateAuthority", args ?? new GetCertificateAuthorityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateAuthorityArgs : global::Pulumi.InvokeArgs
    {
        [Input("caPoolId", required: true)]
        public string CaPoolId { get; set; } = null!;

        [Input("certificateAuthorityId", required: true)]
        public string CertificateAuthorityId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetCertificateAuthorityArgs()
        {
        }
        public static new GetCertificateAuthorityArgs Empty => new GetCertificateAuthorityArgs();
    }

    public sealed class GetCertificateAuthorityInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("caPoolId", required: true)]
        public Input<string> CaPoolId { get; set; } = null!;

        [Input("certificateAuthorityId", required: true)]
        public Input<string> CertificateAuthorityId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetCertificateAuthorityInvokeArgs()
        {
        }
        public static new GetCertificateAuthorityInvokeArgs Empty => new GetCertificateAuthorityInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateAuthorityResult
    {
        /// <summary>
        /// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
        /// </summary>
        public readonly Outputs.AccessUrlsResponse AccessUrls;
        /// <summary>
        /// A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificateDescriptionResponse> CaCertificateDescriptions;
        /// <summary>
        /// Immutable. The config used to create a self-signed X.509 certificate or CSR.
        /// </summary>
        public readonly Outputs.CertificateConfigResponse Config;
        /// <summary>
        /// The time at which this CertificateAuthority was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
        /// </summary>
        public readonly string GcsBucket;
        /// <summary>
        /// Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
        /// </summary>
        public readonly Outputs.KeyVersionSpecResponse KeySpec;
        /// <summary>
        /// Optional. Labels with user-defined metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Immutable. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
        /// </summary>
        public readonly string Lifetime;
        /// <summary>
        /// The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
        /// </summary>
        public readonly ImmutableArray<string> PemCaCertificates;
        /// <summary>
        /// The State for this CertificateAuthority.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Optional. If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which describes its issuers. This may be updated, but this CertificateAuthority must continue to validate.
        /// </summary>
        public readonly Outputs.SubordinateConfigResponse SubordinateConfig;
        /// <summary>
        /// The CaPool.Tier of the CaPool that includes this CertificateAuthority.
        /// </summary>
        public readonly string Tier;
        /// <summary>
        /// Immutable. The Type of this CertificateAuthority.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The time at which this CertificateAuthority was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetCertificateAuthorityResult(
            Outputs.AccessUrlsResponse accessUrls,

            ImmutableArray<Outputs.CertificateDescriptionResponse> caCertificateDescriptions,

            Outputs.CertificateConfigResponse config,

            string createTime,

            string deleteTime,

            string expireTime,

            string gcsBucket,

            Outputs.KeyVersionSpecResponse keySpec,

            ImmutableDictionary<string, string> labels,

            string lifetime,

            string name,

            ImmutableArray<string> pemCaCertificates,

            string state,

            Outputs.SubordinateConfigResponse subordinateConfig,

            string tier,

            string type,

            string updateTime)
        {
            AccessUrls = accessUrls;
            CaCertificateDescriptions = caCertificateDescriptions;
            Config = config;
            CreateTime = createTime;
            DeleteTime = deleteTime;
            ExpireTime = expireTime;
            GcsBucket = gcsBucket;
            KeySpec = keySpec;
            Labels = labels;
            Lifetime = lifetime;
            Name = name;
            PemCaCertificates = pemCaCertificates;
            State = state;
            SubordinateConfig = subordinateConfig;
            Tier = tier;
            Type = type;
            UpdateTime = updateTime;
        }
    }
}
