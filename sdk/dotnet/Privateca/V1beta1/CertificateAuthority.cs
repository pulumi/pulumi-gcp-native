// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Privateca.V1beta1
{
    /// <summary>
    /// Create a new CertificateAuthority in a given Project and Location.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:privateca/v1beta1:CertificateAuthority")]
    public partial class CertificateAuthority : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a CertificateAuthority resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateAuthority(string name, CertificateAuthorityArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:privateca/v1beta1:CertificateAuthority", name, args ?? new CertificateAuthorityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateAuthority(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:privateca/v1beta1:CertificateAuthority", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateAuthority Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CertificateAuthority(name, id, options);
        }
    }

    public sealed class CertificateAuthorityArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. URLs for accessing content published by this CA, such as the CA certificate and CRLs.
        /// </summary>
        [Input("accessUrls")]
        public Input<Inputs.AccessUrlsArgs>? AccessUrls { get; set; }

        [Input("caCertificateDescriptions")]
        private InputList<Inputs.CertificateDescriptionArgs>? _caCertificateDescriptions;

        /// <summary>
        /// Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
        /// </summary>
        public InputList<Inputs.CertificateDescriptionArgs> CaCertificateDescriptions
        {
            get => _caCertificateDescriptions ?? (_caCertificateDescriptions = new InputList<Inputs.CertificateDescriptionArgs>());
            set => _caCertificateDescriptions = value;
        }

        /// <summary>
        /// Optional. The CertificateAuthorityPolicy to enforce when issuing Certificates from this CertificateAuthority.
        /// </summary>
        [Input("certificatePolicy")]
        public Input<Inputs.CertificateAuthorityPolicyArgs>? CertificatePolicy { get; set; }

        /// <summary>
        /// Required. Immutable. The config used to create a self-signed X.509 certificate or CSR.
        /// </summary>
        [Input("config")]
        public Input<Inputs.CertificateConfigArgs>? Config { get; set; }

        /// <summary>
        /// Output only. The time at which this CertificateAuthority was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Output only. The time at which this CertificateAuthority will be deleted, if scheduled for deletion.
        /// </summary>
        [Input("deleteTime")]
        public Input<string>? DeleteTime { get; set; }

        /// <summary>
        /// Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
        /// </summary>
        [Input("gcsBucket")]
        public Input<string>? GcsBucket { get; set; }

        /// <summary>
        /// Optional. The IssuingOptions to follow when issuing Certificates from this CertificateAuthority.
        /// </summary>
        [Input("issuingOptions")]
        public Input<Inputs.IssuingOptionsArgs>? IssuingOptions { get; set; }

        /// <summary>
        /// Required. Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
        /// </summary>
        [Input("keySpec")]
        public Input<Inputs.KeyVersionSpecArgs>? KeySpec { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels with user-defined metadata.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Required. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
        /// </summary>
        [Input("lifetime")]
        public Input<string>? Lifetime { get; set; }

        [Input("locationsId", required: true)]
        public Input<string> LocationsId { get; set; } = null!;

        /// <summary>
        /// Output only. The resource name for this CertificateAuthority in the format `projects/*/locations/*/certificateAuthorities/*`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pemCaCertificates")]
        private InputList<string>? _pemCaCertificates;

        /// <summary>
        /// Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
        /// </summary>
        public InputList<string> PemCaCertificates
        {
            get => _pemCaCertificates ?? (_pemCaCertificates = new InputList<string>());
            set => _pemCaCertificates = value;
        }

        [Input("projectsId", required: true)]
        public Input<string> ProjectsId { get; set; } = null!;

        /// <summary>
        /// Output only. The State for this CertificateAuthority.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Optional. If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which describes its issuers. This may be updated, but this CertificateAuthority must continue to validate.
        /// </summary>
        [Input("subordinateConfig")]
        public Input<Inputs.SubordinateConfigArgs>? SubordinateConfig { get; set; }

        /// <summary>
        /// Required. Immutable. The Tier of this CertificateAuthority.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// Required. Immutable. The Type of this CertificateAuthority.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Output only. The time at which this CertificateAuthority was updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public CertificateAuthorityArgs()
        {
        }
    }
}
