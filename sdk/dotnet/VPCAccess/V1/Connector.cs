// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.VPCAccess.V1
{
    /// <summary>
    /// Creates a Serverless VPC Access connector, returns an operation.
    /// </summary>
    [GoogleNativeResourceType("google-native:vpcaccess/v1:Connector")]
    public partial class Connector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of projects using the connector.
        /// </summary>
        [Output("connectedProjects")]
        public Output<ImmutableArray<string>> ConnectedProjects { get; private set; } = null!;

        /// <summary>
        /// Required. The ID to use for this connector.
        /// </summary>
        [Output("connectorId")]
        public Output<string> ConnectorId { get; private set; } = null!;

        /// <summary>
        /// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
        /// </summary>
        [Output("ipCidrRange")]
        public Output<string> IpCidrRange { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Machine type of VM Instance underlying connector. Default is e2-micro
        /// </summary>
        [Output("machineType")]
        public Output<string> MachineType { get; private set; } = null!;

        /// <summary>
        /// Maximum value of instances in autoscaling group underlying the connector.
        /// </summary>
        [Output("maxInstances")]
        public Output<int> MaxInstances { get; private set; } = null!;

        /// <summary>
        /// Maximum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 300 through 1000. Must be higher than the value specified by --min-throughput. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput. The use of `max-throughput` is discouraged in favor of `max-instances`.
        /// </summary>
        [Output("maxThroughput")]
        public Output<int> MaxThroughput { get; private set; } = null!;

        /// <summary>
        /// Minimum value of instances in autoscaling group underlying the connector.
        /// </summary>
        [Output("minInstances")]
        public Output<int> MinInstances { get; private set; } = null!;

        /// <summary>
        /// Minimum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by --max-throughput. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput. The use of `min-throughput` is discouraged in favor of `min-instances`.
        /// </summary>
        [Output("minThroughput")]
        public Output<int> MinThroughput { get; private set; } = null!;

        /// <summary>
        /// The resource name in the format `projects/*/locations/*/connectors/*`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Name of a VPC network.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// State of the VPC access connector.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The subnet in which to house the VPC Access Connector.
        /// </summary>
        [Output("subnet")]
        public Output<Outputs.SubnetResponse> Subnet { get; private set; } = null!;


        /// <summary>
        /// Create a Connector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connector(string name, ConnectorArgs args, CustomResourceOptions? options = null)
            : base("google-native:vpcaccess/v1:Connector", name, args ?? new ConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connector(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:vpcaccess/v1:Connector", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "connectorId",
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connector Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Connector(name, id, options);
        }
    }

    public sealed class ConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. The ID to use for this connector.
        /// </summary>
        [Input("connectorId", required: true)]
        public Input<string> ConnectorId { get; set; } = null!;

        /// <summary>
        /// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
        /// </summary>
        [Input("ipCidrRange")]
        public Input<string>? IpCidrRange { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Machine type of VM Instance underlying connector. Default is e2-micro
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// Maximum value of instances in autoscaling group underlying the connector.
        /// </summary>
        [Input("maxInstances")]
        public Input<int>? MaxInstances { get; set; }

        /// <summary>
        /// Maximum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 300 through 1000. Must be higher than the value specified by --min-throughput. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput. The use of `max-throughput` is discouraged in favor of `max-instances`.
        /// </summary>
        [Input("maxThroughput")]
        public Input<int>? MaxThroughput { get; set; }

        /// <summary>
        /// Minimum value of instances in autoscaling group underlying the connector.
        /// </summary>
        [Input("minInstances")]
        public Input<int>? MinInstances { get; set; }

        /// <summary>
        /// Minimum throughput of the connector in Mbps. Refers to the expected throughput when using an `e2-micro` machine type. Value must be a multiple of 100 from 200 through 900. Must be lower than the value specified by --max-throughput. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput. The use of `min-throughput` is discouraged in favor of `min-instances`.
        /// </summary>
        [Input("minThroughput")]
        public Input<int>? MinThroughput { get; set; }

        /// <summary>
        /// The resource name in the format `projects/*/locations/*/connectors/*`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name of a VPC network.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The subnet in which to house the VPC Access Connector.
        /// </summary>
        [Input("subnet")]
        public Input<Inputs.SubnetArgs>? Subnet { get; set; }

        public ConnectorArgs()
        {
        }
        public static new ConnectorArgs Empty => new ConnectorArgs();
    }
}
