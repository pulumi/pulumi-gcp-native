// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.AlloyDB.V1Alpha
{
    public static class GetBackup
    {
        /// <summary>
        /// Gets details of a single Backup.
        /// </summary>
        public static Task<GetBackupResult> InvokeAsync(GetBackupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupResult>("google-native:alloydb/v1alpha:getBackup", args ?? new GetBackupArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Backup.
        /// </summary>
        public static Output<GetBackupResult> Invoke(GetBackupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupResult>("google-native:alloydb/v1alpha:getBackup", args ?? new GetBackupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupArgs : global::Pulumi.InvokeArgs
    {
        [Input("backupId", required: true)]
        public string BackupId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetBackupArgs()
        {
        }
        public static new GetBackupArgs Empty => new GetBackupArgs();
    }

    public sealed class GetBackupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("backupId", required: true)]
        public Input<string> BackupId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetBackupInvokeArgs()
        {
        }
        public static new GetBackupInvokeArgs Empty => new GetBackupInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupResult
    {
        /// <summary>
        /// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// The full resource name of the backup source cluster (e.g., projects/{project}/locations/{region}/clusters/{cluster_id}).
        /// </summary>
        public readonly string ClusterName;
        /// <summary>
        /// The system-generated UID of the cluster which was used to create this resource.
        /// </summary>
        public readonly string ClusterUid;
        /// <summary>
        /// Create time stamp
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The database engine major version of the cluster this backup was created from. Any restored cluster created from this backup will have the same database version.
        /// </summary>
        public readonly string DatabaseVersion;
        /// <summary>
        /// Delete time stamp
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// User-provided description of the backup.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User-settable and human-readable display name for the Backup.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Optional. The encryption config can be specified to encrypt the backup with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
        /// </summary>
        public readonly Outputs.EncryptionConfigResponse EncryptionConfig;
        /// <summary>
        /// The encryption information for the backup.
        /// </summary>
        public readonly Outputs.EncryptionInfoResponse EncryptionInfo;
        /// <summary>
        /// For Resource freshness validation (https://google.aip.dev/154)
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The QuantityBasedExpiry of the backup, specified by the backup's retention policy. Once the expiry quantity is over retention, the backup is eligible to be garbage collected.
        /// </summary>
        public readonly Outputs.QuantityBasedExpiryResponse ExpiryQuantity;
        /// <summary>
        /// The time at which after the backup is eligible to be garbage collected. It is the duration specified by the backup's retention policy, added to the backup's create_time.
        /// </summary>
        public readonly string ExpiryTime;
        /// <summary>
        /// Labels as key value pairs
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backup_id} where the cluster and backup ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the backup resource name is the name of the parent resource: * projects/{project}/locations/{region}
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Reconciling (https://google.aip.dev/128#reconciliation), if true, indicates that the service is actively updating the resource. This can happen due to user-triggered updates or system actions like failover or maintenance.
        /// </summary>
        public readonly bool Reconciling;
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        public readonly bool SatisfiesPzs;
        /// <summary>
        /// The size of the backup in bytes.
        /// </summary>
        public readonly string SizeBytes;
        /// <summary>
        /// The current state of the backup.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The backup type, which suggests the trigger for the backup.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// Update time stamp
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetBackupResult(
            ImmutableDictionary<string, string> annotations,

            string clusterName,

            string clusterUid,

            string createTime,

            string databaseVersion,

            string deleteTime,

            string description,

            string displayName,

            Outputs.EncryptionConfigResponse encryptionConfig,

            Outputs.EncryptionInfoResponse encryptionInfo,

            string etag,

            Outputs.QuantityBasedExpiryResponse expiryQuantity,

            string expiryTime,

            ImmutableDictionary<string, string> labels,

            string name,

            bool reconciling,

            bool satisfiesPzs,

            string sizeBytes,

            string state,

            string type,

            string uid,

            string updateTime)
        {
            Annotations = annotations;
            ClusterName = clusterName;
            ClusterUid = clusterUid;
            CreateTime = createTime;
            DatabaseVersion = databaseVersion;
            DeleteTime = deleteTime;
            Description = description;
            DisplayName = displayName;
            EncryptionConfig = encryptionConfig;
            EncryptionInfo = encryptionInfo;
            Etag = etag;
            ExpiryQuantity = expiryQuantity;
            ExpiryTime = expiryTime;
            Labels = labels;
            Name = name;
            Reconciling = reconciling;
            SatisfiesPzs = satisfiesPzs;
            SizeBytes = sizeBytes;
            State = state;
            Type = type;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
