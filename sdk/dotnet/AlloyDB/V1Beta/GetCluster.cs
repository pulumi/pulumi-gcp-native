// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.AlloyDB.V1Beta
{
    public static class GetCluster
    {
        /// <summary>
        /// Gets details of a single Cluster.
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("google-native:alloydb/v1beta:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Cluster.
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("google-native:alloydb/v1beta:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("view")]
        public string? View { get; set; }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("view")]
        public Input<string>? View { get; set; }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// The automated backup policy for this cluster. If no policy is provided then the default policy will be used. If backups are supported for the cluster, the default policy takes one backup a day, has a backup window of 1 hour, and retains backups for 14 days. For more information on the defaults, consult the documentation for the message type.
        /// </summary>
        public readonly Outputs.AutomatedBackupPolicyResponse AutomatedBackupPolicy;
        /// <summary>
        /// Cluster created from backup.
        /// </summary>
        public readonly Outputs.BackupSourceResponse BackupSource;
        /// <summary>
        /// The type of the cluster. This is an output-only field and it's populated at the Cluster creation time or the Cluster promotion time. The cluster type is determined by which RPC was used to create the cluster (i.e. `CreateCluster` vs. `CreateSecondaryCluster`
        /// </summary>
        public readonly string ClusterType;
        /// <summary>
        /// Optional. Continuous backup configuration for this cluster.
        /// </summary>
        public readonly Outputs.ContinuousBackupConfigResponse ContinuousBackupConfig;
        /// <summary>
        /// Continuous backup properties for this cluster.
        /// </summary>
        public readonly Outputs.ContinuousBackupInfoResponse ContinuousBackupInfo;
        /// <summary>
        /// Create time stamp
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
        /// </summary>
        public readonly string DatabaseVersion;
        /// <summary>
        /// Delete time stamp
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// User-settable and human-readable display name for the Cluster.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Optional. The encryption config can be specified to encrypt the data disks and other persistent data resources of a cluster with a customer-managed encryption key (CMEK). When this field is not specified, the cluster will then use default encryption scheme to protect the user data.
        /// </summary>
        public readonly Outputs.EncryptionConfigResponse EncryptionConfig;
        /// <summary>
        /// The encryption information for the cluster.
        /// </summary>
        public readonly Outputs.EncryptionInfoResponse EncryptionInfo;
        /// <summary>
        /// For Resource freshness validation (https://google.aip.dev/154)
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Input only. Initial user to setup during cluster creation. Required. If used in `RestoreCluster` this is ignored.
        /// </summary>
        public readonly Outputs.UserPasswordResponse InitialUser;
        /// <summary>
        /// Labels as key value pairs
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Cluster created via DMS migration.
        /// </summary>
        public readonly Outputs.MigrationSourceResponse MigrationSource;
        /// <summary>
        /// The name of the cluster resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id} where the cluster ID segment should satisfy the regex expression `[a-z0-9-]+`. For more details see https://google.aip.dev/122. The prefix of the cluster resource name is the name of the parent resource: * projects/{project}/locations/{region}
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project}/global/networks/{network_id}". This is required to create a cluster. Deprecated, use network_config.network instead.
        /// </summary>
        public readonly string Network;
        public readonly Outputs.NetworkConfigResponse NetworkConfig;
        /// <summary>
        /// Cross Region replication config specific to PRIMARY cluster.
        /// </summary>
        public readonly Outputs.PrimaryConfigResponse PrimaryConfig;
        /// <summary>
        /// Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Cluster does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
        /// </summary>
        public readonly bool Reconciling;
        /// <summary>
        /// Cross Region replication config specific to SECONDARY cluster.
        /// </summary>
        public readonly Outputs.SecondaryConfigResponse SecondaryConfig;
        /// <summary>
        /// SSL configuration for this AlloyDB cluster.
        /// </summary>
        public readonly Outputs.SslConfigResponse SslConfig;
        /// <summary>
        /// The current serving state of the cluster.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// Update time stamp
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetClusterResult(
            ImmutableDictionary<string, string> annotations,

            Outputs.AutomatedBackupPolicyResponse automatedBackupPolicy,

            Outputs.BackupSourceResponse backupSource,

            string clusterType,

            Outputs.ContinuousBackupConfigResponse continuousBackupConfig,

            Outputs.ContinuousBackupInfoResponse continuousBackupInfo,

            string createTime,

            string databaseVersion,

            string deleteTime,

            string displayName,

            Outputs.EncryptionConfigResponse encryptionConfig,

            Outputs.EncryptionInfoResponse encryptionInfo,

            string etag,

            Outputs.UserPasswordResponse initialUser,

            ImmutableDictionary<string, string> labels,

            Outputs.MigrationSourceResponse migrationSource,

            string name,

            string network,

            Outputs.NetworkConfigResponse networkConfig,

            Outputs.PrimaryConfigResponse primaryConfig,

            bool reconciling,

            Outputs.SecondaryConfigResponse secondaryConfig,

            Outputs.SslConfigResponse sslConfig,

            string state,

            string uid,

            string updateTime)
        {
            Annotations = annotations;
            AutomatedBackupPolicy = automatedBackupPolicy;
            BackupSource = backupSource;
            ClusterType = clusterType;
            ContinuousBackupConfig = continuousBackupConfig;
            ContinuousBackupInfo = continuousBackupInfo;
            CreateTime = createTime;
            DatabaseVersion = databaseVersion;
            DeleteTime = deleteTime;
            DisplayName = displayName;
            EncryptionConfig = encryptionConfig;
            EncryptionInfo = encryptionInfo;
            Etag = etag;
            InitialUser = initialUser;
            Labels = labels;
            MigrationSource = migrationSource;
            Name = name;
            Network = network;
            NetworkConfig = networkConfig;
            PrimaryConfig = primaryConfig;
            Reconciling = reconciling;
            SecondaryConfig = secondaryConfig;
            SslConfig = sslConfig;
            State = state;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
