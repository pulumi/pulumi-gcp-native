// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataproc.V1
{
    public static class GetSession
    {
        /// <summary>
        /// Gets the resource representation for an interactive session.
        /// </summary>
        public static Task<GetSessionResult> InvokeAsync(GetSessionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSessionResult>("google-native:dataproc/v1:getSession", args ?? new GetSessionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the resource representation for an interactive session.
        /// </summary>
        public static Output<GetSessionResult> Invoke(GetSessionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSessionResult>("google-native:dataproc/v1:getSession", args ?? new GetSessionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSessionArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("sessionId", required: true)]
        public string SessionId { get; set; } = null!;

        public GetSessionArgs()
        {
        }
        public static new GetSessionArgs Empty => new GetSessionArgs();
    }

    public sealed class GetSessionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("sessionId", required: true)]
        public Input<string> SessionId { get; set; } = null!;

        public GetSessionInvokeArgs()
        {
        }
        public static new GetSessionInvokeArgs Empty => new GetSessionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSessionResult
    {
        /// <summary>
        /// The time when the session was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The email address of the user who created the session.
        /// </summary>
        public readonly string Creator;
        /// <summary>
        /// Optional. Environment configuration for the session execution.
        /// </summary>
        public readonly Outputs.EnvironmentConfigResponse EnvironmentConfig;
        /// <summary>
        /// Optional. Jupyter session config.
        /// </summary>
        public readonly Outputs.JupyterConfigResponse JupyterSession;
        /// <summary>
        /// Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The resource name of the session.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. Runtime configuration for the session execution.
        /// </summary>
        public readonly Outputs.RuntimeConfigResponse RuntimeConfig;
        /// <summary>
        /// Runtime information about session execution.
        /// </summary>
        public readonly Outputs.RuntimeInfoResponse RuntimeInfo;
        /// <summary>
        /// Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
        /// </summary>
        public readonly string SessionTemplate;
        /// <summary>
        /// A state of the session.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Historical state information for the session.
        /// </summary>
        public readonly ImmutableArray<Outputs.SessionStateHistoryResponse> StateHistory;
        /// <summary>
        /// Session state details, such as the failure description if the state is FAILED.
        /// </summary>
        public readonly string StateMessage;
        /// <summary>
        /// The time when the session entered the current state.
        /// </summary>
        public readonly string StateTime;
        /// <summary>
        /// Optional. The email address of the user who owns the session.
        /// </summary>
        public readonly string User;
        /// <summary>
        /// A session UUID (Unique Universal Identifier). The service generates this value when it creates the session.
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetSessionResult(
            string createTime,

            string creator,

            Outputs.EnvironmentConfigResponse environmentConfig,

            Outputs.JupyterConfigResponse jupyterSession,

            ImmutableDictionary<string, string> labels,

            string name,

            Outputs.RuntimeConfigResponse runtimeConfig,

            Outputs.RuntimeInfoResponse runtimeInfo,

            string sessionTemplate,

            string state,

            ImmutableArray<Outputs.SessionStateHistoryResponse> stateHistory,

            string stateMessage,

            string stateTime,

            string user,

            string uuid)
        {
            CreateTime = createTime;
            Creator = creator;
            EnvironmentConfig = environmentConfig;
            JupyterSession = jupyterSession;
            Labels = labels;
            Name = name;
            RuntimeConfig = runtimeConfig;
            RuntimeInfo = runtimeInfo;
            SessionTemplate = sessionTemplate;
            State = state;
            StateHistory = stateHistory;
            StateMessage = stateMessage;
            StateTime = stateTime;
            User = user;
            Uuid = uuid;
        }
    }
}
