// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Dataproc.V1.Outputs
{

    /// <summary>
    /// The cluster config.
    /// </summary>
    [OutputType]
    public sealed class ClusterConfigResponse
    {
        /// <summary>
        /// Optional. Autoscaling config for the policy associated with the cluster. Cluster does not autoscale if this field is unset.
        /// </summary>
        public readonly Outputs.AutoscalingConfigResponse AutoscalingConfig;
        /// <summary>
        /// Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
        /// </summary>
        public readonly string ConfigBucket;
        /// <summary>
        /// Optional. The configuration(s) for a dataproc metric(s).
        /// </summary>
        public readonly Outputs.DataprocMetricConfigResponse DataprocMetricConfig;
        /// <summary>
        /// Optional. Encryption settings for the cluster.
        /// </summary>
        public readonly Outputs.EncryptionConfigResponse EncryptionConfig;
        /// <summary>
        /// Optional. Port/endpoint configuration for this cluster
        /// </summary>
        public readonly Outputs.EndpointConfigResponse EndpointConfig;
        /// <summary>
        /// Optional. The shared Compute Engine config settings for all instances in a cluster.
        /// </summary>
        public readonly Outputs.GceClusterConfigResponse GceClusterConfig;
        /// <summary>
        /// Optional. Deprecated. Use VirtualClusterConfig based clusters instead. BETA. The Kubernetes Engine config for Dataproc clusters deployed to Kubernetes. Setting this is considered mutually exclusive with Compute Engine-based options such as gce_cluster_config, master_config, worker_config, secondary_worker_config, and autoscaling_config.
        /// </summary>
        public readonly Outputs.GkeClusterConfigResponse GkeClusterConfig;
        /// <summary>
        /// Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ "${ROLE}" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi 
        /// </summary>
        public readonly ImmutableArray<Outputs.NodeInitializationActionResponse> InitializationActions;
        /// <summary>
        /// Optional. Lifecycle setting for the cluster.
        /// </summary>
        public readonly Outputs.LifecycleConfigResponse LifecycleConfig;
        /// <summary>
        /// Optional. The Compute Engine config settings for the cluster's master instance.
        /// </summary>
        public readonly Outputs.InstanceGroupConfigResponse MasterConfig;
        /// <summary>
        /// Optional. Metastore configuration.
        /// </summary>
        public readonly Outputs.MetastoreConfigResponse MetastoreConfig;
        /// <summary>
        /// Optional. The Compute Engine config settings for a cluster's secondary worker instances
        /// </summary>
        public readonly Outputs.InstanceGroupConfigResponse SecondaryWorkerConfig;
        /// <summary>
        /// Optional. Security settings for the cluster.
        /// </summary>
        public readonly Outputs.SecurityConfigResponse SecurityConfig;
        /// <summary>
        /// Optional. The config settings for cluster software.
        /// </summary>
        public readonly Outputs.SoftwareConfigResponse SoftwareConfig;
        /// <summary>
        /// Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
        /// </summary>
        public readonly string TempBucket;
        /// <summary>
        /// Optional. The Compute Engine config settings for the cluster's worker instances.
        /// </summary>
        public readonly Outputs.InstanceGroupConfigResponse WorkerConfig;

        [OutputConstructor]
        private ClusterConfigResponse(
            Outputs.AutoscalingConfigResponse autoscalingConfig,

            string configBucket,

            Outputs.DataprocMetricConfigResponse dataprocMetricConfig,

            Outputs.EncryptionConfigResponse encryptionConfig,

            Outputs.EndpointConfigResponse endpointConfig,

            Outputs.GceClusterConfigResponse gceClusterConfig,

            Outputs.GkeClusterConfigResponse gkeClusterConfig,

            ImmutableArray<Outputs.NodeInitializationActionResponse> initializationActions,

            Outputs.LifecycleConfigResponse lifecycleConfig,

            Outputs.InstanceGroupConfigResponse masterConfig,

            Outputs.MetastoreConfigResponse metastoreConfig,

            Outputs.InstanceGroupConfigResponse secondaryWorkerConfig,

            Outputs.SecurityConfigResponse securityConfig,

            Outputs.SoftwareConfigResponse softwareConfig,

            string tempBucket,

            Outputs.InstanceGroupConfigResponse workerConfig)
        {
            AutoscalingConfig = autoscalingConfig;
            ConfigBucket = configBucket;
            DataprocMetricConfig = dataprocMetricConfig;
            EncryptionConfig = encryptionConfig;
            EndpointConfig = endpointConfig;
            GceClusterConfig = gceClusterConfig;
            GkeClusterConfig = gkeClusterConfig;
            InitializationActions = initializationActions;
            LifecycleConfig = lifecycleConfig;
            MasterConfig = masterConfig;
            MetastoreConfig = metastoreConfig;
            SecondaryWorkerConfig = secondaryWorkerConfig;
            SecurityConfig = securityConfig;
            SoftwareConfig = softwareConfig;
            TempBucket = tempBucket;
            WorkerConfig = workerConfig;
        }
    }
}
