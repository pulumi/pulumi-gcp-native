// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudBuild.V2
{
    public static class GetConnection
    {
        /// <summary>
        /// Gets details of a single connection.
        /// </summary>
        public static Task<GetConnectionResult> InvokeAsync(GetConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionResult>("google-native:cloudbuild/v2:getConnection", args ?? new GetConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single connection.
        /// </summary>
        public static Output<GetConnectionResult> Invoke(GetConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionResult>("google-native:cloudbuild/v2:getConnection", args ?? new GetConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId", required: true)]
        public string ConnectionId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetConnectionArgs()
        {
        }
        public static new GetConnectionArgs Empty => new GetConnectionArgs();
    }

    public sealed class GetConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetConnectionInvokeArgs()
        {
        }
        public static new GetConnectionInvokeArgs Empty => new GetConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionResult
    {
        /// <summary>
        /// Allows clients to store small amounts of arbitrary data.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// Server assigned timestamp for when the connection was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Configuration for connections to github.com.
        /// </summary>
        public readonly Outputs.GitHubConfigResponse GithubConfig;
        /// <summary>
        /// Configuration for connections to an instance of GitHub Enterprise.
        /// </summary>
        public readonly Outputs.GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse GithubEnterpriseConfig;
        /// <summary>
        /// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
        /// </summary>
        public readonly Outputs.GoogleDevtoolsCloudbuildV2GitLabConfigResponse GitlabConfig;
        /// <summary>
        /// Installation state of the Connection.
        /// </summary>
        public readonly Outputs.InstallationStateResponse InstallationState;
        /// <summary>
        /// Immutable. The resource name of the connection, in the format `projects/{project}/locations/{location}/connections/{connection_id}`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Set to true when the connection is being set up or updated in the background.
        /// </summary>
        public readonly bool Reconciling;
        /// <summary>
        /// Server assigned timestamp for when the connection was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetConnectionResult(
            ImmutableDictionary<string, string> annotations,

            string createTime,

            bool disabled,

            string etag,

            Outputs.GitHubConfigResponse githubConfig,

            Outputs.GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse githubEnterpriseConfig,

            Outputs.GoogleDevtoolsCloudbuildV2GitLabConfigResponse gitlabConfig,

            Outputs.InstallationStateResponse installationState,

            string name,

            bool reconciling,

            string updateTime)
        {
            Annotations = annotations;
            CreateTime = createTime;
            Disabled = disabled;
            Etag = etag;
            GithubConfig = githubConfig;
            GithubEnterpriseConfig = githubEnterpriseConfig;
            GitlabConfig = gitlabConfig;
            InstallationState = installationState;
            Name = name;
            Reconciling = reconciling;
            UpdateTime = updateTime;
        }
    }
}
