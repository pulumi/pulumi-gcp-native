// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudBuild.V2
{
    public static class GetRepository
    {
        /// <summary>
        /// Gets details of a single repository.
        /// </summary>
        public static Task<GetRepositoryResult> InvokeAsync(GetRepositoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryResult>("google-native:cloudbuild/v2:getRepository", args ?? new GetRepositoryArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single repository.
        /// </summary>
        public static Output<GetRepositoryResult> Invoke(GetRepositoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryResult>("google-native:cloudbuild/v2:getRepository", args ?? new GetRepositoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId", required: true)]
        public string ConnectionId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryArgs()
        {
        }
        public static new GetRepositoryArgs Empty => new GetRepositoryArgs();
    }

    public sealed class GetRepositoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryInvokeArgs()
        {
        }
        public static new GetRepositoryInvokeArgs Empty => new GetRepositoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryResult
    {
        /// <summary>
        /// Allows clients to store small amounts of arbitrary data.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// Server assigned timestamp for when the connection was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Immutable. Resource name of the repository, in the format `projects/*/locations/*/connections/*/repositories/*`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Git Clone HTTPS URI.
        /// </summary>
        public readonly string RemoteUri;
        /// <summary>
        /// Server assigned timestamp for when the connection was updated.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// External ID of the webhook created for the repository.
        /// </summary>
        public readonly string WebhookId;

        [OutputConstructor]
        private GetRepositoryResult(
            ImmutableDictionary<string, string> annotations,

            string createTime,

            string etag,

            string name,

            string remoteUri,

            string updateTime,

            string webhookId)
        {
            Annotations = annotations;
            CreateTime = createTime;
            Etag = etag;
            Name = name;
            RemoteUri = remoteUri;
            UpdateTime = updateTime;
            WebhookId = webhookId;
        }
    }
}
