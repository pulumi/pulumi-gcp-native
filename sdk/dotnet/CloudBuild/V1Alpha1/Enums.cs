// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.CloudBuild.V1Alpha1
{
    [EnumType]
    public readonly struct WorkerPoolRegionsItem : IEquatable<WorkerPoolRegionsItem>
    {
        private readonly string _value;

        private WorkerPoolRegionsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// no region
        /// </summary>
        public static WorkerPoolRegionsItem RegionUnspecified { get; } = new WorkerPoolRegionsItem("REGION_UNSPECIFIED");
        /// <summary>
        /// us-central1 region
        /// </summary>
        public static WorkerPoolRegionsItem UsCentral1 { get; } = new WorkerPoolRegionsItem("us-central1");
        /// <summary>
        /// us-west1 region
        /// </summary>
        public static WorkerPoolRegionsItem UsWest1 { get; } = new WorkerPoolRegionsItem("us-west1");
        /// <summary>
        /// us-east1 region
        /// </summary>
        public static WorkerPoolRegionsItem UsEast1 { get; } = new WorkerPoolRegionsItem("us-east1");
        /// <summary>
        /// us-east4 region
        /// </summary>
        public static WorkerPoolRegionsItem UsEast4 { get; } = new WorkerPoolRegionsItem("us-east4");

        public static bool operator ==(WorkerPoolRegionsItem left, WorkerPoolRegionsItem right) => left.Equals(right);
        public static bool operator !=(WorkerPoolRegionsItem left, WorkerPoolRegionsItem right) => !left.Equals(right);

        public static explicit operator string(WorkerPoolRegionsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkerPoolRegionsItem other && Equals(other);
        public bool Equals(WorkerPoolRegionsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Output only. WorkerPool Status.
    /// </summary>
    [EnumType]
    public readonly struct WorkerPoolStatus : IEquatable<WorkerPoolStatus>
    {
        private readonly string _value;

        private WorkerPoolStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Status of the `WorkerPool` is unknown.
        /// </summary>
        public static WorkerPoolStatus StatusUnspecified { get; } = new WorkerPoolStatus("STATUS_UNSPECIFIED");
        /// <summary>
        /// `WorkerPool` is being created.
        /// </summary>
        public static WorkerPoolStatus Creating { get; } = new WorkerPoolStatus("CREATING");
        /// <summary>
        /// `WorkerPool` is running.
        /// </summary>
        public static WorkerPoolStatus Running { get; } = new WorkerPoolStatus("RUNNING");
        /// <summary>
        /// `WorkerPool` is being deleted: cancelling builds and draining workers.
        /// </summary>
        public static WorkerPoolStatus Deleting { get; } = new WorkerPoolStatus("DELETING");
        /// <summary>
        /// `WorkerPool` is deleted.
        /// </summary>
        public static WorkerPoolStatus Deleted { get; } = new WorkerPoolStatus("DELETED");

        public static bool operator ==(WorkerPoolStatus left, WorkerPoolStatus right) => left.Equals(right);
        public static bool operator !=(WorkerPoolStatus left, WorkerPoolStatus right) => !left.Equals(right);

        public static explicit operator string(WorkerPoolStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkerPoolStatus other && Equals(other);
        public bool Equals(WorkerPoolStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
