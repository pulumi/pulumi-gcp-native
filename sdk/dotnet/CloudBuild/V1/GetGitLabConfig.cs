// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudBuild.V1
{
    public static class GetGitLabConfig
    {
        /// <summary>
        /// Retrieves a `GitLabConfig`. This API is experimental
        /// </summary>
        public static Task<GetGitLabConfigResult> InvokeAsync(GetGitLabConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitLabConfigResult>("google-native:cloudbuild/v1:getGitLabConfig", args ?? new GetGitLabConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a `GitLabConfig`. This API is experimental
        /// </summary>
        public static Output<GetGitLabConfigResult> Invoke(GetGitLabConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitLabConfigResult>("google-native:cloudbuild/v1:getGitLabConfig", args ?? new GetGitLabConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitLabConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("gitLabConfigId", required: true)]
        public string GitLabConfigId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetGitLabConfigArgs()
        {
        }
        public static new GetGitLabConfigArgs Empty => new GetGitLabConfigArgs();
    }

    public sealed class GetGitLabConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("gitLabConfigId", required: true)]
        public Input<string> GitLabConfigId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetGitLabConfigInvokeArgs()
        {
        }
        public static new GetGitLabConfigInvokeArgs Empty => new GetGitLabConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitLabConfigResult
    {
        /// <summary>
        /// Connected GitLab.com or GitLabEnterprise repositories for this config.
        /// </summary>
        public readonly ImmutableArray<Outputs.GitLabRepositoryIdResponse> ConnectedRepositories;
        /// <summary>
        /// Time when the config was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. GitLabEnterprise config.
        /// </summary>
        public readonly Outputs.GitLabEnterpriseConfigResponse EnterpriseConfig;
        /// <summary>
        /// The resource name for the config.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Secret Manager secrets needed by the config.
        /// </summary>
        public readonly Outputs.GitLabSecretsResponse Secrets;
        /// <summary>
        /// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// UUID included in webhook requests. The UUID is used to look up the corresponding config.
        /// </summary>
        public readonly string WebhookKey;

        [OutputConstructor]
        private GetGitLabConfigResult(
            ImmutableArray<Outputs.GitLabRepositoryIdResponse> connectedRepositories,

            string createTime,

            Outputs.GitLabEnterpriseConfigResponse enterpriseConfig,

            string name,

            Outputs.GitLabSecretsResponse secrets,

            string username,

            string webhookKey)
        {
            ConnectedRepositories = connectedRepositories;
            CreateTime = createTime;
            EnterpriseConfig = enterpriseConfig;
            Name = name;
            Secrets = secrets;
            Username = username;
            WebhookKey = webhookKey;
        }
    }
}
