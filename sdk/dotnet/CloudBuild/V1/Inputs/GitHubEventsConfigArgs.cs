// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudBuild.V1.Inputs
{

    /// <summary>
    /// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
    /// </summary>
    public sealed class GitHubEventsConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
        /// </summary>
        [Input("enterpriseConfigResourceName")]
        public Input<string>? EnterpriseConfigResourceName { get; set; }

        /// <summary>
        /// The installationID that emits the GitHub event.
        /// </summary>
        [Input("installationId")]
        public Input<string>? InstallationId { get; set; }

        /// <summary>
        /// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// filter to match changes in pull requests.
        /// </summary>
        [Input("pullRequest")]
        public Input<Inputs.PullRequestFilterArgs>? PullRequest { get; set; }

        /// <summary>
        /// filter to match changes in refs like branches, tags.
        /// </summary>
        [Input("push")]
        public Input<Inputs.PushFilterArgs>? Push { get; set; }

        public GitHubEventsConfigArgs()
        {
        }
        public static new GitHubEventsConfigArgs Empty => new GitHubEventsConfigArgs();
    }
}
