// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudBuild.V1
{
    /// <summary>
    /// Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).
    /// Auto-naming is currently not supported for this resource.
    /// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
    /// on Google Cloud even though it will be deleted from Pulumi state.
    /// </summary>
    [GoogleNativeResourceType("google-native:cloudbuild/v1:Build")]
    public partial class Build : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Describes this build's approval configuration, status, and result.
        /// </summary>
        [Output("approval")]
        public Output<Outputs.BuildApprovalResponse> Approval { get; private set; } = null!;

        /// <summary>
        /// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
        /// </summary>
        [Output("artifacts")]
        public Output<Outputs.ArtifactsResponse> Artifacts { get; private set; } = null!;

        /// <summary>
        /// Secrets and secret environment variables.
        /// </summary>
        [Output("availableSecrets")]
        public Output<Outputs.SecretsResponse> AvailableSecrets { get; private set; } = null!;

        /// <summary>
        /// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
        /// </summary>
        [Output("buildTriggerId")]
        public Output<string> BuildTriggerId { get; private set; } = null!;

        /// <summary>
        /// Time at which the request to create the build was received.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Contains information about the build when status=FAILURE.
        /// </summary>
        [Output("failureInfo")]
        public Output<Outputs.FailureInfoResponse> FailureInfo { get; private set; } = null!;

        /// <summary>
        /// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
        /// </summary>
        [Output("finishTime")]
        public Output<string> FinishTime { get; private set; } = null!;

        /// <summary>
        /// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
        /// </summary>
        [Output("images")]
        public Output<ImmutableArray<string>> Images { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// URL to logs for this build in Google Cloud Console.
        /// </summary>
        [Output("logUrl")]
        public Output<string> LogUrl { get; private set; } = null!;

        /// <summary>
        /// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
        /// </summary>
        [Output("logsBucket")]
        public Output<string> LogsBucket { get; private set; } = null!;

        /// <summary>
        /// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Special options for this build.
        /// </summary>
        [Output("options")]
        public Output<Outputs.BuildOptionsResponse> Options { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Required. ID of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
        /// </summary>
        [Output("queueTtl")]
        public Output<string> QueueTtl { get; private set; } = null!;

        /// <summary>
        /// Results of the build.
        /// </summary>
        [Output("results")]
        public Output<Outputs.ResultsResponse> Results { get; private set; } = null!;

        /// <summary>
        /// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.SecretResponse>> Secrets { get; private set; } = null!;

        /// <summary>
        /// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 
        /// </summary>
        [Output("serviceAccount")]
        public Output<string> ServiceAccount { get; private set; } = null!;

        /// <summary>
        /// The location of the source files to build.
        /// </summary>
        [Output("source")]
        public Output<Outputs.SourceResponse> Source { get; private set; } = null!;

        /// <summary>
        /// A permanent fixed identifier for source.
        /// </summary>
        [Output("sourceProvenance")]
        public Output<Outputs.SourceProvenanceResponse> SourceProvenance { get; private set; } = null!;

        /// <summary>
        /// Time at which execution of the build was started.
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// Status of the build.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Customer-readable message about the current status.
        /// </summary>
        [Output("statusDetail")]
        public Output<string> StatusDetail { get; private set; } = null!;

        /// <summary>
        /// The operations to be performed on the workspace.
        /// </summary>
        [Output("steps")]
        public Output<ImmutableArray<Outputs.BuildStepResponse>> Steps { get; private set; } = null!;

        /// <summary>
        /// Substitutions data for `Build` resource.
        /// </summary>
        [Output("substitutions")]
        public Output<ImmutableDictionary<string, string>> Substitutions { get; private set; } = null!;

        /// <summary>
        /// Tags for annotation of a `Build`. These are not docker tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
        /// </summary>
        [Output("timeout")]
        public Output<string> Timeout { get; private set; } = null!;

        /// <summary>
        /// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
        /// </summary>
        [Output("timing")]
        public Output<ImmutableDictionary<string, Outputs.TimeSpanResponse>> Timing { get; private set; } = null!;

        /// <summary>
        /// Non-fatal problems encountered during the execution of the build.
        /// </summary>
        [Output("warnings")]
        public Output<ImmutableArray<Outputs.WarningResponse>> Warnings { get; private set; } = null!;


        /// <summary>
        /// Create a Build resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Build(string name, BuildArgs args, CustomResourceOptions? options = null)
            : base("google-native:cloudbuild/v1:Build", name, args ?? new BuildArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Build(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:cloudbuild/v1:Build", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                    "projectId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Build resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Build Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Build(name, id, options);
        }
    }

    public sealed class BuildArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
        /// </summary>
        [Input("artifacts")]
        public Input<Inputs.ArtifactsArgs>? Artifacts { get; set; }

        /// <summary>
        /// Secrets and secret environment variables.
        /// </summary>
        [Input("availableSecrets")]
        public Input<Inputs.SecretsArgs>? AvailableSecrets { get; set; }

        [Input("images")]
        private InputList<string>? _images;

        /// <summary>
        /// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
        /// </summary>
        public InputList<string> Images
        {
            get => _images ?? (_images = new InputList<string>());
            set => _images = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
        /// </summary>
        [Input("logsBucket")]
        public Input<string>? LogsBucket { get; set; }

        /// <summary>
        /// Special options for this build.
        /// </summary>
        [Input("options")]
        public Input<Inputs.BuildOptionsArgs>? Options { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Required. ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
        /// </summary>
        [Input("queueTtl")]
        public Input<string>? QueueTtl { get; set; }

        [Input("secrets")]
        private InputList<Inputs.SecretArgs>? _secrets;

        /// <summary>
        /// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
        /// </summary>
        public InputList<Inputs.SecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.SecretArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// The location of the source files to build.
        /// </summary>
        [Input("source")]
        public Input<Inputs.SourceArgs>? Source { get; set; }

        [Input("steps", required: true)]
        private InputList<Inputs.BuildStepArgs>? _steps;

        /// <summary>
        /// The operations to be performed on the workspace.
        /// </summary>
        public InputList<Inputs.BuildStepArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.BuildStepArgs>());
            set => _steps = value;
        }

        [Input("substitutions")]
        private InputMap<string>? _substitutions;

        /// <summary>
        /// Substitutions data for `Build` resource.
        /// </summary>
        public InputMap<string> Substitutions
        {
            get => _substitutions ?? (_substitutions = new InputMap<string>());
            set => _substitutions = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags for annotation of a `Build`. These are not docker tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public BuildArgs()
        {
        }
        public static new BuildArgs Empty => new BuildArgs();
    }
}
