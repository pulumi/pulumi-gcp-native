// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudBuild.V1
{
    /// <summary>
    /// Creates a new `BitbucketServerConfig`. This API is experimental.
    /// </summary>
    [GoogleNativeResourceType("google-native:cloudbuild/v1:BitbucketServerConfig")]
    public partial class BitbucketServerConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
        /// </summary>
        [Output("apiKey")]
        public Output<string> ApiKey { get; private set; } = null!;

        /// <summary>
        /// Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
        /// </summary>
        [Output("bitbucketServerConfigId")]
        public Output<string?> BitbucketServerConfigId { get; private set; } = null!;

        /// <summary>
        /// Connected Bitbucket Server repositories for this config.
        /// </summary>
        [Output("connectedRepositories")]
        public Output<ImmutableArray<Outputs.BitbucketServerRepositoryIdResponse>> ConnectedRepositories { get; private set; } = null!;

        /// <summary>
        /// Time when the config was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
        /// </summary>
        [Output("hostUri")]
        public Output<string> HostUri { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name for the config.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
        /// </summary>
        [Output("peeredNetwork")]
        public Output<string> PeeredNetwork { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Secret Manager secrets needed by the config.
        /// </summary>
        [Output("secrets")]
        public Output<Outputs.BitbucketServerSecretsResponse> Secrets { get; private set; } = null!;

        /// <summary>
        /// Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
        /// </summary>
        [Output("sslCa")]
        public Output<string> SslCa { get; private set; } = null!;

        /// <summary>
        /// Username of the account Cloud Build will use on Bitbucket Server.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// UUID included in webhook requests. The UUID is used to look up the corresponding config.
        /// </summary>
        [Output("webhookKey")]
        public Output<string> WebhookKey { get; private set; } = null!;


        /// <summary>
        /// Create a BitbucketServerConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BitbucketServerConfig(string name, BitbucketServerConfigArgs args, CustomResourceOptions? options = null)
            : base("google-native:cloudbuild/v1:BitbucketServerConfig", name, args ?? new BitbucketServerConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BitbucketServerConfig(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:cloudbuild/v1:BitbucketServerConfig", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BitbucketServerConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BitbucketServerConfig Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new BitbucketServerConfig(name, id, options);
        }
    }

    public sealed class BitbucketServerConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
        /// </summary>
        [Input("apiKey", required: true)]
        public Input<string> ApiKey { get; set; } = null!;

        /// <summary>
        /// Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
        /// </summary>
        [Input("bitbucketServerConfigId")]
        public Input<string>? BitbucketServerConfigId { get; set; }

        /// <summary>
        /// Time when the config was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
        /// </summary>
        [Input("hostUri", required: true)]
        public Input<string> HostUri { get; set; } = null!;

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name for the config.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
        /// </summary>
        [Input("peeredNetwork")]
        public Input<string>? PeeredNetwork { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Secret Manager secrets needed by the config.
        /// </summary>
        [Input("secrets", required: true)]
        public Input<Inputs.BitbucketServerSecretsArgs> Secrets { get; set; } = null!;

        /// <summary>
        /// Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
        /// </summary>
        [Input("sslCa")]
        public Input<string>? SslCa { get; set; }

        /// <summary>
        /// Username of the account Cloud Build will use on Bitbucket Server.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public BitbucketServerConfigArgs()
        {
        }
        public static new BitbucketServerConfigArgs Empty => new BitbucketServerConfigArgs();
    }
}
