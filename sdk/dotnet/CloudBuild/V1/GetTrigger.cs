// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudBuild.V1
{
    public static class GetTrigger
    {
        /// <summary>
        /// Returns information about a `BuildTrigger`. This API is experimental.
        /// </summary>
        public static Task<GetTriggerResult> InvokeAsync(GetTriggerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTriggerResult>("google-native:cloudbuild/v1:getTrigger", args ?? new GetTriggerArgs(), options.WithVersion());
    }


    public sealed class GetTriggerArgs : Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        [Input("triggerId", required: true)]
        public string TriggerId { get; set; } = null!;

        public GetTriggerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTriggerResult
    {
        /// <summary>
        /// Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
        /// </summary>
        public readonly bool Autodetect;
        /// <summary>
        /// Contents of the build template.
        /// </summary>
        public readonly Outputs.BuildResponse Build;
        /// <summary>
        /// Time when the trigger was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Human-readable description of this trigger.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// If true, the trigger will never automatically execute a build.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
        /// </summary>
        public readonly string Filename;
        /// <summary>
        /// Optional. A Common Expression Language string.
        /// </summary>
        public readonly string Filter;
        /// <summary>
        /// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
        /// </summary>
        public readonly Outputs.GitHubEventsConfigResponse Github;
        /// <summary>
        /// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
        /// </summary>
        public readonly ImmutableArray<string> IgnoredFiles;
        /// <summary>
        /// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
        /// </summary>
        public readonly ImmutableArray<string> IncludedFiles;
        /// <summary>
        /// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
        /// </summary>
        public readonly Outputs.PubsubConfigResponse PubsubConfig;
        /// <summary>
        /// The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
        /// </summary>
        public readonly string ResourceName;
        /// <summary>
        /// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Substitutions;
        /// <summary>
        /// Tags for annotation of a `BuildTrigger`
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
        /// </summary>
        public readonly Outputs.RepoSourceResponse TriggerTemplate;
        /// <summary>
        /// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
        /// </summary>
        public readonly Outputs.WebhookConfigResponse WebhookConfig;

        [OutputConstructor]
        private GetTriggerResult(
            bool autodetect,

            Outputs.BuildResponse build,

            string createTime,

            string description,

            bool disabled,

            string filename,

            string filter,

            Outputs.GitHubEventsConfigResponse github,

            ImmutableArray<string> ignoredFiles,

            ImmutableArray<string> includedFiles,

            string name,

            Outputs.PubsubConfigResponse pubsubConfig,

            string resourceName,

            ImmutableDictionary<string, string> substitutions,

            ImmutableArray<string> tags,

            Outputs.RepoSourceResponse triggerTemplate,

            Outputs.WebhookConfigResponse webhookConfig)
        {
            Autodetect = autodetect;
            Build = build;
            CreateTime = createTime;
            Description = description;
            Disabled = disabled;
            Filename = filename;
            Filter = filter;
            Github = github;
            IgnoredFiles = ignoredFiles;
            IncludedFiles = includedFiles;
            Name = name;
            PubsubConfig = pubsubConfig;
            ResourceName = resourceName;
            Substitutions = substitutions;
            Tags = tags;
            TriggerTemplate = triggerTemplate;
            WebhookConfig = webhookConfig;
        }
    }
}
