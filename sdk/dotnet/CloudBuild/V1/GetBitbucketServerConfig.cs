// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.GoogleNative.CloudBuild.V1
{
    public static class GetBitbucketServerConfig
    {
        /// <summary>
        /// Retrieve a `BitbucketServerConfig`. This API is experimental.
        /// </summary>
        public static Task<GetBitbucketServerConfigResult> InvokeAsync(GetBitbucketServerConfigArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBitbucketServerConfigResult>("google-native:cloudbuild/v1:getBitbucketServerConfig", args ?? new GetBitbucketServerConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve a `BitbucketServerConfig`. This API is experimental.
        /// </summary>
        public static Output<GetBitbucketServerConfigResult> Invoke(GetBitbucketServerConfigInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetBitbucketServerConfigResult>("google-native:cloudbuild/v1:getBitbucketServerConfig", args ?? new GetBitbucketServerConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBitbucketServerConfigArgs : Pulumi.InvokeArgs
    {
        [Input("bitbucketServerConfigId", required: true)]
        public string BitbucketServerConfigId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetBitbucketServerConfigArgs()
        {
        }
    }

    public sealed class GetBitbucketServerConfigInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("bitbucketServerConfigId", required: true)]
        public Input<string> BitbucketServerConfigId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetBitbucketServerConfigInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBitbucketServerConfigResult
    {
        /// <summary>
        /// Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
        /// </summary>
        public readonly string ApiKey;
        /// <summary>
        /// Connected Bitbucket Server repositories for this config.
        /// </summary>
        public readonly ImmutableArray<Outputs.BitbucketServerRepositoryIdResponse> ConnectedRepositories;
        /// <summary>
        /// Time when the config was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
        /// </summary>
        public readonly string HostUri;
        /// <summary>
        /// The resource name for the config.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
        /// </summary>
        public readonly string PeeredNetwork;
        /// <summary>
        /// Secret Manager secrets needed by the config.
        /// </summary>
        public readonly Outputs.BitbucketServerSecretsResponse Secrets;
        /// <summary>
        /// Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
        /// </summary>
        public readonly string SslCa;
        /// <summary>
        /// Username of the account Cloud Build will use on Bitbucket Server.
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// UUID included in webhook requests. The UUID is used to look up the corresponding config.
        /// </summary>
        public readonly string WebhookKey;

        [OutputConstructor]
        private GetBitbucketServerConfigResult(
            string apiKey,

            ImmutableArray<Outputs.BitbucketServerRepositoryIdResponse> connectedRepositories,

            string createTime,

            string hostUri,

            string name,

            string peeredNetwork,

            Outputs.BitbucketServerSecretsResponse secrets,

            string sslCa,

            string username,

            string webhookKey)
        {
            ApiKey = apiKey;
            ConnectedRepositories = connectedRepositories;
            CreateTime = createTime;
            HostUri = hostUri;
            Name = name;
            PeeredNetwork = peeredNetwork;
            Secrets = secrets;
            SslCa = sslCa;
            Username = username;
            WebhookKey = webhookKey;
        }
    }
}
