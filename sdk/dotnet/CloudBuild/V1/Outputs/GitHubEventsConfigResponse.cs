// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudBuild.V1.Outputs
{

    /// <summary>
    /// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
    /// </summary>
    [OutputType]
    public sealed class GitHubEventsConfigResponse
    {
        /// <summary>
        /// Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
        /// </summary>
        public readonly string EnterpriseConfigResourceName;
        /// <summary>
        /// The installationID that emits the GitHub event.
        /// </summary>
        public readonly string InstallationId;
        /// <summary>
        /// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// filter to match changes in pull requests.
        /// </summary>
        public readonly Outputs.PullRequestFilterResponse PullRequest;
        /// <summary>
        /// filter to match changes in refs like branches, tags.
        /// </summary>
        public readonly Outputs.PushFilterResponse Push;

        [OutputConstructor]
        private GitHubEventsConfigResponse(
            string enterpriseConfigResourceName,

            string installationId,

            string name,

            string owner,

            Outputs.PullRequestFilterResponse pullRequest,

            Outputs.PushFilterResponse push)
        {
            EnterpriseConfigResourceName = enterpriseConfigResourceName;
            InstallationId = installationId;
            Name = name;
            Owner = owner;
            PullRequest = pullRequest;
            Push = push;
        }
    }
}
