// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudBuild.V1
{
    /// <summary>
    /// Creates a new `GitLabConfig`. This API is experimental
    /// </summary>
    [GoogleNativeResourceType("google-native:cloudbuild/v1:GitLabConfig")]
    public partial class GitLabConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Connected GitLab.com or GitLabEnterprise repositories for this config.
        /// </summary>
        [Output("connectedRepositories")]
        public Output<ImmutableArray<Outputs.GitLabRepositoryIdResponse>> ConnectedRepositories { get; private set; } = null!;

        /// <summary>
        /// Time when the config was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Optional. GitLabEnterprise config.
        /// </summary>
        [Output("enterpriseConfig")]
        public Output<Outputs.GitLabEnterpriseConfigResponse> EnterpriseConfig { get; private set; } = null!;

        /// <summary>
        /// Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
        /// </summary>
        [Output("gitlabConfigId")]
        public Output<string?> GitlabConfigId { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name for the config.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Secret Manager secrets needed by the config.
        /// </summary>
        [Output("secrets")]
        public Output<Outputs.GitLabSecretsResponse> Secrets { get; private set; } = null!;

        /// <summary>
        /// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// UUID included in webhook requests. The UUID is used to look up the corresponding config.
        /// </summary>
        [Output("webhookKey")]
        public Output<string> WebhookKey { get; private set; } = null!;


        /// <summary>
        /// Create a GitLabConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitLabConfig(string name, GitLabConfigArgs args, CustomResourceOptions? options = null)
            : base("google-native:cloudbuild/v1:GitLabConfig", name, args ?? new GitLabConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitLabConfig(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:cloudbuild/v1:GitLabConfig", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitLabConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitLabConfig Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new GitLabConfig(name, id, options);
        }
    }

    public sealed class GitLabConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("connectedRepositories")]
        private InputList<Inputs.GitLabRepositoryIdArgs>? _connectedRepositories;

        /// <summary>
        /// Connected GitLab.com or GitLabEnterprise repositories for this config.
        /// </summary>
        public InputList<Inputs.GitLabRepositoryIdArgs> ConnectedRepositories
        {
            get => _connectedRepositories ?? (_connectedRepositories = new InputList<Inputs.GitLabRepositoryIdArgs>());
            set => _connectedRepositories = value;
        }

        /// <summary>
        /// Optional. GitLabEnterprise config.
        /// </summary>
        [Input("enterpriseConfig")]
        public Input<Inputs.GitLabEnterpriseConfigArgs>? EnterpriseConfig { get; set; }

        /// <summary>
        /// Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
        /// </summary>
        [Input("gitlabConfigId")]
        public Input<string>? GitlabConfigId { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource name for the config.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Secret Manager secrets needed by the config.
        /// </summary>
        [Input("secrets", required: true)]
        public Input<Inputs.GitLabSecretsArgs> Secrets { get; set; } = null!;

        /// <summary>
        /// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public GitLabConfigArgs()
        {
        }
        public static new GitLabConfigArgs Empty => new GitLabConfigArgs();
    }
}
