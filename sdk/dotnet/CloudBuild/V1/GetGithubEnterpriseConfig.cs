// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudBuild.V1
{
    public static class GetGithubEnterpriseConfig
    {
        /// <summary>
        /// Retrieve a GitHubEnterpriseConfig.
        /// </summary>
        public static Task<GetGithubEnterpriseConfigResult> InvokeAsync(GetGithubEnterpriseConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGithubEnterpriseConfigResult>("google-native:cloudbuild/v1:getGithubEnterpriseConfig", args ?? new GetGithubEnterpriseConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve a GitHubEnterpriseConfig.
        /// </summary>
        public static Output<GetGithubEnterpriseConfigResult> Invoke(GetGithubEnterpriseConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGithubEnterpriseConfigResult>("google-native:cloudbuild/v1:getGithubEnterpriseConfig", args ?? new GetGithubEnterpriseConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGithubEnterpriseConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("configId")]
        public string? ConfigId { get; set; }

        [Input("githubEnterpriseConfigId", required: true)]
        public string GithubEnterpriseConfigId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetGithubEnterpriseConfigArgs()
        {
        }
        public static new GetGithubEnterpriseConfigArgs Empty => new GetGithubEnterpriseConfigArgs();
    }

    public sealed class GetGithubEnterpriseConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("configId")]
        public Input<string>? ConfigId { get; set; }

        [Input("githubEnterpriseConfigId", required: true)]
        public Input<string> GithubEnterpriseConfigId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetGithubEnterpriseConfigInvokeArgs()
        {
        }
        public static new GetGithubEnterpriseConfigInvokeArgs Empty => new GetGithubEnterpriseConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetGithubEnterpriseConfigResult
    {
        /// <summary>
        /// The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
        /// </summary>
        public readonly string AppId;
        /// <summary>
        /// Time when the installation was associated with the project.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Name to display for this config.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The URL of the github enterprise host the configuration is for.
        /// </summary>
        public readonly string HostUrl;
        /// <summary>
        /// Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
        /// </summary>
        public readonly string PeeredNetwork;
        /// <summary>
        /// Names of secrets in Secret Manager.
        /// </summary>
        public readonly Outputs.GitHubEnterpriseSecretsResponse Secrets;
        /// <summary>
        /// Optional. SSL certificate to use for requests to GitHub Enterprise.
        /// </summary>
        public readonly string SslCa;
        /// <summary>
        /// The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
        /// </summary>
        public readonly string WebhookKey;

        [OutputConstructor]
        private GetGithubEnterpriseConfigResult(
            string appId,

            string createTime,

            string displayName,

            string hostUrl,

            string name,

            string peeredNetwork,

            Outputs.GitHubEnterpriseSecretsResponse secrets,

            string sslCa,

            string webhookKey)
        {
            AppId = appId;
            CreateTime = createTime;
            DisplayName = displayName;
            HostUrl = hostUrl;
            Name = name;
            PeeredNetwork = peeredNetwork;
            Secrets = secrets;
            SslCa = sslCa;
            WebhookKey = webhookKey;
        }
    }
}
