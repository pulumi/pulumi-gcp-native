// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Firestore.V1
{
    public static class GetDatabase
    {
        /// <summary>
        /// Gets information about a database.
        /// </summary>
        public static Task<GetDatabaseResult> InvokeAsync(GetDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("google-native:firestore/v1:getDatabase", args ?? new GetDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a database.
        /// </summary>
        public static Output<GetDatabaseResult> Invoke(GetDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseResult>("google-native:firestore/v1:getDatabase", args ?? new GetDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseArgs : global::Pulumi.InvokeArgs
    {
        [Input("databaseId", required: true)]
        public string DatabaseId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDatabaseArgs()
        {
        }
        public static new GetDatabaseArgs Empty => new GetDatabaseArgs();
    }

    public sealed class GetDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDatabaseInvokeArgs()
        {
        }
        public static new GetDatabaseInvokeArgs Empty => new GetDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseResult
    {
        /// <summary>
        /// The App Engine integration mode to use for this database.
        /// </summary>
        public readonly string AppEngineIntegrationMode;
        /// <summary>
        /// The concurrency control mode to use for this database.
        /// </summary>
        public readonly string ConcurrencyMode;
        /// <summary>
        /// The timestamp at which this database was created. Databases created before 2016 do not populate create_time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// State of delete protection for the database.
        /// </summary>
        public readonly string DeleteProtectionState;
        /// <summary>
        /// The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
        /// </summary>
        public readonly string EarliestVersionTime;
        /// <summary>
        /// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The key_prefix for this database. This key_prefix is used, in combination with the project id ("~") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
        /// </summary>
        public readonly string KeyPrefix;
        /// <summary>
        /// The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The resource name of the Database. Format: `projects/{project}/databases/{database}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Whether to enable the PITR feature on this database.
        /// </summary>
        public readonly string PointInTimeRecoveryEnablement;
        /// <summary>
        /// The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The system-generated UUID4 for this Database.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
        /// </summary>
        public readonly string VersionRetentionPeriod;

        [OutputConstructor]
        private GetDatabaseResult(
            string appEngineIntegrationMode,

            string concurrencyMode,

            string createTime,

            string deleteProtectionState,

            string earliestVersionTime,

            string etag,

            string keyPrefix,

            string location,

            string name,

            string pointInTimeRecoveryEnablement,

            string type,

            string uid,

            string updateTime,

            string versionRetentionPeriod)
        {
            AppEngineIntegrationMode = appEngineIntegrationMode;
            ConcurrencyMode = concurrencyMode;
            CreateTime = createTime;
            DeleteProtectionState = deleteProtectionState;
            EarliestVersionTime = earliestVersionTime;
            Etag = etag;
            KeyPrefix = keyPrefix;
            Location = location;
            Name = name;
            PointInTimeRecoveryEnablement = pointInTimeRecoveryEnablement;
            Type = type;
            Uid = uid;
            UpdateTime = updateTime;
            VersionRetentionPeriod = versionRetentionPeriod;
        }
    }
}
