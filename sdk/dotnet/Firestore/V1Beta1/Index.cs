// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Firestore.V1Beta1
{
    /// <summary>
    /// Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single field cannot be created.
    /// </summary>
    [GoogleNativeResourceType("google-native:firestore/v1beta1:Index")]
    public partial class Index : Pulumi.CustomResource
    {
        /// <summary>
        /// The collection ID to which this index applies. Required.
        /// </summary>
        [Output("collectionId")]
        public Output<string> CollectionId { get; private set; } = null!;

        [Output("databaseId")]
        public Output<string> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// The fields to index.
        /// </summary>
        [Output("fields")]
        public Output<ImmutableArray<Outputs.GoogleFirestoreAdminV1beta1IndexFieldResponse>> Fields { get; private set; } = null!;

        /// <summary>
        /// The resource name of the index. Output only.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The state of the index. Output only.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a Index resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Index(string name, IndexArgs args, CustomResourceOptions? options = null)
            : base("google-native:firestore/v1beta1:Index", name, args ?? new IndexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Index(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:firestore/v1beta1:Index", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "databaseId",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Index resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Index Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Index(name, id, options);
        }
    }

    public sealed class IndexArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The collection ID to which this index applies. Required.
        /// </summary>
        [Input("collectionId")]
        public Input<string>? CollectionId { get; set; }

        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        [Input("fields")]
        private InputList<Inputs.GoogleFirestoreAdminV1beta1IndexFieldArgs>? _fields;

        /// <summary>
        /// The fields to index.
        /// </summary>
        public InputList<Inputs.GoogleFirestoreAdminV1beta1IndexFieldArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.GoogleFirestoreAdminV1beta1IndexFieldArgs>());
            set => _fields = value;
        }

        /// <summary>
        /// The resource name of the index. Output only.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The state of the index. Output only.
        /// </summary>
        [Input("state")]
        public Input<Pulumi.GoogleNative.Firestore.V1Beta1.IndexState>? State { get; set; }

        public IndexArgs()
        {
        }
    }
}
