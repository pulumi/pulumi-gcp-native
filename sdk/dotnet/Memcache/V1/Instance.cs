// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Memcache.V1
{
    /// <summary>
    /// Creates a new Instance in a given location.
    /// </summary>
    [GoogleNativeResourceType("google-native:memcache/v1:Instance")]
    public partial class Instance : Pulumi.CustomResource
    {
        /// <summary>
        /// The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
        /// </summary>
        [Output("authorizedNetwork")]
        public Output<string> AuthorizedNetwork { get; private set; } = null!;

        /// <summary>
        /// The time the instance was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Endpoint for the Discovery API.
        /// </summary>
        [Output("discoveryEndpoint")]
        public Output<string> DiscoveryEndpoint { get; private set; } = null!;

        /// <summary>
        /// User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// List of messages that describe the current state of the Memcached instance.
        /// </summary>
        [Output("instanceMessages")]
        public Output<ImmutableArray<Outputs.InstanceMessageResponse>> InstanceMessages { get; private set; } = null!;

        /// <summary>
        /// Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be "memcached-1.5.16".
        /// </summary>
        [Output("memcacheFullVersion")]
        public Output<string> MemcacheFullVersion { get; private set; } = null!;

        /// <summary>
        /// List of Memcached nodes. Refer to Node message for more details.
        /// </summary>
        [Output("memcacheNodes")]
        public Output<ImmutableArray<Outputs.NodeResponse>> MemcacheNodes { get; private set; } = null!;

        /// <summary>
        /// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
        /// </summary>
        [Output("memcacheVersion")]
        public Output<string> MemcacheVersion { get; private set; } = null!;

        /// <summary>
        /// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configuration for Memcached nodes.
        /// </summary>
        [Output("nodeConfig")]
        public Output<Outputs.NodeConfigResponse> NodeConfig { get; private set; } = null!;

        /// <summary>
        /// Number of nodes in the Memcached instance.
        /// </summary>
        [Output("nodeCount")]
        public Output<int> NodeCount { get; private set; } = null!;

        /// <summary>
        /// User defined parameters to apply to the memcached process on each node.
        /// </summary>
        [Output("parameters")]
        public Output<Outputs.MemcacheParametersResponse> Parameters { get; private set; } = null!;

        /// <summary>
        /// The state of this Memcached instance.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The time the instance was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("google-native:memcache/v1:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:memcache/v1:Instance", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, options);
        }
    }

    public sealed class InstanceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
        /// </summary>
        [Input("authorizedNetwork")]
        public Input<string>? AuthorizedNetwork { get; set; }

        /// <summary>
        /// User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("instanceMessages")]
        private InputList<Inputs.InstanceMessageArgs>? _instanceMessages;

        /// <summary>
        /// List of messages that describe the current state of the Memcached instance.
        /// </summary>
        public InputList<Inputs.InstanceMessageArgs> InstanceMessages
        {
            get => _instanceMessages ?? (_instanceMessages = new InputList<Inputs.InstanceMessageArgs>());
            set => _instanceMessages = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
        /// </summary>
        [Input("memcacheVersion")]
        public Input<Pulumi.GoogleNative.Memcache.V1.InstanceMemcacheVersion>? MemcacheVersion { get; set; }

        /// <summary>
        /// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration for Memcached nodes.
        /// </summary>
        [Input("nodeConfig", required: true)]
        public Input<Inputs.NodeConfigArgs> NodeConfig { get; set; } = null!;

        /// <summary>
        /// Number of nodes in the Memcached instance.
        /// </summary>
        [Input("nodeCount", required: true)]
        public Input<int> NodeCount { get; set; } = null!;

        /// <summary>
        /// User defined parameters to apply to the memcached process on each node.
        /// </summary>
        [Input("parameters")]
        public Input<Inputs.MemcacheParametersArgs>? Parameters { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public InstanceArgs()
        {
        }
    }
}
