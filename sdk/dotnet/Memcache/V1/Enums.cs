// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Memcache.V1
{
    /// <summary>
    /// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
    /// </summary>
    [EnumType]
    public readonly struct InstanceMemcacheVersion : IEquatable<InstanceMemcacheVersion>
    {
        private readonly string _value;

        private InstanceMemcacheVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Memcache version is not specified by customer
        /// </summary>
        public static InstanceMemcacheVersion MemcacheVersionUnspecified { get; } = new InstanceMemcacheVersion("MEMCACHE_VERSION_UNSPECIFIED");
        /// <summary>
        /// Memcached 1.5 version.
        /// </summary>
        public static InstanceMemcacheVersion Memcache15 { get; } = new InstanceMemcacheVersion("MEMCACHE_1_5");
        /// <summary>
        /// Memcached 1.6.15 version.
        /// </summary>
        public static InstanceMemcacheVersion Memcache1615 { get; } = new InstanceMemcacheVersion("MEMCACHE_1_6_15");

        public static bool operator ==(InstanceMemcacheVersion left, InstanceMemcacheVersion right) => left.Equals(right);
        public static bool operator !=(InstanceMemcacheVersion left, InstanceMemcacheVersion right) => !left.Equals(right);

        public static explicit operator string(InstanceMemcacheVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceMemcacheVersion other && Equals(other);
        public bool Equals(InstanceMemcacheVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A code that correspond to one type of user-facing message.
    /// </summary>
    [EnumType]
    public readonly struct InstanceMessageCode : IEquatable<InstanceMessageCode>
    {
        private readonly string _value;

        private InstanceMessageCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Message Code not set.
        /// </summary>
        public static InstanceMessageCode CodeUnspecified { get; } = new InstanceMessageCode("CODE_UNSPECIFIED");
        /// <summary>
        /// Memcached nodes are distributed unevenly.
        /// </summary>
        public static InstanceMessageCode ZoneDistributionUnbalanced { get; } = new InstanceMessageCode("ZONE_DISTRIBUTION_UNBALANCED");

        public static bool operator ==(InstanceMessageCode left, InstanceMessageCode right) => left.Equals(right);
        public static bool operator !=(InstanceMessageCode left, InstanceMessageCode right) => !left.Equals(right);

        public static explicit operator string(InstanceMessageCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceMessageCode other && Equals(other);
        public bool Equals(InstanceMessageCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Allows to define schedule that runs specified day of the week.
    /// </summary>
    [EnumType]
    public readonly struct WeeklyMaintenanceWindowDay : IEquatable<WeeklyMaintenanceWindowDay>
    {
        private readonly string _value;

        private WeeklyMaintenanceWindowDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The day of the week is unspecified.
        /// </summary>
        public static WeeklyMaintenanceWindowDay DayOfWeekUnspecified { get; } = new WeeklyMaintenanceWindowDay("DAY_OF_WEEK_UNSPECIFIED");
        /// <summary>
        /// Monday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Monday { get; } = new WeeklyMaintenanceWindowDay("MONDAY");
        /// <summary>
        /// Tuesday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Tuesday { get; } = new WeeklyMaintenanceWindowDay("TUESDAY");
        /// <summary>
        /// Wednesday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Wednesday { get; } = new WeeklyMaintenanceWindowDay("WEDNESDAY");
        /// <summary>
        /// Thursday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Thursday { get; } = new WeeklyMaintenanceWindowDay("THURSDAY");
        /// <summary>
        /// Friday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Friday { get; } = new WeeklyMaintenanceWindowDay("FRIDAY");
        /// <summary>
        /// Saturday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Saturday { get; } = new WeeklyMaintenanceWindowDay("SATURDAY");
        /// <summary>
        /// Sunday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Sunday { get; } = new WeeklyMaintenanceWindowDay("SUNDAY");

        public static bool operator ==(WeeklyMaintenanceWindowDay left, WeeklyMaintenanceWindowDay right) => left.Equals(right);
        public static bool operator !=(WeeklyMaintenanceWindowDay left, WeeklyMaintenanceWindowDay right) => !left.Equals(right);

        public static explicit operator string(WeeklyMaintenanceWindowDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeeklyMaintenanceWindowDay other && Equals(other);
        public bool Equals(WeeklyMaintenanceWindowDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
