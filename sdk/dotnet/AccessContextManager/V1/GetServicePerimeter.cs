// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.AccessContextManager.V1
{
    public static class GetServicePerimeter
    {
        /// <summary>
        /// Gets a service perimeter based on the resource name.
        /// </summary>
        public static Task<GetServicePerimeterResult> InvokeAsync(GetServicePerimeterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServicePerimeterResult>("google-native:accesscontextmanager/v1:getServicePerimeter", args ?? new GetServicePerimeterArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a service perimeter based on the resource name.
        /// </summary>
        public static Output<GetServicePerimeterResult> Invoke(GetServicePerimeterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServicePerimeterResult>("google-native:accesscontextmanager/v1:getServicePerimeter", args ?? new GetServicePerimeterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServicePerimeterArgs : global::Pulumi.InvokeArgs
    {
        [Input("accessPolicyId", required: true)]
        public string AccessPolicyId { get; set; } = null!;

        [Input("servicePerimeterId", required: true)]
        public string ServicePerimeterId { get; set; } = null!;

        public GetServicePerimeterArgs()
        {
        }
        public static new GetServicePerimeterArgs Empty => new GetServicePerimeterArgs();
    }

    public sealed class GetServicePerimeterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accessPolicyId", required: true)]
        public Input<string> AccessPolicyId { get; set; } = null!;

        [Input("servicePerimeterId", required: true)]
        public Input<string> ServicePerimeterId { get; set; } = null!;

        public GetServicePerimeterInvokeArgs()
        {
        }
        public static new GetServicePerimeterInvokeArgs Empty => new GetServicePerimeterInvokeArgs();
    }


    [OutputType]
    public sealed class GetServicePerimeterResult
    {
        /// <summary>
        /// Description of the `ServicePerimeter` and its use. Does not affect behavior.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Resource name for the ServicePerimeter. The `short_name` component must begin with a letter and only include alphanumeric and '_'. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, the restricted service list as well as access level lists must be empty.
        /// </summary>
        public readonly string PerimeterType;
        /// <summary>
        /// Proposed (or dry run) ServicePerimeter configuration. This configuration allows to specify and test ServicePerimeter configuration without enforcing actual access restrictions. Only allowed to be set when the "use_explicit_dry_run_spec" flag is set.
        /// </summary>
        public readonly Outputs.ServicePerimeterConfigResponse Spec;
        /// <summary>
        /// Current ServicePerimeter configuration. Specifies sets of resources, restricted services and access levels that determine perimeter content and boundaries.
        /// </summary>
        public readonly Outputs.ServicePerimeterConfigResponse Status;
        /// <summary>
        /// Human readable title. Must be unique within the Policy.
        /// </summary>
        public readonly string Title;
        /// <summary>
        /// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the implicit spec, thereby allowing the user to explicitly provide a configuration ("spec") to use in a dry-run version of the Service Perimeter. This allows the user to test changes to the enforced config ("status") without actually enforcing them. This testing is done through analyzing the differences between currently enforced and suggested restrictions. use_explicit_dry_run_spec must bet set to True if any of the fields in the spec are set to non-default values.
        /// </summary>
        public readonly bool UseExplicitDryRunSpec;

        [OutputConstructor]
        private GetServicePerimeterResult(
            string description,

            string name,

            string perimeterType,

            Outputs.ServicePerimeterConfigResponse spec,

            Outputs.ServicePerimeterConfigResponse status,

            string title,

            bool useExplicitDryRunSpec)
        {
            Description = description;
            Name = name;
            PerimeterType = perimeterType;
            Spec = spec;
            Status = status;
            Title = title;
            UseExplicitDryRunSpec = useExplicitDryRunSpec;
        }
    }
}
