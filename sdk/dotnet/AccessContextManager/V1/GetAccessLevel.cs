// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.AccessContextManager.V1
{
    public static class GetAccessLevel
    {
        /// <summary>
        /// Gets an access level based on the resource name.
        /// </summary>
        public static Task<GetAccessLevelResult> InvokeAsync(GetAccessLevelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccessLevelResult>("google-native:accesscontextmanager/v1:getAccessLevel", args ?? new GetAccessLevelArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an access level based on the resource name.
        /// </summary>
        public static Output<GetAccessLevelResult> Invoke(GetAccessLevelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessLevelResult>("google-native:accesscontextmanager/v1:getAccessLevel", args ?? new GetAccessLevelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccessLevelArgs : global::Pulumi.InvokeArgs
    {
        [Input("accessLevelFormat")]
        public string? AccessLevelFormat { get; set; }

        [Input("accessLevelId", required: true)]
        public string AccessLevelId { get; set; } = null!;

        [Input("accessPolicyId", required: true)]
        public string AccessPolicyId { get; set; } = null!;

        public GetAccessLevelArgs()
        {
        }
        public static new GetAccessLevelArgs Empty => new GetAccessLevelArgs();
    }

    public sealed class GetAccessLevelInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accessLevelFormat")]
        public Input<string>? AccessLevelFormat { get; set; }

        [Input("accessLevelId", required: true)]
        public Input<string> AccessLevelId { get; set; } = null!;

        [Input("accessPolicyId", required: true)]
        public Input<string> AccessPolicyId { get; set; } = null!;

        public GetAccessLevelInvokeArgs()
        {
        }
        public static new GetAccessLevelInvokeArgs Empty => new GetAccessLevelInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccessLevelResult
    {
        /// <summary>
        /// A `BasicLevel` composed of `Conditions`.
        /// </summary>
        public readonly Outputs.BasicLevelResponse Basic;
        /// <summary>
        /// A `CustomLevel` written in the Common Expression Language.
        /// </summary>
        public readonly Outputs.CustomLevelResponse Custom;
        /// <summary>
        /// Description of the `AccessLevel` and its use. Does not affect behavior.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Resource name for the `AccessLevel`. Format: `accessPolicies/{access_policy}/accessLevels/{access_level}`. The `access_level` component must begin with a letter, followed by alphanumeric characters or `_`. Its maximum length is 50 characters. After you create an `AccessLevel`, you cannot change its `name`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Human readable title. Must be unique within the Policy.
        /// </summary>
        public readonly string Title;

        [OutputConstructor]
        private GetAccessLevelResult(
            Outputs.BasicLevelResponse basic,

            Outputs.CustomLevelResponse custom,

            string description,

            string name,

            string title)
        {
            Basic = basic;
            Custom = custom;
            Description = description;
            Name = name;
            Title = title;
        }
    }
}
