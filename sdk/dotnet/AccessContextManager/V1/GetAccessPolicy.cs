// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.AccessContextManager.V1
{
    public static class GetAccessPolicy
    {
        /// <summary>
        /// Returns an access policy based on the name.
        /// </summary>
        public static Task<GetAccessPolicyResult> InvokeAsync(GetAccessPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccessPolicyResult>("google-native:accesscontextmanager/v1:getAccessPolicy", args ?? new GetAccessPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Returns an access policy based on the name.
        /// </summary>
        public static Output<GetAccessPolicyResult> Invoke(GetAccessPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessPolicyResult>("google-native:accesscontextmanager/v1:getAccessPolicy", args ?? new GetAccessPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccessPolicyArgs : global::Pulumi.InvokeArgs
    {
        [Input("accessPolicyId", required: true)]
        public string AccessPolicyId { get; set; } = null!;

        public GetAccessPolicyArgs()
        {
        }
        public static new GetAccessPolicyArgs Empty => new GetAccessPolicyArgs();
    }

    public sealed class GetAccessPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accessPolicyId", required: true)]
        public Input<string> AccessPolicyId { get; set; } = null!;

        public GetAccessPolicyInvokeArgs()
        {
        }
        public static new GetAccessPolicyInvokeArgs Empty => new GetAccessPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccessPolicyResult
    {
        /// <summary>
        /// An opaque identifier for the current version of the `AccessPolicy`. This will always be a strongly validated etag, meaning that two Access Polices will be identical if and only if their etags are identical. Clients should not expect this to be in any specific format.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Resource name of the `AccessPolicy`. Format: `accessPolicies/{access_policy}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The parent of this `AccessPolicy` in the Cloud Resource Hierarchy. Currently immutable once created. Format: `organizations/{organization_id}`
        /// </summary>
        public readonly string Parent;
        /// <summary>
        /// The scopes of the AccessPolicy. Scopes define which resources a policy can restrict and where its resources can be referenced. For example, policy A with `scopes=["folders/123"]` has the following behavior: - ServicePerimeter can only restrict projects within `folders/123`. - ServicePerimeter within policy A can only reference access levels defined within policy A. - Only one policy can include a given scope; thus, attempting to create a second policy which includes `folders/123` will result in an error. If no scopes are provided, then any resource within the organization can be restricted. Scopes cannot be modified after a policy is created. Policies can only have a single scope. Format: list of `folders/{folder_number}` or `projects/{project_number}`
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// Human readable title. Does not affect behavior.
        /// </summary>
        public readonly string Title;

        [OutputConstructor]
        private GetAccessPolicyResult(
            string etag,

            string name,

            string parent,

            ImmutableArray<string> scopes,

            string title)
        {
            Etag = etag;
            Name = name;
            Parent = parent;
            Scopes = scopes;
            Title = title;
        }
    }
}
