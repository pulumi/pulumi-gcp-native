// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.SQLAdmin.V1Beta4.Inputs
{

    /// <summary>
    /// IP Management configuration.
    /// </summary>
    public sealed class IpConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
        /// </summary>
        [Input("allocatedIpRange")]
        public Input<string>? AllocatedIpRange { get; set; }

        [Input("authorizedNetworks")]
        private InputList<Inputs.AclEntryArgs>? _authorizedNetworks;

        /// <summary>
        /// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
        /// </summary>
        public InputList<Inputs.AclEntryArgs> AuthorizedNetworks
        {
            get => _authorizedNetworks ?? (_authorizedNetworks = new InputList<Inputs.AclEntryArgs>());
            set => _authorizedNetworks = value;
        }

        /// <summary>
        /// Controls connectivity to private IP instances from Google services, such as BigQuery.
        /// </summary>
        [Input("enablePrivatePathForGoogleCloudServices")]
        public Input<bool>? EnablePrivatePathForGoogleCloudServices { get; set; }

        /// <summary>
        /// Whether the instance is assigned a public IP address or not.
        /// </summary>
        [Input("ipv4Enabled")]
        public Input<bool>? Ipv4Enabled { get; set; }

        /// <summary>
        /// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
        /// </summary>
        [Input("privateNetwork")]
        public Input<string>? PrivateNetwork { get; set; }

        /// <summary>
        /// PSC settings for this instance.
        /// </summary>
        [Input("pscConfig")]
        public Input<Inputs.PscConfigArgs>? PscConfig { get; set; }

        /// <summary>
        /// Whether SSL/TLS connections over IP are enforced. If set to false, then allow both non-SSL/non-TLS and SSL/TLS connections. For SSL/TLS connections, the client certificate won't be verified. If set to true, then only allow connections encrypted with SSL/TLS and with valid client certificates. If you want to enforce SSL/TLS without enforcing the requirement for valid client certificates, then use the `ssl_mode` flag instead of the legacy `require_ssl` flag.
        /// </summary>
        [Input("requireSsl")]
        public Input<bool>? RequireSsl { get; set; }

        /// <summary>
        /// Specify how SSL/TLS is enforced in database connections. This flag is supported only for PostgreSQL. Use the legacy `require_ssl` flag for enforcing SSL/TLS in MySQL and SQL Server. But, for PostgreSQL, use the `ssl_mode` flag instead of the legacy `require_ssl` flag. To avoid the conflict between those flags in PostgreSQL, only the following value pairs are valid: * `ssl_mode=ALLOW_UNENCRYPTED_AND_ENCRYPTED` and `require_ssl=false` * `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=false` * `ssl_mode=TRUSTED_CLIENT_CERTIFICATE_REQUIRED` and `require_ssl=true` Note that the value of `ssl_mode` gets priority over the value of the legacy `require_ssl`. For example, for the pair `ssl_mode=ENCRYPTED_ONLY, require_ssl=false`, the `ssl_mode=ENCRYPTED_ONLY` means "only accepts SSL connection", while the `require_ssl=false` means "both non-SSL and SSL connections are allowed". The database respects `ssl_mode` in this case and only accepts SSL connections.
        /// </summary>
        [Input("sslMode")]
        public Input<Pulumi.GoogleNative.SQLAdmin.V1Beta4.IpConfigurationSslMode>? SslMode { get; set; }

        public IpConfigurationArgs()
        {
        }
        public static new IpConfigurationArgs Empty => new IpConfigurationArgs();
    }
}
