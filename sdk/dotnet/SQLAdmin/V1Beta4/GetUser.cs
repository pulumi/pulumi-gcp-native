// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.SQLAdmin.V1Beta4
{
    public static class GetUser
    {
        /// <summary>
        /// Retrieves a resource containing information about a user.
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("google-native:sqladmin/v1beta4:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a resource containing information about a user.
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetUserResult>("google-native:sqladmin/v1beta4:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : Pulumi.InvokeArgs
    {
        [Input("instance", required: true)]
        public string Instance { get; set; } = null!;

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetUserArgs()
        {
        }
    }

    public sealed class GetUserInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("instance", required: true)]
        public Input<string> Instance { get; set; } = null!;

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetUserInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// Dual password status for the user.
        /// </summary>
        public readonly string DualPasswordType;
        /// <summary>
        /// This field is deprecated and will be removed from a future version of the API.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for *update* because it is already specified on the URL.
        /// </summary>
        public readonly string Instance;
        /// <summary>
        /// This is always `sql#user`.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The password for the user.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// User level password validation policy.
        /// </summary>
        public readonly Outputs.UserPasswordValidationPolicyResponse PasswordPolicy;
        /// <summary>
        /// The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for *update* because it is already specified on the URL.
        /// </summary>
        public readonly string Project;
        public readonly Outputs.SqlServerUserDetailsResponse SqlserverUserDetails;
        /// <summary>
        /// The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetUserResult(
            string dualPasswordType,

            string etag,

            string host,

            string instance,

            string kind,

            string name,

            string password,

            Outputs.UserPasswordValidationPolicyResponse passwordPolicy,

            string project,

            Outputs.SqlServerUserDetailsResponse sqlserverUserDetails,

            string type)
        {
            DualPasswordType = dualPasswordType;
            Etag = etag;
            Host = host;
            Instance = instance;
            Kind = kind;
            Name = name;
            Password = password;
            PasswordPolicy = passwordPolicy;
            Project = project;
            SqlserverUserDetails = sqlserverUserDetails;
            Type = type;
        }
    }
}
