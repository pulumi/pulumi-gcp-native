// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.SQLAdmin.V1.Outputs
{

    /// <summary>
    /// IP Management configuration.
    /// </summary>
    [OutputType]
    public sealed class IpConfigurationResponse
    {
        /// <summary>
        /// The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
        /// </summary>
        public readonly string AllocatedIpRange;
        /// <summary>
        /// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
        /// </summary>
        public readonly ImmutableArray<Outputs.AclEntryResponse> AuthorizedNetworks;
        /// <summary>
        /// Controls connectivity to private IP instances from Google services, such as BigQuery.
        /// </summary>
        public readonly bool EnablePrivatePathForGoogleCloudServices;
        /// <summary>
        /// Whether the instance is assigned a public IP address or not.
        /// </summary>
        public readonly bool Ipv4Enabled;
        /// <summary>
        /// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
        /// </summary>
        public readonly string PrivateNetwork;
        /// <summary>
        /// PSC settings for this instance.
        /// </summary>
        public readonly Outputs.PscConfigResponse PscConfig;
        /// <summary>
        /// Use `ssl_mode` instead. Whether SSL/TLS connections over IP are enforced. If set to false, then allow both non-SSL/non-TLS and SSL/TLS connections. For SSL/TLS connections, the client certificate won't be verified. If set to true, then only allow connections encrypted with SSL/TLS and with valid client certificates. If you want to enforce SSL/TLS without enforcing the requirement for valid client certificates, then use the `ssl_mode` flag instead of the `require_ssl` flag.
        /// </summary>
        public readonly bool RequireSsl;
        /// <summary>
        /// Specify how SSL/TLS is enforced in database connections. If you must use the `require_ssl` flag for backward compatibility, then only the following value pairs are valid: For PostgreSQL and MySQL: * `ssl_mode=ALLOW_UNENCRYPTED_AND_ENCRYPTED` and `require_ssl=false` * `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=false` * `ssl_mode=TRUSTED_CLIENT_CERTIFICATE_REQUIRED` and `require_ssl=true` For SQL Server: * `ssl_mode=ALLOW_UNENCRYPTED_AND_ENCRYPTED` and `require_ssl=false` * `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=true` The value of `ssl_mode` gets priority over the value of `require_ssl`. For example, for the pair `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=false`, the `ssl_mode=ENCRYPTED_ONLY` means only accept SSL connections, while the `require_ssl=false` means accept both non-SSL and SSL connections. MySQL and PostgreSQL databases respect `ssl_mode` in this case and accept only SSL connections.
        /// </summary>
        public readonly string SslMode;

        [OutputConstructor]
        private IpConfigurationResponse(
            string allocatedIpRange,

            ImmutableArray<Outputs.AclEntryResponse> authorizedNetworks,

            bool enablePrivatePathForGoogleCloudServices,

            bool ipv4Enabled,

            string privateNetwork,

            Outputs.PscConfigResponse pscConfig,

            bool requireSsl,

            string sslMode)
        {
            AllocatedIpRange = allocatedIpRange;
            AuthorizedNetworks = authorizedNetworks;
            EnablePrivatePathForGoogleCloudServices = enablePrivatePathForGoogleCloudServices;
            Ipv4Enabled = ipv4Enabled;
            PrivateNetwork = privateNetwork;
            PscConfig = pscConfig;
            RequireSsl = requireSsl;
            SslMode = sslMode;
        }
    }
}
