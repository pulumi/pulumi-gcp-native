// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Contactcenterinsights.V1
{
    /// <summary>
    /// Creates a conversation.
    /// </summary>
    [GoogleNativeResourceType("google-native:contactcenterinsights/v1:Conversation")]
    public partial class Conversation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An opaque, user-specified string representing the human agent who handled the conversation.
        /// </summary>
        [Output("agentId")]
        public Output<string> AgentId { get; private set; } = null!;

        /// <summary>
        /// Call-specific metadata.
        /// </summary>
        [Output("callMetadata")]
        public Output<Outputs.GoogleCloudContactcenterinsightsV1ConversationCallMetadataResponse> CallMetadata { get; private set; } = null!;

        /// <summary>
        /// A unique ID for the new conversation. This ID will become the final component of the conversation's resource name. If no ID is specified, a server-generated ID will be used. This value should be 4-64 characters and must match the regular expression `^[a-z0-9-]{4,64}$`. Valid characters are `a-z-`
        /// </summary>
        [Output("conversationId")]
        public Output<string?> ConversationId { get; private set; } = null!;

        /// <summary>
        /// The time at which the conversation was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The source of the audio and transcription for the conversation.
        /// </summary>
        [Output("dataSource")]
        public Output<Outputs.GoogleCloudContactcenterinsightsV1ConversationDataSourceResponse> DataSource { get; private set; } = null!;

        /// <summary>
        /// All the matched Dialogflow intents in the call. The key corresponds to a Dialogflow intent, format: projects/{project}/agent/{agent}/intents/{intent}
        /// </summary>
        [Output("dialogflowIntents")]
        public Output<Outputs.GoogleCloudContactcenterinsightsV1DialogflowIntentResponse> DialogflowIntents { get; private set; } = null!;

        /// <summary>
        /// The duration of the conversation.
        /// </summary>
        [Output("duration")]
        public Output<string> Duration { get; private set; } = null!;

        /// <summary>
        /// The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.
        /// </summary>
        [Output("expireTime")]
        public Output<string> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// A user-specified language code for the conversation.
        /// </summary>
        [Output("languageCode")]
        public Output<string> LanguageCode { get; private set; } = null!;

        /// <summary>
        /// The conversation's latest analysis, if one exists.
        /// </summary>
        [Output("latestAnalysis")]
        public Output<Outputs.GoogleCloudContactcenterinsightsV1AnalysisResponse> LatestAnalysis { get; private set; } = null!;

        /// <summary>
        /// Latest summary of the conversation.
        /// </summary>
        [Output("latestSummary")]
        public Output<Outputs.GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionDataResponse> LatestSummary { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
        /// </summary>
        [Output("medium")]
        public Output<string> Medium { get; private set; } = null!;

        /// <summary>
        /// Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Obfuscated user ID which the customer sent to us.
        /// </summary>
        [Output("obfuscatedUserId")]
        public Output<string> ObfuscatedUserId { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The annotations that were generated during the customer and agent interaction.
        /// </summary>
        [Output("runtimeAnnotations")]
        public Output<ImmutableArray<Outputs.GoogleCloudContactcenterinsightsV1RuntimeAnnotationResponse>> RuntimeAnnotations { get; private set; } = null!;

        /// <summary>
        /// The time at which the conversation started.
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// The conversation transcript.
        /// </summary>
        [Output("transcript")]
        public Output<Outputs.GoogleCloudContactcenterinsightsV1ConversationTranscriptResponse> Transcript { get; private set; } = null!;

        /// <summary>
        /// Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.
        /// </summary>
        [Output("ttl")]
        public Output<string> Ttl { get; private set; } = null!;

        /// <summary>
        /// The number of turns in the conversation.
        /// </summary>
        [Output("turnCount")]
        public Output<int> TurnCount { get; private set; } = null!;

        /// <summary>
        /// The most recent time at which the conversation was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Conversation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Conversation(string name, ConversationArgs? args = null, CustomResourceOptions? options = null)
            : base("google-native:contactcenterinsights/v1:Conversation", name, args ?? new ConversationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Conversation(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:contactcenterinsights/v1:Conversation", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Conversation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Conversation Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Conversation(name, id, options);
        }
    }

    public sealed class ConversationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An opaque, user-specified string representing the human agent who handled the conversation.
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// Call-specific metadata.
        /// </summary>
        [Input("callMetadata")]
        public Input<Inputs.GoogleCloudContactcenterinsightsV1ConversationCallMetadataArgs>? CallMetadata { get; set; }

        /// <summary>
        /// A unique ID for the new conversation. This ID will become the final component of the conversation's resource name. If no ID is specified, a server-generated ID will be used. This value should be 4-64 characters and must match the regular expression `^[a-z0-9-]{4,64}$`. Valid characters are `a-z-`
        /// </summary>
        [Input("conversationId")]
        public Input<string>? ConversationId { get; set; }

        /// <summary>
        /// The source of the audio and transcription for the conversation.
        /// </summary>
        [Input("dataSource")]
        public Input<Inputs.GoogleCloudContactcenterinsightsV1ConversationDataSourceArgs>? DataSource { get; set; }

        /// <summary>
        /// The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// A user-specified language code for the conversation.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
        /// </summary>
        [Input("medium")]
        public Input<Pulumi.GoogleNative.Contactcenterinsights.V1.ConversationMedium>? Medium { get; set; }

        /// <summary>
        /// Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Obfuscated user ID which the customer sent to us.
        /// </summary>
        [Input("obfuscatedUserId")]
        public Input<string>? ObfuscatedUserId { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The time at which the conversation started.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        public ConversationArgs()
        {
        }
        public static new ConversationArgs Empty => new ConversationArgs();
    }
}
