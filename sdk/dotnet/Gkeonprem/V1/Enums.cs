// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Gkeonprem.V1
{
    /// <summary>
    /// Specifies the nodes operating system (default: LINUX).
    /// </summary>
    [EnumType]
    public readonly struct BareMetalNodePoolConfigOperatingSystem : IEquatable<BareMetalNodePoolConfigOperatingSystem>
    {
        private readonly string _value;

        private BareMetalNodePoolConfigOperatingSystem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No operating system runtime selected.
        /// </summary>
        public static BareMetalNodePoolConfigOperatingSystem OperatingSystemUnspecified { get; } = new BareMetalNodePoolConfigOperatingSystem("OPERATING_SYSTEM_UNSPECIFIED");
        /// <summary>
        /// Linux operating system.
        /// </summary>
        public static BareMetalNodePoolConfigOperatingSystem Linux { get; } = new BareMetalNodePoolConfigOperatingSystem("LINUX");

        public static bool operator ==(BareMetalNodePoolConfigOperatingSystem left, BareMetalNodePoolConfigOperatingSystem right) => left.Equals(right);
        public static bool operator !=(BareMetalNodePoolConfigOperatingSystem left, BareMetalNodePoolConfigOperatingSystem right) => !left.Equals(right);

        public static explicit operator string(BareMetalNodePoolConfigOperatingSystem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BareMetalNodePoolConfigOperatingSystem other && Equals(other);
        public bool Equals(BareMetalNodePoolConfigOperatingSystem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies which container runtime will be used.
    /// </summary>
    [EnumType]
    public readonly struct BareMetalWorkloadNodeConfigContainerRuntime : IEquatable<BareMetalWorkloadNodeConfigContainerRuntime>
    {
        private readonly string _value;

        private BareMetalWorkloadNodeConfigContainerRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No container runtime selected.
        /// </summary>
        public static BareMetalWorkloadNodeConfigContainerRuntime ContainerRuntimeUnspecified { get; } = new BareMetalWorkloadNodeConfigContainerRuntime("CONTAINER_RUNTIME_UNSPECIFIED");
        /// <summary>
        /// Containerd runtime.
        /// </summary>
        public static BareMetalWorkloadNodeConfigContainerRuntime Containerd { get; } = new BareMetalWorkloadNodeConfigContainerRuntime("CONTAINERD");

        public static bool operator ==(BareMetalWorkloadNodeConfigContainerRuntime left, BareMetalWorkloadNodeConfigContainerRuntime right) => left.Equals(right);
        public static bool operator !=(BareMetalWorkloadNodeConfigContainerRuntime left, BareMetalWorkloadNodeConfigContainerRuntime right) => !left.Equals(right);

        public static explicit operator string(BareMetalWorkloadNodeConfigContainerRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BareMetalWorkloadNodeConfigContainerRuntime other && Equals(other);
        public bool Equals(BareMetalWorkloadNodeConfigContainerRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The taint effect.
    /// </summary>
    [EnumType]
    public readonly struct NodeTaintEffect : IEquatable<NodeTaintEffect>
    {
        private readonly string _value;

        private NodeTaintEffect(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static NodeTaintEffect EffectUnspecified { get; } = new NodeTaintEffect("EFFECT_UNSPECIFIED");
        /// <summary>
        /// Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.
        /// </summary>
        public static NodeTaintEffect NoSchedule { get; } = new NodeTaintEffect("NO_SCHEDULE");
        /// <summary>
        /// Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.
        /// </summary>
        public static NodeTaintEffect PreferNoSchedule { get; } = new NodeTaintEffect("PREFER_NO_SCHEDULE");
        /// <summary>
        /// Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.
        /// </summary>
        public static NodeTaintEffect NoExecute { get; } = new NodeTaintEffect("NO_EXECUTE");

        public static bool operator ==(NodeTaintEffect left, NodeTaintEffect right) => left.Equals(right);
        public static bool operator !=(NodeTaintEffect left, NodeTaintEffect right) => !left.Equals(right);

        public static explicit operator string(NodeTaintEffect value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NodeTaintEffect other && Equals(other);
        public bool Equals(NodeTaintEffect other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
