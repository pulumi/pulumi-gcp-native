// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Gkeonprem.V1
{
    /// <summary>
    /// Creates a new VMware user cluster in a given project and location.
    /// </summary>
    [GoogleNativeResourceType("google-native:gkeonprem/v1:VmwareCluster")]
    public partial class VmwareCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
        /// </summary>
        [Output("adminClusterMembership")]
        public Output<string> AdminClusterMembership { get; private set; } = null!;

        /// <summary>
        /// The resource name of the VMware admin cluster hosting this user cluster.
        /// </summary>
        [Output("adminClusterName")]
        public Output<string> AdminClusterName { get; private set; } = null!;

        /// <summary>
        /// Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>> Annotations { get; private set; } = null!;

        /// <summary>
        /// AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
        /// </summary>
        [Output("antiAffinityGroups")]
        public Output<Outputs.VmwareAAGConfigResponse> AntiAffinityGroups { get; private set; } = null!;

        /// <summary>
        /// RBAC policy that will be applied and managed by the Anthos On-Prem API.
        /// </summary>
        [Output("authorization")]
        public Output<Outputs.AuthorizationResponse> Authorization { get; private set; } = null!;

        /// <summary>
        /// Configuration for auto repairing.
        /// </summary>
        [Output("autoRepairConfig")]
        public Output<Outputs.VmwareAutoRepairConfigResponse> AutoRepairConfig { get; private set; } = null!;

        /// <summary>
        /// VMware user cluster control plane nodes must have either 1 or 3 replicas.
        /// </summary>
        [Output("controlPlaneNode")]
        public Output<Outputs.VmwareControlPlaneNodeConfigResponse> ControlPlaneNode { get; private set; } = null!;

        /// <summary>
        /// The time at which VMware user cluster was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
        /// </summary>
        [Output("dataplaneV2")]
        public Output<Outputs.VmwareDataplaneV2ConfigResponse> DataplaneV2 { get; private set; } = null!;

        /// <summary>
        /// The time at which VMware user cluster was deleted.
        /// </summary>
        [Output("deleteTime")]
        public Output<string> DeleteTime { get; private set; } = null!;

        /// <summary>
        /// A human readable description of this VMware user cluster.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Disable bundled ingress.
        /// </summary>
        [Output("disableBundledIngress")]
        public Output<bool> DisableBundledIngress { get; private set; } = null!;

        /// <summary>
        /// Enable control plane V2. Default to false.
        /// </summary>
        [Output("enableControlPlaneV2")]
        public Output<bool> EnableControlPlaneV2 { get; private set; } = null!;

        /// <summary>
        /// The DNS name of VMware user cluster's API server.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Fleet configuration for the cluster.
        /// </summary>
        [Output("fleet")]
        public Output<Outputs.FleetResponse> Fleet { get; private set; } = null!;

        /// <summary>
        /// Load balancer configuration.
        /// </summary>
        [Output("loadBalancer")]
        public Output<Outputs.VmwareLoadBalancerConfigResponse> LoadBalancer { get; private set; } = null!;

        /// <summary>
        /// The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
        /// </summary>
        [Output("localName")]
        public Output<string> LocalName { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Immutable. The VMware user cluster resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The VMware user cluster network configuration.
        /// </summary>
        [Output("networkConfig")]
        public Output<Outputs.VmwareNetworkConfigResponse> NetworkConfig { get; private set; } = null!;

        /// <summary>
        /// The Anthos clusters on the VMware version for your user cluster.
        /// </summary>
        [Output("onPremVersion")]
        public Output<string> OnPremVersion { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// If set, there are currently changes in flight to the VMware user cluster.
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// The current state of VMware user cluster.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// ResourceStatus representing detailed cluster state.
        /// </summary>
        [Output("status")]
        public Output<Outputs.ResourceStatusResponse> Status { get; private set; } = null!;

        /// <summary>
        /// Storage configuration.
        /// </summary>
        [Output("storage")]
        public Output<Outputs.VmwareStorageConfigResponse> Storage { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the VMware user cluster.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The time at which VMware user cluster was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Specifies upgrade policy for the cluster.
        /// </summary>
        [Output("upgradePolicy")]
        public Output<Outputs.VmwareClusterUpgradePolicyResponse> UpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// ValidationCheck represents the result of the preflight check job.
        /// </summary>
        [Output("validationCheck")]
        public Output<Outputs.ValidationCheckResponse> ValidationCheck { get; private set; } = null!;

        /// <summary>
        /// VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
        /// </summary>
        [Output("vcenter")]
        public Output<Outputs.VmwareVCenterConfigResponse> Vcenter { get; private set; } = null!;

        /// <summary>
        /// Enable VM tracking.
        /// </summary>
        [Output("vmTrackingEnabled")]
        public Output<bool> VmTrackingEnabled { get; private set; } = null!;

        /// <summary>
        /// User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
        /// </summary>
        [Output("vmwareClusterId")]
        public Output<string?> VmwareClusterId { get; private set; } = null!;


        /// <summary>
        /// Create a VmwareCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VmwareCluster(string name, VmwareClusterArgs args, CustomResourceOptions? options = null)
            : base("google-native:gkeonprem/v1:VmwareCluster", name, args ?? new VmwareClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VmwareCluster(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:gkeonprem/v1:VmwareCluster", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VmwareCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VmwareCluster Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VmwareCluster(name, id, options);
        }
    }

    public sealed class VmwareClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
        /// </summary>
        [Input("adminClusterMembership", required: true)]
        public Input<string> AdminClusterMembership { get; set; } = null!;

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
        /// </summary>
        [Input("antiAffinityGroups")]
        public Input<Inputs.VmwareAAGConfigArgs>? AntiAffinityGroups { get; set; }

        /// <summary>
        /// RBAC policy that will be applied and managed by the Anthos On-Prem API.
        /// </summary>
        [Input("authorization")]
        public Input<Inputs.AuthorizationArgs>? Authorization { get; set; }

        /// <summary>
        /// Configuration for auto repairing.
        /// </summary>
        [Input("autoRepairConfig")]
        public Input<Inputs.VmwareAutoRepairConfigArgs>? AutoRepairConfig { get; set; }

        /// <summary>
        /// VMware user cluster control plane nodes must have either 1 or 3 replicas.
        /// </summary>
        [Input("controlPlaneNode")]
        public Input<Inputs.VmwareControlPlaneNodeConfigArgs>? ControlPlaneNode { get; set; }

        /// <summary>
        /// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
        /// </summary>
        [Input("dataplaneV2")]
        public Input<Inputs.VmwareDataplaneV2ConfigArgs>? DataplaneV2 { get; set; }

        /// <summary>
        /// A human readable description of this VMware user cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Disable bundled ingress.
        /// </summary>
        [Input("disableBundledIngress")]
        public Input<bool>? DisableBundledIngress { get; set; }

        /// <summary>
        /// Enable control plane V2. Default to false.
        /// </summary>
        [Input("enableControlPlaneV2")]
        public Input<bool>? EnableControlPlaneV2 { get; set; }

        /// <summary>
        /// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Load balancer configuration.
        /// </summary>
        [Input("loadBalancer")]
        public Input<Inputs.VmwareLoadBalancerConfigArgs>? LoadBalancer { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Immutable. The VMware user cluster resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The VMware user cluster network configuration.
        /// </summary>
        [Input("networkConfig")]
        public Input<Inputs.VmwareNetworkConfigArgs>? NetworkConfig { get; set; }

        /// <summary>
        /// The Anthos clusters on the VMware version for your user cluster.
        /// </summary>
        [Input("onPremVersion", required: true)]
        public Input<string> OnPremVersion { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Storage configuration.
        /// </summary>
        [Input("storage")]
        public Input<Inputs.VmwareStorageConfigArgs>? Storage { get; set; }

        /// <summary>
        /// Specifies upgrade policy for the cluster.
        /// </summary>
        [Input("upgradePolicy")]
        public Input<Inputs.VmwareClusterUpgradePolicyArgs>? UpgradePolicy { get; set; }

        /// <summary>
        /// VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
        /// </summary>
        [Input("vcenter")]
        public Input<Inputs.VmwareVCenterConfigArgs>? Vcenter { get; set; }

        /// <summary>
        /// Enable VM tracking.
        /// </summary>
        [Input("vmTrackingEnabled")]
        public Input<bool>? VmTrackingEnabled { get; set; }

        /// <summary>
        /// User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
        /// </summary>
        [Input("vmwareClusterId")]
        public Input<string>? VmwareClusterId { get; set; }

        public VmwareClusterArgs()
        {
        }
        public static new VmwareClusterArgs Empty => new VmwareClusterArgs();
    }
}
