// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Workstations.V1Beta
{
    /// <summary>
    /// Creates a new workstation configuration.
    /// </summary>
    [GoogleNativeResourceType("google-native:workstations/v1beta:WorkstationConfig")]
    public partial class WorkstationConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Client-specified annotations.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>> Annotations { get; private set; } = null!;

        /// <summary>
        /// Status conditions describing the current resource state.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.StatusResponse>> Conditions { get; private set; } = null!;

        /// <summary>
        /// Container that will be run for each workstation using this configuration when that workstation is started.
        /// </summary>
        [Output("container")]
        public Output<Outputs.ContainerResponse> Container { get; private set; } = null!;

        /// <summary>
        /// Time when this resource was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the `conditions` field.
        /// </summary>
        [Output("degraded")]
        public Output<bool> Degraded { get; private set; } = null!;

        /// <summary>
        /// Time when this resource was soft-deleted.
        /// </summary>
        [Output("deleteTime")]
        public Output<string> DeleteTime { get; private set; } = null!;

        /// <summary>
        /// Human-readable name for this resource.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Encrypts resources of this workstation configuration using a customer-specified encryption key. If specified, the boot disk of the Compute Engine instance and the persistent disk will be encrypted using this encryption key. If this field is not set, the disks will be encrypted using a generated key. Customer-specified encryption keys do not protect disk metadata. If the customer-specified encryption key is rotated, when the workstation instance is stopped, the system will attempt to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost. If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
        /// </summary>
        [Output("encryptionKey")]
        public Output<Outputs.CustomerEncryptionKeyResponse> EncryptionKey { get; private set; } = null!;

        /// <summary>
        /// Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Runtime host for the workstation.
        /// </summary>
        [Output("host")]
        public Output<Outputs.HostResponse> Host { get; private set; } = null!;

        /// <summary>
        /// How long to wait before automatically stopping an instance that hasn't received any user traffic. A value of 0 indicates that this instance should never time out due to idleness. Defaults to 20 minutes.
        /// </summary>
        [Output("idleTimeout")]
        public Output<string> IdleTimeout { get; private set; } = null!;

        /// <summary>
        /// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Full name of this resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Directories to persist across workstation sessions.
        /// </summary>
        [Output("persistentDirectories")]
        public Output<ImmutableArray<Outputs.PersistentDirectoryResponse>> PersistentDirectories { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this resource is currently being updated to match its intended state.
        /// </summary>
        [Output("reconciling")]
        public Output<bool> Reconciling { get; private set; } = null!;

        /// <summary>
        /// How long to wait before automatically stopping a workstation after it started. A value of 0 indicates that workstations using this config should never time out. Must be greater than 0 and less than 24 hours if encryption_key is set. Defaults to 12 hours.
        /// </summary>
        [Output("runningTimeout")]
        public Output<string> RunningTimeout { get; private set; } = null!;

        /// <summary>
        /// A system-assigned unique identified for this resource.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Time when this resource was most recently updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// If set, validate the request and preview the review, but do not actually apply it.
        /// </summary>
        [Output("validateOnly")]
        public Output<bool?> ValidateOnly { get; private set; } = null!;

        [Output("workstationClusterId")]
        public Output<string> WorkstationClusterId { get; private set; } = null!;

        /// <summary>
        /// Required. ID to use for the config.
        /// </summary>
        [Output("workstationConfigId")]
        public Output<string> WorkstationConfigId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkstationConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkstationConfig(string name, WorkstationConfigArgs args, CustomResourceOptions? options = null)
            : base("google-native:workstations/v1beta:WorkstationConfig", name, args ?? new WorkstationConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkstationConfig(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:workstations/v1beta:WorkstationConfig", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                    "workstationClusterId",
                    "workstationConfigId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkstationConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkstationConfig Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new WorkstationConfig(name, id, options);
        }
    }

    public sealed class WorkstationConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Client-specified annotations.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Container that will be run for each workstation using this configuration when that workstation is started.
        /// </summary>
        [Input("container")]
        public Input<Inputs.ContainerArgs>? Container { get; set; }

        /// <summary>
        /// Human-readable name for this resource.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Encrypts resources of this workstation configuration using a customer-specified encryption key. If specified, the boot disk of the Compute Engine instance and the persistent disk will be encrypted using this encryption key. If this field is not set, the disks will be encrypted using a generated key. Customer-specified encryption keys do not protect disk metadata. If the customer-specified encryption key is rotated, when the workstation instance is stopped, the system will attempt to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost. If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
        /// </summary>
        [Input("encryptionKey")]
        public Input<Inputs.CustomerEncryptionKeyArgs>? EncryptionKey { get; set; }

        /// <summary>
        /// Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Runtime host for the workstation.
        /// </summary>
        [Input("host")]
        public Input<Inputs.HostArgs>? Host { get; set; }

        /// <summary>
        /// How long to wait before automatically stopping an instance that hasn't received any user traffic. A value of 0 indicates that this instance should never time out due to idleness. Defaults to 20 minutes.
        /// </summary>
        [Input("idleTimeout")]
        public Input<string>? IdleTimeout { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Full name of this resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("persistentDirectories")]
        private InputList<Inputs.PersistentDirectoryArgs>? _persistentDirectories;

        /// <summary>
        /// Directories to persist across workstation sessions.
        /// </summary>
        public InputList<Inputs.PersistentDirectoryArgs> PersistentDirectories
        {
            get => _persistentDirectories ?? (_persistentDirectories = new InputList<Inputs.PersistentDirectoryArgs>());
            set => _persistentDirectories = value;
        }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// How long to wait before automatically stopping a workstation after it started. A value of 0 indicates that workstations using this config should never time out. Must be greater than 0 and less than 24 hours if encryption_key is set. Defaults to 12 hours.
        /// </summary>
        [Input("runningTimeout")]
        public Input<string>? RunningTimeout { get; set; }

        /// <summary>
        /// If set, validate the request and preview the review, but do not actually apply it.
        /// </summary>
        [Input("validateOnly")]
        public Input<bool>? ValidateOnly { get; set; }

        [Input("workstationClusterId", required: true)]
        public Input<string> WorkstationClusterId { get; set; } = null!;

        /// <summary>
        /// Required. ID to use for the config.
        /// </summary>
        [Input("workstationConfigId", required: true)]
        public Input<string> WorkstationConfigId { get; set; } = null!;

        public WorkstationConfigArgs()
        {
        }
        public static new WorkstationConfigArgs Empty => new WorkstationConfigArgs();
    }
}
