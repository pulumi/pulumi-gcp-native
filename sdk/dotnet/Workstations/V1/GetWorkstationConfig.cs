// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Workstations.V1
{
    public static class GetWorkstationConfig
    {
        /// <summary>
        /// Returns the requested workstation configuration.
        /// </summary>
        public static Task<GetWorkstationConfigResult> InvokeAsync(GetWorkstationConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkstationConfigResult>("google-native:workstations/v1:getWorkstationConfig", args ?? new GetWorkstationConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the requested workstation configuration.
        /// </summary>
        public static Output<GetWorkstationConfigResult> Invoke(GetWorkstationConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkstationConfigResult>("google-native:workstations/v1:getWorkstationConfig", args ?? new GetWorkstationConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkstationConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("workstationClusterId", required: true)]
        public string WorkstationClusterId { get; set; } = null!;

        [Input("workstationConfigId", required: true)]
        public string WorkstationConfigId { get; set; } = null!;

        public GetWorkstationConfigArgs()
        {
        }
        public static new GetWorkstationConfigArgs Empty => new GetWorkstationConfigArgs();
    }

    public sealed class GetWorkstationConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("workstationClusterId", required: true)]
        public Input<string> WorkstationClusterId { get; set; } = null!;

        [Input("workstationConfigId", required: true)]
        public Input<string> WorkstationConfigId { get; set; } = null!;

        public GetWorkstationConfigInvokeArgs()
        {
        }
        public static new GetWorkstationConfigInvokeArgs Empty => new GetWorkstationConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkstationConfigResult
    {
        /// <summary>
        /// Optional. Client-specified annotations.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// Status conditions describing the current resource state.
        /// </summary>
        public readonly ImmutableArray<Outputs.StatusResponse> Conditions;
        /// <summary>
        /// Optional. Container that runs upon startup for each workstation using this workstation configuration.
        /// </summary>
        public readonly Outputs.ContainerResponse Container;
        /// <summary>
        /// Time when this workstation configuration was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Whether this resource is degraded, in which case it may require user action to restore full functionality. See also the conditions field.
        /// </summary>
        public readonly bool Degraded;
        /// <summary>
        /// Time when this workstation configuration was soft-deleted.
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// Optional. Human-readable name for this workstation configuration.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Immutable. Encrypts resources of this workstation configuration using a customer-managed encryption key (CMEK). If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata. If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk might be lost. If the encryption key is revoked, the workstation session automatically stops within 7 hours. Immutable after the workstation configuration is created.
        /// </summary>
        public readonly Outputs.CustomerEncryptionKeyResponse EncryptionKey;
        /// <summary>
        /// Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Optional. Runtime host for the workstation.
        /// </summary>
        public readonly Outputs.HostResponse Host;
        /// <summary>
        /// Optional. Number of seconds to wait before automatically stopping a workstation after it last received user traffic. A value of `"0s"` indicates that Cloud Workstations VMs created with this configuration should never time out due to idleness. Provide [duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration) terminated by `s` for seconds—for example, `"7200s"` (2 hours). The default is `"1200s"` (20 minutes).
        /// </summary>
        public readonly string IdleTimeout;
        /// <summary>
        /// Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation configuration and that are also propagated to the underlying Compute Engine resources.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Identifier. Full name of this workstation configuration.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. Directories to persist across workstation sessions.
        /// </summary>
        public readonly ImmutableArray<Outputs.PersistentDirectoryResponse> PersistentDirectories;
        /// <summary>
        /// Optional. Readiness checks to perform when starting a workstation using this workstation configuration. Mark a workstation as running only after all specified readiness checks return 200 status codes.
        /// </summary>
        public readonly ImmutableArray<Outputs.ReadinessCheckResponse> ReadinessChecks;
        /// <summary>
        /// Indicates whether this workstation configuration is currently being updated to match its intended state.
        /// </summary>
        public readonly bool Reconciling;
        /// <summary>
        /// Optional. Immutable. Specifies the zones used to replicate the VM and disk resources within the region. If set, exactly two zones within the workstation cluster's region must be specified—for example, `['us-central1-a', 'us-central1-f']`. If this field is empty, two default zones within the region are used. Immutable after the workstation configuration is created.
        /// </summary>
        public readonly ImmutableArray<string> ReplicaZones;
        /// <summary>
        /// Optional. Number of seconds that a workstation can run until it is automatically shut down. We recommend that workstations be shut down daily to reduce costs and so that security updates can be applied upon restart. The idle_timeout and running_timeout fields are independent of each other. Note that the running_timeout field shuts down VMs after the specified time, regardless of whether or not the VMs are idle. Provide duration terminated by `s` for seconds—for example, `"54000s"` (15 hours). Defaults to `"43200s"` (12 hours). A value of `"0s"` indicates that workstations using this configuration should never time out. If encryption_key is set, it must be greater than `"0s"` and less than `"86400s"` (24 hours). Warning: A value of `"0s"` indicates that Cloud Workstations VMs created with this configuration have no maximum running time. This is strongly discouraged because you incur costs and will not pick up security updates.
        /// </summary>
        public readonly string RunningTimeout;
        /// <summary>
        /// A system-assigned unique identifier for this workstation configuration.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// Time when this workstation configuration was most recently updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetWorkstationConfigResult(
            ImmutableDictionary<string, string> annotations,

            ImmutableArray<Outputs.StatusResponse> conditions,

            Outputs.ContainerResponse container,

            string createTime,

            bool degraded,

            string deleteTime,

            string displayName,

            Outputs.CustomerEncryptionKeyResponse encryptionKey,

            string etag,

            Outputs.HostResponse host,

            string idleTimeout,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<Outputs.PersistentDirectoryResponse> persistentDirectories,

            ImmutableArray<Outputs.ReadinessCheckResponse> readinessChecks,

            bool reconciling,

            ImmutableArray<string> replicaZones,

            string runningTimeout,

            string uid,

            string updateTime)
        {
            Annotations = annotations;
            Conditions = conditions;
            Container = container;
            CreateTime = createTime;
            Degraded = degraded;
            DeleteTime = deleteTime;
            DisplayName = displayName;
            EncryptionKey = encryptionKey;
            Etag = etag;
            Host = host;
            IdleTimeout = idleTimeout;
            Labels = labels;
            Name = name;
            PersistentDirectories = persistentDirectories;
            ReadinessChecks = readinessChecks;
            Reconciling = reconciling;
            ReplicaZones = replicaZones;
            RunningTimeout = runningTimeout;
            Uid = uid;
            UpdateTime = updateTime;
        }
    }
}
