// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Vmmigration.V1Alpha1
{
    /// <summary>
    /// Creates a new MigratingVm in a given Source.
    /// Auto-naming is currently not supported for this resource.
    /// </summary>
    [GoogleNativeResourceType("google-native:vmmigration/v1alpha1:MigratingVm")]
    public partial class MigratingVm : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Details of the target VM in Compute Engine.
        /// </summary>
        [Output("computeEngineTargetDefaults")]
        public Output<Outputs.ComputeEngineTargetDefaultsResponse> ComputeEngineTargetDefaults { get; private set; } = null!;

        /// <summary>
        /// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_defaults instead.
        /// </summary>
        [Output("computeEngineVmDefaults")]
        public Output<Outputs.TargetVMDetailsResponse> ComputeEngineVmDefaults { get; private set; } = null!;

        /// <summary>
        /// The time the migrating VM was created (this refers to this resource and not to the time it was installed in the source).
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The percentage progress of the current running replication cycle.
        /// </summary>
        [Output("currentSyncInfo")]
        public Output<Outputs.ReplicationCycleResponse> CurrentSyncInfo { get; private set; } = null!;

        /// <summary>
        /// The description attached to the migrating VM by the user.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The display name attached to the MigratingVm by the user.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Provides details on the state of the Migrating VM in case of an error in replication.
        /// </summary>
        [Output("error")]
        public Output<Outputs.StatusResponse> Error { get; private set; } = null!;

        /// <summary>
        /// The group this migrating vm is included in, if any. The group is represented by the full path of the appropriate Group resource.
        /// </summary>
        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        /// <summary>
        /// The labels of the migrating VM.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The most updated snapshot created time in the source that finished replication.
        /// </summary>
        [Output("lastSync")]
        public Output<Outputs.ReplicationSyncResponse> LastSync { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Required. The migratingVm identifier.
        /// </summary>
        [Output("migratingVmId")]
        public Output<string> MigratingVmId { get; private set; } = null!;

        /// <summary>
        /// The identifier of the MigratingVm.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The replication schedule policy.
        /// </summary>
        [Output("policy")]
        public Output<Outputs.SchedulePolicyResponse> Policy { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The recent clone jobs performed on the migrating VM. This field holds the vm's last completed clone job and the vm's running clone job, if one exists. Note: To have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.
        /// </summary>
        [Output("recentCloneJobs")]
        public Output<ImmutableArray<Outputs.CloneJobResponse>> RecentCloneJobs { get; private set; } = null!;

        /// <summary>
        /// The recent cutover jobs performed on the migrating VM. This field holds the vm's last completed cutover job and the vm's running cutover job, if one exists. Note: To have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.
        /// </summary>
        [Output("recentCutoverJobs")]
        public Output<ImmutableArray<Outputs.CutoverJobResponse>> RecentCutoverJobs { get; private set; } = null!;

        /// <summary>
        /// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        [Output("sourceId")]
        public Output<string> SourceId { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.
        /// </summary>
        [Output("sourceVmId")]
        public Output<string> SourceVmId { get; private set; } = null!;

        /// <summary>
        /// State of the MigratingVm.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The last time the migrating VM state was updated.
        /// </summary>
        [Output("stateTime")]
        public Output<string> StateTime { get; private set; } = null!;

        /// <summary>
        /// The default configuration of the target VM that will be created in GCP as a result of the migration. Deprecated: Use compute_engine_target_defaults instead.
        /// </summary>
        [Output("targetDefaults")]
        public Output<Outputs.TargetVMDetailsResponse> TargetDefaults { get; private set; } = null!;

        /// <summary>
        /// The last time the migrating VM resource was updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a MigratingVm resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MigratingVm(string name, MigratingVmArgs args, CustomResourceOptions? options = null)
            : base("google-native:vmmigration/v1alpha1:MigratingVm", name, args ?? new MigratingVmArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MigratingVm(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:vmmigration/v1alpha1:MigratingVm", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "migratingVmId",
                    "project",
                    "sourceId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MigratingVm resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MigratingVm Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MigratingVm(name, id, options);
        }
    }

    public sealed class MigratingVmArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Details of the target VM in Compute Engine.
        /// </summary>
        [Input("computeEngineTargetDefaults")]
        public Input<Inputs.ComputeEngineTargetDefaultsArgs>? ComputeEngineTargetDefaults { get; set; }

        /// <summary>
        /// Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_defaults instead.
        /// </summary>
        [Input("computeEngineVmDefaults")]
        public Input<Inputs.TargetVMDetailsArgs>? ComputeEngineVmDefaults { get; set; }

        /// <summary>
        /// The description attached to the migrating VM by the user.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name attached to the MigratingVm by the user.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// The labels of the migrating VM.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Required. The migratingVm identifier.
        /// </summary>
        [Input("migratingVmId", required: true)]
        public Input<string> MigratingVmId { get; set; } = null!;

        /// <summary>
        /// The replication schedule policy.
        /// </summary>
        [Input("policy")]
        public Input<Inputs.SchedulePolicyArgs>? Policy { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("sourceId", required: true)]
        public Input<string> SourceId { get; set; } = null!;

        /// <summary>
        /// The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.
        /// </summary>
        [Input("sourceVmId")]
        public Input<string>? SourceVmId { get; set; }

        /// <summary>
        /// The default configuration of the target VM that will be created in GCP as a result of the migration. Deprecated: Use compute_engine_target_defaults instead.
        /// </summary>
        [Input("targetDefaults")]
        public Input<Inputs.TargetVMDetailsArgs>? TargetDefaults { get; set; }

        public MigratingVmArgs()
        {
        }
        public static new MigratingVmArgs Empty => new MigratingVmArgs();
    }
}
