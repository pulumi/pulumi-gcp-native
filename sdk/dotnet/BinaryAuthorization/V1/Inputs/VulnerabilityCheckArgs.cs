// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BinaryAuthorization.V1.Inputs
{

    /// <summary>
    /// An image vulnerability check, which rejects images that violate the configured vulnerability rules.
    /// </summary>
    public sealed class VulnerabilityCheckArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedCves")]
        private InputList<string>? _allowedCves;

        /// <summary>
        /// Optional. A list of specific CVEs to ignore even if the vulnerability level violates `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will allow vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.
        /// </summary>
        public InputList<string> AllowedCves
        {
            get => _allowedCves ?? (_allowedCves = new InputList<string>());
            set => _allowedCves = value;
        }

        [Input("blockedCves")]
        private InputList<string>? _blockedCves;

        /// <summary>
        /// Optional. A list of specific CVEs to always raise warnings about even if the vulnerability level meets `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will block vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.
        /// </summary>
        public InputList<string> BlockedCves
        {
            get => _blockedCves ?? (_blockedCves = new InputList<string>());
            set => _blockedCves = value;
        }

        [Input("containerAnalysisVulnerabilityProjects")]
        private InputList<string>? _containerAnalysisVulnerabilityProjects;

        /// <summary>
        /// Optional. The projects where vulnerabilities are stored as Container Analysis Occurrences. Each project is expressed in the resource format of `projects/[PROJECT_ID]`, e.g., `projects/my-gcp-project`. An attempt will be made for each project to fetch vulnerabilities, and all valid vulnerabilities will be used to check against the vulnerability policy. If no valid scan is found in all projects configured here, an error will be returned for the check.
        /// </summary>
        public InputList<string> ContainerAnalysisVulnerabilityProjects
        {
            get => _containerAnalysisVulnerabilityProjects ?? (_containerAnalysisVulnerabilityProjects = new InputList<string>());
            set => _containerAnalysisVulnerabilityProjects = value;
        }

        /// <summary>
        /// The threshold for severity for which a fix is currently available. This field is required and must be set.
        /// </summary>
        [Input("maximumFixableSeverity", required: true)]
        public Input<Pulumi.GoogleNative.BinaryAuthorization.V1.VulnerabilityCheckMaximumFixableSeverity> MaximumFixableSeverity { get; set; } = null!;

        /// <summary>
        /// The threshold for severity for which a fix isn't currently available. This field is required and must be set.
        /// </summary>
        [Input("maximumUnfixableSeverity", required: true)]
        public Input<Pulumi.GoogleNative.BinaryAuthorization.V1.VulnerabilityCheckMaximumUnfixableSeverity> MaximumUnfixableSeverity { get; set; } = null!;

        public VulnerabilityCheckArgs()
        {
        }
        public static new VulnerabilityCheckArgs Empty => new VulnerabilityCheckArgs();
    }
}
