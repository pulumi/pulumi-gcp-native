// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BinaryAuthorization.V1.Inputs
{

    /// <summary>
    /// A Binary Authorization policy for a GKE cluster. This is one type of policy that can occur as a `PlatformPolicy`.
    /// </summary>
    public sealed class GkePolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("checkSets")]
        private InputList<Inputs.CheckSetArgs>? _checkSets;

        /// <summary>
        /// Optional. The `CheckSet` objects to apply, scoped by namespace or namespace and service account. Exactly one `CheckSet` will be evaluated for a given Pod (unless the list is empty, in which case the behavior is "always allow"). If multiple `CheckSet` objects have scopes that match the namespace and service account of the Pod being evaluated, only the `CheckSet` with the MOST SPECIFIC scope will match. `CheckSet` objects must be listed in order of decreasing specificity, i.e. if a scope matches a given service account (which must include the namespace), it must come before a `CheckSet` with a scope matching just that namespace. This property is enforced by server-side validation. The purpose of this restriction is to ensure that if more than one `CheckSet` matches a given Pod, the `CheckSet` that will be evaluated will always be the first in the list to match (because if any other matches, it must be less specific). If `check_sets` is empty, the default behavior is to allow all images. If `check_sets` is non-empty, the last `check_sets` entry must always be a `CheckSet` with no scope set, i.e. a catchall to handle any situation not caught by the preceding `CheckSet` objects.
        /// </summary>
        public InputList<Inputs.CheckSetArgs> CheckSets
        {
            get => _checkSets ?? (_checkSets = new InputList<Inputs.CheckSetArgs>());
            set => _checkSets = value;
        }

        /// <summary>
        /// Optional. Images exempted from this policy. If any of the patterns match the image being evaluated, the rest of the policy will not be evaluated.
        /// </summary>
        [Input("imageAllowlist")]
        public Input<Inputs.ImageAllowlistArgs>? ImageAllowlist { get; set; }

        public GkePolicyArgs()
        {
        }
        public static new GkePolicyArgs Empty => new GkePolicyArgs();
    }
}
