// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BinaryAuthorization.V1.Inputs
{

    /// <summary>
    /// A conjunction of policy checks, scoped to a particular namespace or Kubernetes service account. In order for evaluation of a `CheckSet` to return "allowed" for a given image in a given Pod, one of the following conditions must be satisfied: * The image is explicitly exempted by an entry in `image_allowlist`, OR * ALL of the `checks` evaluate to "allowed".
    /// </summary>
    public sealed class CheckSetArgs : global::Pulumi.ResourceArgs
    {
        [Input("checks")]
        private InputList<Inputs.CheckArgs>? _checks;

        /// <summary>
        /// Optional. The checks to apply. The ultimate result of evaluating the check set will be "allow" if and only if every check in `checks` evaluates to "allow". If `checks` is empty, the default behavior is "always allow".
        /// </summary>
        public InputList<Inputs.CheckArgs> Checks
        {
            get => _checks ?? (_checks = new InputList<Inputs.CheckArgs>());
            set => _checks = value;
        }

        /// <summary>
        /// Optional. A user-provided name for this `CheckSet`. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Optional. Images exempted from this `CheckSet`. If any of the patterns match the image being evaluated, no checks in the `CheckSet` will be evaluated.
        /// </summary>
        [Input("imageAllowlist")]
        public Input<Inputs.ImageAllowlistArgs>? ImageAllowlist { get; set; }

        /// <summary>
        /// Optional. The scope to which this `CheckSet` applies. If unset or an empty string (the default), applies to all namespaces and service accounts. See the `Scope` message documentation for details on scoping rules.
        /// </summary>
        [Input("scope")]
        public Input<Inputs.ScopeArgs>? Scope { get; set; }

        public CheckSetArgs()
        {
        }
        public static new CheckSetArgs Empty => new CheckSetArgs();
    }
}
