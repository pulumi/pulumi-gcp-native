// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Genomics.V1Alpha2
{
    public static class GetPipeline
    {
        /// <summary>
        /// Retrieves a pipeline based on ID. Caller must have READ permission to the project.
        /// </summary>
        public static Task<GetPipelineResult> InvokeAsync(GetPipelineArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPipelineResult>("google-native:genomics/v1alpha2:getPipeline", args ?? new GetPipelineArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a pipeline based on ID. Caller must have READ permission to the project.
        /// </summary>
        public static Output<GetPipelineResult> Invoke(GetPipelineInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPipelineResult>("google-native:genomics/v1alpha2:getPipeline", args ?? new GetPipelineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPipelineArgs : global::Pulumi.InvokeArgs
    {
        [Input("pipelineId", required: true)]
        public string PipelineId { get; set; } = null!;

        public GetPipelineArgs()
        {
        }
        public static new GetPipelineArgs Empty => new GetPipelineArgs();
    }

    public sealed class GetPipelineInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("pipelineId", required: true)]
        public Input<string> PipelineId { get; set; } = null!;

        public GetPipelineInvokeArgs()
        {
        }
        public static new GetPipelineInvokeArgs Empty => new GetPipelineInvokeArgs();
    }


    [OutputType]
    public sealed class GetPipelineResult
    {
        /// <summary>
        /// User-specified description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Specifies the docker run information.
        /// </summary>
        public readonly Outputs.DockerExecutorResponse Docker;
        /// <summary>
        /// Input parameters of the pipeline.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipelineParameterResponse> InputParameters;
        /// <summary>
        /// A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Output parameters of the pipeline.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipelineParameterResponse> OutputParameters;
        /// <summary>
        /// Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
        /// </summary>
        public readonly string PipelineId;
        /// <summary>
        /// The project in which to create the pipeline. The caller must have WRITE access.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
        /// </summary>
        public readonly Outputs.PipelineResourcesResponse Resources;

        [OutputConstructor]
        private GetPipelineResult(
            string description,

            Outputs.DockerExecutorResponse docker,

            ImmutableArray<Outputs.PipelineParameterResponse> inputParameters,

            string name,

            ImmutableArray<Outputs.PipelineParameterResponse> outputParameters,

            string pipelineId,

            string project,

            Outputs.PipelineResourcesResponse resources)
        {
            Description = description;
            Docker = docker;
            InputParameters = inputParameters;
            Name = name;
            OutputParameters = outputParameters;
            PipelineId = pipelineId;
            Project = project;
            Resources = resources;
        }
    }
}
