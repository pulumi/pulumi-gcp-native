// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Genomics.V1Alpha2.Outputs
{

    /// <summary>
    /// The system resources for the pipeline run.
    /// </summary>
    [OutputType]
    public sealed class PipelineResourcesResponse
    {
        /// <summary>
        /// Optional. The number of accelerators of the specified type to attach. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
        /// </summary>
        public readonly string AcceleratorCount;
        /// <summary>
        /// Optional. The Compute Engine defined accelerator type. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit. Please see https://cloud.google.com/compute/docs/gpus/ for a list of available accelerator types.
        /// </summary>
        public readonly string AcceleratorType;
        /// <summary>
        /// The size of the boot disk. Defaults to 10 (GB).
        /// </summary>
        public readonly int BootDiskSizeGb;
        /// <summary>
        /// Disks to attach.
        /// </summary>
        public readonly ImmutableArray<Outputs.DiskResponse> Disks;
        /// <summary>
        /// The minimum number of cores to use. Defaults to 1.
        /// </summary>
        public readonly int MinimumCpuCores;
        /// <summary>
        /// The minimum amount of RAM to use. Defaults to 3.75 (GB)
        /// </summary>
        public readonly double MinimumRamGb;
        /// <summary>
        /// Whether to assign an external IP to the instance. This is an experimental feature that may go away. Defaults to false. Corresponds to `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create). In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time. If you need to ssh into a private IP VM for debugging, you can ssh to a public VM and then ssh into the private VM's Internal IP. If noAddress is set, this pipeline run may only load docker images from Google Container Registry and not Docker Hub. Before using this, you must [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
        /// </summary>
        public readonly bool NoAddress;
        /// <summary>
        /// Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
        /// </summary>
        public readonly bool Preemptible;
        /// <summary>
        /// List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private PipelineResourcesResponse(
            string acceleratorCount,

            string acceleratorType,

            int bootDiskSizeGb,

            ImmutableArray<Outputs.DiskResponse> disks,

            int minimumCpuCores,

            double minimumRamGb,

            bool noAddress,

            bool preemptible,

            ImmutableArray<string> zones)
        {
            AcceleratorCount = acceleratorCount;
            AcceleratorType = acceleratorType;
            BootDiskSizeGb = bootDiskSizeGb;
            Disks = disks;
            MinimumCpuCores = minimumCpuCores;
            MinimumRamGb = minimumRamGb;
            NoAddress = noAddress;
            Preemptible = preemptible;
            Zones = zones;
        }
    }
}
