// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Genomics.V1Alpha2
{
    /// <summary>
    /// Creates a pipeline that can be run later. Create takes a Pipeline that has all fields other than `pipelineId` populated, and then returns the same pipeline with `pipelineId` populated. This id can be used to run the pipeline. Caller must have WRITE permission to the project.
    /// </summary>
    [GoogleNativeResourceType("google-native:genomics/v1alpha2:Pipeline")]
    public partial class Pipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// User-specified description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies the docker run information.
        /// </summary>
        [Output("docker")]
        public Output<Outputs.DockerExecutorResponse> Docker { get; private set; } = null!;

        /// <summary>
        /// Input parameters of the pipeline.
        /// </summary>
        [Output("inputParameters")]
        public Output<ImmutableArray<Outputs.PipelineParameterResponse>> InputParameters { get; private set; } = null!;

        /// <summary>
        /// A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Output parameters of the pipeline.
        /// </summary>
        [Output("outputParameters")]
        public Output<ImmutableArray<Outputs.PipelineParameterResponse>> OutputParameters { get; private set; } = null!;

        /// <summary>
        /// Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
        /// </summary>
        [Output("pipelineId")]
        public Output<string> PipelineId { get; private set; } = null!;

        /// <summary>
        /// The project in which to create the pipeline. The caller must have WRITE access.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
        /// </summary>
        [Output("resources")]
        public Output<Outputs.PipelineResourcesResponse> Resources { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("google-native:genomics/v1alpha2:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:genomics/v1alpha2:Pipeline", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, options);
        }
    }

    public sealed class PipelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User-specified description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the docker run information.
        /// </summary>
        [Input("docker")]
        public Input<Inputs.DockerExecutorArgs>? Docker { get; set; }

        [Input("inputParameters")]
        private InputList<Inputs.PipelineParameterArgs>? _inputParameters;

        /// <summary>
        /// Input parameters of the pipeline.
        /// </summary>
        public InputList<Inputs.PipelineParameterArgs> InputParameters
        {
            get => _inputParameters ?? (_inputParameters = new InputList<Inputs.PipelineParameterArgs>());
            set => _inputParameters = value;
        }

        /// <summary>
        /// A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outputParameters")]
        private InputList<Inputs.PipelineParameterArgs>? _outputParameters;

        /// <summary>
        /// Output parameters of the pipeline.
        /// </summary>
        public InputList<Inputs.PipelineParameterArgs> OutputParameters
        {
            get => _outputParameters ?? (_outputParameters = new InputList<Inputs.PipelineParameterArgs>());
            set => _outputParameters = value;
        }

        /// <summary>
        /// Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
        /// </summary>
        [Input("pipelineId")]
        public Input<string>? PipelineId { get; set; }

        /// <summary>
        /// The project in which to create the pipeline. The caller must have WRITE access.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
        /// </summary>
        [Input("resources", required: true)]
        public Input<Inputs.PipelineResourcesArgs> Resources { get; set; } = null!;

        public PipelineArgs()
        {
        }
        public static new PipelineArgs Empty => new PipelineArgs();
    }
}
