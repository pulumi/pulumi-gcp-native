// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Redis.V1Beta1
{
    public static class GetInstance
    {
        /// <summary>
        /// Gets the details of a specific Redis instance.
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("google-native:redis/v1beta1:getInstance", args ?? new GetInstanceArgs(), options.WithVersion());
    }


    public sealed class GetInstanceArgs : Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetInstanceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        /// <summary>
        /// Optional. Only applicable to STANDARD_HA tier which protects the instance against zonal failures by provisioning it across two zones. If provided, it must be a different zone from the one provided in location_id.
        /// </summary>
        public readonly string AlternativeLocationId;
        /// <summary>
        /// Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to "true" AUTH is enabled on the instance. Default value is "false" meaning AUTH is disabled.
        /// </summary>
        public readonly bool AuthEnabled;
        /// <summary>
        /// Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.
        /// </summary>
        public readonly string AuthorizedNetwork;
        /// <summary>
        /// Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.
        /// </summary>
        public readonly string ConnectMode;
        /// <summary>
        /// The time the instance was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the location_id provided by the user at creation time. For Standard Tier instances, this can be either location_id or alternative_location_id and can change after a failover event.
        /// </summary>
        public readonly string CurrentLocationId;
        /// <summary>
        /// An arbitrary and optional user-provided name for the instance.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// Resource labels to represent user provided metadata
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Optional. The zone where the instance will be provisioned. If not provided, the service will choose a zone for the instance. For STANDARD_HA tier, instances will be created across two zones for protection against zonal failures. If alternative_location_id is also provided, it must be different from location_id.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Required. Redis memory size in GiB.
        /// </summary>
        public readonly int MemorySizeGb;
        /// <summary>
        /// Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which specific zone (or collection of zones for cross-zone instances) an instance should be provisioned in. Refer to location_id and alternative_location_id fields for more details.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is "serviceAccount:". The value may change over time for a given instance so should be checked before each import/export operation.
        /// </summary>
        public readonly string PersistenceIamIdentity;
        /// <summary>
        /// The port number of the exposed Redis endpoint.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Optional. Redis configuration parameters, according to http://redis.io/topics/config. Currently, the only supported parameters are: Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events Redis version 4.0 and newer: * activedefrag * lfu-decay-time * lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: * stream-node-max-bytes * stream-node-max-entries
        /// </summary>
        public readonly ImmutableDictionary<string, string> RedisConfigs;
        /// <summary>
        /// Optional. The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values are: * `REDIS_3_2` for Redis 3.2 compatibility * `REDIS_4_0` for Redis 4.0 compatibility (default) * `REDIS_5_0` for Redis 5.0 compatibility
        /// </summary>
        public readonly string RedisVersion;
        /// <summary>
        /// Optional. For DIRECT_PEERING mode, the CIDR range of internal addresses that are reserved for this instance. Range must be unique and non-overlapping with existing subnets in an authorized network. For PRIVATE_SERVICE_ACCESS mode, the name of one allocated IP address ranges associated with this private service access connection. If not provided, the service will choose an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29.
        /// </summary>
        public readonly string ReservedIpRange;
        /// <summary>
        /// List of server CA certificates for the instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.TlsCertificateResponse> ServerCaCerts;
        /// <summary>
        /// The current state of this instance.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Additional information about the current status of this instance, if available.
        /// </summary>
        public readonly string StatusMessage;
        /// <summary>
        /// Required. The service tier of the instance.
        /// </summary>
        public readonly string Tier;
        /// <summary>
        /// Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.
        /// </summary>
        public readonly string TransitEncryptionMode;

        [OutputConstructor]
        private GetInstanceResult(
            string alternativeLocationId,

            bool authEnabled,

            string authorizedNetwork,

            string connectMode,

            string createTime,

            string currentLocationId,

            string displayName,

            string host,

            ImmutableDictionary<string, string> labels,

            string location,

            int memorySizeGb,

            string name,

            string persistenceIamIdentity,

            int port,

            ImmutableDictionary<string, string> redisConfigs,

            string redisVersion,

            string reservedIpRange,

            ImmutableArray<Outputs.TlsCertificateResponse> serverCaCerts,

            string state,

            string statusMessage,

            string tier,

            string transitEncryptionMode)
        {
            AlternativeLocationId = alternativeLocationId;
            AuthEnabled = authEnabled;
            AuthorizedNetwork = authorizedNetwork;
            ConnectMode = connectMode;
            CreateTime = createTime;
            CurrentLocationId = currentLocationId;
            DisplayName = displayName;
            Host = host;
            Labels = labels;
            Location = location;
            MemorySizeGb = memorySizeGb;
            Name = name;
            PersistenceIamIdentity = persistenceIamIdentity;
            Port = port;
            RedisConfigs = redisConfigs;
            RedisVersion = redisVersion;
            ReservedIpRange = reservedIpRange;
            ServerCaCerts = serverCaCerts;
            State = state;
            StatusMessage = statusMessage;
            Tier = tier;
            TransitEncryptionMode = transitEncryptionMode;
        }
    }
}
