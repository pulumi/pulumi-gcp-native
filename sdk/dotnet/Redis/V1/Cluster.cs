// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Redis.V1
{
    /// <summary>
    /// Creates a Redis cluster based on the specified properties. The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation is completed the Redis cluster will be fully functional. The completed longrunning.Operation will contain the new cluster object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
    /// </summary>
    [GoogleNativeResourceType("google-native:redis/v1:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
        /// </summary>
        [Output("authorizationMode")]
        public Output<string> AuthorizationMode { get; private set; } = null!;

        /// <summary>
        /// Required. The logical name of the Redis cluster in the customer project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the customer project / location
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The timestamp associated with the cluster creation request.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.
        /// </summary>
        [Output("discoveryEndpoints")]
        public Output<ImmutableArray<Outputs.DiscoveryEndpointResponse>> DiscoveryEndpoints { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
        /// </summary>
        [Output("pscConfigs")]
        public Output<ImmutableArray<Outputs.PscConfigResponse>> PscConfigs { get; private set; } = null!;

        /// <summary>
        /// PSC connections for discovery of the cluster topology and accessing the cluster.
        /// </summary>
        [Output("pscConnections")]
        public Output<ImmutableArray<Outputs.PscConnectionResponse>> PscConnections { get; private set; } = null!;

        /// <summary>
        /// Optional. The number of replica nodes per shard.
        /// </summary>
        [Output("replicaCount")]
        public Output<int> ReplicaCount { get; private set; } = null!;

        /// <summary>
        /// Idempotent request UUID.
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// Number of shards for the Redis cluster.
        /// </summary>
        [Output("shardCount")]
        public Output<int> ShardCount { get; private set; } = null!;

        /// <summary>
        /// Redis memory size in GB for the entire cluster.
        /// </summary>
        [Output("sizeGb")]
        public Output<int> SizeGb { get; private set; } = null!;

        /// <summary>
        /// The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Additional information about the current state of the cluster.
        /// </summary>
        [Output("stateInfo")]
        public Output<Outputs.StateInfoResponse> StateInfo { get; private set; } = null!;

        /// <summary>
        /// Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
        /// </summary>
        [Output("transitEncryptionMode")]
        public Output<string> TransitEncryptionMode { get; private set; } = null!;

        /// <summary>
        /// System assigned, unique identifier for the cluster.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("google-native:redis/v1:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:redis/v1:Cluster", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "clusterId",
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
        /// </summary>
        [Input("authorizationMode")]
        public Input<Pulumi.GoogleNative.Redis.V1.ClusterAuthorizationMode>? AuthorizationMode { get; set; }

        /// <summary>
        /// Required. The logical name of the Redis cluster in the customer project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the customer project / location
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("pscConfigs", required: true)]
        private InputList<Inputs.PscConfigArgs>? _pscConfigs;

        /// <summary>
        /// Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
        /// </summary>
        public InputList<Inputs.PscConfigArgs> PscConfigs
        {
            get => _pscConfigs ?? (_pscConfigs = new InputList<Inputs.PscConfigArgs>());
            set => _pscConfigs = value;
        }

        /// <summary>
        /// Optional. The number of replica nodes per shard.
        /// </summary>
        [Input("replicaCount")]
        public Input<int>? ReplicaCount { get; set; }

        /// <summary>
        /// Idempotent request UUID.
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// Number of shards for the Redis cluster.
        /// </summary>
        [Input("shardCount", required: true)]
        public Input<int> ShardCount { get; set; } = null!;

        /// <summary>
        /// Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
        /// </summary>
        [Input("transitEncryptionMode")]
        public Input<Pulumi.GoogleNative.Redis.V1.ClusterTransitEncryptionMode>? TransitEncryptionMode { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }
}
