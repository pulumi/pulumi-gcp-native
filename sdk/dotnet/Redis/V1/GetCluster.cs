// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Redis.V1
{
    public static class GetCluster
    {
        /// <summary>
        /// Gets the details of a specific Redis cluster.
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("google-native:redis/v1:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of a specific Redis cluster.
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("google-native:redis/v1:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
        /// </summary>
        public readonly string AuthorizationMode;
        /// <summary>
        /// The timestamp associated with the cluster creation request.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.
        /// </summary>
        public readonly ImmutableArray<Outputs.DiscoveryEndpointResponse> DiscoveryEndpoints;
        /// <summary>
        /// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
        /// </summary>
        public readonly ImmutableArray<Outputs.PscConfigResponse> PscConfigs;
        /// <summary>
        /// PSC connections for discovery of the cluster topology and accessing the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.PscConnectionResponse> PscConnections;
        /// <summary>
        /// Optional. The number of replica nodes per shard.
        /// </summary>
        public readonly int ReplicaCount;
        /// <summary>
        /// Number of shards for the Redis cluster.
        /// </summary>
        public readonly int ShardCount;
        /// <summary>
        /// Redis memory size in GB for the entire cluster.
        /// </summary>
        public readonly int SizeGb;
        /// <summary>
        /// The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Additional information about the current state of the cluster.
        /// </summary>
        public readonly Outputs.StateInfoResponse StateInfo;
        /// <summary>
        /// Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
        /// </summary>
        public readonly string TransitEncryptionMode;
        /// <summary>
        /// System assigned, unique identifier for the cluster.
        /// </summary>
        public readonly string Uid;

        [OutputConstructor]
        private GetClusterResult(
            string authorizationMode,

            string createTime,

            ImmutableArray<Outputs.DiscoveryEndpointResponse> discoveryEndpoints,

            string name,

            ImmutableArray<Outputs.PscConfigResponse> pscConfigs,

            ImmutableArray<Outputs.PscConnectionResponse> pscConnections,

            int replicaCount,

            int shardCount,

            int sizeGb,

            string state,

            Outputs.StateInfoResponse stateInfo,

            string transitEncryptionMode,

            string uid)
        {
            AuthorizationMode = authorizationMode;
            CreateTime = createTime;
            DiscoveryEndpoints = discoveryEndpoints;
            Name = name;
            PscConfigs = pscConfigs;
            PscConnections = pscConnections;
            ReplicaCount = replicaCount;
            ShardCount = shardCount;
            SizeGb = sizeGb;
            State = state;
            StateInfo = stateInfo;
            TransitEncryptionMode = transitEncryptionMode;
            Uid = uid;
        }
    }
}
