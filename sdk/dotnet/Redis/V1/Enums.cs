// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Redis.V1
{
    /// <summary>
    /// Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.
    /// </summary>
    [EnumType]
    public readonly struct InstanceConnectMode : IEquatable<InstanceConnectMode>
    {
        private readonly string _value;

        private InstanceConnectMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static InstanceConnectMode ConnectModeUnspecified { get; } = new InstanceConnectMode("CONNECT_MODE_UNSPECIFIED");
        /// <summary>
        /// Connect via direct peering to the Memorystore for Redis hosted service.
        /// </summary>
        public static InstanceConnectMode DirectPeering { get; } = new InstanceConnectMode("DIRECT_PEERING");
        /// <summary>
        /// Connect your Memorystore for Redis instance using Private Service Access. Private services access provides an IP address range for multiple Google Cloud services, including Memorystore.
        /// </summary>
        public static InstanceConnectMode PrivateServiceAccess { get; } = new InstanceConnectMode("PRIVATE_SERVICE_ACCESS");

        public static bool operator ==(InstanceConnectMode left, InstanceConnectMode right) => left.Equals(right);
        public static bool operator !=(InstanceConnectMode left, InstanceConnectMode right) => !left.Equals(right);

        public static explicit operator string(InstanceConnectMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceConnectMode other && Equals(other);
        public bool Equals(InstanceConnectMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The service tier of the instance.
    /// </summary>
    [EnumType]
    public readonly struct InstanceTier : IEquatable<InstanceTier>
    {
        private readonly string _value;

        private InstanceTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static InstanceTier TierUnspecified { get; } = new InstanceTier("TIER_UNSPECIFIED");
        /// <summary>
        /// BASIC tier: standalone instance
        /// </summary>
        public static InstanceTier Basic { get; } = new InstanceTier("BASIC");
        /// <summary>
        /// STANDARD_HA tier: highly available primary/replica instances
        /// </summary>
        public static InstanceTier StandardHa { get; } = new InstanceTier("STANDARD_HA");

        public static bool operator ==(InstanceTier left, InstanceTier right) => left.Equals(right);
        public static bool operator !=(InstanceTier left, InstanceTier right) => !left.Equals(right);

        public static explicit operator string(InstanceTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceTier other && Equals(other);
        public bool Equals(InstanceTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.
    /// </summary>
    [EnumType]
    public readonly struct InstanceTransitEncryptionMode : IEquatable<InstanceTransitEncryptionMode>
    {
        private readonly string _value;

        private InstanceTransitEncryptionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static InstanceTransitEncryptionMode TransitEncryptionModeUnspecified { get; } = new InstanceTransitEncryptionMode("TRANSIT_ENCRYPTION_MODE_UNSPECIFIED");
        /// <summary>
        /// Client to Server traffic encryption enabled with server authentication.
        /// </summary>
        public static InstanceTransitEncryptionMode ServerAuthentication { get; } = new InstanceTransitEncryptionMode("SERVER_AUTHENTICATION");
        /// <summary>
        /// TLS is disabled for the instance.
        /// </summary>
        public static InstanceTransitEncryptionMode Disabled { get; } = new InstanceTransitEncryptionMode("DISABLED");

        public static bool operator ==(InstanceTransitEncryptionMode left, InstanceTransitEncryptionMode right) => left.Equals(right);
        public static bool operator !=(InstanceTransitEncryptionMode left, InstanceTransitEncryptionMode right) => !left.Equals(right);

        public static explicit operator string(InstanceTransitEncryptionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceTransitEncryptionMode other && Equals(other);
        public bool Equals(InstanceTransitEncryptionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The day of week that maintenance updates occur.
    /// </summary>
    [EnumType]
    public readonly struct WeeklyMaintenanceWindowDay : IEquatable<WeeklyMaintenanceWindowDay>
    {
        private readonly string _value;

        private WeeklyMaintenanceWindowDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The day of the week is unspecified.
        /// </summary>
        public static WeeklyMaintenanceWindowDay DayOfWeekUnspecified { get; } = new WeeklyMaintenanceWindowDay("DAY_OF_WEEK_UNSPECIFIED");
        /// <summary>
        /// Monday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Monday { get; } = new WeeklyMaintenanceWindowDay("MONDAY");
        /// <summary>
        /// Tuesday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Tuesday { get; } = new WeeklyMaintenanceWindowDay("TUESDAY");
        /// <summary>
        /// Wednesday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Wednesday { get; } = new WeeklyMaintenanceWindowDay("WEDNESDAY");
        /// <summary>
        /// Thursday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Thursday { get; } = new WeeklyMaintenanceWindowDay("THURSDAY");
        /// <summary>
        /// Friday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Friday { get; } = new WeeklyMaintenanceWindowDay("FRIDAY");
        /// <summary>
        /// Saturday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Saturday { get; } = new WeeklyMaintenanceWindowDay("SATURDAY");
        /// <summary>
        /// Sunday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Sunday { get; } = new WeeklyMaintenanceWindowDay("SUNDAY");

        public static bool operator ==(WeeklyMaintenanceWindowDay left, WeeklyMaintenanceWindowDay right) => left.Equals(right);
        public static bool operator !=(WeeklyMaintenanceWindowDay left, WeeklyMaintenanceWindowDay right) => !left.Equals(right);

        public static explicit operator string(WeeklyMaintenanceWindowDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeeklyMaintenanceWindowDay other && Equals(other);
        public bool Equals(WeeklyMaintenanceWindowDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
