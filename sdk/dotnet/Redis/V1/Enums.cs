// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Redis.V1
{
    /// <summary>
    /// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
    /// </summary>
    [EnumType]
    public readonly struct ClusterAuthorizationMode : IEquatable<ClusterAuthorizationMode>
    {
        private readonly string _value;

        private ClusterAuthorizationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static ClusterAuthorizationMode AuthModeUnspecified { get; } = new ClusterAuthorizationMode("AUTH_MODE_UNSPECIFIED");
        /// <summary>
        /// IAM basic authorization mode
        /// </summary>
        public static ClusterAuthorizationMode AuthModeIamAuth { get; } = new ClusterAuthorizationMode("AUTH_MODE_IAM_AUTH");
        /// <summary>
        /// Authorization disabled mode
        /// </summary>
        public static ClusterAuthorizationMode AuthModeDisabled { get; } = new ClusterAuthorizationMode("AUTH_MODE_DISABLED");

        public static bool operator ==(ClusterAuthorizationMode left, ClusterAuthorizationMode right) => left.Equals(right);
        public static bool operator !=(ClusterAuthorizationMode left, ClusterAuthorizationMode right) => !left.Equals(right);

        public static explicit operator string(ClusterAuthorizationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusterAuthorizationMode other && Equals(other);
        public bool Equals(ClusterAuthorizationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
    /// </summary>
    [EnumType]
    public readonly struct ClusterTransitEncryptionMode : IEquatable<ClusterTransitEncryptionMode>
    {
        private readonly string _value;

        private ClusterTransitEncryptionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// In-transit encryption not set.
        /// </summary>
        public static ClusterTransitEncryptionMode TransitEncryptionModeUnspecified { get; } = new ClusterTransitEncryptionMode("TRANSIT_ENCRYPTION_MODE_UNSPECIFIED");
        /// <summary>
        /// In-transit encryption disabled.
        /// </summary>
        public static ClusterTransitEncryptionMode TransitEncryptionModeDisabled { get; } = new ClusterTransitEncryptionMode("TRANSIT_ENCRYPTION_MODE_DISABLED");
        /// <summary>
        /// Use server managed encryption for in-transit encryption.
        /// </summary>
        public static ClusterTransitEncryptionMode TransitEncryptionModeServerAuthentication { get; } = new ClusterTransitEncryptionMode("TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION");

        public static bool operator ==(ClusterTransitEncryptionMode left, ClusterTransitEncryptionMode right) => left.Equals(right);
        public static bool operator !=(ClusterTransitEncryptionMode left, ClusterTransitEncryptionMode right) => !left.Equals(right);

        public static explicit operator string(ClusterTransitEncryptionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusterTransitEncryptionMode other && Equals(other);
        public bool Equals(ClusterTransitEncryptionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.
    /// </summary>
    [EnumType]
    public readonly struct InstanceConnectMode : IEquatable<InstanceConnectMode>
    {
        private readonly string _value;

        private InstanceConnectMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static InstanceConnectMode ConnectModeUnspecified { get; } = new InstanceConnectMode("CONNECT_MODE_UNSPECIFIED");
        /// <summary>
        /// Connect via direct peering to the Memorystore for Redis hosted service.
        /// </summary>
        public static InstanceConnectMode DirectPeering { get; } = new InstanceConnectMode("DIRECT_PEERING");
        /// <summary>
        /// Connect your Memorystore for Redis instance using Private Service Access. Private services access provides an IP address range for multiple Google Cloud services, including Memorystore.
        /// </summary>
        public static InstanceConnectMode PrivateServiceAccess { get; } = new InstanceConnectMode("PRIVATE_SERVICE_ACCESS");

        public static bool operator ==(InstanceConnectMode left, InstanceConnectMode right) => left.Equals(right);
        public static bool operator !=(InstanceConnectMode left, InstanceConnectMode right) => !left.Equals(right);

        public static explicit operator string(InstanceConnectMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceConnectMode other && Equals(other);
        public bool Equals(InstanceConnectMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Read replicas mode for the instance. Defaults to READ_REPLICAS_DISABLED.
    /// </summary>
    [EnumType]
    public readonly struct InstanceReadReplicasMode : IEquatable<InstanceReadReplicasMode>
    {
        private readonly string _value;

        private InstanceReadReplicasMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
        /// </summary>
        public static InstanceReadReplicasMode ReadReplicasModeUnspecified { get; } = new InstanceReadReplicasMode("READ_REPLICAS_MODE_UNSPECIFIED");
        /// <summary>
        /// If disabled, read endpoint will not be provided and the instance cannot scale up or down the number of replicas.
        /// </summary>
        public static InstanceReadReplicasMode ReadReplicasDisabled { get; } = new InstanceReadReplicasMode("READ_REPLICAS_DISABLED");
        /// <summary>
        /// If enabled, read endpoint will be provided and the instance can scale up and down the number of replicas. Not valid for basic tier.
        /// </summary>
        public static InstanceReadReplicasMode ReadReplicasEnabled { get; } = new InstanceReadReplicasMode("READ_REPLICAS_ENABLED");

        public static bool operator ==(InstanceReadReplicasMode left, InstanceReadReplicasMode right) => left.Equals(right);
        public static bool operator !=(InstanceReadReplicasMode left, InstanceReadReplicasMode right) => !left.Equals(right);

        public static explicit operator string(InstanceReadReplicasMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceReadReplicasMode other && Equals(other);
        public bool Equals(InstanceReadReplicasMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct InstanceSuspensionReasonsItem : IEquatable<InstanceSuspensionReasonsItem>
    {
        private readonly string _value;

        private InstanceSuspensionReasonsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static InstanceSuspensionReasonsItem SuspensionReasonUnspecified { get; } = new InstanceSuspensionReasonsItem("SUSPENSION_REASON_UNSPECIFIED");
        /// <summary>
        /// Something wrong with the CMEK key provided by customer.
        /// </summary>
        public static InstanceSuspensionReasonsItem CustomerManagedKeyIssue { get; } = new InstanceSuspensionReasonsItem("CUSTOMER_MANAGED_KEY_ISSUE");

        public static bool operator ==(InstanceSuspensionReasonsItem left, InstanceSuspensionReasonsItem right) => left.Equals(right);
        public static bool operator !=(InstanceSuspensionReasonsItem left, InstanceSuspensionReasonsItem right) => !left.Equals(right);

        public static explicit operator string(InstanceSuspensionReasonsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceSuspensionReasonsItem other && Equals(other);
        public bool Equals(InstanceSuspensionReasonsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The service tier of the instance.
    /// </summary>
    [EnumType]
    public readonly struct InstanceTier : IEquatable<InstanceTier>
    {
        private readonly string _value;

        private InstanceTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static InstanceTier TierUnspecified { get; } = new InstanceTier("TIER_UNSPECIFIED");
        /// <summary>
        /// BASIC tier: standalone instance
        /// </summary>
        public static InstanceTier Basic { get; } = new InstanceTier("BASIC");
        /// <summary>
        /// STANDARD_HA tier: highly available primary/replica instances
        /// </summary>
        public static InstanceTier StandardHa { get; } = new InstanceTier("STANDARD_HA");

        public static bool operator ==(InstanceTier left, InstanceTier right) => left.Equals(right);
        public static bool operator !=(InstanceTier left, InstanceTier right) => !left.Equals(right);

        public static explicit operator string(InstanceTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceTier other && Equals(other);
        public bool Equals(InstanceTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.
    /// </summary>
    [EnumType]
    public readonly struct InstanceTransitEncryptionMode : IEquatable<InstanceTransitEncryptionMode>
    {
        private readonly string _value;

        private InstanceTransitEncryptionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static InstanceTransitEncryptionMode TransitEncryptionModeUnspecified { get; } = new InstanceTransitEncryptionMode("TRANSIT_ENCRYPTION_MODE_UNSPECIFIED");
        /// <summary>
        /// Client to Server traffic encryption enabled with server authentication.
        /// </summary>
        public static InstanceTransitEncryptionMode ServerAuthentication { get; } = new InstanceTransitEncryptionMode("SERVER_AUTHENTICATION");
        /// <summary>
        /// TLS is disabled for the instance.
        /// </summary>
        public static InstanceTransitEncryptionMode Disabled { get; } = new InstanceTransitEncryptionMode("DISABLED");

        public static bool operator ==(InstanceTransitEncryptionMode left, InstanceTransitEncryptionMode right) => left.Equals(right);
        public static bool operator !=(InstanceTransitEncryptionMode left, InstanceTransitEncryptionMode right) => !left.Equals(right);

        public static explicit operator string(InstanceTransitEncryptionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceTransitEncryptionMode other && Equals(other);
        public bool Equals(InstanceTransitEncryptionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
    /// </summary>
    [EnumType]
    public readonly struct PersistenceConfigPersistenceMode : IEquatable<PersistenceConfigPersistenceMode>
    {
        private readonly string _value;

        private PersistenceConfigPersistenceMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static PersistenceConfigPersistenceMode PersistenceModeUnspecified { get; } = new PersistenceConfigPersistenceMode("PERSISTENCE_MODE_UNSPECIFIED");
        /// <summary>
        /// Persistence is disabled for the instance, and any existing snapshots are deleted.
        /// </summary>
        public static PersistenceConfigPersistenceMode Disabled { get; } = new PersistenceConfigPersistenceMode("DISABLED");
        /// <summary>
        /// RDB based Persistence is enabled.
        /// </summary>
        public static PersistenceConfigPersistenceMode Rdb { get; } = new PersistenceConfigPersistenceMode("RDB");

        public static bool operator ==(PersistenceConfigPersistenceMode left, PersistenceConfigPersistenceMode right) => left.Equals(right);
        public static bool operator !=(PersistenceConfigPersistenceMode left, PersistenceConfigPersistenceMode right) => !left.Equals(right);

        public static explicit operator string(PersistenceConfigPersistenceMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PersistenceConfigPersistenceMode other && Equals(other);
        public bool Equals(PersistenceConfigPersistenceMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
    /// </summary>
    [EnumType]
    public readonly struct PersistenceConfigRdbSnapshotPeriod : IEquatable<PersistenceConfigRdbSnapshotPeriod>
    {
        private readonly string _value;

        private PersistenceConfigRdbSnapshotPeriod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not set.
        /// </summary>
        public static PersistenceConfigRdbSnapshotPeriod SnapshotPeriodUnspecified { get; } = new PersistenceConfigRdbSnapshotPeriod("SNAPSHOT_PERIOD_UNSPECIFIED");
        /// <summary>
        /// Snapshot every 1 hour.
        /// </summary>
        public static PersistenceConfigRdbSnapshotPeriod OneHour { get; } = new PersistenceConfigRdbSnapshotPeriod("ONE_HOUR");
        /// <summary>
        /// Snapshot every 6 hours.
        /// </summary>
        public static PersistenceConfigRdbSnapshotPeriod SixHours { get; } = new PersistenceConfigRdbSnapshotPeriod("SIX_HOURS");
        /// <summary>
        /// Snapshot every 12 hours.
        /// </summary>
        public static PersistenceConfigRdbSnapshotPeriod TwelveHours { get; } = new PersistenceConfigRdbSnapshotPeriod("TWELVE_HOURS");
        /// <summary>
        /// Snapshot every 24 hours.
        /// </summary>
        public static PersistenceConfigRdbSnapshotPeriod TwentyFourHours { get; } = new PersistenceConfigRdbSnapshotPeriod("TWENTY_FOUR_HOURS");

        public static bool operator ==(PersistenceConfigRdbSnapshotPeriod left, PersistenceConfigRdbSnapshotPeriod right) => left.Equals(right);
        public static bool operator !=(PersistenceConfigRdbSnapshotPeriod left, PersistenceConfigRdbSnapshotPeriod right) => !left.Equals(right);

        public static explicit operator string(PersistenceConfigRdbSnapshotPeriod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PersistenceConfigRdbSnapshotPeriod other && Equals(other);
        public bool Equals(PersistenceConfigRdbSnapshotPeriod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The day of week that maintenance updates occur.
    /// </summary>
    [EnumType]
    public readonly struct WeeklyMaintenanceWindowDay : IEquatable<WeeklyMaintenanceWindowDay>
    {
        private readonly string _value;

        private WeeklyMaintenanceWindowDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The day of the week is unspecified.
        /// </summary>
        public static WeeklyMaintenanceWindowDay DayOfWeekUnspecified { get; } = new WeeklyMaintenanceWindowDay("DAY_OF_WEEK_UNSPECIFIED");
        /// <summary>
        /// Monday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Monday { get; } = new WeeklyMaintenanceWindowDay("MONDAY");
        /// <summary>
        /// Tuesday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Tuesday { get; } = new WeeklyMaintenanceWindowDay("TUESDAY");
        /// <summary>
        /// Wednesday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Wednesday { get; } = new WeeklyMaintenanceWindowDay("WEDNESDAY");
        /// <summary>
        /// Thursday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Thursday { get; } = new WeeklyMaintenanceWindowDay("THURSDAY");
        /// <summary>
        /// Friday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Friday { get; } = new WeeklyMaintenanceWindowDay("FRIDAY");
        /// <summary>
        /// Saturday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Saturday { get; } = new WeeklyMaintenanceWindowDay("SATURDAY");
        /// <summary>
        /// Sunday
        /// </summary>
        public static WeeklyMaintenanceWindowDay Sunday { get; } = new WeeklyMaintenanceWindowDay("SUNDAY");

        public static bool operator ==(WeeklyMaintenanceWindowDay left, WeeklyMaintenanceWindowDay right) => left.Equals(right);
        public static bool operator !=(WeeklyMaintenanceWindowDay left, WeeklyMaintenanceWindowDay right) => !left.Equals(right);

        public static explicit operator string(WeeklyMaintenanceWindowDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeeklyMaintenanceWindowDay other && Equals(other);
        public bool Equals(WeeklyMaintenanceWindowDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
