// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleCloud.Gkehub.V1alpha
{
    /// <summary>
    /// Adds a new Feature.
    /// </summary>
    [GoogleCloudResourceType("google-cloud:gkehub/v1alpha:Feature")]
    public partial class Feature : Pulumi.CustomResource
    {
        /// <summary>
        /// Create a Feature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Feature(string name, FeatureArgs args, CustomResourceOptions? options = null)
            : base("google-cloud:gkehub/v1alpha:Feature", name, args ?? new FeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Feature(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-cloud:gkehub/v1alpha:Feature", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Feature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Feature Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Feature(name, id, options);
        }
    }

    public sealed class FeatureArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Output only. When the Feature resource was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Output only. When the Feature resource was deleted.
        /// </summary>
        [Input("deleteTime")]
        public Input<string>? DeleteTime { get; set; }

        /// <summary>
        /// The ID of the feature to create.
        /// </summary>
        [Input("featureId")]
        public Input<string>? FeatureId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// GCP labels for this Feature.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("membershipSpecs")]
        private InputMap<string>? _membershipSpecs;

        /// <summary>
        /// Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: projects/{p}/locations/{l}/memberships/{m} Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
        /// </summary>
        public InputMap<string> MembershipSpecs
        {
            get => _membershipSpecs ?? (_membershipSpecs = new InputMap<string>());
            set => _membershipSpecs = value;
        }

        [Input("membershipStates")]
        private InputMap<string>? _membershipStates;

        /// <summary>
        /// Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: projects/{p}/locations/{l}/memberships/{m} Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
        /// </summary>
        public InputMap<string> MembershipStates
        {
            get => _membershipStates ?? (_membershipStates = new InputMap<string>());
            set => _membershipStates = value;
        }

        /// <summary>
        /// Output only. The full, unique name of this Feature resource in the format `projects/*/locations/global/features/*`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent (project and location) where the Feature will be created. Specified in the format `projects/*/locations/global`.
        /// </summary>
        [Input("parent", required: true)]
        public Input<string> Parent { get; set; } = null!;

        /// <summary>
        /// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// Output only. State of the Feature resource itself.
        /// </summary>
        [Input("resourceState")]
        public Input<Inputs.FeatureResourceStateArgs>? ResourceState { get; set; }

        /// <summary>
        /// Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.CommonFeatureSpecArgs>? Spec { get; set; }

        /// <summary>
        /// Output only. The Hub-wide Feature state.
        /// </summary>
        [Input("state")]
        public Input<Inputs.CommonFeatureStateArgs>? State { get; set; }

        /// <summary>
        /// Output only. When the Feature resource was last updated.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public FeatureArgs()
        {
        }
    }
}
