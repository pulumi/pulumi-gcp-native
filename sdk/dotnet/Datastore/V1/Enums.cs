// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Datastore.V1
{
    /// <summary>
    /// Required. The indexed property's direction. Must not be DIRECTION_UNSPECIFIED.
    /// </summary>
    [EnumType]
    public readonly struct GoogleDatastoreAdminV1IndexedPropertyDirection : IEquatable<GoogleDatastoreAdminV1IndexedPropertyDirection>
    {
        private readonly string _value;

        private GoogleDatastoreAdminV1IndexedPropertyDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The direction is unspecified.
        /// </summary>
        public static GoogleDatastoreAdminV1IndexedPropertyDirection DirectionUnspecified { get; } = new GoogleDatastoreAdminV1IndexedPropertyDirection("DIRECTION_UNSPECIFIED");
        /// <summary>
        /// The property's values are indexed so as to support sequencing in ascending order and also query by &lt;, &gt;, &lt;=, &gt;=, and =.
        /// </summary>
        public static GoogleDatastoreAdminV1IndexedPropertyDirection Ascending { get; } = new GoogleDatastoreAdminV1IndexedPropertyDirection("ASCENDING");
        /// <summary>
        /// The property's values are indexed so as to support sequencing in descending order and also query by &lt;, &gt;, &lt;=, &gt;=, and =.
        /// </summary>
        public static GoogleDatastoreAdminV1IndexedPropertyDirection Descending { get; } = new GoogleDatastoreAdminV1IndexedPropertyDirection("DESCENDING");

        public static bool operator ==(GoogleDatastoreAdminV1IndexedPropertyDirection left, GoogleDatastoreAdminV1IndexedPropertyDirection right) => left.Equals(right);
        public static bool operator !=(GoogleDatastoreAdminV1IndexedPropertyDirection left, GoogleDatastoreAdminV1IndexedPropertyDirection right) => !left.Equals(right);

        public static explicit operator string(GoogleDatastoreAdminV1IndexedPropertyDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleDatastoreAdminV1IndexedPropertyDirection other && Equals(other);
        public bool Equals(GoogleDatastoreAdminV1IndexedPropertyDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.
    /// </summary>
    [EnumType]
    public readonly struct IndexAncestor : IEquatable<IndexAncestor>
    {
        private readonly string _value;

        private IndexAncestor(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The ancestor mode is unspecified.
        /// </summary>
        public static IndexAncestor AncestorModeUnspecified { get; } = new IndexAncestor("ANCESTOR_MODE_UNSPECIFIED");
        /// <summary>
        /// Do not include the entity's ancestors in the index.
        /// </summary>
        public static IndexAncestor None { get; } = new IndexAncestor("NONE");
        /// <summary>
        /// Include all the entity's ancestors in the index.
        /// </summary>
        public static IndexAncestor AllAncestors { get; } = new IndexAncestor("ALL_ANCESTORS");

        public static bool operator ==(IndexAncestor left, IndexAncestor right) => left.Equals(right);
        public static bool operator !=(IndexAncestor left, IndexAncestor right) => !left.Equals(right);

        public static explicit operator string(IndexAncestor value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexAncestor other && Equals(other);
        public bool Equals(IndexAncestor other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
