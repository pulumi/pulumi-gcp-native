// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.DLP.V2
{
    /// <summary>
    /// Required. A status for this configuration.
    /// </summary>
    [EnumType]
    public readonly struct DiscoveryConfigStatus : IEquatable<DiscoveryConfigStatus>
    {
        private readonly string _value;

        private DiscoveryConfigStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused
        /// </summary>
        public static DiscoveryConfigStatus StatusUnspecified { get; } = new DiscoveryConfigStatus("STATUS_UNSPECIFIED");
        /// <summary>
        /// The discovery config is currently active.
        /// </summary>
        public static DiscoveryConfigStatus Running { get; } = new DiscoveryConfigStatus("RUNNING");
        /// <summary>
        /// The discovery config is paused temporarily.
        /// </summary>
        public static DiscoveryConfigStatus Paused { get; } = new DiscoveryConfigStatus("PAUSED");

        public static bool operator ==(DiscoveryConfigStatus left, DiscoveryConfigStatus right) => left.Equals(right);
        public static bool operator !=(DiscoveryConfigStatus left, DiscoveryConfigStatus right) => !left.Equals(right);

        public static explicit operator string(DiscoveryConfigStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiscoveryConfigStatus other && Equals(other);
        public bool Equals(DiscoveryConfigStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GooglePrivacyDlpV2BigQueryOptionsSampleMethod : IEquatable<GooglePrivacyDlpV2BigQueryOptionsSampleMethod>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2BigQueryOptionsSampleMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GooglePrivacyDlpV2BigQueryOptionsSampleMethod SampleMethodUnspecified { get; } = new GooglePrivacyDlpV2BigQueryOptionsSampleMethod("SAMPLE_METHOD_UNSPECIFIED");
        /// <summary>
        /// Scan groups of rows in the order BigQuery provides (default). Multiple groups of rows may be scanned in parallel, so results may not appear in the same order the rows are read.
        /// </summary>
        public static GooglePrivacyDlpV2BigQueryOptionsSampleMethod Top { get; } = new GooglePrivacyDlpV2BigQueryOptionsSampleMethod("TOP");
        /// <summary>
        /// Randomly pick groups of rows to scan.
        /// </summary>
        public static GooglePrivacyDlpV2BigQueryOptionsSampleMethod RandomStart { get; } = new GooglePrivacyDlpV2BigQueryOptionsSampleMethod("RANDOM_START");

        public static bool operator ==(GooglePrivacyDlpV2BigQueryOptionsSampleMethod left, GooglePrivacyDlpV2BigQueryOptionsSampleMethod right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2BigQueryOptionsSampleMethod left, GooglePrivacyDlpV2BigQueryOptionsSampleMethod right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2BigQueryOptionsSampleMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2BigQueryOptionsSampleMethod other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2BigQueryOptionsSampleMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GooglePrivacyDlpV2BigQueryTableTypesTypesItem : IEquatable<GooglePrivacyDlpV2BigQueryTableTypesTypesItem>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2BigQueryTableTypesTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2BigQueryTableTypesTypesItem BigQueryTableTypeUnspecified { get; } = new GooglePrivacyDlpV2BigQueryTableTypesTypesItem("BIG_QUERY_TABLE_TYPE_UNSPECIFIED");
        /// <summary>
        /// A normal BigQuery table.
        /// </summary>
        public static GooglePrivacyDlpV2BigQueryTableTypesTypesItem BigQueryTableTypeTable { get; } = new GooglePrivacyDlpV2BigQueryTableTypesTypesItem("BIG_QUERY_TABLE_TYPE_TABLE");
        /// <summary>
        /// A table that references data stored in Cloud Storage.
        /// </summary>
        public static GooglePrivacyDlpV2BigQueryTableTypesTypesItem BigQueryTableTypeExternalBigLake { get; } = new GooglePrivacyDlpV2BigQueryTableTypesTypesItem("BIG_QUERY_TABLE_TYPE_EXTERNAL_BIG_LAKE");

        public static bool operator ==(GooglePrivacyDlpV2BigQueryTableTypesTypesItem left, GooglePrivacyDlpV2BigQueryTableTypesTypesItem right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2BigQueryTableTypesTypesItem left, GooglePrivacyDlpV2BigQueryTableTypesTypesItem right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2BigQueryTableTypesTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2BigQueryTableTypesTypesItem other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2BigQueryTableTypesTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Common characters to not transform when masking. Useful to avoid removing punctuation.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore : IEquatable<GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore CommonCharsToIgnoreUnspecified { get; } = new GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore("COMMON_CHARS_TO_IGNORE_UNSPECIFIED");
        /// <summary>
        /// 0-9
        /// </summary>
        public static GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore Numeric { get; } = new GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore("NUMERIC");
        /// <summary>
        /// A-Z
        /// </summary>
        public static GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore AlphaUpperCase { get; } = new GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore("ALPHA_UPPER_CASE");
        /// <summary>
        /// a-z
        /// </summary>
        public static GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore AlphaLowerCase { get; } = new GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore("ALPHA_LOWER_CASE");
        /// <summary>
        /// US Punctuation, one of !"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~
        /// </summary>
        public static GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore Punctuation { get; } = new GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore("PUNCTUATION");
        /// <summary>
        /// Whitespace character, one of [ \t\n\x0B\f\r]
        /// </summary>
        public static GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore Whitespace { get; } = new GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore("WHITESPACE");

        public static bool operator ==(GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore left, GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore left, GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem : IEquatable<GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Includes all files.
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem FileTypeUnspecified { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("FILE_TYPE_UNSPECIFIED");
        /// <summary>
        /// Includes all file extensions not covered by another entry. Binary scanning attempts to convert the content of the file to utf_8 to scan the file. If you wish to avoid this fall back, specify one or more of the other file types in your storage scan.
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem BinaryFile { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("BINARY_FILE");
        /// <summary>
        /// Included file extensions: asc,asp, aspx, brf, c, cc,cfm, cgi, cpp, csv, cxx, c++, cs, css, dart, dat, dot, eml,, epbub, ged, go, h, hh, hpp, hxx, h++, hs, html, htm, mkd, markdown, m, ml, mli, perl, pl, plist, pm, php, phtml, pht, properties, py, pyw, rb, rbw, rs, rss, rc, scala, sh, sql, swift, tex, shtml, shtm, xhtml, lhs, ics, ini, java, js, json, kix, kml, ocaml, md, txt, text, tsv, vb, vcard, vcs, wml, xcodeproj, xml, xsl, xsd, yml, yaml.
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem TextFile { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("TEXT_FILE");
        /// <summary>
        /// Included file extensions: bmp, gif, jpg, jpeg, jpe, png. Setting bytes_limit_per_file or bytes_limit_per_file_percent has no effect on image files. Image inspection is restricted to the `global`, `us`, `asia`, and `europe` regions.
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem Image { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("IMAGE");
        /// <summary>
        /// Microsoft Word files larger than 30 MB will be scanned as binary files. Included file extensions: docx, dotx, docm, dotm. Setting `bytes_limit_per_file` or `bytes_limit_per_file_percent` has no effect on Word files.
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem Word { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("WORD");
        /// <summary>
        /// PDF files larger than 30 MB will be scanned as binary files. Included file extensions: pdf. Setting `bytes_limit_per_file` or `bytes_limit_per_file_percent` has no effect on PDF files.
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem Pdf { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("PDF");
        /// <summary>
        /// Included file extensions: avro
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem Avro { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("AVRO");
        /// <summary>
        /// Included file extensions: csv
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem Csv { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("CSV");
        /// <summary>
        /// Included file extensions: tsv
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem Tsv { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("TSV");
        /// <summary>
        /// Microsoft PowerPoint files larger than 30 MB will be scanned as binary files. Included file extensions: pptx, pptm, potx, potm, pot. Setting `bytes_limit_per_file` or `bytes_limit_per_file_percent` has no effect on PowerPoint files.
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem Powerpoint { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("POWERPOINT");
        /// <summary>
        /// Microsoft Excel files larger than 30 MB will be scanned as binary files. Included file extensions: xlsx, xlsm, xltx, xltm. Setting `bytes_limit_per_file` or `bytes_limit_per_file_percent` has no effect on Excel files.
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem Excel { get; } = new GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem("EXCEL");

        public static bool operator ==(GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem left, GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem left, GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GooglePrivacyDlpV2CloudStorageOptionsSampleMethod : IEquatable<GooglePrivacyDlpV2CloudStorageOptionsSampleMethod>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2CloudStorageOptionsSampleMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GooglePrivacyDlpV2CloudStorageOptionsSampleMethod SampleMethodUnspecified { get; } = new GooglePrivacyDlpV2CloudStorageOptionsSampleMethod("SAMPLE_METHOD_UNSPECIFIED");
        /// <summary>
        /// Scan from the top (default).
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsSampleMethod Top { get; } = new GooglePrivacyDlpV2CloudStorageOptionsSampleMethod("TOP");
        /// <summary>
        /// For each file larger than bytes_limit_per_file, randomly pick the offset to start scanning. The scanned bytes are contiguous.
        /// </summary>
        public static GooglePrivacyDlpV2CloudStorageOptionsSampleMethod RandomStart { get; } = new GooglePrivacyDlpV2CloudStorageOptionsSampleMethod("RANDOM_START");

        public static bool operator ==(GooglePrivacyDlpV2CloudStorageOptionsSampleMethod left, GooglePrivacyDlpV2CloudStorageOptionsSampleMethod right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2CloudStorageOptionsSampleMethod left, GooglePrivacyDlpV2CloudStorageOptionsSampleMethod right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2CloudStorageOptionsSampleMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2CloudStorageOptionsSampleMethod other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2CloudStorageOptionsSampleMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. Operator used to compare the field or infoType to the value.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2ConditionOperator : IEquatable<GooglePrivacyDlpV2ConditionOperator>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2ConditionOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused
        /// </summary>
        public static GooglePrivacyDlpV2ConditionOperator RelationalOperatorUnspecified { get; } = new GooglePrivacyDlpV2ConditionOperator("RELATIONAL_OPERATOR_UNSPECIFIED");
        /// <summary>
        /// Equal. Attempts to match even with incompatible types.
        /// </summary>
        public static GooglePrivacyDlpV2ConditionOperator EqualTo { get; } = new GooglePrivacyDlpV2ConditionOperator("EQUAL_TO");
        /// <summary>
        /// Not equal to. Attempts to match even with incompatible types.
        /// </summary>
        public static GooglePrivacyDlpV2ConditionOperator NotEqualTo { get; } = new GooglePrivacyDlpV2ConditionOperator("NOT_EQUAL_TO");
        /// <summary>
        /// Greater than.
        /// </summary>
        public static GooglePrivacyDlpV2ConditionOperator GreaterThan { get; } = new GooglePrivacyDlpV2ConditionOperator("GREATER_THAN");
        /// <summary>
        /// Less than.
        /// </summary>
        public static GooglePrivacyDlpV2ConditionOperator LessThan { get; } = new GooglePrivacyDlpV2ConditionOperator("LESS_THAN");
        /// <summary>
        /// Greater than or equals.
        /// </summary>
        public static GooglePrivacyDlpV2ConditionOperator GreaterThanOrEquals { get; } = new GooglePrivacyDlpV2ConditionOperator("GREATER_THAN_OR_EQUALS");
        /// <summary>
        /// Less than or equals.
        /// </summary>
        public static GooglePrivacyDlpV2ConditionOperator LessThanOrEquals { get; } = new GooglePrivacyDlpV2ConditionOperator("LESS_THAN_OR_EQUALS");
        /// <summary>
        /// Exists
        /// </summary>
        public static GooglePrivacyDlpV2ConditionOperator Exists { get; } = new GooglePrivacyDlpV2ConditionOperator("EXISTS");

        public static bool operator ==(GooglePrivacyDlpV2ConditionOperator left, GooglePrivacyDlpV2ConditionOperator right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2ConditionOperator left, GooglePrivacyDlpV2ConditionOperator right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2ConditionOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2ConditionOperator other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2ConditionOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Common alphabets.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet : IEquatable<GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet FfxCommonNativeAlphabetUnspecified { get; } = new GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet("FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED");
        /// <summary>
        /// `[0-9]` (radix of 10)
        /// </summary>
        public static GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet Numeric { get; } = new GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet("NUMERIC");
        /// <summary>
        /// `[0-9A-F]` (radix of 16)
        /// </summary>
        public static GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet Hexadecimal { get; } = new GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet("HEXADECIMAL");
        /// <summary>
        /// `[0-9A-Z]` (radix of 36)
        /// </summary>
        public static GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet UpperCaseAlphaNumeric { get; } = new GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet("UPPER_CASE_ALPHA_NUMERIC");
        /// <summary>
        /// `[0-9A-Za-z]` (radix of 62)
        /// </summary>
        public static GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet AlphaNumeric { get; } = new GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet("ALPHA_NUMERIC");

        public static bool operator ==(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet left, GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet left, GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2CustomInfoTypeExclusionType : IEquatable<GooglePrivacyDlpV2CustomInfoTypeExclusionType>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2CustomInfoTypeExclusionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A finding of this custom info type will not be excluded from results.
        /// </summary>
        public static GooglePrivacyDlpV2CustomInfoTypeExclusionType ExclusionTypeUnspecified { get; } = new GooglePrivacyDlpV2CustomInfoTypeExclusionType("EXCLUSION_TYPE_UNSPECIFIED");
        /// <summary>
        /// A finding of this custom info type will be excluded from final results, but can still affect rule execution.
        /// </summary>
        public static GooglePrivacyDlpV2CustomInfoTypeExclusionType ExclusionTypeExclude { get; } = new GooglePrivacyDlpV2CustomInfoTypeExclusionType("EXCLUSION_TYPE_EXCLUDE");

        public static bool operator ==(GooglePrivacyDlpV2CustomInfoTypeExclusionType left, GooglePrivacyDlpV2CustomInfoTypeExclusionType right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2CustomInfoTypeExclusionType left, GooglePrivacyDlpV2CustomInfoTypeExclusionType right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2CustomInfoTypeExclusionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2CustomInfoTypeExclusionType other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2CustomInfoTypeExclusionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2CustomInfoTypeLikelihood : IEquatable<GooglePrivacyDlpV2CustomInfoTypeLikelihood>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2CustomInfoTypeLikelihood(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value; same as POSSIBLE.
        /// </summary>
        public static GooglePrivacyDlpV2CustomInfoTypeLikelihood LikelihoodUnspecified { get; } = new GooglePrivacyDlpV2CustomInfoTypeLikelihood("LIKELIHOOD_UNSPECIFIED");
        /// <summary>
        /// Highest chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2CustomInfoTypeLikelihood VeryUnlikely { get; } = new GooglePrivacyDlpV2CustomInfoTypeLikelihood("VERY_UNLIKELY");
        /// <summary>
        /// High chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2CustomInfoTypeLikelihood Unlikely { get; } = new GooglePrivacyDlpV2CustomInfoTypeLikelihood("UNLIKELY");
        /// <summary>
        /// Some matching signals. The default value.
        /// </summary>
        public static GooglePrivacyDlpV2CustomInfoTypeLikelihood Possible { get; } = new GooglePrivacyDlpV2CustomInfoTypeLikelihood("POSSIBLE");
        /// <summary>
        /// Low chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2CustomInfoTypeLikelihood Likely { get; } = new GooglePrivacyDlpV2CustomInfoTypeLikelihood("LIKELY");
        /// <summary>
        /// Confidence level is high. Lowest chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2CustomInfoTypeLikelihood VeryLikely { get; } = new GooglePrivacyDlpV2CustomInfoTypeLikelihood("VERY_LIKELY");

        public static bool operator ==(GooglePrivacyDlpV2CustomInfoTypeLikelihood left, GooglePrivacyDlpV2CustomInfoTypeLikelihood right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2CustomInfoTypeLikelihood left, GooglePrivacyDlpV2CustomInfoTypeLikelihood right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2CustomInfoTypeLikelihood value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2CustomInfoTypeLikelihood other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2CustomInfoTypeLikelihood other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem : IEquatable<GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Includes all files.
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem FileTypeUnspecified { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("FILE_TYPE_UNSPECIFIED");
        /// <summary>
        /// Includes all file extensions not covered by another entry. Binary scanning attempts to convert the content of the file to utf_8 to scan the file. If you wish to avoid this fall back, specify one or more of the other file types in your storage scan.
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem BinaryFile { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("BINARY_FILE");
        /// <summary>
        /// Included file extensions: asc,asp, aspx, brf, c, cc,cfm, cgi, cpp, csv, cxx, c++, cs, css, dart, dat, dot, eml,, epbub, ged, go, h, hh, hpp, hxx, h++, hs, html, htm, mkd, markdown, m, ml, mli, perl, pl, plist, pm, php, phtml, pht, properties, py, pyw, rb, rbw, rs, rss, rc, scala, sh, sql, swift, tex, shtml, shtm, xhtml, lhs, ics, ini, java, js, json, kix, kml, ocaml, md, txt, text, tsv, vb, vcard, vcs, wml, xcodeproj, xml, xsl, xsd, yml, yaml.
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem TextFile { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("TEXT_FILE");
        /// <summary>
        /// Included file extensions: bmp, gif, jpg, jpeg, jpe, png. Setting bytes_limit_per_file or bytes_limit_per_file_percent has no effect on image files. Image inspection is restricted to the `global`, `us`, `asia`, and `europe` regions.
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem Image { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("IMAGE");
        /// <summary>
        /// Microsoft Word files larger than 30 MB will be scanned as binary files. Included file extensions: docx, dotx, docm, dotm. Setting `bytes_limit_per_file` or `bytes_limit_per_file_percent` has no effect on Word files.
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem Word { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("WORD");
        /// <summary>
        /// PDF files larger than 30 MB will be scanned as binary files. Included file extensions: pdf. Setting `bytes_limit_per_file` or `bytes_limit_per_file_percent` has no effect on PDF files.
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem Pdf { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("PDF");
        /// <summary>
        /// Included file extensions: avro
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem Avro { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("AVRO");
        /// <summary>
        /// Included file extensions: csv
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem Csv { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("CSV");
        /// <summary>
        /// Included file extensions: tsv
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem Tsv { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("TSV");
        /// <summary>
        /// Microsoft PowerPoint files larger than 30 MB will be scanned as binary files. Included file extensions: pptx, pptm, potx, potm, pot. Setting `bytes_limit_per_file` or `bytes_limit_per_file_percent` has no effect on PowerPoint files.
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem Powerpoint { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("POWERPOINT");
        /// <summary>
        /// Microsoft Excel files larger than 30 MB will be scanned as binary files. Included file extensions: xlsx, xlsm, xltx, xltm. Setting `bytes_limit_per_file` or `bytes_limit_per_file_percent` has no effect on Excel files.
        /// </summary>
        public static GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem Excel { get; } = new GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem("EXCEL");

        public static bool operator ==(GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem left, GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem left, GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Restrict discovery to categories of table types.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection : IEquatable<GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection BigQueryCollectionUnspecified { get; } = new GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection("BIG_QUERY_COLLECTION_UNSPECIFIED");
        /// <summary>
        /// Automatically generate profiles for all tables, even if the table type is not yet fully supported for analysis. Profiles for unsupported tables will be generated with errors to indicate their partial support. When full support is added, the tables will automatically be profiled during the next scheduled run.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection BigQueryCollectionAllTypes { get; } = new GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection("BIG_QUERY_COLLECTION_ALL_TYPES");
        /// <summary>
        /// Only those types fully supported will be profiled. Will expand automatically as Cloud DLP adds support for new table types. Unsupported table types will not have partial profiles generated.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection BigQueryCollectionOnlySupportedTypes { get; } = new GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection("BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES");

        public static bool operator ==(GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection left, GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection left, GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How frequently profiles may be updated when schemas are modified. Defaults to monthly.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency : IEquatable<GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency UpdateFrequencyUnspecified { get; } = new GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency("UPDATE_FREQUENCY_UNSPECIFIED");
        /// <summary>
        /// After the data profile is created, it will never be updated.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency UpdateFrequencyNever { get; } = new GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency("UPDATE_FREQUENCY_NEVER");
        /// <summary>
        /// The data profile can be updated up to once every 24 hours.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency UpdateFrequencyDaily { get; } = new GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency("UPDATE_FREQUENCY_DAILY");
        /// <summary>
        /// The data profile can be updated up to once every 30 days. Default.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency UpdateFrequencyMonthly { get; } = new GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency("UPDATE_FREQUENCY_MONTHLY");

        public static bool operator ==(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency left, GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency left, GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem : IEquatable<GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused
        /// </summary>
        public static GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem SchemaModificationUnspecified { get; } = new GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem("SCHEMA_MODIFICATION_UNSPECIFIED");
        /// <summary>
        /// Profiles should be regenerated when new columns are added to the table. Default.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem SchemaNewColumns { get; } = new GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem("SCHEMA_NEW_COLUMNS");
        /// <summary>
        /// Profiles should be regenerated when columns are removed from the table.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem SchemaRemovedColumns { get; } = new GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem("SCHEMA_REMOVED_COLUMNS");

        public static bool operator ==(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem left, GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem left, GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How frequently data profiles can be updated when tables are modified. Defaults to never.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency : IEquatable<GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unspecified.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency UpdateFrequencyUnspecified { get; } = new GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency("UPDATE_FREQUENCY_UNSPECIFIED");
        /// <summary>
        /// After the data profile is created, it will never be updated.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency UpdateFrequencyNever { get; } = new GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency("UPDATE_FREQUENCY_NEVER");
        /// <summary>
        /// The data profile can be updated up to once every 24 hours.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency UpdateFrequencyDaily { get; } = new GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency("UPDATE_FREQUENCY_DAILY");
        /// <summary>
        /// The data profile can be updated up to once every 30 days. Default.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency UpdateFrequencyMonthly { get; } = new GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency("UPDATE_FREQUENCY_MONTHLY");

        public static bool operator ==(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency left, GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency left, GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem : IEquatable<GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem TableModificationUnspecified { get; } = new GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem("TABLE_MODIFICATION_UNSPECIFIED");
        /// <summary>
        /// A table will be considered modified when the last_modified_time from BigQuery has been updated.
        /// </summary>
        public static GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem TableModifiedTimestamp { get; } = new GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem("TABLE_MODIFIED_TIMESTAMP");

        public static bool operator ==(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem left, GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem left, GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How the rule is applied, see MatchingType documentation for details.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2ExclusionRuleMatchingType : IEquatable<GooglePrivacyDlpV2ExclusionRuleMatchingType>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2ExclusionRuleMatchingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Invalid.
        /// </summary>
        public static GooglePrivacyDlpV2ExclusionRuleMatchingType MatchingTypeUnspecified { get; } = new GooglePrivacyDlpV2ExclusionRuleMatchingType("MATCHING_TYPE_UNSPECIFIED");
        /// <summary>
        /// Full match. - Dictionary: join of Dictionary results matched complete finding quote - Regex: all regex matches fill a finding quote start to end - Exclude info type: completely inside affecting info types findings
        /// </summary>
        public static GooglePrivacyDlpV2ExclusionRuleMatchingType MatchingTypeFullMatch { get; } = new GooglePrivacyDlpV2ExclusionRuleMatchingType("MATCHING_TYPE_FULL_MATCH");
        /// <summary>
        /// Partial match. - Dictionary: at least one of the tokens in the finding matches - Regex: substring of the finding matches - Exclude info type: intersects with affecting info types findings
        /// </summary>
        public static GooglePrivacyDlpV2ExclusionRuleMatchingType MatchingTypePartialMatch { get; } = new GooglePrivacyDlpV2ExclusionRuleMatchingType("MATCHING_TYPE_PARTIAL_MATCH");
        /// <summary>
        /// Inverse match. - Dictionary: no tokens in the finding match the dictionary - Regex: finding doesn't match the regex - Exclude info type: no intersection with affecting info types findings
        /// </summary>
        public static GooglePrivacyDlpV2ExclusionRuleMatchingType MatchingTypeInverseMatch { get; } = new GooglePrivacyDlpV2ExclusionRuleMatchingType("MATCHING_TYPE_INVERSE_MATCH");

        public static bool operator ==(GooglePrivacyDlpV2ExclusionRuleMatchingType left, GooglePrivacyDlpV2ExclusionRuleMatchingType right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2ExclusionRuleMatchingType left, GooglePrivacyDlpV2ExclusionRuleMatchingType right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2ExclusionRuleMatchingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2ExclusionRuleMatchingType other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2ExclusionRuleMatchingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2ExpressionsLogicalOperator : IEquatable<GooglePrivacyDlpV2ExpressionsLogicalOperator>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2ExpressionsLogicalOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused
        /// </summary>
        public static GooglePrivacyDlpV2ExpressionsLogicalOperator LogicalOperatorUnspecified { get; } = new GooglePrivacyDlpV2ExpressionsLogicalOperator("LOGICAL_OPERATOR_UNSPECIFIED");
        /// <summary>
        /// Conditional AND
        /// </summary>
        public static GooglePrivacyDlpV2ExpressionsLogicalOperator And { get; } = new GooglePrivacyDlpV2ExpressionsLogicalOperator("AND");

        public static bool operator ==(GooglePrivacyDlpV2ExpressionsLogicalOperator left, GooglePrivacyDlpV2ExpressionsLogicalOperator right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2ExpressionsLogicalOperator left, GooglePrivacyDlpV2ExpressionsLogicalOperator right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2ExpressionsLogicalOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2ExpressionsLogicalOperator other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2ExpressionsLogicalOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Only returns findings equal to or above this threshold. This field is required or else the configuration fails.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood : IEquatable<GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value; same as POSSIBLE.
        /// </summary>
        public static GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood LikelihoodUnspecified { get; } = new GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood("LIKELIHOOD_UNSPECIFIED");
        /// <summary>
        /// Highest chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood VeryUnlikely { get; } = new GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood("VERY_UNLIKELY");
        /// <summary>
        /// High chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood Unlikely { get; } = new GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood("UNLIKELY");
        /// <summary>
        /// Some matching signals. The default value.
        /// </summary>
        public static GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood Possible { get; } = new GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood("POSSIBLE");
        /// <summary>
        /// Low chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood Likely { get; } = new GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood("LIKELY");
        /// <summary>
        /// Confidence level is high. Lowest chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood VeryLikely { get; } = new GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood("VERY_LIKELY");

        public static bool operator ==(GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood left, GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood left, GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GooglePrivacyDlpV2InspectConfigContentOptionsItem : IEquatable<GooglePrivacyDlpV2InspectConfigContentOptionsItem>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2InspectConfigContentOptionsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Includes entire content of a file or a data stream.
        /// </summary>
        public static GooglePrivacyDlpV2InspectConfigContentOptionsItem ContentUnspecified { get; } = new GooglePrivacyDlpV2InspectConfigContentOptionsItem("CONTENT_UNSPECIFIED");
        /// <summary>
        /// Text content within the data, excluding any metadata.
        /// </summary>
        public static GooglePrivacyDlpV2InspectConfigContentOptionsItem ContentText { get; } = new GooglePrivacyDlpV2InspectConfigContentOptionsItem("CONTENT_TEXT");
        /// <summary>
        /// Images found in the data.
        /// </summary>
        public static GooglePrivacyDlpV2InspectConfigContentOptionsItem ContentImage { get; } = new GooglePrivacyDlpV2InspectConfigContentOptionsItem("CONTENT_IMAGE");

        public static bool operator ==(GooglePrivacyDlpV2InspectConfigContentOptionsItem left, GooglePrivacyDlpV2InspectConfigContentOptionsItem right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2InspectConfigContentOptionsItem left, GooglePrivacyDlpV2InspectConfigContentOptionsItem right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2InspectConfigContentOptionsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2InspectConfigContentOptionsItem other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2InspectConfigContentOptionsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/dlp/docs/likelihood).
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2InspectConfigMinLikelihood : IEquatable<GooglePrivacyDlpV2InspectConfigMinLikelihood>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2InspectConfigMinLikelihood(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value; same as POSSIBLE.
        /// </summary>
        public static GooglePrivacyDlpV2InspectConfigMinLikelihood LikelihoodUnspecified { get; } = new GooglePrivacyDlpV2InspectConfigMinLikelihood("LIKELIHOOD_UNSPECIFIED");
        /// <summary>
        /// Highest chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2InspectConfigMinLikelihood VeryUnlikely { get; } = new GooglePrivacyDlpV2InspectConfigMinLikelihood("VERY_UNLIKELY");
        /// <summary>
        /// High chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2InspectConfigMinLikelihood Unlikely { get; } = new GooglePrivacyDlpV2InspectConfigMinLikelihood("UNLIKELY");
        /// <summary>
        /// Some matching signals. The default value.
        /// </summary>
        public static GooglePrivacyDlpV2InspectConfigMinLikelihood Possible { get; } = new GooglePrivacyDlpV2InspectConfigMinLikelihood("POSSIBLE");
        /// <summary>
        /// Low chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2InspectConfigMinLikelihood Likely { get; } = new GooglePrivacyDlpV2InspectConfigMinLikelihood("LIKELY");
        /// <summary>
        /// Confidence level is high. Lowest chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2InspectConfigMinLikelihood VeryLikely { get; } = new GooglePrivacyDlpV2InspectConfigMinLikelihood("VERY_LIKELY");

        public static bool operator ==(GooglePrivacyDlpV2InspectConfigMinLikelihood left, GooglePrivacyDlpV2InspectConfigMinLikelihood right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2InspectConfigMinLikelihood left, GooglePrivacyDlpV2InspectConfigMinLikelihood right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2InspectConfigMinLikelihood value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2InspectConfigMinLikelihood other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2InspectConfigMinLikelihood other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Set the likelihood of a finding to a fixed value.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood : IEquatable<GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value; same as POSSIBLE.
        /// </summary>
        public static GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood LikelihoodUnspecified { get; } = new GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood("LIKELIHOOD_UNSPECIFIED");
        /// <summary>
        /// Highest chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood VeryUnlikely { get; } = new GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood("VERY_UNLIKELY");
        /// <summary>
        /// High chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood Unlikely { get; } = new GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood("UNLIKELY");
        /// <summary>
        /// Some matching signals. The default value.
        /// </summary>
        public static GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood Possible { get; } = new GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood("POSSIBLE");
        /// <summary>
        /// Low chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood Likely { get; } = new GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood("LIKELY");
        /// <summary>
        /// Confidence level is high. Lowest chance of a false positive.
        /// </summary>
        public static GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood VeryLikely { get; } = new GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood("VERY_LIKELY");

        public static bool operator ==(GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood left, GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood left, GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2OutputStorageConfigOutputSchema : IEquatable<GooglePrivacyDlpV2OutputStorageConfigOutputSchema>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2OutputStorageConfigOutputSchema(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2OutputStorageConfigOutputSchema OutputSchemaUnspecified { get; } = new GooglePrivacyDlpV2OutputStorageConfigOutputSchema("OUTPUT_SCHEMA_UNSPECIFIED");
        /// <summary>
        /// Basic schema including only `info_type`, `quote`, `certainty`, and `timestamp`.
        /// </summary>
        public static GooglePrivacyDlpV2OutputStorageConfigOutputSchema BasicColumns { get; } = new GooglePrivacyDlpV2OutputStorageConfigOutputSchema("BASIC_COLUMNS");
        /// <summary>
        /// Schema tailored to findings from scanning Cloud Storage.
        /// </summary>
        public static GooglePrivacyDlpV2OutputStorageConfigOutputSchema GcsColumns { get; } = new GooglePrivacyDlpV2OutputStorageConfigOutputSchema("GCS_COLUMNS");
        /// <summary>
        /// Schema tailored to findings from scanning Google Datastore.
        /// </summary>
        public static GooglePrivacyDlpV2OutputStorageConfigOutputSchema DatastoreColumns { get; } = new GooglePrivacyDlpV2OutputStorageConfigOutputSchema("DATASTORE_COLUMNS");
        /// <summary>
        /// Schema tailored to findings from scanning Google BigQuery.
        /// </summary>
        public static GooglePrivacyDlpV2OutputStorageConfigOutputSchema BigQueryColumns { get; } = new GooglePrivacyDlpV2OutputStorageConfigOutputSchema("BIG_QUERY_COLUMNS");
        /// <summary>
        /// Schema containing all columns.
        /// </summary>
        public static GooglePrivacyDlpV2OutputStorageConfigOutputSchema AllColumns { get; } = new GooglePrivacyDlpV2OutputStorageConfigOutputSchema("ALL_COLUMNS");

        public static bool operator ==(GooglePrivacyDlpV2OutputStorageConfigOutputSchema left, GooglePrivacyDlpV2OutputStorageConfigOutputSchema right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2OutputStorageConfigOutputSchema left, GooglePrivacyDlpV2OutputStorageConfigOutputSchema right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2OutputStorageConfigOutputSchema value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2OutputStorageConfigOutputSchema other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2OutputStorageConfigOutputSchema other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The minimum data risk score that triggers the condition.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2PubSubConditionMinimumRiskScore : IEquatable<GooglePrivacyDlpV2PubSubConditionMinimumRiskScore>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2PubSubConditionMinimumRiskScore(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubConditionMinimumRiskScore ProfileScoreBucketUnspecified { get; } = new GooglePrivacyDlpV2PubSubConditionMinimumRiskScore("PROFILE_SCORE_BUCKET_UNSPECIFIED");
        /// <summary>
        /// High risk/sensitivity detected.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubConditionMinimumRiskScore High { get; } = new GooglePrivacyDlpV2PubSubConditionMinimumRiskScore("HIGH");
        /// <summary>
        /// Medium or high risk/sensitivity detected.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubConditionMinimumRiskScore MediumOrHigh { get; } = new GooglePrivacyDlpV2PubSubConditionMinimumRiskScore("MEDIUM_OR_HIGH");

        public static bool operator ==(GooglePrivacyDlpV2PubSubConditionMinimumRiskScore left, GooglePrivacyDlpV2PubSubConditionMinimumRiskScore right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2PubSubConditionMinimumRiskScore left, GooglePrivacyDlpV2PubSubConditionMinimumRiskScore right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2PubSubConditionMinimumRiskScore value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2PubSubConditionMinimumRiskScore other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2PubSubConditionMinimumRiskScore other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The minimum sensitivity level that triggers the condition.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore : IEquatable<GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore ProfileScoreBucketUnspecified { get; } = new GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore("PROFILE_SCORE_BUCKET_UNSPECIFIED");
        /// <summary>
        /// High risk/sensitivity detected.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore High { get; } = new GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore("HIGH");
        /// <summary>
        /// Medium or high risk/sensitivity detected.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore MediumOrHigh { get; } = new GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore("MEDIUM_OR_HIGH");

        public static bool operator ==(GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore left, GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore left, GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operator to apply to the collection of conditions.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2PubSubExpressionsLogicalOperator : IEquatable<GooglePrivacyDlpV2PubSubExpressionsLogicalOperator>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2PubSubExpressionsLogicalOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubExpressionsLogicalOperator LogicalOperatorUnspecified { get; } = new GooglePrivacyDlpV2PubSubExpressionsLogicalOperator("LOGICAL_OPERATOR_UNSPECIFIED");
        /// <summary>
        /// Conditional OR.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubExpressionsLogicalOperator Or { get; } = new GooglePrivacyDlpV2PubSubExpressionsLogicalOperator("OR");
        /// <summary>
        /// Conditional AND.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubExpressionsLogicalOperator And { get; } = new GooglePrivacyDlpV2PubSubExpressionsLogicalOperator("AND");

        public static bool operator ==(GooglePrivacyDlpV2PubSubExpressionsLogicalOperator left, GooglePrivacyDlpV2PubSubExpressionsLogicalOperator right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2PubSubExpressionsLogicalOperator left, GooglePrivacyDlpV2PubSubExpressionsLogicalOperator right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2PubSubExpressionsLogicalOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2PubSubExpressionsLogicalOperator other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2PubSubExpressionsLogicalOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2PubSubNotificationDetailOfMessage : IEquatable<GooglePrivacyDlpV2PubSubNotificationDetailOfMessage>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2PubSubNotificationDetailOfMessage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubNotificationDetailOfMessage DetailLevelUnspecified { get; } = new GooglePrivacyDlpV2PubSubNotificationDetailOfMessage("DETAIL_LEVEL_UNSPECIFIED");
        /// <summary>
        /// The full table data profile.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubNotificationDetailOfMessage TableProfile { get; } = new GooglePrivacyDlpV2PubSubNotificationDetailOfMessage("TABLE_PROFILE");
        /// <summary>
        /// The resource name of the table.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubNotificationDetailOfMessage ResourceName { get; } = new GooglePrivacyDlpV2PubSubNotificationDetailOfMessage("RESOURCE_NAME");

        public static bool operator ==(GooglePrivacyDlpV2PubSubNotificationDetailOfMessage left, GooglePrivacyDlpV2PubSubNotificationDetailOfMessage right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2PubSubNotificationDetailOfMessage left, GooglePrivacyDlpV2PubSubNotificationDetailOfMessage right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2PubSubNotificationDetailOfMessage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2PubSubNotificationDetailOfMessage other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2PubSubNotificationDetailOfMessage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2PubSubNotificationEvent : IEquatable<GooglePrivacyDlpV2PubSubNotificationEvent>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2PubSubNotificationEvent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubNotificationEvent EventTypeUnspecified { get; } = new GooglePrivacyDlpV2PubSubNotificationEvent("EVENT_TYPE_UNSPECIFIED");
        /// <summary>
        /// New profile (not a re-profile).
        /// </summary>
        public static GooglePrivacyDlpV2PubSubNotificationEvent NewProfile { get; } = new GooglePrivacyDlpV2PubSubNotificationEvent("NEW_PROFILE");
        /// <summary>
        /// Changed one of the following profile metrics: * Table data risk score * Table sensitivity score * Table resource visibility * Table encryption type * Table predicted infoTypes * Table other infoTypes
        /// </summary>
        public static GooglePrivacyDlpV2PubSubNotificationEvent ChangedProfile { get; } = new GooglePrivacyDlpV2PubSubNotificationEvent("CHANGED_PROFILE");
        /// <summary>
        /// Table data risk score or sensitivity score increased.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubNotificationEvent ScoreIncreased { get; } = new GooglePrivacyDlpV2PubSubNotificationEvent("SCORE_INCREASED");
        /// <summary>
        /// A user (non-internal) error occurred.
        /// </summary>
        public static GooglePrivacyDlpV2PubSubNotificationEvent ErrorChanged { get; } = new GooglePrivacyDlpV2PubSubNotificationEvent("ERROR_CHANGED");

        public static bool operator ==(GooglePrivacyDlpV2PubSubNotificationEvent left, GooglePrivacyDlpV2PubSubNotificationEvent right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2PubSubNotificationEvent left, GooglePrivacyDlpV2PubSubNotificationEvent right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2PubSubNotificationEvent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2PubSubNotificationEvent other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2PubSubNotificationEvent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The sensitivity score applied to the resource.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2SensitivityScoreScore : IEquatable<GooglePrivacyDlpV2SensitivityScoreScore>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2SensitivityScoreScore(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static GooglePrivacyDlpV2SensitivityScoreScore SensitivityScoreUnspecified { get; } = new GooglePrivacyDlpV2SensitivityScoreScore("SENSITIVITY_SCORE_UNSPECIFIED");
        /// <summary>
        /// No sensitive information detected. The resource isn't publicly accessible.
        /// </summary>
        public static GooglePrivacyDlpV2SensitivityScoreScore SensitivityLow { get; } = new GooglePrivacyDlpV2SensitivityScoreScore("SENSITIVITY_LOW");
        /// <summary>
        /// Medium risk. Contains personally identifiable information (PII), potentially sensitive data, or fields with free-text data that are at a higher risk of having intermittent sensitive data. Consider limiting access.
        /// </summary>
        public static GooglePrivacyDlpV2SensitivityScoreScore SensitivityModerate { get; } = new GooglePrivacyDlpV2SensitivityScoreScore("SENSITIVITY_MODERATE");
        /// <summary>
        /// High risk. Sensitive personally identifiable information (SPII) can be present. Exfiltration of data can lead to user data loss. Re-identification of users might be possible. Consider limiting usage and or removing SPII.
        /// </summary>
        public static GooglePrivacyDlpV2SensitivityScoreScore SensitivityHigh { get; } = new GooglePrivacyDlpV2SensitivityScoreScore("SENSITIVITY_HIGH");

        public static bool operator ==(GooglePrivacyDlpV2SensitivityScoreScore left, GooglePrivacyDlpV2SensitivityScoreScore right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2SensitivityScoreScore left, GooglePrivacyDlpV2SensitivityScoreScore right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2SensitivityScoreScore value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2SensitivityScoreScore other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2SensitivityScoreScore other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The part of the time to keep.
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2TimePartConfigPartToExtract : IEquatable<GooglePrivacyDlpV2TimePartConfigPartToExtract>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2TimePartConfigPartToExtract(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused
        /// </summary>
        public static GooglePrivacyDlpV2TimePartConfigPartToExtract TimePartUnspecified { get; } = new GooglePrivacyDlpV2TimePartConfigPartToExtract("TIME_PART_UNSPECIFIED");
        /// <summary>
        /// [0-9999]
        /// </summary>
        public static GooglePrivacyDlpV2TimePartConfigPartToExtract Year { get; } = new GooglePrivacyDlpV2TimePartConfigPartToExtract("YEAR");
        /// <summary>
        /// [1-12]
        /// </summary>
        public static GooglePrivacyDlpV2TimePartConfigPartToExtract Month { get; } = new GooglePrivacyDlpV2TimePartConfigPartToExtract("MONTH");
        /// <summary>
        /// [1-31]
        /// </summary>
        public static GooglePrivacyDlpV2TimePartConfigPartToExtract DayOfMonth { get; } = new GooglePrivacyDlpV2TimePartConfigPartToExtract("DAY_OF_MONTH");
        /// <summary>
        /// [1-7]
        /// </summary>
        public static GooglePrivacyDlpV2TimePartConfigPartToExtract DayOfWeek { get; } = new GooglePrivacyDlpV2TimePartConfigPartToExtract("DAY_OF_WEEK");
        /// <summary>
        /// [1-53]
        /// </summary>
        public static GooglePrivacyDlpV2TimePartConfigPartToExtract WeekOfYear { get; } = new GooglePrivacyDlpV2TimePartConfigPartToExtract("WEEK_OF_YEAR");
        /// <summary>
        /// [0-23]
        /// </summary>
        public static GooglePrivacyDlpV2TimePartConfigPartToExtract HourOfDay { get; } = new GooglePrivacyDlpV2TimePartConfigPartToExtract("HOUR_OF_DAY");

        public static bool operator ==(GooglePrivacyDlpV2TimePartConfigPartToExtract left, GooglePrivacyDlpV2TimePartConfigPartToExtract right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2TimePartConfigPartToExtract left, GooglePrivacyDlpV2TimePartConfigPartToExtract right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2TimePartConfigPartToExtract value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2TimePartConfigPartToExtract other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2TimePartConfigPartToExtract other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// day of week
    /// </summary>
    [EnumType]
    public readonly struct GooglePrivacyDlpV2ValueDayOfWeekValue : IEquatable<GooglePrivacyDlpV2ValueDayOfWeekValue>
    {
        private readonly string _value;

        private GooglePrivacyDlpV2ValueDayOfWeekValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The day of the week is unspecified.
        /// </summary>
        public static GooglePrivacyDlpV2ValueDayOfWeekValue DayOfWeekUnspecified { get; } = new GooglePrivacyDlpV2ValueDayOfWeekValue("DAY_OF_WEEK_UNSPECIFIED");
        /// <summary>
        /// Monday
        /// </summary>
        public static GooglePrivacyDlpV2ValueDayOfWeekValue Monday { get; } = new GooglePrivacyDlpV2ValueDayOfWeekValue("MONDAY");
        /// <summary>
        /// Tuesday
        /// </summary>
        public static GooglePrivacyDlpV2ValueDayOfWeekValue Tuesday { get; } = new GooglePrivacyDlpV2ValueDayOfWeekValue("TUESDAY");
        /// <summary>
        /// Wednesday
        /// </summary>
        public static GooglePrivacyDlpV2ValueDayOfWeekValue Wednesday { get; } = new GooglePrivacyDlpV2ValueDayOfWeekValue("WEDNESDAY");
        /// <summary>
        /// Thursday
        /// </summary>
        public static GooglePrivacyDlpV2ValueDayOfWeekValue Thursday { get; } = new GooglePrivacyDlpV2ValueDayOfWeekValue("THURSDAY");
        /// <summary>
        /// Friday
        /// </summary>
        public static GooglePrivacyDlpV2ValueDayOfWeekValue Friday { get; } = new GooglePrivacyDlpV2ValueDayOfWeekValue("FRIDAY");
        /// <summary>
        /// Saturday
        /// </summary>
        public static GooglePrivacyDlpV2ValueDayOfWeekValue Saturday { get; } = new GooglePrivacyDlpV2ValueDayOfWeekValue("SATURDAY");
        /// <summary>
        /// Sunday
        /// </summary>
        public static GooglePrivacyDlpV2ValueDayOfWeekValue Sunday { get; } = new GooglePrivacyDlpV2ValueDayOfWeekValue("SUNDAY");

        public static bool operator ==(GooglePrivacyDlpV2ValueDayOfWeekValue left, GooglePrivacyDlpV2ValueDayOfWeekValue right) => left.Equals(right);
        public static bool operator !=(GooglePrivacyDlpV2ValueDayOfWeekValue left, GooglePrivacyDlpV2ValueDayOfWeekValue right) => !left.Equals(right);

        public static explicit operator string(GooglePrivacyDlpV2ValueDayOfWeekValue value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GooglePrivacyDlpV2ValueDayOfWeekValue other && Equals(other);
        public bool Equals(GooglePrivacyDlpV2ValueDayOfWeekValue other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. A status for this trigger.
    /// </summary>
    [EnumType]
    public readonly struct JobTriggerStatus : IEquatable<JobTriggerStatus>
    {
        private readonly string _value;

        private JobTriggerStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static JobTriggerStatus StatusUnspecified { get; } = new JobTriggerStatus("STATUS_UNSPECIFIED");
        /// <summary>
        /// Trigger is healthy.
        /// </summary>
        public static JobTriggerStatus Healthy { get; } = new JobTriggerStatus("HEALTHY");
        /// <summary>
        /// Trigger is temporarily paused.
        /// </summary>
        public static JobTriggerStatus Paused { get; } = new JobTriggerStatus("PAUSED");
        /// <summary>
        /// Trigger is cancelled and can not be resumed.
        /// </summary>
        public static JobTriggerStatus Cancelled { get; } = new JobTriggerStatus("CANCELLED");

        public static bool operator ==(JobTriggerStatus left, JobTriggerStatus right) => left.Equals(right);
        public static bool operator !=(JobTriggerStatus left, JobTriggerStatus right) => !left.Equals(right);

        public static explicit operator string(JobTriggerStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobTriggerStatus other && Equals(other);
        public bool Equals(JobTriggerStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. A status for this configuration.
    /// </summary>
    [EnumType]
    public readonly struct OrganizationDiscoveryConfigStatus : IEquatable<OrganizationDiscoveryConfigStatus>
    {
        private readonly string _value;

        private OrganizationDiscoveryConfigStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused
        /// </summary>
        public static OrganizationDiscoveryConfigStatus StatusUnspecified { get; } = new OrganizationDiscoveryConfigStatus("STATUS_UNSPECIFIED");
        /// <summary>
        /// The discovery config is currently active.
        /// </summary>
        public static OrganizationDiscoveryConfigStatus Running { get; } = new OrganizationDiscoveryConfigStatus("RUNNING");
        /// <summary>
        /// The discovery config is paused temporarily.
        /// </summary>
        public static OrganizationDiscoveryConfigStatus Paused { get; } = new OrganizationDiscoveryConfigStatus("PAUSED");

        public static bool operator ==(OrganizationDiscoveryConfigStatus left, OrganizationDiscoveryConfigStatus right) => left.Equals(right);
        public static bool operator !=(OrganizationDiscoveryConfigStatus left, OrganizationDiscoveryConfigStatus right) => !left.Equals(right);

        public static explicit operator string(OrganizationDiscoveryConfigStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrganizationDiscoveryConfigStatus other && Equals(other);
        public bool Equals(OrganizationDiscoveryConfigStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. A status for this trigger.
    /// </summary>
    [EnumType]
    public readonly struct OrganizationJobTriggerStatus : IEquatable<OrganizationJobTriggerStatus>
    {
        private readonly string _value;

        private OrganizationJobTriggerStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unused.
        /// </summary>
        public static OrganizationJobTriggerStatus StatusUnspecified { get; } = new OrganizationJobTriggerStatus("STATUS_UNSPECIFIED");
        /// <summary>
        /// Trigger is healthy.
        /// </summary>
        public static OrganizationJobTriggerStatus Healthy { get; } = new OrganizationJobTriggerStatus("HEALTHY");
        /// <summary>
        /// Trigger is temporarily paused.
        /// </summary>
        public static OrganizationJobTriggerStatus Paused { get; } = new OrganizationJobTriggerStatus("PAUSED");
        /// <summary>
        /// Trigger is cancelled and can not be resumed.
        /// </summary>
        public static OrganizationJobTriggerStatus Cancelled { get; } = new OrganizationJobTriggerStatus("CANCELLED");

        public static bool operator ==(OrganizationJobTriggerStatus left, OrganizationJobTriggerStatus right) => left.Equals(right);
        public static bool operator !=(OrganizationJobTriggerStatus left, OrganizationJobTriggerStatus right) => !left.Equals(right);

        public static explicit operator string(OrganizationJobTriggerStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrganizationJobTriggerStatus other && Equals(other);
        public bool Equals(OrganizationJobTriggerStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
