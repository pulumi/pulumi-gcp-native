// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.DLP.V2.Inputs
{

    /// <summary>
    /// The transformation to apply to the field.
    /// </summary>
    public sealed class GooglePrivacyDlpV2FieldTransformationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only apply the transformation if the condition evaluates to true for the given `RecordCondition`. The conditions are allowed to reference fields that are not used in the actual transformation. Example Use Cases: - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85.
        /// </summary>
        [Input("condition")]
        public Input<Inputs.GooglePrivacyDlpV2RecordConditionArgs>? Condition { get; set; }

        [Input("fields", required: true)]
        private InputList<Inputs.GooglePrivacyDlpV2FieldIdArgs>? _fields;

        /// <summary>
        /// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
        /// </summary>
        public InputList<Inputs.GooglePrivacyDlpV2FieldIdArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.GooglePrivacyDlpV2FieldIdArgs>());
            set => _fields = value;
        }

        /// <summary>
        /// Treat the contents of the field as free text, and selectively transform content that matches an `InfoType`.
        /// </summary>
        [Input("infoTypeTransformations")]
        public Input<Inputs.GooglePrivacyDlpV2InfoTypeTransformationsArgs>? InfoTypeTransformations { get; set; }

        /// <summary>
        /// Apply the transformation to the entire field.
        /// </summary>
        [Input("primitiveTransformation")]
        public Input<Inputs.GooglePrivacyDlpV2PrimitiveTransformationArgs>? PrimitiveTransformation { get; set; }

        public GooglePrivacyDlpV2FieldTransformationArgs()
        {
        }
    }
}
