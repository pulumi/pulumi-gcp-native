// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.DLP.V2.Inputs
{

    /// <summary>
    /// Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.
    /// </summary>
    public sealed class GooglePrivacyDlpV2InspectConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("contentOptions")]
        private InputList<Pulumi.GoogleNative.DLP.V2.GooglePrivacyDlpV2InspectConfigContentOptionsItem>? _contentOptions;

        /// <summary>
        /// Deprecated and unused.
        /// </summary>
        [Obsolete(@"Deprecated and unused.")]
        public InputList<Pulumi.GoogleNative.DLP.V2.GooglePrivacyDlpV2InspectConfigContentOptionsItem> ContentOptions
        {
            get => _contentOptions ?? (_contentOptions = new InputList<Pulumi.GoogleNative.DLP.V2.GooglePrivacyDlpV2InspectConfigContentOptionsItem>());
            set => _contentOptions = value;
        }

        [Input("customInfoTypes")]
        private InputList<Inputs.GooglePrivacyDlpV2CustomInfoTypeArgs>? _customInfoTypes;

        /// <summary>
        /// CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
        /// </summary>
        public InputList<Inputs.GooglePrivacyDlpV2CustomInfoTypeArgs> CustomInfoTypes
        {
            get => _customInfoTypes ?? (_customInfoTypes = new InputList<Inputs.GooglePrivacyDlpV2CustomInfoTypeArgs>());
            set => _customInfoTypes = value;
        }

        /// <summary>
        /// When true, excludes type information of the findings. This is not used for data profiling.
        /// </summary>
        [Input("excludeInfoTypes")]
        public Input<bool>? ExcludeInfoTypes { get; set; }

        /// <summary>
        /// When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.
        /// </summary>
        [Input("includeQuote")]
        public Input<bool>? IncludeQuote { get; set; }

        [Input("infoTypes")]
        private InputList<Inputs.GooglePrivacyDlpV2InfoTypeArgs>? _infoTypes;

        /// <summary>
        /// Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.
        /// </summary>
        public InputList<Inputs.GooglePrivacyDlpV2InfoTypeArgs> InfoTypes
        {
            get => _infoTypes ?? (_infoTypes = new InputList<Inputs.GooglePrivacyDlpV2InfoTypeArgs>());
            set => _infoTypes = value;
        }

        /// <summary>
        /// Configuration to control the number of findings returned. This is not used for data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error. When set within an InspectJobConfig, the specified maximum values aren't hard limits. If an inspection job reaches these limits, the job ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than these maximum values.
        /// </summary>
        [Input("limits")]
        public Input<Inputs.GooglePrivacyDlpV2FindingLimitsArgs>? Limits { get; set; }

        /// <summary>
        /// Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/dlp/docs/likelihood).
        /// </summary>
        [Input("minLikelihood")]
        public Input<Pulumi.GoogleNative.DLP.V2.GooglePrivacyDlpV2InspectConfigMinLikelihood>? MinLikelihood { get; set; }

        [Input("minLikelihoodPerInfoType")]
        private InputList<Inputs.GooglePrivacyDlpV2InfoTypeLikelihoodArgs>? _minLikelihoodPerInfoType;

        /// <summary>
        /// Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.
        /// </summary>
        public InputList<Inputs.GooglePrivacyDlpV2InfoTypeLikelihoodArgs> MinLikelihoodPerInfoType
        {
            get => _minLikelihoodPerInfoType ?? (_minLikelihoodPerInfoType = new InputList<Inputs.GooglePrivacyDlpV2InfoTypeLikelihoodArgs>());
            set => _minLikelihoodPerInfoType = value;
        }

        [Input("ruleSet")]
        private InputList<Inputs.GooglePrivacyDlpV2InspectionRuleSetArgs>? _ruleSet;

        /// <summary>
        /// Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.
        /// </summary>
        public InputList<Inputs.GooglePrivacyDlpV2InspectionRuleSetArgs> RuleSet
        {
            get => _ruleSet ?? (_ruleSet = new InputList<Inputs.GooglePrivacyDlpV2InspectionRuleSetArgs>());
            set => _ruleSet = value;
        }

        public GooglePrivacyDlpV2InspectConfigArgs()
        {
        }
        public static new GooglePrivacyDlpV2InspectConfigArgs Empty => new GooglePrivacyDlpV2InspectConfigArgs();
    }
}
