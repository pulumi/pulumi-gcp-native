// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.DLP.V2
{
    public static class GetOrganizationDiscoveryConfig
    {
        /// <summary>
        /// Gets a discovery configuration.
        /// </summary>
        public static Task<GetOrganizationDiscoveryConfigResult> InvokeAsync(GetOrganizationDiscoveryConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationDiscoveryConfigResult>("google-native:dlp/v2:getOrganizationDiscoveryConfig", args ?? new GetOrganizationDiscoveryConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a discovery configuration.
        /// </summary>
        public static Output<GetOrganizationDiscoveryConfigResult> Invoke(GetOrganizationDiscoveryConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationDiscoveryConfigResult>("google-native:dlp/v2:getOrganizationDiscoveryConfig", args ?? new GetOrganizationDiscoveryConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrganizationDiscoveryConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("discoveryConfigId", required: true)]
        public string DiscoveryConfigId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        public GetOrganizationDiscoveryConfigArgs()
        {
        }
        public static new GetOrganizationDiscoveryConfigArgs Empty => new GetOrganizationDiscoveryConfigArgs();
    }

    public sealed class GetOrganizationDiscoveryConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("discoveryConfigId", required: true)]
        public Input<string> DiscoveryConfigId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        public GetOrganizationDiscoveryConfigInvokeArgs()
        {
        }
        public static new GetOrganizationDiscoveryConfigInvokeArgs Empty => new GetOrganizationDiscoveryConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrganizationDiscoveryConfigResult
    {
        /// <summary>
        /// Actions to execute at the completion of scanning.
        /// </summary>
        public readonly ImmutableArray<Outputs.GooglePrivacyDlpV2DataProfileActionResponse> Actions;
        /// <summary>
        /// The creation timestamp of a DiscoveryConfig.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Display name (max 100 chars)
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// A stream of errors encountered when the config was activated. Repeated errors may result in the config automatically being paused. Output only field. Will return the last 100 errors. Whenever the config is modified this list will be cleared.
        /// </summary>
        public readonly ImmutableArray<Outputs.GooglePrivacyDlpV2ErrorResponse> Errors;
        /// <summary>
        /// Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including "global"). Each region is scanned using the applicable template. If no region-specific template is specified, but a "global" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/dlp/docs/data-profiles#data-residency.
        /// </summary>
        public readonly ImmutableArray<string> InspectTemplates;
        /// <summary>
        /// The timestamp of the last time this config was executed.
        /// </summary>
        public readonly string LastRunTime;
        /// <summary>
        /// Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Only set when the parent is an org.
        /// </summary>
        public readonly Outputs.GooglePrivacyDlpV2OrgConfigResponse OrgConfig;
        /// <summary>
        /// A status for this configuration.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Target to match against for determining what to scan and how frequently.
        /// </summary>
        public readonly ImmutableArray<Outputs.GooglePrivacyDlpV2DiscoveryTargetResponse> Targets;
        /// <summary>
        /// The last update timestamp of a DiscoveryConfig.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetOrganizationDiscoveryConfigResult(
            ImmutableArray<Outputs.GooglePrivacyDlpV2DataProfileActionResponse> actions,

            string createTime,

            string displayName,

            ImmutableArray<Outputs.GooglePrivacyDlpV2ErrorResponse> errors,

            ImmutableArray<string> inspectTemplates,

            string lastRunTime,

            string name,

            Outputs.GooglePrivacyDlpV2OrgConfigResponse orgConfig,

            string status,

            ImmutableArray<Outputs.GooglePrivacyDlpV2DiscoveryTargetResponse> targets,

            string updateTime)
        {
            Actions = actions;
            CreateTime = createTime;
            DisplayName = displayName;
            Errors = errors;
            InspectTemplates = inspectTemplates;
            LastRunTime = lastRunTime;
            Name = name;
            OrgConfig = orgConfig;
            Status = status;
            Targets = targets;
            UpdateTime = updateTime;
        }
    }
}
