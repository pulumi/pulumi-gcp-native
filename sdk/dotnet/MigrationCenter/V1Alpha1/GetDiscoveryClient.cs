// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.MigrationCenter.V1Alpha1
{
    public static class GetDiscoveryClient
    {
        /// <summary>
        /// Gets the details of a discovery client.
        /// </summary>
        public static Task<GetDiscoveryClientResult> InvokeAsync(GetDiscoveryClientArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiscoveryClientResult>("google-native:migrationcenter/v1alpha1:getDiscoveryClient", args ?? new GetDiscoveryClientArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of a discovery client.
        /// </summary>
        public static Output<GetDiscoveryClientResult> Invoke(GetDiscoveryClientInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiscoveryClientResult>("google-native:migrationcenter/v1alpha1:getDiscoveryClient", args ?? new GetDiscoveryClientInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiscoveryClientArgs : global::Pulumi.InvokeArgs
    {
        [Input("discoveryClientId", required: true)]
        public string DiscoveryClientId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDiscoveryClientArgs()
        {
        }
        public static new GetDiscoveryClientArgs Empty => new GetDiscoveryClientArgs();
    }

    public sealed class GetDiscoveryClientInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("discoveryClientId", required: true)]
        public Input<string> DiscoveryClientId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDiscoveryClientInvokeArgs()
        {
        }
        public static new GetDiscoveryClientInvokeArgs Empty => new GetDiscoveryClientInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiscoveryClientResult
    {
        /// <summary>
        /// Time when the discovery client was first created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. Free text description. Maximum length is 1000 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. Free text display name. Maximum length is 63 characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Errors affecting client functionality.
        /// </summary>
        public readonly ImmutableArray<Outputs.StatusResponse> Errors;
        /// <summary>
        /// Optional. Client expiration time in UTC. If specified, the backend will not accept new frames after this time.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// Last heartbeat time. Healthy clients are expected to send heartbeats regularly (normally every few minutes).
        /// </summary>
        public readonly string HeartbeatTime;
        /// <summary>
        /// Optional. Labels as key value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Identifier. Full name of this discovery client.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Service account used by the discovery client for various operation.
        /// </summary>
        public readonly string ServiceAccount;
        /// <summary>
        /// This field is intended for internal use.
        /// </summary>
        public readonly string SignalsEndpoint;
        /// <summary>
        /// Full name of the source object associated with this discovery client.
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// Current state of the discovery client.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Optional. Input only. Client time-to-live. If specified, the backend will not accept new frames after this time. This field is input only. The derived expiration time is provided as output through the `expire_time` field.
        /// </summary>
        public readonly string Ttl;
        /// <summary>
        /// Time when the discovery client was last updated. This value is not updated by heartbeats, to view the last heartbeat time please refer to the `heartbeat_time` field.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// Client version, as reported in recent heartbeat.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetDiscoveryClientResult(
            string createTime,

            string description,

            string displayName,

            ImmutableArray<Outputs.StatusResponse> errors,

            string expireTime,

            string heartbeatTime,

            ImmutableDictionary<string, string> labels,

            string name,

            string serviceAccount,

            string signalsEndpoint,

            string source,

            string state,

            string ttl,

            string updateTime,

            string version)
        {
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            Errors = errors;
            ExpireTime = expireTime;
            HeartbeatTime = heartbeatTime;
            Labels = labels;
            Name = name;
            ServiceAccount = serviceAccount;
            SignalsEndpoint = signalsEndpoint;
            Source = source;
            State = state;
            Ttl = ttl;
            UpdateTime = updateTime;
            Version = version;
        }
    }
}
