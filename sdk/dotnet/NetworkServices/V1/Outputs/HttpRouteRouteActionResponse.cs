// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkServices.V1.Outputs
{

    /// <summary>
    /// The specifications for routing traffic and applying associated policies.
    /// </summary>
    [OutputType]
    public sealed class HttpRouteRouteActionResponse
    {
        /// <summary>
        /// The specification for allowing client side cross-origin requests.
        /// </summary>
        public readonly Outputs.HttpRouteCorsPolicyResponse CorsPolicy;
        /// <summary>
        /// The destination to which traffic should be forwarded.
        /// </summary>
        public readonly ImmutableArray<Outputs.HttpRouteDestinationResponse> Destinations;
        /// <summary>
        /// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
        /// </summary>
        public readonly Outputs.HttpRouteFaultInjectionPolicyResponse FaultInjectionPolicy;
        /// <summary>
        /// If set, the request is directed as configured by this field.
        /// </summary>
        public readonly Outputs.HttpRouteRedirectResponse Redirect;
        /// <summary>
        /// The specification for modifying the headers of a matching request prior to delivery of the request to the destination. If HeaderModifiers are set on both the Destination and the RouteAction, they will be merged. Conflicts between the two will not be resolved on the configuration.
        /// </summary>
        public readonly Outputs.HttpRouteHeaderModifierResponse RequestHeaderModifier;
        /// <summary>
        /// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
        /// </summary>
        public readonly Outputs.HttpRouteRequestMirrorPolicyResponse RequestMirrorPolicy;
        /// <summary>
        /// The specification for modifying the headers of a response prior to sending the response back to the client. If HeaderModifiers are set on both the Destination and the RouteAction, they will be merged. Conflicts between the two will not be resolved on the configuration.
        /// </summary>
        public readonly Outputs.HttpRouteHeaderModifierResponse ResponseHeaderModifier;
        /// <summary>
        /// Specifies the retry policy associated with this route.
        /// </summary>
        public readonly Outputs.HttpRouteRetryPolicyResponse RetryPolicy;
        /// <summary>
        /// Optional. Specifies cookie-based stateful session affinity.
        /// </summary>
        public readonly Outputs.HttpRouteStatefulSessionAffinityPolicyResponse StatefulSessionAffinity;
        /// <summary>
        /// Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
        /// </summary>
        public readonly string Timeout;
        /// <summary>
        /// The specification for rewrite URL before forwarding requests to the destination.
        /// </summary>
        public readonly Outputs.HttpRouteURLRewriteResponse UrlRewrite;

        [OutputConstructor]
        private HttpRouteRouteActionResponse(
            Outputs.HttpRouteCorsPolicyResponse corsPolicy,

            ImmutableArray<Outputs.HttpRouteDestinationResponse> destinations,

            Outputs.HttpRouteFaultInjectionPolicyResponse faultInjectionPolicy,

            Outputs.HttpRouteRedirectResponse redirect,

            Outputs.HttpRouteHeaderModifierResponse requestHeaderModifier,

            Outputs.HttpRouteRequestMirrorPolicyResponse requestMirrorPolicy,

            Outputs.HttpRouteHeaderModifierResponse responseHeaderModifier,

            Outputs.HttpRouteRetryPolicyResponse retryPolicy,

            Outputs.HttpRouteStatefulSessionAffinityPolicyResponse statefulSessionAffinity,

            string timeout,

            Outputs.HttpRouteURLRewriteResponse urlRewrite)
        {
            CorsPolicy = corsPolicy;
            Destinations = destinations;
            FaultInjectionPolicy = faultInjectionPolicy;
            Redirect = redirect;
            RequestHeaderModifier = requestHeaderModifier;
            RequestMirrorPolicy = requestMirrorPolicy;
            ResponseHeaderModifier = responseHeaderModifier;
            RetryPolicy = retryPolicy;
            StatefulSessionAffinity = statefulSessionAffinity;
            Timeout = timeout;
            UrlRewrite = urlRewrite;
        }
    }
}
