// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkServices.V1Beta1
{
    public static class GetTlsRoute
    {
        /// <summary>
        /// Gets details of a single TlsRoute.
        /// </summary>
        public static Task<GetTlsRouteResult> InvokeAsync(GetTlsRouteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTlsRouteResult>("google-native:networkservices/v1beta1:getTlsRoute", args ?? new GetTlsRouteArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single TlsRoute.
        /// </summary>
        public static Output<GetTlsRouteResult> Invoke(GetTlsRouteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTlsRouteResult>("google-native:networkservices/v1beta1:getTlsRoute", args ?? new GetTlsRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTlsRouteArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("tlsRouteId", required: true)]
        public string TlsRouteId { get; set; } = null!;

        public GetTlsRouteArgs()
        {
        }
        public static new GetTlsRouteArgs Empty => new GetTlsRouteArgs();
    }

    public sealed class GetTlsRouteInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tlsRouteId", required: true)]
        public Input<string> TlsRouteId { get; set; } = null!;

        public GetTlsRouteInvokeArgs()
        {
        }
        public static new GetTlsRouteInvokeArgs Empty => new GetTlsRouteInvokeArgs();
    }


    [OutputType]
    public sealed class GetTlsRouteResult
    {
        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
        /// </summary>
        public readonly ImmutableArray<string> Gateways;
        /// <summary>
        /// Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
        /// </summary>
        public readonly ImmutableArray<string> Meshes;
        /// <summary>
        /// Name of the TlsRoute resource. It matches pattern `projects/*/locations/global/tlsRoutes/tls_route_name&gt;`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
        /// </summary>
        public readonly ImmutableArray<Outputs.TlsRouteRouteRuleResponse> Rules;
        /// <summary>
        /// Server-defined URL of this resource
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The timestamp when the resource was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetTlsRouteResult(
            string createTime,

            string description,

            ImmutableArray<string> gateways,

            ImmutableArray<string> meshes,

            string name,

            ImmutableArray<Outputs.TlsRouteRouteRuleResponse> rules,

            string selfLink,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            Gateways = gateways;
            Meshes = meshes;
            Name = name;
            Rules = rules;
            SelfLink = selfLink;
            UpdateTime = updateTime;
        }
    }
}
