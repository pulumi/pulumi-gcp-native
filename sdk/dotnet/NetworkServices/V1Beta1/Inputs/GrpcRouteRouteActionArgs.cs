// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkServices.V1Beta1.Inputs
{

    /// <summary>
    /// Specifies how to route matched traffic.
    /// </summary>
    public sealed class GrpcRouteRouteActionArgs : global::Pulumi.ResourceArgs
    {
        [Input("destinations")]
        private InputList<Inputs.GrpcRouteDestinationArgs>? _destinations;

        /// <summary>
        /// Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
        /// </summary>
        public InputList<Inputs.GrpcRouteDestinationArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.GrpcRouteDestinationArgs>());
            set => _destinations = value;
        }

        /// <summary>
        /// Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
        /// </summary>
        [Input("faultInjectionPolicy")]
        public Input<Inputs.GrpcRouteFaultInjectionPolicyArgs>? FaultInjectionPolicy { get; set; }

        /// <summary>
        /// Optional. Specifies the retry policy associated with this route.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.GrpcRouteRetryPolicyArgs>? RetryPolicy { get; set; }

        /// <summary>
        /// Optional. Specifies cookie-based stateful session affinity.
        /// </summary>
        [Input("statefulSessionAffinity")]
        public Input<Inputs.GrpcRouteStatefulSessionAffinityPolicyArgs>? StatefulSessionAffinity { get; set; }

        /// <summary>
        /// Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public GrpcRouteRouteActionArgs()
        {
        }
        public static new GrpcRouteRouteActionArgs Empty => new GrpcRouteRouteActionArgs();
    }
}
