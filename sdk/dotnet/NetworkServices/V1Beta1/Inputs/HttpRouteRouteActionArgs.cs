// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkServices.V1Beta1.Inputs
{

    /// <summary>
    /// The specifications for routing traffic and applying associated policies.
    /// </summary>
    public sealed class HttpRouteRouteActionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The specification for allowing client side cross-origin requests.
        /// </summary>
        [Input("corsPolicy")]
        public Input<Inputs.HttpRouteCorsPolicyArgs>? CorsPolicy { get; set; }

        [Input("destinations")]
        private InputList<Inputs.HttpRouteDestinationArgs>? _destinations;

        /// <summary>
        /// The destination to which traffic should be forwarded.
        /// </summary>
        public InputList<Inputs.HttpRouteDestinationArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.HttpRouteDestinationArgs>());
            set => _destinations = value;
        }

        /// <summary>
        /// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
        /// </summary>
        [Input("faultInjectionPolicy")]
        public Input<Inputs.HttpRouteFaultInjectionPolicyArgs>? FaultInjectionPolicy { get; set; }

        /// <summary>
        /// If set, the request is directed as configured by this field.
        /// </summary>
        [Input("redirect")]
        public Input<Inputs.HttpRouteRedirectArgs>? Redirect { get; set; }

        /// <summary>
        /// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
        /// </summary>
        [Input("requestHeaderModifier")]
        public Input<Inputs.HttpRouteHeaderModifierArgs>? RequestHeaderModifier { get; set; }

        /// <summary>
        /// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
        /// </summary>
        [Input("requestMirrorPolicy")]
        public Input<Inputs.HttpRouteRequestMirrorPolicyArgs>? RequestMirrorPolicy { get; set; }

        /// <summary>
        /// The specification for modifying the headers of a response prior to sending the response back to the client.
        /// </summary>
        [Input("responseHeaderModifier")]
        public Input<Inputs.HttpRouteHeaderModifierArgs>? ResponseHeaderModifier { get; set; }

        /// <summary>
        /// Specifies the retry policy associated with this route.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.HttpRouteRetryPolicyArgs>? RetryPolicy { get; set; }

        /// <summary>
        /// Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        /// <summary>
        /// The specification for rewrite URL before forwarding requests to the destination.
        /// </summary>
        [Input("urlRewrite")]
        public Input<Inputs.HttpRouteURLRewriteArgs>? UrlRewrite { get; set; }

        public HttpRouteRouteActionArgs()
        {
        }
    }
}
