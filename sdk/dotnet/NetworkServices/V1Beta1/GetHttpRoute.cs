// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkServices.V1Beta1
{
    public static class GetHttpRoute
    {
        /// <summary>
        /// Gets details of a single HttpRoute.
        /// </summary>
        public static Task<GetHttpRouteResult> InvokeAsync(GetHttpRouteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHttpRouteResult>("google-native:networkservices/v1beta1:getHttpRoute", args ?? new GetHttpRouteArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single HttpRoute.
        /// </summary>
        public static Output<GetHttpRouteResult> Invoke(GetHttpRouteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHttpRouteResult>("google-native:networkservices/v1beta1:getHttpRoute", args ?? new GetHttpRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHttpRouteArgs : global::Pulumi.InvokeArgs
    {
        [Input("httpRouteId", required: true)]
        public string HttpRouteId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetHttpRouteArgs()
        {
        }
        public static new GetHttpRouteArgs Empty => new GetHttpRouteArgs();
    }

    public sealed class GetHttpRouteInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("httpRouteId", required: true)]
        public Input<string> HttpRouteId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetHttpRouteInvokeArgs()
        {
        }
        public static new GetHttpRouteInvokeArgs Empty => new GetHttpRouteInvokeArgs();
    }


    [OutputType]
    public sealed class GetHttpRouteResult
    {
        /// <summary>
        /// The timestamp when the resource was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Optional. A free-text description of the resource. Max length 1024 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
        /// </summary>
        public readonly ImmutableArray<string> Gateways;
        /// <summary>
        /// Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. Hostname can be "precise" which is a domain name without the terminating dot of a network host (e.g. `foo.example.com`) or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with `*.bar.com` or both with `bar.com`.
        /// </summary>
        public readonly ImmutableArray<string> Hostnames;
        /// <summary>
        /// Optional. Set of label tags associated with the HttpRoute resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
        /// </summary>
        public readonly ImmutableArray<string> Meshes;
        /// <summary>
        /// Name of the HttpRoute resource. It matches pattern `projects/*/locations/global/httpRoutes/http_route_name&gt;`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.HttpRouteRouteRuleResponse> Rules;
        /// <summary>
        /// Server-defined URL of this resource
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The timestamp when the resource was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetHttpRouteResult(
            string createTime,

            string description,

            ImmutableArray<string> gateways,

            ImmutableArray<string> hostnames,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<string> meshes,

            string name,

            ImmutableArray<Outputs.HttpRouteRouteRuleResponse> rules,

            string selfLink,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            Gateways = gateways;
            Hostnames = hostnames;
            Labels = labels;
            Meshes = meshes;
            Name = name;
            Rules = rules;
            SelfLink = selfLink;
            UpdateTime = updateTime;
        }
    }
}
