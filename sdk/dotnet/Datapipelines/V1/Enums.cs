// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Datapipelines.V1
{
    /// <summary>
    /// Set FlexRS goal for the job. https://cloud.google.com/dataflow/docs/guides/flexrs
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal : IEquatable<GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal>
    {
        private readonly string _value;

        private GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Run in the default mode.
        /// </summary>
        public static GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal FlexrsUnspecified { get; } = new GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal("FLEXRS_UNSPECIFIED");
        /// <summary>
        /// Optimize for lower execution time.
        /// </summary>
        public static GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal FlexrsSpeedOptimized { get; } = new GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal("FLEXRS_SPEED_OPTIMIZED");
        /// <summary>
        /// Optimize for lower cost.
        /// </summary>
        public static GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal FlexrsCostOptimized { get; } = new GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal("FLEXRS_COST_OPTIMIZED");

        public static bool operator ==(GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal left, GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal right) => left.Equals(right);
        public static bool operator !=(GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal left, GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal other && Equals(other);
        public bool Equals(GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentFlexrsGoal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configuration for VM IPs.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration : IEquatable<GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration>
    {
        private readonly string _value;

        private GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The configuration is unknown, or unspecified.
        /// </summary>
        public static GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration WorkerIpUnspecified { get; } = new GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration("WORKER_IP_UNSPECIFIED");
        /// <summary>
        /// Workers should have public IP addresses.
        /// </summary>
        public static GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration WorkerIpPublic { get; } = new GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration("WORKER_IP_PUBLIC");
        /// <summary>
        /// Workers should have private IP addresses.
        /// </summary>
        public static GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration WorkerIpPrivate { get; } = new GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration("WORKER_IP_PRIVATE");

        public static bool operator ==(GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration left, GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration right) => left.Equals(right);
        public static bool operator !=(GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration left, GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration other && Equals(other);
        public bool Equals(GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironmentIpConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configuration for VM IPs.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration : IEquatable<GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration>
    {
        private readonly string _value;

        private GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The configuration is unknown, or unspecified.
        /// </summary>
        public static GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration WorkerIpUnspecified { get; } = new GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration("WORKER_IP_UNSPECIFIED");
        /// <summary>
        /// Workers should have public IP addresses.
        /// </summary>
        public static GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration WorkerIpPublic { get; } = new GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration("WORKER_IP_PUBLIC");
        /// <summary>
        /// Workers should have private IP addresses.
        /// </summary>
        public static GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration WorkerIpPrivate { get; } = new GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration("WORKER_IP_PRIVATE");

        public static bool operator ==(GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration left, GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration right) => left.Equals(right);
        public static bool operator !=(GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration left, GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration other && Equals(other);
        public bool Equals(GoogleCloudDatapipelinesV1RuntimeEnvironmentIpConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The state of the pipeline. When the pipeline is created, the state is set to 'PIPELINE_STATE_ACTIVE' by default. State changes can be requested by setting the state to stopping, paused, or resuming. State cannot be changed through UpdatePipeline requests.
    /// </summary>
    [EnumType]
    public readonly struct PipelineState : IEquatable<PipelineState>
    {
        private readonly string _value;

        private PipelineState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The pipeline state isn't specified.
        /// </summary>
        public static PipelineState StateUnspecified { get; } = new PipelineState("STATE_UNSPECIFIED");
        /// <summary>
        /// The pipeline is getting started or resumed. When finished, the pipeline state will be 'PIPELINE_STATE_ACTIVE'.
        /// </summary>
        public static PipelineState StateResuming { get; } = new PipelineState("STATE_RESUMING");
        /// <summary>
        /// The pipeline is actively running.
        /// </summary>
        public static PipelineState StateActive { get; } = new PipelineState("STATE_ACTIVE");
        /// <summary>
        /// The pipeline is in the process of stopping. When finished, the pipeline state will be 'PIPELINE_STATE_ARCHIVED'.
        /// </summary>
        public static PipelineState StateStopping { get; } = new PipelineState("STATE_STOPPING");
        /// <summary>
        /// The pipeline has been stopped. This is a terminal state and cannot be undone.
        /// </summary>
        public static PipelineState StateArchived { get; } = new PipelineState("STATE_ARCHIVED");
        /// <summary>
        /// The pipeline is paused. This is a non-terminal state. When the pipeline is paused, it will hold processing jobs, but can be resumed later. For a batch pipeline, this means pausing the scheduler job. For a streaming pipeline, creating a job snapshot to resume from will give the same effect.
        /// </summary>
        public static PipelineState StatePaused { get; } = new PipelineState("STATE_PAUSED");

        public static bool operator ==(PipelineState left, PipelineState right) => left.Equals(right);
        public static bool operator !=(PipelineState left, PipelineState right) => !left.Equals(right);

        public static explicit operator string(PipelineState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineState other && Equals(other);
        public bool Equals(PipelineState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The type of the pipeline. This field affects the scheduling of the pipeline and the type of metrics to show for the pipeline.
    /// </summary>
    [EnumType]
    public readonly struct PipelineType : IEquatable<PipelineType>
    {
        private readonly string _value;

        private PipelineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The pipeline type isn't specified.
        /// </summary>
        public static PipelineType PipelineTypeUnspecified { get; } = new PipelineType("PIPELINE_TYPE_UNSPECIFIED");
        /// <summary>
        /// A batch pipeline. It runs jobs on a specific schedule, and each job will automatically terminate once execution is finished.
        /// </summary>
        public static PipelineType PipelineTypeBatch { get; } = new PipelineType("PIPELINE_TYPE_BATCH");
        /// <summary>
        /// A streaming pipeline. The underlying job is continuously running until it is manually terminated by the user. This type of pipeline doesn't have a schedule to run on, and the linked job gets created when the pipeline is created.
        /// </summary>
        public static PipelineType PipelineTypeStreaming { get; } = new PipelineType("PIPELINE_TYPE_STREAMING");

        public static bool operator ==(PipelineType left, PipelineType right) => left.Equals(right);
        public static bool operator !=(PipelineType left, PipelineType right) => !left.Equals(right);

        public static explicit operator string(PipelineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineType other && Equals(other);
        public bool Equals(PipelineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
