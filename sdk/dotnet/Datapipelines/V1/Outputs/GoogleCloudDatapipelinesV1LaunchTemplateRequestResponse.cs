// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Datapipelines.V1.Outputs
{

    /// <summary>
    /// A request to launch a template.
    /// </summary>
    [OutputType]
    public sealed class GoogleCloudDatapipelinesV1LaunchTemplateRequestResponse
    {
        /// <summary>
        /// A Cloud Storage path to the template from which to create the job. Must be a valid Cloud Storage URL, beginning with 'gs://'.
        /// </summary>
        public readonly string GcsPath;
        /// <summary>
        /// The parameters of the template to launch. This should be part of the body of the POST request.
        /// </summary>
        public readonly Outputs.GoogleCloudDatapipelinesV1LaunchTemplateParametersResponse LaunchParameters;
        /// <summary>
        /// The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The ID of the Cloud Platform project that the job belongs to.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// If true, the request is validated but not actually executed. Defaults to false.
        /// </summary>
        public readonly bool ValidateOnly;

        [OutputConstructor]
        private GoogleCloudDatapipelinesV1LaunchTemplateRequestResponse(
            string gcsPath,

            Outputs.GoogleCloudDatapipelinesV1LaunchTemplateParametersResponse launchParameters,

            string location,

            string project,

            bool validateOnly)
        {
            GcsPath = gcsPath;
            LaunchParameters = launchParameters;
            Location = location;
            Project = project;
            ValidateOnly = validateOnly;
        }
    }
}
