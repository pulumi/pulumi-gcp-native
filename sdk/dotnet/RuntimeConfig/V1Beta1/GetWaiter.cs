// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.RuntimeConfig.V1Beta1
{
    public static class GetWaiter
    {
        /// <summary>
        /// Gets information about a single waiter.
        /// </summary>
        public static Task<GetWaiterResult> InvokeAsync(GetWaiterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetWaiterResult>("google-native:runtimeconfig/v1beta1:getWaiter", args ?? new GetWaiterArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a single waiter.
        /// </summary>
        public static Output<GetWaiterResult> Invoke(GetWaiterInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetWaiterResult>("google-native:runtimeconfig/v1beta1:getWaiter", args ?? new GetWaiterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWaiterArgs : Pulumi.InvokeArgs
    {
        [Input("configId", required: true)]
        public string ConfigId { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("waiterId", required: true)]
        public string WaiterId { get; set; } = null!;

        public GetWaiterArgs()
        {
        }
    }

    public sealed class GetWaiterInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("waiterId", required: true)]
        public Input<string> WaiterId { get; set; } = null!;

        public GetWaiterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetWaiterResult
    {
        /// <summary>
        /// The instant at which this Waiter resource was created. Adding the value of `timeout` to this instant yields the timeout deadline for the waiter.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// If the value is `false`, it means the waiter is still waiting for one of its conditions to be met. If true, the waiter has finished. If the waiter finished due to a timeout or failure, `error` will be set.
        /// </summary>
        public readonly bool Done;
        /// <summary>
        /// If the waiter ended due to a failure or timeout, this value will be set.
        /// </summary>
        public readonly Outputs.StatusResponse Error;
        /// <summary>
        /// [Optional] The failure condition of this waiter. If this condition is met, `done` will be set to `true` and the `error` code will be set to `ABORTED`. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated. This value is optional; if no failure condition is set, the only failure scenario will be a timeout.
        /// </summary>
        public readonly Outputs.EndConditionResponse Failure;
        /// <summary>
        /// The name of the Waiter resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME] The `[PROJECT_ID]` must be a valid Google Cloud project ID, the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the `[WAITER_NAME]` must match RFC 1035 segment specification, and the length of `[WAITER_NAME]` must be less than 64 bytes. After you create a Waiter resource, you cannot change the resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// [Required] The success condition. If this condition is met, `done` will be set to `true` and the `error` value will remain unset. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated.
        /// </summary>
        public readonly Outputs.EndConditionResponse Success;
        /// <summary>
        /// [Required] Specifies the timeout of the waiter in seconds, beginning from the instant that `waiters().create` method is called. If this time elapses before the success or failure conditions are met, the waiter fails and sets the `error` code to `DEADLINE_EXCEEDED`.
        /// </summary>
        public readonly string Timeout;

        [OutputConstructor]
        private GetWaiterResult(
            string createTime,

            bool done,

            Outputs.StatusResponse error,

            Outputs.EndConditionResponse failure,

            string name,

            Outputs.EndConditionResponse success,

            string timeout)
        {
            CreateTime = createTime;
            Done = done;
            Error = error;
            Failure = failure;
            Name = name;
            Success = success;
            Timeout = timeout;
        }
    }
}
