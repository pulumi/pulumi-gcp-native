// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudFunctions.V2.Outputs
{

    /// <summary>
    /// Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container.
    /// </summary>
    [OutputType]
    public sealed class SecretVolumeResponse
    {
        /// <summary>
        /// The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount path: /etc/secrets
        /// </summary>
        public readonly string MountPath;
        /// <summary>
        /// Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Name of the secret in secret manager (not the full resource name).
        /// </summary>
        public readonly string Secret;
        /// <summary>
        /// List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.
        /// </summary>
        public readonly ImmutableArray<Outputs.SecretVersionResponse> Versions;

        [OutputConstructor]
        private SecretVolumeResponse(
            string mountPath,

            string project,

            string secret,

            ImmutableArray<Outputs.SecretVersionResponse> versions)
        {
            MountPath = mountPath;
            Project = project;
            Secret = secret;
            Versions = versions;
        }
    }
}
