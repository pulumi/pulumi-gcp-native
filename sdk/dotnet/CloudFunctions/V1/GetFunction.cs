// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudFunctions.V1
{
    public static class GetFunction
    {
        /// <summary>
        /// Returns a function with the given name from the requested project.
        /// </summary>
        public static Task<GetFunctionResult> InvokeAsync(GetFunctionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFunctionResult>("google-native:cloudfunctions/v1:getFunction", args ?? new GetFunctionArgs(), options.WithVersion());
    }


    public sealed class GetFunctionArgs : Pulumi.InvokeArgs
    {
        [Input("functionId", required: true)]
        public string FunctionId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetFunctionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFunctionResult
    {
        /// <summary>
        /// The amount of memory in MB available for a function. Defaults to 256MB.
        /// </summary>
        public readonly int AvailableMemoryMb;
        /// <summary>
        /// Build environment variables that shall be available during build time.
        /// </summary>
        public readonly ImmutableDictionary<string, string> BuildEnvironmentVariables;
        /// <summary>
        /// The Cloud Build ID of the latest successful deployment of the function.
        /// </summary>
        public readonly string BuildId;
        /// <summary>
        /// Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (service-@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role Cloud Build Custom Workers Builder (roles/cloudbuild.customworkers.builder) in the project.
        /// </summary>
        public readonly string BuildWorkerPool;
        /// <summary>
        /// User-provided description of a function.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named "function". For Node.js this is name of a function exported by the module specified in `source_location`.
        /// </summary>
        public readonly string EntryPoint;
        /// <summary>
        /// Environment variables that shall be available during function execution.
        /// </summary>
        public readonly ImmutableDictionary<string, string> EnvironmentVariables;
        /// <summary>
        /// A source that fires events in response to a condition in another service.
        /// </summary>
        public readonly Outputs.EventTriggerResponse EventTrigger;
        /// <summary>
        /// An HTTPS endpoint type of source that can be triggered via URL.
        /// </summary>
        public readonly Outputs.HttpsTriggerResponse HttpsTrigger;
        /// <summary>
        /// The ingress settings for the function, controlling what traffic can reach it.
        /// </summary>
        public readonly string IngressSettings;
        /// <summary>
        /// Labels associated with this Cloud Function.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
        /// </summary>
        public readonly int MaxInstances;
        /// <summary>
        /// A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The VPC Network that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network resource. If the short network name is used, the network must belong to the same project. Otherwise, it must belong to a project within the same organization. The format of this field is either `projects/{project}/global/networks/{network}` or `{network}`, where {project} is a project id where the network is defined, and {network} is the short name of the network. This field is mutually exclusive with `vpc_connector` and will be replaced by it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](/sdk/gcloud/reference/functions/deploy#--runtime).
        /// </summary>
        public readonly string Runtime;
        /// <summary>
        /// The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.
        /// </summary>
        public readonly string ServiceAccountEmail;
        /// <summary>
        /// The Google Cloud Storage URL, starting with gs://, pointing to the zip archive which contains the function.
        /// </summary>
        public readonly string SourceArchiveUrl;
        /// <summary>
        /// **Beta Feature** The source repository where a function is hosted.
        /// </summary>
        public readonly Outputs.SourceRepositoryResponse SourceRepository;
        /// <summary>
        /// Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
        /// </summary>
        public readonly string SourceToken;
        /// <summary>
        /// The Google Cloud Storage signed URL used for source uploading, generated by google.cloud.functions.v1.GenerateUploadUrl
        /// </summary>
        public readonly string SourceUploadUrl;
        /// <summary>
        /// Status of the function deployment.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
        /// </summary>
        public readonly string Timeout;
        /// <summary>
        /// The last update timestamp of a Cloud Function.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.
        /// </summary>
        public readonly string VersionId;
        /// <summary>
        /// The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
        /// </summary>
        public readonly string VpcConnector;
        /// <summary>
        /// The egress settings for the connector, controlling what traffic is diverted through it.
        /// </summary>
        public readonly string VpcConnectorEgressSettings;

        [OutputConstructor]
        private GetFunctionResult(
            int availableMemoryMb,

            ImmutableDictionary<string, string> buildEnvironmentVariables,

            string buildId,

            string buildWorkerPool,

            string description,

            string entryPoint,

            ImmutableDictionary<string, string> environmentVariables,

            Outputs.EventTriggerResponse eventTrigger,

            Outputs.HttpsTriggerResponse httpsTrigger,

            string ingressSettings,

            ImmutableDictionary<string, string> labels,

            int maxInstances,

            string name,

            string network,

            string runtime,

            string serviceAccountEmail,

            string sourceArchiveUrl,

            Outputs.SourceRepositoryResponse sourceRepository,

            string sourceToken,

            string sourceUploadUrl,

            string status,

            string timeout,

            string updateTime,

            string versionId,

            string vpcConnector,

            string vpcConnectorEgressSettings)
        {
            AvailableMemoryMb = availableMemoryMb;
            BuildEnvironmentVariables = buildEnvironmentVariables;
            BuildId = buildId;
            BuildWorkerPool = buildWorkerPool;
            Description = description;
            EntryPoint = entryPoint;
            EnvironmentVariables = environmentVariables;
            EventTrigger = eventTrigger;
            HttpsTrigger = httpsTrigger;
            IngressSettings = ingressSettings;
            Labels = labels;
            MaxInstances = maxInstances;
            Name = name;
            Network = network;
            Runtime = runtime;
            ServiceAccountEmail = serviceAccountEmail;
            SourceArchiveUrl = sourceArchiveUrl;
            SourceRepository = sourceRepository;
            SourceToken = sourceToken;
            SourceUploadUrl = sourceUploadUrl;
            Status = status;
            Timeout = timeout;
            UpdateTime = updateTime;
            VersionId = versionId;
            VpcConnector = vpcConnector;
            VpcConnectorEgressSettings = vpcConnectorEgressSettings;
        }
    }
}
