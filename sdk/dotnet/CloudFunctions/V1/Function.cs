// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.CloudFunctions.V1
{
    /// <summary>
    /// Creates a new function. If a function with the given name already exists in the specified project, the long running operation will return `ALREADY_EXISTS` error.
    /// </summary>
    [GoogleNativeResourceType("google-native:cloudfunctions/v1:Function")]
    public partial class Function : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The amount of memory in MB available for a function. Defaults to 256MB.
        /// </summary>
        [Output("availableMemoryMb")]
        public Output<int> AvailableMemoryMb { get; private set; } = null!;

        /// <summary>
        /// Build environment variables that shall be available during build time.
        /// </summary>
        [Output("buildEnvironmentVariables")]
        public Output<ImmutableDictionary<string, string>> BuildEnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// The Cloud Build ID of the latest successful deployment of the function.
        /// </summary>
        [Output("buildId")]
        public Output<string> BuildId { get; private set; } = null!;

        /// <summary>
        /// The Cloud Build Name of the function deployment. `projects//locations//builds/`.
        /// </summary>
        [Output("buildName")]
        public Output<string> BuildName { get; private set; } = null!;

        /// <summary>
        /// Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.
        /// </summary>
        [Output("buildWorkerPool")]
        public Output<string> BuildWorkerPool { get; private set; } = null!;

        /// <summary>
        /// User-provided description of a function.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Docker Registry to use for this deployment. If `docker_repository` field is specified, this field will be automatically set as `ARTIFACT_REGISTRY`. If unspecified, it currently defaults to `CONTAINER_REGISTRY`. This field may be overridden by the backend for eligible deployments.
        /// </summary>
        [Output("dockerRegistry")]
        public Output<string> DockerRegistry { get; private set; } = null!;

        /// <summary>
        /// User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.
        /// </summary>
        [Output("dockerRepository")]
        public Output<string> DockerRepository { get; private set; } = null!;

        /// <summary>
        /// The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.
        /// </summary>
        [Output("entryPoint")]
        public Output<string> EntryPoint { get; private set; } = null!;

        /// <summary>
        /// Environment variables that shall be available during function execution.
        /// </summary>
        [Output("environmentVariables")]
        public Output<ImmutableDictionary<string, string>> EnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// A source that fires events in response to a condition in another service.
        /// </summary>
        [Output("eventTrigger")]
        public Output<Outputs.EventTriggerResponse> EventTrigger { get; private set; } = null!;

        /// <summary>
        /// An HTTPS endpoint type of source that can be triggered via URL.
        /// </summary>
        [Output("httpsTrigger")]
        public Output<Outputs.HttpsTriggerResponse> HttpsTrigger { get; private set; } = null!;

        /// <summary>
        /// The ingress settings for the function, controlling what traffic can reach it.
        /// </summary>
        [Output("ingressSettings")]
        public Output<string> IngressSettings { get; private set; } = null!;

        /// <summary>
        /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.
        /// </summary>
        [Output("kmsKeyName")]
        public Output<string> KmsKeyName { get; private set; } = null!;

        /// <summary>
        /// Labels associated with this Cloud Function.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
        /// </summary>
        [Output("maxInstances")]
        public Output<int> MaxInstances { get; private set; } = null!;

        /// <summary>
        /// A lower bound for the number function instances that may coexist at a given time.
        /// </summary>
        [Output("minInstances")]
        public Output<int> MinInstances { get; private set; } = null!;

        /// <summary>
        /// A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Deprecated: use vpc_connector
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
        /// </summary>
        [Output("runtime")]
        public Output<string> Runtime { get; private set; } = null!;

        /// <summary>
        /// Secret environment variables configuration.
        /// </summary>
        [Output("secretEnvironmentVariables")]
        public Output<ImmutableArray<Outputs.SecretEnvVarResponse>> SecretEnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// Secret volumes configuration.
        /// </summary>
        [Output("secretVolumes")]
        public Output<ImmutableArray<Outputs.SecretVolumeResponse>> SecretVolumes { get; private set; } = null!;

        /// <summary>
        /// The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.
        /// </summary>
        [Output("serviceAccountEmail")]
        public Output<string> ServiceAccountEmail { get; private set; } = null!;

        /// <summary>
        /// The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.
        /// </summary>
        [Output("sourceArchiveUrl")]
        public Output<string> SourceArchiveUrl { get; private set; } = null!;

        /// <summary>
        /// **Beta Feature** The source repository where a function is hosted.
        /// </summary>
        [Output("sourceRepository")]
        public Output<Outputs.SourceRepositoryResponse> SourceRepository { get; private set; } = null!;

        /// <summary>
        /// Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
        /// </summary>
        [Output("sourceToken")]
        public Output<string> SourceToken { get; private set; } = null!;

        /// <summary>
        /// The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)
        /// </summary>
        [Output("sourceUploadUrl")]
        public Output<string> SourceUploadUrl { get; private set; } = null!;

        /// <summary>
        /// Status of the function deployment.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
        /// </summary>
        [Output("timeout")]
        public Output<string> Timeout { get; private set; } = null!;

        /// <summary>
        /// The last update timestamp of a Cloud Function.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.
        /// </summary>
        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;

        /// <summary>
        /// The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
        /// </summary>
        [Output("vpcConnector")]
        public Output<string> VpcConnector { get; private set; } = null!;

        /// <summary>
        /// The egress settings for the connector, controlling what traffic is diverted through it.
        /// </summary>
        [Output("vpcConnectorEgressSettings")]
        public Output<string> VpcConnectorEgressSettings { get; private set; } = null!;


        /// <summary>
        /// Create a Function resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Function(string name, FunctionArgs? args = null, CustomResourceOptions? options = null)
            : base("google-native:cloudfunctions/v1:Function", name, args ?? new FunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Function(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:cloudfunctions/v1:Function", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Function resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Function Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Function(name, id, options);
        }
    }

    public sealed class FunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The amount of memory in MB available for a function. Defaults to 256MB.
        /// </summary>
        [Input("availableMemoryMb")]
        public Input<int>? AvailableMemoryMb { get; set; }

        [Input("buildEnvironmentVariables")]
        private InputMap<string>? _buildEnvironmentVariables;

        /// <summary>
        /// Build environment variables that shall be available during build time.
        /// </summary>
        public InputMap<string> BuildEnvironmentVariables
        {
            get => _buildEnvironmentVariables ?? (_buildEnvironmentVariables = new InputMap<string>());
            set => _buildEnvironmentVariables = value;
        }

        /// <summary>
        /// Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.
        /// </summary>
        [Input("buildWorkerPool")]
        public Input<string>? BuildWorkerPool { get; set; }

        /// <summary>
        /// User-provided description of a function.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Docker Registry to use for this deployment. If `docker_repository` field is specified, this field will be automatically set as `ARTIFACT_REGISTRY`. If unspecified, it currently defaults to `CONTAINER_REGISTRY`. This field may be overridden by the backend for eligible deployments.
        /// </summary>
        [Input("dockerRegistry")]
        public Input<Pulumi.GoogleNative.CloudFunctions.V1.FunctionDockerRegistry>? DockerRegistry { get; set; }

        /// <summary>
        /// User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.
        /// </summary>
        [Input("dockerRepository")]
        public Input<string>? DockerRepository { get; set; }

        /// <summary>
        /// The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.
        /// </summary>
        [Input("entryPoint")]
        public Input<string>? EntryPoint { get; set; }

        [Input("environmentVariables")]
        private InputMap<string>? _environmentVariables;

        /// <summary>
        /// Environment variables that shall be available during function execution.
        /// </summary>
        public InputMap<string> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputMap<string>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// A source that fires events in response to a condition in another service.
        /// </summary>
        [Input("eventTrigger")]
        public Input<Inputs.EventTriggerArgs>? EventTrigger { get; set; }

        /// <summary>
        /// An HTTPS endpoint type of source that can be triggered via URL.
        /// </summary>
        [Input("httpsTrigger")]
        public Input<Inputs.HttpsTriggerArgs>? HttpsTrigger { get; set; }

        /// <summary>
        /// The ingress settings for the function, controlling what traffic can reach it.
        /// </summary>
        [Input("ingressSettings")]
        public Input<Pulumi.GoogleNative.CloudFunctions.V1.FunctionIngressSettings>? IngressSettings { get; set; }

        /// <summary>
        /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.
        /// </summary>
        [Input("kmsKeyName")]
        public Input<string>? KmsKeyName { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels associated with this Cloud Function.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
        /// </summary>
        [Input("maxInstances")]
        public Input<int>? MaxInstances { get; set; }

        /// <summary>
        /// A lower bound for the number function instances that may coexist at a given time.
        /// </summary>
        [Input("minInstances")]
        public Input<int>? MinInstances { get; set; }

        /// <summary>
        /// A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Deprecated: use vpc_connector
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
        /// </summary>
        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        [Input("secretEnvironmentVariables")]
        private InputList<Inputs.SecretEnvVarArgs>? _secretEnvironmentVariables;

        /// <summary>
        /// Secret environment variables configuration.
        /// </summary>
        public InputList<Inputs.SecretEnvVarArgs> SecretEnvironmentVariables
        {
            get => _secretEnvironmentVariables ?? (_secretEnvironmentVariables = new InputList<Inputs.SecretEnvVarArgs>());
            set => _secretEnvironmentVariables = value;
        }

        [Input("secretVolumes")]
        private InputList<Inputs.SecretVolumeArgs>? _secretVolumes;

        /// <summary>
        /// Secret volumes configuration.
        /// </summary>
        public InputList<Inputs.SecretVolumeArgs> SecretVolumes
        {
            get => _secretVolumes ?? (_secretVolumes = new InputList<Inputs.SecretVolumeArgs>());
            set => _secretVolumes = value;
        }

        /// <summary>
        /// The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.
        /// </summary>
        [Input("serviceAccountEmail")]
        public Input<string>? ServiceAccountEmail { get; set; }

        /// <summary>
        /// The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.
        /// </summary>
        [Input("sourceArchiveUrl")]
        public Input<string>? SourceArchiveUrl { get; set; }

        /// <summary>
        /// **Beta Feature** The source repository where a function is hosted.
        /// </summary>
        [Input("sourceRepository")]
        public Input<Inputs.SourceRepositoryArgs>? SourceRepository { get; set; }

        /// <summary>
        /// Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
        /// </summary>
        [Input("sourceToken")]
        public Input<string>? SourceToken { get; set; }

        /// <summary>
        /// The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)
        /// </summary>
        [Input("sourceUploadUrl")]
        public Input<string>? SourceUploadUrl { get; set; }

        /// <summary>
        /// The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        /// <summary>
        /// The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
        /// </summary>
        [Input("vpcConnector")]
        public Input<string>? VpcConnector { get; set; }

        /// <summary>
        /// The egress settings for the connector, controlling what traffic is diverted through it.
        /// </summary>
        [Input("vpcConnectorEgressSettings")]
        public Input<Pulumi.GoogleNative.CloudFunctions.V1.FunctionVpcConnectorEgressSettings>? VpcConnectorEgressSettings { get; set; }

        public FunctionArgs()
        {
        }
        public static new FunctionArgs Empty => new FunctionArgs();
    }
}
