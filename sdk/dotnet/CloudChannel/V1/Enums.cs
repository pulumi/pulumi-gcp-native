// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.CloudChannel.V1
{
    /// <summary>
    /// Required. State of the channel partner link.
    /// </summary>
    [EnumType]
    public readonly struct ChannelPartnerLinkLinkState : IEquatable<ChannelPartnerLinkLinkState>
    {
        private readonly string _value;

        private ChannelPartnerLinkLinkState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not used.
        /// </summary>
        public static ChannelPartnerLinkLinkState ChannelPartnerLinkStateUnspecified { get; } = new ChannelPartnerLinkLinkState("CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED");
        /// <summary>
        /// An invitation has been sent to the reseller to create a channel partner link.
        /// </summary>
        public static ChannelPartnerLinkLinkState Invited { get; } = new ChannelPartnerLinkLinkState("INVITED");
        /// <summary>
        /// Status when the reseller is active.
        /// </summary>
        public static ChannelPartnerLinkLinkState Active { get; } = new ChannelPartnerLinkLinkState("ACTIVE");
        /// <summary>
        /// Status when the reseller has been revoked by the distributor.
        /// </summary>
        public static ChannelPartnerLinkLinkState Revoked { get; } = new ChannelPartnerLinkLinkState("REVOKED");
        /// <summary>
        /// Status when the reseller is suspended by Google or distributor.
        /// </summary>
        public static ChannelPartnerLinkLinkState Suspended { get; } = new ChannelPartnerLinkLinkState("SUSPENDED");

        public static bool operator ==(ChannelPartnerLinkLinkState left, ChannelPartnerLinkLinkState right) => left.Equals(right);
        public static bool operator !=(ChannelPartnerLinkLinkState left, ChannelPartnerLinkLinkState right) => !left.Equals(right);

        public static explicit operator string(ChannelPartnerLinkLinkState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ChannelPartnerLinkLinkState other && Equals(other);
        public bool Equals(ChannelPartnerLinkLinkState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Period Type.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudChannelV1PeriodPeriodType : IEquatable<GoogleCloudChannelV1PeriodPeriodType>
    {
        private readonly string _value;

        private GoogleCloudChannelV1PeriodPeriodType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not used.
        /// </summary>
        public static GoogleCloudChannelV1PeriodPeriodType PeriodTypeUnspecified { get; } = new GoogleCloudChannelV1PeriodPeriodType("PERIOD_TYPE_UNSPECIFIED");
        /// <summary>
        /// Day.
        /// </summary>
        public static GoogleCloudChannelV1PeriodPeriodType Day { get; } = new GoogleCloudChannelV1PeriodPeriodType("DAY");
        /// <summary>
        /// Month.
        /// </summary>
        public static GoogleCloudChannelV1PeriodPeriodType Month { get; } = new GoogleCloudChannelV1PeriodPeriodType("MONTH");
        /// <summary>
        /// Year.
        /// </summary>
        public static GoogleCloudChannelV1PeriodPeriodType Year { get; } = new GoogleCloudChannelV1PeriodPeriodType("YEAR");

        public static bool operator ==(GoogleCloudChannelV1PeriodPeriodType left, GoogleCloudChannelV1PeriodPeriodType right) => left.Equals(right);
        public static bool operator !=(GoogleCloudChannelV1PeriodPeriodType left, GoogleCloudChannelV1PeriodPeriodType right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudChannelV1PeriodPeriodType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudChannelV1PeriodPeriodType other && Equals(other);
        public bool Equals(GoogleCloudChannelV1PeriodPeriodType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes how a reseller will be billed.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudChannelV1RenewalSettingsPaymentPlan : IEquatable<GoogleCloudChannelV1RenewalSettingsPaymentPlan>
    {
        private readonly string _value;

        private GoogleCloudChannelV1RenewalSettingsPaymentPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not used.
        /// </summary>
        public static GoogleCloudChannelV1RenewalSettingsPaymentPlan PaymentPlanUnspecified { get; } = new GoogleCloudChannelV1RenewalSettingsPaymentPlan("PAYMENT_PLAN_UNSPECIFIED");
        /// <summary>
        /// Commitment.
        /// </summary>
        public static GoogleCloudChannelV1RenewalSettingsPaymentPlan Commitment { get; } = new GoogleCloudChannelV1RenewalSettingsPaymentPlan("COMMITMENT");
        /// <summary>
        /// No commitment.
        /// </summary>
        public static GoogleCloudChannelV1RenewalSettingsPaymentPlan Flexible { get; } = new GoogleCloudChannelV1RenewalSettingsPaymentPlan("FLEXIBLE");
        /// <summary>
        /// Free.
        /// </summary>
        public static GoogleCloudChannelV1RenewalSettingsPaymentPlan Free { get; } = new GoogleCloudChannelV1RenewalSettingsPaymentPlan("FREE");
        /// <summary>
        /// Trial.
        /// </summary>
        public static GoogleCloudChannelV1RenewalSettingsPaymentPlan Trial { get; } = new GoogleCloudChannelV1RenewalSettingsPaymentPlan("TRIAL");
        /// <summary>
        /// Price and ordering not available through API.
        /// </summary>
        public static GoogleCloudChannelV1RenewalSettingsPaymentPlan Offline { get; } = new GoogleCloudChannelV1RenewalSettingsPaymentPlan("OFFLINE");

        public static bool operator ==(GoogleCloudChannelV1RenewalSettingsPaymentPlan left, GoogleCloudChannelV1RenewalSettingsPaymentPlan right) => left.Equals(right);
        public static bool operator !=(GoogleCloudChannelV1RenewalSettingsPaymentPlan left, GoogleCloudChannelV1RenewalSettingsPaymentPlan right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudChannelV1RenewalSettingsPaymentPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudChannelV1RenewalSettingsPaymentPlan other && Equals(other);
        public bool Equals(GoogleCloudChannelV1RenewalSettingsPaymentPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Required. The RebillingBasis to use for this bill. Specifies the relative cost based on repricing costs you will apply.
    /// </summary>
    [EnumType]
    public readonly struct GoogleCloudChannelV1RepricingConfigRebillingBasis : IEquatable<GoogleCloudChannelV1RepricingConfigRebillingBasis>
    {
        private readonly string _value;

        private GoogleCloudChannelV1RepricingConfigRebillingBasis(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not used.
        /// </summary>
        public static GoogleCloudChannelV1RepricingConfigRebillingBasis RebillingBasisUnspecified { get; } = new GoogleCloudChannelV1RepricingConfigRebillingBasis("REBILLING_BASIS_UNSPECIFIED");
        /// <summary>
        /// Use the list cost, also known as the MSRP.
        /// </summary>
        public static GoogleCloudChannelV1RepricingConfigRebillingBasis CostAtList { get; } = new GoogleCloudChannelV1RepricingConfigRebillingBasis("COST_AT_LIST");
        /// <summary>
        /// Pass through all discounts except the Reseller Program Discount. If this is the default cost base and no adjustments are specified, the output cost will be exactly what the customer would see if they viewed the bill in the Google Cloud Console.
        /// </summary>
        public static GoogleCloudChannelV1RepricingConfigRebillingBasis DirectCustomerCost { get; } = new GoogleCloudChannelV1RepricingConfigRebillingBasis("DIRECT_CUSTOMER_COST");

        public static bool operator ==(GoogleCloudChannelV1RepricingConfigRebillingBasis left, GoogleCloudChannelV1RepricingConfigRebillingBasis right) => left.Equals(right);
        public static bool operator !=(GoogleCloudChannelV1RepricingConfigRebillingBasis left, GoogleCloudChannelV1RepricingConfigRebillingBasis right) => !left.Equals(right);

        public static explicit operator string(GoogleCloudChannelV1RepricingConfigRebillingBasis value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleCloudChannelV1RepricingConfigRebillingBasis other && Equals(other);
        public bool Equals(GoogleCloudChannelV1RepricingConfigRebillingBasis other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
