// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.FirebaseRules.V1
{
    public static class GetRelease
    {
        /// <summary>
        /// Get a `Release` by name.
        /// </summary>
        public static Task<GetReleaseResult> InvokeAsync(GetReleaseArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetReleaseResult>("google-native:firebaserules/v1:getRelease", args ?? new GetReleaseArgs(), options.WithVersion());
    }


    public sealed class GetReleaseArgs : Pulumi.InvokeArgs
    {
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("releaseId", required: true)]
        public string ReleaseId { get; set; } = null!;

        public GetReleaseArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetReleaseResult
    {
        /// <summary>
        /// Time the release was created. Output only.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Resource name for the `Release`. `Release` names may be structured `app1/prod/v2` or flat `app1_prod_v2` which affords developers a great deal of flexibility in mapping the name to the style that best fits their existing development practices. For example, a name could refer to an environment, an app, a version, or some combination of three. In the table below, for the project name `projects/foo`, the following relative release paths show how flat and structured names might be chosen to match a desired development / deployment strategy. Use Case | Flat Name | Structured Name -------------|---------------------|---------------- Environments | releases/qa | releases/qa Apps | releases/app1_qa | releases/app1/qa Versions | releases/app1_v2_qa | releases/app1/v2/qa The delimiter between the release name path elements can be almost anything and it should work equally well with the release name list filter, but in many ways the structured paths provide a clearer picture of the relationship between `Release` instances. Format: `projects/{project_id}/releases/{release_id}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist the `Release` to be created.
        /// </summary>
        public readonly string RulesetName;
        /// <summary>
        /// Time the release was updated. Output only.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetReleaseResult(
            string createTime,

            string name,

            string rulesetName,

            string updateTime)
        {
            CreateTime = createTime;
            Name = name;
            RulesetName = rulesetName;
            UpdateTime = updateTime;
        }
    }
}
