// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.FirebaseRules.V1
{
    public static class GetRuleset
    {
        /// <summary>
        /// Get a `Ruleset` by name including the full `Source` contents.
        /// </summary>
        public static Task<GetRulesetResult> InvokeAsync(GetRulesetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRulesetResult>("google-native:firebaserules/v1:getRuleset", args ?? new GetRulesetArgs(), options.WithVersion());
    }


    public sealed class GetRulesetArgs : Pulumi.InvokeArgs
    {
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("rulesetId", required: true)]
        public string RulesetId { get; set; } = null!;

        public GetRulesetArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRulesetResult
    {
        /// <summary>
        /// Time the `Ruleset` was created. Output only.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The metadata for this ruleset. Output only.
        /// </summary>
        public readonly Outputs.MetadataResponse Metadata;
        /// <summary>
        /// Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}` Output only.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// `Source` for the `Ruleset`.
        /// </summary>
        public readonly Outputs.SourceResponse Source;

        [OutputConstructor]
        private GetRulesetResult(
            string createTime,

            Outputs.MetadataResponse metadata,

            string name,

            Outputs.SourceResponse source)
        {
            CreateTime = createTime;
            Metadata = metadata;
            Name = name;
            Source = source;
        }
    }
}
