// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigLake.V1
{
    public static class GetDatabase
    {
        /// <summary>
        /// Gets the database specified by the resource name.
        /// </summary>
        public static Task<GetDatabaseResult> InvokeAsync(GetDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("google-native:biglake/v1:getDatabase", args ?? new GetDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the database specified by the resource name.
        /// </summary>
        public static Output<GetDatabaseResult> Invoke(GetDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseResult>("google-native:biglake/v1:getDatabase", args ?? new GetDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseArgs : global::Pulumi.InvokeArgs
    {
        [Input("catalogId", required: true)]
        public string CatalogId { get; set; } = null!;

        [Input("databaseId", required: true)]
        public string DatabaseId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetDatabaseArgs()
        {
        }
        public static new GetDatabaseArgs Empty => new GetDatabaseArgs();
    }

    public sealed class GetDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("catalogId", required: true)]
        public Input<string> CatalogId { get; set; } = null!;

        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetDatabaseInvokeArgs()
        {
        }
        public static new GetDatabaseInvokeArgs Empty => new GetDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseResult
    {
        /// <summary>
        /// The creation time of the database.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The deletion time of the database. Only set after the database is deleted.
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// The time when this database is considered expired. Only set after the database is deleted.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// Options of a Hive database.
        /// </summary>
        public readonly Outputs.HiveDatabaseOptionsResponse HiveOptions;
        /// <summary>
        /// The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The database type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The last modification time of the database.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetDatabaseResult(
            string createTime,

            string deleteTime,

            string expireTime,

            Outputs.HiveDatabaseOptionsResponse hiveOptions,

            string name,

            string type,

            string updateTime)
        {
            CreateTime = createTime;
            DeleteTime = deleteTime;
            ExpireTime = expireTime;
            HiveOptions = hiveOptions;
            Name = name;
            Type = type;
            UpdateTime = updateTime;
        }
    }
}
