// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BigLake.V1
{
    public static class GetTable
    {
        /// <summary>
        /// Gets the table specified by the resource name.
        /// </summary>
        public static Task<GetTableResult> InvokeAsync(GetTableArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTableResult>("google-native:biglake/v1:getTable", args ?? new GetTableArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the table specified by the resource name.
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTableResult>("google-native:biglake/v1:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTableArgs : global::Pulumi.InvokeArgs
    {
        [Input("catalogId", required: true)]
        public string CatalogId { get; set; } = null!;

        [Input("databaseId", required: true)]
        public string DatabaseId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("tableId", required: true)]
        public string TableId { get; set; } = null!;

        public GetTableArgs()
        {
        }
        public static new GetTableArgs Empty => new GetTableArgs();
    }

    public sealed class GetTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("catalogId", required: true)]
        public Input<string> CatalogId { get; set; } = null!;

        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("tableId", required: true)]
        public Input<string> TableId { get; set; } = null!;

        public GetTableInvokeArgs()
        {
        }
        public static new GetTableInvokeArgs Empty => new GetTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetTableResult
    {
        /// <summary>
        /// The creation time of the table.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The deletion time of the table. Only set after the table is deleted.
        /// </summary>
        public readonly string DeleteTime;
        /// <summary>
        /// The checksum of a table object computed by the server based on the value of other fields. It may be sent on update requests to ensure the client has an up-to-date value before proceeding. It is only checked for update table operations.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The time when this table is considered expired. Only set after the table is deleted.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// Options of a Hive table.
        /// </summary>
        public readonly Outputs.HiveTableOptionsResponse HiveOptions;
        /// <summary>
        /// The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The table type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The last modification time of the table.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetTableResult(
            string createTime,

            string deleteTime,

            string etag,

            string expireTime,

            Outputs.HiveTableOptionsResponse hiveOptions,

            string name,

            string type,

            string updateTime)
        {
            CreateTime = createTime;
            DeleteTime = deleteTime;
            Etag = etag;
            ExpireTime = expireTime;
            HiveOptions = hiveOptions;
            Name = name;
            Type = type;
            UpdateTime = updateTime;
        }
    }
}
