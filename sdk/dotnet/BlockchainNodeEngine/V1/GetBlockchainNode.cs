// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BlockchainNodeEngine.V1
{
    public static class GetBlockchainNode
    {
        /// <summary>
        /// Gets details of a single blockchain node.
        /// </summary>
        public static Task<GetBlockchainNodeResult> InvokeAsync(GetBlockchainNodeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBlockchainNodeResult>("google-native:blockchainnodeengine/v1:getBlockchainNode", args ?? new GetBlockchainNodeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single blockchain node.
        /// </summary>
        public static Output<GetBlockchainNodeResult> Invoke(GetBlockchainNodeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBlockchainNodeResult>("google-native:blockchainnodeengine/v1:getBlockchainNode", args ?? new GetBlockchainNodeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBlockchainNodeArgs : global::Pulumi.InvokeArgs
    {
        [Input("blockchainNodeId", required: true)]
        public string BlockchainNodeId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetBlockchainNodeArgs()
        {
        }
        public static new GetBlockchainNodeArgs Empty => new GetBlockchainNodeArgs();
    }

    public sealed class GetBlockchainNodeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("blockchainNodeId", required: true)]
        public Input<string> BlockchainNodeId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetBlockchainNodeInvokeArgs()
        {
        }
        public static new GetBlockchainNodeInvokeArgs Empty => new GetBlockchainNodeInvokeArgs();
    }


    [OutputType]
    public sealed class GetBlockchainNodeResult
    {
        /// <summary>
        /// Immutable. The blockchain type of the node.
        /// </summary>
        public readonly string BlockchainType;
        /// <summary>
        /// The connection information used to interact with a blockchain node.
        /// </summary>
        public readonly Outputs.ConnectionInfoResponse ConnectionInfo;
        /// <summary>
        /// The timestamp at which the blockchain node was first created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Ethereum-specific blockchain node details.
        /// </summary>
        public readonly Outputs.EthereumDetailsResponse EthereumDetails;
        /// <summary>
        /// User-provided key-value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
        /// </summary>
        public readonly bool PrivateServiceConnectEnabled;
        /// <summary>
        /// A status representing the state of the node.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The timestamp at which the blockchain node was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetBlockchainNodeResult(
            string blockchainType,

            Outputs.ConnectionInfoResponse connectionInfo,

            string createTime,

            Outputs.EthereumDetailsResponse ethereumDetails,

            ImmutableDictionary<string, string> labels,

            string name,

            bool privateServiceConnectEnabled,

            string state,

            string updateTime)
        {
            BlockchainType = blockchainType;
            ConnectionInfo = connectionInfo;
            CreateTime = createTime;
            EthereumDetails = ethereumDetails;
            Labels = labels;
            Name = name;
            PrivateServiceConnectEnabled = privateServiceConnectEnabled;
            State = state;
            UpdateTime = updateTime;
        }
    }
}
