// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.BlockchainNodeEngine.V1
{
    /// <summary>
    /// Creates a new blockchain node in a given project and location.
    /// Auto-naming is currently not supported for this resource.
    /// </summary>
    [GoogleNativeResourceType("google-native:blockchainnodeengine/v1:BlockchainNode")]
    public partial class BlockchainNode : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Required. ID of the requesting object.
        /// </summary>
        [Output("blockchainNodeId")]
        public Output<string> BlockchainNodeId { get; private set; } = null!;

        /// <summary>
        /// Immutable. The blockchain type of the node.
        /// </summary>
        [Output("blockchainType")]
        public Output<string> BlockchainType { get; private set; } = null!;

        /// <summary>
        /// The connection information used to interact with a blockchain node.
        /// </summary>
        [Output("connectionInfo")]
        public Output<Outputs.ConnectionInfoResponse> ConnectionInfo { get; private set; } = null!;

        /// <summary>
        /// The timestamp at which the blockchain node was first created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Ethereum-specific blockchain node details.
        /// </summary>
        [Output("ethereumDetails")]
        public Output<Outputs.EthereumDetailsResponse> EthereumDetails { get; private set; } = null!;

        /// <summary>
        /// User-provided key-value pairs.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
        /// </summary>
        [Output("privateServiceConnectEnabled")]
        public Output<bool> PrivateServiceConnectEnabled { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// A status representing the state of the node.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The timestamp at which the blockchain node was last updated.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a BlockchainNode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BlockchainNode(string name, BlockchainNodeArgs args, CustomResourceOptions? options = null)
            : base("google-native:blockchainnodeengine/v1:BlockchainNode", name, args ?? new BlockchainNodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BlockchainNode(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:blockchainnodeengine/v1:BlockchainNode", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "blockchainNodeId",
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BlockchainNode resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BlockchainNode Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new BlockchainNode(name, id, options);
        }
    }

    public sealed class BlockchainNodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required. ID of the requesting object.
        /// </summary>
        [Input("blockchainNodeId", required: true)]
        public Input<string> BlockchainNodeId { get; set; } = null!;

        /// <summary>
        /// Immutable. The blockchain type of the node.
        /// </summary>
        [Input("blockchainType")]
        public Input<Pulumi.GoogleNative.BlockchainNodeEngine.V1.BlockchainNodeBlockchainType>? BlockchainType { get; set; }

        /// <summary>
        /// Ethereum-specific blockchain node details.
        /// </summary>
        [Input("ethereumDetails")]
        public Input<Inputs.EthereumDetailsArgs>? EthereumDetails { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// User-provided key-value pairs.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
        /// </summary>
        [Input("privateServiceConnectEnabled")]
        public Input<bool>? PrivateServiceConnectEnabled { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        public BlockchainNodeArgs()
        {
        }
        public static new BlockchainNodeArgs Empty => new BlockchainNodeArgs();
    }
}
