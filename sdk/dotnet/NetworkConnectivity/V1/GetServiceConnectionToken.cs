// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkConnectivity.V1
{
    public static class GetServiceConnectionToken
    {
        /// <summary>
        /// Gets details of a single ServiceConnectionToken.
        /// </summary>
        public static Task<GetServiceConnectionTokenResult> InvokeAsync(GetServiceConnectionTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceConnectionTokenResult>("google-native:networkconnectivity/v1:getServiceConnectionToken", args ?? new GetServiceConnectionTokenArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single ServiceConnectionToken.
        /// </summary>
        public static Output<GetServiceConnectionTokenResult> Invoke(GetServiceConnectionTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceConnectionTokenResult>("google-native:networkconnectivity/v1:getServiceConnectionToken", args ?? new GetServiceConnectionTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceConnectionTokenArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("serviceConnectionTokenId", required: true)]
        public string ServiceConnectionTokenId { get; set; } = null!;

        public GetServiceConnectionTokenArgs()
        {
        }
        public static new GetServiceConnectionTokenArgs Empty => new GetServiceConnectionTokenArgs();
    }

    public sealed class GetServiceConnectionTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("serviceConnectionTokenId", required: true)]
        public Input<string> ServiceConnectionTokenId { get; set; } = null!;

        public GetServiceConnectionTokenInvokeArgs()
        {
        }
        public static new GetServiceConnectionTokenInvokeArgs Empty => new GetServiceConnectionTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceConnectionTokenResult
    {
        /// <summary>
        /// Time when the ServiceConnectionToken was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// A description of this resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The time to which this token is valid.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// User-defined labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Immutable. The name of a ServiceConnectionToken. Format: projects/{project}/locations/{location}/ServiceConnectionTokens/{service_connection_token} See: https://google.aip.dev/122#fields-representing-resource-names
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource path of the network associated with this token. Example: projects/{projectNumOrId}/global/networks/{resourceId}.
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// The token generated by Automation.
        /// </summary>
        public readonly string Token;
        /// <summary>
        /// Time when the ServiceConnectionToken was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetServiceConnectionTokenResult(
            string createTime,

            string description,

            string expireTime,

            ImmutableDictionary<string, string> labels,

            string name,

            string network,

            string token,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            ExpireTime = expireTime;
            Labels = labels;
            Name = name;
            Network = network;
            Token = token;
            UpdateTime = updateTime;
        }
    }
}
