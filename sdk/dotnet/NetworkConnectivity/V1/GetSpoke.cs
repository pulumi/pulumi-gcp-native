// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkConnectivity.V1
{
    public static class GetSpoke
    {
        /// <summary>
        /// Gets details about a Network Connectivity Center spoke.
        /// </summary>
        public static Task<GetSpokeResult> InvokeAsync(GetSpokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSpokeResult>("google-native:networkconnectivity/v1:getSpoke", args ?? new GetSpokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details about a Network Connectivity Center spoke.
        /// </summary>
        public static Output<GetSpokeResult> Invoke(GetSpokeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSpokeResult>("google-native:networkconnectivity/v1:getSpoke", args ?? new GetSpokeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSpokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("spokeId", required: true)]
        public string SpokeId { get; set; } = null!;

        public GetSpokeArgs()
        {
        }
        public static new GetSpokeArgs Empty => new GetSpokeArgs();
    }

    public sealed class GetSpokeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("spokeId", required: true)]
        public Input<string> SpokeId { get; set; } = null!;

        public GetSpokeInvokeArgs()
        {
        }
        public static new GetSpokeInvokeArgs Empty => new GetSpokeInvokeArgs();
    }


    [OutputType]
    public sealed class GetSpokeResult
    {
        /// <summary>
        /// The time the spoke was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// An optional description of the spoke.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. The name of the group that this spoke is associated with.
        /// </summary>
        public readonly string Group;
        /// <summary>
        /// Immutable. The name of the hub that this spoke is attached to.
        /// </summary>
        public readonly string Hub;
        /// <summary>
        /// Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// VLAN attachments that are associated with the spoke.
        /// </summary>
        public readonly Outputs.LinkedInterconnectAttachmentsResponse LinkedInterconnectAttachments;
        /// <summary>
        /// Router appliance instances that are associated with the spoke.
        /// </summary>
        public readonly Outputs.LinkedRouterApplianceInstancesResponse LinkedRouterApplianceInstances;
        /// <summary>
        /// Optional. VPC network that is associated with the spoke.
        /// </summary>
        public readonly Outputs.LinkedVpcNetworkResponse LinkedVpcNetwork;
        /// <summary>
        /// VPN tunnels that are associated with the spoke.
        /// </summary>
        public readonly Outputs.LinkedVpnTunnelsResponse LinkedVpnTunnels;
        /// <summary>
        /// Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The reasons for current state of the spoke. Only present when the spoke is in the `INACTIVE` state.
        /// </summary>
        public readonly ImmutableArray<Outputs.StateReasonResponse> Reasons;
        /// <summary>
        /// The type of resource associated with the spoke.
        /// </summary>
        public readonly string SpokeType;
        /// <summary>
        /// The current lifecycle state of this spoke.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different `unique_id`.
        /// </summary>
        public readonly string UniqueId;
        /// <summary>
        /// The time the spoke was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetSpokeResult(
            string createTime,

            string description,

            string group,

            string hub,

            ImmutableDictionary<string, string> labels,

            Outputs.LinkedInterconnectAttachmentsResponse linkedInterconnectAttachments,

            Outputs.LinkedRouterApplianceInstancesResponse linkedRouterApplianceInstances,

            Outputs.LinkedVpcNetworkResponse linkedVpcNetwork,

            Outputs.LinkedVpnTunnelsResponse linkedVpnTunnels,

            string name,

            ImmutableArray<Outputs.StateReasonResponse> reasons,

            string spokeType,

            string state,

            string uniqueId,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            Group = group;
            Hub = hub;
            Labels = labels;
            LinkedInterconnectAttachments = linkedInterconnectAttachments;
            LinkedRouterApplianceInstances = linkedRouterApplianceInstances;
            LinkedVpcNetwork = linkedVpcNetwork;
            LinkedVpnTunnels = linkedVpnTunnels;
            Name = name;
            Reasons = reasons;
            SpokeType = spokeType;
            State = state;
            UniqueId = uniqueId;
            UpdateTime = updateTime;
        }
    }
}
