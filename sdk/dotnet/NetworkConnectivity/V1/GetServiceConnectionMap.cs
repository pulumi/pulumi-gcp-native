// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkConnectivity.V1
{
    public static class GetServiceConnectionMap
    {
        /// <summary>
        /// Gets details of a single ServiceConnectionMap.
        /// </summary>
        public static Task<GetServiceConnectionMapResult> InvokeAsync(GetServiceConnectionMapArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceConnectionMapResult>("google-native:networkconnectivity/v1:getServiceConnectionMap", args ?? new GetServiceConnectionMapArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single ServiceConnectionMap.
        /// </summary>
        public static Output<GetServiceConnectionMapResult> Invoke(GetServiceConnectionMapInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceConnectionMapResult>("google-native:networkconnectivity/v1:getServiceConnectionMap", args ?? new GetServiceConnectionMapInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceConnectionMapArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("serviceConnectionMapId", required: true)]
        public string ServiceConnectionMapId { get; set; } = null!;

        public GetServiceConnectionMapArgs()
        {
        }
        public static new GetServiceConnectionMapArgs Empty => new GetServiceConnectionMapArgs();
    }

    public sealed class GetServiceConnectionMapInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("serviceConnectionMapId", required: true)]
        public Input<string> ServiceConnectionMapId { get; set; } = null!;

        public GetServiceConnectionMapInvokeArgs()
        {
        }
        public static new GetServiceConnectionMapInvokeArgs Empty => new GetServiceConnectionMapInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceConnectionMapResult
    {
        /// <summary>
        /// The PSC configurations on consumer side.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConsumerPscConfigResponse> ConsumerPscConfigs;
        /// <summary>
        /// PSC connection details on consumer side.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConsumerPscConnectionResponse> ConsumerPscConnections;
        /// <summary>
        /// Time when the ServiceConnectionMap was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// A description of this resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The infrastructure used for connections between consumers/producers.
        /// </summary>
        public readonly string Infrastructure;
        /// <summary>
        /// User-defined labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Immutable. The name of a ServiceConnectionMap. Format: projects/{project}/locations/{location}/serviceConnectionMaps/{service_connection_map} See: https://google.aip.dev/122#fields-representing-resource-names
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The PSC configurations on producer side.
        /// </summary>
        public readonly ImmutableArray<Outputs.ProducerPscConfigResponse> ProducerPscConfigs;
        /// <summary>
        /// The service class identifier this ServiceConnectionMap is for. The user of ServiceConnectionMap create API needs to have networkconnecitivty.serviceclasses.use iam permission for the service class.
        /// </summary>
        public readonly string ServiceClass;
        /// <summary>
        /// The service class uri this ServiceConnectionMap is for.
        /// </summary>
        public readonly string ServiceClassUri;
        /// <summary>
        /// The token provided by the consumer. This token authenticates that the consumer can create a connecton within the specified project and network.
        /// </summary>
        public readonly string Token;
        /// <summary>
        /// Time when the ServiceConnectionMap was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetServiceConnectionMapResult(
            ImmutableArray<Outputs.ConsumerPscConfigResponse> consumerPscConfigs,

            ImmutableArray<Outputs.ConsumerPscConnectionResponse> consumerPscConnections,

            string createTime,

            string description,

            string etag,

            string infrastructure,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<Outputs.ProducerPscConfigResponse> producerPscConfigs,

            string serviceClass,

            string serviceClassUri,

            string token,

            string updateTime)
        {
            ConsumerPscConfigs = consumerPscConfigs;
            ConsumerPscConnections = consumerPscConnections;
            CreateTime = createTime;
            Description = description;
            Etag = etag;
            Infrastructure = infrastructure;
            Labels = labels;
            Name = name;
            ProducerPscConfigs = producerPscConfigs;
            ServiceClass = serviceClass;
            ServiceClassUri = serviceClassUri;
            Token = token;
            UpdateTime = updateTime;
        }
    }
}
