// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkConnectivity.V1Alpha1
{
    public static class GetSpoke
    {
        /// <summary>
        /// Gets details of a single Spoke.
        /// </summary>
        public static Task<GetSpokeResult> InvokeAsync(GetSpokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSpokeResult>("google-native:networkconnectivity/v1alpha1:getSpoke", args ?? new GetSpokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Spoke.
        /// </summary>
        public static Output<GetSpokeResult> Invoke(GetSpokeInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSpokeResult>("google-native:networkconnectivity/v1alpha1:getSpoke", args ?? new GetSpokeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSpokeArgs : Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("spokeId", required: true)]
        public string SpokeId { get; set; } = null!;

        public GetSpokeArgs()
        {
        }
    }

    public sealed class GetSpokeInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("spokeId", required: true)]
        public Input<string> SpokeId { get; set; } = null!;

        public GetSpokeInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSpokeResult
    {
        /// <summary>
        /// The time when the Spoke was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Short description of the spoke resource
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The resource URL of the hub resource that the spoke is attached to
        /// </summary>
        public readonly string Hub;
        /// <summary>
        /// User-defined labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The URIs of linked interconnect attachment resources
        /// </summary>
        public readonly ImmutableArray<string> LinkedInterconnectAttachments;
        /// <summary>
        /// The URIs of linked Router appliance resources
        /// </summary>
        public readonly ImmutableArray<Outputs.RouterApplianceInstanceResponse> LinkedRouterApplianceInstances;
        /// <summary>
        /// The URIs of linked VPN tunnel resources
        /// </summary>
        public readonly ImmutableArray<string> LinkedVpnTunnels;
        /// <summary>
        /// Immutable. The name of a Spoke resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The current lifecycle state of this Hub.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Google-generated UUID for this resource. This is unique across all Spoke resources. If a Spoke resource is deleted and another with the same name is created, it gets a different unique_id.
        /// </summary>
        public readonly string UniqueId;
        /// <summary>
        /// The time when the Spoke was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetSpokeResult(
            string createTime,

            string description,

            string hub,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<string> linkedInterconnectAttachments,

            ImmutableArray<Outputs.RouterApplianceInstanceResponse> linkedRouterApplianceInstances,

            ImmutableArray<string> linkedVpnTunnels,

            string name,

            string state,

            string uniqueId,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            Hub = hub;
            Labels = labels;
            LinkedInterconnectAttachments = linkedInterconnectAttachments;
            LinkedRouterApplianceInstances = linkedRouterApplianceInstances;
            LinkedVpnTunnels = linkedVpnTunnels;
            Name = name;
            State = state;
            UniqueId = uniqueId;
            UpdateTime = updateTime;
        }
    }
}
