// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.NetworkConnectivity.V1Alpha1
{
    public static class GetHub
    {
        /// <summary>
        /// Gets details of a single Hub.
        /// </summary>
        public static Task<GetHubResult> InvokeAsync(GetHubArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetHubResult>("google-native:networkconnectivity/v1alpha1:getHub", args ?? new GetHubArgs(), options.WithVersion());
    }


    public sealed class GetHubArgs : Pulumi.InvokeArgs
    {
        [Input("hubId", required: true)]
        public string HubId { get; set; } = null!;

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetHubArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetHubResult
    {
        /// <summary>
        /// Time when the Hub was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Short description of the hub resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User-defined labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Immutable. The name of a Hub resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of the URIs of all attached spokes
        /// </summary>
        public readonly ImmutableArray<string> Spokes;
        /// <summary>
        /// The current lifecycle state of this Hub.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Google-generated UUID for this resource. This is unique across all Hub resources. If a Hub resource is deleted and another with the same name is created, it gets a different unique_id.
        /// </summary>
        public readonly string UniqueId;
        /// <summary>
        /// Time when the Hub was updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetHubResult(
            string createTime,

            string description,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<string> spokes,

            string state,

            string uniqueId,

            string updateTime)
        {
            CreateTime = createTime;
            Description = description;
            Labels = labels;
            Name = name;
            Spokes = spokes;
            State = state;
            UniqueId = uniqueId;
            UpdateTime = updateTime;
        }
    }
}
