// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.EssentialContacts.V1
{
    public static class GetFolderContact
    {
        /// <summary>
        /// Gets a single contact.
        /// </summary>
        public static Task<GetFolderContactResult> InvokeAsync(GetFolderContactArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFolderContactResult>("google-native:essentialcontacts/v1:getFolderContact", args ?? new GetFolderContactArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a single contact.
        /// </summary>
        public static Output<GetFolderContactResult> Invoke(GetFolderContactInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFolderContactResult>("google-native:essentialcontacts/v1:getFolderContact", args ?? new GetFolderContactInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFolderContactArgs : global::Pulumi.InvokeArgs
    {
        [Input("contactId", required: true)]
        public string ContactId { get; set; } = null!;

        [Input("folderId", required: true)]
        public string FolderId { get; set; } = null!;

        public GetFolderContactArgs()
        {
        }
        public static new GetFolderContactArgs Empty => new GetFolderContactArgs();
    }

    public sealed class GetFolderContactInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("contactId", required: true)]
        public Input<string> ContactId { get; set; } = null!;

        [Input("folderId", required: true)]
        public Input<string> FolderId { get; set; } = null!;

        public GetFolderContactInvokeArgs()
        {
        }
        public static new GetFolderContactInvokeArgs Empty => new GetFolderContactInvokeArgs();
    }


    [OutputType]
    public sealed class GetFolderContactResult
    {
        /// <summary>
        /// The email address to send notifications to. This does not need to be a Google account.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// The preferred language for notifications, as a ISO 639-1 language code. See [Supported languages](https://cloud.google.com/resource-manager/docs/managing-notification-contacts#supported-languages) for a list of supported languages.
        /// </summary>
        public readonly string LanguageTag;
        /// <summary>
        /// The identifier for the contact. Format: {resource_type}/{resource_id}/contacts/{contact_id}
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The categories of notifications that the contact will receive communications for.
        /// </summary>
        public readonly ImmutableArray<string> NotificationCategorySubscriptions;
        /// <summary>
        /// The last time the validation_state was updated, either manually or automatically. A contact is considered stale if its validation state was updated more than 1 year ago.
        /// </summary>
        public readonly string ValidateTime;
        /// <summary>
        /// The validity of the contact. A contact is considered valid if it is the correct recipient for notifications for a particular resource.
        /// </summary>
        public readonly string ValidationState;

        [OutputConstructor]
        private GetFolderContactResult(
            string email,

            string languageTag,

            string name,

            ImmutableArray<string> notificationCategorySubscriptions,

            string validateTime,

            string validationState)
        {
            Email = email;
            LanguageTag = languageTag;
            Name = name;
            NotificationCategorySubscriptions = notificationCategorySubscriptions;
            ValidateTime = validateTime;
            ValidationState = validationState;
        }
    }
}
