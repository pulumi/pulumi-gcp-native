// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.EssentialContacts.V1
{
    [EnumType]
    public readonly struct ContactNotificationCategorySubscriptionsItem : IEquatable<ContactNotificationCategorySubscriptionsItem>
    {
        private readonly string _value;

        private ContactNotificationCategorySubscriptionsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Notification category is unrecognized or unspecified.
        /// </summary>
        public static ContactNotificationCategorySubscriptionsItem NotificationCategoryUnspecified { get; } = new ContactNotificationCategorySubscriptionsItem("NOTIFICATION_CATEGORY_UNSPECIFIED");
        /// <summary>
        /// All notifications related to the resource, including notifications pertaining to categories added in the future.
        /// </summary>
        public static ContactNotificationCategorySubscriptionsItem All { get; } = new ContactNotificationCategorySubscriptionsItem("ALL");
        /// <summary>
        /// Notifications related to imminent account suspension.
        /// </summary>
        public static ContactNotificationCategorySubscriptionsItem Suspension { get; } = new ContactNotificationCategorySubscriptionsItem("SUSPENSION");
        /// <summary>
        /// Notifications related to security/privacy incidents, notifications, and vulnerabilities.
        /// </summary>
        public static ContactNotificationCategorySubscriptionsItem Security { get; } = new ContactNotificationCategorySubscriptionsItem("SECURITY");
        /// <summary>
        /// Notifications related to technical events and issues such as outages, errors, or bugs.
        /// </summary>
        public static ContactNotificationCategorySubscriptionsItem Technical { get; } = new ContactNotificationCategorySubscriptionsItem("TECHNICAL");
        /// <summary>
        /// Notifications related to billing and payments notifications, price updates, errors, or credits.
        /// </summary>
        public static ContactNotificationCategorySubscriptionsItem Billing { get; } = new ContactNotificationCategorySubscriptionsItem("BILLING");
        /// <summary>
        /// Notifications related to enforcement actions, regulatory compliance, or government notices.
        /// </summary>
        public static ContactNotificationCategorySubscriptionsItem Legal { get; } = new ContactNotificationCategorySubscriptionsItem("LEGAL");
        /// <summary>
        /// Notifications related to new versions, product terms updates, or deprecations.
        /// </summary>
        public static ContactNotificationCategorySubscriptionsItem ProductUpdates { get; } = new ContactNotificationCategorySubscriptionsItem("PRODUCT_UPDATES");
        /// <summary>
        /// Child category of TECHNICAL. If assigned, technical incident notifications will go to these contacts instead of TECHNICAL.
        /// </summary>
        public static ContactNotificationCategorySubscriptionsItem TechnicalIncidents { get; } = new ContactNotificationCategorySubscriptionsItem("TECHNICAL_INCIDENTS");

        public static bool operator ==(ContactNotificationCategorySubscriptionsItem left, ContactNotificationCategorySubscriptionsItem right) => left.Equals(right);
        public static bool operator !=(ContactNotificationCategorySubscriptionsItem left, ContactNotificationCategorySubscriptionsItem right) => !left.Equals(right);

        public static explicit operator string(ContactNotificationCategorySubscriptionsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContactNotificationCategorySubscriptionsItem other && Equals(other);
        public bool Equals(ContactNotificationCategorySubscriptionsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The validity of the contact. A contact is considered valid if it is the correct recipient for notifications for a particular resource.
    /// </summary>
    [EnumType]
    public readonly struct ContactValidationState : IEquatable<ContactValidationState>
    {
        private readonly string _value;

        private ContactValidationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The validation state is unknown or unspecified.
        /// </summary>
        public static ContactValidationState ValidationStateUnspecified { get; } = new ContactValidationState("VALIDATION_STATE_UNSPECIFIED");
        /// <summary>
        /// The contact is marked as valid. This is usually done manually by the contact admin. All new contacts begin in the valid state.
        /// </summary>
        public static ContactValidationState Valid { get; } = new ContactValidationState("VALID");
        /// <summary>
        /// The contact is considered invalid. This may become the state if the contact's email is found to be unreachable.
        /// </summary>
        public static ContactValidationState Invalid { get; } = new ContactValidationState("INVALID");

        public static bool operator ==(ContactValidationState left, ContactValidationState right) => left.Equals(right);
        public static bool operator !=(ContactValidationState left, ContactValidationState right) => !left.Equals(right);

        public static explicit operator string(ContactValidationState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContactValidationState other && Equals(other);
        public bool Equals(ContactValidationState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FolderContactNotificationCategorySubscriptionsItem : IEquatable<FolderContactNotificationCategorySubscriptionsItem>
    {
        private readonly string _value;

        private FolderContactNotificationCategorySubscriptionsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Notification category is unrecognized or unspecified.
        /// </summary>
        public static FolderContactNotificationCategorySubscriptionsItem NotificationCategoryUnspecified { get; } = new FolderContactNotificationCategorySubscriptionsItem("NOTIFICATION_CATEGORY_UNSPECIFIED");
        /// <summary>
        /// All notifications related to the resource, including notifications pertaining to categories added in the future.
        /// </summary>
        public static FolderContactNotificationCategorySubscriptionsItem All { get; } = new FolderContactNotificationCategorySubscriptionsItem("ALL");
        /// <summary>
        /// Notifications related to imminent account suspension.
        /// </summary>
        public static FolderContactNotificationCategorySubscriptionsItem Suspension { get; } = new FolderContactNotificationCategorySubscriptionsItem("SUSPENSION");
        /// <summary>
        /// Notifications related to security/privacy incidents, notifications, and vulnerabilities.
        /// </summary>
        public static FolderContactNotificationCategorySubscriptionsItem Security { get; } = new FolderContactNotificationCategorySubscriptionsItem("SECURITY");
        /// <summary>
        /// Notifications related to technical events and issues such as outages, errors, or bugs.
        /// </summary>
        public static FolderContactNotificationCategorySubscriptionsItem Technical { get; } = new FolderContactNotificationCategorySubscriptionsItem("TECHNICAL");
        /// <summary>
        /// Notifications related to billing and payments notifications, price updates, errors, or credits.
        /// </summary>
        public static FolderContactNotificationCategorySubscriptionsItem Billing { get; } = new FolderContactNotificationCategorySubscriptionsItem("BILLING");
        /// <summary>
        /// Notifications related to enforcement actions, regulatory compliance, or government notices.
        /// </summary>
        public static FolderContactNotificationCategorySubscriptionsItem Legal { get; } = new FolderContactNotificationCategorySubscriptionsItem("LEGAL");
        /// <summary>
        /// Notifications related to new versions, product terms updates, or deprecations.
        /// </summary>
        public static FolderContactNotificationCategorySubscriptionsItem ProductUpdates { get; } = new FolderContactNotificationCategorySubscriptionsItem("PRODUCT_UPDATES");
        /// <summary>
        /// Child category of TECHNICAL. If assigned, technical incident notifications will go to these contacts instead of TECHNICAL.
        /// </summary>
        public static FolderContactNotificationCategorySubscriptionsItem TechnicalIncidents { get; } = new FolderContactNotificationCategorySubscriptionsItem("TECHNICAL_INCIDENTS");

        public static bool operator ==(FolderContactNotificationCategorySubscriptionsItem left, FolderContactNotificationCategorySubscriptionsItem right) => left.Equals(right);
        public static bool operator !=(FolderContactNotificationCategorySubscriptionsItem left, FolderContactNotificationCategorySubscriptionsItem right) => !left.Equals(right);

        public static explicit operator string(FolderContactNotificationCategorySubscriptionsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FolderContactNotificationCategorySubscriptionsItem other && Equals(other);
        public bool Equals(FolderContactNotificationCategorySubscriptionsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The validity of the contact. A contact is considered valid if it is the correct recipient for notifications for a particular resource.
    /// </summary>
    [EnumType]
    public readonly struct FolderContactValidationState : IEquatable<FolderContactValidationState>
    {
        private readonly string _value;

        private FolderContactValidationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The validation state is unknown or unspecified.
        /// </summary>
        public static FolderContactValidationState ValidationStateUnspecified { get; } = new FolderContactValidationState("VALIDATION_STATE_UNSPECIFIED");
        /// <summary>
        /// The contact is marked as valid. This is usually done manually by the contact admin. All new contacts begin in the valid state.
        /// </summary>
        public static FolderContactValidationState Valid { get; } = new FolderContactValidationState("VALID");
        /// <summary>
        /// The contact is considered invalid. This may become the state if the contact's email is found to be unreachable.
        /// </summary>
        public static FolderContactValidationState Invalid { get; } = new FolderContactValidationState("INVALID");

        public static bool operator ==(FolderContactValidationState left, FolderContactValidationState right) => left.Equals(right);
        public static bool operator !=(FolderContactValidationState left, FolderContactValidationState right) => !left.Equals(right);

        public static explicit operator string(FolderContactValidationState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FolderContactValidationState other && Equals(other);
        public bool Equals(FolderContactValidationState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OrganizationContactNotificationCategorySubscriptionsItem : IEquatable<OrganizationContactNotificationCategorySubscriptionsItem>
    {
        private readonly string _value;

        private OrganizationContactNotificationCategorySubscriptionsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Notification category is unrecognized or unspecified.
        /// </summary>
        public static OrganizationContactNotificationCategorySubscriptionsItem NotificationCategoryUnspecified { get; } = new OrganizationContactNotificationCategorySubscriptionsItem("NOTIFICATION_CATEGORY_UNSPECIFIED");
        /// <summary>
        /// All notifications related to the resource, including notifications pertaining to categories added in the future.
        /// </summary>
        public static OrganizationContactNotificationCategorySubscriptionsItem All { get; } = new OrganizationContactNotificationCategorySubscriptionsItem("ALL");
        /// <summary>
        /// Notifications related to imminent account suspension.
        /// </summary>
        public static OrganizationContactNotificationCategorySubscriptionsItem Suspension { get; } = new OrganizationContactNotificationCategorySubscriptionsItem("SUSPENSION");
        /// <summary>
        /// Notifications related to security/privacy incidents, notifications, and vulnerabilities.
        /// </summary>
        public static OrganizationContactNotificationCategorySubscriptionsItem Security { get; } = new OrganizationContactNotificationCategorySubscriptionsItem("SECURITY");
        /// <summary>
        /// Notifications related to technical events and issues such as outages, errors, or bugs.
        /// </summary>
        public static OrganizationContactNotificationCategorySubscriptionsItem Technical { get; } = new OrganizationContactNotificationCategorySubscriptionsItem("TECHNICAL");
        /// <summary>
        /// Notifications related to billing and payments notifications, price updates, errors, or credits.
        /// </summary>
        public static OrganizationContactNotificationCategorySubscriptionsItem Billing { get; } = new OrganizationContactNotificationCategorySubscriptionsItem("BILLING");
        /// <summary>
        /// Notifications related to enforcement actions, regulatory compliance, or government notices.
        /// </summary>
        public static OrganizationContactNotificationCategorySubscriptionsItem Legal { get; } = new OrganizationContactNotificationCategorySubscriptionsItem("LEGAL");
        /// <summary>
        /// Notifications related to new versions, product terms updates, or deprecations.
        /// </summary>
        public static OrganizationContactNotificationCategorySubscriptionsItem ProductUpdates { get; } = new OrganizationContactNotificationCategorySubscriptionsItem("PRODUCT_UPDATES");
        /// <summary>
        /// Child category of TECHNICAL. If assigned, technical incident notifications will go to these contacts instead of TECHNICAL.
        /// </summary>
        public static OrganizationContactNotificationCategorySubscriptionsItem TechnicalIncidents { get; } = new OrganizationContactNotificationCategorySubscriptionsItem("TECHNICAL_INCIDENTS");

        public static bool operator ==(OrganizationContactNotificationCategorySubscriptionsItem left, OrganizationContactNotificationCategorySubscriptionsItem right) => left.Equals(right);
        public static bool operator !=(OrganizationContactNotificationCategorySubscriptionsItem left, OrganizationContactNotificationCategorySubscriptionsItem right) => !left.Equals(right);

        public static explicit operator string(OrganizationContactNotificationCategorySubscriptionsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrganizationContactNotificationCategorySubscriptionsItem other && Equals(other);
        public bool Equals(OrganizationContactNotificationCategorySubscriptionsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The validity of the contact. A contact is considered valid if it is the correct recipient for notifications for a particular resource.
    /// </summary>
    [EnumType]
    public readonly struct OrganizationContactValidationState : IEquatable<OrganizationContactValidationState>
    {
        private readonly string _value;

        private OrganizationContactValidationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The validation state is unknown or unspecified.
        /// </summary>
        public static OrganizationContactValidationState ValidationStateUnspecified { get; } = new OrganizationContactValidationState("VALIDATION_STATE_UNSPECIFIED");
        /// <summary>
        /// The contact is marked as valid. This is usually done manually by the contact admin. All new contacts begin in the valid state.
        /// </summary>
        public static OrganizationContactValidationState Valid { get; } = new OrganizationContactValidationState("VALID");
        /// <summary>
        /// The contact is considered invalid. This may become the state if the contact's email is found to be unreachable.
        /// </summary>
        public static OrganizationContactValidationState Invalid { get; } = new OrganizationContactValidationState("INVALID");

        public static bool operator ==(OrganizationContactValidationState left, OrganizationContactValidationState right) => left.Equals(right);
        public static bool operator !=(OrganizationContactValidationState left, OrganizationContactValidationState right) => !left.Equals(right);

        public static explicit operator string(OrganizationContactValidationState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrganizationContactValidationState other && Equals(other);
        public bool Equals(OrganizationContactValidationState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
