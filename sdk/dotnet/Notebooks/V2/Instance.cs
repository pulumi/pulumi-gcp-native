// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Notebooks.V2
{
    /// <summary>
    /// Creates a new Instance in a given project and location.
    /// Auto-naming is currently not supported for this resource.
    /// </summary>
    [GoogleNativeResourceType("google-native:notebooks/v2:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Instance creation time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Email address of entity that sent original CreateInstance request.
        /// </summary>
        [Output("creator")]
        public Output<string> Creator { get; private set; } = null!;

        /// <summary>
        /// Optional. If true, the notebook instance will not register with the proxy.
        /// </summary>
        [Output("disableProxyAccess")]
        public Output<bool> DisableProxyAccess { get; private set; } = null!;

        /// <summary>
        /// Optional. Compute Engine setup for the notebook. Uses notebook-defined fields.
        /// </summary>
        [Output("gceSetup")]
        public Output<Outputs.GceSetupResponse> GceSetup { get; private set; } = null!;

        /// <summary>
        /// Additional information about instance health. Example: healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status": "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }
        /// </summary>
        [Output("healthInfo")]
        public Output<ImmutableDictionary<string, string>> HealthInfo { get; private set; } = null!;

        /// <summary>
        /// Instance health_state.
        /// </summary>
        [Output("healthState")]
        public Output<string> HealthState { get; private set; } = null!;

        /// <summary>
        /// Required. User-defined unique ID of this instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Optional. Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.
        /// </summary>
        [Output("instanceOwners")]
        public Output<ImmutableArray<string>> InstanceOwners { get; private set; } = null!;

        /// <summary>
        /// Optional. Labels to apply to this instance. These can be later modified by the UpdateInstance method.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The proxy endpoint that is used to access the Jupyter notebook.
        /// </summary>
        [Output("proxyUri")]
        public Output<string> ProxyUri { get; private set; } = null!;

        /// <summary>
        /// Optional. Idempotent request UUID.
        /// </summary>
        [Output("requestId")]
        public Output<string?> RequestId { get; private set; } = null!;

        /// <summary>
        /// The state of this instance.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Instance update time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The upgrade history of this instance.
        /// </summary>
        [Output("upgradeHistory")]
        public Output<ImmutableArray<Outputs.UpgradeHistoryEntryResponse>> UpgradeHistory { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("google-native:notebooks/v2:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("google-native:notebooks/v2:Instance", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "instanceId",
                    "location",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. If true, the notebook instance will not register with the proxy.
        /// </summary>
        [Input("disableProxyAccess")]
        public Input<bool>? DisableProxyAccess { get; set; }

        /// <summary>
        /// Optional. Compute Engine setup for the notebook. Uses notebook-defined fields.
        /// </summary>
        [Input("gceSetup")]
        public Input<Inputs.GceSetupArgs>? GceSetup { get; set; }

        /// <summary>
        /// Required. User-defined unique ID of this instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("instanceOwners")]
        private InputList<string>? _instanceOwners;

        /// <summary>
        /// Optional. Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.
        /// </summary>
        public InputList<string> InstanceOwners
        {
            get => _instanceOwners ?? (_instanceOwners = new InputList<string>());
            set => _instanceOwners = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional. Labels to apply to this instance. These can be later modified by the UpdateInstance method.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Optional. Idempotent request UUID.
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }
}
