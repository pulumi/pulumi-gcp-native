// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Notebooks.V2
{
    public static class GetInstance
    {
        /// <summary>
        /// Gets details of a single Instance.
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("google-native:notebooks/v2:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Instance.
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("google-native:notebooks/v2:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        /// <summary>
        /// Instance creation time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Email address of entity that sent original CreateInstance request.
        /// </summary>
        public readonly string Creator;
        /// <summary>
        /// Optional. If true, the notebook instance will not register with the proxy.
        /// </summary>
        public readonly bool DisableProxyAccess;
        /// <summary>
        /// Optional. Compute Engine setup for the notebook. Uses notebook-defined fields.
        /// </summary>
        public readonly Outputs.GceSetupResponse GceSetup;
        /// <summary>
        /// Additional information about instance health. Example: healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status": "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }
        /// </summary>
        public readonly ImmutableDictionary<string, string> HealthInfo;
        /// <summary>
        /// Instance health_state.
        /// </summary>
        public readonly string HealthState;
        /// <summary>
        /// Optional. Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.
        /// </summary>
        public readonly ImmutableArray<string> InstanceOwners;
        /// <summary>
        /// Optional. Labels to apply to this instance. These can be later modified by the UpdateInstance method.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The proxy endpoint that is used to access the Jupyter notebook.
        /// </summary>
        public readonly string ProxyUri;
        /// <summary>
        /// The state of this instance.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Instance update time.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The upgrade history of this instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.UpgradeHistoryEntryResponse> UpgradeHistory;

        [OutputConstructor]
        private GetInstanceResult(
            string createTime,

            string creator,

            bool disableProxyAccess,

            Outputs.GceSetupResponse gceSetup,

            ImmutableDictionary<string, string> healthInfo,

            string healthState,

            ImmutableArray<string> instanceOwners,

            ImmutableDictionary<string, string> labels,

            string name,

            string proxyUri,

            string state,

            string updateTime,

            ImmutableArray<Outputs.UpgradeHistoryEntryResponse> upgradeHistory)
        {
            CreateTime = createTime;
            Creator = creator;
            DisableProxyAccess = disableProxyAccess;
            GceSetup = gceSetup;
            HealthInfo = healthInfo;
            HealthState = healthState;
            InstanceOwners = instanceOwners;
            Labels = labels;
            Name = name;
            ProxyUri = proxyUri;
            State = state;
            UpdateTime = updateTime;
            UpgradeHistory = upgradeHistory;
        }
    }
}
