// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.GoogleNative.Notebooks.V2
{
    /// <summary>
    /// Optional. Type of this accelerator.
    /// </summary>
    [EnumType]
    public readonly struct AcceleratorConfigType : IEquatable<AcceleratorConfigType>
    {
        private readonly string _value;

        private AcceleratorConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Accelerator type is not specified.
        /// </summary>
        public static AcceleratorConfigType AcceleratorTypeUnspecified { get; } = new AcceleratorConfigType("ACCELERATOR_TYPE_UNSPECIFIED");
        /// <summary>
        /// Accelerator type is Nvidia Tesla P100.
        /// </summary>
        public static AcceleratorConfigType NvidiaTeslaP100 { get; } = new AcceleratorConfigType("NVIDIA_TESLA_P100");
        /// <summary>
        /// Accelerator type is Nvidia Tesla V100.
        /// </summary>
        public static AcceleratorConfigType NvidiaTeslaV100 { get; } = new AcceleratorConfigType("NVIDIA_TESLA_V100");
        /// <summary>
        /// Accelerator type is Nvidia Tesla P4.
        /// </summary>
        public static AcceleratorConfigType NvidiaTeslaP4 { get; } = new AcceleratorConfigType("NVIDIA_TESLA_P4");
        /// <summary>
        /// Accelerator type is Nvidia Tesla T4.
        /// </summary>
        public static AcceleratorConfigType NvidiaTeslaT4 { get; } = new AcceleratorConfigType("NVIDIA_TESLA_T4");
        /// <summary>
        /// Accelerator type is Nvidia Tesla A100 - 40GB.
        /// </summary>
        public static AcceleratorConfigType NvidiaTeslaA100 { get; } = new AcceleratorConfigType("NVIDIA_TESLA_A100");
        /// <summary>
        /// Accelerator type is Nvidia Tesla A100 - 80GB.
        /// </summary>
        public static AcceleratorConfigType NvidiaA10080gb { get; } = new AcceleratorConfigType("NVIDIA_A100_80GB");
        /// <summary>
        /// Accelerator type is Nvidia Tesla L4.
        /// </summary>
        public static AcceleratorConfigType NvidiaL4 { get; } = new AcceleratorConfigType("NVIDIA_L4");
        /// <summary>
        /// Accelerator type is NVIDIA Tesla T4 Virtual Workstations.
        /// </summary>
        public static AcceleratorConfigType NvidiaTeslaT4Vws { get; } = new AcceleratorConfigType("NVIDIA_TESLA_T4_VWS");
        /// <summary>
        /// Accelerator type is NVIDIA Tesla P100 Virtual Workstations.
        /// </summary>
        public static AcceleratorConfigType NvidiaTeslaP100Vws { get; } = new AcceleratorConfigType("NVIDIA_TESLA_P100_VWS");
        /// <summary>
        /// Accelerator type is NVIDIA Tesla P4 Virtual Workstations.
        /// </summary>
        public static AcceleratorConfigType NvidiaTeslaP4Vws { get; } = new AcceleratorConfigType("NVIDIA_TESLA_P4_VWS");

        public static bool operator ==(AcceleratorConfigType left, AcceleratorConfigType right) => left.Equals(right);
        public static bool operator !=(AcceleratorConfigType left, AcceleratorConfigType right) => !left.Equals(right);

        public static explicit operator string(AcceleratorConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AcceleratorConfigType other && Equals(other);
        public bool Equals(AcceleratorConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
    /// </summary>
    [EnumType]
    public readonly struct BootDiskDiskEncryption : IEquatable<BootDiskDiskEncryption>
    {
        private readonly string _value;

        private BootDiskDiskEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Disk encryption is not specified.
        /// </summary>
        public static BootDiskDiskEncryption DiskEncryptionUnspecified { get; } = new BootDiskDiskEncryption("DISK_ENCRYPTION_UNSPECIFIED");
        /// <summary>
        /// Use Google managed encryption keys to encrypt the boot disk.
        /// </summary>
        public static BootDiskDiskEncryption Gmek { get; } = new BootDiskDiskEncryption("GMEK");
        /// <summary>
        /// Use customer managed encryption keys to encrypt the boot disk.
        /// </summary>
        public static BootDiskDiskEncryption Cmek { get; } = new BootDiskDiskEncryption("CMEK");

        public static bool operator ==(BootDiskDiskEncryption left, BootDiskDiskEncryption right) => left.Equals(right);
        public static bool operator !=(BootDiskDiskEncryption left, BootDiskDiskEncryption right) => !left.Equals(right);

        public static explicit operator string(BootDiskDiskEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BootDiskDiskEncryption other && Equals(other);
        public bool Equals(BootDiskDiskEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Indicates the type of the disk.
    /// </summary>
    [EnumType]
    public readonly struct BootDiskDiskType : IEquatable<BootDiskDiskType>
    {
        private readonly string _value;

        private BootDiskDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Disk type not set.
        /// </summary>
        public static BootDiskDiskType DiskTypeUnspecified { get; } = new BootDiskDiskType("DISK_TYPE_UNSPECIFIED");
        /// <summary>
        /// Standard persistent disk type.
        /// </summary>
        public static BootDiskDiskType PdStandard { get; } = new BootDiskDiskType("PD_STANDARD");
        /// <summary>
        /// SSD persistent disk type.
        /// </summary>
        public static BootDiskDiskType PdSsd { get; } = new BootDiskDiskType("PD_SSD");
        /// <summary>
        /// Balanced persistent disk type.
        /// </summary>
        public static BootDiskDiskType PdBalanced { get; } = new BootDiskDiskType("PD_BALANCED");
        /// <summary>
        /// Extreme persistent disk type.
        /// </summary>
        public static BootDiskDiskType PdExtreme { get; } = new BootDiskDiskType("PD_EXTREME");

        public static bool operator ==(BootDiskDiskType left, BootDiskDiskType right) => left.Equals(right);
        public static bool operator !=(BootDiskDiskType left, BootDiskDiskType right) => !left.Equals(right);

        public static explicit operator string(BootDiskDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BootDiskDiskType other && Equals(other);
        public bool Equals(BootDiskDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
    /// </summary>
    [EnumType]
    public readonly struct DataDiskDiskEncryption : IEquatable<DataDiskDiskEncryption>
    {
        private readonly string _value;

        private DataDiskDiskEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Disk encryption is not specified.
        /// </summary>
        public static DataDiskDiskEncryption DiskEncryptionUnspecified { get; } = new DataDiskDiskEncryption("DISK_ENCRYPTION_UNSPECIFIED");
        /// <summary>
        /// Use Google managed encryption keys to encrypt the boot disk.
        /// </summary>
        public static DataDiskDiskEncryption Gmek { get; } = new DataDiskDiskEncryption("GMEK");
        /// <summary>
        /// Use customer managed encryption keys to encrypt the boot disk.
        /// </summary>
        public static DataDiskDiskEncryption Cmek { get; } = new DataDiskDiskEncryption("CMEK");

        public static bool operator ==(DataDiskDiskEncryption left, DataDiskDiskEncryption right) => left.Equals(right);
        public static bool operator !=(DataDiskDiskEncryption left, DataDiskDiskEncryption right) => !left.Equals(right);

        public static explicit operator string(DataDiskDiskEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataDiskDiskEncryption other && Equals(other);
        public bool Equals(DataDiskDiskEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. Input only. Indicates the type of the disk.
    /// </summary>
    [EnumType]
    public readonly struct DataDiskDiskType : IEquatable<DataDiskDiskType>
    {
        private readonly string _value;

        private DataDiskDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Disk type not set.
        /// </summary>
        public static DataDiskDiskType DiskTypeUnspecified { get; } = new DataDiskDiskType("DISK_TYPE_UNSPECIFIED");
        /// <summary>
        /// Standard persistent disk type.
        /// </summary>
        public static DataDiskDiskType PdStandard { get; } = new DataDiskDiskType("PD_STANDARD");
        /// <summary>
        /// SSD persistent disk type.
        /// </summary>
        public static DataDiskDiskType PdSsd { get; } = new DataDiskDiskType("PD_SSD");
        /// <summary>
        /// Balanced persistent disk type.
        /// </summary>
        public static DataDiskDiskType PdBalanced { get; } = new DataDiskDiskType("PD_BALANCED");
        /// <summary>
        /// Extreme persistent disk type.
        /// </summary>
        public static DataDiskDiskType PdExtreme { get; } = new DataDiskDiskType("PD_EXTREME");

        public static bool operator ==(DataDiskDiskType left, DataDiskDiskType right) => left.Equals(right);
        public static bool operator !=(DataDiskDiskType left, DataDiskDiskType right) => !left.Equals(right);

        public static explicit operator string(DataDiskDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataDiskDiskType other && Equals(other);
        public bool Equals(DataDiskDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
    /// </summary>
    [EnumType]
    public readonly struct NetworkInterfaceNicType : IEquatable<NetworkInterfaceNicType>
    {
        private readonly string _value;

        private NetworkInterfaceNicType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No type specified.
        /// </summary>
        public static NetworkInterfaceNicType NicTypeUnspecified { get; } = new NetworkInterfaceNicType("NIC_TYPE_UNSPECIFIED");
        /// <summary>
        /// VIRTIO
        /// </summary>
        public static NetworkInterfaceNicType VirtioNet { get; } = new NetworkInterfaceNicType("VIRTIO_NET");
        /// <summary>
        /// GVNIC
        /// </summary>
        public static NetworkInterfaceNicType Gvnic { get; } = new NetworkInterfaceNicType("GVNIC");

        public static bool operator ==(NetworkInterfaceNicType left, NetworkInterfaceNicType right) => left.Equals(right);
        public static bool operator !=(NetworkInterfaceNicType left, NetworkInterfaceNicType right) => !left.Equals(right);

        public static explicit operator string(NetworkInterfaceNicType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkInterfaceNicType other && Equals(other);
        public bool Equals(NetworkInterfaceNicType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
