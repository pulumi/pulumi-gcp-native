// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Notebooks.V1
{
    public static class GetInstance
    {
        /// <summary>
        /// Gets details of a single Instance.
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("google-native:notebooks/v1:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Instance.
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("google-native:notebooks/v1:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        /// <summary>
        /// The hardware accelerator used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](/compute/docs/gpus/#gpus-list).
        /// </summary>
        public readonly Outputs.AcceleratorConfigResponse AcceleratorConfig;
        /// <summary>
        /// Input only. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB. If not specified, this defaults to 100.
        /// </summary>
        public readonly string BootDiskSizeGb;
        /// <summary>
        /// Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
        /// </summary>
        public readonly string BootDiskType;
        /// <summary>
        /// Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
        /// </summary>
        public readonly bool CanIpForward;
        /// <summary>
        /// Use a container image to start the notebook instance.
        /// </summary>
        public readonly Outputs.ContainerImageResponse ContainerImage;
        /// <summary>
        /// Instance creation time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Email address of entity that sent original CreateInstance request.
        /// </summary>
        public readonly string Creator;
        /// <summary>
        /// Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
        /// </summary>
        public readonly string CustomGpuDriverPath;
        /// <summary>
        /// Input only. The size of the data disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). You can choose the size of the data disk based on how big your notebooks and data are. If not specified, this defaults to 100.
        /// </summary>
        public readonly string DataDiskSizeGb;
        /// <summary>
        /// Input only. The type of the data disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
        /// </summary>
        public readonly string DataDiskType;
        /// <summary>
        /// Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
        /// </summary>
        public readonly string DiskEncryption;
        /// <summary>
        /// Attached disks to notebook instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.DiskResponse> Disks;
        /// <summary>
        /// Whether the end user authorizes Google Cloud to install GPU driver on this instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
        /// </summary>
        public readonly bool InstallGpuDriver;
        /// <summary>
        /// Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.
        /// </summary>
        public readonly ImmutableArray<string> InstanceOwners;
        /// <summary>
        /// Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about [using your own encryption keys](/kms/docs/quickstart).
        /// </summary>
        public readonly string KmsKey;
        /// <summary>
        /// Labels to apply to this instance. These can be later modified by the setLabels method.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// The [Compute Engine machine type](/compute/docs/machine-types) of this instance.
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// Custom metadata to apply to this instance.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The name of the VPC that this instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
        /// </summary>
        public readonly string NicType;
        /// <summary>
        /// If true, the notebook instance will not register with the proxy.
        /// </summary>
        public readonly bool NoProxyAccess;
        /// <summary>
        /// If true, no public IP will be assigned to this instance.
        /// </summary>
        public readonly bool NoPublicIp;
        /// <summary>
        /// Input only. If true, the data disk will not be auto deleted when deleting the instance.
        /// </summary>
        public readonly bool NoRemoveDataDisk;
        /// <summary>
        /// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
        /// </summary>
        public readonly string PostStartupScript;
        /// <summary>
        /// The proxy endpoint that is used to access the Jupyter notebook.
        /// </summary>
        public readonly string ProxyUri;
        /// <summary>
        /// Optional. The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this notebook instance.
        /// </summary>
        public readonly Outputs.ReservationAffinityResponse ReservationAffinity;
        /// <summary>
        /// The service account on this instance, giving access to other Google Cloud services. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
        /// </summary>
        public readonly string ServiceAccount;
        /// <summary>
        /// Optional. The URIs of service account scopes to be included in Compute Engine instances. If not specified, the following [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam) are defined: - https://www.googleapis.com/auth/cloud-platform - https://www.googleapis.com/auth/userinfo.email If not using default scopes, you need at least: https://www.googleapis.com/auth/compute
        /// </summary>
        public readonly ImmutableArray<string> ServiceAccountScopes;
        /// <summary>
        /// Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
        /// </summary>
        public readonly Outputs.ShieldedInstanceConfigResponse ShieldedInstanceConfig;
        /// <summary>
        /// The state of this instance.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The name of the subnet that this instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
        /// </summary>
        public readonly string Subnet;
        /// <summary>
        /// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Instance update time.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The upgrade history of this instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.UpgradeHistoryEntryResponse> UpgradeHistory;
        /// <summary>
        /// Use a Compute Engine VM image to start the notebook instance.
        /// </summary>
        public readonly Outputs.VmImageResponse VmImage;

        [OutputConstructor]
        private GetInstanceResult(
            Outputs.AcceleratorConfigResponse acceleratorConfig,

            string bootDiskSizeGb,

            string bootDiskType,

            bool canIpForward,

            Outputs.ContainerImageResponse containerImage,

            string createTime,

            string creator,

            string customGpuDriverPath,

            string dataDiskSizeGb,

            string dataDiskType,

            string diskEncryption,

            ImmutableArray<Outputs.DiskResponse> disks,

            bool installGpuDriver,

            ImmutableArray<string> instanceOwners,

            string kmsKey,

            ImmutableDictionary<string, string> labels,

            string machineType,

            ImmutableDictionary<string, string> metadata,

            string name,

            string network,

            string nicType,

            bool noProxyAccess,

            bool noPublicIp,

            bool noRemoveDataDisk,

            string postStartupScript,

            string proxyUri,

            Outputs.ReservationAffinityResponse reservationAffinity,

            string serviceAccount,

            ImmutableArray<string> serviceAccountScopes,

            Outputs.ShieldedInstanceConfigResponse shieldedInstanceConfig,

            string state,

            string subnet,

            ImmutableArray<string> tags,

            string updateTime,

            ImmutableArray<Outputs.UpgradeHistoryEntryResponse> upgradeHistory,

            Outputs.VmImageResponse vmImage)
        {
            AcceleratorConfig = acceleratorConfig;
            BootDiskSizeGb = bootDiskSizeGb;
            BootDiskType = bootDiskType;
            CanIpForward = canIpForward;
            ContainerImage = containerImage;
            CreateTime = createTime;
            Creator = creator;
            CustomGpuDriverPath = customGpuDriverPath;
            DataDiskSizeGb = dataDiskSizeGb;
            DataDiskType = dataDiskType;
            DiskEncryption = diskEncryption;
            Disks = disks;
            InstallGpuDriver = installGpuDriver;
            InstanceOwners = instanceOwners;
            KmsKey = kmsKey;
            Labels = labels;
            MachineType = machineType;
            Metadata = metadata;
            Name = name;
            Network = network;
            NicType = nicType;
            NoProxyAccess = noProxyAccess;
            NoPublicIp = noPublicIp;
            NoRemoveDataDisk = noRemoveDataDisk;
            PostStartupScript = postStartupScript;
            ProxyUri = proxyUri;
            ReservationAffinity = reservationAffinity;
            ServiceAccount = serviceAccount;
            ServiceAccountScopes = serviceAccountScopes;
            ShieldedInstanceConfig = shieldedInstanceConfig;
            State = state;
            Subnet = subnet;
            Tags = tags;
            UpdateTime = updateTime;
            UpgradeHistory = upgradeHistory;
            VmImage = vmImage;
        }
    }
}
