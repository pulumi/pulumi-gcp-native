// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Notebooks.V1
{
    public static class GetRuntime
    {
        /// <summary>
        /// Gets details of a single Runtime. The location must be a regional endpoint rather than zonal.
        /// </summary>
        public static Task<GetRuntimeResult> InvokeAsync(GetRuntimeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRuntimeResult>("google-native:notebooks/v1:getRuntime", args ?? new GetRuntimeArgs(), options.WithVersion());
    }


    public sealed class GetRuntimeArgs : Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        [Input("runtimeId", required: true)]
        public string RuntimeId { get; set; } = null!;

        public GetRuntimeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRuntimeResult
    {
        /// <summary>
        /// The config settings for accessing runtime.
        /// </summary>
        public readonly Outputs.RuntimeAccessConfigResponse AccessConfig;
        /// <summary>
        /// Runtime creation time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Runtime health_state.
        /// </summary>
        public readonly string HealthState;
        /// <summary>
        /// Contains Runtime daemon metrics such as Service status and JupyterLab stats.
        /// </summary>
        public readonly Outputs.RuntimeMetricsResponse Metrics;
        /// <summary>
        /// The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtime}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The config settings for software inside the runtime.
        /// </summary>
        public readonly Outputs.RuntimeSoftwareConfigResponse SoftwareConfig;
        /// <summary>
        /// Runtime state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Runtime update time.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// Use a Compute Engine VM image to start the managed notebook instance.
        /// </summary>
        public readonly Outputs.VirtualMachineResponse VirtualMachine;

        [OutputConstructor]
        private GetRuntimeResult(
            Outputs.RuntimeAccessConfigResponse accessConfig,

            string createTime,

            string healthState,

            Outputs.RuntimeMetricsResponse metrics,

            string name,

            Outputs.RuntimeSoftwareConfigResponse softwareConfig,

            string state,

            string updateTime,

            Outputs.VirtualMachineResponse virtualMachine)
        {
            AccessConfig = accessConfig;
            CreateTime = createTime;
            HealthState = healthState;
            Metrics = metrics;
            Name = name;
            SoftwareConfig = softwareConfig;
            State = state;
            UpdateTime = updateTime;
            VirtualMachine = virtualMachine;
        }
    }
}
