// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Notebooks.V1
{
    public static class GetEnvironment
    {
        /// <summary>
        /// Gets details of a single Environment.
        /// </summary>
        public static Task<GetEnvironmentResult> InvokeAsync(GetEnvironmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentResult>("google-native:notebooks/v1:getEnvironment", args ?? new GetEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a single Environment.
        /// </summary>
        public static Output<GetEnvironmentResult> Invoke(GetEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentResult>("google-native:notebooks/v1:getEnvironment", args ?? new GetEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        [Input("environmentId", required: true)]
        public string EnvironmentId { get; set; } = null!;

        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        public GetEnvironmentArgs()
        {
        }
        public static new GetEnvironmentArgs Empty => new GetEnvironmentArgs();
    }

    public sealed class GetEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        public GetEnvironmentInvokeArgs()
        {
        }
        public static new GetEnvironmentInvokeArgs Empty => new GetEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvironmentResult
    {
        /// <summary>
        /// Use a container image to start the notebook instance.
        /// </summary>
        public readonly Outputs.ContainerImageResponse ContainerImage;
        /// <summary>
        /// The time at which this environment was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// A brief description of this environment.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Display name of this environment for the UI.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Name of this environment. Format: `projects/{project_id}/locations/{location}/environments/{environment_id}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path. Example: `"gs://path-to-file/file-name"`
        /// </summary>
        public readonly string PostStartupScript;
        /// <summary>
        /// Use a Compute Engine VM image to start the notebook instance.
        /// </summary>
        public readonly Outputs.VmImageResponse VmImage;

        [OutputConstructor]
        private GetEnvironmentResult(
            Outputs.ContainerImageResponse containerImage,

            string createTime,

            string description,

            string displayName,

            string name,

            string postStartupScript,

            Outputs.VmImageResponse vmImage)
        {
            ContainerImage = containerImage;
            CreateTime = createTime;
            Description = description;
            DisplayName = displayName;
            Name = name;
            PostStartupScript = postStartupScript;
            VmImage = vmImage;
        }
    }
}
