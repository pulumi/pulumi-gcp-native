// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Notebooks.V1
{
    public static class GetSchedule
    {
        /// <summary>
        /// Gets details of schedule
        /// </summary>
        public static Task<GetScheduleResult> InvokeAsync(GetScheduleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScheduleResult>("google-native:notebooks/v1:getSchedule", args ?? new GetScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of schedule
        /// </summary>
        public static Output<GetScheduleResult> Invoke(GetScheduleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScheduleResult>("google-native:notebooks/v1:getSchedule", args ?? new GetScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScheduleArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        [Input("project")]
        public string? Project { get; set; }

        [Input("scheduleId", required: true)]
        public string ScheduleId { get; set; } = null!;

        public GetScheduleArgs()
        {
        }
        public static new GetScheduleArgs Empty => new GetScheduleArgs();
    }

    public sealed class GetScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("scheduleId", required: true)]
        public Input<string> ScheduleId { get; set; } = null!;

        public GetScheduleInvokeArgs()
        {
        }
        public static new GetScheduleInvokeArgs Empty => new GetScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetScheduleResult
    {
        /// <summary>
        /// Time the schedule was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
        /// </summary>
        public readonly string CronSchedule;
        /// <summary>
        /// A brief description of this environment.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens '-', and underscores '_'.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Notebook Execution Template corresponding to this schedule.
        /// </summary>
        public readonly Outputs.ExecutionTemplateResponse ExecutionTemplate;
        /// <summary>
        /// The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The most recent execution names triggered from this schedule and their corresponding states.
        /// </summary>
        public readonly ImmutableArray<Outputs.ExecutionResponse> RecentExecutions;
        public readonly string State;
        /// <summary>
        /// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
        /// </summary>
        public readonly string TimeZone;
        /// <summary>
        /// Time the schedule was last updated.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetScheduleResult(
            string createTime,

            string cronSchedule,

            string description,

            string displayName,

            Outputs.ExecutionTemplateResponse executionTemplate,

            string name,

            ImmutableArray<Outputs.ExecutionResponse> recentExecutions,

            string state,

            string timeZone,

            string updateTime)
        {
            CreateTime = createTime;
            CronSchedule = cronSchedule;
            Description = description;
            DisplayName = displayName;
            ExecutionTemplate = executionTemplate;
            Name = name;
            RecentExecutions = recentExecutions;
            State = state;
            TimeZone = timeZone;
            UpdateTime = updateTime;
        }
    }
}
