// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.GoogleNative.Notebooks.V1.Outputs
{

    /// <summary>
    /// Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
    /// </summary>
    [OutputType]
    public sealed class RuntimeSoftwareConfigResponse
    {
        /// <summary>
        /// Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
        /// </summary>
        public readonly string CustomGpuDriverPath;
        /// <summary>
        /// Bool indicating whether JupyterLab terminal will be available or not. Default: False
        /// </summary>
        public readonly bool DisableTerminal;
        /// <summary>
        /// Verifies core internal services are running. Default: True
        /// </summary>
        public readonly bool EnableHealthMonitoring;
        /// <summary>
        /// Runtime will automatically shutdown after idle_shutdown_time. Default: True
        /// </summary>
        public readonly bool IdleShutdown;
        /// <summary>
        /// Time in minutes to wait before shutting down runtime. Default: 180 minutes
        /// </summary>
        public readonly int IdleShutdownTimeout;
        /// <summary>
        /// Install Nvidia Driver automatically. Default: True
        /// </summary>
        public readonly bool InstallGpuDriver;
        /// <summary>
        /// Optional. Use a list of container images to use as Kernels in the notebook instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerImageResponse> Kernels;
        /// <summary>
        /// Bool indicating whether mixer client should be disabled. Default: False
        /// </summary>
        public readonly bool MixerDisabled;
        /// <summary>
        /// Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
        /// </summary>
        public readonly string NotebookUpgradeSchedule;
        /// <summary>
        /// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
        /// </summary>
        public readonly string PostStartupScript;
        /// <summary>
        /// Behavior for the post startup script.
        /// </summary>
        public readonly string PostStartupScriptBehavior;
        /// <summary>
        /// Bool indicating whether an newer image is available in an image family.
        /// </summary>
        public readonly bool Upgradeable;
        /// <summary>
        /// version of boot image such as M100, from release label of the image.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private RuntimeSoftwareConfigResponse(
            string customGpuDriverPath,

            bool disableTerminal,

            bool enableHealthMonitoring,

            bool idleShutdown,

            int idleShutdownTimeout,

            bool installGpuDriver,

            ImmutableArray<Outputs.ContainerImageResponse> kernels,

            bool mixerDisabled,

            string notebookUpgradeSchedule,

            string postStartupScript,

            string postStartupScriptBehavior,

            bool upgradeable,

            string version)
        {
            CustomGpuDriverPath = customGpuDriverPath;
            DisableTerminal = disableTerminal;
            EnableHealthMonitoring = enableHealthMonitoring;
            IdleShutdown = idleShutdown;
            IdleShutdownTimeout = idleShutdownTimeout;
            InstallGpuDriver = installGpuDriver;
            Kernels = kernels;
            MixerDisabled = mixerDisabled;
            NotebookUpgradeSchedule = notebookUpgradeSchedule;
            PostStartupScript = postStartupScript;
            PostStartupScriptBehavior = postStartupScriptBehavior;
            Upgradeable = upgradeable;
            Version = version;
        }
    }
}
