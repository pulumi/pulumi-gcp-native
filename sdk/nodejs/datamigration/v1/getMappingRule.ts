// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets the details of a mapping rule.
 */
export function getMappingRule(args: GetMappingRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetMappingRuleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:datamigration/v1:getMappingRule", {
        "conversionWorkspaceId": args.conversionWorkspaceId,
        "location": args.location,
        "mappingRuleId": args.mappingRuleId,
        "project": args.project,
    }, opts);
}

export interface GetMappingRuleArgs {
    conversionWorkspaceId: string;
    location: string;
    mappingRuleId: string;
    project?: string;
}

export interface GetMappingRuleResult {
    /**
     * Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
     */
    readonly conditionalColumnSetValue: outputs.datamigration.v1.ConditionalColumnSetValueResponse;
    /**
     * Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
     */
    readonly convertRowidColumn: outputs.datamigration.v1.ConvertRowIdToColumnResponse;
    /**
     * Optional. A human readable name
     */
    readonly displayName: string;
    /**
     * Optional. Rule to specify how multiple entities should be relocated into a different schema.
     */
    readonly entityMove: outputs.datamigration.v1.EntityMoveResponse;
    /**
     * The rule filter
     */
    readonly filter: outputs.datamigration.v1.MappingRuleFilterResponse;
    /**
     * Optional. Rule to specify the list of columns to include or exclude from a table.
     */
    readonly filterTableColumns: outputs.datamigration.v1.FilterTableColumnsResponse;
    /**
     * Optional. Rule to specify how multiple columns should be converted to a different data type.
     */
    readonly multiColumnDataTypeChange: outputs.datamigration.v1.MultiColumnDatatypeChangeResponse;
    /**
     * Optional. Rule to specify how multiple entities should be renamed.
     */
    readonly multiEntityRename: outputs.datamigration.v1.MultiEntityRenameResponse;
    /**
     * Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
     */
    readonly name: string;
    /**
     * The timestamp that the revision was created.
     */
    readonly revisionCreateTime: string;
    /**
     * The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
     */
    readonly revisionId: string;
    /**
     * The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
     */
    readonly ruleOrder: string;
    /**
     * The rule scope
     */
    readonly ruleScope: string;
    /**
     * Optional. Rule to specify the primary key for a table
     */
    readonly setTablePrimaryKey: outputs.datamigration.v1.SetTablePrimaryKeyResponse;
    /**
     * Optional. Rule to specify how a single column is converted.
     */
    readonly singleColumnChange: outputs.datamigration.v1.SingleColumnChangeResponse;
    /**
     * Optional. Rule to specify how a single entity should be renamed.
     */
    readonly singleEntityRename: outputs.datamigration.v1.SingleEntityRenameResponse;
    /**
     * Optional. Rule to specify how a single package is converted.
     */
    readonly singlePackageChange: outputs.datamigration.v1.SinglePackageChangeResponse;
    /**
     * Optional. Rule to change the sql code for an entity, for example, function, procedure.
     */
    readonly sourceSqlChange: outputs.datamigration.v1.SourceSqlChangeResponse;
    /**
     * Optional. The mapping rule state
     */
    readonly state: string;
}
/**
 * Gets the details of a mapping rule.
 */
export function getMappingRuleOutput(args: GetMappingRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMappingRuleResult> {
    return pulumi.output(args).apply((a: any) => getMappingRule(a, opts))
}

export interface GetMappingRuleOutputArgs {
    conversionWorkspaceId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    mappingRuleId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
