// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new mapping rule for a given conversion workspace.
 */
export class MappingRule extends pulumi.CustomResource {
    /**
     * Get an existing MappingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MappingRule {
        return new MappingRule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:datamigration/v1:MappingRule';

    /**
     * Returns true if the given object is an instance of MappingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MappingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MappingRule.__pulumiType;
    }

    /**
     * Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
     */
    public readonly conditionalColumnSetValue!: pulumi.Output<outputs.datamigration.v1.ConditionalColumnSetValueResponse>;
    public readonly conversionWorkspaceId!: pulumi.Output<string>;
    /**
     * Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
     */
    public readonly convertRowidColumn!: pulumi.Output<outputs.datamigration.v1.ConvertRowIdToColumnResponse>;
    /**
     * Optional. A human readable name
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Optional. Rule to specify how multiple entities should be relocated into a different schema.
     */
    public readonly entityMove!: pulumi.Output<outputs.datamigration.v1.EntityMoveResponse>;
    /**
     * The rule filter
     */
    public readonly filter!: pulumi.Output<outputs.datamigration.v1.MappingRuleFilterResponse>;
    /**
     * Optional. Rule to specify the list of columns to include or exclude from a table.
     */
    public readonly filterTableColumns!: pulumi.Output<outputs.datamigration.v1.FilterTableColumnsResponse>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Required. The ID of the rule to create.
     */
    public readonly mappingRuleId!: pulumi.Output<string>;
    /**
     * Optional. Rule to specify how multiple columns should be converted to a different data type.
     */
    public readonly multiColumnDataTypeChange!: pulumi.Output<outputs.datamigration.v1.MultiColumnDatatypeChangeResponse>;
    /**
     * Optional. Rule to specify how multiple entities should be renamed.
     */
    public readonly multiEntityRename!: pulumi.Output<outputs.datamigration.v1.MultiEntityRenameResponse>;
    /**
     * Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
     */
    public readonly requestId!: pulumi.Output<string | undefined>;
    /**
     * The timestamp that the revision was created.
     */
    public /*out*/ readonly revisionCreateTime!: pulumi.Output<string>;
    /**
     * The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
     */
    public /*out*/ readonly revisionId!: pulumi.Output<string>;
    /**
     * The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
     */
    public readonly ruleOrder!: pulumi.Output<string>;
    /**
     * The rule scope
     */
    public readonly ruleScope!: pulumi.Output<string>;
    /**
     * Optional. Rule to specify the primary key for a table
     */
    public readonly setTablePrimaryKey!: pulumi.Output<outputs.datamigration.v1.SetTablePrimaryKeyResponse>;
    /**
     * Optional. Rule to specify how a single column is converted.
     */
    public readonly singleColumnChange!: pulumi.Output<outputs.datamigration.v1.SingleColumnChangeResponse>;
    /**
     * Optional. Rule to specify how a single entity should be renamed.
     */
    public readonly singleEntityRename!: pulumi.Output<outputs.datamigration.v1.SingleEntityRenameResponse>;
    /**
     * Optional. Rule to specify how a single package is converted.
     */
    public readonly singlePackageChange!: pulumi.Output<outputs.datamigration.v1.SinglePackageChangeResponse>;
    /**
     * Optional. Rule to change the sql code for an entity, for example, function, procedure.
     */
    public readonly sourceSqlChange!: pulumi.Output<outputs.datamigration.v1.SourceSqlChangeResponse>;
    /**
     * Optional. The mapping rule state
     */
    public readonly state!: pulumi.Output<string>;

    /**
     * Create a MappingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MappingRuleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.conversionWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conversionWorkspaceId'");
            }
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.mappingRuleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mappingRuleId'");
            }
            if ((!args || args.ruleOrder === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleOrder'");
            }
            if ((!args || args.ruleScope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleScope'");
            }
            resourceInputs["conditionalColumnSetValue"] = args ? args.conditionalColumnSetValue : undefined;
            resourceInputs["conversionWorkspaceId"] = args ? args.conversionWorkspaceId : undefined;
            resourceInputs["convertRowidColumn"] = args ? args.convertRowidColumn : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["entityMove"] = args ? args.entityMove : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["filterTableColumns"] = args ? args.filterTableColumns : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mappingRuleId"] = args ? args.mappingRuleId : undefined;
            resourceInputs["multiColumnDataTypeChange"] = args ? args.multiColumnDataTypeChange : undefined;
            resourceInputs["multiEntityRename"] = args ? args.multiEntityRename : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["ruleOrder"] = args ? args.ruleOrder : undefined;
            resourceInputs["ruleScope"] = args ? args.ruleScope : undefined;
            resourceInputs["setTablePrimaryKey"] = args ? args.setTablePrimaryKey : undefined;
            resourceInputs["singleColumnChange"] = args ? args.singleColumnChange : undefined;
            resourceInputs["singleEntityRename"] = args ? args.singleEntityRename : undefined;
            resourceInputs["singlePackageChange"] = args ? args.singlePackageChange : undefined;
            resourceInputs["sourceSqlChange"] = args ? args.sourceSqlChange : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["revisionCreateTime"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
        } else {
            resourceInputs["conditionalColumnSetValue"] = undefined /*out*/;
            resourceInputs["conversionWorkspaceId"] = undefined /*out*/;
            resourceInputs["convertRowidColumn"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["entityMove"] = undefined /*out*/;
            resourceInputs["filter"] = undefined /*out*/;
            resourceInputs["filterTableColumns"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["mappingRuleId"] = undefined /*out*/;
            resourceInputs["multiColumnDataTypeChange"] = undefined /*out*/;
            resourceInputs["multiEntityRename"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["revisionCreateTime"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
            resourceInputs["ruleOrder"] = undefined /*out*/;
            resourceInputs["ruleScope"] = undefined /*out*/;
            resourceInputs["setTablePrimaryKey"] = undefined /*out*/;
            resourceInputs["singleColumnChange"] = undefined /*out*/;
            resourceInputs["singleEntityRename"] = undefined /*out*/;
            resourceInputs["singlePackageChange"] = undefined /*out*/;
            resourceInputs["sourceSqlChange"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["conversionWorkspaceId", "location", "mappingRuleId", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(MappingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a MappingRule resource.
 */
export interface MappingRuleArgs {
    /**
     * Optional. Rule to specify how the data contained in a column should be transformed (such as trimmed, rounded, etc) provided that the data meets certain criteria.
     */
    conditionalColumnSetValue?: pulumi.Input<inputs.datamigration.v1.ConditionalColumnSetValueArgs>;
    conversionWorkspaceId: pulumi.Input<string>;
    /**
     * Optional. Rule to specify how multiple tables should be converted with an additional rowid column.
     */
    convertRowidColumn?: pulumi.Input<inputs.datamigration.v1.ConvertRowIdToColumnArgs>;
    /**
     * Optional. A human readable name
     */
    displayName?: pulumi.Input<string>;
    /**
     * Optional. Rule to specify how multiple entities should be relocated into a different schema.
     */
    entityMove?: pulumi.Input<inputs.datamigration.v1.EntityMoveArgs>;
    /**
     * The rule filter
     */
    filter: pulumi.Input<inputs.datamigration.v1.MappingRuleFilterArgs>;
    /**
     * Optional. Rule to specify the list of columns to include or exclude from a table.
     */
    filterTableColumns?: pulumi.Input<inputs.datamigration.v1.FilterTableColumnsArgs>;
    location?: pulumi.Input<string>;
    /**
     * Required. The ID of the rule to create.
     */
    mappingRuleId: pulumi.Input<string>;
    /**
     * Optional. Rule to specify how multiple columns should be converted to a different data type.
     */
    multiColumnDataTypeChange?: pulumi.Input<inputs.datamigration.v1.MultiColumnDatatypeChangeArgs>;
    /**
     * Optional. Rule to specify how multiple entities should be renamed.
     */
    multiEntityRename?: pulumi.Input<inputs.datamigration.v1.MultiEntityRenameArgs>;
    /**
     * Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
     */
    requestId?: pulumi.Input<string>;
    /**
     * The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
     */
    ruleOrder: pulumi.Input<string>;
    /**
     * The rule scope
     */
    ruleScope: pulumi.Input<enums.datamigration.v1.MappingRuleRuleScope>;
    /**
     * Optional. Rule to specify the primary key for a table
     */
    setTablePrimaryKey?: pulumi.Input<inputs.datamigration.v1.SetTablePrimaryKeyArgs>;
    /**
     * Optional. Rule to specify how a single column is converted.
     */
    singleColumnChange?: pulumi.Input<inputs.datamigration.v1.SingleColumnChangeArgs>;
    /**
     * Optional. Rule to specify how a single entity should be renamed.
     */
    singleEntityRename?: pulumi.Input<inputs.datamigration.v1.SingleEntityRenameArgs>;
    /**
     * Optional. Rule to specify how a single package is converted.
     */
    singlePackageChange?: pulumi.Input<inputs.datamigration.v1.SinglePackageChangeArgs>;
    /**
     * Optional. Rule to change the sql code for an entity, for example, function, procedure.
     */
    sourceSqlChange?: pulumi.Input<inputs.datamigration.v1.SourceSqlChangeArgs>;
    /**
     * Optional. The mapping rule state
     */
    state?: pulumi.Input<enums.datamigration.v1.MappingRuleState>;
}
