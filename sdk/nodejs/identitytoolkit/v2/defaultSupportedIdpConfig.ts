// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a default supported Idp configuration for an Identity Toolkit project.
 */
export class DefaultSupportedIdpConfig extends pulumi.CustomResource {
    /**
     * Get an existing DefaultSupportedIdpConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DefaultSupportedIdpConfig {
        return new DefaultSupportedIdpConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:identitytoolkit/v2:DefaultSupportedIdpConfig';

    /**
     * Returns true if the given object is an instance of DefaultSupportedIdpConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultSupportedIdpConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultSupportedIdpConfig.__pulumiType;
    }

    /**
     * Additional config for Apple-based projects.
     */
    public readonly appleSignInConfig!: pulumi.Output<outputs.identitytoolkit.v2.GoogleCloudIdentitytoolkitAdminV2AppleSignInConfigResponse>;
    /**
     * OAuth client ID.
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * OAuth client secret.
     */
    public readonly clientSecret!: pulumi.Output<string>;
    /**
     * True if allows the user to sign in with the provider.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The id of the Idp to create a config for. Call ListDefaultSupportedIdps for list of all default supported Idps.
     */
    public readonly idpId!: pulumi.Output<string | undefined>;
    /**
     * The name of the DefaultSupportedIdpConfig resource, for example: "projects/my-awesome-project/defaultSupportedIdpConfigs/google.com"
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a DefaultSupportedIdpConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultSupportedIdpConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["appleSignInConfig"] = args ? args.appleSignInConfig : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["idpId"] = args ? args.idpId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        } else {
            resourceInputs["appleSignInConfig"] = undefined /*out*/;
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["clientSecret"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["idpId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["project", "tenantId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DefaultSupportedIdpConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DefaultSupportedIdpConfig resource.
 */
export interface DefaultSupportedIdpConfigArgs {
    /**
     * Additional config for Apple-based projects.
     */
    appleSignInConfig?: pulumi.Input<inputs.identitytoolkit.v2.GoogleCloudIdentitytoolkitAdminV2AppleSignInConfigArgs>;
    /**
     * OAuth client ID.
     */
    clientId?: pulumi.Input<string>;
    /**
     * OAuth client secret.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * True if allows the user to sign in with the provider.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The id of the Idp to create a config for. Call ListDefaultSupportedIdps for list of all default supported Idps.
     */
    idpId?: pulumi.Input<string>;
    /**
     * The name of the DefaultSupportedIdpConfig resource, for example: "projects/my-awesome-project/defaultSupportedIdpConfigs/google.com"
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    tenantId: pulumi.Input<string>;
}
