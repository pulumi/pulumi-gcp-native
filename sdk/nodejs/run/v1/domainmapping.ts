// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a new domain mapping.
 */
export class Domainmapping extends pulumi.CustomResource {
    /**
     * Get an existing Domainmapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Domainmapping {
        return new Domainmapping(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:run/v1:Domainmapping';

    /**
     * Returns true if the given object is an instance of Domainmapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domainmapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domainmapping.__pulumiType;
    }

    /**
     * The API version for this call such as "domains.cloudrun.com/v1".
     */
    public readonly apiVersion!: pulumi.Output<string>;
    /**
     * The kind of resource, in this case "DomainMapping".
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * Metadata associated with this BuildTemplate.
     */
    public readonly metadata!: pulumi.Output<outputs.run.v1.ObjectMetaResponse>;
    /**
     * The spec for this DomainMapping.
     */
    public readonly spec!: pulumi.Output<outputs.run.v1.DomainMappingSpecResponse>;
    /**
     * The current status of the DomainMapping.
     */
    public readonly status!: pulumi.Output<outputs.run.v1.DomainMappingStatusResponse>;

    /**
     * Create a Domainmapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainmappingArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.domainmappingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainmappingId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            inputs["apiVersion"] = args ? args.apiVersion : undefined;
            inputs["domainmappingId"] = args ? args.domainmappingId : undefined;
            inputs["dryRun"] = args ? args.dryRun : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["spec"] = args ? args.spec : undefined;
            inputs["status"] = args ? args.status : undefined;
        } else {
            inputs["apiVersion"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["spec"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Domainmapping.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Domainmapping resource.
 */
export interface DomainmappingArgs {
    /**
     * The API version for this call such as "domains.cloudrun.com/v1".
     */
    readonly apiVersion?: pulumi.Input<string>;
    readonly domainmappingId: pulumi.Input<string>;
    readonly dryRun?: pulumi.Input<string>;
    /**
     * The kind of resource, in this case "DomainMapping".
     */
    readonly kind?: pulumi.Input<string>;
    readonly location: pulumi.Input<string>;
    /**
     * Metadata associated with this BuildTemplate.
     */
    readonly metadata?: pulumi.Input<inputs.run.v1.ObjectMetaArgs>;
    readonly project: pulumi.Input<string>;
    /**
     * The spec for this DomainMapping.
     */
    readonly spec?: pulumi.Input<inputs.run.v1.DomainMappingSpecArgs>;
    /**
     * The current status of the DomainMapping.
     */
    readonly status?: pulumi.Input<inputs.run.v1.DomainMappingStatusArgs>;
}
