// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets details of a single Instance.
 */
export function getInstance(args: GetInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:looker/v1:getInstance", {
        "instanceId": args.instanceId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetInstanceArgs {
    instanceId: string;
    location: string;
    project?: string;
}

export interface GetInstanceResult {
    /**
     * Looker Instance Admin settings.
     */
    readonly adminSettings: outputs.looker.v1.AdminSettingsResponse;
    /**
     * Network name in the consumer project. Format: `projects/{project}/global/networks/{network}`. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.
     */
    readonly consumerNetwork: string;
    /**
     * The time when the Looker instance provisioning was first requested.
     */
    readonly createTime: string;
    readonly customDomain: outputs.looker.v1.CustomDomainResponse;
    /**
     * Maintenance denial period for this instance.
     */
    readonly denyMaintenancePeriod: outputs.looker.v1.DenyMaintenancePeriodResponse;
    /**
     * Public Egress IP (IPv4).
     */
    readonly egressPublicIp: string;
    /**
     * Encryption configuration (CMEK). Only set if CMEK has been enabled on the instance.
     */
    readonly encryptionConfig: outputs.looker.v1.EncryptionConfigResponse;
    /**
     * Private Ingress IP (IPv4).
     */
    readonly ingressPrivateIp: string;
    /**
     * Public Ingress IP (IPv4).
     */
    readonly ingressPublicIp: string;
    /**
     * Last computed maintenance denial period for this instance.
     */
    readonly lastDenyMaintenancePeriod: outputs.looker.v1.DenyMaintenancePeriodResponse;
    /**
     * Looker instance URI which can be used to access the Looker Instance UI.
     */
    readonly lookerUri: string;
    /**
     * The Looker version that the instance is using.
     */
    readonly lookerVersion: string;
    /**
     * Maintenance schedule for this instance.
     */
    readonly maintenanceSchedule: outputs.looker.v1.MaintenanceScheduleResponse;
    /**
     * Maintenance window for this instance.
     */
    readonly maintenanceWindow: outputs.looker.v1.MaintenanceWindowResponse;
    /**
     * Format: `projects/{project}/locations/{location}/instances/{instance}`.
     */
    readonly name: string;
    /**
     * Looker instance OAuth login settings.
     */
    readonly oauthConfig: outputs.looker.v1.OAuthConfigResponse;
    /**
     * Platform edition.
     */
    readonly platformEdition: string;
    /**
     * Whether private IP is enabled on the Looker instance.
     */
    readonly privateIpEnabled: boolean;
    /**
     * Whether public IP is enabled on the Looker instance.
     */
    readonly publicIpEnabled: boolean;
    /**
     * Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.
     */
    readonly reservedRange: string;
    /**
     * The state of the instance.
     */
    readonly state: string;
    /**
     * The time when the Looker instance was last updated.
     */
    readonly updateTime: string;
    /**
     * User metadata.
     */
    readonly userMetadata: outputs.looker.v1.UserMetadataResponse;
}
/**
 * Gets details of a single Instance.
 */
export function getInstanceOutput(args: GetInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstanceResult> {
    return pulumi.output(args).apply((a: any) => getInstance(a, opts))
}

export interface GetInstanceOutputArgs {
    instanceId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
