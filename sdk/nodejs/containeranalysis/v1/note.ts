// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new note.
 * Auto-naming is currently not supported for this resource.
 */
export class Note extends pulumi.CustomResource {
    /**
     * Get an existing Note resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Note {
        return new Note(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:containeranalysis/v1:Note';

    /**
     * Returns true if the given object is an instance of Note.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Note {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Note.__pulumiType;
    }

    /**
     * A note describing an attestation role.
     */
    public readonly attestation!: pulumi.Output<outputs.containeranalysis.v1.AttestationNoteResponse>;
    /**
     * A note describing build provenance for a verifiable build.
     */
    public readonly build!: pulumi.Output<outputs.containeranalysis.v1.BuildNoteResponse>;
    /**
     * A note describing a compliance check.
     */
    public readonly compliance!: pulumi.Output<outputs.containeranalysis.v1.ComplianceNoteResponse>;
    /**
     * The time this note was created. This field can be used as a filter in list requests.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A note describing something that can be deployed.
     */
    public readonly deployment!: pulumi.Output<outputs.containeranalysis.v1.DeploymentNoteResponse>;
    /**
     * A note describing the initial analysis of a resource.
     */
    public readonly discovery!: pulumi.Output<outputs.containeranalysis.v1.DiscoveryNoteResponse>;
    /**
     * A note describing a dsse attestation note.
     */
    public readonly dsseAttestation!: pulumi.Output<outputs.containeranalysis.v1.DSSEAttestationNoteResponse>;
    /**
     * Time of expiration for this note. Empty if note does not expire.
     */
    public readonly expirationTime!: pulumi.Output<string>;
    /**
     * A note describing a base image.
     */
    public readonly image!: pulumi.Output<outputs.containeranalysis.v1.ImageNoteResponse>;
    /**
     * The type of analysis. This field can be used as a filter in list requests.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * A detailed description of this note.
     */
    public readonly longDescription!: pulumi.Output<string>;
    /**
     * The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * A note describing a package hosted by various package managers.
     */
    public readonly package!: pulumi.Output<outputs.containeranalysis.v1.PackageNoteResponse>;
    /**
     * Other notes related to this note.
     */
    public readonly relatedNoteNames!: pulumi.Output<string[]>;
    /**
     * URLs associated with this note.
     */
    public readonly relatedUrl!: pulumi.Output<outputs.containeranalysis.v1.RelatedUrlResponse[]>;
    /**
     * A one sentence description of this note.
     */
    public readonly shortDescription!: pulumi.Output<string>;
    /**
     * The time this note was last updated. This field can be used as a filter in list requests.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * A note describing available package upgrades.
     */
    public readonly upgrade!: pulumi.Output<outputs.containeranalysis.v1.UpgradeNoteResponse>;
    /**
     * A note describing a package vulnerability.
     */
    public readonly vulnerability!: pulumi.Output<outputs.containeranalysis.v1.VulnerabilityNoteResponse>;

    /**
     * Create a Note resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NoteArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.noteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'noteId'");
            }
            inputs["attestation"] = args ? args.attestation : undefined;
            inputs["build"] = args ? args.build : undefined;
            inputs["compliance"] = args ? args.compliance : undefined;
            inputs["deployment"] = args ? args.deployment : undefined;
            inputs["discovery"] = args ? args.discovery : undefined;
            inputs["dsseAttestation"] = args ? args.dsseAttestation : undefined;
            inputs["expirationTime"] = args ? args.expirationTime : undefined;
            inputs["image"] = args ? args.image : undefined;
            inputs["longDescription"] = args ? args.longDescription : undefined;
            inputs["noteId"] = args ? args.noteId : undefined;
            inputs["package"] = args ? args.package : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["relatedNoteNames"] = args ? args.relatedNoteNames : undefined;
            inputs["relatedUrl"] = args ? args.relatedUrl : undefined;
            inputs["shortDescription"] = args ? args.shortDescription : undefined;
            inputs["upgrade"] = args ? args.upgrade : undefined;
            inputs["vulnerability"] = args ? args.vulnerability : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        } else {
            inputs["attestation"] = undefined /*out*/;
            inputs["build"] = undefined /*out*/;
            inputs["compliance"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["deployment"] = undefined /*out*/;
            inputs["discovery"] = undefined /*out*/;
            inputs["dsseAttestation"] = undefined /*out*/;
            inputs["expirationTime"] = undefined /*out*/;
            inputs["image"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["longDescription"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["package"] = undefined /*out*/;
            inputs["relatedNoteNames"] = undefined /*out*/;
            inputs["relatedUrl"] = undefined /*out*/;
            inputs["shortDescription"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
            inputs["upgrade"] = undefined /*out*/;
            inputs["vulnerability"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Note.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Note resource.
 */
export interface NoteArgs {
    /**
     * A note describing an attestation role.
     */
    attestation?: pulumi.Input<inputs.containeranalysis.v1.AttestationNoteArgs>;
    /**
     * A note describing build provenance for a verifiable build.
     */
    build?: pulumi.Input<inputs.containeranalysis.v1.BuildNoteArgs>;
    /**
     * A note describing a compliance check.
     */
    compliance?: pulumi.Input<inputs.containeranalysis.v1.ComplianceNoteArgs>;
    /**
     * A note describing something that can be deployed.
     */
    deployment?: pulumi.Input<inputs.containeranalysis.v1.DeploymentNoteArgs>;
    /**
     * A note describing the initial analysis of a resource.
     */
    discovery?: pulumi.Input<inputs.containeranalysis.v1.DiscoveryNoteArgs>;
    /**
     * A note describing a dsse attestation note.
     */
    dsseAttestation?: pulumi.Input<inputs.containeranalysis.v1.DSSEAttestationNoteArgs>;
    /**
     * Time of expiration for this note. Empty if note does not expire.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * A note describing a base image.
     */
    image?: pulumi.Input<inputs.containeranalysis.v1.ImageNoteArgs>;
    /**
     * A detailed description of this note.
     */
    longDescription?: pulumi.Input<string>;
    noteId: pulumi.Input<string>;
    /**
     * A note describing a package hosted by various package managers.
     */
    package?: pulumi.Input<inputs.containeranalysis.v1.PackageNoteArgs>;
    project?: pulumi.Input<string>;
    /**
     * Other notes related to this note.
     */
    relatedNoteNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URLs associated with this note.
     */
    relatedUrl?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1.RelatedUrlArgs>[]>;
    /**
     * A one sentence description of this note.
     */
    shortDescription?: pulumi.Input<string>;
    /**
     * A note describing available package upgrades.
     */
    upgrade?: pulumi.Input<inputs.containeranalysis.v1.UpgradeNoteArgs>;
    /**
     * A note describing a package vulnerability.
     */
    vulnerability?: pulumi.Input<inputs.containeranalysis.v1.VulnerabilityNoteArgs>;
}
