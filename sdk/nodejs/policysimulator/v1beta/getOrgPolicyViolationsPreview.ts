// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * GetOrgPolicyViolationsPreview gets the specified OrgPolicyViolationsPreview. Each OrgPolicyViolationsPreview is available for at least 7 days.
 */
export function getOrgPolicyViolationsPreview(args: GetOrgPolicyViolationsPreviewArgs, opts?: pulumi.InvokeOptions): Promise<GetOrgPolicyViolationsPreviewResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:policysimulator/v1beta:getOrgPolicyViolationsPreview", {
        "location": args.location,
        "orgPolicyViolationsPreviewId": args.orgPolicyViolationsPreviewId,
        "organizationId": args.organizationId,
    }, opts);
}

export interface GetOrgPolicyViolationsPreviewArgs {
    location: string;
    orgPolicyViolationsPreviewId: string;
    organizationId: string;
}

export interface GetOrgPolicyViolationsPreviewResult {
    /**
     * Time when this `OrgPolicyViolationsPreview` was created.
     */
    readonly createTime: string;
    /**
     * The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`
     */
    readonly customConstraints: string[];
    /**
     * The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`
     */
    readonly name: string;
    /**
     * The proposed changes we are previewing violations for.
     */
    readonly overlay: outputs.policysimulator.v1beta.GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayResponse;
    /**
     * A summary of the state of all resources scanned for compliance with the changed OrgPolicy.
     */
    readonly resourceCounts: outputs.policysimulator.v1beta.GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCountsResponse;
    /**
     * The state of the `OrgPolicyViolationsPreview`.
     */
    readonly state: string;
    /**
     * The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.
     */
    readonly violationsCount: number;
}
/**
 * GetOrgPolicyViolationsPreview gets the specified OrgPolicyViolationsPreview. Each OrgPolicyViolationsPreview is available for at least 7 days.
 */
export function getOrgPolicyViolationsPreviewOutput(args: GetOrgPolicyViolationsPreviewOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOrgPolicyViolationsPreviewResult> {
    return pulumi.output(args).apply((a: any) => getOrgPolicyViolationsPreview(a, opts))
}

export interface GetOrgPolicyViolationsPreviewOutputArgs {
    location: pulumi.Input<string>;
    orgPolicyViolationsPreviewId: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
}
