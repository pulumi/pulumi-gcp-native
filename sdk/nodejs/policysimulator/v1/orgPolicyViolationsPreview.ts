// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * CreateOrgPolicyViolationsPreview creates an OrgPolicyViolationsPreview for the proposed changes in the provided OrgPolicyViolationsPreview.OrgPolicyOverlay. The changes to OrgPolicy are specified by this `OrgPolicyOverlay`. The resources to scan are inferred from these specified changes.
 * Auto-naming is currently not supported for this resource.
 * Note - this resource's API doesn't support deletion. When deleted, the resource will persist
 * on Google Cloud even though it will be deleted from Pulumi state.
 */
export class OrgPolicyViolationsPreview extends pulumi.CustomResource {
    /**
     * Get an existing OrgPolicyViolationsPreview resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): OrgPolicyViolationsPreview {
        return new OrgPolicyViolationsPreview(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:policysimulator/v1:OrgPolicyViolationsPreview';

    /**
     * Returns true if the given object is an instance of OrgPolicyViolationsPreview.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgPolicyViolationsPreview {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgPolicyViolationsPreview.__pulumiType;
    }

    /**
     * Time when this `OrgPolicyViolationsPreview` was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`
     */
    public /*out*/ readonly customConstraints!: pulumi.Output<string[]>;
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Optional. An optional user-specified ID for the OrgPolicyViolationsPreview. If not provided, a random ID will be generated.
     */
    public readonly orgPolicyViolationsPreviewId!: pulumi.Output<string | undefined>;
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * The proposed changes we are previewing violations for.
     */
    public readonly overlay!: pulumi.Output<outputs.policysimulator.v1.GoogleCloudPolicysimulatorV1OrgPolicyOverlayResponse>;
    /**
     * A summary of the state of all resources scanned for compliance with the changed OrgPolicy.
     */
    public /*out*/ readonly resourceCounts!: pulumi.Output<outputs.policysimulator.v1.GoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCountsResponse>;
    /**
     * The state of the `OrgPolicyViolationsPreview`.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.
     */
    public /*out*/ readonly violationsCount!: pulumi.Output<number>;

    /**
     * Create a OrgPolicyViolationsPreview resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgPolicyViolationsPreviewArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.overlay === undefined) && !opts.urn) {
                throw new Error("Missing required property 'overlay'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["orgPolicyViolationsPreviewId"] = args ? args.orgPolicyViolationsPreviewId : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["overlay"] = args ? args.overlay : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["customConstraints"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resourceCounts"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["violationsCount"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["customConstraints"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["orgPolicyViolationsPreviewId"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["overlay"] = undefined /*out*/;
            resourceInputs["resourceCounts"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["violationsCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "organizationId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(OrgPolicyViolationsPreview.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a OrgPolicyViolationsPreview resource.
 */
export interface OrgPolicyViolationsPreviewArgs {
    location?: pulumi.Input<string>;
    /**
     * Optional. An optional user-specified ID for the OrgPolicyViolationsPreview. If not provided, a random ID will be generated.
     */
    orgPolicyViolationsPreviewId?: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
    /**
     * The proposed changes we are previewing violations for.
     */
    overlay: pulumi.Input<inputs.policysimulator.v1.GoogleCloudPolicysimulatorV1OrgPolicyOverlayArgs>;
}
