// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates and starts a Replay using the given ReplayConfig.
 */
export class FolderReplay extends pulumi.CustomResource {
    /**
     * Get an existing FolderReplay resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): FolderReplay {
        return new FolderReplay(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:policysimulator/v1beta1:FolderReplay';

    /**
     * Returns true if the given object is an instance of FolderReplay.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FolderReplay {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FolderReplay.__pulumiType;
    }


    /**
     * Create a FolderReplay resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FolderReplayArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.foldersId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'foldersId'");
            }
            if ((!args || args.locationsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationsId'");
            }
            inputs["config"] = args ? args.config : undefined;
            inputs["foldersId"] = args ? args.foldersId : undefined;
            inputs["locationsId"] = args ? args.locationsId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resultsSummary"] = args ? args.resultsSummary : undefined;
            inputs["state"] = args ? args.state : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FolderReplay.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a FolderReplay resource.
 */
export interface FolderReplayArgs {
    /**
     * Required. The configuration used for the `Replay`.
     */
    readonly config?: pulumi.Input<inputs.policysimulator.v1beta1.GoogleCloudPolicysimulatorV1beta1ReplayConfig>;
    readonly foldersId: pulumi.Input<string>;
    readonly locationsId: pulumi.Input<string>;
    /**
     * Output only. The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Output only. Summary statistics about the replayed log entries.
     */
    readonly resultsSummary?: pulumi.Input<inputs.policysimulator.v1beta1.GoogleCloudPolicysimulatorV1beta1ReplayResultsSummary>;
    /**
     * Output only. The current state of the `Replay`.
     */
    readonly state?: pulumi.Input<string>;
}
