// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a node.
 * Auto-naming is currently not supported for this resource.
 */
export class Node extends pulumi.CustomResource {
    /**
     * Get an existing Node resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Node {
        return new Node(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:tpu/v2alpha1:Node';

    /**
     * Returns true if the given object is an instance of Node.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Node {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Node.__pulumiType;
    }

    /**
     * The type of hardware accelerators associated with this node.
     */
    public readonly acceleratorType!: pulumi.Output<string>;
    /**
     * The API version that created this Node.
     */
    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * The time when the node was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The additional data disks for the Node.
     */
    public readonly dataDisks!: pulumi.Output<outputs.tpu.v2alpha1.AttachedDiskResponse[]>;
    /**
     * The user-supplied description of the TPU. Maximum of 512 characters.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The health status of the TPU node.
     */
    public readonly health!: pulumi.Output<string>;
    /**
     * If this field is populated, it contains a description of why the TPU Node is unhealthy.
     */
    public /*out*/ readonly healthDescription!: pulumi.Output<string>;
    /**
     * Resource labels to represent user-provided metadata.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Immutable. The name of the TPU.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Network configurations for the TPU node.
     */
    public readonly networkConfig!: pulumi.Output<outputs.tpu.v2alpha1.NetworkConfigResponse>;
    /**
     * The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
     */
    public /*out*/ readonly networkEndpoints!: pulumi.Output<outputs.tpu.v2alpha1.NetworkEndpointResponse[]>;
    /**
     * The runtime version running in the Node.
     */
    public readonly runtimeVersion!: pulumi.Output<string>;
    /**
     * The scheduling options for this node.
     */
    public readonly schedulingConfig!: pulumi.Output<outputs.tpu.v2alpha1.SchedulingConfigResponse>;
    /**
     * The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
     */
    public readonly serviceAccount!: pulumi.Output<outputs.tpu.v2alpha1.ServiceAccountResponse>;
    /**
     * The current state for the TPU Node.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The Symptoms that have occurred to the TPU Node.
     */
    public /*out*/ readonly symptoms!: pulumi.Output<outputs.tpu.v2alpha1.SymptomResponse[]>;
    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     */
    public readonly tags!: pulumi.Output<string[]>;

    /**
     * Create a Node resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.acceleratorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceleratorType'");
            }
            if ((!args || args.runtimeVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeVersion'");
            }
            inputs["acceleratorType"] = args ? args.acceleratorType : undefined;
            inputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            inputs["dataDisks"] = args ? args.dataDisks : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["health"] = args ? args.health : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["networkConfig"] = args ? args.networkConfig : undefined;
            inputs["nodeId"] = args ? args.nodeId : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["runtimeVersion"] = args ? args.runtimeVersion : undefined;
            inputs["schedulingConfig"] = args ? args.schedulingConfig : undefined;
            inputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["apiVersion"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["healthDescription"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["networkEndpoints"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["symptoms"] = undefined /*out*/;
        } else {
            inputs["acceleratorType"] = undefined /*out*/;
            inputs["apiVersion"] = undefined /*out*/;
            inputs["cidrBlock"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["dataDisks"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["health"] = undefined /*out*/;
            inputs["healthDescription"] = undefined /*out*/;
            inputs["labels"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["networkConfig"] = undefined /*out*/;
            inputs["networkEndpoints"] = undefined /*out*/;
            inputs["runtimeVersion"] = undefined /*out*/;
            inputs["schedulingConfig"] = undefined /*out*/;
            inputs["serviceAccount"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["symptoms"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Node.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Node resource.
 */
export interface NodeArgs {
    /**
     * The type of hardware accelerators associated with this node.
     */
    acceleratorType: pulumi.Input<string>;
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * The additional data disks for the Node.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.tpu.v2alpha1.AttachedDiskArgs>[]>;
    /**
     * The user-supplied description of the TPU. Maximum of 512 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The health status of the TPU node.
     */
    health?: pulumi.Input<enums.tpu.v2alpha1.NodeHealth>;
    /**
     * Resource labels to represent user-provided metadata.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Network configurations for the TPU node.
     */
    networkConfig?: pulumi.Input<inputs.tpu.v2alpha1.NetworkConfigArgs>;
    nodeId?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The runtime version running in the Node.
     */
    runtimeVersion: pulumi.Input<string>;
    /**
     * The scheduling options for this node.
     */
    schedulingConfig?: pulumi.Input<inputs.tpu.v2alpha1.SchedulingConfigArgs>;
    /**
     * The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
     */
    serviceAccount?: pulumi.Input<inputs.tpu.v2alpha1.ServiceAccountArgs>;
    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
