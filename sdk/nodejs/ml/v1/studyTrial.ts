// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Adds a user provided trial to a study.
 */
export class StudyTrial extends pulumi.CustomResource {
    /**
     * Get an existing StudyTrial resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StudyTrial {
        return new StudyTrial(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:ml/v1:StudyTrial';

    /**
     * Returns true if the given object is an instance of StudyTrial.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StudyTrial {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StudyTrial.__pulumiType;
    }


    /**
     * Create a StudyTrial resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StudyTrialArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.locationsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationsId'");
            }
            if ((!args || args.projectsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectsId'");
            }
            if ((!args || args.studiesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studiesId'");
            }
            if ((!args || args.trialsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trialsId'");
            }
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["endTime"] = args ? args.endTime : undefined;
            inputs["finalMeasurement"] = args ? args.finalMeasurement : undefined;
            inputs["infeasibleReason"] = args ? args.infeasibleReason : undefined;
            inputs["locationsId"] = args ? args.locationsId : undefined;
            inputs["measurements"] = args ? args.measurements : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["projectsId"] = args ? args.projectsId : undefined;
            inputs["startTime"] = args ? args.startTime : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["studiesId"] = args ? args.studiesId : undefined;
            inputs["trialInfeasible"] = args ? args.trialInfeasible : undefined;
            inputs["trialsId"] = args ? args.trialsId : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(StudyTrial.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a StudyTrial resource.
 */
export interface StudyTrialArgs {
    /**
     * Output only. The identifier of the client that originally requested this trial.
     */
    readonly clientId?: pulumi.Input<string>;
    /**
     * Output only. Time at which the trial's status changed to COMPLETED.
     */
    readonly endTime?: pulumi.Input<string>;
    /**
     * The final measurement containing the objective value.
     */
    readonly finalMeasurement?: pulumi.Input<inputs.ml.v1.GoogleCloudMlV1__Measurement>;
    /**
     * Output only. A human readable string describing why the trial is infeasible. This should only be set if trial_infeasible is true.
     */
    readonly infeasibleReason?: pulumi.Input<string>;
    readonly locationsId: pulumi.Input<string>;
    /**
     * A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_time). These are used for early stopping computations.
     */
    readonly measurements?: pulumi.Input<pulumi.Input<inputs.ml.v1.GoogleCloudMlV1__Measurement>[]>;
    /**
     * Output only. Name of the trial assigned by the service.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The parameters of the trial.
     */
    readonly parameters?: pulumi.Input<pulumi.Input<inputs.ml.v1.GoogleCloudMlV1_Trial_Parameter>[]>;
    readonly projectsId: pulumi.Input<string>;
    /**
     * Output only. Time at which the trial was started.
     */
    readonly startTime?: pulumi.Input<string>;
    /**
     * The detailed state of a trial.
     */
    readonly state?: pulumi.Input<string>;
    readonly studiesId: pulumi.Input<string>;
    /**
     * Output only. If true, the parameters in this trial are not attempted again.
     */
    readonly trialInfeasible?: pulumi.Input<boolean>;
    readonly trialsId: pulumi.Input<string>;
}
