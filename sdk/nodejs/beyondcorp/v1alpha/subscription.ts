// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new BeyondCorp Enterprise Subscription in a given organization. Location will always be global as BeyondCorp subscriptions are per organization.
 * Note - this resource's API doesn't support deletion. When deleted, the resource will persist
 * on Google Cloud even though it will be deleted from Pulumi state.
 */
export class Subscription extends pulumi.CustomResource {
    /**
     * Get an existing Subscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Subscription {
        return new Subscription(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:beyondcorp/v1alpha:Subscription';

    /**
     * Returns true if the given object is an instance of Subscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subscription.__pulumiType;
    }

    /**
     * Represents that, if subscription will renew or end when the term ends.
     */
    public /*out*/ readonly autoRenewEnabled!: pulumi.Output<boolean>;
    /**
     * Create time of the subscription.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * End time of the subscription.
     */
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Unique resource name of the Subscription. The name is ignored when creating a subscription.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * Optional. Number of seats in the subscription.
     */
    public readonly seatCount!: pulumi.Output<string>;
    /**
     * SKU of subscription.
     */
    public readonly sku!: pulumi.Output<string>;
    /**
     * Start time of the subscription.
     */
    public /*out*/ readonly startTime!: pulumi.Output<string>;
    /**
     * The current state of the subscription.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Type of subscription.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Subscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["seatCount"] = args ? args.seatCount : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["autoRenewEnabled"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        } else {
            resourceInputs["autoRenewEnabled"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["seatCount"] = undefined /*out*/;
            resourceInputs["sku"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "organizationId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Subscription.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Subscription resource.
 */
export interface SubscriptionArgs {
    location?: pulumi.Input<string>;
    /**
     * Unique resource name of the Subscription. The name is ignored when creating a subscription.
     */
    name?: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
    /**
     * Optional. Number of seats in the subscription.
     */
    seatCount?: pulumi.Input<string>;
    /**
     * SKU of subscription.
     */
    sku: pulumi.Input<enums.beyondcorp.v1alpha.SubscriptionSku>;
    /**
     * Type of subscription.
     */
    type: pulumi.Input<enums.beyondcorp.v1alpha.SubscriptionType>;
}
