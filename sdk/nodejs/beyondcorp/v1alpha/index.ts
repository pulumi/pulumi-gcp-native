// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AppConnectionArgs } from "./appConnection";
export type AppConnection = import("./appConnection").AppConnection;
export const AppConnection: typeof import("./appConnection").AppConnection = null as any;
utilities.lazyLoad(exports, ["AppConnection"], () => require("./appConnection"));

export { AppConnectionIamBindingArgs } from "./appConnectionIamBinding";
export type AppConnectionIamBinding = import("./appConnectionIamBinding").AppConnectionIamBinding;
export const AppConnectionIamBinding: typeof import("./appConnectionIamBinding").AppConnectionIamBinding = null as any;
utilities.lazyLoad(exports, ["AppConnectionIamBinding"], () => require("./appConnectionIamBinding"));

export { AppConnectionIamMemberArgs } from "./appConnectionIamMember";
export type AppConnectionIamMember = import("./appConnectionIamMember").AppConnectionIamMember;
export const AppConnectionIamMember: typeof import("./appConnectionIamMember").AppConnectionIamMember = null as any;
utilities.lazyLoad(exports, ["AppConnectionIamMember"], () => require("./appConnectionIamMember"));

export { AppConnectionIamPolicyArgs } from "./appConnectionIamPolicy";
export type AppConnectionIamPolicy = import("./appConnectionIamPolicy").AppConnectionIamPolicy;
export const AppConnectionIamPolicy: typeof import("./appConnectionIamPolicy").AppConnectionIamPolicy = null as any;
utilities.lazyLoad(exports, ["AppConnectionIamPolicy"], () => require("./appConnectionIamPolicy"));

export { AppConnectorArgs } from "./appConnector";
export type AppConnector = import("./appConnector").AppConnector;
export const AppConnector: typeof import("./appConnector").AppConnector = null as any;
utilities.lazyLoad(exports, ["AppConnector"], () => require("./appConnector"));

export { AppConnectorIamBindingArgs } from "./appConnectorIamBinding";
export type AppConnectorIamBinding = import("./appConnectorIamBinding").AppConnectorIamBinding;
export const AppConnectorIamBinding: typeof import("./appConnectorIamBinding").AppConnectorIamBinding = null as any;
utilities.lazyLoad(exports, ["AppConnectorIamBinding"], () => require("./appConnectorIamBinding"));

export { AppConnectorIamMemberArgs } from "./appConnectorIamMember";
export type AppConnectorIamMember = import("./appConnectorIamMember").AppConnectorIamMember;
export const AppConnectorIamMember: typeof import("./appConnectorIamMember").AppConnectorIamMember = null as any;
utilities.lazyLoad(exports, ["AppConnectorIamMember"], () => require("./appConnectorIamMember"));

export { AppConnectorIamPolicyArgs } from "./appConnectorIamPolicy";
export type AppConnectorIamPolicy = import("./appConnectorIamPolicy").AppConnectorIamPolicy;
export const AppConnectorIamPolicy: typeof import("./appConnectorIamPolicy").AppConnectorIamPolicy = null as any;
utilities.lazyLoad(exports, ["AppConnectorIamPolicy"], () => require("./appConnectorIamPolicy"));

export { AppGatewayArgs } from "./appGateway";
export type AppGateway = import("./appGateway").AppGateway;
export const AppGateway: typeof import("./appGateway").AppGateway = null as any;
utilities.lazyLoad(exports, ["AppGateway"], () => require("./appGateway"));

export { AppGatewayIamBindingArgs } from "./appGatewayIamBinding";
export type AppGatewayIamBinding = import("./appGatewayIamBinding").AppGatewayIamBinding;
export const AppGatewayIamBinding: typeof import("./appGatewayIamBinding").AppGatewayIamBinding = null as any;
utilities.lazyLoad(exports, ["AppGatewayIamBinding"], () => require("./appGatewayIamBinding"));

export { AppGatewayIamMemberArgs } from "./appGatewayIamMember";
export type AppGatewayIamMember = import("./appGatewayIamMember").AppGatewayIamMember;
export const AppGatewayIamMember: typeof import("./appGatewayIamMember").AppGatewayIamMember = null as any;
utilities.lazyLoad(exports, ["AppGatewayIamMember"], () => require("./appGatewayIamMember"));

export { AppGatewayIamPolicyArgs } from "./appGatewayIamPolicy";
export type AppGatewayIamPolicy = import("./appGatewayIamPolicy").AppGatewayIamPolicy;
export const AppGatewayIamPolicy: typeof import("./appGatewayIamPolicy").AppGatewayIamPolicy = null as any;
utilities.lazyLoad(exports, ["AppGatewayIamPolicy"], () => require("./appGatewayIamPolicy"));

export { ApplicationDomainIamBindingArgs } from "./applicationDomainIamBinding";
export type ApplicationDomainIamBinding = import("./applicationDomainIamBinding").ApplicationDomainIamBinding;
export const ApplicationDomainIamBinding: typeof import("./applicationDomainIamBinding").ApplicationDomainIamBinding = null as any;
utilities.lazyLoad(exports, ["ApplicationDomainIamBinding"], () => require("./applicationDomainIamBinding"));

export { ApplicationDomainIamMemberArgs } from "./applicationDomainIamMember";
export type ApplicationDomainIamMember = import("./applicationDomainIamMember").ApplicationDomainIamMember;
export const ApplicationDomainIamMember: typeof import("./applicationDomainIamMember").ApplicationDomainIamMember = null as any;
utilities.lazyLoad(exports, ["ApplicationDomainIamMember"], () => require("./applicationDomainIamMember"));

export { ApplicationDomainIamPolicyArgs } from "./applicationDomainIamPolicy";
export type ApplicationDomainIamPolicy = import("./applicationDomainIamPolicy").ApplicationDomainIamPolicy;
export const ApplicationDomainIamPolicy: typeof import("./applicationDomainIamPolicy").ApplicationDomainIamPolicy = null as any;
utilities.lazyLoad(exports, ["ApplicationDomainIamPolicy"], () => require("./applicationDomainIamPolicy"));

export { ApplicationIamBindingArgs } from "./applicationIamBinding";
export type ApplicationIamBinding = import("./applicationIamBinding").ApplicationIamBinding;
export const ApplicationIamBinding: typeof import("./applicationIamBinding").ApplicationIamBinding = null as any;
utilities.lazyLoad(exports, ["ApplicationIamBinding"], () => require("./applicationIamBinding"));

export { ApplicationIamMemberArgs } from "./applicationIamMember";
export type ApplicationIamMember = import("./applicationIamMember").ApplicationIamMember;
export const ApplicationIamMember: typeof import("./applicationIamMember").ApplicationIamMember = null as any;
utilities.lazyLoad(exports, ["ApplicationIamMember"], () => require("./applicationIamMember"));

export { ApplicationIamPolicyArgs } from "./applicationIamPolicy";
export type ApplicationIamPolicy = import("./applicationIamPolicy").ApplicationIamPolicy;
export const ApplicationIamPolicy: typeof import("./applicationIamPolicy").ApplicationIamPolicy = null as any;
utilities.lazyLoad(exports, ["ApplicationIamPolicy"], () => require("./applicationIamPolicy"));

export { BrowserDlpRuleArgs } from "./browserDlpRule";
export type BrowserDlpRule = import("./browserDlpRule").BrowserDlpRule;
export const BrowserDlpRule: typeof import("./browserDlpRule").BrowserDlpRule = null as any;
utilities.lazyLoad(exports, ["BrowserDlpRule"], () => require("./browserDlpRule"));

export { ClientConnectorServiceIamBindingArgs } from "./clientConnectorServiceIamBinding";
export type ClientConnectorServiceIamBinding = import("./clientConnectorServiceIamBinding").ClientConnectorServiceIamBinding;
export const ClientConnectorServiceIamBinding: typeof import("./clientConnectorServiceIamBinding").ClientConnectorServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["ClientConnectorServiceIamBinding"], () => require("./clientConnectorServiceIamBinding"));

export { ClientConnectorServiceIamMemberArgs } from "./clientConnectorServiceIamMember";
export type ClientConnectorServiceIamMember = import("./clientConnectorServiceIamMember").ClientConnectorServiceIamMember;
export const ClientConnectorServiceIamMember: typeof import("./clientConnectorServiceIamMember").ClientConnectorServiceIamMember = null as any;
utilities.lazyLoad(exports, ["ClientConnectorServiceIamMember"], () => require("./clientConnectorServiceIamMember"));

export { ClientConnectorServiceIamPolicyArgs } from "./clientConnectorServiceIamPolicy";
export type ClientConnectorServiceIamPolicy = import("./clientConnectorServiceIamPolicy").ClientConnectorServiceIamPolicy;
export const ClientConnectorServiceIamPolicy: typeof import("./clientConnectorServiceIamPolicy").ClientConnectorServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["ClientConnectorServiceIamPolicy"], () => require("./clientConnectorServiceIamPolicy"));

export { ClientGatewayIamBindingArgs } from "./clientGatewayIamBinding";
export type ClientGatewayIamBinding = import("./clientGatewayIamBinding").ClientGatewayIamBinding;
export const ClientGatewayIamBinding: typeof import("./clientGatewayIamBinding").ClientGatewayIamBinding = null as any;
utilities.lazyLoad(exports, ["ClientGatewayIamBinding"], () => require("./clientGatewayIamBinding"));

export { ClientGatewayIamMemberArgs } from "./clientGatewayIamMember";
export type ClientGatewayIamMember = import("./clientGatewayIamMember").ClientGatewayIamMember;
export const ClientGatewayIamMember: typeof import("./clientGatewayIamMember").ClientGatewayIamMember = null as any;
utilities.lazyLoad(exports, ["ClientGatewayIamMember"], () => require("./clientGatewayIamMember"));

export { ClientGatewayIamPolicyArgs } from "./clientGatewayIamPolicy";
export type ClientGatewayIamPolicy = import("./clientGatewayIamPolicy").ClientGatewayIamPolicy;
export const ClientGatewayIamPolicy: typeof import("./clientGatewayIamPolicy").ClientGatewayIamPolicy = null as any;
utilities.lazyLoad(exports, ["ClientGatewayIamPolicy"], () => require("./clientGatewayIamPolicy"));

export { ConnectionArgs } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConnectionIamBindingArgs } from "./connectionIamBinding";
export type ConnectionIamBinding = import("./connectionIamBinding").ConnectionIamBinding;
export const ConnectionIamBinding: typeof import("./connectionIamBinding").ConnectionIamBinding = null as any;
utilities.lazyLoad(exports, ["ConnectionIamBinding"], () => require("./connectionIamBinding"));

export { ConnectionIamMemberArgs } from "./connectionIamMember";
export type ConnectionIamMember = import("./connectionIamMember").ConnectionIamMember;
export const ConnectionIamMember: typeof import("./connectionIamMember").ConnectionIamMember = null as any;
utilities.lazyLoad(exports, ["ConnectionIamMember"], () => require("./connectionIamMember"));

export { ConnectionIamPolicyArgs } from "./connectionIamPolicy";
export type ConnectionIamPolicy = import("./connectionIamPolicy").ConnectionIamPolicy;
export const ConnectionIamPolicy: typeof import("./connectionIamPolicy").ConnectionIamPolicy = null as any;
utilities.lazyLoad(exports, ["ConnectionIamPolicy"], () => require("./connectionIamPolicy"));

export { ConnectorArgs } from "./connector";
export type Connector = import("./connector").Connector;
export const Connector: typeof import("./connector").Connector = null as any;
utilities.lazyLoad(exports, ["Connector"], () => require("./connector"));

export { ConnectorIamBindingArgs } from "./connectorIamBinding";
export type ConnectorIamBinding = import("./connectorIamBinding").ConnectorIamBinding;
export const ConnectorIamBinding: typeof import("./connectorIamBinding").ConnectorIamBinding = null as any;
utilities.lazyLoad(exports, ["ConnectorIamBinding"], () => require("./connectorIamBinding"));

export { ConnectorIamMemberArgs } from "./connectorIamMember";
export type ConnectorIamMember = import("./connectorIamMember").ConnectorIamMember;
export const ConnectorIamMember: typeof import("./connectorIamMember").ConnectorIamMember = null as any;
utilities.lazyLoad(exports, ["ConnectorIamMember"], () => require("./connectorIamMember"));

export { ConnectorIamPolicyArgs } from "./connectorIamPolicy";
export type ConnectorIamPolicy = import("./connectorIamPolicy").ConnectorIamPolicy;
export const ConnectorIamPolicy: typeof import("./connectorIamPolicy").ConnectorIamPolicy = null as any;
utilities.lazyLoad(exports, ["ConnectorIamPolicy"], () => require("./connectorIamPolicy"));

export { GetAppConnectionArgs, GetAppConnectionResult, GetAppConnectionOutputArgs } from "./getAppConnection";
export const getAppConnection: typeof import("./getAppConnection").getAppConnection = null as any;
export const getAppConnectionOutput: typeof import("./getAppConnection").getAppConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getAppConnection","getAppConnectionOutput"], () => require("./getAppConnection"));

export { GetAppConnectionIamPolicyArgs, GetAppConnectionIamPolicyResult, GetAppConnectionIamPolicyOutputArgs } from "./getAppConnectionIamPolicy";
export const getAppConnectionIamPolicy: typeof import("./getAppConnectionIamPolicy").getAppConnectionIamPolicy = null as any;
export const getAppConnectionIamPolicyOutput: typeof import("./getAppConnectionIamPolicy").getAppConnectionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAppConnectionIamPolicy","getAppConnectionIamPolicyOutput"], () => require("./getAppConnectionIamPolicy"));

export { GetAppConnectorArgs, GetAppConnectorResult, GetAppConnectorOutputArgs } from "./getAppConnector";
export const getAppConnector: typeof import("./getAppConnector").getAppConnector = null as any;
export const getAppConnectorOutput: typeof import("./getAppConnector").getAppConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getAppConnector","getAppConnectorOutput"], () => require("./getAppConnector"));

export { GetAppConnectorIamPolicyArgs, GetAppConnectorIamPolicyResult, GetAppConnectorIamPolicyOutputArgs } from "./getAppConnectorIamPolicy";
export const getAppConnectorIamPolicy: typeof import("./getAppConnectorIamPolicy").getAppConnectorIamPolicy = null as any;
export const getAppConnectorIamPolicyOutput: typeof import("./getAppConnectorIamPolicy").getAppConnectorIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAppConnectorIamPolicy","getAppConnectorIamPolicyOutput"], () => require("./getAppConnectorIamPolicy"));

export { GetAppGatewayArgs, GetAppGatewayResult, GetAppGatewayOutputArgs } from "./getAppGateway";
export const getAppGateway: typeof import("./getAppGateway").getAppGateway = null as any;
export const getAppGatewayOutput: typeof import("./getAppGateway").getAppGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getAppGateway","getAppGatewayOutput"], () => require("./getAppGateway"));

export { GetAppGatewayIamPolicyArgs, GetAppGatewayIamPolicyResult, GetAppGatewayIamPolicyOutputArgs } from "./getAppGatewayIamPolicy";
export const getAppGatewayIamPolicy: typeof import("./getAppGatewayIamPolicy").getAppGatewayIamPolicy = null as any;
export const getAppGatewayIamPolicyOutput: typeof import("./getAppGatewayIamPolicy").getAppGatewayIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAppGatewayIamPolicy","getAppGatewayIamPolicyOutput"], () => require("./getAppGatewayIamPolicy"));

export { GetApplicationDomainIamPolicyArgs, GetApplicationDomainIamPolicyResult, GetApplicationDomainIamPolicyOutputArgs } from "./getApplicationDomainIamPolicy";
export const getApplicationDomainIamPolicy: typeof import("./getApplicationDomainIamPolicy").getApplicationDomainIamPolicy = null as any;
export const getApplicationDomainIamPolicyOutput: typeof import("./getApplicationDomainIamPolicy").getApplicationDomainIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationDomainIamPolicy","getApplicationDomainIamPolicyOutput"], () => require("./getApplicationDomainIamPolicy"));

export { GetApplicationIamPolicyArgs, GetApplicationIamPolicyResult, GetApplicationIamPolicyOutputArgs } from "./getApplicationIamPolicy";
export const getApplicationIamPolicy: typeof import("./getApplicationIamPolicy").getApplicationIamPolicy = null as any;
export const getApplicationIamPolicyOutput: typeof import("./getApplicationIamPolicy").getApplicationIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationIamPolicy","getApplicationIamPolicyOutput"], () => require("./getApplicationIamPolicy"));

export { GetBrowserDlpRuleArgs, GetBrowserDlpRuleResult, GetBrowserDlpRuleOutputArgs } from "./getBrowserDlpRule";
export const getBrowserDlpRule: typeof import("./getBrowserDlpRule").getBrowserDlpRule = null as any;
export const getBrowserDlpRuleOutput: typeof import("./getBrowserDlpRule").getBrowserDlpRuleOutput = null as any;
utilities.lazyLoad(exports, ["getBrowserDlpRule","getBrowserDlpRuleOutput"], () => require("./getBrowserDlpRule"));

export { GetClientConnectorServiceIamPolicyArgs, GetClientConnectorServiceIamPolicyResult, GetClientConnectorServiceIamPolicyOutputArgs } from "./getClientConnectorServiceIamPolicy";
export const getClientConnectorServiceIamPolicy: typeof import("./getClientConnectorServiceIamPolicy").getClientConnectorServiceIamPolicy = null as any;
export const getClientConnectorServiceIamPolicyOutput: typeof import("./getClientConnectorServiceIamPolicy").getClientConnectorServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getClientConnectorServiceIamPolicy","getClientConnectorServiceIamPolicyOutput"], () => require("./getClientConnectorServiceIamPolicy"));

export { GetClientGatewayIamPolicyArgs, GetClientGatewayIamPolicyResult, GetClientGatewayIamPolicyOutputArgs } from "./getClientGatewayIamPolicy";
export const getClientGatewayIamPolicy: typeof import("./getClientGatewayIamPolicy").getClientGatewayIamPolicy = null as any;
export const getClientGatewayIamPolicyOutput: typeof import("./getClientGatewayIamPolicy").getClientGatewayIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getClientGatewayIamPolicy","getClientGatewayIamPolicyOutput"], () => require("./getClientGatewayIamPolicy"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetConnectionIamPolicyArgs, GetConnectionIamPolicyResult, GetConnectionIamPolicyOutputArgs } from "./getConnectionIamPolicy";
export const getConnectionIamPolicy: typeof import("./getConnectionIamPolicy").getConnectionIamPolicy = null as any;
export const getConnectionIamPolicyOutput: typeof import("./getConnectionIamPolicy").getConnectionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionIamPolicy","getConnectionIamPolicyOutput"], () => require("./getConnectionIamPolicy"));

export { GetConnectorArgs, GetConnectorResult, GetConnectorOutputArgs } from "./getConnector";
export const getConnector: typeof import("./getConnector").getConnector = null as any;
export const getConnectorOutput: typeof import("./getConnector").getConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getConnector","getConnectorOutput"], () => require("./getConnector"));

export { GetConnectorIamPolicyArgs, GetConnectorIamPolicyResult, GetConnectorIamPolicyOutputArgs } from "./getConnectorIamPolicy";
export const getConnectorIamPolicy: typeof import("./getConnectorIamPolicy").getConnectorIamPolicy = null as any;
export const getConnectorIamPolicyOutput: typeof import("./getConnectorIamPolicy").getConnectorIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorIamPolicy","getConnectorIamPolicyOutput"], () => require("./getConnectorIamPolicy"));

export { GetNetConnectionIamPolicyArgs, GetNetConnectionIamPolicyResult, GetNetConnectionIamPolicyOutputArgs } from "./getNetConnectionIamPolicy";
export const getNetConnectionIamPolicy: typeof import("./getNetConnectionIamPolicy").getNetConnectionIamPolicy = null as any;
export const getNetConnectionIamPolicyOutput: typeof import("./getNetConnectionIamPolicy").getNetConnectionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetConnectionIamPolicy","getNetConnectionIamPolicyOutput"], () => require("./getNetConnectionIamPolicy"));

export { GetOrganizationPartnerTenantBrowserDlpRuleIamPolicyArgs, GetOrganizationPartnerTenantBrowserDlpRuleIamPolicyResult, GetOrganizationPartnerTenantBrowserDlpRuleIamPolicyOutputArgs } from "./getOrganizationPartnerTenantBrowserDlpRuleIamPolicy";
export const getOrganizationPartnerTenantBrowserDlpRuleIamPolicy: typeof import("./getOrganizationPartnerTenantBrowserDlpRuleIamPolicy").getOrganizationPartnerTenantBrowserDlpRuleIamPolicy = null as any;
export const getOrganizationPartnerTenantBrowserDlpRuleIamPolicyOutput: typeof import("./getOrganizationPartnerTenantBrowserDlpRuleIamPolicy").getOrganizationPartnerTenantBrowserDlpRuleIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationPartnerTenantBrowserDlpRuleIamPolicy","getOrganizationPartnerTenantBrowserDlpRuleIamPolicyOutput"], () => require("./getOrganizationPartnerTenantBrowserDlpRuleIamPolicy"));

export { GetOrganizationPartnerTenantIamPolicyArgs, GetOrganizationPartnerTenantIamPolicyResult, GetOrganizationPartnerTenantIamPolicyOutputArgs } from "./getOrganizationPartnerTenantIamPolicy";
export const getOrganizationPartnerTenantIamPolicy: typeof import("./getOrganizationPartnerTenantIamPolicy").getOrganizationPartnerTenantIamPolicy = null as any;
export const getOrganizationPartnerTenantIamPolicyOutput: typeof import("./getOrganizationPartnerTenantIamPolicy").getOrganizationPartnerTenantIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationPartnerTenantIamPolicy","getOrganizationPartnerTenantIamPolicyOutput"], () => require("./getOrganizationPartnerTenantIamPolicy"));

export { GetOrganizationPartnerTenantProxyConfigIamPolicyArgs, GetOrganizationPartnerTenantProxyConfigIamPolicyResult, GetOrganizationPartnerTenantProxyConfigIamPolicyOutputArgs } from "./getOrganizationPartnerTenantProxyConfigIamPolicy";
export const getOrganizationPartnerTenantProxyConfigIamPolicy: typeof import("./getOrganizationPartnerTenantProxyConfigIamPolicy").getOrganizationPartnerTenantProxyConfigIamPolicy = null as any;
export const getOrganizationPartnerTenantProxyConfigIamPolicyOutput: typeof import("./getOrganizationPartnerTenantProxyConfigIamPolicy").getOrganizationPartnerTenantProxyConfigIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationPartnerTenantProxyConfigIamPolicy","getOrganizationPartnerTenantProxyConfigIamPolicyOutput"], () => require("./getOrganizationPartnerTenantProxyConfigIamPolicy"));

export { GetPartnerTenantArgs, GetPartnerTenantResult, GetPartnerTenantOutputArgs } from "./getPartnerTenant";
export const getPartnerTenant: typeof import("./getPartnerTenant").getPartnerTenant = null as any;
export const getPartnerTenantOutput: typeof import("./getPartnerTenant").getPartnerTenantOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerTenant","getPartnerTenantOutput"], () => require("./getPartnerTenant"));

export { GetProxyConfigArgs, GetProxyConfigResult, GetProxyConfigOutputArgs } from "./getProxyConfig";
export const getProxyConfig: typeof import("./getProxyConfig").getProxyConfig = null as any;
export const getProxyConfigOutput: typeof import("./getProxyConfig").getProxyConfigOutput = null as any;
utilities.lazyLoad(exports, ["getProxyConfig","getProxyConfigOutput"], () => require("./getProxyConfig"));

export { GetSubscriptionArgs, GetSubscriptionResult, GetSubscriptionOutputArgs } from "./getSubscription";
export const getSubscription: typeof import("./getSubscription").getSubscription = null as any;
export const getSubscriptionOutput: typeof import("./getSubscription").getSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getSubscription","getSubscriptionOutput"], () => require("./getSubscription"));

export { NetConnectionIamBindingArgs } from "./netConnectionIamBinding";
export type NetConnectionIamBinding = import("./netConnectionIamBinding").NetConnectionIamBinding;
export const NetConnectionIamBinding: typeof import("./netConnectionIamBinding").NetConnectionIamBinding = null as any;
utilities.lazyLoad(exports, ["NetConnectionIamBinding"], () => require("./netConnectionIamBinding"));

export { NetConnectionIamMemberArgs } from "./netConnectionIamMember";
export type NetConnectionIamMember = import("./netConnectionIamMember").NetConnectionIamMember;
export const NetConnectionIamMember: typeof import("./netConnectionIamMember").NetConnectionIamMember = null as any;
utilities.lazyLoad(exports, ["NetConnectionIamMember"], () => require("./netConnectionIamMember"));

export { NetConnectionIamPolicyArgs } from "./netConnectionIamPolicy";
export type NetConnectionIamPolicy = import("./netConnectionIamPolicy").NetConnectionIamPolicy;
export const NetConnectionIamPolicy: typeof import("./netConnectionIamPolicy").NetConnectionIamPolicy = null as any;
utilities.lazyLoad(exports, ["NetConnectionIamPolicy"], () => require("./netConnectionIamPolicy"));

export { OrganizationPartnerTenantBrowserDlpRuleIamBindingArgs } from "./organizationPartnerTenantBrowserDlpRuleIamBinding";
export type OrganizationPartnerTenantBrowserDlpRuleIamBinding = import("./organizationPartnerTenantBrowserDlpRuleIamBinding").OrganizationPartnerTenantBrowserDlpRuleIamBinding;
export const OrganizationPartnerTenantBrowserDlpRuleIamBinding: typeof import("./organizationPartnerTenantBrowserDlpRuleIamBinding").OrganizationPartnerTenantBrowserDlpRuleIamBinding = null as any;
utilities.lazyLoad(exports, ["OrganizationPartnerTenantBrowserDlpRuleIamBinding"], () => require("./organizationPartnerTenantBrowserDlpRuleIamBinding"));

export { OrganizationPartnerTenantBrowserDlpRuleIamMemberArgs } from "./organizationPartnerTenantBrowserDlpRuleIamMember";
export type OrganizationPartnerTenantBrowserDlpRuleIamMember = import("./organizationPartnerTenantBrowserDlpRuleIamMember").OrganizationPartnerTenantBrowserDlpRuleIamMember;
export const OrganizationPartnerTenantBrowserDlpRuleIamMember: typeof import("./organizationPartnerTenantBrowserDlpRuleIamMember").OrganizationPartnerTenantBrowserDlpRuleIamMember = null as any;
utilities.lazyLoad(exports, ["OrganizationPartnerTenantBrowserDlpRuleIamMember"], () => require("./organizationPartnerTenantBrowserDlpRuleIamMember"));

export { OrganizationPartnerTenantBrowserDlpRuleIamPolicyArgs } from "./organizationPartnerTenantBrowserDlpRuleIamPolicy";
export type OrganizationPartnerTenantBrowserDlpRuleIamPolicy = import("./organizationPartnerTenantBrowserDlpRuleIamPolicy").OrganizationPartnerTenantBrowserDlpRuleIamPolicy;
export const OrganizationPartnerTenantBrowserDlpRuleIamPolicy: typeof import("./organizationPartnerTenantBrowserDlpRuleIamPolicy").OrganizationPartnerTenantBrowserDlpRuleIamPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationPartnerTenantBrowserDlpRuleIamPolicy"], () => require("./organizationPartnerTenantBrowserDlpRuleIamPolicy"));

export { OrganizationPartnerTenantIamBindingArgs } from "./organizationPartnerTenantIamBinding";
export type OrganizationPartnerTenantIamBinding = import("./organizationPartnerTenantIamBinding").OrganizationPartnerTenantIamBinding;
export const OrganizationPartnerTenantIamBinding: typeof import("./organizationPartnerTenantIamBinding").OrganizationPartnerTenantIamBinding = null as any;
utilities.lazyLoad(exports, ["OrganizationPartnerTenantIamBinding"], () => require("./organizationPartnerTenantIamBinding"));

export { OrganizationPartnerTenantIamMemberArgs } from "./organizationPartnerTenantIamMember";
export type OrganizationPartnerTenantIamMember = import("./organizationPartnerTenantIamMember").OrganizationPartnerTenantIamMember;
export const OrganizationPartnerTenantIamMember: typeof import("./organizationPartnerTenantIamMember").OrganizationPartnerTenantIamMember = null as any;
utilities.lazyLoad(exports, ["OrganizationPartnerTenantIamMember"], () => require("./organizationPartnerTenantIamMember"));

export { OrganizationPartnerTenantIamPolicyArgs } from "./organizationPartnerTenantIamPolicy";
export type OrganizationPartnerTenantIamPolicy = import("./organizationPartnerTenantIamPolicy").OrganizationPartnerTenantIamPolicy;
export const OrganizationPartnerTenantIamPolicy: typeof import("./organizationPartnerTenantIamPolicy").OrganizationPartnerTenantIamPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationPartnerTenantIamPolicy"], () => require("./organizationPartnerTenantIamPolicy"));

export { OrganizationPartnerTenantProxyConfigIamBindingArgs } from "./organizationPartnerTenantProxyConfigIamBinding";
export type OrganizationPartnerTenantProxyConfigIamBinding = import("./organizationPartnerTenantProxyConfigIamBinding").OrganizationPartnerTenantProxyConfigIamBinding;
export const OrganizationPartnerTenantProxyConfigIamBinding: typeof import("./organizationPartnerTenantProxyConfigIamBinding").OrganizationPartnerTenantProxyConfigIamBinding = null as any;
utilities.lazyLoad(exports, ["OrganizationPartnerTenantProxyConfigIamBinding"], () => require("./organizationPartnerTenantProxyConfigIamBinding"));

export { OrganizationPartnerTenantProxyConfigIamMemberArgs } from "./organizationPartnerTenantProxyConfigIamMember";
export type OrganizationPartnerTenantProxyConfigIamMember = import("./organizationPartnerTenantProxyConfigIamMember").OrganizationPartnerTenantProxyConfigIamMember;
export const OrganizationPartnerTenantProxyConfigIamMember: typeof import("./organizationPartnerTenantProxyConfigIamMember").OrganizationPartnerTenantProxyConfigIamMember = null as any;
utilities.lazyLoad(exports, ["OrganizationPartnerTenantProxyConfigIamMember"], () => require("./organizationPartnerTenantProxyConfigIamMember"));

export { OrganizationPartnerTenantProxyConfigIamPolicyArgs } from "./organizationPartnerTenantProxyConfigIamPolicy";
export type OrganizationPartnerTenantProxyConfigIamPolicy = import("./organizationPartnerTenantProxyConfigIamPolicy").OrganizationPartnerTenantProxyConfigIamPolicy;
export const OrganizationPartnerTenantProxyConfigIamPolicy: typeof import("./organizationPartnerTenantProxyConfigIamPolicy").OrganizationPartnerTenantProxyConfigIamPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationPartnerTenantProxyConfigIamPolicy"], () => require("./organizationPartnerTenantProxyConfigIamPolicy"));

export { PartnerTenantArgs } from "./partnerTenant";
export type PartnerTenant = import("./partnerTenant").PartnerTenant;
export const PartnerTenant: typeof import("./partnerTenant").PartnerTenant = null as any;
utilities.lazyLoad(exports, ["PartnerTenant"], () => require("./partnerTenant"));

export { ProxyConfigArgs } from "./proxyConfig";
export type ProxyConfig = import("./proxyConfig").ProxyConfig;
export const ProxyConfig: typeof import("./proxyConfig").ProxyConfig = null as any;
utilities.lazyLoad(exports, ["ProxyConfig"], () => require("./proxyConfig"));

export { SubscriptionArgs } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));


// Export enums:
export * from "../../types/enums/beyondcorp/v1alpha";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:beyondcorp/v1alpha:AppConnection":
                return new AppConnection(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppConnectionIamBinding":
                return new AppConnectionIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppConnectionIamMember":
                return new AppConnectionIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppConnectionIamPolicy":
                return new AppConnectionIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppConnector":
                return new AppConnector(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppConnectorIamBinding":
                return new AppConnectorIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppConnectorIamMember":
                return new AppConnectorIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppConnectorIamPolicy":
                return new AppConnectorIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppGateway":
                return new AppGateway(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppGatewayIamBinding":
                return new AppGatewayIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppGatewayIamMember":
                return new AppGatewayIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:AppGatewayIamPolicy":
                return new AppGatewayIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ApplicationDomainIamBinding":
                return new ApplicationDomainIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ApplicationDomainIamMember":
                return new ApplicationDomainIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ApplicationDomainIamPolicy":
                return new ApplicationDomainIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ApplicationIamBinding":
                return new ApplicationIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ApplicationIamMember":
                return new ApplicationIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ApplicationIamPolicy":
                return new ApplicationIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:BrowserDlpRule":
                return new BrowserDlpRule(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ClientConnectorServiceIamBinding":
                return new ClientConnectorServiceIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ClientConnectorServiceIamMember":
                return new ClientConnectorServiceIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ClientConnectorServiceIamPolicy":
                return new ClientConnectorServiceIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ClientGatewayIamBinding":
                return new ClientGatewayIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ClientGatewayIamMember":
                return new ClientGatewayIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ClientGatewayIamPolicy":
                return new ClientGatewayIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ConnectionIamBinding":
                return new ConnectionIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ConnectionIamMember":
                return new ConnectionIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ConnectionIamPolicy":
                return new ConnectionIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:Connector":
                return new Connector(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ConnectorIamBinding":
                return new ConnectorIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ConnectorIamMember":
                return new ConnectorIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ConnectorIamPolicy":
                return new ConnectorIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:NetConnectionIamBinding":
                return new NetConnectionIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:NetConnectionIamMember":
                return new NetConnectionIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:NetConnectionIamPolicy":
                return new NetConnectionIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:OrganizationPartnerTenantBrowserDlpRuleIamBinding":
                return new OrganizationPartnerTenantBrowserDlpRuleIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:OrganizationPartnerTenantBrowserDlpRuleIamMember":
                return new OrganizationPartnerTenantBrowserDlpRuleIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:OrganizationPartnerTenantBrowserDlpRuleIamPolicy":
                return new OrganizationPartnerTenantBrowserDlpRuleIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:OrganizationPartnerTenantIamBinding":
                return new OrganizationPartnerTenantIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:OrganizationPartnerTenantIamMember":
                return new OrganizationPartnerTenantIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:OrganizationPartnerTenantIamPolicy":
                return new OrganizationPartnerTenantIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:OrganizationPartnerTenantProxyConfigIamBinding":
                return new OrganizationPartnerTenantProxyConfigIamBinding(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:OrganizationPartnerTenantProxyConfigIamMember":
                return new OrganizationPartnerTenantProxyConfigIamMember(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:OrganizationPartnerTenantProxyConfigIamPolicy":
                return new OrganizationPartnerTenantProxyConfigIamPolicy(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:PartnerTenant":
                return new PartnerTenant(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:ProxyConfig":
                return new ProxyConfig(name, <any>undefined, { urn })
            case "google-native:beyondcorp/v1alpha:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "beyondcorp/v1alpha", _module)
