// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets details of a single Automation.
 */
export function getAutomation(args: GetAutomationArgs, opts?: pulumi.InvokeOptions): Promise<GetAutomationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:clouddeploy/v1:getAutomation", {
        "automationId": args.automationId,
        "deliveryPipelineId": args.deliveryPipelineId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetAutomationArgs {
    automationId: string;
    deliveryPipelineId: string;
    location: string;
    project?: string;
}

export interface GetAutomationResult {
    /**
     * Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.
     */
    readonly annotations: {[key: string]: string};
    /**
     * Time at which the automation was created.
     */
    readonly createTime: string;
    /**
     * Optional. Description of the `Automation`. Max length is 255 characters.
     */
    readonly description: string;
    /**
     * Optional. The weak etag of the `Automation` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    readonly etag: string;
    /**
     * Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 63 characters.
     */
    readonly labels: {[key: string]: string};
    /**
     * Name of the `Automation`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automations/{automation}`.
     */
    readonly name: string;
    /**
     * List of Automation rules associated with the Automation resource. Must have at least one rule and limited to 250 rules per Delivery Pipeline. Note: the order of the rules here is not the same as the order of execution.
     */
    readonly rules: outputs.clouddeploy.v1.AutomationRuleResponse[];
    /**
     * Selected resources to which the automation will be applied.
     */
    readonly selector: outputs.clouddeploy.v1.AutomationResourceSelectorResponse;
    /**
     * Email address of the user-managed IAM service account that creates Cloud Deploy release and rollout resources.
     */
    readonly serviceAccount: string;
    /**
     * Optional. When Suspended, automation is deactivated from execution.
     */
    readonly suspended: boolean;
    /**
     * Unique identifier of the `Automation`.
     */
    readonly uid: string;
    /**
     * Time at which the automation was updated.
     */
    readonly updateTime: string;
}
/**
 * Gets details of a single Automation.
 */
export function getAutomationOutput(args: GetAutomationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAutomationResult> {
    return pulumi.output(args).apply((a: any) => getAutomation(a, opts))
}

export interface GetAutomationOutputArgs {
    automationId: pulumi.Input<string>;
    deliveryPipelineId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
