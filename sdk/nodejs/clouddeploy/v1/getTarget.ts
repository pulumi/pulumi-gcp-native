// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets details of a single Target.
 */
export function getTarget(args: GetTargetArgs, opts?: pulumi.InvokeOptions): Promise<GetTargetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:clouddeploy/v1:getTarget", {
        "location": args.location,
        "project": args.project,
        "targetId": args.targetId,
    }, opts);
}

export interface GetTargetArgs {
    location: string;
    project?: string;
    targetId: string;
}

export interface GetTargetResult {
    /**
     * Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     */
    readonly annotations: {[key: string]: string};
    /**
     * Optional. Information specifying an Anthos Cluster.
     */
    readonly anthosCluster: outputs.clouddeploy.v1.AnthosClusterResponse;
    /**
     * Time at which the `Target` was created.
     */
    readonly createTime: string;
    /**
     * Optional. The deploy parameters to use for this target.
     */
    readonly deployParameters: {[key: string]: string};
    /**
     * Optional. Description of the `Target`. Max length is 255 characters.
     */
    readonly description: string;
    /**
     * Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    readonly etag: string;
    /**
     * Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.
     */
    readonly executionConfigs: outputs.clouddeploy.v1.ExecutionConfigResponse[];
    /**
     * Optional. Information specifying a GKE Cluster.
     */
    readonly gke: outputs.clouddeploy.v1.GkeClusterResponse;
    /**
     * Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
     */
    readonly labels: {[key: string]: string};
    /**
     * Optional. Information specifying a multiTarget.
     */
    readonly multiTarget: outputs.clouddeploy.v1.MultiTargetResponse;
    /**
     * Optional. Name of the `Target`. Format is `projects/{project}/locations/{location}/targets/a-z{0,62}`.
     */
    readonly name: string;
    /**
     * Optional. Whether or not the `Target` requires approval.
     */
    readonly requireApproval: boolean;
    /**
     * Optional. Information specifying a Cloud Run deployment target.
     */
    readonly run: outputs.clouddeploy.v1.CloudRunLocationResponse;
    /**
     * Resource id of the `Target`.
     */
    readonly targetId: string;
    /**
     * Unique identifier of the `Target`.
     */
    readonly uid: string;
    /**
     * Most recent time at which the `Target` was updated.
     */
    readonly updateTime: string;
}
/**
 * Gets details of a single Target.
 */
export function getTargetOutput(args: GetTargetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTargetResult> {
    return pulumi.output(args).apply((a: any) => getTarget(a, opts))
}

export interface GetTargetOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    targetId: pulumi.Input<string>;
}
