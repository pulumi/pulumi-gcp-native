// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets an individual WorkloadIdentityPoolProviderKey.
 */
export function getWorkloadIdentityPoolKey(args: GetWorkloadIdentityPoolKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkloadIdentityPoolKeyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:iam/v1:getWorkloadIdentityPoolKey", {
        "keyId": args.keyId,
        "location": args.location,
        "project": args.project,
        "providerId": args.providerId,
        "workloadIdentityPoolId": args.workloadIdentityPoolId,
    }, opts);
}

export interface GetWorkloadIdentityPoolKeyArgs {
    keyId: string;
    location: string;
    project?: string;
    providerId: string;
    workloadIdentityPoolId: string;
}

export interface GetWorkloadIdentityPoolKeyResult {
    /**
     * Time after which the key will be permanently purged and cannot be recovered. Note that the key may get purged before this timestamp if the total limit of keys per provider is crossed.
     */
    readonly expireTime: string;
    /**
     * Immutable. Public half of the asymmetric key.
     */
    readonly keyData: outputs.iam.v1.KeyDataResponse;
    /**
     * The resource name of the key.
     */
    readonly name: string;
    /**
     * The state of the key.
     */
    readonly state: string;
    /**
     * Immutable. The purpose of the key.
     */
    readonly use: string;
}
/**
 * Gets an individual WorkloadIdentityPoolProviderKey.
 */
export function getWorkloadIdentityPoolKeyOutput(args: GetWorkloadIdentityPoolKeyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkloadIdentityPoolKeyResult> {
    return pulumi.output(args).apply((a: any) => getWorkloadIdentityPoolKey(a, opts))
}

export interface GetWorkloadIdentityPoolKeyOutputArgs {
    keyId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    providerId: pulumi.Input<string>;
    workloadIdentityPoolId: pulumi.Input<string>;
}
