// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new blockchain node in a given project and location.
 * Auto-naming is currently not supported for this resource.
 */
export class BlockchainNode extends pulumi.CustomResource {
    /**
     * Get an existing BlockchainNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): BlockchainNode {
        return new BlockchainNode(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:blockchainnodeengine/v1:BlockchainNode';

    /**
     * Returns true if the given object is an instance of BlockchainNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockchainNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockchainNode.__pulumiType;
    }

    /**
     * Required. ID of the requesting object.
     */
    public readonly blockchainNodeId!: pulumi.Output<string>;
    /**
     * Immutable. The blockchain type of the node.
     */
    public readonly blockchainType!: pulumi.Output<string>;
    /**
     * The connection information used to interact with a blockchain node.
     */
    public /*out*/ readonly connectionInfo!: pulumi.Output<outputs.blockchainnodeengine.v1.ConnectionInfoResponse>;
    /**
     * The timestamp at which the blockchain node was first created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Ethereum-specific blockchain node details.
     */
    public readonly ethereumDetails!: pulumi.Output<outputs.blockchainnodeengine.v1.EthereumDetailsResponse>;
    /**
     * User-provided key-value pairs.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly location!: pulumi.Output<string>;
    /**
     * The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
     */
    public readonly privateServiceConnectEnabled!: pulumi.Output<boolean>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    public readonly requestId!: pulumi.Output<string | undefined>;
    /**
     * A status representing the state of the node.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The timestamp at which the blockchain node was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a BlockchainNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockchainNodeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.blockchainNodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockchainNodeId'");
            }
            resourceInputs["blockchainNodeId"] = args ? args.blockchainNodeId : undefined;
            resourceInputs["blockchainType"] = args ? args.blockchainType : undefined;
            resourceInputs["ethereumDetails"] = args ? args.ethereumDetails : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["privateServiceConnectEnabled"] = args ? args.privateServiceConnectEnabled : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["connectionInfo"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["blockchainNodeId"] = undefined /*out*/;
            resourceInputs["blockchainType"] = undefined /*out*/;
            resourceInputs["connectionInfo"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["ethereumDetails"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["privateServiceConnectEnabled"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["blockchainNodeId", "location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(BlockchainNode.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a BlockchainNode resource.
 */
export interface BlockchainNodeArgs {
    /**
     * Required. ID of the requesting object.
     */
    blockchainNodeId: pulumi.Input<string>;
    /**
     * Immutable. The blockchain type of the node.
     */
    blockchainType?: pulumi.Input<enums.blockchainnodeengine.v1.BlockchainNodeBlockchainType>;
    /**
     * Ethereum-specific blockchain node details.
     */
    ethereumDetails?: pulumi.Input<inputs.blockchainnodeengine.v1.EthereumDetailsArgs>;
    /**
     * User-provided key-value pairs.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    /**
     * Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
     */
    privateServiceConnectEnabled?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    /**
     * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    requestId?: pulumi.Input<string>;
}
