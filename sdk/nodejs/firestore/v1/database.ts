// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Create a database.
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:firestore/v1:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * The App Engine integration mode to use for this database.
     */
    public readonly appEngineIntegrationMode!: pulumi.Output<string>;
    /**
     * The concurrency control mode to use for this database.
     */
    public readonly concurrencyMode!: pulumi.Output<string>;
    /**
     * The timestamp at which this database was created. Databases created before 2016 do not populate create_time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Required. The ID to use for the database, which will become the final component of the database's resource name. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
     */
    public readonly databaseId!: pulumi.Output<string>;
    /**
     * State of delete protection for the database.
     */
    public readonly deleteProtectionState!: pulumi.Output<string>;
    /**
     * The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
     */
    public /*out*/ readonly earliestVersionTime!: pulumi.Output<string>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * The key_prefix for this database. This key_prefix is used, in combination with the project id ("~") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
     */
    public /*out*/ readonly keyPrefix!: pulumi.Output<string>;
    /**
     * The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the Database. Format: `projects/{project}/databases/{database}`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether to enable the PITR feature on this database.
     */
    public readonly pointInTimeRecoveryEnablement!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The system-generated UUID4 for this Database.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
     */
    public /*out*/ readonly versionRetentionPeriod!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            resourceInputs["appEngineIntegrationMode"] = args ? args.appEngineIntegrationMode : undefined;
            resourceInputs["concurrencyMode"] = args ? args.concurrencyMode : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["deleteProtectionState"] = args ? args.deleteProtectionState : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pointInTimeRecoveryEnablement"] = args ? args.pointInTimeRecoveryEnablement : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["earliestVersionTime"] = undefined /*out*/;
            resourceInputs["keyPrefix"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["versionRetentionPeriod"] = undefined /*out*/;
        } else {
            resourceInputs["appEngineIntegrationMode"] = undefined /*out*/;
            resourceInputs["concurrencyMode"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["databaseId"] = undefined /*out*/;
            resourceInputs["deleteProtectionState"] = undefined /*out*/;
            resourceInputs["earliestVersionTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["keyPrefix"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pointInTimeRecoveryEnablement"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["versionRetentionPeriod"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["databaseId", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * The App Engine integration mode to use for this database.
     */
    appEngineIntegrationMode?: pulumi.Input<enums.firestore.v1.DatabaseAppEngineIntegrationMode>;
    /**
     * The concurrency control mode to use for this database.
     */
    concurrencyMode?: pulumi.Input<enums.firestore.v1.DatabaseConcurrencyMode>;
    /**
     * Required. The ID to use for the database, which will become the final component of the database's resource name. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
     */
    databaseId: pulumi.Input<string>;
    /**
     * State of delete protection for the database.
     */
    deleteProtectionState?: pulumi.Input<enums.firestore.v1.DatabaseDeleteProtectionState>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
     */
    location?: pulumi.Input<string>;
    /**
     * The resource name of the Database. Format: `projects/{project}/databases/{database}`
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to enable the PITR feature on this database.
     */
    pointInTimeRecoveryEnablement?: pulumi.Input<enums.firestore.v1.DatabasePointInTimeRecoveryEnablement>;
    project?: pulumi.Input<string>;
    /**
     * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
     */
    type?: pulumi.Input<enums.firestore.v1.DatabaseType>;
}
