// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a backup schedule on a database. At most two backup schedules can be configured on a database, one daily backup schedule with retention up to 7 days and one weekly backup schedule with retention up to 14 weeks.
 * Auto-naming is currently not supported for this resource.
 */
export class BackupSchedule extends pulumi.CustomResource {
    /**
     * Get an existing BackupSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): BackupSchedule {
        return new BackupSchedule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:firestore/v1:BackupSchedule';

    /**
     * Returns true if the given object is an instance of BackupSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupSchedule.__pulumiType;
    }

    /**
     * The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * For a schedule that runs daily at a specified time.
     */
    public readonly dailyRecurrence!: pulumi.Output<outputs.firestore.v1.GoogleFirestoreAdminV1DailyRecurrenceResponse>;
    public readonly databaseId!: pulumi.Output<string>;
    /**
     * The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
     */
    public readonly retention!: pulumi.Output<string>;
    /**
     * The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * For a schedule that runs weekly on a specific day and time.
     */
    public readonly weeklyRecurrence!: pulumi.Output<outputs.firestore.v1.GoogleFirestoreAdminV1WeeklyRecurrenceResponse>;

    /**
     * Create a BackupSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupScheduleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            resourceInputs["dailyRecurrence"] = args ? args.dailyRecurrence : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["retention"] = args ? args.retention : undefined;
            resourceInputs["weeklyRecurrence"] = args ? args.weeklyRecurrence : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dailyRecurrence"] = undefined /*out*/;
            resourceInputs["databaseId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["retention"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["weeklyRecurrence"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["databaseId", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(BackupSchedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a BackupSchedule resource.
 */
export interface BackupScheduleArgs {
    /**
     * For a schedule that runs daily at a specified time.
     */
    dailyRecurrence?: pulumi.Input<inputs.firestore.v1.GoogleFirestoreAdminV1DailyRecurrenceArgs>;
    databaseId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
     */
    retention?: pulumi.Input<string>;
    /**
     * For a schedule that runs weekly on a specific day and time.
     */
    weeklyRecurrence?: pulumi.Input<inputs.firestore.v1.GoogleFirestoreAdminV1WeeklyRecurrenceArgs>;
}
