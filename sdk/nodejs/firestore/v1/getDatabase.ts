// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets information about a database.
 */
export function getDatabase(args: GetDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:firestore/v1:getDatabase", {
        "databaseId": args.databaseId,
        "project": args.project,
    }, opts);
}

export interface GetDatabaseArgs {
    databaseId: string;
    project?: string;
}

export interface GetDatabaseResult {
    /**
     * The App Engine integration mode to use for this database.
     */
    readonly appEngineIntegrationMode: string;
    /**
     * The concurrency control mode to use for this database.
     */
    readonly concurrencyMode: string;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    readonly etag: string;
    /**
     * The key_prefix for this database. This key_prefix is used, in combination with the project id ("~") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
     */
    readonly keyPrefix: string;
    /**
     * The location of the database. Available databases are listed at https://cloud.google.com/firestore/docs/locations.
     */
    readonly location: string;
    /**
     * The resource name of the Database. Format: `projects/{project}/databases/{database}`
     */
    readonly name: string;
    /**
     * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
     */
    readonly type: string;
}
/**
 * Gets information about a database.
 */
export function getDatabaseOutput(args: GetDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getDatabase(a, opts))
}

export interface GetDatabaseOutputArgs {
    databaseId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
