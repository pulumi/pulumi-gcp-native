// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * An alias to a repo revision.
 */
export interface AliasContextArgs {
    /**
     * The alias kind.
     */
    kind?: pulumi.Input<enums.containeranalysis.v1beta1.AliasContextKind>;
    /**
     * The alias name.
     */
    name?: pulumi.Input<string>;
}

/**
 * Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
 */
export interface AnalysisCompletedArgs {
    analysisType?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Artifact describes a build product.
 */
export interface ArtifactArgs {
    /**
     * Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
     */
    checksum?: pulumi.Input<string>;
    /**
     * Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
     */
    id?: pulumi.Input<string>;
    /**
     * Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Defines a hash object for use in Materials and Products.
 */
export interface ArtifactHashesArgs {
    sha256?: pulumi.Input<string>;
}

/**
 * Defines an object to declare an in-toto artifact rule
 */
export interface ArtifactRuleArgs {
    artifactRule?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
 */
export interface AttestationArgs {
    genericSignedAttestation?: pulumi.Input<inputs.containeranalysis.v1beta1.GenericSignedAttestationArgs>;
    /**
     * A PGP signed attestation.
     */
    pgpSignedAttestation?: pulumi.Input<inputs.containeranalysis.v1beta1.PgpSignedAttestationArgs>;
}

/**
 * Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
 */
export interface AuthorityArgs {
    /**
     * Hint hints at the purpose of the attestation authority.
     */
    hint?: pulumi.Input<inputs.containeranalysis.v1beta1.HintArgs>;
}

/**
 * Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
 */
export interface BasisArgs {
    /**
     * Immutable. The fingerprint of the base image.
     */
    fingerprint: pulumi.Input<inputs.containeranalysis.v1beta1.FingerprintArgs>;
    /**
     * Immutable. The resource_url for the resource representing the basis of associated occurrence images.
     */
    resourceUrl: pulumi.Input<string>;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingArgs {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition?: pulumi.Input<inputs.containeranalysis.v1beta1.ExprArgs>;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role?: pulumi.Input<string>;
}

/**
 * Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
 */
export interface BuildArgs {
    /**
     * Immutable. Version of the builder which produced this build.
     */
    builderVersion: pulumi.Input<string>;
    /**
     * Signature of the build in occurrences pointing to this build note containing build details.
     */
    signature?: pulumi.Input<inputs.containeranalysis.v1beta1.BuildSignatureArgs>;
}

/**
 * Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
 */
export interface BuildProvenanceArgs {
    /**
     * Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
     */
    buildOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Version string of the builder at the time this build was executed.
     */
    builderVersion?: pulumi.Input<string>;
    /**
     * Output of the build.
     */
    builtArtifacts?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.ArtifactArgs>[]>;
    /**
     * Commands requested by the build.
     */
    commands?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.CommandArgs>[]>;
    /**
     * Time at which the build was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
     */
    creator?: pulumi.Input<string>;
    /**
     * Time at which execution of the build was finished.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Unique identifier of the build.
     */
    id: pulumi.Input<string>;
    /**
     * URI where any logs for this provenance were written.
     */
    logsUri?: pulumi.Input<string>;
    /**
     * ID of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * Details of the Source input to the build.
     */
    sourceProvenance?: pulumi.Input<inputs.containeranalysis.v1beta1.SourceArgs>;
    /**
     * Time at which execution of the build was started.
     */
    startTime?: pulumi.Input<string>;
    /**
     * Trigger identifier if the build was triggered automatically; empty if not.
     */
    triggerId?: pulumi.Input<string>;
}

/**
 * Message encapsulating the signature of the verified build.
 */
export interface BuildSignatureArgs {
    /**
     * An ID for the key used to sign. This could be either an ID for the key stored in `public_key` (such as the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
     */
    keyId?: pulumi.Input<string>;
    /**
     * The type of the key, either stored in `public_key` or referenced in `key_id`.
     */
    keyType?: pulumi.Input<enums.containeranalysis.v1beta1.BuildSignatureKeyType>;
    /**
     * Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Signature of the related `BuildProvenance`. In JSON, this is base-64 encoded.
     */
    signature: pulumi.Input<string>;
}

/**
 * Defines an object for the byproducts field in in-toto links. The suggested fields are "stderr", "stdout", and "return-value".
 */
export interface ByProductsArgs {
    customValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
 */
export interface CVSSArgs {
    /**
     * Defined in CVSS v3, CVSS v2
     */
    attackComplexity?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSAttackComplexity>;
    /**
     * Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
     */
    attackVector?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSAttackVector>;
    /**
     * Defined in CVSS v2
     */
    authentication?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSAuthentication>;
    /**
     * Defined in CVSS v3, CVSS v2
     */
    availabilityImpact?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSAvailabilityImpact>;
    /**
     * The base score is a function of the base metric scores.
     */
    baseScore?: pulumi.Input<number>;
    /**
     * Defined in CVSS v3, CVSS v2
     */
    confidentialityImpact?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSConfidentialityImpact>;
    exploitabilityScore?: pulumi.Input<number>;
    impactScore?: pulumi.Input<number>;
    /**
     * Defined in CVSS v3, CVSS v2
     */
    integrityImpact?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSIntegrityImpact>;
    /**
     * Defined in CVSS v3
     */
    privilegesRequired?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSPrivilegesRequired>;
    /**
     * Defined in CVSS v3
     */
    scope?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSScope>;
    /**
     * Defined in CVSS v3
     */
    userInteraction?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSUserInteraction>;
}

/**
 * Deprecated. Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
 */
export interface CVSSv3Args {
    attackComplexity?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSv3AttackComplexity>;
    /**
     * Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
     */
    attackVector?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSv3AttackVector>;
    availabilityImpact?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSv3AvailabilityImpact>;
    /**
     * The base score is a function of the base metric scores.
     */
    baseScore?: pulumi.Input<number>;
    confidentialityImpact?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSv3ConfidentialityImpact>;
    exploitabilityScore?: pulumi.Input<number>;
    impactScore?: pulumi.Input<number>;
    integrityImpact?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSv3IntegrityImpact>;
    privilegesRequired?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSv3PrivilegesRequired>;
    scope?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSv3Scope>;
    userInteraction?: pulumi.Input<enums.containeranalysis.v1beta1.CVSSv3UserInteraction>;
}

/**
 * A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
 */
export interface CloudRepoSourceContextArgs {
    /**
     * An alias, which may be a branch or tag.
     */
    aliasContext?: pulumi.Input<inputs.containeranalysis.v1beta1.AliasContextArgs>;
    /**
     * The ID of the repo.
     */
    repoId?: pulumi.Input<inputs.containeranalysis.v1beta1.RepoIdArgs>;
    /**
     * A revision ID.
     */
    revisionId?: pulumi.Input<string>;
}

/**
 * Command describes a step performed as part of the build pipeline.
 */
export interface CommandArgs {
    /**
     * Command-line arguments used when executing this command.
     */
    args?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Working directory (relative to project source root) used when running this command.
     */
    dir?: pulumi.Input<string>;
    /**
     * Environment variables set before running this command.
     */
    env?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
     */
    name: pulumi.Input<string>;
    /**
     * The ID(s) of the command(s) that this command depends on.
     */
    waitFor?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * An artifact that can be deployed in some runtime.
 */
export interface DeployableArgs {
    /**
     * Resource URI for the artifact being deployed.
     */
    resourceUri: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The period during which some deployable was active in a runtime.
 */
export interface DeploymentArgs {
    /**
     * Address of the runtime element hosting this deployment.
     */
    address?: pulumi.Input<string>;
    /**
     * Configuration used to create this deployment.
     */
    config?: pulumi.Input<string>;
    /**
     * Beginning of the lifetime of this deployment.
     */
    deployTime: pulumi.Input<string>;
    /**
     * Platform hosting this deployment.
     */
    platform?: pulumi.Input<enums.containeranalysis.v1beta1.DeploymentPlatform>;
    /**
     * End of the lifetime of this deployment.
     */
    undeployTime?: pulumi.Input<string>;
    /**
     * Identity of the user that triggered this deployment.
     */
    userEmail?: pulumi.Input<string>;
}

/**
 * Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
 */
export interface DerivedArgs {
    /**
     * The fingerprint of the derived image.
     */
    fingerprint: pulumi.Input<inputs.containeranalysis.v1beta1.FingerprintArgs>;
    /**
     * This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
     */
    layerInfo?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.LayerArgs>[]>;
}

/**
 * Identifies all appearances of this vulnerability in the package for a specific distro/location. For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
 */
export interface DetailArgs {
    /**
     * The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
     */
    cpeUri: pulumi.Input<string>;
    /**
     * A vendor-specific description of this note.
     */
    description?: pulumi.Input<string>;
    /**
     * The fix for this specific package version.
     */
    fixedLocation?: pulumi.Input<inputs.containeranalysis.v1beta1.VulnerabilityLocationArgs>;
    /**
     * Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
     */
    isObsolete?: pulumi.Input<boolean>;
    /**
     * The max version of the package in which the vulnerability exists.
     */
    maxAffectedVersion?: pulumi.Input<inputs.containeranalysis.v1beta1.VersionArgs>;
    /**
     * The min version of the package in which the vulnerability exists.
     */
    minAffectedVersion?: pulumi.Input<inputs.containeranalysis.v1beta1.VersionArgs>;
    /**
     * The name of the package where the vulnerability was found.
     */
    package: pulumi.Input<string>;
    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc).
     */
    packageType?: pulumi.Input<string>;
    /**
     * The severity (eg: distro assigned severity) for this vulnerability.
     */
    severityName?: pulumi.Input<string>;
    /**
     * The source from which the information in this Detail was obtained.
     */
    source?: pulumi.Input<string>;
    /**
     * The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
     */
    sourceUpdateTime?: pulumi.Input<string>;
    /**
     * The name of the vendor of the product.
     */
    vendor?: pulumi.Input<string>;
}

/**
 * Details of an attestation occurrence.
 */
export interface DetailsArgs {
    /**
     * Attestation for the resource.
     */
    attestation: pulumi.Input<inputs.containeranalysis.v1beta1.AttestationArgs>;
}

/**
 * Digest information.
 */
export interface DigestArgs {
    /**
     * `SHA1`, `SHA512` etc.
     */
    algo?: pulumi.Input<string>;
    /**
     * Value of the digest.
     */
    digestBytes?: pulumi.Input<string>;
}

/**
 * Provides information about the analysis status of a discovered resource.
 */
export interface DiscoveredArgs {
    analysisCompleted?: pulumi.Input<inputs.containeranalysis.v1beta1.AnalysisCompletedArgs>;
    /**
     * Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
     */
    analysisError?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.StatusArgs>[]>;
    /**
     * The status of discovery for the resource.
     */
    analysisStatus?: pulumi.Input<enums.containeranalysis.v1beta1.DiscoveredAnalysisStatus>;
    /**
     * When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
     */
    analysisStatusError?: pulumi.Input<inputs.containeranalysis.v1beta1.StatusArgs>;
    /**
     * Whether the resource is continuously analyzed.
     */
    continuousAnalysis?: pulumi.Input<enums.containeranalysis.v1beta1.DiscoveredContinuousAnalysis>;
    /**
     * The last time continuous analysis was done for this resource. Deprecated, do not use.
     *
     * @deprecated The last time continuous analysis was done for this resource. Deprecated, do not use.
     */
    lastAnalysisTime?: pulumi.Input<string>;
}

/**
 * A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
 */
export interface DiscoveryArgs {
    /**
     * Immutable. The kind of analysis that is handled by this discovery.
     */
    analysisKind: pulumi.Input<enums.containeranalysis.v1beta1.DiscoveryAnalysisKind>;
}

/**
 * This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
 */
export interface DistributionArgs {
    /**
     * The CPU architecture for which packages in this distribution channel were built.
     */
    architecture?: pulumi.Input<enums.containeranalysis.v1beta1.DistributionArchitecture>;
    /**
     * The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
     */
    cpeUri: pulumi.Input<string>;
    /**
     * The distribution channel-specific description of this package.
     */
    description?: pulumi.Input<string>;
    /**
     * The latest available version of this package in this distribution channel.
     */
    latestVersion?: pulumi.Input<inputs.containeranalysis.v1beta1.VersionArgs>;
    /**
     * A freeform string denoting the maintainer of this package.
     */
    maintainer?: pulumi.Input<string>;
    /**
     * The distribution channel-specific homepage for this package.
     */
    url?: pulumi.Input<string>;
}

/**
 * DocumentNote represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
 */
export interface DocumentNoteArgs {
    /**
     * Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
     */
    dataLicence?: pulumi.Input<string>;
    /**
     * Provide a reference number that can be used to understand how to parse and interpret the rest of the file
     */
    spdxVersion?: pulumi.Input<string>;
}

/**
 * DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
 */
export interface DocumentOccurrenceArgs {
    /**
     * Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
     */
    createTime?: pulumi.Input<string>;
    /**
     * A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
     */
    creatorComment?: pulumi.Input<string>;
    /**
     * Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
     */
    creators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
     */
    documentComment?: pulumi.Input<string>;
    /**
     * Identify any external SPDX documents referenced within this SPDX document
     */
    externalDocumentRefs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally
     */
    id?: pulumi.Input<string>;
    /**
     * A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
     */
    licenseListVersion?: pulumi.Input<string>;
    /**
     * Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
     */
    namespace?: pulumi.Input<string>;
    /**
     * Identify name of this document as designated by creator
     */
    title?: pulumi.Input<string>;
}

/**
 * MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
 */
export interface EnvelopeArgs {
    payload?: pulumi.Input<string>;
    payloadType?: pulumi.Input<string>;
    signatures?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.EnvelopeSignatureArgs>[]>;
}

export interface EnvelopeSignatureArgs {
    keyid?: pulumi.Input<string>;
    sig?: pulumi.Input<string>;
}

/**
 * Defines an object for the environment field in in-toto links. The suggested fields are "variables", "filesystem", and "workdir".
 */
export interface EnvironmentArgs {
    customValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprArgs {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description?: pulumi.Input<string>;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression?: pulumi.Input<string>;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location?: pulumi.Input<string>;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title?: pulumi.Input<string>;
}

/**
 * An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
 */
export interface ExternalRefArgs {
    /**
     * An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
     */
    category?: pulumi.Input<enums.containeranalysis.v1beta1.ExternalRefCategory>;
    /**
     * Human-readable information about the purpose and target of the reference
     */
    comment?: pulumi.Input<string>;
    /**
     * The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
     */
    locator?: pulumi.Input<string>;
    /**
     * Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
     */
    type?: pulumi.Input<string>;
}

/**
 * FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
 */
export interface FileNoteArgs {
    /**
     * Provide a unique identifier to match analysis information on each specific file in a package
     */
    checksum?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This field provides information about the type of file identified
     */
    fileType?: pulumi.Input<enums.containeranalysis.v1beta1.FileNoteFileType>;
    /**
     * Identify the full path and filename that corresponds to the file information in this section
     */
    title?: pulumi.Input<string>;
}

/**
 * FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
 */
export interface FileOccurrenceArgs {
    /**
     * This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
     */
    attributions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This field provides a place for the SPDX file creator to record any general comments about the file
     */
    comment?: pulumi.Input<string>;
    /**
     * This field provides a place for the SPDX file creator to record file contributors
     */
    contributors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identify the copyright holder of the file, as well as any dates present
     */
    copyright?: pulumi.Input<string>;
    /**
     * This field contains the license information actually found in the file, if any
     */
    filesLicenseInfo?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Uniquely identify any element in an SPDX document which may be referenced by other elements
     */
    id?: pulumi.Input<string>;
    /**
     * This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
     */
    licenseConcluded?: pulumi.Input<inputs.containeranalysis.v1beta1.LicenseArgs>;
    /**
     * This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
     */
    notice?: pulumi.Input<string>;
}

/**
 * A set of properties that uniquely identify a given Docker image.
 */
export interface FingerprintArgs {
    /**
     * The layer ID of the final layer in the Docker image's v1 representation.
     */
    v1Name: pulumi.Input<string>;
    /**
     * The ordered list of v2 blobs that represent a given image.
     */
    v2Blob: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.
 */
export interface GenericSignedAttestationArgs {
    /**
     * Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
     */
    contentType?: pulumi.Input<enums.containeranalysis.v1beta1.GenericSignedAttestationContentType>;
    /**
     * The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.
     */
    serializedPayload?: pulumi.Input<string>;
    /**
     * One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
     */
    signatures?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.SignatureArgs>[]>;
}

/**
 * A SourceContext referring to a Gerrit project.
 */
export interface GerritSourceContextArgs {
    /**
     * An alias, which may be a branch or tag.
     */
    aliasContext?: pulumi.Input<inputs.containeranalysis.v1beta1.AliasContextArgs>;
    /**
     * The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
     */
    gerritProject?: pulumi.Input<string>;
    /**
     * The URI of a running Gerrit instance.
     */
    hostUri?: pulumi.Input<string>;
    /**
     * A revision (commit) ID.
     */
    revisionId?: pulumi.Input<string>;
}

/**
 * A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
 */
export interface GitSourceContextArgs {
    /**
     * Git commit hash.
     */
    revisionId?: pulumi.Input<string>;
    /**
     * Git repository URL.
     */
    url?: pulumi.Input<string>;
}

/**
 * Details of a build occurrence.
 */
export interface GrafeasV1beta1BuildDetailsArgs {
    /**
     * The actual provenance for the build.
     */
    provenance: pulumi.Input<inputs.containeranalysis.v1beta1.BuildProvenanceArgs>;
    /**
     * Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
     */
    provenanceBytes?: pulumi.Input<string>;
}

/**
 * Details of a deployment occurrence.
 */
export interface GrafeasV1beta1DeploymentDetailsArgs {
    /**
     * Deployment history for the resource.
     */
    deployment: pulumi.Input<inputs.containeranalysis.v1beta1.DeploymentArgs>;
}

/**
 * Details of a discovery occurrence.
 */
export interface GrafeasV1beta1DiscoveryDetailsArgs {
    /**
     * Analysis status for the discovered resource.
     */
    discovered: pulumi.Input<inputs.containeranalysis.v1beta1.DiscoveredArgs>;
}

/**
 * Details of an image occurrence.
 */
export interface GrafeasV1beta1ImageDetailsArgs {
    /**
     * Immutable. The child image derived from the base image.
     */
    derivedImage: pulumi.Input<inputs.containeranalysis.v1beta1.DerivedArgs>;
}

export interface GrafeasV1beta1IntotoArtifactArgs {
    hashes?: pulumi.Input<inputs.containeranalysis.v1beta1.ArtifactHashesArgs>;
    resourceUri?: pulumi.Input<string>;
}

/**
 * This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.
 */
export interface GrafeasV1beta1IntotoDetailsArgs {
    signatures?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.GrafeasV1beta1IntotoSignatureArgs>[]>;
    signed?: pulumi.Input<inputs.containeranalysis.v1beta1.LinkArgs>;
}

/**
 * A signature object consists of the KeyID used and the signature itself.
 */
export interface GrafeasV1beta1IntotoSignatureArgs {
    keyid?: pulumi.Input<string>;
    sig?: pulumi.Input<string>;
}

/**
 * Details of a package occurrence.
 */
export interface GrafeasV1beta1PackageDetailsArgs {
    /**
     * Where the package was installed.
     */
    installation: pulumi.Input<inputs.containeranalysis.v1beta1.InstallationArgs>;
}

/**
 * Details of a vulnerability Occurrence.
 */
export interface GrafeasV1beta1VulnerabilityDetailsArgs {
    /**
     * The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     */
    effectiveSeverity?: pulumi.Input<enums.containeranalysis.v1beta1.GrafeasV1beta1VulnerabilityDetailsEffectiveSeverity>;
    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     */
    packageIssue: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.PackageIssueArgs>[]>;
    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc)
     */
    type?: pulumi.Input<string>;
}

/**
 * Container message for hash values.
 */
export interface HashArgs {
    /**
     * The type of hash that was performed.
     */
    type: pulumi.Input<enums.containeranalysis.v1beta1.HashType>;
    /**
     * The hash value.
     */
    value: pulumi.Input<string>;
}

/**
 * This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
 */
export interface HintArgs {
    /**
     * The human readable name of this attestation authority, for example "qa".
     */
    humanReadableName: pulumi.Input<string>;
}

/**
 * This contains the fields corresponding to the definition of a software supply chain step in an in-toto layout. This information goes into a Grafeas note.
 */
export interface InTotoArgs {
    /**
     * This field contains the expected command used to perform the step.
     */
    expectedCommand?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The following fields contain in-toto artifact rules identifying the artifacts that enter this supply chain step, and exit the supply chain step, i.e. materials and products of the step.
     */
    expectedMaterials?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.ArtifactRuleArgs>[]>;
    expectedProducts?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.ArtifactRuleArgs>[]>;
    /**
     * This field contains the public keys that can be used to verify the signatures on the step metadata.
     */
    signingKeys?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.SigningKeyArgs>[]>;
    /**
     * This field identifies the name of the step in the supply chain.
     */
    stepName?: pulumi.Input<string>;
    /**
     * This field contains a value that indicates the minimum number of keys that need to be used to sign the step's in-toto link.
     */
    threshold?: pulumi.Input<string>;
}

/**
 * This represents how a particular software package may be installed on a system.
 */
export interface InstallationArgs {
    /**
     * Licenses that have been declared by the authors of the package.
     */
    license?: pulumi.Input<inputs.containeranalysis.v1beta1.LicenseArgs>;
    /**
     * All of the places within the filesystem versions of this package have been found.
     */
    location?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.LocationArgs>[]>;
}

export interface KnowledgeBaseArgs {
    /**
     * The KB name (generally of the form KB[0-9]+ i.e. KB123456).
     */
    name?: pulumi.Input<string>;
    /**
     * A link to the KB in the Windows update catalog - https://www.catalog.update.microsoft.com/
     */
    url?: pulumi.Input<string>;
}

/**
 * Layer holds metadata specific to a layer of a Docker image.
 */
export interface LayerArgs {
    /**
     * The recovered arguments to the Dockerfile directive.
     */
    arguments?: pulumi.Input<string>;
    /**
     * The recovered Dockerfile directive used to construct this layer.
     */
    directive: pulumi.Input<enums.containeranalysis.v1beta1.LayerDirective>;
}

/**
 * License information.
 */
export interface LicenseArgs {
    /**
     * Comments
     */
    comments?: pulumi.Input<string>;
    /**
     * Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
     */
    expression?: pulumi.Input<string>;
}

/**
 * This corresponds to an in-toto link.
 */
export interface LinkArgs {
    /**
     * ByProducts are data generated as part of a software supply chain step, but are not the actual result of the step.
     */
    byproducts?: pulumi.Input<inputs.containeranalysis.v1beta1.ByProductsArgs>;
    /**
     * This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: "command": ["git", "clone", "https://github.com/in-toto/demo-project.git"]
     */
    command?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This is a field that can be used to capture information about the environment. It is suggested for this field to contain information that details environment variables, filesystem information, and the present working directory. The recommended structure of this field is: "environment": { "custom_values": { "variables": "", "filesystem": "", "workdir": "", "": "..." } }
     */
    environment?: pulumi.Input<inputs.containeranalysis.v1beta1.EnvironmentArgs>;
    /**
     * Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: "materials": [ { "resource_uri": "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
     */
    materials?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.GrafeasV1beta1IntotoArtifactArgs>[]>;
    /**
     * Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.
     */
    products?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.GrafeasV1beta1IntotoArtifactArgs>[]>;
}

/**
 * An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
 */
export interface LocationArgs {
    /**
     * Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
     *
     * @deprecated Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
     */
    cpeUri?: pulumi.Input<string>;
    /**
     * The path from which we gathered that this package/version is installed.
     */
    path?: pulumi.Input<string>;
    /**
     * Deprecated. The version installed at this location.
     *
     * @deprecated Deprecated. The version installed at this location.
     */
    version?: pulumi.Input<inputs.containeranalysis.v1beta1.VersionArgs>;
}

/**
 * Package represents a particular package version.
 */
export interface PackageArgs {
    /**
     * The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
     */
    architecture?: pulumi.Input<enums.containeranalysis.v1beta1.PackageArchitecture>;
    /**
     * The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
     */
    cpeUri?: pulumi.Input<string>;
    /**
     * The description of this package.
     */
    description?: pulumi.Input<string>;
    /**
     * Hash value, typically a file digest, that allows unique identification a specific package.
     */
    digest?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.DigestArgs>[]>;
    /**
     * The various channels by which a package is distributed.
     */
    distribution?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.DistributionArgs>[]>;
    /**
     * Licenses that have been declared by the authors of the package.
     */
    license?: pulumi.Input<inputs.containeranalysis.v1beta1.LicenseArgs>;
    /**
     * A freeform text denoting the maintainer of this package.
     */
    maintainer?: pulumi.Input<string>;
    /**
     * Immutable. The name of the package.
     */
    name: pulumi.Input<string>;
    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     */
    packageType?: pulumi.Input<string>;
    /**
     * The homepage for this package.
     */
    url?: pulumi.Input<string>;
    /**
     * The version of the package.
     */
    version?: pulumi.Input<inputs.containeranalysis.v1beta1.VersionArgs>;
}

/**
 * PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
 */
export interface PackageInfoNoteArgs {
    /**
     * Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
     */
    analyzed?: pulumi.Input<boolean>;
    /**
     * A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
     */
    attribution?: pulumi.Input<string>;
    /**
     * Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
     */
    checksum?: pulumi.Input<string>;
    /**
     * Identify the copyright holders of the package, as well as any dates present
     */
    copyright?: pulumi.Input<string>;
    /**
     * A more detailed description of the package
     */
    detailedDescription?: pulumi.Input<string>;
    /**
     * This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
     */
    downloadLocation?: pulumi.Input<string>;
    /**
     * ExternalRef
     */
    externalRefs?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.ExternalRefArgs>[]>;
    /**
     * Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
     */
    filesLicenseInfo?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Provide a place for the SPDX file creator to record a web site that serves as the package's home page
     */
    homePage?: pulumi.Input<string>;
    /**
     * List the licenses that have been declared by the authors of the package
     */
    licenseDeclared?: pulumi.Input<inputs.containeranalysis.v1beta1.LicenseArgs>;
    /**
     * If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
     */
    originator?: pulumi.Input<string>;
    /**
     * The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
     */
    packageType?: pulumi.Input<string>;
    /**
     * A short description of the package
     */
    summaryDescription?: pulumi.Input<string>;
    /**
     * Identify the actual distribution source for the package/directory identified in the SPDX file
     */
    supplier?: pulumi.Input<string>;
    /**
     * Identify the full name of the package as given by the Package Originator
     */
    title?: pulumi.Input<string>;
    /**
     * This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
     */
    verificationCode?: pulumi.Input<string>;
    /**
     * Identify the version of the package
     */
    version?: pulumi.Input<string>;
}

/**
 * PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
 */
export interface PackageInfoOccurrenceArgs {
    /**
     * A place for the SPDX file creator to record any general comments about the package being described
     */
    comment?: pulumi.Input<string>;
    /**
     * Provide the actual file name of the package, or path of the directory being treated as a package
     */
    filename?: pulumi.Input<string>;
    /**
     * Uniquely identify any element in an SPDX document which may be referenced by other elements
     */
    id?: pulumi.Input<string>;
    /**
     * package or alternative values, if the governing license cannot be determined
     */
    licenseConcluded?: pulumi.Input<inputs.containeranalysis.v1beta1.LicenseArgs>;
    /**
     * Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
     */
    sourceInfo?: pulumi.Input<string>;
}

/**
 * This message wraps a location affected by a vulnerability and its associated fix (if one is available).
 */
export interface PackageIssueArgs {
    /**
     * The location of the vulnerability.
     */
    affectedLocation: pulumi.Input<inputs.containeranalysis.v1beta1.VulnerabilityLocationArgs>;
    /**
     * The location of the available fix for vulnerability.
     */
    fixedLocation?: pulumi.Input<inputs.containeranalysis.v1beta1.VulnerabilityLocationArgs>;
    /**
     * The type of package (e.g. OS, MAVEN, GO).
     */
    packageType?: pulumi.Input<string>;
    /**
     * Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
     *
     * @deprecated Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.
     */
    severityName?: pulumi.Input<string>;
}

/**
 * An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
 */
export interface PgpSignedAttestationArgs {
    /**
     * Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
     */
    contentType?: pulumi.Input<enums.containeranalysis.v1beta1.PgpSignedAttestationContentType>;
    /**
     * The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
     */
    pgpKeyId?: pulumi.Input<string>;
    /**
     * The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
     */
    signature: pulumi.Input<string>;
}

/**
 * Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
 */
export interface ProjectRepoIdArgs {
    /**
     * The ID of the project.
     */
    project?: pulumi.Input<string>;
    /**
     * The name of the repo. Leave empty for the default repo.
     */
    repoName?: pulumi.Input<string>;
}

/**
 * Metadata for any related URL information.
 */
export interface RelatedUrlArgs {
    /**
     * Label to describe usage of the URL.
     */
    label?: pulumi.Input<string>;
    /**
     * Specific URL associated with the resource.
     */
    url?: pulumi.Input<string>;
}

/**
 * RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
 */
export interface RelationshipNoteArgs {
    /**
     * The type of relationship between the source and target SPDX elements
     */
    type?: pulumi.Input<enums.containeranalysis.v1beta1.RelationshipNoteType>;
}

/**
 * RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
 */
export interface RelationshipOccurrenceArgs {
    /**
     * A place for the SPDX file creator to record any general comments about the relationship
     */
    comment?: pulumi.Input<string>;
    /**
     * Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
     */
    source?: pulumi.Input<string>;
    /**
     * Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
     */
    target?: pulumi.Input<string>;
}

/**
 * A unique identifier for a Cloud Repo.
 */
export interface RepoIdArgs {
    /**
     * A combination of a project ID and a repo name.
     */
    projectRepoId?: pulumi.Input<inputs.containeranalysis.v1beta1.ProjectRepoIdArgs>;
    /**
     * A server-assigned, globally unique identifier.
     */
    uid?: pulumi.Input<string>;
}

/**
 * An entity that can have metadata. For example, a Docker image.
 */
export interface ResourceArgs {
    /**
     * Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
     *
     * @deprecated Deprecated, do not use. Use uri instead. The hash of the resource content. For example, the Docker digest.
     */
    contentHash?: pulumi.Input<inputs.containeranalysis.v1beta1.HashArgs>;
    /**
     * Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
     *
     * @deprecated Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - "Debian".
     */
    name?: pulumi.Input<string>;
    /**
     * The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.
     */
    uri: pulumi.Input<string>;
}

/**
 * Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
 */
export interface SignatureArgs {
    /**
     * The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
     */
    publicKeyId?: pulumi.Input<string>;
    /**
     * The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
     */
    signature?: pulumi.Input<string>;
}

/**
 * This defines the format used to record keys used in the software supply chain. An in-toto link is attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id": "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto specification.
 */
export interface SigningKeyArgs {
    /**
     * key_id is an identifier for the signing key.
     */
    keyId?: pulumi.Input<string>;
    /**
     * This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
     */
    keyScheme?: pulumi.Input<string>;
    /**
     * This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
     */
    keyType?: pulumi.Input<string>;
    /**
     * This field contains the actual public key.
     */
    publicKeyValue?: pulumi.Input<string>;
}

/**
 * Source describes the location of the source used for the build.
 */
export interface SourceArgs {
    /**
     * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
     */
    additionalContexts?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.SourceContextArgs>[]>;
    /**
     * If provided, the input binary artifacts for the build came from this location.
     */
    artifactStorageSourceUri?: pulumi.Input<string>;
    /**
     * If provided, the source code used for the build came from this location.
     */
    context?: pulumi.Input<inputs.containeranalysis.v1beta1.SourceContextArgs>;
    /**
     * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
     */
    fileHashes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
 */
export interface SourceContextArgs {
    /**
     * A SourceContext referring to a revision in a Google Cloud Source Repo.
     */
    cloudRepo?: pulumi.Input<inputs.containeranalysis.v1beta1.CloudRepoSourceContextArgs>;
    /**
     * A SourceContext referring to a Gerrit project.
     */
    gerrit?: pulumi.Input<inputs.containeranalysis.v1beta1.GerritSourceContextArgs>;
    /**
     * A SourceContext referring to any third party Git repo (e.g., GitHub).
     */
    git?: pulumi.Input<inputs.containeranalysis.v1beta1.GitSourceContextArgs>;
    /**
     * Labels with user defined metadata.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface StatusArgs {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code?: pulumi.Input<number>;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message?: pulumi.Input<string>;
}

/**
 * Version contains structured information about the version of a package.
 */
export interface VersionArgs {
    /**
     * Used to correct mistakes in the version numbering scheme.
     */
    epoch?: pulumi.Input<number>;
    /**
     * Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
     */
    inclusive?: pulumi.Input<boolean>;
    /**
     * Distinguishes between sentinel MIN/MAX versions and normal versions.
     */
    kind: pulumi.Input<enums.containeranalysis.v1beta1.VersionKind>;
    /**
     * Required only when version kind is NORMAL. The main part of the version name.
     */
    name?: pulumi.Input<string>;
    /**
     * The iteration of the package build from the above version.
     */
    revision?: pulumi.Input<string>;
}

/**
 * Vulnerability provides metadata about a security vulnerability in a Note.
 */
export interface VulnerabilityArgs {
    /**
     * The CVSS score for this vulnerability.
     */
    cvssScore?: pulumi.Input<number>;
    /**
     * The full description of the CVSS for version 2.
     */
    cvssV2?: pulumi.Input<inputs.containeranalysis.v1beta1.CVSSArgs>;
    /**
     * The full description of the CVSS for version 3.
     */
    cvssV3?: pulumi.Input<inputs.containeranalysis.v1beta1.CVSSv3Args>;
    /**
     * CVSS version used to populate cvss_score and severity.
     */
    cvssVersion?: pulumi.Input<enums.containeranalysis.v1beta1.VulnerabilityCvssVersion>;
    /**
     * A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
     */
    cwe?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
     */
    details?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.DetailArgs>[]>;
    /**
     * Note provider assigned impact of the vulnerability.
     */
    severity?: pulumi.Input<enums.containeranalysis.v1beta1.VulnerabilitySeverity>;
    /**
     * The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
     */
    sourceUpdateTime?: pulumi.Input<string>;
    /**
     * Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
     */
    windowsDetails?: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.WindowsDetailArgs>[]>;
}

/**
 * The location of the vulnerability.
 */
export interface VulnerabilityLocationArgs {
    /**
     * The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.
     */
    cpeUri: pulumi.Input<string>;
    /**
     * The package being described.
     */
    package: pulumi.Input<string>;
    /**
     * The version of the package being described.
     */
    version: pulumi.Input<inputs.containeranalysis.v1beta1.VersionArgs>;
}

export interface WindowsDetailArgs {
    /**
     * The CPE URI in [cpe format](https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar.
     */
    cpeUri: pulumi.Input<string>;
    /**
     * The description of the vulnerability.
     */
    description?: pulumi.Input<string>;
    /**
     * The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed kb's presence is considered a fix.
     */
    fixingKbs: pulumi.Input<pulumi.Input<inputs.containeranalysis.v1beta1.KnowledgeBaseArgs>[]>;
    /**
     * The name of the vulnerability.
     */
    name: pulumi.Input<string>;
}

