// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
 */
export interface AnalysisCompletedResponse {
    /**
     * type of analysis that were completed on a resource.
     */
    analysisType: string[];
}

/**
 * Artifact describes a build product.
 */
export interface ArtifactResponse {
    /**
     * Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
     */
    checksum: string;
    /**
     * Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
     *
     * @deprecated Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
     */
    name: string;
    /**
     * Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
     */
    names: string[];
}

/**
 * This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.
 */
export interface AttestationAuthorityHintResponse {
    /**
     * The human readable name of this Attestation Authority, for example "qa".
     */
    humanReadableName: string;
}

/**
 * Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `AttestationAuthority` for "QA" and one for "build". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.
 */
export interface AttestationAuthorityResponse {
    hint: outputs.containeranalysis.v1alpha1.AttestationAuthorityHintResponse;
}

/**
 * Occurrence that represents a single "attestation". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).
 */
export interface AttestationResponse {
    pgpSignedAttestation: outputs.containeranalysis.v1alpha1.PgpSignedAttestationResponse;
}

/**
 * Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.
 */
export interface BasisResponse {
    /**
     * The fingerprint of the base image.
     */
    fingerprint: outputs.containeranalysis.v1alpha1.FingerprintResponse;
    /**
     * The resource_url for the resource representing the basis of associated occurrence images.
     */
    resourceUrl: string;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.containeranalysis.v1alpha1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * Message encapsulating build provenance details.
 */
export interface BuildDetailsResponse {
    /**
     * Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
     *
     * @deprecated Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
     */
    intotoProvenance: outputs.containeranalysis.v1alpha1.InTotoProvenanceResponse;
    /**
     * In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
     */
    intotoStatement: outputs.containeranalysis.v1alpha1.InTotoStatementResponse;
    /**
     * The actual provenance
     */
    provenance: outputs.containeranalysis.v1alpha1.BuildProvenanceResponse;
    /**
     * Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
     */
    provenanceBytes: string;
}

/**
 * Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
 */
export interface BuildProvenanceResponse {
    /**
     * Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
     */
    buildOptions: {[key: string]: string};
    /**
     * Version string of the builder at the time this build was executed.
     */
    builderVersion: string;
    /**
     * Output of the build.
     */
    builtArtifacts: outputs.containeranalysis.v1alpha1.ArtifactResponse[];
    /**
     * Commands requested by the build.
     */
    commands: outputs.containeranalysis.v1alpha1.CommandResponse[];
    /**
     * Time at which the build was created.
     */
    createTime: string;
    /**
     * E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
     */
    creator: string;
    /**
     * Time at which execution of the build was finished.
     */
    finishTime: string;
    /**
     * Google Cloud Storage bucket where logs were written.
     */
    logsBucket: string;
    /**
     * ID of the project.
     */
    project: string;
    /**
     * Details of the Source input to the build.
     */
    sourceProvenance: outputs.containeranalysis.v1alpha1.SourceResponse;
    /**
     * Time at which execution of the build was started.
     */
    startTime: string;
    /**
     * Trigger identifier if the build was triggered automatically; empty if not.
     */
    triggerId: string;
}

/**
 * Message encapsulating the signature of the verified build.
 */
export interface BuildSignatureResponse {
    /**
     * An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).
     */
    keyId: string;
    /**
     * The type of the key, either stored in `public_key` or referenced in `key_id`
     */
    keyType: string;
    /**
     * Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
     */
    publicKey: string;
    /**
     * Signature of the related `BuildProvenance`, encoded in a base64 string.
     */
    signature: string;
}

/**
 * Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.
 */
export interface BuildTypeResponse {
    /**
     * Version of the builder which produced this Note.
     */
    builderVersion: string;
    /**
     * Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`.
     */
    signature: outputs.containeranalysis.v1alpha1.BuildSignatureResponse;
}

export interface BuilderConfigResponse {
}

/**
 * Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
 */
export interface CVSSResponse {
    /**
     * Defined in CVSS v3, CVSS v2
     */
    attackComplexity: string;
    /**
     * Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2
     */
    attackVector: string;
    /**
     * Defined in CVSS v2
     */
    authentication: string;
    /**
     * Defined in CVSS v3, CVSS v2
     */
    availabilityImpact: string;
    /**
     * The base score is a function of the base metric scores.
     */
    baseScore: number;
    /**
     * Defined in CVSS v3, CVSS v2
     */
    confidentialityImpact: string;
    exploitabilityScore: number;
    impactScore: number;
    /**
     * Defined in CVSS v3, CVSS v2
     */
    integrityImpact: string;
    /**
     * Defined in CVSS v3
     */
    privilegesRequired: string;
    /**
     * Defined in CVSS v3
     */
    scope: string;
    /**
     * Defined in CVSS v3
     */
    userInteraction: string;
}

/**
 * A compliance check that is a CIS benchmark.
 */
export interface CisBenchmarkResponse {
    /**
     * The profile level of this CIS benchmark check.
     */
    profileLevel: number;
    /**
     * The severity level of this CIS benchmark check.
     */
    severity: string;
}

/**
 * Command describes a step performed as part of the build pipeline.
 */
export interface CommandResponse {
    /**
     * Command-line arguments used when executing this Command.
     */
    args: string[];
    /**
     * Working directory (relative to project source root) used when running this Command.
     */
    dir: string;
    /**
     * Environment variables set before running this Command.
     */
    env: string[];
    /**
     * Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
     */
    name: string;
    /**
     * The ID(s) of the Command(s) that this Command depends on.
     */
    waitFor: string[];
}

/**
 * Indicates that the builder claims certain fields in this message to be complete.
 */
export interface CompletenessResponse {
    /**
     * If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
     */
    arguments: boolean;
    /**
     * If true, the builder claims that recipe.environment is claimed to be complete.
     */
    environment: boolean;
    /**
     * If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
     */
    materials: boolean;
}

/**
 * ComplianceNote encapsulates all information about a specific compliance check.
 */
export interface ComplianceNoteResponse {
    /**
     * Right now we only have one compliance type, but we may add additional types in the future.
     */
    cisBenchmark: outputs.containeranalysis.v1alpha1.CisBenchmarkResponse;
    /**
     * A description about this compliance check.
     */
    description: string;
    /**
     * A rationale for the existence of this compliance check.
     */
    rationale: string;
    /**
     * A description of remediation steps if the compliance check fails.
     */
    remediation: string;
    /**
     * Serialized scan instructions with a predefined format.
     */
    scanInstructions: string;
    /**
     * The title that identifies this compliance check.
     */
    title: string;
    /**
     * The OS and config versions the benchmark applies to.
     */
    version: outputs.containeranalysis.v1alpha1.ComplianceVersionResponse[];
}

/**
 * An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
 */
export interface ComplianceOccurrenceResponse {
    /**
     * The reason for non compliance of these files.
     */
    nonComplianceReason: string;
    /**
     * A list of files which are violating compliance checks.
     */
    nonCompliantFiles: outputs.containeranalysis.v1alpha1.NonCompliantFileResponse[];
}

/**
 * Describes the CIS benchmark version that is applicable to a given OS and os version.
 */
export interface ComplianceVersionResponse {
    /**
     * The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
     */
    benchmarkDocument: string;
    /**
     * The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
     */
    cpeUri: string;
    /**
     * The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
     */
    version: string;
}

/**
 * A note describing an attestation
 */
export interface DSSEAttestationNoteResponse {
    /**
     * DSSEHint hints at the purpose of the attestation authority.
     */
    hint: outputs.containeranalysis.v1alpha1.DSSEHintResponse;
}

/**
 * An occurrence describing an attestation on a resource
 */
export interface DSSEAttestationOccurrenceResponse {
    /**
     * If doing something security critical, make sure to verify the signatures in this metadata.
     */
    envelope: outputs.containeranalysis.v1alpha1.EnvelopeResponse;
    statement: outputs.containeranalysis.v1alpha1.InTotoStatementResponse;
}

/**
 * This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
 */
export interface DSSEHintResponse {
    /**
     * The human readable name of this attestation authority, for example "cloudbuild-prod".
     */
    humanReadableName: string;
}

/**
 * An artifact that can be deployed in some runtime.
 */
export interface DeployableResponse {
    /**
     * Resource URI for the artifact being deployed.
     */
    resourceUri: string[];
}

/**
 * The period during which some deployable was active in a runtime.
 */
export interface DeploymentResponse {
    /**
     * Address of the runtime element hosting this deployment.
     */
    address: string;
    /**
     * Configuration used to create this deployment.
     */
    config: string;
    /**
     * Beginning of the lifetime of this deployment.
     */
    deployTime: string;
    /**
     * Platform hosting this deployment.
     */
    platform: string;
    /**
     * Resource URI for the artifact being deployed taken from the deployable field with the same name.
     */
    resourceUri: string[];
    /**
     * End of the lifetime of this deployment.
     */
    undeployTime: string;
    /**
     * Identity of the user that triggered this deployment.
     */
    userEmail: string;
}

/**
 * Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
 */
export interface DerivedResponse {
    /**
     * This contains the base image URL for the derived image occurrence.
     */
    baseResourceUrl: string;
    /**
     * The number of layers by which this image differs from the associated image basis.
     */
    distance: number;
    /**
     * The fingerprint of the derived image.
     */
    fingerprint: outputs.containeranalysis.v1alpha1.FingerprintResponse;
    /**
     * This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
     */
    layerInfo: outputs.containeranalysis.v1alpha1.LayerResponse[];
}

/**
 * Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
 */
export interface DetailResponse {
    /**
     * The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
     */
    cpeUri: string;
    /**
     * A vendor-specific description of this note.
     */
    description: string;
    /**
     * The fix for this specific package version.
     */
    fixedLocation: outputs.containeranalysis.v1alpha1.VulnerabilityLocationResponse;
    /**
     * Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.
     */
    isObsolete: boolean;
    /**
     * The max version of the package in which the vulnerability exists.
     */
    maxAffectedVersion: outputs.containeranalysis.v1alpha1.VersionResponse;
    /**
     * The min version of the package in which the vulnerability exists.
     */
    minAffectedVersion: outputs.containeranalysis.v1alpha1.VersionResponse;
    /**
     * The name of the package where the vulnerability was found. This field can be used as a filter in list requests.
     */
    package: string;
    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc)
     */
    packageType: string;
    /**
     * The severity (eg: distro assigned severity) for this vulnerability.
     */
    severityName: string;
    /**
     * The source from which the information in this Detail was obtained.
     */
    source: string;
    /**
     * The vendor of the product. e.g. "google"
     */
    vendor: string;
}

/**
 * Digest information.
 */
export interface DigestResponse {
    /**
     * `SHA1`, `SHA512` etc.
     */
    algo: string;
    /**
     * Value of the digest.
     */
    digestBytes: string;
}

/**
 * Provides information about the scan status of a discovered resource.
 */
export interface DiscoveredResponse {
    /**
     * The list of analysis that were completed for a resource.
     */
    analysisCompleted: outputs.containeranalysis.v1alpha1.AnalysisCompletedResponse;
    /**
     * Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
     */
    analysisError: outputs.containeranalysis.v1alpha1.StatusResponse[];
    /**
     * The status of discovery for the resource.
     */
    analysisStatus: string;
    /**
     * When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API.
     */
    analysisStatusError: outputs.containeranalysis.v1alpha1.StatusResponse;
    /**
     * The time occurrences related to this discovery occurrence were archived.
     */
    archiveTime: string;
    /**
     * Whether the resource is continuously analyzed.
     */
    continuousAnalysis: string;
    /**
     * The CPE of the resource being scanned.
     */
    cpe: string;
    /**
     * The last time this resource was scanned.
     */
    lastScanTime: string;
    /**
     * An operation that indicates the status of the current scan. This field is deprecated, do not use.
     *
     * @deprecated Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use.
     */
    operation: outputs.containeranalysis.v1alpha1.OperationResponse;
}

/**
 * A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.
 */
export interface DiscoveryResponse {
    /**
     * The kind of analysis that is handled by this discovery.
     */
    analysisKind: string;
}

/**
 * This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror
 */
export interface DistributionResponse {
    /**
     * The CPU architecture for which packages in this distribution channel were built
     */
    architecture: string;
    /**
     * The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
     */
    cpeUri: string;
    /**
     * The distribution channel-specific description of this package.
     */
    description: string;
    /**
     * The latest available version of this package in this distribution channel.
     */
    latestVersion: outputs.containeranalysis.v1alpha1.VersionResponse;
    /**
     * A freeform string denoting the maintainer of this package.
     */
    maintainer: string;
    /**
     * The distribution channel-specific homepage for this package.
     */
    url: string;
}

/**
 * DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/
 */
export interface DocumentNoteResponse {
    /**
     * Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata")
     */
    dataLicence: string;
    /**
     * Provide a reference number that can be used to understand how to parse and interpret the rest of the file
     */
    spdxVersion: string;
}

/**
 * DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/
 */
export interface DocumentOccurrenceResponse {
    /**
     * Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard
     */
    createTime: string;
    /**
     * A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields
     */
    creatorComment: string;
    /**
     * Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name
     */
    creators: string[];
    /**
     * A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document
     */
    documentComment: string;
    /**
     * Identify any external SPDX documents referenced within this SPDX document
     */
    externalDocumentRefs: string[];
    /**
     * A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created
     */
    licenseListVersion: string;
    /**
     * Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter
     */
    namespace: string;
    /**
     * Identify name of this document as designated by creator
     */
    title: string;
}

/**
 * MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
 */
export interface EnvelopeResponse {
    /**
     * The bytes being signed
     */
    payload: string;
    /**
     * The type of payload being signed
     */
    payloadType: string;
    /**
     * The signatures over the payload
     */
    signatures: outputs.containeranalysis.v1alpha1.EnvelopeSignatureResponse[];
}

/**
 * A DSSE signature
 */
export interface EnvelopeSignatureResponse {
    /**
     * A reference id to the key being used for signing
     */
    keyid: string;
    /**
     * The signature itself
     */
    sig: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
 */
export interface ExternalRefResponse {
    /**
     * An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package
     */
    category: string;
    /**
     * Human-readable information about the purpose and target of the reference
     */
    comment: string;
    /**
     * The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location
     */
    locator: string;
    /**
     * Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
     */
    type: string;
}

/**
 * Indicates the location at which a package was found.
 */
export interface FileLocationResponse {
    /**
     * For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
     */
    filePath: string;
}

/**
 * FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
 */
export interface FileNoteResponse {
    /**
     * Provide a unique identifier to match analysis information on each specific file in a package
     */
    checksum: string[];
    /**
     * This field provides information about the type of file identified
     */
    fileType: string;
    /**
     * Identify the full path and filename that corresponds to the file information in this section
     */
    title: string;
}

/**
 * FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/
 */
export interface FileOccurrenceResponse {
    /**
     * This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts
     */
    attributions: string[];
    /**
     * This field provides a place for the SPDX file creator to record any general comments about the file
     */
    comment: string;
    /**
     * This field provides a place for the SPDX file creator to record file contributors
     */
    contributors: string[];
    /**
     * Identify the copyright holder of the file, as well as any dates present
     */
    copyright: string;
    /**
     * This field contains the license information actually found in the file, if any
     */
    filesLicenseInfo: string[];
    /**
     * This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined
     */
    licenseConcluded: outputs.containeranalysis.v1alpha1.LicenseResponse;
    /**
     * This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file
     */
    notice: string;
}

/**
 * A set of properties that uniquely identify a given Docker image.
 */
export interface FingerprintResponse {
    /**
     * The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.
     */
    v1Name: string;
    /**
     * The ordered list of v2 blobs that represent a given image.
     */
    v2Blob: string[];
    /**
     * The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.
     */
    v2Name: string;
}

/**
 * An alias to a repo revision.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse {
    /**
     * The alias kind.
     */
    kind: string;
    /**
     * The alias name.
     */
    name: string;
}

/**
 * A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponse {
    /**
     * An alias, which may be a branch or tag.
     */
    aliasContext: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse;
    /**
     * The ID of the repo.
     */
    repoId: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponse;
    /**
     * A revision ID.
     */
    revisionId: string;
}

/**
 * A SourceContext referring to a Gerrit project.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponse {
    /**
     * An alias, which may be a branch or tag.
     */
    aliasContext: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1AliasContextResponse;
    /**
     * The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
     */
    gerritProject: string;
    /**
     * The URI of a running Gerrit instance.
     */
    hostUri: string;
    /**
     * A revision (commit) ID.
     */
    revisionId: string;
}

/**
 * A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponse {
    /**
     * Git commit hash.
     */
    revisionId: string;
    /**
     * Git repository URL.
     */
    url: string;
}

/**
 * Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponse {
    /**
     * The ID of the project.
     */
    project: string;
    /**
     * The name of the repo. Leave empty for the default repo.
     */
    repoName: string;
}

/**
 * A unique identifier for a Cloud Repo.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1RepoIdResponse {
    /**
     * A combination of a project ID and a repo name.
     */
    projectRepoId: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoIdResponse;
    /**
     * A server-assigned, globally unique identifier.
     */
    uid: string;
}

/**
 * Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponse {
}

/**
 * Indicates that the builder claims certain fields in this message to be complete.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponse {
    /**
     * If true, the builder claims that invocation.environment is complete.
     */
    environment: boolean;
    /**
     * If true, the builder claims that materials is complete.
     */
    materials: boolean;
    /**
     * If true, the builder claims that invocation.parameters is complete.
     */
    parameters: boolean;
}

/**
 * Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse {
    /**
     * Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.
     */
    digest: {[key: string]: string};
    /**
     * String identifying the entry point into the build.
     */
    entryPoint: string;
    /**
     * URI indicating the identity of the source of the config.
     */
    uri: string;
}

/**
 * Identifies the event that kicked off the build.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse {
    /**
     * Describes where the config file that kicked off the build came from.
     */
    configSource: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSourceResponse;
    /**
     * Any other builder-controlled inputs necessary for correctly evaluating the build.
     */
    environment: {[key: string]: string};
    /**
     * Collection of all external inputs that influenced the build on top of invocation.configSource.
     */
    parameters: {[key: string]: string};
}

/**
 * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse {
    /**
     * Collection of cryptographic digests for the contents of this artifact.
     */
    digest: {[key: string]: string};
    /**
     * The method by which this artifact was referenced during the build.
     */
    uri: string;
}

/**
 * Other properties of the build.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse {
    /**
     * The timestamp of when the build completed.
     */
    buildFinishedOn: string;
    /**
     * Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.
     */
    buildInvocationId: string;
    /**
     * The timestamp of when the build started.
     */
    buildStartedOn: string;
    /**
     * Indicates that the builder claims certain fields in this message to be complete.
     */
    completeness: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompletenessResponse;
    /**
     * If true, the builder claims that running invocation on materials will produce bit-for-bit identical output.
     */
    reproducible: boolean;
}

/**
 * A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
 */
export interface GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse {
    /**
     * A SourceContext referring to a revision in a Google Cloud Source Repo.
     */
    cloudRepo: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContextResponse;
    /**
     * A SourceContext referring to a Gerrit project.
     */
    gerrit: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContextResponse;
    /**
     * A SourceContext referring to any third party Git repo (e.g., GitHub).
     */
    git: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1GitSourceContextResponse;
    /**
     * Labels with user defined metadata.
     */
    labels: {[key: string]: string};
}

/**
 * Container message for hash values.
 */
export interface HashResponse {
    /**
     * The type of hash that was performed.
     */
    type: string;
    /**
     * The hash value.
     */
    value: string;
}

export interface InTotoProvenanceResponse {
    /**
     * required
     */
    builderConfig: outputs.containeranalysis.v1alpha1.BuilderConfigResponse;
    /**
     * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     */
    materials: string[];
    metadata: outputs.containeranalysis.v1alpha1.MetadataResponse;
    /**
     * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
     */
    recipe: outputs.containeranalysis.v1alpha1.RecipeResponse;
}

/**
 * Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
 */
export interface InTotoStatementResponse {
    /**
     * "https://slsa.dev/provenance/v0.1" for SlsaProvenance.
     */
    predicateType: string;
    /**
     * Generic Grafeas provenance.
     */
    provenance: outputs.containeranalysis.v1alpha1.InTotoProvenanceResponse;
    /**
     * SLSA 0.1 provenance.
     */
    slsaProvenance: outputs.containeranalysis.v1alpha1.SlsaProvenanceResponse;
    /**
     * SLSA 0.2 provenance.
     */
    slsaProvenanceZeroTwo: outputs.containeranalysis.v1alpha1.SlsaProvenanceZeroTwoResponse;
    /**
     * subject is the subjects of the intoto statement
     */
    subject: outputs.containeranalysis.v1alpha1.SubjectResponse[];
    /**
     * Always "https://in-toto.io/Statement/v0.1".
     */
    type: string;
}

/**
 * This represents how a particular software package may be installed on a system.
 */
export interface InstallationResponse {
    /**
     * The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
     */
    architecture: string;
    /**
     * The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
     */
    cpeUri: string;
    /**
     * Licenses that have been declared by the authors of the package.
     */
    license: outputs.containeranalysis.v1alpha1.LicenseResponse;
    /**
     * All of the places within the filesystem versions of this package have been found.
     */
    location: outputs.containeranalysis.v1alpha1.LocationResponse[];
    /**
     * The name of the installed package.
     */
    name: string;
    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     */
    packageType: string;
    /**
     * The version of the package.
     */
    version: outputs.containeranalysis.v1alpha1.VersionResponse;
}

/**
 * Layer holds metadata specific to a layer of a Docker image.
 */
export interface LayerResponse {
    /**
     * The recovered arguments to the Dockerfile directive.
     */
    arguments: string;
    /**
     * The recovered Dockerfile directive used to construct this layer.
     */
    directive: string;
}

/**
 * License information.
 */
export interface LicenseResponse {
    /**
     * Comments
     */
    comments: string;
    /**
     * Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
     */
    expression: string;
}

/**
 * An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
 */
export interface LocationResponse {
    /**
     * Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
     *
     * @deprecated Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
     */
    cpeUri: string;
    /**
     * The path from which we gathered that this package/version is installed.
     */
    path: string;
    /**
     * Deprecated. The version installed at this location.
     *
     * @deprecated Deprecated. The version installed at this location.
     */
    version: outputs.containeranalysis.v1alpha1.VersionResponse;
}

/**
 * Material is a material used in the generation of the provenance
 */
export interface MaterialResponse {
    /**
     * digest is a map from a hash algorithm (e.g. sha256) to the value in the material
     */
    digest: {[key: string]: string};
    /**
     * uri is the uri of the material
     */
    uri: string;
}

/**
 * Other properties of the build.
 */
export interface MetadataResponse {
    /**
     * The timestamp of when the build completed.
     */
    buildFinishedOn: string;
    /**
     * Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
     */
    buildInvocationId: string;
    /**
     * The timestamp of when the build started.
     */
    buildStartedOn: string;
    /**
     * Indicates that the builder claims certain fields in this message to be complete.
     */
    completeness: outputs.containeranalysis.v1alpha1.CompletenessResponse;
    /**
     * If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
     */
    reproducible: boolean;
}

/**
 * Details about files that caused a compliance check to fail.
 */
export interface NonCompliantFileResponse {
    /**
     * Command to display the non-compliant files.
     */
    displayCommand: string;
    /**
     * display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.
     */
    path: string;
    /**
     * Explains why a file is non compliant for a CIS check.
     */
    reason: string;
}

/**
 * This resource represents a long-running operation that is the result of a network API call.
 */
export interface OperationResponse {
    /**
     * If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
     */
    done: boolean;
    /**
     * The error result of the operation in case of failure or cancellation.
     */
    error: outputs.containeranalysis.v1alpha1.StatusResponse;
    /**
     * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
     */
    metadata: {[key: string]: string};
    /**
     * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
     */
    name: string;
    /**
     * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
     */
    response: {[key: string]: string};
}

/**
 * PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
 */
export interface PackageInfoNoteResponse {
    /**
     * Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document
     */
    analyzed: boolean;
    /**
     * A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts
     */
    attribution: string;
    /**
     * Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file
     */
    checksum: string;
    /**
     * Identify the copyright holders of the package, as well as any dates present
     */
    copyright: string;
    /**
     * A more detailed description of the package
     */
    detailedDescription: string;
    /**
     * This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created
     */
    downloadLocation: string;
    /**
     * ExternalRef
     */
    externalRefs: outputs.containeranalysis.v1alpha1.ExternalRefResponse[];
    /**
     * Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
     */
    filesLicenseInfo: string[];
    /**
     * Provide a place for the SPDX file creator to record a web site that serves as the package's home page
     */
    homePage: string;
    /**
     * List the licenses that have been declared by the authors of the package
     */
    licenseDeclared: outputs.containeranalysis.v1alpha1.LicenseResponse;
    /**
     * If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came
     */
    originator: string;
    /**
     * The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
     */
    packageType: string;
    /**
     * A short description of the package
     */
    summaryDescription: string;
    /**
     * Identify the actual distribution source for the package/directory identified in the SPDX file
     */
    supplier: string;
    /**
     * Identify the full name of the package as given by the Package Originator
     */
    title: string;
    /**
     * This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file
     */
    verificationCode: string;
    /**
     * Identify the version of the package
     */
    version: string;
}

/**
 * PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/
 */
export interface PackageInfoOccurrenceResponse {
    /**
     * A place for the SPDX file creator to record any general comments about the package being described
     */
    comment: string;
    /**
     * Provide the actual file name of the package, or path of the directory being treated as a package
     */
    filename: string;
    /**
     * Provide a place for the SPDX file creator to record a web site that serves as the package's home page
     */
    homePage: string;
    /**
     * package or alternative values, if the governing license cannot be determined
     */
    licenseConcluded: outputs.containeranalysis.v1alpha1.LicenseResponse;
    /**
     * The type of package: OS, MAVEN, GO, GO_STDLIB, etc.
     */
    packageType: string;
    /**
     * Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package
     */
    sourceInfo: string;
    /**
     * A short description of the package
     */
    summaryDescription: string;
    /**
     * Identify the full name of the package as given by the Package Originator
     */
    title: string;
    /**
     * Identify the version of the package
     */
    version: string;
}

/**
 * This message wraps a location affected by a vulnerability and its associated fix (if one is available).
 */
export interface PackageIssueResponse {
    /**
     * The location of the vulnerability.
     */
    affectedLocation: outputs.containeranalysis.v1alpha1.VulnerabilityLocationResponse;
    /**
     * The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when distro or language system has not yet assigned a severity for this vulnerability.
     */
    effectiveSeverity: string;
    /**
     * The location of the available fix for vulnerability.
     */
    fixedLocation: outputs.containeranalysis.v1alpha1.VulnerabilityLocationResponse;
    /**
     * The type of package (e.g. OS, MAVEN, GO).
     */
    packageType: string;
    severityName: string;
}

/**
 * This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.
 */
export interface PackageResponse {
    /**
     * The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
     */
    architecture: string;
    /**
     * The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
     */
    cpeUri: string;
    /**
     * The description of this package.
     */
    description: string;
    /**
     * Hash value, typically a file digest, that allows unique identification a specific package.
     */
    digest: outputs.containeranalysis.v1alpha1.DigestResponse[];
    /**
     * The various channels by which a package is distributed.
     */
    distribution: outputs.containeranalysis.v1alpha1.DistributionResponse[];
    /**
     * Licenses that have been declared by the authors of the package.
     */
    license: outputs.containeranalysis.v1alpha1.LicenseResponse;
    /**
     * A freeform text denoting the maintainer of this package.
     */
    maintainer: string;
    /**
     * The name of the package.
     */
    name: string;
    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     */
    packageType: string;
    /**
     * The homepage for this package.
     */
    url: string;
    /**
     * The version of the package.
     */
    version: outputs.containeranalysis.v1alpha1.VersionResponse;
}

/**
 * An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.
 */
export interface PgpSignedAttestationResponse {
    /**
     * Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
     */
    contentType: string;
    /**
     * The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
     */
    pgpKeyId: string;
    /**
     * The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
     */
    signature: string;
}

/**
 * Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
 */
export interface RecipeResponse {
    /**
     * Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.
     */
    arguments: {[key: string]: string}[];
    /**
     * Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
     */
    definedInMaterial: string;
    /**
     * String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
     */
    entryPoint: string;
    /**
     * Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.
     */
    environment: {[key: string]: string}[];
    /**
     * URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
     */
    type: string;
}

/**
 * Metadata for any related URL information
 */
export interface RelatedUrlResponse {
    /**
     * Label to describe usage of the URL
     */
    label: string;
    /**
     * Specific URL to associate with the note
     */
    url: string;
}

/**
 * RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
 */
export interface RelationshipNoteResponse {
    /**
     * The type of relationship between the source and target SPDX elements
     */
    type: string;
}

/**
 * RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
 */
export interface RelationshipOccurrenceResponse {
    /**
     * A place for the SPDX file creator to record any general comments about the relationship
     */
    comment: string;
    /**
     * Also referred to as SPDXRef-A The source SPDX element (file, package, etc)
     */
    source: string;
    /**
     * Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
     */
    target: string;
    /**
     * The type of relationship between the source and target SPDX elements
     */
    type: string;
}

/**
 * RepoSource describes the location of the source in a Google Cloud Source Repository.
 */
export interface RepoSourceResponse {
    /**
     * Name of the branch to build.
     */
    branchName: string;
    /**
     * Explicit commit SHA to build.
     */
    commitSha: string;
    /**
     * ID of the project that owns the repo.
     */
    project: string;
    /**
     * Name of the repo.
     */
    repoName: string;
    /**
     * Name of the tag to build.
     */
    tagName: string;
}

/**
 *  Resource is an entity that can have metadata. E.g., a Docker image.
 */
export interface ResourceResponse {
    /**
     * The hash of the resource content. E.g., the Docker digest.
     */
    contentHash: outputs.containeranalysis.v1alpha1.HashResponse;
    /**
     * The name of the resource. E.g., the name of a Docker image - "Debian".
     */
    name: string;
    /**
     * The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image.
     */
    uri: string;
}

/**
 * SlsaBuilder encapsulates the identity of the builder of this provenance.
 */
export interface SlsaBuilderResponse {
}

/**
 * Indicates that the builder claims certain fields in this message to be complete.
 */
export interface SlsaCompletenessResponse {
    /**
     * If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
     */
    arguments: boolean;
    /**
     * If true, the builder claims that recipe.environment is claimed to be complete.
     */
    environment: boolean;
    /**
     * If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
     */
    materials: boolean;
}

/**
 * Other properties of the build.
 */
export interface SlsaMetadataResponse {
    /**
     * The timestamp of when the build completed.
     */
    buildFinishedOn: string;
    /**
     * Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
     */
    buildInvocationId: string;
    /**
     * The timestamp of when the build started.
     */
    buildStartedOn: string;
    /**
     * Indicates that the builder claims certain fields in this message to be complete.
     */
    completeness: outputs.containeranalysis.v1alpha1.SlsaCompletenessResponse;
    /**
     * If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
     */
    reproducible: boolean;
}

/**
 * SlsaProvenance is the slsa provenance as defined by the slsa spec.
 */
export interface SlsaProvenanceResponse {
    /**
     * builder is the builder of this provenance
     */
    builder: outputs.containeranalysis.v1alpha1.SlsaBuilderResponse;
    /**
     * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     */
    materials: outputs.containeranalysis.v1alpha1.MaterialResponse[];
    /**
     * metadata is the metadata of the provenance
     */
    metadata: outputs.containeranalysis.v1alpha1.SlsaMetadataResponse;
    /**
     * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible).
     */
    recipe: outputs.containeranalysis.v1alpha1.SlsaRecipeResponse;
}

/**
 * SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.
 */
export interface SlsaProvenanceZeroTwoResponse {
    /**
     * Lists the steps in the build.
     */
    buildConfig: {[key: string]: string};
    /**
     * URI indicating what type of build was performed.
     */
    buildType: string;
    /**
     * Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
     */
    builder: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilderResponse;
    /**
     * Identifies the event that kicked off the build.
     */
    invocation: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocationResponse;
    /**
     * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
     */
    materials: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterialResponse[];
    /**
     * Other properties of the build.
     */
    metadata: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadataResponse;
}

/**
 * Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
 */
export interface SlsaRecipeResponse {
    /**
     * Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
     */
    arguments: {[key: string]: string};
    /**
     * Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
     */
    definedInMaterial: string;
    /**
     * String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
     */
    entryPoint: string;
    /**
     * Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
     */
    environment: {[key: string]: string};
    /**
     * URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
     */
    type: string;
}

/**
 * Source describes the location of the source used for the build.
 */
export interface SourceResponse {
    /**
     * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
     */
    additionalContexts: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse[];
    /**
     * If provided, the input binary artifacts for the build came from this location.
     */
    artifactStorageSource: outputs.containeranalysis.v1alpha1.StorageSourceResponse;
    /**
     * If provided, the source code used for the build came from this location.
     */
    context: outputs.containeranalysis.v1alpha1.GoogleDevtoolsContaineranalysisV1alpha1SourceContextResponse;
    /**
     * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
     */
    fileHashes: {[key: string]: string};
    /**
     * If provided, get source from this location in a Cloud Repo.
     */
    repoSource: outputs.containeranalysis.v1alpha1.RepoSourceResponse;
    /**
     * If provided, get the source from this location in Google Cloud Storage.
     */
    storageSource: outputs.containeranalysis.v1alpha1.StorageSourceResponse;
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface StatusResponse {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code: number;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details: {[key: string]: string}[];
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message: string;
}

/**
 * StorageSource describes the location of the source in an archive file in Google Cloud Storage.
 */
export interface StorageSourceResponse {
    /**
     * Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
     */
    bucket: string;
    /**
     * Google Cloud Storage generation for the object.
     */
    generation: string;
    /**
     * Google Cloud Storage object containing source.
     */
    object: string;
}

/**
 * Subject refers to the subject of the intoto statement
 */
export interface SubjectResponse {
    /**
     * "": "" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
     */
    digest: {[key: string]: string};
    /**
     * name is the name of the Subject used here
     */
    name: string;
}

/**
 * The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
 */
export interface UpgradeDistributionResponse {
    /**
     * The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.
     */
    classification: string;
    /**
     * Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
     */
    cpeUri: string;
    /**
     * The cve that would be resolved by this upgrade.
     */
    cve: string[];
    /**
     * The severity as specified by the upstream operating system.
     */
    severity: string;
}

/**
 * An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.
 */
export interface UpgradeNoteResponse {
    /**
     * Metadata about the upgrade for each specific operating system.
     */
    distributions: outputs.containeranalysis.v1alpha1.UpgradeDistributionResponse[];
    /**
     * Required - The package this Upgrade is for.
     */
    package: string;
    /**
     * Required - The version of the package in machine + human readable form.
     */
    version: outputs.containeranalysis.v1alpha1.VersionResponse;
}

/**
 * An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).
 */
export interface UpgradeOccurrenceResponse {
    /**
     * Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
     */
    distribution: outputs.containeranalysis.v1alpha1.UpgradeDistributionResponse;
    /**
     * Required - The package this Upgrade is for.
     */
    package: string;
    /**
     * Required - The version of the package in a machine + human readable form.
     */
    parsedVersion: outputs.containeranalysis.v1alpha1.VersionResponse;
}

/**
 * Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
 */
export interface VersionResponse {
    /**
     * Used to correct mistakes in the version numbering scheme.
     */
    epoch: number;
    /**
     * Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not
     */
    inclusive: boolean;
    /**
     * Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
     */
    kind: string;
    /**
     * The main part of the version name.
     */
    name: string;
    /**
     * The iteration of the package build from the above version.
     */
    revision: string;
}

/**
 * Used by Occurrence to point to where the vulnerability exists and how to fix it.
 */
export interface VulnerabilityDetailsResponse {
    /**
     * The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
     */
    cvssScore: number;
    /**
     * The CVSS v3 score of this vulnerability.
     */
    cvssV3: outputs.containeranalysis.v1alpha1.CVSSResponse;
    /**
     * The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
     */
    effectiveSeverity: string;
    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     */
    packageIssue: outputs.containeranalysis.v1alpha1.PackageIssueResponse[];
    /**
     * The note provider assigned Severity of the vulnerability.
     */
    severity: string;
    /**
     * The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
     */
    type: string;
}

/**
 * The location of the vulnerability
 */
export interface VulnerabilityLocationResponse {
    /**
     * The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.
     */
    cpeUri: string;
    /**
     * The file location at which this package was found.
     */
    fileLocation: outputs.containeranalysis.v1alpha1.FileLocationResponse[];
    /**
     * The package being described.
     */
    package: string;
    /**
     * The version of the package being described. This field can be used as a filter in list requests.
     */
    version: outputs.containeranalysis.v1alpha1.VersionResponse;
}

/**
 * VulnerabilityType provides metadata about a security vulnerability.
 */
export interface VulnerabilityTypeResponse {
    /**
     * The CVSS score for this Vulnerability.
     */
    cvssScore: number;
    /**
     * The full description of the CVSS for version 2.
     */
    cvssV2: outputs.containeranalysis.v1alpha1.CVSSResponse;
    /**
     * A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html
     */
    cwe: string[];
    /**
     * All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.
     */
    details: outputs.containeranalysis.v1alpha1.DetailResponse[];
    /**
     * Note provider assigned impact of the vulnerability
     */
    severity: string;
}

