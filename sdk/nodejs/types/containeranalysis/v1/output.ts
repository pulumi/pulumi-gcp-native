// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * An alias to a repo revision.
 */
export interface AliasContextResponse {
    /**
     * The alias kind.
     */
    kind: string;
    /**
     * The alias name.
     */
    name: string;
}

/**
 * Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
 */
export interface AnalysisCompletedResponse {
    analysisType: string[];
}

/**
 * Artifact describes a build product.
 */
export interface ArtifactResponse {
    /**
     * Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
     */
    checksum: string;
    /**
     * Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
     */
    names: string[];
}

/**
 * Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
 */
export interface AttestationNoteResponse {
    /**
     * Hint hints at the purpose of the attestation authority.
     */
    hint: outputs.containeranalysis.v1.HintResponse;
}

/**
 * Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
 */
export interface AttestationOccurrenceResponse {
    /**
     * One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
     */
    jwts: outputs.containeranalysis.v1.JwtResponse[];
    /**
     * The serialized payload that is verified by one or more `signatures`.
     */
    serializedPayload: string;
    /**
     * One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
     */
    signatures: outputs.containeranalysis.v1.SignatureResponse[];
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.containeranalysis.v1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
 */
export interface BuildNoteResponse {
    /**
     * Immutable. Version of the builder which produced this build.
     */
    builderVersion: string;
}

/**
 * Details of a build occurrence.
 */
export interface BuildOccurrenceResponse {
    /**
     * Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
     *
     * @deprecated Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
     */
    intotoProvenance: outputs.containeranalysis.v1.InTotoProvenanceResponse;
    /**
     * In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
     */
    intotoStatement: outputs.containeranalysis.v1.InTotoStatementResponse;
    /**
     * The actual provenance for the build.
     */
    provenance: outputs.containeranalysis.v1.BuildProvenanceResponse;
    /**
     * Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
     */
    provenanceBytes: string;
}

/**
 * Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
 */
export interface BuildProvenanceResponse {
    /**
     * Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
     */
    buildOptions: {[key: string]: string};
    /**
     * Version string of the builder at the time this build was executed.
     */
    builderVersion: string;
    /**
     * Output of the build.
     */
    builtArtifacts: outputs.containeranalysis.v1.ArtifactResponse[];
    /**
     * Commands requested by the build.
     */
    commands: outputs.containeranalysis.v1.CommandResponse[];
    /**
     * Time at which the build was created.
     */
    createTime: string;
    /**
     * E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
     */
    creator: string;
    /**
     * Time at which execution of the build was finished.
     */
    endTime: string;
    /**
     * URI where any logs for this provenance were written.
     */
    logsUri: string;
    /**
     * ID of the project.
     */
    project: string;
    /**
     * Details of the Source input to the build.
     */
    sourceProvenance: outputs.containeranalysis.v1.SourceResponse;
    /**
     * Time at which execution of the build was started.
     */
    startTime: string;
    /**
     * Trigger identifier if the build was triggered automatically; empty if not.
     */
    triggerId: string;
}

export interface BuilderConfigResponse {
}

/**
 * Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
 */
export interface CVSSResponse {
    attackComplexity: string;
    /**
     * Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
     */
    attackVector: string;
    authentication: string;
    availabilityImpact: string;
    /**
     * The base score is a function of the base metric scores.
     */
    baseScore: number;
    confidentialityImpact: string;
    exploitabilityScore: number;
    impactScore: number;
    integrityImpact: string;
    privilegesRequired: string;
    scope: string;
    userInteraction: string;
}

/**
 * Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
 */
export interface CVSSv3Response {
    attackComplexity: string;
    /**
     * Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
     */
    attackVector: string;
    availabilityImpact: string;
    /**
     * The base score is a function of the base metric scores.
     */
    baseScore: number;
    confidentialityImpact: string;
    exploitabilityScore: number;
    impactScore: number;
    integrityImpact: string;
    privilegesRequired: string;
    scope: string;
    userInteraction: string;
}

/**
 * The category to which the update belongs.
 */
export interface CategoryResponse {
    /**
     * The identifier of the category.
     */
    categoryId: string;
    /**
     * The localized name of the category.
     */
    name: string;
}

/**
 * A compliance check that is a CIS benchmark.
 */
export interface CisBenchmarkResponse {
    profileLevel: number;
    severity: string;
}

/**
 * A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
 */
export interface CloudRepoSourceContextResponse {
    /**
     * An alias, which may be a branch or tag.
     */
    aliasContext: outputs.containeranalysis.v1.AliasContextResponse;
    /**
     * The ID of the repo.
     */
    repoId: outputs.containeranalysis.v1.RepoIdResponse;
    /**
     * A revision ID.
     */
    revisionId: string;
}

/**
 * Command describes a step performed as part of the build pipeline.
 */
export interface CommandResponse {
    /**
     * Command-line arguments used when executing this command.
     */
    args: string[];
    /**
     * Working directory (relative to project source root) used when running this command.
     */
    dir: string;
    /**
     * Environment variables set before running this command.
     */
    env: string[];
    /**
     * Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
     */
    name: string;
    /**
     * The ID(s) of the command(s) that this command depends on.
     */
    waitFor: string[];
}

/**
 * Indicates that the builder claims certain fields in this message to be complete.
 */
export interface CompletenessResponse {
    /**
     * If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
     */
    arguments: boolean;
    /**
     * If true, the builder claims that recipe.environment is claimed to be complete.
     */
    environment: boolean;
    /**
     * If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
     */
    materials: boolean;
}

export interface ComplianceNoteResponse {
    cisBenchmark: outputs.containeranalysis.v1.CisBenchmarkResponse;
    /**
     * A description about this compliance check.
     */
    description: string;
    /**
     * A rationale for the existence of this compliance check.
     */
    rationale: string;
    /**
     * A description of remediation steps if the compliance check fails.
     */
    remediation: string;
    /**
     * Serialized scan instructions with a predefined format.
     */
    scanInstructions: string;
    /**
     * The title that identifies this compliance check.
     */
    title: string;
    /**
     * The OS and config versions the benchmark applies to.
     */
    version: outputs.containeranalysis.v1.ComplianceVersionResponse[];
}

/**
 * An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
 */
export interface ComplianceOccurrenceResponse {
    nonComplianceReason: string;
    nonCompliantFiles: outputs.containeranalysis.v1.NonCompliantFileResponse[];
}

/**
 * Describes the CIS benchmark version that is applicable to a given OS and os version.
 */
export interface ComplianceVersionResponse {
    /**
     * The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
     */
    benchmarkDocument: string;
    /**
     * The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
     */
    cpeUri: string;
    /**
     * The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
     */
    version: string;
}

export interface DSSEAttestationNoteResponse {
    /**
     * DSSEHint hints at the purpose of the attestation authority.
     */
    hint: outputs.containeranalysis.v1.DSSEHintResponse;
}

/**
 * Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
 */
export interface DSSEAttestationOccurrenceResponse {
    /**
     * If doing something security critical, make sure to verify the signatures in this metadata.
     */
    envelope: outputs.containeranalysis.v1.EnvelopeResponse;
    statement: outputs.containeranalysis.v1.InTotoStatementResponse;
}

/**
 * This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
 */
export interface DSSEHintResponse {
    /**
     * The human readable name of this attestation authority, for example "cloudbuild-prod".
     */
    humanReadableName: string;
}

/**
 * An artifact that can be deployed in some runtime.
 */
export interface DeploymentNoteResponse {
    /**
     * Resource URI for the artifact being deployed.
     */
    resourceUri: string[];
}

/**
 * The period during which some deployable was active in a runtime.
 */
export interface DeploymentOccurrenceResponse {
    /**
     * Address of the runtime element hosting this deployment.
     */
    address: string;
    /**
     * Configuration used to create this deployment.
     */
    config: string;
    /**
     * Beginning of the lifetime of this deployment.
     */
    deployTime: string;
    /**
     * Platform hosting this deployment.
     */
    platform: string;
    /**
     * Resource URI for the artifact being deployed taken from the deployable field with the same name.
     */
    resourceUri: string[];
    /**
     * End of the lifetime of this deployment.
     */
    undeployTime: string;
    /**
     * Identity of the user that triggered this deployment.
     */
    userEmail: string;
}

/**
 * A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
 */
export interface DetailResponse {
    /**
     * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
     */
    affectedCpeUri: string;
    /**
     * The package this vulnerability affects.
     */
    affectedPackage: string;
    /**
     * The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
     */
    affectedVersionEnd: outputs.containeranalysis.v1.VersionResponse;
    /**
     * The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.
     */
    affectedVersionStart: outputs.containeranalysis.v1.VersionResponse;
    /**
     * A vendor-specific description of this vulnerability.
     */
    description: string;
    /**
     * The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
     */
    fixedCpeUri: string;
    /**
     * The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
     */
    fixedPackage: string;
    /**
     * The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
     */
    fixedVersion: outputs.containeranalysis.v1.VersionResponse;
    /**
     * Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
     */
    isObsolete: boolean;
    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     */
    packageType: string;
    /**
     * The distro assigned severity of this vulnerability.
     */
    severityName: string;
    /**
     * The source from which the information in this Detail was obtained.
     */
    source: string;
    /**
     * The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
     */
    sourceUpdateTime: string;
    /**
     * The name of the vendor of the product.
     */
    vendor: string;
}

/**
 * Digest information.
 */
export interface DigestResponse {
    /**
     * `SHA1`, `SHA512` etc.
     */
    algo: string;
    /**
     * Value of the digest.
     */
    digestBytes: string;
}

/**
 * A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
 */
export interface DiscoveryNoteResponse {
    /**
     * Immutable. The kind of analysis that is handled by this discovery.
     */
    analysisKind: string;
}

/**
 * Provides information about the analysis status of a discovered resource.
 */
export interface DiscoveryOccurrenceResponse {
    analysisCompleted: outputs.containeranalysis.v1.AnalysisCompletedResponse;
    /**
     * Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
     */
    analysisError: outputs.containeranalysis.v1.StatusResponse[];
    /**
     * The status of discovery for the resource.
     */
    analysisStatus: string;
    /**
     * When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
     */
    analysisStatusError: outputs.containeranalysis.v1.StatusResponse;
    /**
     * The time occurrences related to this discovery occurrence were archived.
     */
    archiveTime: string;
    /**
     * Whether the resource is continuously analyzed.
     */
    continuousAnalysis: string;
    /**
     * The CPE of the resource being scanned.
     */
    cpe: string;
    /**
     * The last time this resource was scanned.
     */
    lastScanTime: string;
}

/**
 * This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
 */
export interface DistributionResponse {
    /**
     * The CPU architecture for which packages in this distribution channel were built.
     */
    architecture: string;
    /**
     * The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
     */
    cpeUri: string;
    /**
     * The distribution channel-specific description of this package.
     */
    description: string;
    /**
     * The latest available version of this package in this distribution channel.
     */
    latestVersion: outputs.containeranalysis.v1.VersionResponse;
    /**
     * A freeform string denoting the maintainer of this package.
     */
    maintainer: string;
    /**
     * The distribution channel-specific homepage for this package.
     */
    url: string;
}

/**
 * MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
 */
export interface EnvelopeResponse {
    payload: string;
    payloadType: string;
    signatures: outputs.containeranalysis.v1.EnvelopeSignatureResponse[];
}

export interface EnvelopeSignatureResponse {
    keyid: string;
    sig: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * A set of properties that uniquely identify a given Docker image.
 */
export interface FingerprintResponse {
    /**
     * The layer ID of the final layer in the Docker image's v1 representation.
     */
    v1Name: string;
    /**
     * The ordered list of v2 blobs that represent a given image.
     */
    v2Blob: string[];
    /**
     * The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
     */
    v2Name: string;
}

/**
 * A SourceContext referring to a Gerrit project.
 */
export interface GerritSourceContextResponse {
    /**
     * An alias, which may be a branch or tag.
     */
    aliasContext: outputs.containeranalysis.v1.AliasContextResponse;
    /**
     * The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
     */
    gerritProject: string;
    /**
     * The URI of a running Gerrit instance.
     */
    hostUri: string;
    /**
     * A revision (commit) ID.
     */
    revisionId: string;
}

/**
 * A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
 */
export interface GitSourceContextResponse {
    /**
     * Git commit hash.
     */
    revisionId: string;
    /**
     * Git repository URL.
     */
    url: string;
}

/**
 * Indicates the location at which a package was found.
 */
export interface GrafeasV1FileLocationResponse {
    /**
     * For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
     */
    filePath: string;
}

/**
 * Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
 */
export interface GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponse {
}

/**
 * Indicates that the builder claims certain fields in this message to be complete.
 */
export interface GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponse {
    environment: boolean;
    materials: boolean;
    parameters: boolean;
}

/**
 * Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
 */
export interface GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponse {
    digest: {[key: string]: string};
    entryPoint: string;
    uri: string;
}

/**
 * Identifies the event that kicked off the build.
 */
export interface GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponse {
    configSource: outputs.containeranalysis.v1.GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSourceResponse;
    environment: {[key: string]: string};
    parameters: {[key: string]: string};
}

/**
 * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
 */
export interface GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse {
    digest: {[key: string]: string};
    uri: string;
}

/**
 * Other properties of the build.
 */
export interface GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse {
    buildFinishedOn: string;
    buildInvocationId: string;
    buildStartedOn: string;
    completeness: outputs.containeranalysis.v1.GrafeasV1SlsaProvenanceZeroTwoSlsaCompletenessResponse;
    reproducible: boolean;
}

/**
 * This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
 */
export interface HintResponse {
    /**
     * The human readable name of this attestation authority, for example "qa".
     */
    humanReadableName: string;
}

/**
 * The unique identifier of the update.
 */
export interface IdentityResponse {
    /**
     * The revision number of the update.
     */
    revision: number;
    /**
     * The revision independent identifier of the update.
     */
    updateId: string;
}

/**
 * Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.
 */
export interface ImageNoteResponse {
    /**
     * Immutable. The fingerprint of the base image.
     */
    fingerprint: outputs.containeranalysis.v1.FingerprintResponse;
    /**
     * Immutable. The resource_url for the resource representing the basis of associated occurrence images.
     */
    resourceUrl: string;
}

/**
 * Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
 */
export interface ImageOccurrenceResponse {
    /**
     * This contains the base image URL for the derived image occurrence.
     */
    baseResourceUrl: string;
    /**
     * The number of layers by which this image differs from the associated image basis.
     */
    distance: number;
    /**
     * The fingerprint of the derived image.
     */
    fingerprint: outputs.containeranalysis.v1.FingerprintResponse;
    /**
     * This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
     */
    layerInfo: outputs.containeranalysis.v1.LayerResponse[];
}

export interface InTotoProvenanceResponse {
    /**
     * required
     */
    builderConfig: outputs.containeranalysis.v1.BuilderConfigResponse;
    /**
     * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     */
    materials: string[];
    metadata: outputs.containeranalysis.v1.MetadataResponse;
    /**
     * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
     */
    recipe: outputs.containeranalysis.v1.RecipeResponse;
}

/**
 * Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
 */
export interface InTotoStatementResponse {
    /**
     * `https://slsa.dev/provenance/v0.1` for SlsaProvenance.
     */
    predicateType: string;
    provenance: outputs.containeranalysis.v1.InTotoProvenanceResponse;
    slsaProvenance: outputs.containeranalysis.v1.SlsaProvenanceResponse;
    slsaProvenanceZeroTwo: outputs.containeranalysis.v1.SlsaProvenanceZeroTwoResponse;
    subject: outputs.containeranalysis.v1.SubjectResponse[];
    /**
     * Always `https://in-toto.io/Statement/v0.1`.
     */
    type: string;
}

export interface JwtResponse {
    /**
     * The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1
     */
    compactJwt: string;
}

export interface KnowledgeBaseResponse {
    /**
     * The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).
     */
    name: string;
    /**
     * A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).
     */
    url: string;
}

/**
 * Layer holds metadata specific to a layer of a Docker image.
 */
export interface LayerResponse {
    /**
     * The recovered arguments to the Dockerfile directive.
     */
    arguments: string;
    /**
     * The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
     */
    directive: string;
}

/**
 * License information.
 */
export interface LicenseResponse {
    /**
     * Comments
     */
    comments: string;
    /**
     * Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
     */
    expression: string;
}

/**
 * An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
 */
export interface LocationResponse {
    /**
     * Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
     *
     * @deprecated Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
     */
    cpeUri: string;
    /**
     * The path from which we gathered that this package/version is installed.
     */
    path: string;
    /**
     * Deprecated. The version installed at this location.
     *
     * @deprecated Deprecated. The version installed at this location.
     */
    version: outputs.containeranalysis.v1.VersionResponse;
}

export interface MaterialResponse {
    digest: {[key: string]: string};
    uri: string;
}

/**
 * Other properties of the build.
 */
export interface MetadataResponse {
    /**
     * The timestamp of when the build completed.
     */
    buildFinishedOn: string;
    /**
     * Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
     */
    buildInvocationId: string;
    /**
     * The timestamp of when the build started.
     */
    buildStartedOn: string;
    /**
     * Indicates that the builder claims certain fields in this message to be complete.
     */
    completeness: outputs.containeranalysis.v1.CompletenessResponse;
    /**
     * If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
     */
    reproducible: boolean;
}

/**
 * Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.
 */
export interface NonCompliantFileResponse {
    /**
     * Command to display the non-compliant files.
     */
    displayCommand: string;
    /**
     * Empty if `display_command` is set.
     */
    path: string;
    /**
     * Explains why a file is non compliant for a CIS check.
     */
    reason: string;
}

/**
 * A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
 */
export interface PackageIssueResponse {
    /**
     * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
     */
    affectedCpeUri: string;
    /**
     * The package this vulnerability was found in.
     */
    affectedPackage: string;
    /**
     * The version of the package that is installed on the resource affected by this vulnerability.
     */
    affectedVersion: outputs.containeranalysis.v1.VersionResponse;
    /**
     * The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
     */
    effectiveSeverity: string;
    /**
     * The location at which this package was found.
     */
    fileLocation: outputs.containeranalysis.v1.GrafeasV1FileLocationResponse[];
    /**
     * Whether a fix is available for this package.
     */
    fixAvailable: boolean;
    /**
     * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
     */
    fixedCpeUri: string;
    /**
     * The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
     */
    fixedPackage: string;
    /**
     * The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
     */
    fixedVersion: outputs.containeranalysis.v1.VersionResponse;
    /**
     * The type of package (e.g. OS, MAVEN, GO).
     */
    packageType: string;
}

/**
 * PackageNote represents a particular package version.
 */
export interface PackageNoteResponse {
    /**
     * The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
     */
    architecture: string;
    /**
     * The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
     */
    cpeUri: string;
    /**
     * The description of this package.
     */
    description: string;
    /**
     * Hash value, typically a file digest, that allows unique identification a specific package.
     */
    digest: outputs.containeranalysis.v1.DigestResponse[];
    /**
     * Deprecated. The various channels by which a package is distributed.
     *
     * @deprecated Deprecated. The various channels by which a package is distributed.
     */
    distribution: outputs.containeranalysis.v1.DistributionResponse[];
    /**
     * Licenses that have been declared by the authors of the package.
     */
    license: outputs.containeranalysis.v1.LicenseResponse;
    /**
     * A freeform text denoting the maintainer of this package.
     */
    maintainer: string;
    /**
     * Immutable. The name of the package.
     */
    name: string;
    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     */
    packageType: string;
    /**
     * The homepage for this package.
     */
    url: string;
    /**
     * The version of the package.
     */
    version: outputs.containeranalysis.v1.VersionResponse;
}

/**
 * Details on how a particular software package was installed on a system.
 */
export interface PackageOccurrenceResponse {
    /**
     * The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
     */
    architecture: string;
    /**
     * The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
     */
    cpeUri: string;
    /**
     * Licenses that have been declared by the authors of the package.
     */
    license: outputs.containeranalysis.v1.LicenseResponse;
    /**
     * All of the places within the filesystem versions of this package have been found.
     */
    location: outputs.containeranalysis.v1.LocationResponse[];
    /**
     * The name of the installed package.
     */
    name: string;
    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     */
    packageType: string;
    /**
     * The version of the package.
     */
    version: outputs.containeranalysis.v1.VersionResponse;
}

/**
 * Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
 */
export interface ProjectRepoIdResponse {
    /**
     * The ID of the project.
     */
    project: string;
    /**
     * The name of the repo. Leave empty for the default repo.
     */
    repoName: string;
}

/**
 * Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
 */
export interface RecipeResponse {
    /**
     * Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
     */
    arguments: {[key: string]: string}[];
    /**
     * Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
     */
    definedInMaterial: string;
    /**
     * String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
     */
    entryPoint: string;
    /**
     * Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
     */
    environment: {[key: string]: string}[];
    /**
     * URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
     */
    type: string;
}

/**
 * Metadata for any related URL information.
 */
export interface RelatedUrlResponse {
    /**
     * Label to describe usage of the URL.
     */
    label: string;
    /**
     * Specific URL associated with the resource.
     */
    url: string;
}

/**
 * A unique identifier for a Cloud Repo.
 */
export interface RepoIdResponse {
    /**
     * A combination of a project ID and a repo name.
     */
    projectRepoId: outputs.containeranalysis.v1.ProjectRepoIdResponse;
    /**
     * A server-assigned, globally unique identifier.
     */
    uid: string;
}

/**
 * Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
 */
export interface SignatureResponse {
    /**
     * The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
     */
    publicKeyId: string;
    /**
     * The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
     */
    signature: string;
}

export interface SlsaBuilderResponse {
}

/**
 * Indicates that the builder claims certain fields in this message to be complete.
 */
export interface SlsaCompletenessResponse {
    /**
     * If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
     */
    arguments: boolean;
    /**
     * If true, the builder claims that recipe.environment is claimed to be complete.
     */
    environment: boolean;
    /**
     * If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
     */
    materials: boolean;
}

/**
 * Other properties of the build.
 */
export interface SlsaMetadataResponse {
    /**
     * The timestamp of when the build completed.
     */
    buildFinishedOn: string;
    /**
     * Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
     */
    buildInvocationId: string;
    /**
     * The timestamp of when the build started.
     */
    buildStartedOn: string;
    /**
     * Indicates that the builder claims certain fields in this message to be complete.
     */
    completeness: outputs.containeranalysis.v1.SlsaCompletenessResponse;
    /**
     * If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
     */
    reproducible: boolean;
}

export interface SlsaProvenanceResponse {
    /**
     * required
     */
    builder: outputs.containeranalysis.v1.SlsaBuilderResponse;
    /**
     * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
     */
    materials: outputs.containeranalysis.v1.MaterialResponse[];
    metadata: outputs.containeranalysis.v1.SlsaMetadataResponse;
    /**
     * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
     */
    recipe: outputs.containeranalysis.v1.SlsaRecipeResponse;
}

/**
 * See full explanation of fields at slsa.dev/provenance/v0.2.
 */
export interface SlsaProvenanceZeroTwoResponse {
    buildConfig: {[key: string]: string};
    buildType: string;
    builder: outputs.containeranalysis.v1.GrafeasV1SlsaProvenanceZeroTwoSlsaBuilderResponse;
    invocation: outputs.containeranalysis.v1.GrafeasV1SlsaProvenanceZeroTwoSlsaInvocationResponse;
    materials: outputs.containeranalysis.v1.GrafeasV1SlsaProvenanceZeroTwoSlsaMaterialResponse[];
    metadata: outputs.containeranalysis.v1.GrafeasV1SlsaProvenanceZeroTwoSlsaMetadataResponse;
}

/**
 * Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
 */
export interface SlsaRecipeResponse {
    /**
     * Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
     */
    arguments: {[key: string]: string};
    /**
     * Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
     */
    definedInMaterial: string;
    /**
     * String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
     */
    entryPoint: string;
    /**
     * Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
     */
    environment: {[key: string]: string};
    /**
     * URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
     */
    type: string;
}

/**
 * A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
 */
export interface SourceContextResponse {
    /**
     * A SourceContext referring to a revision in a Google Cloud Source Repo.
     */
    cloudRepo: outputs.containeranalysis.v1.CloudRepoSourceContextResponse;
    /**
     * A SourceContext referring to a Gerrit project.
     */
    gerrit: outputs.containeranalysis.v1.GerritSourceContextResponse;
    /**
     * A SourceContext referring to any third party Git repo (e.g., GitHub).
     */
    git: outputs.containeranalysis.v1.GitSourceContextResponse;
    /**
     * Labels with user defined metadata.
     */
    labels: {[key: string]: string};
}

/**
 * Source describes the location of the source used for the build.
 */
export interface SourceResponse {
    /**
     * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
     */
    additionalContexts: outputs.containeranalysis.v1.SourceContextResponse[];
    /**
     * If provided, the input binary artifacts for the build came from this location.
     */
    artifactStorageSourceUri: string;
    /**
     * If provided, the source code used for the build came from this location.
     */
    context: outputs.containeranalysis.v1.SourceContextResponse;
    /**
     * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
     */
    fileHashes: {[key: string]: string};
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface StatusResponse {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code: number;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details: {[key: string]: string}[];
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message: string;
}

export interface SubjectResponse {
    /**
     * `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
     */
    digest: {[key: string]: string};
    name: string;
}

/**
 * The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
 */
export interface UpgradeDistributionResponse {
    /**
     * The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
     */
    classification: string;
    /**
     * Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
     */
    cpeUri: string;
    /**
     * The cve tied to this Upgrade.
     */
    cve: string[];
    /**
     * The severity as specified by the upstream operating system.
     */
    severity: string;
}

/**
 * An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
 */
export interface UpgradeNoteResponse {
    /**
     * Metadata about the upgrade for each specific operating system.
     */
    distributions: outputs.containeranalysis.v1.UpgradeDistributionResponse[];
    /**
     * Required for non-Windows OS. The package this Upgrade is for.
     */
    package: string;
    /**
     * Required for non-Windows OS. The version of the package in machine + human readable form.
     */
    version: outputs.containeranalysis.v1.VersionResponse;
    /**
     * Required for Windows OS. Represents the metadata about the Windows update.
     */
    windowsUpdate: outputs.containeranalysis.v1.WindowsUpdateResponse;
}

/**
 * An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
 */
export interface UpgradeOccurrenceResponse {
    /**
     * Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
     */
    distribution: outputs.containeranalysis.v1.UpgradeDistributionResponse;
    /**
     * Required for non-Windows OS. The package this Upgrade is for.
     */
    package: string;
    /**
     * Required for non-Windows OS. The version of the package in a machine + human readable form.
     */
    parsedVersion: outputs.containeranalysis.v1.VersionResponse;
    /**
     * Required for Windows OS. Represents the metadata about the Windows update.
     */
    windowsUpdate: outputs.containeranalysis.v1.WindowsUpdateResponse;
}

/**
 * Version contains structured information about the version of a package.
 */
export interface VersionResponse {
    /**
     * Used to correct mistakes in the version numbering scheme.
     */
    epoch: number;
    /**
     * Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
     */
    fullName: string;
    /**
     * Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
     */
    inclusive: boolean;
    /**
     * Distinguishes between sentinel MIN/MAX versions and normal versions.
     */
    kind: string;
    /**
     * Required only when version kind is NORMAL. The main part of the version name.
     */
    name: string;
    /**
     * The iteration of the package build from the above version.
     */
    revision: string;
}

/**
 * A security vulnerability that can be found in resources.
 */
export interface VulnerabilityNoteResponse {
    /**
     * The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
     */
    cvssScore: number;
    /**
     * The full description of the CVSSv3 for this vulnerability.
     */
    cvssV3: outputs.containeranalysis.v1.CVSSv3Response;
    /**
     * CVSS version used to populate cvss_score and severity.
     */
    cvssVersion: string;
    /**
     * Details of all known distros and packages affected by this vulnerability.
     */
    details: outputs.containeranalysis.v1.DetailResponse[];
    /**
     * The note provider assigned severity of this vulnerability.
     */
    severity: string;
    /**
     * The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
     */
    sourceUpdateTime: string;
    /**
     * Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
     */
    windowsDetails: outputs.containeranalysis.v1.WindowsDetailResponse[];
}

/**
 * An occurrence of a severity vulnerability on a resource.
 */
export interface VulnerabilityOccurrenceResponse {
    /**
     * The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
     */
    cvssScore: number;
    /**
     * CVSS version used to populate cvss_score and severity.
     */
    cvssVersion: string;
    /**
     * The cvss v3 score for the vulnerability.
     */
    cvssv3: outputs.containeranalysis.v1.CVSSResponse;
    /**
     * The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
     */
    effectiveSeverity: string;
    /**
     * Whether at least one of the affected packages has a fix available.
     */
    fixAvailable: boolean;
    /**
     * A detailed description of this vulnerability.
     */
    longDescription: string;
    /**
     * The set of affected locations and their fixes (if available) within the associated resource.
     */
    packageIssue: outputs.containeranalysis.v1.PackageIssueResponse[];
    /**
     * URLs related to this vulnerability.
     */
    relatedUrls: outputs.containeranalysis.v1.RelatedUrlResponse[];
    /**
     * The note provider assigned severity of this vulnerability.
     */
    severity: string;
    /**
     * A one sentence description of this vulnerability.
     */
    shortDescription: string;
    /**
     * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     */
    type: string;
}

export interface WindowsDetailResponse {
    /**
     * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
     */
    cpeUri: string;
    /**
     * The description of this vulnerability.
     */
    description: string;
    /**
     * The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
     */
    fixingKbs: outputs.containeranalysis.v1.KnowledgeBaseResponse[];
    /**
     * The name of this vulnerability.
     */
    name: string;
}

/**
 * Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
 */
export interface WindowsUpdateResponse {
    /**
     * The list of categories to which the update belongs.
     */
    categories: outputs.containeranalysis.v1.CategoryResponse[];
    /**
     * The localized description of the update.
     */
    description: string;
    /**
     * Required - The unique identifier for the update.
     */
    identity: outputs.containeranalysis.v1.IdentityResponse;
    /**
     * The Microsoft Knowledge Base article IDs that are associated with the update.
     */
    kbArticleIds: string[];
    /**
     * The last published timestamp of the update.
     */
    lastPublishedTimestamp: string;
    /**
     * The hyperlink to the support information for the update.
     */
    supportUrl: string;
    /**
     * The localized title of the update.
     */
    title: string;
}

