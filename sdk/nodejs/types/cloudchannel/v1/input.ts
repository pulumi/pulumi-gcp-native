// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Association links that an entitlement has to other entitlements.
 */
export interface GoogleCloudChannelV1AssociationInfoArgs {
    /**
     * The name of the base entitlement, for which this entitlement is an add-on.
     */
    baseEntitlement?: pulumi.Input<string>;
}

/**
 * Commitment settings for commitment-based offers.
 */
export interface GoogleCloudChannelV1CommitmentSettingsArgs {
    /**
     * Optional. Renewal settings applicable for a commitment-based Offer.
     */
    renewalSettings?: pulumi.Input<inputs.cloudchannel.v1.GoogleCloudChannelV1RenewalSettingsArgs>;
}

/**
 * Contact information for a customer account.
 */
export interface GoogleCloudChannelV1ContactInfoArgs {
    /**
     * The customer account's contact email. Required for entitlements that create admin.google.com accounts, and serves as the customer's username for those accounts. Use this email to invite Team customers.
     */
    email?: pulumi.Input<string>;
    /**
     * The customer account contact's first name. Optional for Team customers.
     */
    firstName?: pulumi.Input<string>;
    /**
     * The customer account contact's last name. Optional for Team customers.
     */
    lastName?: pulumi.Input<string>;
    /**
     * The customer account's contact phone number.
     */
    phone?: pulumi.Input<string>;
    /**
     * Optional. The customer account contact's job title.
     */
    title?: pulumi.Input<string>;
}

/**
 * Definition for extended entitlement parameters.
 */
export interface GoogleCloudChannelV1ParameterArgs {
    /**
     * Name of the parameter.
     */
    name?: pulumi.Input<string>;
    /**
     * Value of the parameter.
     */
    value?: pulumi.Input<inputs.cloudchannel.v1.GoogleCloudChannelV1ValueArgs>;
}

/**
 * An adjustment that applies a flat markup or markdown to an entire bill.
 */
export interface GoogleCloudChannelV1PercentageAdjustmentArgs {
    /**
     * The percentage of the bill to adjust. For example: Mark down by 1% => "-1.00" Mark up by 1% => "1.00" Pass-Through => "0.00"
     */
    percentage?: pulumi.Input<inputs.cloudchannel.v1.GoogleTypeDecimalArgs>;
}

/**
 * Represents period in days/months/years.
 */
export interface GoogleCloudChannelV1PeriodArgs {
    /**
     * Total duration of Period Type defined.
     */
    duration?: pulumi.Input<number>;
    /**
     * Period Type.
     */
    periodType?: pulumi.Input<enums.cloudchannel.v1.GoogleCloudChannelV1PeriodPeriodType>;
}

/**
 * Renewal settings for renewable Offers.
 */
export interface GoogleCloudChannelV1RenewalSettingsArgs {
    /**
     * If false, the plan will be completed at the end date.
     */
    enableRenewal?: pulumi.Input<boolean>;
    /**
     * Describes how frequently the reseller will be billed, such as once per month.
     */
    paymentCycle?: pulumi.Input<inputs.cloudchannel.v1.GoogleCloudChannelV1PeriodArgs>;
    /**
     * Describes how a reseller will be billed.
     */
    paymentPlan?: pulumi.Input<enums.cloudchannel.v1.GoogleCloudChannelV1RenewalSettingsPaymentPlan>;
    /**
     * If true and enable_renewal = true, the unit (for example seats or licenses) will be set to the number of active units at renewal time.
     */
    resizeUnitCount?: pulumi.Input<boolean>;
}

/**
 * A type that represents the various adjustments you can apply to a bill.
 */
export interface GoogleCloudChannelV1RepricingAdjustmentArgs {
    /**
     * Flat markup or markdown on an entire bill.
     */
    percentageAdjustment?: pulumi.Input<inputs.cloudchannel.v1.GoogleCloudChannelV1PercentageAdjustmentArgs>;
}

/**
 * Configuration for repricing a Google bill over a period of time.
 */
export interface GoogleCloudChannelV1RepricingConfigArgs {
    /**
     * Information about the adjustment.
     */
    adjustment: pulumi.Input<inputs.cloudchannel.v1.GoogleCloudChannelV1RepricingAdjustmentArgs>;
    /**
     * Applies the repricing configuration at the channel partner level. This is the only supported value for ChannelPartnerRepricingConfig.
     */
    channelPartnerGranularity?: pulumi.Input<inputs.cloudchannel.v1.GoogleCloudChannelV1RepricingConfigChannelPartnerGranularityArgs>;
    /**
     * The YearMonth when these adjustments activate. The Day field needs to be "0" since we only accept YearMonth repricing boundaries.
     */
    effectiveInvoiceMonth: pulumi.Input<inputs.cloudchannel.v1.GoogleTypeDateArgs>;
    /**
     * Applies the repricing configuration at the entitlement level. This is the only supported value for CustomerRepricingConfig.
     */
    entitlementGranularity?: pulumi.Input<inputs.cloudchannel.v1.GoogleCloudChannelV1RepricingConfigEntitlementGranularityArgs>;
    /**
     * The RebillingBasis to use for this bill. Specifies the relative cost based on repricing costs you will apply.
     */
    rebillingBasis: pulumi.Input<enums.cloudchannel.v1.GoogleCloudChannelV1RepricingConfigRebillingBasis>;
}

/**
 * Applies the repricing configuration at the channel partner level. The channel partner value is derived from the resource name. Takes an empty json object.
 */
export interface GoogleCloudChannelV1RepricingConfigChannelPartnerGranularityArgs {
}

/**
 * Applies the repricing configuration at the entitlement level.
 */
export interface GoogleCloudChannelV1RepricingConfigEntitlementGranularityArgs {
    /**
     * Resource name of the entitlement. Format: accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
     */
    entitlement?: pulumi.Input<string>;
}

/**
 * Data type and value of a parameter.
 */
export interface GoogleCloudChannelV1ValueArgs {
    /**
     * Represents a boolean value.
     */
    boolValue?: pulumi.Input<boolean>;
    /**
     * Represents a double value.
     */
    doubleValue?: pulumi.Input<number>;
    /**
     * Represents an int64 value.
     */
    int64Value?: pulumi.Input<string>;
    /**
     * Represents an 'Any' proto value.
     */
    protoValue?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Represents a string value.
     */
    stringValue?: pulumi.Input<string>;
}

/**
 * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
export interface GoogleTypeDateArgs {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: pulumi.Input<number>;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: pulumi.Input<number>;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: pulumi.Input<number>;
}

/**
 * A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's BigDecimal or Python's decimal.Decimal. [BigDecimal]: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
 */
export interface GoogleTypeDecimalArgs {
    /**
     * The decimal value, as a string. The string representation consists of an optional sign, `+` (`U+002B`) or `-` (`U+002D`), followed by a sequence of zero or more decimal digits ("the integer"), optionally followed by a fraction, optionally followed by an exponent. An empty string **should** be interpreted as `0`. The fraction consists of a decimal point followed by zero or more decimal digits. The string must contain at least one digit in either the integer or the fraction. The number formed by the sign, the integer and the fraction is referred to as the significand. The exponent consists of the character `e` (`U+0065`) or `E` (`U+0045`) followed by one or more decimal digits. Services **should** normalize decimal values before storing them by: - Removing an explicitly-provided `+` sign (`+2.5` -> `2.5`). - Replacing a zero-length integer value with `0` (`.5` -> `0.5`). - Coercing the exponent character to upper-case, with explicit sign (`2.5e8` -> `2.5E+8`). - Removing an explicitly-provided zero exponent (`2.5E0` -> `2.5`). Services **may** perform additional normalization based on its own needs and the internal decimal implementation selected, such as shifting the decimal point and exponent value together (example: `2.5E-1` <-> `0.25`). Additionally, services **may** preserve trailing zeroes in the fraction to indicate increased precision, but are not required to do so. Note that only the `.` character is supported to divide the integer and the fraction; `,` **should not** be supported regardless of locale. Additionally, thousand separators **should not** be supported. If a service does support them, values **must** be normalized. The ENBF grammar is: DecimalString = '' | [Sign] Significand [Exponent]; Sign = '+' | '-'; Significand = Digits '.' | [Digits] '.' Digits; Exponent = ('e' | 'E') [Sign] Digits; Digits = { '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' }; Services **should** clearly document the range of supported values, the maximum supported precision (total number of digits), and, if applicable, the scale (number of digits after the decimal point), as well as how it behaves when receiving out-of-bounds values. Services **may** choose to accept values passed as input even when the value has a higher precision or scale than the service supports, and **should** round the value to fit the supported scale. Alternatively, the service **may** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if precision would be lost. Services **should** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if the service receives a value outside of the supported range.
     */
    value?: pulumi.Input<string>;
}

/**
 * Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
 */
export interface GoogleTypePostalAddressArgs {
    /**
     * Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
     */
    addressLines?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
     */
    administrativeArea?: pulumi.Input<string>;
    /**
     * Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
     */
    languageCode?: pulumi.Input<string>;
    /**
     * Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
     */
    locality?: pulumi.Input<string>;
    /**
     * Optional. The name of the organization at the address.
     */
    organization?: pulumi.Input<string>;
    /**
     * Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
     */
    postalCode?: pulumi.Input<string>;
    /**
     * Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
     */
    recipients?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
     */
    regionCode: pulumi.Input<string>;
    /**
     * The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
     */
    revision?: pulumi.Input<number>;
    /**
     * Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
     */
    sortingCode?: pulumi.Input<string>;
    /**
     * Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
     */
    sublocality?: pulumi.Input<string>;
}

