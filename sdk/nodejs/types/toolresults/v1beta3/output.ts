// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Android app information.
 */
export interface AndroidAppInfoResponse {
    /**
     * The name of the app. Optional
     */
    name: string;
    /**
     * The package name of the app. Required.
     */
    packageName: string;
    /**
     * The internal version code of the app. Optional.
     */
    versionCode: string;
    /**
     * The version name of the app. Optional.
     */
    versionName: string;
}

/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. See for more information on types of Android tests.
 */
export interface AndroidInstrumentationTestResponse {
    /**
     * The java package for the test to be executed. Required
     */
    testPackageId: string;
    /**
     * The InstrumentationTestRunner class. Required
     */
    testRunnerClass: string;
    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
     */
    testTargets: string[];
    /**
     * The flag indicates whether Android Test Orchestrator will be used to run test or not.
     */
    useOrchestrator: boolean;
}

/**
 * A test of an android application that explores the application on a virtual or physical Android device, finding culprits and crashes as it goes.
 */
export interface AndroidRoboTestResponse {
    /**
     * The initial activity that should be used to start the app. Optional
     */
    appInitialActivity: string;
    /**
     * The java package for the bootstrap. Optional
     */
    bootstrapPackageId: string;
    /**
     * The runner class for the bootstrap. Optional
     */
    bootstrapRunnerClass: string;
    /**
     * The max depth of the traversal stack Robo can explore. Optional
     */
    maxDepth: number;
    /**
     * The max number of steps/actions Robo can execute. Default is no limit (0). Optional
     */
    maxSteps: number;
}

/**
 * Test Loops are tests that can be launched by the app itself, determining when to run by listening for an intent.
 */
export interface AndroidTestLoopResponse {
}

/**
 * An Android mobile test specification.
 */
export interface AndroidTestResponse {
    /**
     * Information about the application under test.
     */
    androidAppInfo: outputs.toolresults.v1beta3.AndroidAppInfoResponse;
    /**
     * An Android instrumentation test.
     */
    androidInstrumentationTest: outputs.toolresults.v1beta3.AndroidInstrumentationTestResponse;
    /**
     * An Android robo test.
     */
    androidRoboTest: outputs.toolresults.v1beta3.AndroidRoboTestResponse;
    /**
     * An Android test loop.
     */
    androidTestLoop: outputs.toolresults.v1beta3.AndroidTestLoopResponse;
    /**
     * Max time a test is allowed to run before it is automatically cancelled.
     */
    testTimeout: outputs.toolresults.v1beta3.DurationResponse;
}

/**
 *  `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example "foo.bar.com/x/y.z" will yield type name "y.z". # JSON The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { "@type": "type.googleapis.com/google.profile.Person", "firstName": , "lastName": } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message google.protobuf.Duration): { "@type": "type.googleapis.com/google.protobuf.Duration", "value": "1.212s" }
 */
export interface AnyResponse {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one "/" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading "." is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a google.protobuf.Type value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     */
    typeUrl: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     */
    value: string;
}

/**
 * Encapsulates the metadata for basic sample series represented by a line chart
 */
export interface BasicPerfSampleSeriesResponse {
    perfMetricType: string;
    perfUnit: string;
    sampleSeriesLabel: string;
}

/**
 *  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
 */
export interface DurationResponse {
    /**
     * Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
     */
    nanos: number;
    /**
     * Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
     */
    seconds: string;
}

/**
 * Details for an outcome with a FAILURE outcome summary.
 */
export interface FailureDetailResponse {
    /**
     * If the failure was severe because the system (app) under test crashed.
     */
    crashed: boolean;
    /**
     * If the device ran out of memory during a test, causing the test to crash.
     */
    deviceOutOfMemory: boolean;
    /**
     * If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.
     */
    failedRoboscript: boolean;
    /**
     * If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.
     */
    notInstalled: boolean;
    /**
     * If a native process (including any other than the app) crashed.
     */
    otherNativeCrash: boolean;
    /**
     * If the test overran some time limit, and that is why it failed.
     */
    timedOut: boolean;
    /**
     * If the robo was unable to crawl the app; perhaps because the app did not start.
     */
    unableToCrawl: boolean;
}

/**
 * A reference to a file.
 */
export interface FileReferenceResponse {
    /**
     * The URI of a file stored in Google Cloud Storage. For example: http://storage.googleapis.com/mybucket/path/to/test.xml or in gsutil format: gs://mybucket/path/to/test.xml with version-specific info, gs://mybucket/path/to/test.xml#1360383693690000 An INVALID_ARGUMENT error will be returned if the URI format is not supported. - In response: always set - In create/update request: always set
     */
    fileUri: string;
}

/**
 * Details for an outcome with an INCONCLUSIVE outcome summary.
 */
export interface InconclusiveDetailResponse {
    /**
     * If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.
     */
    abortedByUser: boolean;
    /**
     * If results are being provided to the user in certain cases of infrastructure failures
     */
    hasErrorLogs: boolean;
    /**
     * If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed. For example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail.
     */
    infrastructureFailure: boolean;
}

/**
 * Step Id and outcome of each individual step that was run as a group with other steps with the same configuration.
 */
export interface IndividualOutcomeResponse {
    /**
     * Unique int given to each step. Ranges from 0(inclusive) to total number of steps(exclusive). The primary step is 0.
     */
    multistepNumber: number;
    outcomeSummary: string;
    /**
     * How long it took for this step to run.
     */
    runDuration: outputs.toolresults.v1beta3.DurationResponse;
    stepId: string;
}

/**
 * iOS app information
 */
export interface IosAppInfoResponse {
    /**
     * The name of the app. Required
     */
    name: string;
}

/**
 * A Robo test for an iOS application.
 */
export interface IosRoboTestResponse {
}

/**
 * A game loop test of an iOS application.
 */
export interface IosTestLoopResponse {
    /**
     * Bundle ID of the app.
     */
    bundleId: string;
}

/**
 * A iOS mobile test specification
 */
export interface IosTestResponse {
    /**
     * Information about the application under test.
     */
    iosAppInfo: outputs.toolresults.v1beta3.IosAppInfoResponse;
    /**
     * An iOS Robo test.
     */
    iosRoboTest: outputs.toolresults.v1beta3.IosRoboTestResponse;
    /**
     * An iOS test loop.
     */
    iosTestLoop: outputs.toolresults.v1beta3.IosTestLoopResponse;
    /**
     * An iOS XCTest.
     */
    iosXcTest: outputs.toolresults.v1beta3.IosXcTestResponse;
    /**
     * Max time a test is allowed to run before it is automatically cancelled.
     */
    testTimeout: outputs.toolresults.v1beta3.DurationResponse;
}

/**
 * A test of an iOS application that uses the XCTest framework.
 */
export interface IosXcTestResponse {
    /**
     * Bundle ID of the app.
     */
    bundleId: string;
    /**
     * Xcode version that the test was run with.
     */
    xcodeVersion: string;
}

/**
 * One dimension of the matrix of different runs of a step.
 */
export interface MatrixDimensionDefinitionResponse {
}

/**
 * Details when multiple steps are run with the same configuration as a group.
 */
export interface MultiStepResponse {
    /**
     * Unique int given to each step. Ranges from 0(inclusive) to total number of steps(exclusive). The primary step is 0.
     */
    multistepNumber: number;
    /**
     * Present if it is a primary (original) step.
     */
    primaryStep: outputs.toolresults.v1beta3.PrimaryStepResponse;
    /**
     * Step Id of the primary (original) step, which might be this step.
     */
    primaryStepId: string;
}

/**
 * Interprets a result so that humans and machines can act on it.
 */
export interface OutcomeResponse {
    /**
     * More information about a FAILURE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not FAILURE. Optional
     */
    failureDetail: outputs.toolresults.v1beta3.FailureDetailResponse;
    /**
     * More information about an INCONCLUSIVE outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not INCONCLUSIVE. Optional
     */
    inconclusiveDetail: outputs.toolresults.v1beta3.InconclusiveDetailResponse;
    /**
     * More information about a SKIPPED outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SKIPPED. Optional
     */
    skippedDetail: outputs.toolresults.v1beta3.SkippedDetailResponse;
    /**
     * More information about a SUCCESS outcome. Returns INVALID_ARGUMENT if this field is set but the summary is not SUCCESS. Optional
     */
    successDetail: outputs.toolresults.v1beta3.SuccessDetailResponse;
    /**
     * The simplest way to interpret a result. Required
     */
    summary: string;
}

/**
 * Stores rollup test status of multiple steps that were run as a group and outcome of each individual step.
 */
export interface PrimaryStepResponse {
    /**
     * Step Id and outcome of each individual step.
     */
    individualOutcome: outputs.toolresults.v1beta3.IndividualOutcomeResponse[];
    /**
     * Rollup test status of multiple steps that were run with the same configuration as a group.
     */
    rollUp: string;
}

/**
 * Details for an outcome with a SKIPPED outcome summary.
 */
export interface SkippedDetailResponse {
    /**
     * If the App doesn't support the specific API level.
     */
    incompatibleAppVersion: boolean;
    /**
     * If the App doesn't run on the specific architecture, for example, x86.
     */
    incompatibleArchitecture: boolean;
    /**
     * If the requested OS version doesn't run on the specific device model.
     */
    incompatibleDevice: boolean;
}

/**
 * The details about how to run the execution.
 */
export interface SpecificationResponse {
    /**
     * An Android mobile test execution specification.
     */
    androidTest: outputs.toolresults.v1beta3.AndroidTestResponse;
    /**
     * An iOS mobile test execution specification.
     */
    iosTest: outputs.toolresults.v1beta3.IosTestResponse;
}

/**
 * A stacktrace.
 */
export interface StackTraceResponse {
    /**
     * The stack trace message. Required
     */
    exception: string;
}

export interface StepDimensionValueEntryResponse {
    key: string;
    value: string;
}

export interface StepLabelsEntryResponse {
    key: string;
    value: string;
}

/**
 * Details for an outcome with a SUCCESS outcome summary. LINT.IfChange
 */
export interface SuccessDetailResponse {
    /**
     * If a native process other than the app crashed.
     */
    otherNativeCrash: boolean;
}

/**
 * A reference to a test case. Test case references are canonically ordered lexicographically by these three factors: * First, by test_suite_name. * Second, by class_name. * Third, by name.
 */
export interface TestCaseReferenceResponse {
    /**
     * The name of the class.
     */
    className: string;
    /**
     * The name of the test case. Required.
     */
    name: string;
    /**
     * The name of the test suite to which this test case belongs.
     */
    testSuiteName: string;
}

/**
 * A step that represents running tests. It accepts ant-junit xml files which will be parsed into structured test results by the service. Xml file paths are updated in order to append more files, however they can't be deleted. Users can also add test results manually by using the test_result field.
 */
export interface TestExecutionStepResponse {
    /**
     * Issues observed during the test execution. For example, if the mobile app under test crashed during the test, the error message and the stack trace content can be recorded here to assist debugging. - In response: present if set by create or update - In create/update request: optional
     */
    testIssues: outputs.toolresults.v1beta3.TestIssueResponse[];
    /**
     * List of test suite overview contents. This could be parsed from xUnit XML log by server, or uploaded directly by user. This references should only be called when test suites are fully parsed or uploaded. The maximum allowed number of test suite overviews per step is 1000. - In response: always set - In create request: optional - In update request: never (use publishXunitXmlFiles custom method instead)
     */
    testSuiteOverviews: outputs.toolresults.v1beta3.TestSuiteOverviewResponse[];
    /**
     * The timing break down of the test execution. - In response: present if set by create or update - In create/update request: optional
     */
    testTiming: outputs.toolresults.v1beta3.TestTimingResponse;
    /**
     * Represents the execution of the test runner. The exit code of this tool will be used to determine if the test passed. - In response: always set - In create/update request: optional
     */
    toolExecution: outputs.toolresults.v1beta3.ToolExecutionResponse;
}

/**
 * An issue detected occurring during a test execution.
 */
export interface TestIssueResponse {
    /**
     * Category of issue. Required.
     */
    category: string;
    /**
     * A brief human-readable message describing the issue. Required.
     */
    errorMessage: string;
    /**
     * Severity of issue. Required.
     */
    severity: string;
    /**
     * Deprecated in favor of stack trace fields inside specific warnings.
     *
     * @deprecated Deprecated in favor of stack trace fields inside specific warnings.
     */
    stackTrace: outputs.toolresults.v1beta3.StackTraceResponse;
    /**
     * Type of issue. Required.
     */
    type: string;
    /**
     * Warning message with additional details of the issue. Should always be a message from com.google.devtools.toolresults.v1.warnings
     */
    warning: outputs.toolresults.v1beta3.AnyResponse;
}

/**
 * A summary of a test suite result either parsed from XML or uploaded directly by a user. Note: the API related comments are for StepService only. This message is also being used in ExecutionService in a read only mode for the corresponding step.
 */
export interface TestSuiteOverviewResponse {
    /**
     * Elapsed time of test suite.
     */
    elapsedTime: outputs.toolresults.v1beta3.DurationResponse;
    /**
     * Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     */
    errorCount: number;
    /**
     * Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never
     */
    failureCount: number;
    /**
     * Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.
     */
    flakyCount: number;
    /**
     * The name of the test suite. - In create/response: always set - In update request: never
     */
    name: string;
    /**
     * Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     */
    skippedCount: number;
    /**
     * Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
     */
    totalCount: number;
    /**
     * If this test suite was parsed from XML, this is the URI where the original XML file is stored. Note: Multiple test suites can share the same xml_source Returns INVALID_ARGUMENT if the uri format is not supported. - In create/response: optional - In update request: never
     */
    xmlSource: outputs.toolresults.v1beta3.FileReferenceResponse;
}

/**
 * Testing timing break down to know phases.
 */
export interface TestTimingResponse {
    /**
     * How long it took to run the test process. - In response: present if previously set. - In create/update request: optional
     */
    testProcessDuration: outputs.toolresults.v1beta3.DurationResponse;
}

/**
 * A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
 */
export interface TimestampResponse {
    /**
     * Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
     */
    nanos: number;
    /**
     * Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
     */
    seconds: string;
}

/**
 * An execution of an arbitrary tool. It could be a test runner or a tool copying artifacts or deploying code.
 */
export interface ToolExecutionResponse {
    /**
     * The full tokenized command line including the program name (equivalent to argv in a C program). - In response: present if set by create request - In create request: optional - In update request: never set
     */
    commandLineArguments: string[];
    /**
     * Tool execution exit code. This field will be set once the tool has exited. - In response: present if set by create/update request - In create request: optional - In update request: optional, a FAILED_PRECONDITION error will be returned if an exit_code is already set.
     */
    exitCode: outputs.toolresults.v1beta3.ToolExitCodeResponse;
    /**
     * References to any plain text logs output the tool execution. This field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running. The maximum allowed number of tool logs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
     */
    toolLogs: outputs.toolresults.v1beta3.FileReferenceResponse[];
    /**
     * References to opaque files of any format output by the tool execution. The maximum allowed number of tool outputs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
     */
    toolOutputs: outputs.toolresults.v1beta3.ToolOutputReferenceResponse[];
}

/**
 * Generic tool step to be used for binaries we do not explicitly support. For example: running cp to copy artifacts from one location to another.
 */
export interface ToolExecutionStepResponse {
    /**
     * A Tool execution. - In response: present if set by create/update request - In create/update request: optional
     */
    toolExecution: outputs.toolresults.v1beta3.ToolExecutionResponse;
}

/**
 * Exit code from a tool execution.
 */
export interface ToolExitCodeResponse {
    /**
     * Tool execution exit code. A value of 0 means that the execution was successful. - In response: always set - In create/update request: always set
     */
    number: number;
}

/**
 * A reference to a ToolExecution output file.
 */
export interface ToolOutputReferenceResponse {
    /**
     * The creation time of the file. - In response: present if set by create/update request - In create/update request: optional
     */
    creationTime: outputs.toolresults.v1beta3.TimestampResponse;
    /**
     * A FileReference to an output file. - In response: always set - In create/update request: always set
     */
    output: outputs.toolresults.v1beta3.FileReferenceResponse;
    /**
     * The test case to which this output file belongs. - In response: present if set by create/update request - In create/update request: optional
     */
    testCase: outputs.toolresults.v1beta3.TestCaseReferenceResponse;
}

