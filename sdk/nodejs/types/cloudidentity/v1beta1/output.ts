// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Resource representing the Android specific attributes of a Device.
 */
export interface AndroidAttributesResponse {
    /**
     * Whether applications from unknown sources can be installed on device.
     */
    enabledUnknownSources: boolean;
    /**
     * Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.
     */
    ownerProfileAccount: boolean;
    /**
     * Ownership privileges on device.
     */
    ownershipPrivilege: string;
    /**
     * Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the "Enforce Work Profile" policy.
     */
    supportsWorkProfile: boolean;
}

/**
 * Stores information about a certificate.
 */
export interface CertificateAttributesResponse {
    /**
     * The X.509 extension for CertificateTemplate.
     */
    certificateTemplate: outputs.cloudidentity.v1beta1.CertificateTemplateResponse;
    /**
     * The encoded certificate fingerprint.
     */
    fingerprint: string;
    /**
     * The name of the issuer of this certificate.
     */
    issuer: string;
    /**
     * Serial number of the certificate, Example: "123456789".
     */
    serialNumber: string;
    /**
     * The subject name of this certificate.
     */
    subject: string;
    /**
     * The certificate thumbprint.
     */
    thumbprint: string;
    /**
     * Validation state of this certificate.
     */
    validationState: string;
    /**
     * Certificate not valid at or after this timestamp.
     */
    validityExpirationTime: string;
    /**
     * Certificate not valid before this timestamp.
     */
    validityStartTime: string;
}

/**
 * CertificateTemplate (v3 Extension in X.509).
 */
export interface CertificateTemplateResponse {
    /**
     * The Major version of the template. Example: 100.
     */
    majorVersion: number;
    /**
     * The minor version of the template. Example: 12.
     */
    minorVersion: number;
}

/**
 * Dynamic group metadata like queries and status.
 */
export interface DynamicGroupMetadataResponse {
    /**
     * Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 100 dynamic groups.
     */
    queries: outputs.cloudidentity.v1beta1.DynamicGroupQueryResponse[];
    /**
     * Status of the dynamic group.
     */
    status: outputs.cloudidentity.v1beta1.DynamicGroupStatusResponse;
}

/**
 * Defines a query on a resource.
 */
export interface DynamicGroupQueryResponse {
    /**
     * Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`
     */
    query: string;
    resourceType: string;
}

/**
 * The current status of a dynamic group along with timestamp.
 */
export interface DynamicGroupStatusResponse {
    /**
     * Status of the dynamic group.
     */
    status: string;
    /**
     * The latest time at which the dynamic group is guaranteed to be in the given status. If status is `UP_TO_DATE`, the latest time at which the dynamic group was confirmed to be up-to-date. If status is `UPDATING_MEMBERSHIPS`, the time at which dynamic group was created.
     */
    statusTime: string;
}

/**
 * Resource representing the Endpoint Verification-specific attributes of a Device. https://cloud.google.com/endpoint-verification/docs/overview
 */
export interface EndpointVerificationSpecificAttributesResponse {
    /**
     * Details of certificates.
     */
    certificateAttributes: outputs.cloudidentity.v1beta1.CertificateAttributesResponse[];
}

/**
 * A unique identifier for an entity in the Cloud Identity Groups API. An entity can represent either a group with an optional `namespace` or a user without a `namespace`. The combination of `id` and `namespace` must be unique; however, the same `id` can be used with different `namespace`s.
 */
export interface EntityKeyResponse {
    /**
     * The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.
     */
    namespace: string;
}

/**
 * The `MembershipRole` expiry details.
 */
export interface ExpiryDetailResponse {
    /**
     * The time at which the `MembershipRole` will expire.
     */
    expireTime: string;
}

/**
 * A membership role within the Cloud Identity Groups API. A `MembershipRole` defines the privileges granted to a `Membership`.
 */
export interface MembershipRoleResponse {
    /**
     * The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.
     */
    expiryDetail: outputs.cloudidentity.v1beta1.ExpiryDetailResponse;
    /**
     * The name of the `MembershipRole`. Must be one of `OWNER`, `MANAGER`, `MEMBER`.
     */
    name: string;
    /**
     * Evaluations of restrictions applied to parent group on this membership.
     */
    restrictionEvaluations: outputs.cloudidentity.v1beta1.RestrictionEvaluationsResponse;
}

/**
 * The evaluated state of this restriction.
 */
export interface MembershipRoleRestrictionEvaluationResponse {
    /**
     * The current state of the restriction
     */
    state: string;
}

/**
 * POSIX Group definition to represent a group in a POSIX compliant system.
 */
export interface PosixGroupResponse {
    /**
     * GID of the POSIX group.
     */
    gid: string;
    /**
     * Name of the POSIX group.
     */
    name: string;
    /**
     * System identifier for which group name and gid apply to. If not specified it will default to empty value.
     */
    systemId: string;
}

/**
 * Evaluations of restrictions applied to parent group on this membership.
 */
export interface RestrictionEvaluationsResponse {
    /**
     * Evaluation of the member restriction applied to this membership. Empty if the user lacks permission to view the restriction evaluation.
     */
    memberRestrictionEvaluation: outputs.cloudidentity.v1beta1.MembershipRoleRestrictionEvaluationResponse;
}

/**
 * SAML IDP (identity provider) configuration.
 */
export interface SamlIdpConfigResponse {
    /**
     * The **Change Password URL** of the identity provider. Users will be sent to this URL when changing their passwords at `myaccount.google.com`. This takes precedence over the change password URL configured at customer-level. Must use `HTTPS`.
     */
    changePasswordUri: string;
    /**
     * The SAML **Entity ID** of the identity provider.
     */
    entityId: string;
    /**
     * The **Logout Redirect URL** (sign-out page URL) of the identity provider. When a user clicks the sign-out link on a Google page, they will be redirected to this URL. This is a pure redirect with no attached SAML `LogoutRequest` i.e. SAML single logout is currently not supported. Must use `HTTPS`.
     */
    logoutRedirectUri: string;
    /**
     * The `SingleSignOnService` endpoint location (sign-in page URL) of the identity provider. This is the URL where the `AuthnRequest` will be sent. Must use `HTTPS`. Currently assumed to accept the `HTTP-Redirect` binding.
     */
    singleSignOnServiceUri: string;
}

/**
 * SAML SP (service provider) configuration.
 */
export interface SamlSpConfigResponse {
    /**
     * The SAML **Assertion Consumer Service (ACS) URL** to be used for the IDP-initiated login. Currently assumed to accept response messages via the `HTTP-POST` binding.
     */
    assertionConsumerServiceUri: string;
    /**
     * The SAML **Entity ID** for this service provider.
     */
    entityId: string;
}

/**
 * Details that are applicable when `sso_mode` == `SAML_SSO`.
 */
export interface SamlSsoInfoResponse {
    /**
     * Name of the `InboundSamlSsoProfile` to use. Must be of the form `inboundSamlSsoProfiles/{inbound_saml_sso_profile}`. 
     */
    inboundSamlSsoProfile: string;
}

/**
 * Controls sign-in behavior.
 */
export interface SignInBehaviorResponse {
    /**
     * When to redirect sign-ins to the IdP.
     */
    redirectCondition: string;
}

