// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * A bounding polygon for the detected image annotation.
 */
export interface BoundingPolyResponse {
    /**
     * The bounding polygon normalized vertices.
     */
    normalizedVertices: outputs.vision.v1.NormalizedVertexResponse[];
    /**
     * The bounding polygon vertices.
     */
    vertices: outputs.vision.v1.VertexResponse[];
}

/**
 * A product label represented as a key-value pair.
 */
export interface KeyValueResponse {
    /**
     * The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.
     */
    key: string;
    /**
     * The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.
     */
    value: string;
}

/**
 * A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.
 */
export interface NormalizedVertexResponse {
    /**
     * X coordinate.
     */
    x: number;
    /**
     * Y coordinate.
     */
    y: number;
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface StatusResponse {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code: number;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details: {[key: string]: string}[];
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message: string;
}

/**
 * A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.
 */
export interface VertexResponse {
    /**
     * X coordinate.
     */
    x: number;
    /**
     * Y coordinate.
     */
    y: number;
}

