// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Maintenance policy per instance.
 */
export interface GoogleCloudMemcacheV1beta2MaintenancePolicyResponse {
    /**
     * The time when the policy was created.
     */
    createTime: string;
    /**
     * Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
     */
    description: string;
    /**
     * The time when the policy was updated.
     */
    updateTime: string;
    /**
     * Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one.
     */
    weeklyMaintenanceWindow: outputs.memcache.v1beta2.WeeklyMaintenanceWindowResponse[];
}

export interface InstanceMessageResponse {
    /**
     * A code that correspond to one type of user-facing message.
     */
    code: string;
    /**
     * Message on memcached instance which will be exposed to users.
     */
    message: string;
}

/**
 * Upcoming maintenance schedule.
 */
export interface MaintenanceScheduleResponse {
    /**
     * The end time of any upcoming scheduled maintenance for this instance.
     */
    endTime: string;
    /**
     * The deadline that the maintenance schedule start time can not go beyond, including reschedule.
     */
    scheduleDeadlineTime: string;
    /**
     * The start time of any upcoming scheduled maintenance for this instance.
     */
    startTime: string;
}

export interface MemcacheParametersResponse {
    /**
     * User defined set of parameters to use in the memcached process.
     */
    params: {[key: string]: string};
}

/**
 * Configuration for a Memcached Node.
 */
export interface NodeConfigResponse {
    /**
     * Number of cpus per Memcached node.
     */
    cpuCount: number;
    /**
     * Memory size in MiB for each Memcached node.
     */
    memorySizeMb: number;
}

export interface NodeResponse {
    /**
     * Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
     */
    host: string;
    /**
     * Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
     */
    nodeId: string;
    /**
     * User defined parameters currently applied to the node.
     */
    parameters: outputs.memcache.v1beta2.MemcacheParametersResponse;
    /**
     * The port number of the Memcached server on this node.
     */
    port: number;
    /**
     * Current state of the Memcached node.
     */
    state: string;
    /**
     * Returns true if there is an update waiting to be applied
     */
    updateAvailable: boolean;
    /**
     * Location (GCP Zone) for the Memcached node.
     */
    zone: string;
}

/**
 * Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
 */
export interface TimeOfDayResponse {
    /**
     * Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
     */
    hours: number;
    /**
     * Minutes of hour of day. Must be from 0 to 59.
     */
    minutes: number;
    /**
     * Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
     */
    nanos: number;
    /**
     * Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
     */
    seconds: number;
}

/**
 * Time window specified for weekly operations.
 */
export interface WeeklyMaintenanceWindowResponse {
    /**
     * Allows to define schedule that runs specified day of the week.
     */
    day: string;
    /**
     * Duration of the time window.
     */
    duration: string;
    /**
     * Start time of the window in UTC.
     */
    startTime: outputs.memcache.v1beta2.TimeOfDayResponse;
}

