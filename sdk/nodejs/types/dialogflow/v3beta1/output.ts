// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Define behaviors on logging.
 */
export interface GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettingsResponse {
    /**
     * If true, DF Interaction logging is currently enabled.
     */
    enableInteractionLogging: boolean;
    /**
     * If true, StackDriver logging is currently enabled.
     */
    enableStackdriverLogging: boolean;
}

/**
 * Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
 */
export interface GoogleCloudDialogflowCxV3beta1AdvancedSettingsResponse {
    /**
     * Settings for logging. Settings for Dialogflow History, Contact Center messages, StackDriver logs, and speech logging. Exposed at the following levels: - Agent level.
     */
    loggingSettings: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettingsResponse;
}

/**
 * Represents the natural speech audio to be processed.
 */
export interface GoogleCloudDialogflowCxV3beta1AudioInputResponse {
    /**
     * The natural language speech audio to be processed. A single request can contain up to 1 minute of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests.
     */
    audio: string;
    /**
     * Instructs the speech recognizer how to process the speech audio.
     */
    config: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1InputAudioConfigResponse;
}

/**
 * One interaction between a human and virtual agent. The human provides some input and the virtual agent provides a response.
 */
export interface GoogleCloudDialogflowCxV3beta1ConversationTurnResponse {
    /**
     * The user input.
     */
    userInput: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ConversationTurnUserInputResponse;
    /**
     * The virtual agent output.
     */
    virtualAgentOutput: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutputResponse;
}

/**
 * The input from the human user.
 */
export interface GoogleCloudDialogflowCxV3beta1ConversationTurnUserInputResponse {
    /**
     * Whether sentiment analysis is enabled.
     */
    enableSentimentAnalysis: boolean;
    /**
     * Parameters that need to be injected into the conversation during intent detection.
     */
    injectedParameters: {[key: string]: string};
    /**
     * Supports text input, event input, dtmf input in the test case.
     */
    input: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1QueryInputResponse;
    /**
     * If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.
     */
    isWebhookEnabled: boolean;
}

/**
 * The output from the virtual agent.
 */
export interface GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutputResponse {
    /**
     * The Page on which the utterance was spoken. Only name and displayName will be set.
     */
    currentPage: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1PageResponse;
    /**
     * Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.
     */
    diagnosticInfo: {[key: string]: string};
    /**
     * If this is part of a result conversation turn, the list of differences between the original run and the replay for this output, if any.
     */
    differences: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1TestRunDifferenceResponse[];
    /**
     * The session parameters available to the bot at this point.
     */
    sessionParameters: {[key: string]: string};
    /**
     * Response error from the agent in the test result. If set, other output is empty.
     */
    status: outputs.dialogflow.v3beta1.GoogleRpcStatusResponse;
    /**
     * The text responses from the agent for the turn.
     */
    textResponses: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageTextResponse[];
    /**
     * The Intent that triggered the response. Only name and displayName will be set.
     */
    triggeredIntent: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1IntentResponse;
}

/**
 * Represents the input for dtmf event.
 */
export interface GoogleCloudDialogflowCxV3beta1DtmfInputResponse {
    /**
     * The dtmf digits.
     */
    digits: string;
    /**
     * The finish digit (if any).
     */
    finishDigit: string;
}

/**
 * An **entity entry** for an associated entity type.
 */
export interface GoogleCloudDialogflowCxV3beta1EntityTypeEntityResponse {
    /**
     * A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.
     */
    synonyms: string[];
    /**
     * The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A canonical value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).
     */
    value: string;
}

/**
 * An excluded entity phrase that should not be matched.
 */
export interface GoogleCloudDialogflowCxV3beta1EntityTypeExcludedPhraseResponse {
    /**
     * The word or phrase to be excluded.
     */
    value: string;
}

/**
 * The configuration for continuous tests.
 */
export interface GoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfigResponse {
    /**
     * Whether to run test cases in TestCasesConfig.test_cases periodically. Default false. If set to true, run once a day.
     */
    enableContinuousRun: boolean;
    /**
     * Whether to run test cases in TestCasesConfig.test_cases before deploying a flow version to the environment. Default false.
     */
    enablePredeploymentRun: boolean;
    /**
     * A list of test case names to run. They should be under the same agent. Format of each test case name: `projects//locations/ /agents//testCases/`
     */
    testCases: string[];
}

/**
 * Configuration for the version.
 */
export interface GoogleCloudDialogflowCxV3beta1EnvironmentVersionConfigResponse {
    /**
     * Format: projects//locations//agents//flows//versions/.
     */
    version: string;
}

/**
 * Configuration for webhooks.
 */
export interface GoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfigResponse {
    /**
     * The list of webhooks to override for the agent environment. The webhook must exist in the agent. You can override fields in `generic_web_service` and `service_directory`.
     */
    webhookOverrides: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1WebhookResponse[];
}

/**
 * An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the event, it will be called. * If there is a `target_page` associated with the event, the session will transition into the specified page. * If there is a `target_flow` associated with the event, the session will transition into the specified flow.
 */
export interface GoogleCloudDialogflowCxV3beta1EventHandlerResponse {
    /**
     * The name of the event to handle.
     */
    event: string;
    /**
     * The unique identifier of this event handler.
     */
    name: string;
    /**
     * The target flow to transition to. Format: `projects//locations//agents//flows/`.
     */
    targetFlow: string;
    /**
     * The target page to transition to. Format: `projects//locations//agents//flows//pages/`.
     */
    targetPage: string;
    /**
     * The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
     */
    triggerFulfillment: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FulfillmentResponse;
}

/**
 * Represents the event to trigger.
 */
export interface GoogleCloudDialogflowCxV3beta1EventInputResponse {
    /**
     * Name of the event.
     */
    event: string;
}

/**
 * Definition of the experiment.
 */
export interface GoogleCloudDialogflowCxV3beta1ExperimentDefinitionResponse {
    /**
     * The condition defines which subset of sessions are selected for this experiment. If not specified, all sessions are eligible. E.g. "query_input.language_code=en" See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
     */
    condition: string;
    /**
     * The flow versions as the variants of this experiment.
     */
    versionVariants: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1VersionVariantsResponse;
}

/**
 * A confidence interval is a range of possible values for the experiment objective you are trying to measure.
 */
export interface GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceIntervalResponse {
    /**
     * The confidence level used to construct the interval, i.e. there is X% chance that the true value is within this interval.
     */
    confidenceLevel: number;
    /**
     * Lower bound of the interval.
     */
    lowerBound: number;
    /**
     * The percent change between an experiment metric's value and the value for its control.
     */
    ratio: number;
    /**
     * Upper bound of the interval.
     */
    upperBound: number;
}

/**
 * Metric and corresponding confidence intervals.
 */
export interface GoogleCloudDialogflowCxV3beta1ExperimentResultMetricResponse {
    /**
     * The probability that the treatment is better than all other treatments in the experiment
     */
    confidenceInterval: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceIntervalResponse;
    /**
     * Count value of a metric.
     */
    count: number;
    /**
     * Count-based metric type. Only one of type or count_type is specified in each Metric.
     */
    countType: string;
    /**
     * Ratio value of a metric.
     */
    ratio: number;
    /**
     * Ratio-based metric type. Only one of type or count_type is specified in each Metric.
     */
    type: string;
}

/**
 * The inference result which includes an objective metric to optimize and the confidence interval.
 */
export interface GoogleCloudDialogflowCxV3beta1ExperimentResultResponse {
    /**
     * The last time the experiment's stats data was updated. Will have default value if stats have never been computed for this experiment.
     */
    lastUpdateTime: string;
    /**
     * Version variants and metrics.
     */
    versionMetrics: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ExperimentResultVersionMetricsResponse[];
}

/**
 * Version variant and associated metrics.
 */
export interface GoogleCloudDialogflowCxV3beta1ExperimentResultVersionMetricsResponse {
    /**
     * The metrics and corresponding confidence intervals in the inference result.
     */
    metrics: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ExperimentResultMetricResponse[];
    /**
     * Number of sessions that were allocated to this version.
     */
    sessionCount: number;
    /**
     * The name of the flow Version. Format: `projects//locations//agents//flows//versions/`.
     */
    version: string;
}

/**
 * Configuration for how the filling of a parameter should be handled.
 */
export interface GoogleCloudDialogflowCxV3beta1FormParameterFillBehaviorResponse {
    /**
     * The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
     */
    initialPromptFulfillment: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FulfillmentResponse;
    /**
     * The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can't be found on the parameter, `initial_prompt_fulfillment` will be re-prompted.
     */
    repromptEventHandlers: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1EventHandlerResponse[];
}

/**
 * Represents a form parameter.
 */
export interface GoogleCloudDialogflowCxV3beta1FormParameterResponse {
    /**
     * The default value of an optional parameter. If the parameter is required, the default value will be ignored.
     */
    defaultValue: any;
    /**
     * The human-readable name of the parameter, unique within the form.
     */
    displayName: string;
    /**
     * The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types.
     */
    entityType: string;
    /**
     * Defines fill behavior for the parameter.
     */
    fillBehavior: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FormParameterFillBehaviorResponse;
    /**
     * Indicates whether the parameter represents a list of values.
     */
    isList: boolean;
    /**
     * Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
     */
    redact: boolean;
    /**
     * Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes.
     */
    required: boolean;
}

/**
 * A form is a data model that groups related parameters that can be collected from the user. The process in which the agent prompts the user and collects parameter values from the user is called form filling. A form can be added to a page. When form filling is done, the filled parameters will be written to the session.
 */
export interface GoogleCloudDialogflowCxV3beta1FormResponse {
    /**
     * Parameters to collect from the user.
     */
    parameters: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FormParameterResponse[];
}

/**
 * The list of messages or conditional cases to activate for this case.
 */
export interface GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContentResponse {
    /**
     * Additional cases to be evaluated.
     */
    additionalCases: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesResponse;
    /**
     * Returned message.
     */
    message: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageResponse;
}

/**
 * Each case has a Boolean condition. When it is evaluated to be True, the corresponding messages will be selected and evaluated recursively.
 */
export interface GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseResponse {
    /**
     * A list of case content.
     */
    caseContent: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContentResponse[];
    /**
     * The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
     */
    condition: string;
}

/**
 * A list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.
 */
export interface GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesResponse {
    /**
     * A list of cascading if-else conditions.
     */
    cases: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseResponse[];
}

/**
 * A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both.
 */
export interface GoogleCloudDialogflowCxV3beta1FulfillmentResponse {
    /**
     * Conditional cases for this fulfillment.
     */
    conditionalCases: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesResponse[];
    /**
     * The list of rich message responses to present to the user.
     */
    messages: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageResponse[];
    /**
     * Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
     */
    returnPartialResponses: boolean;
    /**
     * Set parameter values before executing the webhook.
     */
    setParameterActions: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterActionResponse[];
    /**
     * The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.
     */
    tag: string;
    /**
     * The webhook to call. Format: `projects//locations//agents//webhooks/`.
     */
    webhook: string;
}

/**
 * Setting a parameter value.
 */
export interface GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterActionResponse {
    /**
     * Display name of the parameter.
     */
    parameter: string;
    /**
     * The new value of the parameter. A null value clears the parameter.
     */
    value: any;
}

/**
 * Instructs the speech recognizer on how to process the audio content.
 */
export interface GoogleCloudDialogflowCxV3beta1InputAudioConfigResponse {
    /**
     * Audio encoding of the audio content to process.
     */
    audioEncoding: string;
    /**
     * Optional. If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information.
     */
    enableWordInfo: boolean;
    /**
     * Optional. Which Speech model to select for the given request. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then we auto-select a model based on the parameters in the InputAudioConfig. If enhanced speech model is enabled for the agent and an enhanced version of the specified model for the language does not exist, then the speech is recognized using the standard version of the specified model. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model) for more details.
     */
    model: string;
    /**
     * Optional. Which variant of the Speech model to use.
     */
    modelVariant: string;
    /**
     * Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details.
     */
    phraseHints: string[];
    /**
     * Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details.
     */
    sampleRateHertz: number;
    /**
     * Optional. If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods.
     */
    singleUtterance: boolean;
}

/**
 * Represents the intent to trigger programmatically rather than as a result of natural language processing.
 */
export interface GoogleCloudDialogflowCxV3beta1IntentInputResponse {
    /**
     * The unique identifier of the intent. Format: `projects//locations//agents//intents/`.
     */
    intent: string;
}

/**
 * Represents an intent parameter.
 */
export interface GoogleCloudDialogflowCxV3beta1IntentParameterResponse {
    /**
     * The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types.
     */
    entityType: string;
    /**
     * Indicates whether the parameter represents a list of values.
     */
    isList: boolean;
    /**
     * Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
     */
    redact: boolean;
}

/**
 * An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent.
 */
export interface GoogleCloudDialogflowCxV3beta1IntentResponse {
    /**
     * Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters.
     */
    description: string;
    /**
     * The human-readable name of the intent, unique within the agent.
     */
    displayName: string;
    /**
     * Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation. Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event.
     */
    isFallback: boolean;
    /**
     * The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes. Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys-contextual" means the intent is a contextual intent.
     */
    labels: {[key: string]: string};
    /**
     * The unique identifier of the intent. Required for the Intents.UpdateIntent method. Intents.CreateIntent populates the name automatically. Format: `projects//locations//agents//intents/`.
     */
    name: string;
    /**
     * The collection of parameters associated with the intent.
     */
    parameters: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1IntentParameterResponse[];
    /**
     * The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests.
     */
    priority: number;
    /**
     * The collection of training phrases the agent is trained on to identify the intent.
     */
    trainingPhrases: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1IntentTrainingPhraseResponse[];
}

/**
 * Represents a part of a training phrase.
 */
export interface GoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePartResponse {
    /**
     * The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase.
     */
    parameterId: string;
    /**
     * The text for this part.
     */
    text: string;
}

/**
 * Represents an example that the agent is trained on to identify the intent.
 */
export interface GoogleCloudDialogflowCxV3beta1IntentTrainingPhraseResponse {
    /**
     * The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `parameter_id` field is set.
     */
    parts: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePartResponse[];
    /**
     * Indicates how many times this example was added to the intent.
     */
    repeatCount: number;
}

/**
 * Settings related to NLU.
 */
export interface GoogleCloudDialogflowCxV3beta1NluSettingsResponse {
    /**
     * To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
     */
    classificationThreshold: number;
    /**
     * Indicates NLU model training mode.
     */
    modelTrainingMode: string;
    /**
     * Indicates the type of NLU model.
     */
    modelType: string;
}

/**
 * A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page).
 */
export interface GoogleCloudDialogflowCxV3beta1PageResponse {
    /**
     * The human-readable name of the page, unique within the flow.
     */
    displayName: string;
    /**
     * The fulfillment to call when the session is entering the page.
     */
    entryFulfillment: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FulfillmentResponse;
    /**
     * Handlers associated with the page to handle events such as webhook errors, no match or no input.
     */
    eventHandlers: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1EventHandlerResponse[];
    /**
     * The form associated with the page, used for collecting parameters relevant to the page.
     */
    form: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FormResponse;
    /**
     * The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`.
     */
    name: string;
    /**
     * Ordered list of `TransitionRouteGroups` associated with the page. Transition route groups must be unique within a page. * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes. * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence. Format:`projects//locations//agents//flows//transitionRouteGroups/`.
     */
    transitionRouteGroups: string[];
    /**
     * A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow. When we are in a certain page, the TransitionRoutes are evalauted in the following order: * TransitionRoutes defined in the page with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in flow with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in the page with only condition specified. * TransitionRoutes defined in the transition route groups with only condition specified.
     */
    transitionRoutes: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1TransitionRouteResponse[];
}

/**
 * Represents the query input. It can contain one of: 1. A conversational query in the form of text. 2. An intent query that specifies which intent to trigger. 3. Natural language speech audio to be processed. 4. An event to be triggered. 
 */
export interface GoogleCloudDialogflowCxV3beta1QueryInputResponse {
    /**
     * The natural language speech audio to be processed.
     */
    audio: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1AudioInputResponse;
    /**
     * The DTMF event to be handled.
     */
    dtmf: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1DtmfInputResponse;
    /**
     * The event to be triggered.
     */
    event: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1EventInputResponse;
    /**
     * The intent to be triggered.
     */
    intent: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1IntentInputResponse;
    /**
     * The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language.
     */
    languageCode: string;
    /**
     * The natural language text to be processed.
     */
    text: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1TextInputResponse;
}

/**
 * Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about. Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates that the conversation succeeded. * In a webhook response when you determine that you handled the customer issue.
 */
export interface GoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccessResponse {
    /**
     * Custom metadata. Dialogflow doesn't impose any structure on this.
     */
    metadata: {[key: string]: string};
}

/**
 * Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user.
 */
export interface GoogleCloudDialogflowCxV3beta1ResponseMessageEndInteractionResponse {
}

/**
 * Indicates that the conversation should be handed off to a live agent. Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates something went extremely wrong in the conversation. * In a webhook response when you determine that the customer issue can only be handled by a human.
 */
export interface GoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoffResponse {
    /**
     * Custom metadata for your handoff procedure. Dialogflow doesn't impose any structure on this.
     */
    metadata: {[key: string]: string};
}

/**
 * Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user.
 */
export interface GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioResponse {
    /**
     * Segments this audio response is composed of.
     */
    segments: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegmentResponse[];
}

/**
 * Represents one segment of audio.
 */
export interface GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegmentResponse {
    /**
     * Whether the playback of this segment can be interrupted by the end user's speech and the client should then start the next Dialogflow request.
     */
    allowPlaybackInterruption: boolean;
    /**
     * Raw audio synthesized from the Dialogflow agent's response using the output config specified in the request.
     */
    audio: string;
    /**
     * Client-specific URI that points to an audio clip accessible to the client. Dialogflow does not impose any validation on it.
     */
    uri: string;
}

/**
 * A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
 */
export interface GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioTextResponse {
    /**
     * Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
     */
    allowPlaybackInterruption: boolean;
    /**
     * The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml).
     */
    ssml: string;
    /**
     * The raw text to be synthesized.
     */
    text: string;
}

/**
 * Specifies an audio clip to be played by the client as part of the response.
 */
export interface GoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudioResponse {
    /**
     * Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
     */
    allowPlaybackInterruption: boolean;
    /**
     * URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.
     */
    audioUri: string;
}

/**
 * Represents a response message that can be returned by a conversational agent. Response messages are also used for output audio synthesis. The approach is as follows: * If at least one OutputAudioText response is present, then all OutputAudioText responses are linearly concatenated, and the result is used for output audio synthesis. * If the OutputAudioText responses are a mixture of text and SSML, then the concatenated result is treated as SSML; otherwise, the result is treated as either text or SSML as appropriate. The agent designer should ideally use either text or SSML consistently throughout the bot design. * Otherwise, all Text responses are linearly concatenated, and the result is used for output audio synthesis. This approach allows for more sophisticated user experience scenarios, where the text displayed to the user may differ from what is heard.
 */
export interface GoogleCloudDialogflowCxV3beta1ResponseMessageResponse {
    /**
     * Indicates that the conversation succeeded.
     */
    conversationSuccess: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccessResponse;
    /**
     * A signal that indicates the interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only when the conversation reaches `END_SESSION` page. It is not supposed to be defined by the user. It's guaranteed that there is at most one such message in each response.
     */
    endInteraction: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageEndInteractionResponse;
    /**
     * Hands off conversation to a human agent.
     */
    liveAgentHandoff: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoffResponse;
    /**
     * An audio response message composed of both the synthesized Dialogflow agent responses and responses defined via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user.
     */
    mixedAudio: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioResponse;
    /**
     * A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
     */
    outputAudioText: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioTextResponse;
    /**
     * Returns a response containing a custom, platform-specific payload.
     */
    payload: {[key: string]: string};
    /**
     * Signal that the client should play an audio clip hosted at a client-specific URI. Dialogflow uses this to construct mixed_audio. However, Dialogflow itself does not try to read or process the URI in any way.
     */
    playAudio: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudioResponse;
    /**
     * A signal that the client should transfer the phone call connected to this agent to a third-party endpoint.
     */
    telephonyTransferCall: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCallResponse;
    /**
     * Returns a text response.
     */
    text: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ResponseMessageTextResponse;
}

/**
 * Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
 */
export interface GoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCallResponse {
    /**
     * Transfer the call to a phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164).
     */
    phoneNumber: string;
}

/**
 * The text response message.
 */
export interface GoogleCloudDialogflowCxV3beta1ResponseMessageTextResponse {
    /**
     * Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
     */
    allowPlaybackInterruption: boolean;
    /**
     * A collection of text responses.
     */
    text: string[];
}

/**
 * The configuration for auto rollout.
 */
export interface GoogleCloudDialogflowCxV3beta1RolloutConfigResponse {
    /**
     * The conditions that are used to evaluate the failure of a rollout step. If not specified, no rollout steps will fail. E.g. "containment_rate < 10% OR average_turn_count < 3". See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
     */
    failureCondition: string;
    /**
     * The conditions that are used to evaluate the success of a rollout step. If not specified, all rollout steps will proceed to the next one unless failure conditions are met. E.g. "containment_rate > 60% AND callback_rate < 20%". See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
     */
    rolloutCondition: string;
    /**
     * Steps to roll out a flow version. Steps should be sorted by percentage in ascending order.
     */
    rolloutSteps: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1RolloutConfigRolloutStepResponse[];
}

/**
 * A single rollout step with specified traffic allocation.
 */
export interface GoogleCloudDialogflowCxV3beta1RolloutConfigRolloutStepResponse {
    /**
     * The name of the rollout step;
     */
    displayName: string;
    /**
     * The minimum time that this step should last. Should be longer than 1 hour. If not set, the default minimum duration for each step will be 1 hour.
     */
    minDuration: string;
    /**
     * The percentage of traffic allocated to the flow version of this rollout step. (0%, 100%].
     */
    trafficPercent: number;
}

/**
 * State of the auto-rollout process.
 */
export interface GoogleCloudDialogflowCxV3beta1RolloutStateResponse {
    /**
     * Start time of the current step.
     */
    startTime: string;
    /**
     * Display name of the current auto rollout step.
     */
    step: string;
    /**
     * Index of the current step in the auto rollout steps list.
     */
    stepIndex: number;
}

/**
 * Settings for exporting audio.
 */
export interface GoogleCloudDialogflowCxV3beta1SecuritySettingsAudioExportSettingsResponse {
    /**
     * Filename pattern for exported audio.
     */
    audioExportPattern: string;
    /**
     * File format for exported audio file. Currently only in telephony recordings.
     */
    audioFormat: string;
    /**
     * Enable audio redaction if it is true.
     */
    enableAudioRedaction: boolean;
    /**
     * Cloud Storage bucket to export audio record to. Setting this field would grant the Storage Object Creator role to the Dialogflow Service Agent. API caller that tries to modify this field should have the permission of storage.buckets.setIamPolicy.
     */
    gcsBucket: string;
}

/**
 * Settings for exporting conversations to [Insights](https://cloud.google.com/contact-center/insights/docs).
 */
export interface GoogleCloudDialogflowCxV3beta1SecuritySettingsInsightsExportSettingsResponse {
    /**
     * If enabled, we will automatically exports conversations to Insights and Insights runs its analyzers.
     */
    enableInsightsExport: boolean;
}

/**
 * Settings related to speech recognition.
 */
export interface GoogleCloudDialogflowCxV3beta1SpeechToTextSettingsResponse {
    /**
     * Whether to use speech adaptation for speech recognition.
     */
    enableSpeechAdaptation: boolean;
}

/**
 * Represents a result from running a test case in an agent environment.
 */
export interface GoogleCloudDialogflowCxV3beta1TestCaseResultResponse {
    /**
     * The conversation turns uttered during the test case replay in chronological order.
     */
    conversationTurns: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1ConversationTurnResponse[];
    /**
     * Environment where the test was run. If not set, it indicates the draft environment.
     */
    environment: string;
    /**
     * The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`.
     */
    name: string;
    /**
     * Whether the test case passed in the agent environment.
     */
    testResult: string;
    /**
     * The time that the test was run.
     */
    testTime: string;
}

/**
 * Represents configurations for a test case.
 */
export interface GoogleCloudDialogflowCxV3beta1TestConfigResponse {
    /**
     * Flow name to start the test case with. Format: `projects//locations//agents//flows/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow.
     */
    flow: string;
    /**
     * The page to start the test case with. Format: `projects//locations//agents//flows//pages/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow.
     */
    page: string;
    /**
     * Session parameters to be compared when calculating differences.
     */
    trackingParameters: string[];
}

/**
 * The description of differences between original and replayed agent output.
 */
export interface GoogleCloudDialogflowCxV3beta1TestRunDifferenceResponse {
    /**
     * A description of the diff, showing the actual output vs expected output.
     */
    description: string;
    /**
     * The type of diff.
     */
    type: string;
}

/**
 * Represents the natural language text to be processed.
 */
export interface GoogleCloudDialogflowCxV3beta1TextInputResponse {
    /**
     * The UTF-8 encoded natural language text to be processed. Text length must not exceed 256 characters.
     */
    text: string;
}

/**
 * A transition route specifies a intent that can be matched and/or a data condition that can be evaluated during a session. When a specified transition is matched, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the transition, it will be called. * If there is a `target_page` associated with the transition, the session will transition into the specified page. * If there is a `target_flow` associated with the transition, the session will transition into the specified flow.
 */
export interface GoogleCloudDialogflowCxV3beta1TransitionRouteResponse {
    /**
     * The condition to evaluate against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled.
     */
    condition: string;
    /**
     * The unique identifier of an Intent. Format: `projects//locations//agents//intents/`. Indicates that the transition can only happen when the given intent is matched. At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled.
     */
    intent: string;
    /**
     * The unique identifier of this transition route.
     */
    name: string;
    /**
     * The target flow to transition to. Format: `projects//locations//agents//flows/`.
     */
    targetFlow: string;
    /**
     * The target page to transition to. Format: `projects//locations//agents//flows//pages/`.
     */
    targetPage: string;
    /**
     * The fulfillment to call when the condition is satisfied. At least one of `trigger_fulfillment` and `target` must be specified. When both are defined, `trigger_fulfillment` is executed first.
     */
    triggerFulfillment: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1FulfillmentResponse;
}

/**
 * The history of variants update.
 */
export interface GoogleCloudDialogflowCxV3beta1VariantsHistoryResponse {
    /**
     * Update time of the variants.
     */
    updateTime: string;
    /**
     * The flow versions as the variants.
     */
    versionVariants: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1VersionVariantsResponse;
}

/**
 * A list of flow version variants.
 */
export interface GoogleCloudDialogflowCxV3beta1VersionVariantsResponse {
    /**
     * A list of flow version variants.
     */
    variants: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1VersionVariantsVariantResponse[];
}

/**
 * A single flow version with specified traffic allocation.
 */
export interface GoogleCloudDialogflowCxV3beta1VersionVariantsVariantResponse {
    /**
     * Whether the variant is for the control group.
     */
    isControlGroup: boolean;
    /**
     * Percentage of the traffic which should be routed to this version of flow. Traffic allocation for a single flow must sum up to 1.0.
     */
    trafficAllocation: number;
    /**
     * The name of the flow version. Format: `projects//locations//agents//flows//versions/`.
     */
    version: string;
}

/**
 * Represents configuration for a generic web service.
 */
export interface GoogleCloudDialogflowCxV3beta1WebhookGenericWebServiceResponse {
    /**
     * Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with "subject alt name". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \ -signkey example.com.key \ -out example.com.crt \ -extfile <(printf "\nsubjectAltName='DNS:www.example.com'") ```
     */
    allowedCaCerts: string[];
    /**
     * The password for HTTP Basic authentication.
     */
    password: string;
    /**
     * The HTTP request headers to send together with webhook requests.
     */
    requestHeaders: {[key: string]: string};
    /**
     * The webhook URI for receiving POST requests. It must use https protocol.
     */
    uri: string;
    /**
     * The user name for HTTP Basic authentication.
     */
    username: string;
}

/**
 * Webhooks host the developer's business logic. During a session, webhooks allow the developer to use the data extracted by Dialogflow's natural language processing to generate dynamic responses, validate collected data, or trigger actions on the backend.
 */
export interface GoogleCloudDialogflowCxV3beta1WebhookResponse {
    /**
     * Indicates whether the webhook is disabled.
     */
    disabled: boolean;
    /**
     * The human-readable name of the webhook, unique within the agent.
     */
    displayName: string;
    /**
     * Configuration for a generic web service.
     */
    genericWebService: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1WebhookGenericWebServiceResponse;
    /**
     * The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: `projects//locations//agents//webhooks/`.
     */
    name: string;
    /**
     * Configuration for a [Service Directory](https://cloud.google.com/service-directory) service.
     */
    serviceDirectory: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse;
    /**
     * Webhook execution timeout. Execution is considered failed if Dialogflow doesn't receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds.
     */
    timeout: string;
}

/**
 * Represents configuration for a [Service Directory](https://cloud.google.com/service-directory) service.
 */
export interface GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigResponse {
    /**
     * Generic Service configuration of this webhook.
     */
    genericWebService: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1WebhookGenericWebServiceResponse;
    /**
     * The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent.
     */
    service: string;
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface GoogleRpcStatusResponse {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code: number;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details: {[key: string]: string}[];
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message: string;
}

