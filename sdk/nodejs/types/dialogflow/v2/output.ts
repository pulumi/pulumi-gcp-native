// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Metadata for article suggestion models.
 */
export interface GoogleCloudDialogflowV2ArticleSuggestionModelMetadataResponse {
    /**
     * Optional. Type of the article suggestion model. If not provided, model_type is used.
     */
    trainingModelType: string;
}

/**
 * Defines the Automated Agent to connect to a conversation.
 */
export interface GoogleCloudDialogflowV2AutomatedAgentConfigResponse {
    /**
     * ID of the Dialogflow agent environment to use. This project needs to either be the same project as the conversation or you need to grant `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow API Service Agent` role in this project. - For ES agents, use format: `projects//locations//agent/environments/`. If environment is not specified, the default `draft` environment is used. Refer to [DetectIntentRequest](/dialogflow/docs/reference/rpc/google.cloud.dialogflow.v2#google.cloud.dialogflow.v2.DetectIntentRequest) for more details. - For CX agents, use format `projects//locations//agents//environments/`. If environment is not specified, the default `draft` environment is used.
     */
    agent: string;
}

/**
 * Dialogflow contexts are similar to natural language context. If a person says to you "they are orange", you need context in order to understand what "they" is referring to. Similarly, for Dialogflow to handle an end-user expression like that, it needs to be provided with context in order to correctly match an intent. Using contexts, you can control the flow of a conversation. You can configure contexts for an intent by setting input and output contexts, which are identified by string names. When an intent is matched, any configured output contexts for that intent become active. While any contexts are active, Dialogflow is more likely to match intents that are configured with input contexts that correspond to the currently active contexts. For more information about context, see the [Contexts guide](https://cloud.google.com/dialogflow/docs/contexts-overview).
 */
export interface GoogleCloudDialogflowV2ContextResponse {
    /**
     * Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.
     */
    lifespanCount: number;
    /**
     * The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`
     */
    name: string;
    /**
     * Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value
     */
    parameters: {[key: string]: string};
}

/**
 * Represents metadata of a conversation.
 */
export interface GoogleCloudDialogflowV2ConversationInfoResponse {
    /**
     * Optional. The language code of the conversation data within this dataset. See https://cloud.google.com/apis/design/standard_fields for more information. Supports all UTF-8 languages.
     */
    languageCode: string;
}

/**
 * Represents a phone number for telephony integration. It allows for connecting a particular conversation over telephony.
 */
export interface GoogleCloudDialogflowV2ConversationPhoneNumberResponse {
    /**
     * The phone number to connect to this conversation.
     */
    phoneNumber: string;
}

/**
 * The status of a reload attempt.
 */
export interface GoogleCloudDialogflowV2DocumentReloadStatusResponse {
    /**
     * The status of a reload attempt or the initial load.
     */
    status: outputs.dialogflow.v2.GoogleRpcStatusResponse;
    /**
     * The time of a reload attempt. This reload may have been triggered automatically or manually and may not have succeeded.
     */
    time: string;
}

/**
 * An **entity entry** for an associated entity type.
 */
export interface GoogleCloudDialogflowV2EntityTypeEntityResponse {
    /**
     * A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.
     */
    synonyms: string[];
    /**
     * The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).
     */
    value: string;
}

/**
 * The configuration for model evaluation.
 */
export interface GoogleCloudDialogflowV2EvaluationConfigResponse {
    /**
     * Datasets used for evaluation.
     */
    datasets: outputs.dialogflow.v2.GoogleCloudDialogflowV2InputDatasetResponse[];
    /**
     * Configuration for smart compose model evalution.
     */
    smartComposeConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2EvaluationConfigSmartComposeConfigResponse;
    /**
     * Configuration for smart reply model evalution.
     */
    smartReplyConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2EvaluationConfigSmartReplyConfigResponse;
}

/**
 * Smart compose specific configuration for evaluation job.
 */
export interface GoogleCloudDialogflowV2EvaluationConfigSmartComposeConfigResponse {
    /**
     * The allowlist document resource name. Format: `projects//knowledgeBases//documents/`. Only used for smart compose model.
     */
    allowlistDocument: string;
    /**
     * The model to be evaluated can return multiple results with confidence score on each query. These results will be sorted by the descending order of the scores and we only keep the first max_result_count results as the final results to evaluate.
     */
    maxResultCount: number;
}

/**
 * Smart reply specific configuration for evaluation job.
 */
export interface GoogleCloudDialogflowV2EvaluationConfigSmartReplyConfigResponse {
    /**
     * The allowlist document resource name. Format: `projects//knowledgeBases//documents/`. Only used for smart reply model.
     */
    allowlistDocument: string;
    /**
     * The model to be evaluated can return multiple results with confidence score on each query. These results will be sorted by the descending order of the scores and we only keep the first max_result_count results as the final results to evaluate.
     */
    maxResultCount: number;
}

/**
 * Whether fulfillment is enabled for the specific feature.
 */
export interface GoogleCloudDialogflowV2FulfillmentFeatureResponse {
    /**
     * The type of the feature that enabled for fulfillment.
     */
    type: string;
}

/**
 * Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers. More information could be found at: https://cloud.google.com/dialogflow/docs/fulfillment-configure.
 */
export interface GoogleCloudDialogflowV2FulfillmentGenericWebServiceResponse {
    /**
     * Optional. Indicates if generic web service is created through Cloud Functions integration. Defaults to false. is_cloud_function is deprecated. Cloud functions can be configured by its uri as a regular web service now.
     */
    isCloudFunction: boolean;
    /**
     * Optional. The password for HTTP Basic authentication.
     */
    password: string;
    /**
     * Optional. The HTTP request headers to send together with fulfillment requests.
     */
    requestHeaders: {[key: string]: string};
    /**
     * The fulfillment URI for receiving POST requests. It must use https protocol.
     */
    uri: string;
    /**
     * Optional. The user name for HTTP Basic authentication.
     */
    username: string;
}

/**
 * By default, your agent responds to a matched intent with a static response. As an alternative, you can provide a more dynamic response by using fulfillment. When you enable fulfillment for an intent, Dialogflow responds to that intent by calling a service that you define. For example, if an end-user wants to schedule a haircut on Friday, your service can check your database and respond to the end-user with availability information for Friday. For more information, see the [fulfillment guide](https://cloud.google.com/dialogflow/docs/fulfillment-overview).
 */
export interface GoogleCloudDialogflowV2FulfillmentResponse {
    /**
     * Optional. The human-readable name of the fulfillment, unique within the agent. This field is not used for Fulfillment in an Environment.
     */
    displayName: string;
    /**
     * Optional. Whether fulfillment is enabled.
     */
    enabled: boolean;
    /**
     * Optional. The field defines whether the fulfillment is enabled for certain features.
     */
    features: outputs.dialogflow.v2.GoogleCloudDialogflowV2FulfillmentFeatureResponse[];
    /**
     * Configuration for a generic web service.
     */
    genericWebService: outputs.dialogflow.v2.GoogleCloudDialogflowV2FulfillmentGenericWebServiceResponse;
    /**
     * The unique identifier of the fulfillment. Supported formats: - `projects//agent/fulfillment` - `projects//locations//agent/fulfillment` This field is not used for Fulfillment in an Environment.
     */
    name: string;
}

/**
 * Google Cloud Storage location for the inputs.
 */
export interface GoogleCloudDialogflowV2GcsSourcesResponse {
    /**
     * Google Cloud Storage URIs for the inputs. A URI is of the form: gs://bucket/object-prefix-or-name Whether a prefix or name is used depends on the use case.
     */
    uris: string[];
}

/**
 * Custom conversation models used in agent assist feature. Supported feature: ARTICLE_SUGGESTION, SMART_COMPOSE, SMART_REPLY, CONVERSATION_SUMMARIZATION.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationModelConfigResponse {
    /**
     * Conversation model resource name. Format: `projects//conversationModels/`.
     */
    model: string;
}

/**
 * Config to process conversation.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationProcessConfigResponse {
    /**
     * Number of recent non-small-talk sentences to use as context for article and FAQ suggestion
     */
    recentSentencesCount: number;
}

/**
 * Configuration for analyses to run on each conversation message.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigMessageAnalysisConfigResponse {
    /**
     * Enable entity extraction in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Currently, this feature is not general available, please contact Google to get access.
     */
    enableEntityExtraction: boolean;
    /**
     * Enable sentiment analysis in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral: https://cloud.google.com/natural-language/docs/basics#sentiment_analysis For Participants.StreamingAnalyzeContent method, result will be in StreamingAnalyzeContentResponse.message.SentimentAnalysisResult. For Participants.AnalyzeContent method, result will be in AnalyzeContentResponse.message.SentimentAnalysisResult For Conversations.ListMessages method, result will be in ListMessagesResponse.messages.SentimentAnalysisResult If Pub/Sub notification is configured, result will be in ConversationEvent.new_message_payload.SentimentAnalysisResult.
     */
    enableSentimentAnalysis: boolean;
}

/**
 * Defines the Human Agent Assist to connect to a conversation.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigResponse {
    /**
     * Configuration for agent assistance of end user participant. Currently, this feature is not general available, please contact Google to get access.
     */
    endUserSuggestionConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfigResponse;
    /**
     * Configuration for agent assistance of human agent participant.
     */
    humanAgentSuggestionConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfigResponse;
    /**
     * Configuration for message analysis.
     */
    messageAnalysisConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigMessageAnalysisConfigResponse;
    /**
     * Pub/Sub topic on which to publish new agent assistant events.
     */
    notificationConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2NotificationConfigResponse;
}

/**
 * Detail human agent assistant config.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfigResponse {
    /**
     * Configuration of different suggestion features. One feature can have only one config.
     */
    featureConfigs: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfigResponse[];
    /**
     * If `group_suggestion_responses` is false, and there are multiple `feature_configs` in `event based suggestion` or StreamingAnalyzeContent, we will try to deliver suggestions to customers as soon as we get new suggestion. Different type of suggestions based on the same context will be in separate Pub/Sub event or `StreamingAnalyzeContentResponse`. If `group_suggestion_responses` set to true. All the suggestions to the same participant based on the same context will be grouped into a single Pub/Sub event or StreamingAnalyzeContentResponse.
     */
    groupSuggestionResponses: boolean;
}

/**
 * Config for suggestion features.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfigResponse {
    /**
     * Configs of custom conversation model.
     */
    conversationModelConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationModelConfigResponse;
    /**
     * Configs for processing conversation.
     */
    conversationProcessConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationProcessConfigResponse;
    /**
     * Automatically iterates all participants and tries to compile suggestions. Supported features: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST.
     */
    enableEventBasedSuggestion: boolean;
    /**
     * Configs of query.
     */
    queryConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigResponse;
    /**
     * The suggestion feature.
     */
    suggestionFeature: outputs.dialogflow.v2.GoogleCloudDialogflowV2SuggestionFeatureResponse;
    /**
     * Settings of suggestion trigger. Currently, only ARTICLE_SUGGESTION and FAQ will use this field.
     */
    suggestionTriggerSettings: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionTriggerSettingsResponse;
}

/**
 * Settings that determine how to filter recent conversation context when generating suggestions.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettingsResponse {
    /**
     * If set to true, the last message from virtual agent (hand off message) and the message before it (trigger message of hand off) are dropped.
     */
    dropHandoffMessages: boolean;
    /**
     * If set to true, all messages from ivr stage are dropped.
     */
    dropIvrMessages: boolean;
    /**
     * If set to true, all messages from virtual agent are dropped.
     */
    dropVirtualAgentMessages: boolean;
}

/**
 * Dialogflow source setting. Supported feature: DIALOGFLOW_ASSIST.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceResponse {
    /**
     * The name of a Dialogflow virtual agent used for end user side intent detection and suggestion. Format: `projects//locations//agent`. When multiple agents are allowed in the same Dialogflow project.
     */
    agent: string;
}

/**
 * Document source settings. Supported features: SMART_REPLY, SMART_COMPOSE.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySourceResponse {
    /**
     * Knowledge documents to query from. Format: `projects//locations//knowledgeBases//documents/`. Currently, at most 5 documents are supported.
     */
    documents: string[];
}

/**
 * Knowledge base source settings. Supported features: ARTICLE_SUGGESTION, FAQ.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySourceResponse {
    /**
     * Knowledge bases to query. Format: `projects//locations//knowledgeBases/`. Currently, at most 5 knowledge bases are supported.
     */
    knowledgeBases: string[];
}

/**
 * Config for suggestion query.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigResponse {
    /**
     * Confidence threshold of query result. Agent Assist gives each suggestion a score in the range [0.0, 1.0], based on the relevance between the suggestion and the current conversation context. A score of 0.0 has no relevance, while a score of 1.0 has high relevance. Only suggestions with a score greater than or equal to the value of this field are included in the results. For a baseline model (the default), the recommended value is in the range [0.05, 0.1]. For a custom model, there is no recommended value. Tune this value by starting from a very low value and slowly increasing until you have desired results. If this field is not set, it defaults to 0.0, which means that all suggestions are returned. Supported features: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE.
     */
    confidenceThreshold: number;
    /**
     * Determines how recent conversation context is filtered when generating suggestions. If unspecified, no messages will be dropped.
     */
    contextFilterSettings: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettingsResponse;
    /**
     * Query from Dialogflow agent. It is used by DIALOGFLOW_ASSIST.
     */
    dialogflowQuerySource: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceResponse;
    /**
     * Query from knowledge base document. It is used by: SMART_REPLY, SMART_COMPOSE.
     */
    documentQuerySource: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySourceResponse;
    /**
     * Query from knowledgebase. It is used by: ARTICLE_SUGGESTION, FAQ.
     */
    knowledgeBaseQuerySource: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySourceResponse;
    /**
     * Maximum number of results to return. Currently, if unset, defaults to 10. And the max number is 20.
     */
    maxResults: number;
}

/**
 * Settings of suggestion trigger.
 */
export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionTriggerSettingsResponse {
    /**
     * Do not trigger if last utterance is small talk.
     */
    noSmalltalk: boolean;
    /**
     * Only trigger suggestion if participant role of last utterance is END_USER.
     */
    onlyEndUser: boolean;
}

/**
 * Configuration specific to LivePerson (https://www.liveperson.com).
 */
export interface GoogleCloudDialogflowV2HumanAgentHandoffConfigLivePersonConfigResponse {
    /**
     * Account number of the LivePerson account to connect. This is the account number you input at the login page.
     */
    accountNumber: string;
}

/**
 * Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation. Currently, this feature is not general available, please contact Google to get access.
 */
export interface GoogleCloudDialogflowV2HumanAgentHandoffConfigResponse {
    /**
     * Uses LivePerson (https://www.liveperson.com).
     */
    livePersonConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentHandoffConfigLivePersonConfigResponse;
    /**
     * Uses Salesforce Live Agent.
     */
    salesforceLiveAgentConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfigResponse;
}

/**
 * Configuration specific to Salesforce Live Agent.
 */
export interface GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfigResponse {
    /**
     * Live Agent chat button ID.
     */
    buttonId: string;
    /**
     * Live Agent deployment ID.
     */
    deploymentId: string;
    /**
     * Domain of the Live Agent endpoint for this agent. You can find the endpoint URL in the `Live Agent settings` page. For example if URL has the form https://d.la4-c2-phx.salesforceliveagent.com/..., you should fill in d.la4-c2-phx.salesforceliveagent.com.
     */
    endpointDomain: string;
    /**
     * The organization ID of the Salesforce account.
     */
    organizationId: string;
}

/**
 * Represents the configuration of importing a set of conversation files in Google Cloud Storage.
 */
export interface GoogleCloudDialogflowV2InputConfigResponse {
    /**
     * The Cloud Storage URI has the form gs:////agent*.json. Wildcards are allowed and will be expanded into all matched JSON files, which will be read as one conversation per file.
     */
    gcsSource: outputs.dialogflow.v2.GoogleCloudDialogflowV2GcsSourcesResponse;
}

/**
 * InputDataset used to create model or do evaluation. NextID:5
 */
export interface GoogleCloudDialogflowV2InputDatasetResponse {
    /**
     * ConversationDataset resource name. Format: `projects//locations//conversationDatasets/`
     */
    dataset: string;
}

/**
 * Represents a single followup intent in the chain.
 */
export interface GoogleCloudDialogflowV2IntentFollowupIntentInfoResponse {
    /**
     * The unique identifier of the followup intent. Format: `projects//agent/intents/`.
     */
    followupIntentName: string;
    /**
     * The unique identifier of the followup intent's parent. Format: `projects//agent/intents/`.
     */
    parentFollowupIntentName: string;
}

/**
 * Opens the given URI.
 */
export interface GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionResponse {
    /**
     * The HTTP or HTTPS scheme URI.
     */
    uri: string;
}

/**
 * The button object that appears at the bottom of a card.
 */
export interface GoogleCloudDialogflowV2IntentMessageBasicCardButtonResponse {
    /**
     * Action to take when a user taps on the button.
     */
    openUriAction: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionResponse;
    /**
     * The title of the button.
     */
    title: string;
}

/**
 * The basic card message. Useful for displaying information.
 */
export interface GoogleCloudDialogflowV2IntentMessageBasicCardResponse {
    /**
     * Optional. The collection of card buttons.
     */
    buttons: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageBasicCardButtonResponse[];
    /**
     * Required, unless image is present. The body text of the card.
     */
    formattedText: string;
    /**
     * Optional. The image for the card.
     */
    image: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageImageResponse;
    /**
     * Optional. The subtitle of the card.
     */
    subtitle: string;
    /**
     * Optional. The title of the card.
     */
    title: string;
}

/**
 * Actions on Google action to open a given url.
 */
export interface GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionResponse {
    /**
     * URL
     */
    url: string;
    /**
     * Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser.
     */
    urlTypeHint: string;
}

/**
 * Browsing carousel tile
 */
export interface GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemResponse {
    /**
     * Optional. Description of the carousel item. Maximum of four lines of text.
     */
    description: string;
    /**
     * Optional. Text that appears at the bottom of the Browse Carousel Card. Maximum of one line of text.
     */
    footer: string;
    /**
     * Optional. Hero image for the carousel item.
     */
    image: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageImageResponse;
    /**
     * Action to present to the user.
     */
    openUriAction: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionResponse;
    /**
     * Title of the carousel item. Maximum of two lines of text.
     */
    title: string;
}

/**
 * Browse Carousel Card for Actions on Google. https://developers.google.com/actions/assistant/responses#browsing_carousel
 */
export interface GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardResponse {
    /**
     * Optional. Settings for displaying the image. Applies to every image in items.
     */
    imageDisplayOptions: string;
    /**
     * List of items in the Browse Carousel Card. Minimum of two items, maximum of ten.
     */
    items: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemResponse[];
}

/**
 * Contains information about a button.
 */
export interface GoogleCloudDialogflowV2IntentMessageCardButtonResponse {
    /**
     * Optional. The text to send back to the Dialogflow API or a URI to open.
     */
    postback: string;
    /**
     * Optional. The text to show on the button.
     */
    text: string;
}

/**
 * The card response message.
 */
export interface GoogleCloudDialogflowV2IntentMessageCardResponse {
    /**
     * Optional. The collection of card buttons.
     */
    buttons: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageCardButtonResponse[];
    /**
     * Optional. The public URI to an image file for the card.
     */
    imageUri: string;
    /**
     * Optional. The subtitle of the card.
     */
    subtitle: string;
    /**
     * Optional. The title of the card.
     */
    title: string;
}

/**
 * An item in the carousel.
 */
export interface GoogleCloudDialogflowV2IntentMessageCarouselSelectItemResponse {
    /**
     * Optional. The body text of the card.
     */
    description: string;
    /**
     * Optional. The image to display.
     */
    image: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageImageResponse;
    /**
     * Additional info about the option item.
     */
    info: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageSelectItemInfoResponse;
    /**
     * Title of the carousel item.
     */
    title: string;
}

/**
 * The card for presenting a carousel of options to select from.
 */
export interface GoogleCloudDialogflowV2IntentMessageCarouselSelectResponse {
    /**
     * Carousel items.
     */
    items: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageCarouselSelectItemResponse[];
}

/**
 * Column properties for TableCard.
 */
export interface GoogleCloudDialogflowV2IntentMessageColumnPropertiesResponse {
    /**
     * Column heading.
     */
    header: string;
    /**
     * Optional. Defines text alignment for all cells in this column.
     */
    horizontalAlignment: string;
}

/**
 * The image response message.
 */
export interface GoogleCloudDialogflowV2IntentMessageImageResponse {
    /**
     * Optional. A text description of the image to be used for accessibility, e.g., screen readers.
     */
    accessibilityText: string;
    /**
     * Optional. The public URI to an image file.
     */
    imageUri: string;
}

/**
 * The suggestion chip message that allows the user to jump out to the app or website associated with this agent.
 */
export interface GoogleCloudDialogflowV2IntentMessageLinkOutSuggestionResponse {
    /**
     * The name of the app or site this chip is linking to.
     */
    destinationName: string;
    /**
     * The URI of the app or site to open when the user taps the suggestion chip.
     */
    uri: string;
}

/**
 * An item in the list.
 */
export interface GoogleCloudDialogflowV2IntentMessageListSelectItemResponse {
    /**
     * Optional. The main text describing the item.
     */
    description: string;
    /**
     * Optional. The image to display.
     */
    image: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageImageResponse;
    /**
     * Additional information about this option.
     */
    info: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageSelectItemInfoResponse;
    /**
     * The title of the list item.
     */
    title: string;
}

/**
 * The card for presenting a list of options to select from.
 */
export interface GoogleCloudDialogflowV2IntentMessageListSelectResponse {
    /**
     * List items.
     */
    items: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageListSelectItemResponse[];
    /**
     * Optional. Subtitle of the list.
     */
    subtitle: string;
    /**
     * Optional. The overall title of the list.
     */
    title: string;
}

/**
 * The media content card for Actions on Google.
 */
export interface GoogleCloudDialogflowV2IntentMessageMediaContentResponse {
    /**
     * List of media objects.
     */
    mediaObjects: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectResponse[];
    /**
     * Optional. What type of media is the content (ie "audio").
     */
    mediaType: string;
}

/**
 * Response media object for media content card.
 */
export interface GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectResponse {
    /**
     * Url where the media is stored.
     */
    contentUrl: string;
    /**
     * Optional. Description of media card.
     */
    description: string;
    /**
     * Optional. Icon to display above media content.
     */
    icon: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageImageResponse;
    /**
     * Optional. Image to display above media content.
     */
    largeImage: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageImageResponse;
    /**
     * Name of media card.
     */
    name: string;
}

/**
 * The quick replies response message.
 */
export interface GoogleCloudDialogflowV2IntentMessageQuickRepliesResponse {
    /**
     * Optional. The collection of quick replies.
     */
    quickReplies: string[];
    /**
     * Optional. The title of the collection of quick replies.
     */
    title: string;
}

/**
 * A rich response message. Corresponds to the intent `Response` field in the Dialogflow console. For more information, see [Rich response messages](https://cloud.google.com/dialogflow/docs/intents-rich-messages).
 */
export interface GoogleCloudDialogflowV2IntentMessageResponse {
    /**
     * The basic card response for Actions on Google.
     */
    basicCard: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageBasicCardResponse;
    /**
     * Browse carousel card for Actions on Google.
     */
    browseCarouselCard: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardResponse;
    /**
     * The card response.
     */
    card: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageCardResponse;
    /**
     * The carousel card response for Actions on Google.
     */
    carouselSelect: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageCarouselSelectResponse;
    /**
     * The image response.
     */
    image: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageImageResponse;
    /**
     * The link out suggestion chip for Actions on Google.
     */
    linkOutSuggestion: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageLinkOutSuggestionResponse;
    /**
     * The list card response for Actions on Google.
     */
    listSelect: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageListSelectResponse;
    /**
     * The media content card for Actions on Google.
     */
    mediaContent: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageMediaContentResponse;
    /**
     * A custom platform-specific response.
     */
    payload: {[key: string]: string};
    /**
     * Optional. The platform that this message is intended for.
     */
    platform: string;
    /**
     * The quick replies response.
     */
    quickReplies: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageQuickRepliesResponse;
    /**
     * The voice and text-only responses for Actions on Google.
     */
    simpleResponses: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageSimpleResponsesResponse;
    /**
     * The suggestion chips for Actions on Google.
     */
    suggestions: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageSuggestionsResponse;
    /**
     * Table card for Actions on Google.
     */
    tableCard: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageTableCardResponse;
    /**
     * The text response.
     */
    text: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageTextResponse;
}

/**
 * Additional info about the select item for when it is triggered in a dialog.
 */
export interface GoogleCloudDialogflowV2IntentMessageSelectItemInfoResponse {
    /**
     * A unique key that will be sent back to the agent if this response is given.
     */
    key: string;
    /**
     * Optional. A list of synonyms that can also be used to trigger this item in dialog.
     */
    synonyms: string[];
}

/**
 * The simple response message containing speech or text.
 */
export interface GoogleCloudDialogflowV2IntentMessageSimpleResponseResponse {
    /**
     * Optional. The text to display.
     */
    displayText: string;
    /**
     * One of text_to_speech or ssml must be provided. Structured spoken response to the user in the SSML format. Mutually exclusive with text_to_speech.
     */
    ssml: string;
    /**
     * One of text_to_speech or ssml must be provided. The plain text of the speech output. Mutually exclusive with ssml.
     */
    textToSpeech: string;
}

/**
 * The collection of simple response candidates. This message in `QueryResult.fulfillment_messages` and `WebhookResponse.fulfillment_messages` should contain only one `SimpleResponse`.
 */
export interface GoogleCloudDialogflowV2IntentMessageSimpleResponsesResponse {
    /**
     * The list of simple responses.
     */
    simpleResponses: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageSimpleResponseResponse[];
}

/**
 * The suggestion chip message that the user can tap to quickly post a reply to the conversation.
 */
export interface GoogleCloudDialogflowV2IntentMessageSuggestionResponse {
    /**
     * The text shown the in the suggestion chip.
     */
    title: string;
}

/**
 * The collection of suggestions.
 */
export interface GoogleCloudDialogflowV2IntentMessageSuggestionsResponse {
    /**
     * The list of suggested replies.
     */
    suggestions: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageSuggestionResponse[];
}

/**
 * Cell of TableCardRow.
 */
export interface GoogleCloudDialogflowV2IntentMessageTableCardCellResponse {
    /**
     * Text in this cell.
     */
    text: string;
}

/**
 * Table card for Actions on Google.
 */
export interface GoogleCloudDialogflowV2IntentMessageTableCardResponse {
    /**
     * Optional. List of buttons for the card.
     */
    buttons: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageBasicCardButtonResponse[];
    /**
     * Optional. Display properties for the columns in this table.
     */
    columnProperties: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageColumnPropertiesResponse[];
    /**
     * Optional. Image which should be displayed on the card.
     */
    image: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageImageResponse;
    /**
     * Optional. Rows in this table of data.
     */
    rows: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageTableCardRowResponse[];
    /**
     * Optional. Subtitle to the title.
     */
    subtitle: string;
    /**
     * Title of the card.
     */
    title: string;
}

/**
 * Row of TableCard.
 */
export interface GoogleCloudDialogflowV2IntentMessageTableCardRowResponse {
    /**
     * Optional. List of cells that make up this row.
     */
    cells: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentMessageTableCardCellResponse[];
    /**
     * Optional. Whether to add a visual divider after this row.
     */
    dividerAfter: boolean;
}

/**
 * The text response message.
 */
export interface GoogleCloudDialogflowV2IntentMessageTextResponse {
    /**
     * Optional. The collection of the agent's responses.
     */
    text: string[];
}

/**
 * Represents intent parameters.
 */
export interface GoogleCloudDialogflowV2IntentParameterResponse {
    /**
     * Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`.
     */
    defaultValue: string;
    /**
     * The name of the parameter.
     */
    displayName: string;
    /**
     * Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided.
     */
    entityTypeDisplayName: string;
    /**
     * Optional. Indicates whether the parameter represents a list of values.
     */
    isList: boolean;
    /**
     * Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value.
     */
    mandatory: boolean;
    /**
     * The unique identifier of this parameter.
     */
    name: string;
    /**
     * Optional. The collection of prompts that the agent can present to the user in order to collect a value for the parameter.
     */
    prompts: string[];
    /**
     * Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`.
     */
    value: string;
}

/**
 * Represents a part of a training phrase.
 */
export interface GoogleCloudDialogflowV2IntentTrainingPhrasePartResponse {
    /**
     * Optional. The parameter name for the value extracted from the annotated part of the example. This field is required for annotated parts of the training phrase.
     */
    alias: string;
    /**
     * Optional. The entity type name prefixed with `@`. This field is required for annotated parts of the training phrase.
     */
    entityType: string;
    /**
     * The text for this part.
     */
    text: string;
    /**
     * Optional. Indicates whether the text was manually annotated. This field is set to true when the Dialogflow Console is used to manually annotate the part. When creating an annotated part with the API, you must set this to true.
     */
    userDefined: boolean;
}

/**
 * Represents an example that the agent is trained on.
 */
export interface GoogleCloudDialogflowV2IntentTrainingPhraseResponse {
    /**
     * The unique identifier of this training phrase.
     */
    name: string;
    /**
     * The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `entity_type`, `alias`, and `user_defined` fields are all set.
     */
    parts: outputs.dialogflow.v2.GoogleCloudDialogflowV2IntentTrainingPhrasePartResponse[];
    /**
     * Optional. Indicates how many times this example was added to the intent. Each time a developer adds an existing sample by editing an intent or training, this counter is increased.
     */
    timesAddedCount: number;
    /**
     * The type of the training phrase.
     */
    type: string;
}

/**
 * Defines logging behavior for conversation lifecycle events.
 */
export interface GoogleCloudDialogflowV2LoggingConfigResponse {
    /**
     * Whether to log conversation events like CONVERSATION_STARTED to Stackdriver in the conversation project as JSON format ConversationEvent protos.
     */
    enableStackdriverLogging: boolean;
}

/**
 * Defines notification behavior.
 */
export interface GoogleCloudDialogflowV2NotificationConfigResponse {
    /**
     * Format of message.
     */
    messageFormat: string;
    /**
     * Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos. For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow Service Agent` role in the topic project. For chat integration to receive notification, make sure API caller has been granted the `Dialogflow Service Agent` role for the topic. Format: `projects//locations//topics/`.
     */
    topic: string;
}

/**
 * The evaluation metrics for smart reply model.
 */
export interface GoogleCloudDialogflowV2SmartReplyMetricsResponse {
    /**
     * Percentage of target participant messages in the evaluation dataset for which similar messages have appeared at least once in the allowlist. Should be [0, 1].
     */
    allowlistCoverage: number;
    /**
     * Total number of conversations used to generate this metric.
     */
    conversationCount: string;
    /**
     * Metrics of top n smart replies, sorted by TopNMetric.n.
     */
    topNMetrics: outputs.dialogflow.v2.GoogleCloudDialogflowV2SmartReplyMetricsTopNMetricsResponse[];
}

/**
 * Evaluation metrics when retrieving `n` smart replies with the model.
 */
export interface GoogleCloudDialogflowV2SmartReplyMetricsTopNMetricsResponse {
    /**
     * Number of retrieved smart replies. For example, when `n` is 3, this evaluation contains metrics for when Dialogflow retrieves 3 smart replies with the model.
     */
    n: number;
    /**
     * Defined as `number of queries whose top n smart replies have at least one similar (token match similarity above the defined threshold) reply as the real reply` divided by `number of queries with at least one smart reply`. Value ranges from 0.0 to 1.0 inclusive.
     */
    recall: number;
}

/**
 * Metadata for smart reply models.
 */
export interface GoogleCloudDialogflowV2SmartReplyModelMetadataResponse {
    /**
     * Optional. Type of the smart reply model. If not provided, model_type is used.
     */
    trainingModelType: string;
}

/**
 * Configures speech transcription for ConversationProfile.
 */
export interface GoogleCloudDialogflowV2SpeechToTextConfigResponse {
    /**
     * Which Speech model to select. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then a default model is used. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model) for more details.
     */
    model: string;
    /**
     * The speech model used in speech to text. `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE` will be treated as `USE_ENHANCED`. It can be overridden in AnalyzeContentRequest and StreamingAnalyzeContentRequest request. If enhanced model variant is specified and an enhanced version of the specified model for the language does not exist, then it would emit an error.
     */
    speechModelVariant: string;
}

/**
 * The type of Human Agent Assistant API suggestion to perform, and the maximum number of results to return for that type. Multiple `Feature` objects can be specified in the `features` list.
 */
export interface GoogleCloudDialogflowV2SuggestionFeatureResponse {
    /**
     * Type of Human Agent Assistant API feature to request.
     */
    type: string;
}

/**
 * Instructs the speech synthesizer on how to generate the output audio content.
 */
export interface GoogleCloudDialogflowV2TextToSpeechSettingsResponse {
    /**
     * Optional. Indicates whether text to speech is enabled. Even when this field is false, other settings in this proto are still retained.
     */
    enableTextToSpeech: boolean;
    /**
     * Audio encoding of the synthesized audio content.
     */
    outputAudioEncoding: string;
    /**
     * Optional. The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality).
     */
    sampleRateHertz: number;
    /**
     * Optional. Configuration of how speech should be synthesized, mapping from language (https://cloud.google.com/dialogflow/docs/reference/language) to SynthesizeSpeechConfig.
     */
    synthesizeSpeechConfigs: {[key: string]: string};
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface GoogleRpcStatusResponse {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code: number;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details: {[key: string]: string}[];
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message: string;
}

