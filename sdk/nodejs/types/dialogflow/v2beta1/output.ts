// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Defines the Automated Agent to connect to a conversation.
 */
export interface GoogleCloudDialogflowV2beta1AutomatedAgentConfigResponse {
    /**
     * ID of the Dialogflow agent environment to use. This project needs to either be the same project as the conversation or you need to grant `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow API Service Agent` role in this project. - For ES agents, use format: `projects//locations//agent/environments/`. If environment is not specified, the default `draft` environment is used. Refer to [DetectIntentRequest](/dialogflow/docs/reference/rpc/google.cloud.dialogflow.v2beta1#google.cloud.dialogflow.v2beta1.DetectIntentRequest) for more details. - For CX agents, use format `projects//locations//agents//environments/`. If environment is not specified, the default `draft` environment is used.
     */
    agent: string;
}

/**
 * Dialogflow contexts are similar to natural language context. If a person says to you "they are orange", you need context in order to understand what "they" is referring to. Similarly, for Dialogflow to handle an end-user expression like that, it needs to be provided with context in order to correctly match an intent. Using contexts, you can control the flow of a conversation. You can configure contexts for an intent by setting input and output contexts, which are identified by string names. When an intent is matched, any configured output contexts for that intent become active. While any contexts are active, Dialogflow is more likely to match intents that are configured with input contexts that correspond to the currently active contexts. For more information about context, see the [Contexts guide](https://cloud.google.com/dialogflow/docs/contexts-overview).
 */
export interface GoogleCloudDialogflowV2beta1ContextResponse {
    /**
     * Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.
     */
    lifespanCount: number;
    /**
     * The unique identifier of the context. Supported formats: - `projects//agent/sessions//contexts/`, - `projects//locations//agent/sessions//contexts/`, - `projects//agent/environments//users//sessions//contexts/`, - `projects//locations//agent/environments//users//sessions//contexts/`, The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`
     */
    name: string;
    /**
     * Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value
     */
    parameters: {[key: string]: string};
}

/**
 * Represents a phone number for telephony integration. It allows for connecting a particular conversation over telephony.
 */
export interface GoogleCloudDialogflowV2beta1ConversationPhoneNumberResponse {
    /**
     * The phone number to connect to this conversation.
     */
    phoneNumber: string;
}

/**
 * The status of a reload attempt.
 */
export interface GoogleCloudDialogflowV2beta1DocumentReloadStatusResponse {
    /**
     * The status of a reload attempt or the initial load.
     */
    status: outputs.dialogflow.v2beta1.GoogleRpcStatusResponse;
    /**
     * The time of a reload attempt. This reload may have been triggered automatically or manually and may not have succeeded.
     */
    time: string;
}

/**
 * An **entity entry** for an associated entity type.
 */
export interface GoogleCloudDialogflowV2beta1EntityTypeEntityResponse {
    /**
     * A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.
     */
    synonyms: string[];
    /**
     * The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).
     */
    value: string;
}

/**
 * Whether fulfillment is enabled for the specific feature.
 */
export interface GoogleCloudDialogflowV2beta1FulfillmentFeatureResponse {
    /**
     * The type of the feature that enabled for fulfillment.
     */
    type: string;
}

/**
 * Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers. More information could be found at: https://cloud.google.com/dialogflow/docs/fulfillment-configure.
 */
export interface GoogleCloudDialogflowV2beta1FulfillmentGenericWebServiceResponse {
    /**
     * Optional. Indicates if generic web service is created through Cloud Functions integration. Defaults to false. is_cloud_function is deprecated. Cloud functions can be configured by its uri as a regular web service now.
     */
    isCloudFunction: boolean;
    /**
     * The password for HTTP Basic authentication.
     */
    password: string;
    /**
     * The HTTP request headers to send together with fulfillment requests.
     */
    requestHeaders: {[key: string]: string};
    /**
     * The fulfillment URI for receiving POST requests. It must use https protocol.
     */
    uri: string;
    /**
     * The user name for HTTP Basic authentication.
     */
    username: string;
}

/**
 * By default, your agent responds to a matched intent with a static response. As an alternative, you can provide a more dynamic response by using fulfillment. When you enable fulfillment for an intent, Dialogflow responds to that intent by calling a service that you define. For example, if an end-user wants to schedule a haircut on Friday, your service can check your database and respond to the end-user with availability information for Friday. For more information, see the [fulfillment guide](https://cloud.google.com/dialogflow/docs/fulfillment-overview).
 */
export interface GoogleCloudDialogflowV2beta1FulfillmentResponse {
    /**
     * The human-readable name of the fulfillment, unique within the agent. This field is not used for Fulfillment in an Environment.
     */
    displayName: string;
    /**
     * Whether fulfillment is enabled.
     */
    enabled: boolean;
    /**
     * The field defines whether the fulfillment is enabled for certain features.
     */
    features: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1FulfillmentFeatureResponse[];
    /**
     * Configuration for a generic web service.
     */
    genericWebService: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1FulfillmentGenericWebServiceResponse;
    /**
     * The unique identifier of the fulfillment. Supported formats: - `projects//agent/fulfillment` - `projects//locations//agent/fulfillment` This field is not used for Fulfillment in an Environment.
     */
    name: string;
}

/**
 * Custom conversation models used in agent assist feature. Supported feature: ARTICLE_SUGGESTION, SMART_COMPOSE, SMART_REPLY, CONVERSATION_SUMMARIZATION.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigConversationModelConfigResponse {
    /**
     * Conversation model resource name. Format: `projects//conversationModels/`.
     */
    model: string;
}

/**
 * Config to process conversation.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigConversationProcessConfigResponse {
    /**
     * Number of recent non-small-talk sentences to use as context for article and FAQ suggestion
     */
    recentSentencesCount: number;
}

/**
 * Configuration for analyses to run on each conversation message.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfigResponse {
    /**
     * Enable entity extraction in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Currently, this feature is not general available, please contact Google to get access.
     */
    enableEntityExtraction: boolean;
    /**
     * Enable sentiment analysis in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral: https://cloud.google.com/natural-language/docs/basics#sentiment_analysis For Participants.StreamingAnalyzeContent method, result will be in StreamingAnalyzeContentResponse.message.SentimentAnalysisResult. For Participants.AnalyzeContent method, result will be in AnalyzeContentResponse.message.SentimentAnalysisResult For Conversations.ListMessages method, result will be in ListMessagesResponse.messages.SentimentAnalysisResult If Pub/Sub notification is configured, result will be in ConversationEvent.new_message_payload.SentimentAnalysisResult.
     */
    enableSentimentAnalysis: boolean;
}

/**
 * Defines the Human Agent Assistant to connect to a conversation.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigResponse {
    /**
     * Configuration for agent assistance of end user participant. Currently, this feature is not general available, please contact Google to get access.
     */
    endUserSuggestionConfig: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionConfigResponse;
    /**
     * Configuration for agent assistance of human agent participant.
     */
    humanAgentSuggestionConfig: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionConfigResponse;
    /**
     * Configuration for message analysis.
     */
    messageAnalysisConfig: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfigResponse;
    /**
     * Pub/Sub topic on which to publish new agent assistant events.
     */
    notificationConfig: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1NotificationConfigResponse;
}

/**
 * Detail human agent assistant config.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionConfigResponse {
    /**
     * Configuration of different suggestion features. One feature can have only one config.
     */
    featureConfigs: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionFeatureConfigResponse[];
    /**
     * If `group_suggestion_responses` is false, and there are multiple `feature_configs` in `event based suggestion` or StreamingAnalyzeContent, we will try to deliver suggestions to customers as soon as we get new suggestion. Different type of suggestions based on the same context will be in separate Pub/Sub event or `StreamingAnalyzeContentResponse`. If `group_suggestion_responses` set to true. All the suggestions to the same participant based on the same context will be grouped into a single Pub/Sub event or StreamingAnalyzeContentResponse.
     */
    groupSuggestionResponses: boolean;
}

/**
 * Config for suggestion features.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionFeatureConfigResponse {
    /**
     * Configs of custom conversation model.
     */
    conversationModelConfig: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigConversationModelConfigResponse;
    /**
     * Configs for processing conversation.
     */
    conversationProcessConfig: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigConversationProcessConfigResponse;
    /**
     * Automatically iterates all participants and tries to compile suggestions. Supported features: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST.
     */
    enableEventBasedSuggestion: boolean;
    /**
     * Configs of query.
     */
    queryConfig: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigResponse;
    /**
     * The suggestion feature.
     */
    suggestionFeature: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1SuggestionFeatureResponse;
    /**
     * Settings of suggestion trigger. Currently, only ARTICLE_SUGGESTION, FAQ, and DIALOGFLOW_ASSIST will use this field.
     */
    suggestionTriggerSettings: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionTriggerSettingsResponse;
}

/**
 * Settings that determine how to filter recent conversation context when generating suggestions.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettingsResponse {
    /**
     * If set to true, the last message from virtual agent (hand off message) and the message before it (trigger message of hand off) are dropped.
     */
    dropHandoffMessages: boolean;
    /**
     * If set to true, all messages from ivr stage are dropped.
     */
    dropIvrMessages: boolean;
    /**
     * If set to true, all messages from virtual agent are dropped.
     */
    dropVirtualAgentMessages: boolean;
}

/**
 * Dialogflow source setting. Supported feature: DIALOGFLOW_ASSIST.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceResponse {
    /**
     * The name of a dialogflow virtual agent used for end user side intent detection and suggestion. Format: `projects//locations//agent`. When multiple agents are allowed in the same Dialogflow project.
     */
    agent: string;
}

/**
 * Document source settings. Supported features: SMART_REPLY, SMART_COMPOSE.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySourceResponse {
    /**
     * Knowledge documents to query from. Format: `projects//locations//knowledgeBases//documents/`. Currently, only one document is supported.
     */
    documents: string[];
}

/**
 * Knowledge base source settings. Supported features: ARTICLE_SUGGESTION, FAQ.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySourceResponse {
    /**
     * Knowledge bases to query. Format: `projects//locations//knowledgeBases/`. Currently, only one knowledge base is supported.
     */
    knowledgeBases: string[];
}

/**
 * Config for suggestion query.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigResponse {
    /**
     * Confidence threshold of query result. Agent Assist gives each suggestion a score in the range [0.0, 1.0], based on the relevance between the suggestion and the current conversation context. A score of 0.0 has no relevance, while a score of 1.0 has high relevance. Only suggestions with a score greater than or equal to the value of this field are included in the results. For a baseline model (the default), the recommended value is in the range [0.05, 0.1]. For a custom model, there is no recommended value. Tune this value by starting from a very low value and slowly increasing until you have desired results. If this field is not set, it is default to 0.0, which means that all suggestions are returned. Supported features: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE.
     */
    confidenceThreshold: number;
    /**
     * Determines how recent conversation context is filtered when generating suggestions. If unspecified, no messages will be dropped.
     */
    contextFilterSettings: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettingsResponse;
    /**
     * Query from Dialogflow agent. It is used by DIALOGFLOW_ASSIST.
     */
    dialogflowQuerySource: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceResponse;
    /**
     * Query from knowledge base document. It is used by: SMART_REPLY, SMART_COMPOSE.
     */
    documentQuerySource: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySourceResponse;
    /**
     * Query from knowledgebase. It is used by: ARTICLE_SUGGESTION, FAQ.
     */
    knowledgeBaseQuerySource: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySourceResponse;
    /**
     * Maximum number of results to return. Currently, if unset, defaults to 10. And the max number is 20.
     */
    maxResults: number;
}

/**
 * Settings of suggestion trigger.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigSuggestionTriggerSettingsResponse {
    /**
     * Do not trigger if last utterance is small talk.
     */
    noSmallTalk: boolean;
    /**
     * Only trigger suggestion if participant role of last utterance is END_USER.
     */
    onlyEndUser: boolean;
}

/**
 * Configuration specific to LivePerson (https://www.liveperson.com).
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentHandoffConfigLivePersonConfigResponse {
    /**
     * Account number of the LivePerson account to connect. This is the account number you input at the login page.
     */
    accountNumber: string;
}

/**
 * Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation. Currently, this feature is not general available, please contact Google to get access.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentHandoffConfigResponse {
    /**
     * Uses LivePerson (https://www.liveperson.com).
     */
    livePersonConfig: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentHandoffConfigLivePersonConfigResponse;
    /**
     * Uses Salesforce Live Agent.
     */
    salesforceLiveAgentConfig: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1HumanAgentHandoffConfigSalesforceLiveAgentConfigResponse;
}

/**
 * Configuration specific to Salesforce Live Agent.
 */
export interface GoogleCloudDialogflowV2beta1HumanAgentHandoffConfigSalesforceLiveAgentConfigResponse {
    /**
     * Live Agent chat button ID.
     */
    buttonId: string;
    /**
     * Live Agent deployment ID.
     */
    deploymentId: string;
    /**
     * Domain of the Live Agent endpoint for this agent. You can find the endpoint URL in the `Live Agent settings` page. For example if URL has the form https://d.la4-c2-phx.salesforceliveagent.com/..., you should fill in d.la4-c2-phx.salesforceliveagent.com.
     */
    endpointDomain: string;
    /**
     * The organization ID of the Salesforce account.
     */
    organizationId: string;
}

/**
 * Represents a single followup intent in the chain.
 */
export interface GoogleCloudDialogflowV2beta1IntentFollowupIntentInfoResponse {
    /**
     * The unique identifier of the followup intent. Format: `projects//agent/intents/`.
     */
    followupIntentName: string;
    /**
     * The unique identifier of the followup intent's parent. Format: `projects//agent/intents/`.
     */
    parentFollowupIntentName: string;
}

/**
 * Opens the given URI.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonOpenUriActionResponse {
    /**
     * The HTTP or HTTPS scheme URI.
     */
    uri: string;
}

/**
 * The button object that appears at the bottom of a card.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonResponse {
    /**
     * Action to take when a user taps on the button.
     */
    openUriAction: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonOpenUriActionResponse;
    /**
     * The title of the button.
     */
    title: string;
}

/**
 * The basic card message. Useful for displaying information.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageBasicCardResponse {
    /**
     * Optional. The collection of card buttons.
     */
    buttons: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonResponse[];
    /**
     * Required, unless image is present. The body text of the card.
     */
    formattedText: string;
    /**
     * Optional. The image for the card.
     */
    image: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageImageResponse;
    /**
     * Optional. The subtitle of the card.
     */
    subtitle: string;
    /**
     * Optional. The title of the card.
     */
    title: string;
}

/**
 * Actions on Google action to open a given url.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionResponse {
    /**
     * URL
     */
    url: string;
    /**
     * Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser.
     */
    urlTypeHint: string;
}

/**
 * Browsing carousel tile
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemResponse {
    /**
     * Optional. Description of the carousel item. Maximum of four lines of text.
     */
    description: string;
    /**
     * Optional. Text that appears at the bottom of the Browse Carousel Card. Maximum of one line of text.
     */
    footer: string;
    /**
     * Optional. Hero image for the carousel item.
     */
    image: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageImageResponse;
    /**
     * Action to present to the user.
     */
    openUriAction: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionResponse;
    /**
     * Title of the carousel item. Maximum of two lines of text.
     */
    title: string;
}

/**
 * Browse Carousel Card for Actions on Google. https://developers.google.com/actions/assistant/responses#browsing_carousel
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardResponse {
    /**
     * Optional. Settings for displaying the image. Applies to every image in items.
     */
    imageDisplayOptions: string;
    /**
     * List of items in the Browse Carousel Card. Minimum of two items, maximum of ten.
     */
    items: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemResponse[];
}

/**
 * Optional. Contains information about a button.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageCardButtonResponse {
    /**
     * Optional. The text to send back to the Dialogflow API or a URI to open.
     */
    postback: string;
    /**
     * Optional. The text to show on the button.
     */
    text: string;
}

/**
 * The card response message.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageCardResponse {
    /**
     * Optional. The collection of card buttons.
     */
    buttons: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageCardButtonResponse[];
    /**
     * Optional. The public URI to an image file for the card.
     */
    imageUri: string;
    /**
     * Optional. The subtitle of the card.
     */
    subtitle: string;
    /**
     * Optional. The title of the card.
     */
    title: string;
}

/**
 * An item in the carousel.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectItemResponse {
    /**
     * Optional. The body text of the card.
     */
    description: string;
    /**
     * Optional. The image to display.
     */
    image: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageImageResponse;
    /**
     * Additional info about the option item.
     */
    info: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfoResponse;
    /**
     * Title of the carousel item.
     */
    title: string;
}

/**
 * The card for presenting a carousel of options to select from.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectResponse {
    /**
     * Carousel items.
     */
    items: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectItemResponse[];
}

/**
 * Column properties for TableCard.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageColumnPropertiesResponse {
    /**
     * Column heading.
     */
    header: string;
    /**
     * Optional. Defines text alignment for all cells in this column.
     */
    horizontalAlignment: string;
}

/**
 * The image response message.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageImageResponse {
    /**
     * A text description of the image to be used for accessibility, e.g., screen readers. Required if image_uri is set for CarouselSelect.
     */
    accessibilityText: string;
    /**
     * Optional. The public URI to an image file.
     */
    imageUri: string;
}

/**
 * The suggestion chip message that allows the user to jump out to the app or website associated with this agent.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageLinkOutSuggestionResponse {
    /**
     * The name of the app or site this chip is linking to.
     */
    destinationName: string;
    /**
     * The URI of the app or site to open when the user taps the suggestion chip.
     */
    uri: string;
}

/**
 * An item in the list.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageListSelectItemResponse {
    /**
     * Optional. The main text describing the item.
     */
    description: string;
    /**
     * Optional. The image to display.
     */
    image: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageImageResponse;
    /**
     * Additional information about this option.
     */
    info: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfoResponse;
    /**
     * The title of the list item.
     */
    title: string;
}

/**
 * The card for presenting a list of options to select from.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageListSelectResponse {
    /**
     * List items.
     */
    items: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageListSelectItemResponse[];
    /**
     * Optional. Subtitle of the list.
     */
    subtitle: string;
    /**
     * Optional. The overall title of the list.
     */
    title: string;
}

/**
 * The media content card for Actions on Google.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponse {
    /**
     * List of media objects.
     */
    mediaObjects: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse[];
    /**
     * Optional. What type of media is the content (ie "audio").
     */
    mediaType: string;
}

/**
 * Response media object for media content card.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectResponse {
    /**
     * Url where the media is stored.
     */
    contentUrl: string;
    /**
     * Optional. Description of media card.
     */
    description: string;
    /**
     * Optional. Icon to display above media content.
     */
    icon: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageImageResponse;
    /**
     * Optional. Image to display above media content.
     */
    largeImage: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageImageResponse;
    /**
     * Name of media card.
     */
    name: string;
}

/**
 * The quick replies response message.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageQuickRepliesResponse {
    /**
     * Optional. The collection of quick replies.
     */
    quickReplies: string[];
    /**
     * Optional. The title of the collection of quick replies.
     */
    title: string;
}

/**
 * Rich Business Messaging (RBM) Media displayed in Cards The following media-types are currently supported: Image Types * image/jpeg * image/jpg' * image/gif * image/png Video Types * video/h263 * video/m4v * video/mp4 * video/mpeg * video/mpeg4 * video/webm
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMediaResponse {
    /**
     * Publicly reachable URI of the file. The RBM platform determines the MIME type of the file from the content-type field in the HTTP headers when the platform fetches the file. The content-type field must be present and accurate in the HTTP response from the URL.
     */
    fileUri: string;
    /**
     * Required for cards with vertical orientation. The height of the media within a rich card with a vertical layout. For a standalone card with horizontal layout, height is not customizable, and this field is ignored.
     */
    height: string;
    /**
     * Optional. Publicly reachable URI of the thumbnail.If you don't provide a thumbnail URI, the RBM platform displays a blank placeholder thumbnail until the user's device downloads the file. Depending on the user's setting, the file may not download automatically and may require the user to tap a download button.
     */
    thumbnailUri: string;
}

/**
 * Rich Business Messaging (RBM) Card content
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentResponse {
    /**
     * Optional. Description of the card (at most 2000 bytes). At least one of the title, description or media must be set.
     */
    description: string;
    /**
     * Optional. However at least one of the title, description or media must be set. Media (image, GIF or a video) to include in the card.
     */
    media: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMediaResponse;
    /**
     * Optional. List of suggestions to include in the card.
     */
    suggestions: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestionResponse[];
    /**
     * Optional. Title of the card (at most 200 bytes). At least one of the title, description or media must be set.
     */
    title: string;
}

/**
 * Carousel Rich Business Messaging (RBM) rich card. Rich cards allow you to respond to users with more vivid content, e.g. with media and suggestions. If you want to show a single card with more control over the layout, please use RbmStandaloneCard instead.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCardResponse {
    /**
     * The cards in the carousel. A carousel must have at least 2 cards and at most 10.
     */
    cardContents: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentResponse[];
    /**
     * The width of the cards in the carousel.
     */
    cardWidth: string;
}

/**
 * Standalone Rich Business Messaging (RBM) rich card. Rich cards allow you to respond to users with more vivid content, e.g. with media and suggestions. You can group multiple rich cards into one using RbmCarouselCard but carousel cards will give you less control over the card layout.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardResponse {
    /**
     * Card content.
     */
    cardContent: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentResponse;
    /**
     * Orientation of the card.
     */
    cardOrientation: string;
    /**
     * Required if orientation is horizontal. Image preview alignment for standalone cards with horizontal layout.
     */
    thumbnailImageAlignment: string;
}

/**
 * Opens the user's default dialer app with the specified phone number but does not dial automatically.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDialResponse {
    /**
     * The phone number to fill in the default dialer app. This field should be in [E.164](https://en.wikipedia.org/wiki/E.164) format. An example of a correctly formatted phone number: +15556767888.
     */
    phoneNumber: string;
}

/**
 * Opens the user's default web browser app to the specified uri If the user has an app installed that is registered as the default handler for the URL, then this app will be opened instead, and its icon will be used in the suggested action UI.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUriResponse {
    /**
     * The uri to open on the user device
     */
    uri: string;
}

/**
 * Opens the device's location chooser so the user can pick a location to send back to the agent.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionShareLocationResponse {
}

/**
 * Rich Business Messaging (RBM) suggested client-side action that the user can choose from the card.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionResponse {
    /**
     * Suggested client side action: Dial a phone number
     */
    dial: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDialResponse;
    /**
     * Suggested client side action: Open a URI on device
     */
    openUrl: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUriResponse;
    /**
     * Opaque payload that the Dialogflow receives in a user event when the user taps the suggested action. This data will be also forwarded to webhook to allow performing custom business logic.
     */
    postbackData: string;
    /**
     * Suggested client side action: Share user location
     */
    shareLocation: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionShareLocationResponse;
    /**
     * Text to display alongside the action.
     */
    text: string;
}

/**
 * Rich Business Messaging (RBM) suggested reply that the user can click instead of typing in their own response.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedReplyResponse {
    /**
     * Opaque payload that the Dialogflow receives in a user event when the user taps the suggested reply. This data will be also forwarded to webhook to allow performing custom business logic.
     */
    postbackData: string;
    /**
     * Suggested reply text.
     */
    text: string;
}

/**
 * Rich Business Messaging (RBM) suggestion. Suggestions allow user to easily select/click a predefined response or perform an action (like opening a web uri).
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestionResponse {
    /**
     * Predefined client side actions that user can choose
     */
    action: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionResponse;
    /**
     * Predefined replies for user to select instead of typing
     */
    reply: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedReplyResponse;
}

/**
 * Rich Business Messaging (RBM) text response with suggestions.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageRbmTextResponse {
    /**
     * Optional. One or more suggestions to show to the user.
     */
    rbmSuggestion: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestionResponse[];
    /**
     * Text sent and displayed to the user.
     */
    text: string;
}

/**
 * Corresponds to the `Response` field in the Dialogflow console.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageResponse {
    /**
     * Displays a basic card for Actions on Google.
     */
    basicCard: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageBasicCardResponse;
    /**
     * Browse carousel card for Actions on Google.
     */
    browseCarouselCard: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardResponse;
    /**
     * Displays a card.
     */
    card: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageCardResponse;
    /**
     * Displays a carousel card for Actions on Google.
     */
    carouselSelect: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectResponse;
    /**
     * Displays an image.
     */
    image: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageImageResponse;
    /**
     * Displays a link out suggestion chip for Actions on Google.
     */
    linkOutSuggestion: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageLinkOutSuggestionResponse;
    /**
     * Displays a list card for Actions on Google.
     */
    listSelect: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageListSelectResponse;
    /**
     * The media content card for Actions on Google.
     */
    mediaContent: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponse;
    /**
     * A custom platform-specific response.
     */
    payload: {[key: string]: string};
    /**
     * Optional. The platform that this message is intended for.
     */
    platform: string;
    /**
     * Displays quick replies.
     */
    quickReplies: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageQuickRepliesResponse;
    /**
     * Rich Business Messaging (RBM) carousel rich card response.
     */
    rbmCarouselRichCard: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCardResponse;
    /**
     * Standalone Rich Business Messaging (RBM) rich card response.
     */
    rbmStandaloneRichCard: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardResponse;
    /**
     * Rich Business Messaging (RBM) text response. RBM allows businesses to send enriched and branded versions of SMS. See https://jibe.google.com/business-messaging.
     */
    rbmText: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageRbmTextResponse;
    /**
     * Returns a voice or text-only response for Actions on Google.
     */
    simpleResponses: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageSimpleResponsesResponse;
    /**
     * Displays suggestion chips for Actions on Google.
     */
    suggestions: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageSuggestionsResponse;
    /**
     * Table card for Actions on Google.
     */
    tableCard: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageTableCardResponse;
    /**
     * Plays audio from a file in Telephony Gateway.
     */
    telephonyPlayAudio: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageTelephonyPlayAudioResponse;
    /**
     * Synthesizes speech in Telephony Gateway.
     */
    telephonySynthesizeSpeech: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageTelephonySynthesizeSpeechResponse;
    /**
     * Transfers the call in Telephony Gateway.
     */
    telephonyTransferCall: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageTelephonyTransferCallResponse;
    /**
     * Returns a text response.
     */
    text: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageTextResponse;
}

/**
 * Additional info about the select item for when it is triggered in a dialog.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfoResponse {
    /**
     * A unique key that will be sent back to the agent if this response is given.
     */
    key: string;
    /**
     * Optional. A list of synonyms that can also be used to trigger this item in dialog.
     */
    synonyms: string[];
}

/**
 * The simple response message containing speech or text.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageSimpleResponseResponse {
    /**
     * Optional. The text to display.
     */
    displayText: string;
    /**
     * One of text_to_speech or ssml must be provided. Structured spoken response to the user in the SSML format. Mutually exclusive with text_to_speech.
     */
    ssml: string;
    /**
     * One of text_to_speech or ssml must be provided. The plain text of the speech output. Mutually exclusive with ssml.
     */
    textToSpeech: string;
}

/**
 * The collection of simple response candidates. This message in `QueryResult.fulfillment_messages` and `WebhookResponse.fulfillment_messages` should contain only one `SimpleResponse`.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageSimpleResponsesResponse {
    /**
     * The list of simple responses.
     */
    simpleResponses: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageSimpleResponseResponse[];
}

/**
 * The suggestion chip message that the user can tap to quickly post a reply to the conversation.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageSuggestionResponse {
    /**
     * The text shown the in the suggestion chip.
     */
    title: string;
}

/**
 * The collection of suggestions.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageSuggestionsResponse {
    /**
     * The list of suggested replies.
     */
    suggestions: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageSuggestionResponse[];
}

/**
 * Cell of TableCardRow.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageTableCardCellResponse {
    /**
     * Text in this cell.
     */
    text: string;
}

/**
 * Table card for Actions on Google.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageTableCardResponse {
    /**
     * Optional. List of buttons for the card.
     */
    buttons: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonResponse[];
    /**
     * Optional. Display properties for the columns in this table.
     */
    columnProperties: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageColumnPropertiesResponse[];
    /**
     * Optional. Image which should be displayed on the card.
     */
    image: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageImageResponse;
    /**
     * Optional. Rows in this table of data.
     */
    rows: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageTableCardRowResponse[];
    /**
     * Optional. Subtitle to the title.
     */
    subtitle: string;
    /**
     * Title of the card.
     */
    title: string;
}

/**
 * Row of TableCard.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageTableCardRowResponse {
    /**
     * Optional. List of cells that make up this row.
     */
    cells: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentMessageTableCardCellResponse[];
    /**
     * Optional. Whether to add a visual divider after this row.
     */
    dividerAfter: boolean;
}

/**
 * Plays audio from a file in Telephony Gateway.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageTelephonyPlayAudioResponse {
    /**
     * URI to a Google Cloud Storage object containing the audio to play, e.g., "gs://bucket/object". The object must contain a single channel (mono) of linear PCM audio (2 bytes / sample) at 8kHz. This object must be readable by the `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` service account where is the number of the Telephony Gateway project (usually the same as the Dialogflow agent project). If the Google Cloud Storage bucket is in the Telephony Gateway project, this permission is added by default when enabling the Dialogflow V2 API. For audio from other sources, consider using the `TelephonySynthesizeSpeech` message with SSML.
     */
    audioUri: string;
}

/**
 * Synthesizes speech and plays back the synthesized audio to the caller in Telephony Gateway. Telephony Gateway takes the synthesizer settings from `DetectIntentResponse.output_audio_config` which can either be set at request-level or can come from the agent-level synthesizer config.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageTelephonySynthesizeSpeechResponse {
    /**
     * The SSML to be synthesized. For more information, see [SSML](https://developers.google.com/actions/reference/ssml).
     */
    ssml: string;
    /**
     * The raw text to be synthesized.
     */
    text: string;
}

/**
 * Transfers the call in Telephony Gateway.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageTelephonyTransferCallResponse {
    /**
     * The phone number to transfer the call to in [E.164 format](https://en.wikipedia.org/wiki/E.164). We currently only allow transferring to US numbers (+1xxxyyyzzzz).
     */
    phoneNumber: string;
}

/**
 * The text response message.
 */
export interface GoogleCloudDialogflowV2beta1IntentMessageTextResponse {
    /**
     * Optional. The collection of the agent's responses.
     */
    text: string[];
}

/**
 * Represents intent parameters.
 */
export interface GoogleCloudDialogflowV2beta1IntentParameterResponse {
    /**
     * Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`.
     */
    defaultValue: string;
    /**
     * The name of the parameter.
     */
    displayName: string;
    /**
     * Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided.
     */
    entityTypeDisplayName: string;
    /**
     * Optional. Indicates whether the parameter represents a list of values.
     */
    isList: boolean;
    /**
     * Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value.
     */
    mandatory: boolean;
    /**
     * The unique identifier of this parameter.
     */
    name: string;
    /**
     * Optional. The collection of prompts that the agent can present to the user in order to collect a value for the parameter.
     */
    prompts: string[];
    /**
     * Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`.
     */
    value: string;
}

/**
 * Represents a part of a training phrase.
 */
export interface GoogleCloudDialogflowV2beta1IntentTrainingPhrasePartResponse {
    /**
     * Optional. The parameter name for the value extracted from the annotated part of the example. This field is required for annotated parts of the training phrase.
     */
    alias: string;
    /**
     * Optional. The entity type name prefixed with `@`. This field is required for annotated parts of the training phrase.
     */
    entityType: string;
    /**
     * The text for this part.
     */
    text: string;
    /**
     * Optional. Indicates whether the text was manually annotated. This field is set to true when the Dialogflow Console is used to manually annotate the part. When creating an annotated part with the API, you must set this to true.
     */
    userDefined: boolean;
}

/**
 * Represents an example that the agent is trained on.
 */
export interface GoogleCloudDialogflowV2beta1IntentTrainingPhraseResponse {
    /**
     * The unique identifier of this training phrase.
     */
    name: string;
    /**
     * The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `entity_type`, `alias`, and `user_defined` fields are all set.
     */
    parts: outputs.dialogflow.v2beta1.GoogleCloudDialogflowV2beta1IntentTrainingPhrasePartResponse[];
    /**
     * Optional. Indicates how many times this example was added to the intent. Each time a developer adds an existing sample by editing an intent or training, this counter is increased.
     */
    timesAddedCount: number;
    /**
     * The type of the training phrase.
     */
    type: string;
}

/**
 * Defines logging behavior for conversation lifecycle events.
 */
export interface GoogleCloudDialogflowV2beta1LoggingConfigResponse {
    /**
     * Whether to log conversation events like CONVERSATION_STARTED to Stackdriver in the conversation project as JSON format ConversationEvent protos.
     */
    enableStackdriverLogging: boolean;
}

/**
 * Defines notification behavior.
 */
export interface GoogleCloudDialogflowV2beta1NotificationConfigResponse {
    /**
     * Format of message.
     */
    messageFormat: string;
    /**
     * Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos. For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow Service Agent` role in the topic project. For chat integration to receive notification, make sure API caller has been granted the `Dialogflow Service Agent` role for the topic. Format: `projects//locations//topics/`.
     */
    topic: string;
}

/**
 * Configures speech transcription for ConversationProfile.
 */
export interface GoogleCloudDialogflowV2beta1SpeechToTextConfigResponse {
    /**
     * The speech model used in speech to text. `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE` will be treated as `USE_ENHANCED`. It can be overridden in AnalyzeContentRequest and StreamingAnalyzeContentRequest request. If enhanced model variant is specified and an enhanced version of the specified model for the language does not exist, then it would emit an error.
     */
    speechModelVariant: string;
}

/**
 * The type of Human Agent Assistant API suggestion to perform, and the maximum number of results to return for that type. Multiple `Feature` objects can be specified in the `features` list.
 */
export interface GoogleCloudDialogflowV2beta1SuggestionFeatureResponse {
    /**
     * Type of Human Agent Assistant API feature to request.
     */
    type: string;
}

/**
 * Instructs the speech synthesizer on how to generate the output audio content.
 */
export interface GoogleCloudDialogflowV2beta1TextToSpeechSettingsResponse {
    /**
     * Optional. Indicates whether text to speech is enabled. Even when this field is false, other settings in this proto are still retained.
     */
    enableTextToSpeech: boolean;
    /**
     * Audio encoding of the synthesized audio content.
     */
    outputAudioEncoding: string;
    /**
     * Optional. The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality).
     */
    sampleRateHertz: number;
    /**
     * Optional. Configuration of how speech should be synthesized, mapping from language (https://cloud.google.com/dialogflow/docs/reference/language) to SynthesizeSpeechConfig.
     */
    synthesizeSpeechConfigs: {[key: string]: string};
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface GoogleRpcStatusResponse {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code: number;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details: {[key: string]: string}[];
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message: string;
}

