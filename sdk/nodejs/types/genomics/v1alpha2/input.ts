// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * A Google Compute Engine disk resource specification.
 */
export interface DiskArgs {
    /**
     * Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
     *
     * @deprecated Deprecated. Disks created by the Pipelines API will be deleted at the end of the pipeline run, regardless of what this field is set to.
     */
    autoDelete?: pulumi.Input<boolean>;
    /**
     * Required at create time and cannot be overridden at run time. Specifies the path in the docker container where files on this disk should be located. For example, if `mountPoint` is `/mnt/disk`, and the parameter has `localPath` `inputs/file.txt`, the docker container can access the data at `/mnt/disk/inputs/file.txt`.
     */
    mountPoint?: pulumi.Input<string>;
    /**
     * The name of the disk that can be used in the pipeline parameters. Must be 1 - 63 characters. The name "boot" is reserved for system use.
     */
    name: pulumi.Input<string>;
    /**
     * Specifies how a sourced-base persistent disk will be mounted. See https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances for more details. Can only be set at create time.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * The size of the disk. Defaults to 500 (GB). This field is not applicable for local SSD.
     */
    sizeGb?: pulumi.Input<number>;
    /**
     * The full or partial URL of the persistent disk to attach. See https://cloud.google.com/compute/docs/reference/latest/instances#resource and https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots for more details.
     */
    source?: pulumi.Input<string>;
    /**
     * The type of the disk to create.
     */
    type: pulumi.Input<enums.genomics.v1alpha2.DiskType>;
}

/**
 * The Docker execuctor specification.
 */
export interface DockerExecutorArgs {
    /**
     * The command or newline delimited script to run. The command string will be executed within a bash shell. If the command exits with a non-zero exit code, output parameter de-localization will be skipped and the pipeline operation's `error` field will be populated. Maximum command string length is 16384.
     */
    cmd: pulumi.Input<string>;
    /**
     * Image name from either Docker Hub or Google Container Registry. Users that run pipelines must have READ access to the image.
     */
    imageName: pulumi.Input<string>;
}

/**
 * LocalCopy defines how a remote file should be copied to and from the VM.
 */
export interface LocalCopyArgs {
    /**
     * The name of the disk where this parameter is located. Can be the name of one of the disks specified in the Resources field, or "boot", which represents the Docker instance's boot disk and has a mount point of `/`.
     */
    disk: pulumi.Input<string>;
    /**
     * The path within the user's docker container where this input should be localized to and from, relative to the specified disk's mount point. For example: file.txt,
     */
    path: pulumi.Input<string>;
}

/**
 * Parameters facilitate setting and delivering data into the pipeline's execution environment. They are defined at create time, with optional defaults, and can be overridden at run time. If `localCopy` is unset, then the parameter specifies a string that is passed as-is into the pipeline, as the value of the environment variable with the given name. A default value can be optionally specified at create time. The default can be overridden at run time using the inputs map. If no default is given, a value must be supplied at runtime. If `localCopy` is defined, then the parameter specifies a data source or sink, both in Google Cloud Storage and on the Docker container where the pipeline computation is run. The service account associated with the Pipeline (by default the project's Compute Engine service account) must have access to the Google Cloud Storage paths. At run time, the Google Cloud Storage paths can be overridden if a default was provided at create time, or must be set otherwise. The pipeline runner should add a key/value pair to either the inputs or outputs map. The indicated data copies will be carried out before/after pipeline execution, just as if the corresponding arguments were provided to `gsutil cp`. For example: Given the following `PipelineParameter`, specified in the `inputParameters` list: ``` {name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}} ``` where `disk` is defined in the `PipelineResources` object as: ``` {name: "pd1", mountPoint: "/mnt/disk/"} ``` We create a disk named `pd1`, mount it on the host VM, and map `/mnt/pd1` to `/mnt/disk` in the docker container. At runtime, an entry for `input_file` would be required in the inputs map, such as: ``` inputs["input_file"] = "gs://my-bucket/bar.txt" ``` This would generate the following gsutil call: ``` gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt ``` The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the Docker container. Acceptable paths are: Google Cloud storage pathLocal path file file glob directory For outputs, the direction of the copy is reversed: ``` gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt ``` Acceptable paths are: Local pathGoogle Cloud Storage path file file file directory - directory must already exist glob directory - directory will be created if it doesn't exist One restriction due to docker limitations, is that for outputs that are found on the boot disk, the local path cannot be a glob and must be a file.
 */
export interface PipelineParameterArgs {
    /**
     * The default value for this parameter. Can be overridden at runtime. If `localCopy` is present, then this must be a Google Cloud Storage path beginning with `gs://`.
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * Human-readable description.
     */
    description?: pulumi.Input<string>;
    /**
     * If present, this parameter is marked for copying to and from the VM. `LocalCopy` indicates where on the VM the file should be. The value given to this parameter (either at runtime or using `defaultValue`) must be the remote path where the file should be.
     */
    localCopy?: pulumi.Input<inputs.genomics.v1alpha2.LocalCopyArgs>;
    /**
     * Name of the parameter - the pipeline runner uses this string as the key to the input and output maps in RunPipeline.
     */
    name: pulumi.Input<string>;
}

/**
 * The system resources for the pipeline run.
 */
export interface PipelineResourcesArgs {
    /**
     * Optional. The number of accelerators of the specified type to attach. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit.
     */
    acceleratorCount?: pulumi.Input<string>;
    /**
     * Optional. The Compute Engine defined accelerator type. By specifying this parameter, you will download and install the following third-party software onto your managed Compute Engine instances: NVIDIA® Tesla® drivers and NVIDIA® CUDA toolkit. Please see https://cloud.google.com/compute/docs/gpus/ for a list of available accelerator types.
     */
    acceleratorType?: pulumi.Input<string>;
    /**
     * The size of the boot disk. Defaults to 10 (GB).
     */
    bootDiskSizeGb?: pulumi.Input<number>;
    /**
     * Disks to attach.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.genomics.v1alpha2.DiskArgs>[]>;
    /**
     * The minimum number of cores to use. Defaults to 1.
     */
    minimumCpuCores?: pulumi.Input<number>;
    /**
     * The minimum amount of RAM to use. Defaults to 3.75 (GB)
     */
    minimumRamGb?: pulumi.Input<number>;
    /**
     * Whether to assign an external IP to the instance. This is an experimental feature that may go away. Defaults to false. Corresponds to `--no_address` flag for [gcloud compute instances create] (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create). In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time. If you need to ssh into a private IP VM for debugging, you can ssh to a public VM and then ssh into the private VM's Internal IP. If noAddress is set, this pipeline run may only load docker images from Google Container Registry and not Docker Hub. Before using this, you must [configure access to Google services from internal IPs](https://cloud.google.com/compute/docs/configure-private-google-access#configuring_access_to_google_services_from_internal_ips).
     */
    noAddress?: pulumi.Input<boolean>;
    /**
     * Whether to use preemptible VMs. Defaults to `false`. In order to use this, must be true for both create time and run time. Cannot be true at run time if false at create time.
     */
    preemptible?: pulumi.Input<boolean>;
    /**
     * List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

