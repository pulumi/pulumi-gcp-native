// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration for API handlers.
 */
export interface ApiConfigHandlerResponse {
    /**
     * Action to take when users access resources that require authentication. Defaults to redirect.
     */
    authFailAction: string;
    /**
     * Level of login required to access this resource. Defaults to optional.
     */
    login: string;
    /**
     * Path to the script from the application root directory.
     */
    script: string;
    /**
     * Security (HTTPS) enforcement for this URL.
     */
    securityLevel: string;
    /**
     * URL to serve the endpoint at.
     */
    url: string;
}

/**
 * Uses Google Cloud Endpoints to handle requests.
 */
export interface ApiEndpointHandlerResponse {
    /**
     * Path to the script from the application root directory.
     */
    scriptPath: string;
}

/**
 * Automatic scaling is based on request rate, response latencies, and other application metrics.
 */
export interface AutomaticScalingResponse {
    /**
     * The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
     */
    coolDownPeriod: string;
    /**
     * Target scaling by CPU usage.
     */
    cpuUtilization: outputs.appengine.v1.CpuUtilizationResponse;
    /**
     * Target scaling by disk usage.
     */
    diskUtilization: outputs.appengine.v1.DiskUtilizationResponse;
    /**
     * Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
     */
    maxConcurrentRequests: number;
    /**
     * Maximum number of idle instances that should be maintained for this version.
     */
    maxIdleInstances: number;
    /**
     * Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     */
    maxPendingLatency: string;
    /**
     * Maximum number of instances that should be started to handle requests for this version.
     */
    maxTotalInstances: number;
    /**
     * Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     */
    minIdleInstances: number;
    /**
     * Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     */
    minPendingLatency: string;
    /**
     * Minimum number of running instances that should be maintained for this version.
     */
    minTotalInstances: number;
    /**
     * Target scaling by network usage.
     */
    networkUtilization: outputs.appengine.v1.NetworkUtilizationResponse;
    /**
     * Target scaling by request utilization.
     */
    requestUtilization: outputs.appengine.v1.RequestUtilizationResponse;
    /**
     * Scheduler settings for standard environment.
     */
    standardSchedulerSettings: outputs.appengine.v1.StandardSchedulerSettingsResponse;
}

/**
 * A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
 */
export interface BasicScalingResponse {
    /**
     * Duration of time after the last request that an instance must wait before the instance is shut down.
     */
    idleTimeout: string;
    /**
     * Maximum number of instances to create for this version.
     */
    maxInstances: number;
}

/**
 * An SSL certificate obtained from a certificate authority.
 */
export interface CertificateRawDataResponse {
    /**
     * Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
     */
    privateKey: string;
    /**
     * PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- 
     */
    publicCertificate: string;
}

/**
 * Options for the build operations performed as a part of the version deployment. Only applicable for App Engine flexible environment when creating a version using source code directly.
 */
export interface CloudBuildOptionsResponse {
    /**
     * Path to the yaml file used in deployment, used to determine runtime configuration details.Required for flexible environment builds.See https://cloud.google.com/appengine/docs/standard/python/config/appref for more details.
     */
    appYamlPath: string;
    /**
     * The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
     */
    cloudBuildTimeout: string;
}

/**
 * Docker image that is used to create a container and start a VM instance for the version that you deploy. Only applicable for instances running in the App Engine flexible environment.
 */
export interface ContainerInfoResponse {
    /**
     * URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
     */
    image: string;
}

/**
 * Target scaling by CPU usage.
 */
export interface CpuUtilizationResponse {
    /**
     * Period of time over which CPU utilization is calculated.
     */
    aggregationWindowLength: string;
    /**
     * Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
     */
    targetUtilization: number;
}

/**
 * Code and application artifacts used to deploy a version to App Engine.
 */
export interface DeploymentResponse {
    /**
     * Options for any Google Cloud Build builds created as a part of this deployment.These options will only be used if a new build is created, such as when deploying to the App Engine flexible environment using files or zip.
     */
    cloudBuildOptions: outputs.appengine.v1.CloudBuildOptionsResponse;
    /**
     * The Docker image for the container that runs the version. Only applicable for instances running in the App Engine flexible environment.
     */
    container: outputs.appengine.v1.ContainerInfoResponse;
    /**
     * Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
     */
    files: {[key: string]: string};
    /**
     * The zip file for this deployment, if this is a zip deployment.
     */
    zip: outputs.appengine.v1.ZipInfoResponse;
}

/**
 * Target scaling by disk usage. Only applicable in the App Engine flexible environment.
 */
export interface DiskUtilizationResponse {
    /**
     * Target bytes read per second.
     */
    targetReadBytesPerSecond: number;
    /**
     * Target ops read per seconds.
     */
    targetReadOpsPerSecond: number;
    /**
     * Target bytes written per second.
     */
    targetWriteBytesPerSecond: number;
    /**
     * Target ops written per second.
     */
    targetWriteOpsPerSecond: number;
}

/**
 * Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration. The Endpoints API Service provides tooling for serving Open API and gRPC endpoints via an NGINX proxy. Only valid for App Engine Flexible environment deployments.The fields here refer to the name and configuration ID of a "service" resource in the Service Management API (https://cloud.google.com/service-management/overview).
 */
export interface EndpointsApiServiceResponse {
    /**
     * Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".By default, the rollout strategy for Endpoints is RolloutStrategy.FIXED. This means that Endpoints starts up with a particular configuration ID. When a new configuration is rolled out, Endpoints must be given the new configuration ID. The config_id field is used to give the configuration ID and is required in this case.Endpoints also has a rollout strategy called RolloutStrategy.MANAGED. When using this, Endpoints fetches the latest configuration and does not need the configuration ID. In this case, config_id must be omitted.
     */
    configId: string;
    /**
     * Enable or disable trace sampling. By default, this is set to false for enabled.
     */
    disableTraceSampling: boolean;
    /**
     * Endpoints service name which is the name of the "service" resource in the Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
     */
    name: string;
    /**
     * Endpoints rollout strategy. If FIXED, config_id must be specified. If MANAGED, config_id must be omitted.
     */
    rolloutStrategy: string;
}

/**
 * The entrypoint for the application.
 */
export interface EntrypointResponse {
    /**
     * The format should be a shell command that can be fed to bash -c.
     */
    shell: string;
}

/**
 * Custom static error page to be served when an error occurs.
 */
export interface ErrorHandlerResponse {
    /**
     * Error condition this handler applies to.
     */
    errorCode: string;
    /**
     * MIME type of file. Defaults to text/html.
     */
    mimeType: string;
    /**
     * Static file content to be served for this error.
     */
    staticFile: string;
}

/**
 * The feature specific settings to be used in the application. These define behaviors that are user configurable.
 */
export interface FeatureSettingsResponse {
    /**
     * Boolean value indicating if split health checks should be used instead of the legacy health checks. At an app.yaml level, this means defaulting to 'readiness_check' and 'liveness_check' values instead of 'health_check' ones. Once the legacy 'health_check' behavior is deprecated, and this value is always true, this setting can be removed.
     */
    splitHealthChecks: boolean;
    /**
     * If true, use Container-Optimized OS (https://cloud.google.com/container-optimized-os/) base image for VMs, rather than a base Debian image.
     */
    useContainerOptimizedOs: boolean;
}

/**
 * Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment.
 */
export interface HealthCheckResponse {
    /**
     * Interval between health checks.
     */
    checkInterval: string;
    /**
     * Whether to explicitly disable health checks for this instance.
     */
    disableHealthCheck: boolean;
    /**
     * Number of consecutive successful health checks required before receiving traffic.
     */
    healthyThreshold: number;
    /**
     * Host header to send when performing an HTTP health check. Example: "myapp.appspot.com"
     */
    host: string;
    /**
     * Number of consecutive failed health checks required before an instance is restarted.
     */
    restartThreshold: number;
    /**
     * Time before the health check is considered failed.
     */
    timeout: string;
    /**
     * Number of consecutive failed health checks required before removing traffic.
     */
    unhealthyThreshold: number;
}

/**
 * Identity-Aware Proxy
 */
export interface IdentityAwareProxyResponse {
    /**
     * Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.
     */
    enabled: boolean;
    /**
     * OAuth2 client ID to use for the authentication flow.
     */
    oauth2ClientId: string;
    /**
     * OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly
     */
    oauth2ClientSecret: string;
    /**
     * Hex-encoded SHA-256 hash of the client secret.
     */
    oauth2ClientSecretSha256: string;
}

/**
 * Third-party Python runtime library that is required by the application.
 */
export interface LibraryResponse {
    /**
     * Name of the library. Example: "django".
     */
    name: string;
    /**
     * Version of the library to select, or "latest".
     */
    version: string;
}

/**
 * Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
 */
export interface LivenessCheckResponse {
    /**
     * Interval between health checks.
     */
    checkInterval: string;
    /**
     * Number of consecutive failed checks required before considering the VM unhealthy.
     */
    failureThreshold: number;
    /**
     * Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
     */
    host: string;
    /**
     * The initial delay before starting to execute the checks.
     */
    initialDelay: string;
    /**
     * The request path.
     */
    path: string;
    /**
     * Number of consecutive successful checks required before considering the VM healthy.
     */
    successThreshold: number;
    /**
     * Time before the check is considered failed.
     */
    timeout: string;
}

/**
 * A certificate managed by App Engine.
 */
export interface ManagedCertificateResponse {
    /**
     * Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.
     */
    lastRenewalTime: string;
    /**
     * Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.
     */
    status: string;
}

/**
 * A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
 */
export interface ManualScalingResponse {
    /**
     * Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.
     */
    instances: number;
}

/**
 * Extra network settings. Only applicable in the App Engine flexible environment.
 */
export interface NetworkResponse {
    /**
     * List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.
     */
    forwardedPorts: string[];
    /**
     * The IP mode for instances. Only applicable in the App Engine flexible environment.
     */
    instanceIpMode: string;
    /**
     * Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.
     */
    instanceTag: string;
    /**
     * Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.
     */
    name: string;
    /**
     * Enable session affinity. Only applicable in the App Engine flexible environment.
     */
    sessionAffinity: boolean;
    /**
     * Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
     */
    subnetworkName: string;
}

/**
 * Target scaling by network usage. Only applicable in the App Engine flexible environment.
 */
export interface NetworkUtilizationResponse {
    /**
     * Target bytes received per second.
     */
    targetReceivedBytesPerSecond: number;
    /**
     * Target packets received per second.
     */
    targetReceivedPacketsPerSecond: number;
    /**
     * Target bytes sent per second.
     */
    targetSentBytesPerSecond: number;
    /**
     * Target packets sent per second.
     */
    targetSentPacketsPerSecond: number;
}

/**
 * Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.
 */
export interface ReadinessCheckResponse {
    /**
     * A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
     */
    appStartTimeout: string;
    /**
     * Interval between health checks.
     */
    checkInterval: string;
    /**
     * Number of consecutive failed checks required before removing traffic.
     */
    failureThreshold: number;
    /**
     * Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
     */
    host: string;
    /**
     * The request path.
     */
    path: string;
    /**
     * Number of consecutive successful checks required before receiving traffic.
     */
    successThreshold: number;
    /**
     * Time before the check is considered failed.
     */
    timeout: string;
}

/**
 * Target scaling by request utilization. Only applicable in the App Engine flexible environment.
 */
export interface RequestUtilizationResponse {
    /**
     * Target number of concurrent requests.
     */
    targetConcurrentRequests: number;
    /**
     * Target requests per second.
     */
    targetRequestCountPerSecond: number;
}

/**
 * A DNS resource record.
 */
export interface ResourceRecordResponse {
    /**
     * Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
     */
    name: string;
    /**
     * Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
     */
    rrdata: string;
    /**
     * Resource record type. Example: AAAA.
     */
    type: string;
}

/**
 * Machine resources for a version.
 */
export interface ResourcesResponse {
    /**
     * Number of CPU cores needed.
     */
    cpu: number;
    /**
     * Disk size (GB) needed.
     */
    diskGb: number;
    /**
     * The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
     */
    kmsKeyReference: string;
    /**
     * Memory (GB) needed.
     */
    memoryGb: number;
    /**
     * User specified volumes.
     */
    volumes: outputs.appengine.v1.VolumeResponse[];
}

/**
 * Executes a script to handle the request that matches the URL pattern.
 */
export interface ScriptHandlerResponse {
    /**
     * Path to the script from the application root directory.
     */
    scriptPath: string;
}

/**
 * SSL configuration for a DomainMapping resource.
 */
export interface SslSettingsResponse {
    /**
     * ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
     */
    certificateId: string;
    /**
     * ID of the managed AuthorizedCertificate resource currently being provisioned, if applicable. Until the new managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the provisioning process completes, the certificate_id field will reflect the new managed certificate and this field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the certificate_id field with an UpdateDomainMappingRequest.
     */
    pendingManagedCertificateId: string;
    /**
     * SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
     */
    sslManagementType: string;
}

/**
 * Scheduler settings for standard environment.
 */
export interface StandardSchedulerSettingsResponse {
    /**
     * Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
     */
    maxInstances: number;
    /**
     * Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
     */
    minInstances: number;
    /**
     * Target CPU utilization ratio to maintain when scaling.
     */
    targetCpuUtilization: number;
    /**
     * Target throughput utilization ratio to maintain when scaling
     */
    targetThroughputUtilization: number;
}

/**
 * Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
 */
export interface StaticFilesHandlerResponse {
    /**
     * Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
     */
    applicationReadable: boolean;
    /**
     * Time a static file served by this handler should be cached by web proxies and browsers.
     */
    expiration: string;
    /**
     * HTTP headers to use for all responses from these URLs.
     */
    httpHeaders: {[key: string]: string};
    /**
     * MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.
     */
    mimeType: string;
    /**
     * Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
     */
    path: string;
    /**
     * Whether this handler should match the request if the file referenced by the handler does not exist.
     */
    requireMatchingFile: boolean;
    /**
     * Regular expression that matches the file paths for all files that should be referenced by this handler.
     */
    uploadPathRegex: string;
}

/**
 * Rules to match an HTTP request and dispatch that request to a service.
 */
export interface UrlDispatchRuleResponse {
    /**
     * Domain name to match against. The wildcard "*" is supported if specified before a period: "*.".Defaults to matching all domains: "*".
     */
    domain: string;
    /**
     * Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.
     */
    path: string;
    /**
     * Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.
     */
    service: string;
}

/**
 * URL pattern and description of how the URL should be handled. App Engine can handle URLs by executing application code or by serving static files uploaded with the version, such as images, CSS, or JavaScript.
 */
export interface UrlMapResponse {
    /**
     * Uses API Endpoints to handle requests.
     */
    apiEndpoint: outputs.appengine.v1.ApiEndpointHandlerResponse;
    /**
     * Action to take when users access resources that require authentication. Defaults to redirect.
     */
    authFailAction: string;
    /**
     * Level of login required to access this resource. Not supported for Node.js in the App Engine standard environment.
     */
    login: string;
    /**
     * 30x code to use when performing redirects for the secure field. Defaults to 302.
     */
    redirectHttpResponseCode: string;
    /**
     * Executes a script to handle the requests that match this URL pattern. Only the auto value is supported for Node.js in the App Engine standard environment, for example "script": "auto".
     */
    script: outputs.appengine.v1.ScriptHandlerResponse;
    /**
     * Security (HTTPS) enforcement for this URL.
     */
    securityLevel: string;
    /**
     * Returns the contents of a file, such as an image, as the response.
     */
    staticFiles: outputs.appengine.v1.StaticFilesHandlerResponse;
    /**
     * URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
     */
    urlRegex: string;
}

/**
 * Volumes mounted within the app container. Only applicable in the App Engine flexible environment.
 */
export interface VolumeResponse {
    /**
     * Unique name for the volume.
     */
    name: string;
    /**
     * Volume size in gigabytes.
     */
    sizeGb: number;
    /**
     * Underlying volume type, e.g. 'tmpfs'.
     */
    volumeType: string;
}

/**
 * VPC access connector specification.
 */
export interface VpcAccessConnectorResponse {
    /**
     * The egress setting for the connector, controlling what traffic is diverted through it.
     */
    egressSetting: string;
    /**
     * Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.
     */
    name: string;
}

/**
 * The zip file information for a zip deployment.
 */
export interface ZipInfoResponse {
    /**
     * An estimate of the number of files in a zip for a zip deployment. If set, must be greater than or equal to the actual number of files. Used for optimizing performance; if not provided, deployment may be slow.
     */
    filesCount: number;
    /**
     * URL of the zip file to deploy from. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
     */
    sourceUrl: string;
}

