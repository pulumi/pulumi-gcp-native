// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Identifies an account and how to log into it.
 */
export interface AccountResponse {
    /**
     * An automatic google login account.
     */
    googleAuto: outputs.testing.v1.GoogleAutoResponse;
}

/**
 * A list of Android device configurations in which the test is to be executed.
 */
export interface AndroidDeviceListResponse {
    /**
     * A list of Android devices.
     */
    androidDevices: outputs.testing.v1.AndroidDeviceResponse[];
}

/**
 * A single Android device.
 */
export interface AndroidDeviceResponse {
    /**
     * The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    androidModelId: string;
    /**
     * The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    androidVersionId: string;
    /**
     * The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    locale: string;
    /**
     * How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    orientation: string;
}

/**
 * A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
 */
export interface AndroidInstrumentationTestResponse {
    /**
     * The APK for the application under test.
     */
    appApk: outputs.testing.v1.FileReferenceResponse;
    /**
     * A multi-apk app bundle for the application under test.
     */
    appBundle: outputs.testing.v1.AppBundleResponse;
    /**
     * The java package for the application under test. The default value is determined by examining the application's manifest.
     */
    appPackageId: string;
    /**
     * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
     */
    orchestratorOption: string;
    /**
     * The option to run tests in multiple shards in parallel.
     */
    shardingOption: outputs.testing.v1.ShardingOptionResponse;
    /**
     * The APK containing the test code to be executed.
     */
    testApk: outputs.testing.v1.FileReferenceResponse;
    /**
     * The java package for the test to be executed. The default value is determined by examining the application's manifest.
     */
    testPackageId: string;
    /**
     * The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
     */
    testRunnerClass: string;
    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
     */
    testTargets: string[];
}

/**
 * A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored.
 */
export interface AndroidMatrixResponse {
    /**
     * The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    androidModelIds: string[];
    /**
     * The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    androidVersionIds: string[];
    /**
     * The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    locales: string[];
    /**
     * The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    orientations: string[];
}

/**
 * A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes.
 */
export interface AndroidRoboTestResponse {
    /**
     * The APK for the application under test.
     */
    appApk: outputs.testing.v1.FileReferenceResponse;
    /**
     * A multi-apk app bundle for the application under test.
     */
    appBundle: outputs.testing.v1.AppBundleResponse;
    /**
     * The initial activity that should be used to start the app.
     */
    appInitialActivity: string;
    /**
     * The java package for the application under test. The default value is determined by examining the application's manifest.
     */
    appPackageId: string;
    /**
     * The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.
     */
    maxDepth: number;
    /**
     * The max number of steps Robo can execute. Default is no limit.
     */
    maxSteps: number;
    /**
     * A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.
     */
    roboDirectives: outputs.testing.v1.RoboDirectiveResponse[];
    /**
     * The mode in which Robo should run. Most clients should allow the server to populate this field automatically.
     */
    roboMode: string;
    /**
     * A JSON file with a sequence of actions Robo should perform as a prologue for the crawl.
     */
    roboScript: outputs.testing.v1.FileReferenceResponse;
    /**
     * The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).
     */
    startingIntents: outputs.testing.v1.RoboStartingIntentResponse[];
}

/**
 * A test of an Android Application with a Test Loop. The intent \ will be implicitly added, since Games is the only user of this api, for the time being.
 */
export interface AndroidTestLoopResponse {
    /**
     * The APK for the application under test.
     */
    appApk: outputs.testing.v1.FileReferenceResponse;
    /**
     * A multi-apk app bundle for the application under test.
     */
    appBundle: outputs.testing.v1.AppBundleResponse;
    /**
     * The java package for the application under test. The default is determined by examining the application's manifest.
     */
    appPackageId: string;
    /**
     * The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.
     */
    scenarioLabels: string[];
    /**
     * The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.
     */
    scenarios: number[];
}

/**
 * An Android package file to install.
 */
export interface ApkResponse {
    /**
     * The path to an APK to be installed on the device before the test begins.
     */
    location: outputs.testing.v1.FileReferenceResponse;
    /**
     * The java package for the APK to be installed. Value is determined by examining the application's manifest.
     */
    packageName: string;
}

/**
 * An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.
 */
export interface AppBundleResponse {
    /**
     * .aab file representing the app bundle under test.
     */
    bundleLocation: outputs.testing.v1.FileReferenceResponse;
}

/**
 * Key-value pair of detailed information about the client which invoked the test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}.
 */
export interface ClientInfoDetailResponse {
    /**
     * The key of detailed client information.
     */
    key: string;
    /**
     * The value of detailed client information.
     */
    value: string;
}

/**
 * Information about the client which invoked the test.
 */
export interface ClientInfoResponse {
    /**
     * The list of detailed information about client.
     */
    clientInfoDetails: outputs.testing.v1.ClientInfoDetailResponse[];
    /**
     * Client name, such as gcloud.
     */
    name: string;
}

/**
 * A single device file description.
 */
export interface DeviceFileResponse {
    /**
     * A reference to an opaque binary blob file.
     */
    obbFile: outputs.testing.v1.ObbFileResponse;
    /**
     * A reference to a regular file.
     */
    regularFile: outputs.testing.v1.RegularFileResponse;
}

/**
 * The matrix of environments in which the test is to be executed.
 */
export interface EnvironmentMatrixResponse {
    /**
     * A list of Android devices; the test will be run only on the specified devices.
     */
    androidDeviceList: outputs.testing.v1.AndroidDeviceListResponse;
    /**
     * A matrix of Android devices.
     */
    androidMatrix: outputs.testing.v1.AndroidMatrixResponse;
    /**
     * A list of iOS devices.
     */
    iosDeviceList: outputs.testing.v1.IosDeviceListResponse;
}

/**
 * The environment in which the test is run.
 */
export interface EnvironmentResponse {
    /**
     * An Android device which must be used with an Android test.
     */
    androidDevice: outputs.testing.v1.AndroidDeviceResponse;
    /**
     * An iOS device which must be used with an iOS test.
     */
    iosDevice: outputs.testing.v1.IosDeviceResponse;
}

/**
 * A key-value pair passed as an environment variable to the test.
 */
export interface EnvironmentVariableResponse {
    /**
     * Key for the environment variable.
     */
    key: string;
    /**
     * Value for the environment variable.
     */
    value: string;
}

/**
 * A reference to a file, used for user inputs.
 */
export interface FileReferenceResponse {
    /**
     * A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)
     */
    gcsPath: string;
}

/**
 * Enables automatic Google account login. If set, the service automatically generates a Google test account and adds it to the device, before executing the test. Note that test accounts might be reused. Many applications show their full set of functionalities when an account is present on the device. Logging into the device with these generated accounts allows testing more functionalities.
 */
export interface GoogleAutoResponse {
}

/**
 * A storage location within Google cloud storage (GCS).
 */
export interface GoogleCloudStorageResponse {
    /**
     * The path to a directory in GCS that will eventually contain the results for this test. The requesting user must have write access on the bucket in the supplied path.
     */
    gcsPath: string;
}

/**
 * A file or directory to install on the device before the test starts.
 */
export interface IosDeviceFileResponse {
    /**
     * The bundle id of the app where this file lives. iOS apps sandbox their own filesystem, so app files must specify which app installed on the device.
     */
    bundleId: string;
    /**
     * The source file
     */
    content: outputs.testing.v1.FileReferenceResponse;
    /**
     * Location of the file on the device, inside the app's sandboxed filesystem
     */
    devicePath: string;
}

/**
 * A list of iOS device configurations in which the test is to be executed.
 */
export interface IosDeviceListResponse {
    /**
     * A list of iOS devices.
     */
    iosDevices: outputs.testing.v1.IosDeviceResponse[];
}

/**
 * A single iOS device.
 */
export interface IosDeviceResponse {
    /**
     * The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    iosModelId: string;
    /**
     * The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    iosVersionId: string;
    /**
     * The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    locale: string;
    /**
     * How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options.
     */
    orientation: string;
}

/**
 * A test of an iOS application that implements one or more game loop scenarios. This test type accepts an archived application (.ipa file) and a list of integer scenarios that will be executed on the app sequentially.
 */
export interface IosTestLoopResponse {
    /**
     * The bundle id for the application under test.
     */
    appBundleId: string;
    /**
     * The .ipa of the application to test.
     */
    appIpa: outputs.testing.v1.FileReferenceResponse;
    /**
     * The list of scenarios that should be run during the test. Defaults to the single scenario 0 if unspecified.
     */
    scenarios: number[];
}

/**
 * A description of how to set up an iOS device prior to running the test.
 */
export interface IosTestSetupResponse {
    /**
     * iOS apps to install in addition to those being directly tested.
     */
    additionalIpas: outputs.testing.v1.FileReferenceResponse[];
    /**
     * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     */
    networkProfile: string;
    /**
     * List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (such as /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (such as /Documents) by specifying the bundle ID.
     */
    pullDirectories: outputs.testing.v1.IosDeviceFileResponse[];
    /**
     * List of files to push to the device before starting the test.
     */
    pushFiles: outputs.testing.v1.IosDeviceFileResponse[];
}

/**
 * A test of an iOS application that uses the XCTest framework. Xcode supports the option to "build for testing", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
 */
export interface IosXcTestResponse {
    /**
     * The bundle id for the application under test.
     */
    appBundleId: string;
    /**
     * The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.
     */
    testSpecialEntitlements: boolean;
    /**
     * The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is specified.
     */
    testsZip: outputs.testing.v1.FileReferenceResponse;
    /**
     * The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.
     */
    xcodeVersion: string;
    /**
     * An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore, this can be useful for sharding tests. Default is taken from the tests zip.
     */
    xctestrun: outputs.testing.v1.FileReferenceResponse;
}

/**
 * Specifies an intent that starts the main launcher activity.
 */
export interface LauncherActivityIntentResponse {
}

/**
 * Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid.
 */
export interface ManualShardingResponse {
    /**
     * Group of packages, classes, and/or test methods to be run for each manually-created shard. You must specify at least one shard if this field is present. When you select one or more physical devices, the number of repeated test_targets_for_shard must be <= 50. When you select one or more ARM virtual devices, it must be <= 50. When you select only x86 virtual devices, it must be <= 500.
     */
    testTargetsForShard: outputs.testing.v1.TestTargetsForShardResponse[];
}

/**
 * An opaque binary blob file to install on the device before the test starts.
 */
export interface ObbFileResponse {
    /**
     * Opaque Binary Blob (OBB) file(s) to install on the device.
     */
    obb: outputs.testing.v1.FileReferenceResponse;
    /**
     * OBB file name which must conform to the format as specified by Android e.g. [main|patch].0300110.com.example.android.obb which will be installed into \/Android/obb/\/ on the device.
     */
    obbFileName: string;
}

/**
 * A file or directory to install on the device before the test starts.
 */
export interface RegularFileResponse {
    /**
     * The source file.
     */
    content: outputs.testing.v1.FileReferenceResponse;
    /**
     * Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to access files on the device in a portable way.
     */
    devicePath: string;
}

/**
 * Locations where the results of running the test are stored.
 */
export interface ResultStorageResponse {
    /**
     * Required.
     */
    googleCloudStorage: outputs.testing.v1.GoogleCloudStorageResponse;
    /**
     * URL to the results in the Firebase Web Console.
     */
    resultsUrl: string;
    /**
     * The tool results execution that results are written to.
     */
    toolResultsExecution: outputs.testing.v1.ToolResultsExecutionResponse;
    /**
     * The tool results history that contains the tool results execution that results are written to. If not provided, the service will choose an appropriate value.
     */
    toolResultsHistory: outputs.testing.v1.ToolResultsHistoryResponse;
}

/**
 * Directs Robo to interact with a specific UI element if it is encountered during the crawl. Currently, Robo can perform text entry or element click.
 */
export interface RoboDirectiveResponse {
    /**
     * The type of action that Robo should perform on the specified element.
     */
    actionType: string;
    /**
     * The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name.
     */
    inputText: string;
    /**
     * The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc: https://developer.android.com/guide/topics/resources/accessing-resources.html
     */
    resourceName: string;
}

/**
 * Message for specifying the start activities to crawl.
 */
export interface RoboStartingIntentResponse {
    /**
     * An intent that starts the main launcher activity.
     */
    launcherActivity: outputs.testing.v1.LauncherActivityIntentResponse;
    /**
     * An intent that starts an activity with specific details.
     */
    startActivity: outputs.testing.v1.StartActivityIntentResponse;
    /**
     * Timeout in seconds for each intent.
     */
    timeout: string;
}

/**
 * Output only. Details about the shard.
 */
export interface ShardResponse {
    /**
     * The total number of shards.
     */
    numShards: number;
    /**
     * The index of the shard among all the shards.
     */
    shardIndex: number;
    /**
     * Test targets for each shard. Only set for manual sharding.
     */
    testTargetsForShard: outputs.testing.v1.TestTargetsForShardResponse;
}

/**
 * Options for enabling sharding.
 */
export interface ShardingOptionResponse {
    /**
     * Shards test cases into the specified groups of packages, classes, and/or methods.
     */
    manualSharding: outputs.testing.v1.ManualShardingResponse;
    /**
     * Uniformly shards test cases given a total number of shards.
     */
    uniformSharding: outputs.testing.v1.UniformShardingResponse;
}

/**
 * A starting intent specified by an action, uri, and categories.
 */
export interface StartActivityIntentResponse {
    /**
     * Action name. Required for START_ACTIVITY.
     */
    action: string;
    /**
     * Intent categories to set on the intent.
     */
    categories: string[];
    /**
     * URI for the action.
     */
    uri: string;
}

export interface SystraceSetupResponse {
    /**
     * Systrace duration in seconds. Should be between 1 and 30 seconds. 0 disables systrace.
     */
    durationSeconds: number;
}

/**
 * Additional details about the progress of the running test.
 */
export interface TestDetailsResponse {
    /**
     * If the TestState is ERROR, then this string will contain human-readable details about the error.
     */
    errorMessage: string;
    /**
     * Human-readable, detailed descriptions of the test's progress. For example: "Provisioning a device", "Starting Test". During the course of execution new data may be appended to the end of progress_messages.
     */
    progressMessages: string[];
}

/**
 * A single test executed in a single environment.
 */
export interface TestExecutionResponse {
    /**
     * How the host machine(s) are configured.
     */
    environment: outputs.testing.v1.EnvironmentResponse;
    /**
     * Id of the containing TestMatrix.
     */
    matrixId: string;
    /**
     * The cloud project that owns the test execution.
     */
    project: string;
    /**
     * Details about the shard.
     */
    shard: outputs.testing.v1.ShardResponse;
    /**
     * Indicates the current progress of the test execution (e.g., FINISHED).
     */
    state: string;
    /**
     * Additional details about the running test.
     */
    testDetails: outputs.testing.v1.TestDetailsResponse;
    /**
     * How to run the test.
     */
    testSpecification: outputs.testing.v1.TestSpecificationResponse;
    /**
     * The time this test execution was initially created.
     */
    timestamp: string;
    /**
     * Where the results for this execution are written.
     */
    toolResultsStep: outputs.testing.v1.ToolResultsStepResponse;
}

/**
 * A description of how to set up the Android device prior to running the test.
 */
export interface TestSetupResponse {
    /**
     * The device will be logged in on this account for the duration of the test.
     */
    account: outputs.testing.v1.AccountResponse;
    /**
     * APKs to install in addition to those being directly tested. Currently capped at 100.
     */
    additionalApks: outputs.testing.v1.ApkResponse[];
    /**
     * List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
     */
    directoriesToPull: string[];
    /**
     * Whether to prevent all runtime permissions to be granted at app install
     */
    dontAutograntPermissions: boolean;
    /**
     * Environment variables to set for the test (only applicable for instrumentation tests).
     */
    environmentVariables: outputs.testing.v1.EnvironmentVariableResponse[];
    /**
     * List of files to push to the device before starting the test.
     */
    filesToPush: outputs.testing.v1.DeviceFileResponse[];
    /**
     * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     */
    networkProfile: string;
    /**
     * Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
     *
     * @deprecated Deprecated: Systrace uses Python 2 which has been sunset 2020-01-01. Support of Systrace may stop at any time, at which point no Systrace file will be provided in the results. Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the results bucket together with the other artifacts from the run.
     */
    systrace: outputs.testing.v1.SystraceSetupResponse;
}

/**
 * A description of how to run the test.
 */
export interface TestSpecificationResponse {
    /**
     * An Android instrumentation test.
     */
    androidInstrumentationTest: outputs.testing.v1.AndroidInstrumentationTestResponse;
    /**
     * An Android robo test.
     */
    androidRoboTest: outputs.testing.v1.AndroidRoboTestResponse;
    /**
     * An Android Application with a Test Loop.
     */
    androidTestLoop: outputs.testing.v1.AndroidTestLoopResponse;
    /**
     * Disables performance metrics recording. May reduce test latency.
     */
    disablePerformanceMetrics: boolean;
    /**
     * Disables video recording. May reduce test latency.
     */
    disableVideoRecording: boolean;
    /**
     * An iOS application with a test loop.
     */
    iosTestLoop: outputs.testing.v1.IosTestLoopResponse;
    /**
     * Test setup requirements for iOS.
     */
    iosTestSetup: outputs.testing.v1.IosTestSetupResponse;
    /**
     * An iOS XCTest, via an .xctestrun file.
     */
    iosXcTest: outputs.testing.v1.IosXcTestResponse;
    /**
     * Test setup requirements for Android e.g. files to install, bootstrap scripts.
     */
    testSetup: outputs.testing.v1.TestSetupResponse;
    /**
     * Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.
     */
    testTimeout: string;
}

/**
 * Test targets for a shard.
 */
export interface TestTargetsForShardResponse {
    /**
     * Group of packages, classes, and/or test methods to be run for each shard. The targets need to be specified in AndroidJUnitRunner argument format. For example, "package com.my.packages" "class com.my.package.MyClass". The number of test_targets must be greater than 0.
     */
    testTargets: string[];
}

/**
 * Represents a tool results execution resource. This has the results of a TestMatrix.
 */
export interface ToolResultsExecutionResponse {
    /**
     * A tool results execution ID.
     */
    executionId: string;
    /**
     * A tool results history ID.
     */
    historyId: string;
    /**
     * The cloud project that owns the tool results execution.
     */
    project: string;
}

/**
 * Represents a tool results history resource.
 */
export interface ToolResultsHistoryResponse {
    /**
     * A tool results history ID.
     */
    historyId: string;
    /**
     * The cloud project that owns the tool results history.
     */
    project: string;
}

/**
 * Represents a tool results step resource. This has the results of a TestExecution.
 */
export interface ToolResultsStepResponse {
    /**
     * A tool results execution ID.
     */
    executionId: string;
    /**
     * A tool results history ID.
     */
    historyId: string;
    /**
     * The cloud project that owns the tool results step.
     */
    project: string;
    /**
     * A tool results step ID.
     */
    stepId: string;
}

/**
 * Uniformly shards test cases given a total number of shards. For instrumentation tests, it will be translated to "-e numShard" and "-e shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying either of these sharding arguments via `environment_variables` is invalid. Based on the sharding mechanism AndroidJUnitRunner uses, there is no guarantee that test cases will be distributed uniformly across all shards.
 */
export interface UniformShardingResponse {
    /**
     * The total number of shards to create. This must always be a positive number that is no greater than the total number of test cases. When you select one or more physical devices, the number of shards must be <= 50. When you select one or more ARM virtual devices, it must be <= 50. When you select only x86 virtual devices, it must be <= 500.
     */
    numShards: number;
}

