// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
 */
export interface ComputeEngineTargetDefaultsArgs {
    /**
     * Additional licenses to assign to the VM.
     */
    additionalLicenses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Compute instance scheduling information (if empty default is used).
     */
    computeScheduling?: pulumi.Input<inputs.vmmigration.v1alpha1.ComputeSchedulingArgs>;
    /**
     * The disk type to use in the VM.
     */
    diskType?: pulumi.Input<enums.vmmigration.v1alpha1.ComputeEngineTargetDefaultsDiskType>;
    /**
     * The hostname to assign to the VM.
     */
    hostname?: pulumi.Input<string>;
    /**
     * A map of labels to associate with the VM.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The license type to use in OS adaptation.
     */
    licenseType?: pulumi.Input<enums.vmmigration.v1alpha1.ComputeEngineTargetDefaultsLicenseType>;
    /**
     * The machine type to create the VM with.
     */
    machineType?: pulumi.Input<string>;
    /**
     * The machine type series to create the VM with.
     */
    machineTypeSeries?: pulumi.Input<string>;
    /**
     * The metadata key/value pairs to assign to the VM.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of NICs connected to this VM.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.vmmigration.v1alpha1.NetworkInterfaceArgs>[]>;
    /**
     * A map of network tags to associate with the VM.
     */
    networkTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     */
    secureBoot?: pulumi.Input<boolean>;
    /**
     * The service account to associate the VM with.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
     */
    targetProject?: pulumi.Input<string>;
    /**
     * The name of the VM to create.
     */
    vmName?: pulumi.Input<string>;
    /**
     * The zone in which to create the VM.
     */
    zone?: pulumi.Input<string>;
}

/**
 * Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
 */
export interface ComputeSchedulingArgs {
    automaticRestart?: pulumi.Input<boolean>;
    /**
     * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
     */
    minNodeCpus?: pulumi.Input<number>;
    /**
     * A set of node affinity and anti-affinity configurations for sole tenant nodes.
     */
    nodeAffinities?: pulumi.Input<pulumi.Input<inputs.vmmigration.v1alpha1.SchedulingNodeAffinityArgs>[]>;
    /**
     * How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
     */
    onHostMaintenance?: pulumi.Input<enums.vmmigration.v1alpha1.ComputeSchedulingOnHostMaintenance>;
    /**
     * Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
     */
    restartType?: pulumi.Input<enums.vmmigration.v1alpha1.ComputeSchedulingRestartType>;
}

/**
 * NetworkInterface represents a NIC of a VM.
 */
export interface NetworkInterfaceArgs {
    /**
     * The external IP to define in the NIC.
     */
    externalIp?: pulumi.Input<string>;
    /**
     * The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
     */
    internalIp?: pulumi.Input<string>;
    /**
     * The network to connect the NIC to.
     */
    network?: pulumi.Input<string>;
    /**
     * The subnetwork to connect the NIC to.
     */
    subnetwork?: pulumi.Input<string>;
}

/**
 * A policy for scheduling replications.
 */
export interface SchedulePolicyArgs {
    /**
     * The idle duration between replication stages.
     */
    idleDuration?: pulumi.Input<string>;
    /**
     * A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
     */
    skipOsAdaptation?: pulumi.Input<boolean>;
}

/**
 * Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
 */
export interface SchedulingNodeAffinityArgs {
    /**
     * The label key of Node resource to reference.
     */
    key?: pulumi.Input<string>;
    /**
     * The operator to use for the node resources specified in the `values` parameter.
     */
    operator?: pulumi.Input<enums.vmmigration.v1alpha1.SchedulingNodeAffinityOperator>;
    /**
     * Corresponds to the label values of Node resource.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
 */
export interface TargetVMDetailsArgs {
    /**
     * Compute instance scheduling information (if empty default is used).
     */
    computeScheduling?: pulumi.Input<inputs.vmmigration.v1alpha1.ComputeSchedulingArgs>;
    /**
     * The disk type to use in the VM.
     */
    diskType?: pulumi.Input<enums.vmmigration.v1alpha1.TargetVMDetailsDiskType>;
    /**
     * The external IP to define in the VM.
     */
    externalIp?: pulumi.Input<string>;
    /**
     * The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
     */
    internalIp?: pulumi.Input<string>;
    /**
     * A map of labels to associate with the VM.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The license type to use in OS adaptation.
     */
    licenseType?: pulumi.Input<enums.vmmigration.v1alpha1.TargetVMDetailsLicenseType>;
    /**
     * The machine type to create the VM with.
     */
    machineType?: pulumi.Input<string>;
    /**
     * The machine type series to create the VM with.
     */
    machineTypeSeries?: pulumi.Input<string>;
    /**
     * The metadata key/value pairs to assign to the VM.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the VM to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The network to connect the VM to.
     */
    network?: pulumi.Input<string>;
    /**
     * List of NICs connected to this VM.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.vmmigration.v1alpha1.NetworkInterfaceArgs>[]>;
    /**
     * A map of network tags to associate with the VM.
     */
    networkTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     */
    secureBoot?: pulumi.Input<boolean>;
    /**
     * The service account to associate the VM with.
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The subnetwork to connect the VM to.
     */
    subnetwork?: pulumi.Input<string>;
    /**
     * The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
     */
    targetProject?: pulumi.Input<string>;
    /**
     * The zone in which to create the VM.
     */
    zone?: pulumi.Input<string>;
}

/**
 * Utilization information of a single VM.
 */
export interface VmUtilizationInfoArgs {
    /**
     * Utilization metrics for this VM.
     */
    utilization?: pulumi.Input<inputs.vmmigration.v1alpha1.VmUtilizationMetricsArgs>;
    /**
     * The VM's ID in the source.
     */
    vmId?: pulumi.Input<string>;
    /**
     * The description of the VM in a Source of type Vmware.
     */
    vmwareVmDetails?: pulumi.Input<inputs.vmmigration.v1alpha1.VmwareVmDetailsArgs>;
}

/**
 * Utilization metrics values for a single VM.
 */
export interface VmUtilizationMetricsArgs {
    /**
     * Average CPU usage, percent.
     */
    cpuAverage?: pulumi.Input<number>;
    /**
     * Average CPU usage, percent.
     */
    cpuAveragePercent?: pulumi.Input<number>;
    /**
     * Max CPU usage, percent.
     */
    cpuMax?: pulumi.Input<number>;
    /**
     * Max CPU usage, percent.
     */
    cpuMaxPercent?: pulumi.Input<number>;
    /**
     * Average disk IO rate, in kilobytes per second.
     */
    diskIoRateAverage?: pulumi.Input<string>;
    /**
     * Average disk IO rate, in kilobytes per second.
     */
    diskIoRateAverageKbps?: pulumi.Input<string>;
    /**
     * Max disk IO rate, in kilobytes per second.
     */
    diskIoRateMax?: pulumi.Input<string>;
    /**
     * Max disk IO rate, in kilobytes per second.
     */
    diskIoRateMaxKbps?: pulumi.Input<string>;
    /**
     * Average memory usage, percent.
     */
    memoryAverage?: pulumi.Input<number>;
    /**
     * Average memory usage, percent.
     */
    memoryAveragePercent?: pulumi.Input<number>;
    /**
     * Max memory usage, percent.
     */
    memoryMax?: pulumi.Input<number>;
    /**
     * Max memory usage, percent.
     */
    memoryMaxPercent?: pulumi.Input<number>;
    /**
     * Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
     */
    networkThroughputAverage?: pulumi.Input<string>;
    /**
     * Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
     */
    networkThroughputAverageKbps?: pulumi.Input<string>;
    /**
     * Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
     */
    networkThroughputMax?: pulumi.Input<string>;
    /**
     * Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
     */
    networkThroughputMaxKbps?: pulumi.Input<string>;
}

/**
 * VmwareSourceDetails message describes a specific source details for the vmware source type.
 */
export interface VmwareSourceDetailsArgs {
    /**
     * Input only. The credentials password. This is write only and can not be read in a GET operation.
     */
    password?: pulumi.Input<string>;
    /**
     * The thumbprint representing the certificate for the vcenter.
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * The credentials username.
     */
    username?: pulumi.Input<string>;
    /**
     * The ip address of the vcenter this Source represents.
     */
    vcenterIp?: pulumi.Input<string>;
}

/**
 * VmwareVmDetails describes a VM in vCenter.
 */
export interface VmwareVmDetailsArgs {
    /**
     * The total size of the storage allocated to the VM in MB.
     */
    committedStorage?: pulumi.Input<string>;
    /**
     * The total size of the storage allocated to the VM in MB.
     */
    committedStorageMb?: pulumi.Input<string>;
    /**
     * The number of cpus in the VM.
     */
    cpuCount?: pulumi.Input<number>;
    /**
     * The descriptive name of the vCenter's datacenter this VM is contained in.
     */
    datacenterDescription?: pulumi.Input<string>;
    /**
     * The id of the vCenter's datacenter this VM is contained in.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * The number of disks the VM has.
     */
    diskCount?: pulumi.Input<number>;
    /**
     * The display name of the VM. Note that this is not necessarily unique.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
     */
    guestDescription?: pulumi.Input<string>;
    /**
     * The size of the memory of the VM in MB.
     */
    memoryMb?: pulumi.Input<number>;
    /**
     * The power state of the VM at the moment list was taken.
     */
    powerState?: pulumi.Input<enums.vmmigration.v1alpha1.VmwareVmDetailsPowerState>;
    /**
     * The unique identifier of the VM in vCenter.
     */
    uuid?: pulumi.Input<string>;
    /**
     * The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
     */
    vmId?: pulumi.Input<string>;
}

