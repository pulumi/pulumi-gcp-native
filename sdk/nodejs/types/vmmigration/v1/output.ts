// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Describes an appliance version.
 */
export interface ApplianceVersionResponse {
    /**
     * Determine whether it's critical to upgrade the appliance to this version.
     */
    critical: boolean;
    /**
     * Link to a page that contains the version release notes.
     */
    releaseNotesUri: string;
    /**
     * A link for downloading the version.
     */
    uri: string;
    /**
     * The appliance version.
     */
    version: string;
}

/**
 * AppliedLicense holds the license data returned by adaptation module report.
 */
export interface AppliedLicenseResponse {
    /**
     * The OS license returned from the adaptation module's report.
     */
    osLicense: string;
    /**
     * The license type that was used in OS adaptation.
     */
    type: string;
}

/**
 * Holds informatiom about the available versions for upgrade.
 */
export interface AvailableUpdatesResponse {
    /**
     * The latest version for in place update. The current appliance can be updated to this version using the API or m4c CLI.
     */
    inPlaceUpdate: outputs.vmmigration.v1.ApplianceVersionResponse;
    /**
     * The newest deployable version of the appliance. The current appliance can't be updated into this version, and the owner must manually deploy this OVA to a new appliance.
     */
    newDeployableAppliance: outputs.vmmigration.v1.ApplianceVersionResponse;
}

/**
 * CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.
 */
export interface CloneJobResponse {
    /**
     * Details of the target VM in Compute Engine.
     */
    computeEngineTargetDetails: outputs.vmmigration.v1.ComputeEngineTargetDetailsResponse;
    /**
     * The time the clone job was created (as an API call, not when it was actually created in the target).
     */
    createTime: string;
    /**
     * The time the clone job was ended.
     */
    endTime: string;
    /**
     * Provides details for the errors that led to the Clone Job's state.
     */
    error: outputs.vmmigration.v1.StatusResponse;
    /**
     * The name of the clone.
     */
    name: string;
    /**
     * State of the clone job.
     */
    state: string;
    /**
     * The time the state was last updated.
     */
    stateTime: string;
}

/**
 * ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
 */
export interface ComputeEngineTargetDefaultsResponse {
    /**
     * Additional licenses to assign to the VM.
     */
    additionalLicenses: string[];
    /**
     * The OS license returned from the adaptation module report.
     */
    appliedLicense: outputs.vmmigration.v1.AppliedLicenseResponse;
    /**
     * The VM Boot Option, as set in the source vm.
     */
    bootOption: string;
    /**
     * Compute instance scheduling information (if empty default is used).
     */
    computeScheduling: outputs.vmmigration.v1.ComputeSchedulingResponse;
    /**
     * The disk type to use in the VM.
     */
    diskType: string;
    /**
     * The hostname to assign to the VM.
     */
    hostname: string;
    /**
     * A map of labels to associate with the VM.
     */
    labels: {[key: string]: string};
    /**
     * The license type to use in OS adaptation.
     */
    licenseType: string;
    /**
     * The machine type to create the VM with.
     */
    machineType: string;
    /**
     * The machine type series to create the VM with.
     */
    machineTypeSeries: string;
    /**
     * The metadata key/value pairs to assign to the VM.
     */
    metadata: {[key: string]: string};
    /**
     * List of NICs connected to this VM.
     */
    networkInterfaces: outputs.vmmigration.v1.NetworkInterfaceResponse[];
    /**
     * A map of network tags to associate with the VM.
     */
    networkTags: string[];
    /**
     * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     */
    secureBoot: boolean;
    /**
     * The service account to associate the VM with.
     */
    serviceAccount: string;
    /**
     * The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
     */
    targetProject: string;
    /**
     * The name of the VM to create.
     */
    vmName: string;
    /**
     * The zone in which to create the VM.
     */
    zone: string;
}

/**
 * ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
 */
export interface ComputeEngineTargetDetailsResponse {
    /**
     * Additional licenses to assign to the VM.
     */
    additionalLicenses: string[];
    /**
     * The OS license returned from the adaptation module report.
     */
    appliedLicense: outputs.vmmigration.v1.AppliedLicenseResponse;
    /**
     * The VM Boot Option, as set in the source vm.
     */
    bootOption: string;
    /**
     * Compute instance scheduling information (if empty default is used).
     */
    computeScheduling: outputs.vmmigration.v1.ComputeSchedulingResponse;
    /**
     * The disk type to use in the VM.
     */
    diskType: string;
    /**
     * The hostname to assign to the VM.
     */
    hostname: string;
    /**
     * A map of labels to associate with the VM.
     */
    labels: {[key: string]: string};
    /**
     * The license type to use in OS adaptation.
     */
    licenseType: string;
    /**
     * The machine type to create the VM with.
     */
    machineType: string;
    /**
     * The machine type series to create the VM with.
     */
    machineTypeSeries: string;
    /**
     * The metadata key/value pairs to assign to the VM.
     */
    metadata: {[key: string]: string};
    /**
     * List of NICs connected to this VM.
     */
    networkInterfaces: outputs.vmmigration.v1.NetworkInterfaceResponse[];
    /**
     * A map of network tags to associate with the VM.
     */
    networkTags: string[];
    /**
     * The GCP target project ID or project name.
     */
    project: string;
    /**
     * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
     */
    secureBoot: boolean;
    /**
     * The service account to associate the VM with.
     */
    serviceAccount: string;
    /**
     * The name of the VM to create.
     */
    vmName: string;
    /**
     * The zone in which to create the VM.
     */
    zone: string;
}

/**
 * Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
 */
export interface ComputeSchedulingResponse {
    /**
     * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
     */
    minNodeCpus: number;
    /**
     * A set of node affinity and anti-affinity configurations for sole tenant nodes.
     */
    nodeAffinities: outputs.vmmigration.v1.SchedulingNodeAffinityResponse[];
    /**
     * How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
     */
    onHostMaintenance: string;
    /**
     * Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
     */
    restartType: string;
}

/**
 * CutoverJob message describes a cutover of a migrating VM. The CutoverJob is the operation of shutting down the VM, creating a snapshot and clonning the VM using the replicated snapshot.
 */
export interface CutoverJobResponse {
    /**
     * Details of the target VM in Compute Engine.
     */
    computeEngineTargetDetails: outputs.vmmigration.v1.ComputeEngineTargetDetailsResponse;
    /**
     * The time the cutover job was created (as an API call, not when it was actually created in the target).
     */
    createTime: string;
    /**
     * The time the cutover job had finished.
     */
    endTime: string;
    /**
     * Provides details for the errors that led to the Cutover Job's state.
     */
    error: outputs.vmmigration.v1.StatusResponse;
    /**
     * The name of the cutover job.
     */
    name: string;
    /**
     * The current progress in percentage of the cutover job.
     */
    progressPercent: number;
    /**
     * State of the cutover job.
     */
    state: string;
    /**
     * A message providing possible extra details about the current state.
     */
    stateMessage: string;
    /**
     * The time the state was last updated.
     */
    stateTime: string;
}

/**
 * NetworkInterface represents a NIC of a VM.
 */
export interface NetworkInterfaceResponse {
    /**
     * The external IP to define in the NIC.
     */
    externalIp: string;
    /**
     * The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
     */
    internalIp: string;
    /**
     * The network to connect the NIC to.
     */
    network: string;
    /**
     * The subnetwork to connect the NIC to.
     */
    subnetwork: string;
}

/**
 * ReplicationCycle contains information about the current replication cycle status.
 */
export interface ReplicationCycleResponse {
    /**
     * The current progress in percentage of this cycle.
     */
    progressPercent: number;
    /**
     * The time the replication cycle has started.
     */
    startTime: string;
}

/**
 * ReplicationSync contain information about the last replica sync to the cloud.
 */
export interface ReplicationSyncResponse {
    /**
     * The most updated snapshot created time in the source that finished replication.
     */
    lastSyncTime: string;
}

/**
 * A policy for scheduling replications.
 */
export interface SchedulePolicyResponse {
    /**
     * The idle duration between replication stages.
     */
    idleDuration: string;
    /**
     * A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.
     */
    skipOsAdaptation: boolean;
}

/**
 * Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
 */
export interface SchedulingNodeAffinityResponse {
    /**
     * The label key of Node resource to reference.
     */
    key: string;
    /**
     * The operator to use for the node resources specified in the `values` parameter.
     */
    operator: string;
    /**
     * Corresponds to the label values of Node resource.
     */
    values: string[];
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface StatusResponse {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code: number;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details: {[key: string]: string}[];
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message: string;
}

/**
 * UpgradeStatus contains information about upgradeAppliance operation.
 */
export interface UpgradeStatusResponse {
    /**
     * Provides details on the state of the upgrade operation in case of an error.
     */
    error: outputs.vmmigration.v1.StatusResponse;
    /**
     * The version from which we upgraded.
     */
    previousVersion: string;
    /**
     * The time the operation was started.
     */
    startTime: string;
    /**
     * The state of the upgradeAppliance operation.
     */
    state: string;
    /**
     * The version to upgrade to.
     */
    version: string;
}

/**
 * Utilization information of a single VM.
 */
export interface VmUtilizationInfoResponse {
    /**
     * Utilization metrics for this VM.
     */
    utilization: outputs.vmmigration.v1.VmUtilizationMetricsResponse;
    /**
     * The VM's ID in the source.
     */
    vmId: string;
    /**
     * The description of the VM in a Source of type Vmware.
     */
    vmwareVmDetails: outputs.vmmigration.v1.VmwareVmDetailsResponse;
}

/**
 * Utilization metrics values for a single VM.
 */
export interface VmUtilizationMetricsResponse {
    /**
     * Average CPU usage, percent.
     */
    cpuAveragePercent: number;
    /**
     * Max CPU usage, percent.
     */
    cpuMaxPercent: number;
    /**
     * Average disk IO rate, in kilobytes per second.
     */
    diskIoRateAverageKbps: string;
    /**
     * Max disk IO rate, in kilobytes per second.
     */
    diskIoRateMaxKbps: string;
    /**
     * Average memory usage, percent.
     */
    memoryAveragePercent: number;
    /**
     * Max memory usage, percent.
     */
    memoryMaxPercent: number;
    /**
     * Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
     */
    networkThroughputAverageKbps: string;
    /**
     * Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.
     */
    networkThroughputMaxKbps: string;
}

/**
 * VmwareSourceDetails message describes a specific source details for the vmware source type.
 */
export interface VmwareSourceDetailsResponse {
    /**
     * Input only. The credentials password. This is write only and can not be read in a GET operation.
     */
    password: string;
    /**
     * The thumbprint representing the certificate for the vcenter.
     */
    thumbprint: string;
    /**
     * The credentials username.
     */
    username: string;
    /**
     * The ip address of the vcenter this Source represents.
     */
    vcenterIp: string;
}

/**
 * VmwareVmDetails describes a VM in vCenter.
 */
export interface VmwareVmDetailsResponse {
    /**
     * The VM Boot Option.
     */
    bootOption: string;
    /**
     * The total size of the storage allocated to the VM in MB.
     */
    committedStorageMb: string;
    /**
     * The number of cpus in the VM.
     */
    cpuCount: number;
    /**
     * The descriptive name of the vCenter's datacenter this VM is contained in.
     */
    datacenterDescription: string;
    /**
     * The id of the vCenter's datacenter this VM is contained in.
     */
    datacenterId: string;
    /**
     * The number of disks the VM has.
     */
    diskCount: number;
    /**
     * The display name of the VM. Note that this is not necessarily unique.
     */
    displayName: string;
    /**
     * The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
     */
    guestDescription: string;
    /**
     * The size of the memory of the VM in MB.
     */
    memoryMb: number;
    /**
     * The power state of the VM at the moment list was taken.
     */
    powerState: string;
    /**
     * The unique identifier of the VM in vCenter.
     */
    uuid: string;
    /**
     * The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
     */
    vmId: string;
}

