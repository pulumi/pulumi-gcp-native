// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * URLs where a CertificateAuthority will publish content.
 */
export interface AccessUrlsResponse {
    /**
     * The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
     */
    caCertificateAccessUrl: string;
    /**
     * The URL where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
     */
    crlAccessUrl: string;
}

export interface AllowedConfigListResponse {
    /**
     * All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper. If a ReusableConfigWrapper has an empty field, any value will be allowed for that field.
     */
    allowedConfigValues: outputs.privateca.v1beta1.ReusableConfigWrapperResponse[];
}

/**
 * AllowedSubjectAltNames specifies the allowed values for SubjectAltNames by the CertificateAuthority when issuing Certificates.
 */
export interface AllowedSubjectAltNamesResponse {
    /**
     * Optional. Specifies if to allow custom X509Extension values.
     */
    allowCustomSans: boolean;
    /**
     * Optional. Specifies if glob patterns used for allowed_dns_names allow wildcard certificates. If this is set, certificate requests with wildcard domains will be permitted to match a glob pattern specified in allowed_dns_names. Otherwise, certificate requests with wildcard domains will be permitted only if allowed_dns_names contains a literal wildcard.
     */
    allowGlobbingDnsWildcards: boolean;
    /**
     * Optional. Contains valid, fully-qualified host names. Glob patterns are also supported. To allow an explicit wildcard certificate, escape with backlash (i.e. `\*`). E.g. for globbed entries: `*bar.com` will allow `foo.bar.com`, but not `*.bar.com`, unless the allow_globbing_dns_wildcards field is set. E.g. for wildcard entries: `\*.bar.com` will allow `*.bar.com`, but not `foo.bar.com`.
     */
    allowedDnsNames: string[];
    /**
     * Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also supported.
     */
    allowedEmailAddresses: string[];
    /**
     * Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6 addresses and subnet ranges. Subnet ranges are specified using the '/' notation (e.g. 10.0.0.0/8, 2001:700:300:1800::/64). Glob patterns are supported only for ip address entries (i.e. not for subnet ranges).
     */
    allowedIps: string[];
    /**
     * Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To match across path seperators (i.e. '/') use the double star glob pattern (i.e. '**').
     */
    allowedUris: string[];
}

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface AuditConfigResponse {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs: outputs.privateca.v1beta1.AuditLogConfigResponse[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service: string;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigResponse {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers: string[];
    /**
     * The log type that this config enables.
     */
    logType: string;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.privateca.v1beta1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * Describes values that are relevant in a CA certificate.
 */
export interface CaOptionsResponse {
    /**
     * Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
     */
    isCa: boolean;
    /**
     * Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
     */
    maxIssuerPathLength: number;
}

/**
 * The issuing policy for a CertificateAuthority. Certificates will not be successfully issued from this CertificateAuthority if they violate the policy.
 */
export interface CertificateAuthorityPolicyResponse {
    /**
     * Optional. If any value is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed value. If no value is specified, all values will be allowed for this fied. Glob patterns are also supported.
     */
    allowedCommonNames: string[];
    /**
     * Optional. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper in the list.
     */
    allowedConfigList: outputs.privateca.v1beta1.AllowedConfigListResponse;
    /**
     * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
     */
    allowedIssuanceModes: outputs.privateca.v1beta1.IssuanceModesResponse;
    /**
     * Optional. If any Subject is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed Subject. If a Subject has an empty field, any value will be allowed for that field.
     */
    allowedLocationsAndOrganizations: outputs.privateca.v1beta1.SubjectResponse[];
    /**
     * Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is specified, any value will be allowed for the SubjectAltNames field.
     */
    allowedSans: outputs.privateca.v1beta1.AllowedSubjectAltNamesResponse;
    /**
     * Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part if the issuing chain expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated.
     */
    maximumLifetime: string;
    /**
     * Optional. All Certificates issued by the CertificateAuthority will use the provided configuration values, overwriting any requested configuration values.
     */
    overwriteConfigValues: outputs.privateca.v1beta1.ReusableConfigWrapperResponse;
}

/**
 * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
 */
export interface CertificateConfigResponse {
    /**
     * Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
     */
    publicKey: outputs.privateca.v1beta1.PublicKeyResponse;
    /**
     * Describes how some of the technical fields in a certificate should be populated.
     */
    reusableConfig: outputs.privateca.v1beta1.ReusableConfigWrapperResponse;
    /**
     * Specifies some of the values in a certificate that are related to the subject.
     */
    subjectConfig: outputs.privateca.v1beta1.SubjectConfigResponse;
}

/**
 * A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
 */
export interface CertificateDescriptionResponse {
    /**
     * Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
     */
    aiaIssuingCertificateUrls: string[];
    /**
     * Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
     */
    authorityKeyId: outputs.privateca.v1beta1.KeyIdResponse;
    /**
     * The hash of the x.509 certificate.
     */
    certFingerprint: outputs.privateca.v1beta1.CertificateFingerprintResponse;
    /**
     * Describes some of the technical fields in a certificate.
     */
    configValues: outputs.privateca.v1beta1.ReusableConfigValuesResponse;
    /**
     * Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
     */
    crlDistributionPoints: string[];
    /**
     * The public key that corresponds to an issued certificate.
     */
    publicKey: outputs.privateca.v1beta1.PublicKeyResponse;
    /**
     * Describes some of the values in a certificate that are related to the subject and lifetime.
     */
    subjectDescription: outputs.privateca.v1beta1.SubjectDescriptionResponse;
    /**
     * Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
     */
    subjectKeyId: outputs.privateca.v1beta1.KeyIdResponse;
}

/**
 * A group of fingerprints for the x509 certificate.
 */
export interface CertificateFingerprintResponse {
    /**
     * The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
     */
    sha256Hash: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
 */
export interface ExtendedKeyUsageOptionsResponse {
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
     */
    clientAuth: boolean;
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
     */
    codeSigning: boolean;
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
     */
    emailProtection: boolean;
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
     */
    ocspSigning: boolean;
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
     */
    serverAuth: boolean;
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
     */
    timeStamping: boolean;
}

/**
 * IssuanceModes specifies the allowed ways in which Certificates may be requested from this CertificateAuthority.
 */
export interface IssuanceModesResponse {
    /**
     * When true, allows callers to create Certificates by specifying a CertificateConfig.
     */
    allowConfigBasedIssuance: boolean;
    /**
     * When true, allows callers to create Certificates by specifying a CSR.
     */
    allowCsrBasedIssuance: boolean;
}

/**
 * Options that affect all certificates issued by a CertificateAuthority.
 */
export interface IssuingOptionsResponse {
    /**
     * When true, includes a URL to the issuing CA certificate in the "authority information access" X.509 extension.
     */
    includeCaCertUrl: boolean;
    /**
     * When true, includes a URL to the CRL corresponding to certificates issued from a CertificateAuthority. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
     */
    includeCrlAccessUrl: boolean;
}

/**
 * A KeyId identifies a specific public key, usually by hashing the public key.
 */
export interface KeyIdResponse {
    /**
     * Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
     */
    keyId: string;
}

/**
 * KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
 */
export interface KeyUsageOptionsResponse {
    /**
     * The key may be used to sign certificates.
     */
    certSign: boolean;
    /**
     * The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
     */
    contentCommitment: boolean;
    /**
     * The key may be used sign certificate revocation lists.
     */
    crlSign: boolean;
    /**
     * The key may be used to encipher data.
     */
    dataEncipherment: boolean;
    /**
     * The key may be used to decipher only.
     */
    decipherOnly: boolean;
    /**
     * The key may be used for digital signatures.
     */
    digitalSignature: boolean;
    /**
     * The key may be used to encipher only.
     */
    encipherOnly: boolean;
    /**
     * The key may be used in a key agreement protocol.
     */
    keyAgreement: boolean;
    /**
     * The key may be used to encipher other keys.
     */
    keyEncipherment: boolean;
}

/**
 * A KeyUsage describes key usage values that may appear in an X.509 certificate.
 */
export interface KeyUsageResponse {
    /**
     * Describes high-level ways in which a key may be used.
     */
    baseKeyUsage: outputs.privateca.v1beta1.KeyUsageOptionsResponse;
    /**
     * Detailed scenarios in which a key may be used.
     */
    extendedKeyUsage: outputs.privateca.v1beta1.ExtendedKeyUsageOptionsResponse;
    /**
     * Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
     */
    unknownExtendedKeyUsages: outputs.privateca.v1beta1.ObjectIdResponse[];
}

/**
 * A Cloud KMS key configuration that a CertificateAuthority will use.
 */
export interface KeyVersionSpecResponse {
    /**
     * The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
     */
    algorithm: string;
    /**
     * The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*&#47;cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
     */
    cloudKmsKeyVersion: string;
}

/**
 * An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
 */
export interface ObjectIdResponse {
    /**
     * The parts of an OID path. The most significant parts of the path come first.
     */
    objectIdPath: number[];
}

/**
 * A PublicKey describes a public key.
 */
export interface PublicKeyResponse {
    /**
     * A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) structure containing an algorithm identifier and a key.
     */
    key: string;
    /**
     * Optional. The type of public key. If specified, it must match the public key used for the`key` field.
     */
    type: string;
}

/**
 * A ReusableConfigValues is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
 */
export interface ReusableConfigValuesResponse {
    /**
     * Optional. Describes custom X.509 extensions.
     */
    additionalExtensions: outputs.privateca.v1beta1.X509ExtensionResponse[];
    /**
     * Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
     */
    aiaOcspServers: string[];
    /**
     * Optional. Describes options in this ReusableConfigValues that are relevant in a CA certificate.
     */
    caOptions: outputs.privateca.v1beta1.CaOptionsResponse;
    /**
     * Optional. Indicates the intended use for keys that correspond to a certificate.
     */
    keyUsage: outputs.privateca.v1beta1.KeyUsageResponse;
    /**
     * Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
     */
    policyIds: outputs.privateca.v1beta1.ObjectIdResponse[];
}

/**
 * A ReusableConfigWrapper describes values that may assist in creating an X.509 certificate, or a reference to a pre-defined set of values.
 */
export interface ReusableConfigWrapperResponse {
    /**
     * A resource path to a ReusableConfig in the format `projects/*&#47;locations/*&#47;reusableConfigs/*`.
     */
    reusableConfig: string;
    /**
     * A user-specified inline ReusableConfigValues.
     */
    reusableConfigValues: outputs.privateca.v1beta1.ReusableConfigValuesResponse;
}

/**
 * Describes fields that are relavent to the revocation of a Certificate.
 */
export interface RevocationDetailsResponse {
    /**
     * Indicates why a Certificate was revoked.
     */
    revocationState: string;
    /**
     * The time at which this Certificate was revoked.
     */
    revocationTime: string;
}

/**
 * SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
 */
export interface SubjectAltNamesResponse {
    /**
     * Contains additional subject alternative name values.
     */
    customSans: outputs.privateca.v1beta1.X509ExtensionResponse[];
    /**
     * Contains only valid, fully-qualified host names.
     */
    dnsNames: string[];
    /**
     * Contains only valid RFC 2822 E-mail addresses.
     */
    emailAddresses: string[];
    /**
     * Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
     */
    ipAddresses: string[];
    /**
     * Contains only valid RFC 3986 URIs.
     */
    uris: string[];
}

/**
 * These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
 */
export interface SubjectConfigResponse {
    /**
     * Optional. The "common name" of the distinguished name.
     */
    commonName: string;
    /**
     * Contains distinguished name fields such as the location and organization.
     */
    subject: outputs.privateca.v1beta1.SubjectResponse;
    /**
     * Optional. The subject alternative name fields.
     */
    subjectAltName: outputs.privateca.v1beta1.SubjectAltNamesResponse;
}

/**
 * These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
 */
export interface SubjectDescriptionResponse {
    /**
     * The "common name" of the distinguished name.
     */
    commonName: string;
    /**
     * The serial number encoded in lowercase hexadecimal.
     */
    hexSerialNumber: string;
    /**
     * For convenience, the actual lifetime of an issued certificate. Corresponds to 'not_after_time' - 'not_before_time'.
     */
    lifetime: string;
    /**
     * The time at which the certificate expires.
     */
    notAfterTime: string;
    /**
     * The time at which the certificate becomes valid.
     */
    notBeforeTime: string;
    /**
     * Contains distinguished name fields such as the location and organization.
     */
    subject: outputs.privateca.v1beta1.SubjectResponse;
    /**
     * The subject alternative name fields.
     */
    subjectAltName: outputs.privateca.v1beta1.SubjectAltNamesResponse;
}

/**
 * Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
 */
export interface SubjectResponse {
    /**
     * The country code of the subject.
     */
    countryCode: string;
    /**
     * The locality or city of the subject.
     */
    locality: string;
    /**
     * The organization of the subject.
     */
    organization: string;
    /**
     * The organizational_unit of the subject.
     */
    organizationalUnit: string;
    /**
     * The postal code of the subject.
     */
    postalCode: string;
    /**
     * The province, territory, or regional state of the subject.
     */
    province: string;
    /**
     * The street address of the subject.
     */
    streetAddress: string;
}

/**
 * This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
 */
export interface SubordinateConfigChainResponse {
    /**
     * Expected to be in leaf-to-root order according to RFC 5246.
     */
    pemCertificates: string[];
}

/**
 * Describes a subordinate CA's issuers. This is either a resource path to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
 */
export interface SubordinateConfigResponse {
    /**
     * This can refer to a CertificateAuthority that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*&#47;locations/*&#47;certificateAuthorities/*`.
     */
    certificateAuthority: string;
    /**
     * Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
     */
    pemIssuerChain: outputs.privateca.v1beta1.SubordinateConfigChainResponse;
}

/**
 * An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
 */
export interface X509ExtensionResponse {
    /**
     * Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
     */
    critical: boolean;
    /**
     * The OID for this X.509 extension.
     */
    objectId: outputs.privateca.v1beta1.ObjectIdResponse;
    /**
     * The value of this X.509 extension.
     */
    value: string;
}

