// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Describes a "type" of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.
 */
export interface AllowedKeyTypeArgs {
    /**
     * Represents an allowed Elliptic Curve key type.
     */
    ellipticCurve?: pulumi.Input<inputs.privateca.v1.EcKeyTypeArgs>;
    /**
     * Represents an allowed RSA key type.
     */
    rsa?: pulumi.Input<inputs.privateca.v1.RsaKeyTypeArgs>;
}

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface AuditConfigArgs {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs?: pulumi.Input<pulumi.Input<inputs.privateca.v1.AuditLogConfigArgs>[]>;
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service?: pulumi.Input<string>;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigArgs {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The log type that this config enables.
     */
    logType?: pulumi.Input<enums.privateca.v1.AuditLogConfigLogType>;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingArgs {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition?: pulumi.Input<inputs.privateca.v1.ExprArgs>;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role?: pulumi.Input<string>;
}

/**
 * Describes values that are relevant in a CA certificate.
 */
export interface CaOptionsArgs {
    /**
     * Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
     */
    isCa?: pulumi.Input<boolean>;
    /**
     * Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
     */
    maxIssuerPathLength?: pulumi.Input<number>;
}

/**
 * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
 */
export interface CertificateConfigArgs {
    /**
     * Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
     */
    publicKey?: pulumi.Input<inputs.privateca.v1.PublicKeyArgs>;
    /**
     * Specifies some of the values in a certificate that are related to the subject.
     */
    subjectConfig: pulumi.Input<inputs.privateca.v1.SubjectConfigArgs>;
    /**
     * Describes how some of the technical X.509 fields in a certificate should be populated.
     */
    x509Config: pulumi.Input<inputs.privateca.v1.X509ParametersArgs>;
}

/**
 * Describes a set of X.509 extensions that may be part of some certificate issuance controls.
 */
export interface CertificateExtensionConstraintsArgs {
    /**
     * Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
     */
    additionalExtensions?: pulumi.Input<pulumi.Input<inputs.privateca.v1.ObjectIdArgs>[]>;
    /**
     * Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
     */
    knownExtensions?: pulumi.Input<pulumi.Input<enums.privateca.v1.CertificateExtensionConstraintsKnownExtensionsItem>[]>;
}

/**
 * Describes constraints on a Certificate's Subject and SubjectAltNames.
 */
export interface CertificateIdentityConstraintsArgs {
    /**
     * If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
     */
    allowSubjectAltNamesPassthrough: pulumi.Input<boolean>;
    /**
     * If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
     */
    allowSubjectPassthrough: pulumi.Input<boolean>;
    /**
     * Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
     */
    celExpression?: pulumi.Input<inputs.privateca.v1.ExprArgs>;
}

/**
 * Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
 */
export interface EcKeyTypeArgs {
    /**
     * Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
     */
    signatureAlgorithm?: pulumi.Input<enums.privateca.v1.EcKeyTypeSignatureAlgorithm>;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprArgs {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description?: pulumi.Input<string>;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression?: pulumi.Input<string>;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location?: pulumi.Input<string>;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title?: pulumi.Input<string>;
}

/**
 * KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
 */
export interface ExtendedKeyUsageOptionsArgs {
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
     */
    clientAuth?: pulumi.Input<boolean>;
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
     */
    codeSigning?: pulumi.Input<boolean>;
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
     */
    emailProtection?: pulumi.Input<boolean>;
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
     */
    ocspSigning?: pulumi.Input<boolean>;
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
     */
    serverAuth?: pulumi.Input<boolean>;
    /**
     * Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
     */
    timeStamping?: pulumi.Input<boolean>;
}

/**
 * IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
 */
export interface IssuanceModesArgs {
    /**
     * Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
     */
    allowConfigBasedIssuance?: pulumi.Input<boolean>;
    /**
     * Optional. When true, allows callers to create Certificates by specifying a CSR.
     */
    allowCsrBasedIssuance?: pulumi.Input<boolean>;
}

/**
 * Defines controls over all certificate issuance within a CaPool.
 */
export interface IssuancePolicyArgs {
    /**
     * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
     */
    allowedIssuanceModes?: pulumi.Input<inputs.privateca.v1.IssuanceModesArgs>;
    /**
     * Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
     */
    allowedKeyTypes?: pulumi.Input<pulumi.Input<inputs.privateca.v1.AllowedKeyTypeArgs>[]>;
    /**
     * Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
     */
    baselineValues?: pulumi.Input<inputs.privateca.v1.X509ParametersArgs>;
    /**
     * Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
     */
    identityConstraints?: pulumi.Input<inputs.privateca.v1.CertificateIdentityConstraintsArgs>;
    /**
     * Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
     */
    maximumLifetime?: pulumi.Input<string>;
    /**
     * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
     */
    passthroughExtensions?: pulumi.Input<inputs.privateca.v1.CertificateExtensionConstraintsArgs>;
}

/**
 * A KeyUsage describes key usage values that may appear in an X.509 certificate.
 */
export interface KeyUsageArgs {
    /**
     * Describes high-level ways in which a key may be used.
     */
    baseKeyUsage?: pulumi.Input<inputs.privateca.v1.KeyUsageOptionsArgs>;
    /**
     * Detailed scenarios in which a key may be used.
     */
    extendedKeyUsage?: pulumi.Input<inputs.privateca.v1.ExtendedKeyUsageOptionsArgs>;
    /**
     * Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
     */
    unknownExtendedKeyUsages?: pulumi.Input<pulumi.Input<inputs.privateca.v1.ObjectIdArgs>[]>;
}

/**
 * KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
 */
export interface KeyUsageOptionsArgs {
    /**
     * The key may be used to sign certificates.
     */
    certSign?: pulumi.Input<boolean>;
    /**
     * The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
     */
    contentCommitment?: pulumi.Input<boolean>;
    /**
     * The key may be used sign certificate revocation lists.
     */
    crlSign?: pulumi.Input<boolean>;
    /**
     * The key may be used to encipher data.
     */
    dataEncipherment?: pulumi.Input<boolean>;
    /**
     * The key may be used to decipher only.
     */
    decipherOnly?: pulumi.Input<boolean>;
    /**
     * The key may be used for digital signatures.
     */
    digitalSignature?: pulumi.Input<boolean>;
    /**
     * The key may be used to encipher only.
     */
    encipherOnly?: pulumi.Input<boolean>;
    /**
     * The key may be used in a key agreement protocol.
     */
    keyAgreement?: pulumi.Input<boolean>;
    /**
     * The key may be used to encipher other keys.
     */
    keyEncipherment?: pulumi.Input<boolean>;
}

/**
 * A Cloud KMS key configuration that a CertificateAuthority will use.
 */
export interface KeyVersionSpecArgs {
    /**
     * The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
     */
    algorithm?: pulumi.Input<enums.privateca.v1.KeyVersionSpecAlgorithm>;
    /**
     * The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*&#47;cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
     */
    cloudKmsKeyVersion?: pulumi.Input<string>;
}

/**
 * An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
 */
export interface ObjectIdArgs {
    /**
     * The parts of an OID path. The most significant parts of the path come first.
     */
    objectIdPath: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * A PublicKey describes a public key.
 */
export interface PublicKeyArgs {
    /**
     * The format of the public key.
     */
    format: pulumi.Input<enums.privateca.v1.PublicKeyFormat>;
    /**
     * A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
     */
    key: pulumi.Input<string>;
}

/**
 * Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
 */
export interface PublishingOptionsArgs {
    /**
     * Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
     */
    publishCaCert?: pulumi.Input<boolean>;
    /**
     * Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
     */
    publishCrl?: pulumi.Input<boolean>;
}

/**
 * Describes an RSA key that may be used in a Certificate issued from a CaPool.
 */
export interface RsaKeyTypeArgs {
    /**
     * Optional. The maximum allowed RSA modulus size (inclusive), in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
     */
    maxModulusSize?: pulumi.Input<string>;
    /**
     * Optional. The minimum allowed RSA modulus size (inclusive), in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
     */
    minModulusSize?: pulumi.Input<string>;
}

/**
 * Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
 */
export interface SubjectArgs {
    /**
     * The "common name" of the subject.
     */
    commonName?: pulumi.Input<string>;
    /**
     * The country code of the subject.
     */
    countryCode?: pulumi.Input<string>;
    /**
     * The locality or city of the subject.
     */
    locality?: pulumi.Input<string>;
    /**
     * The organization of the subject.
     */
    organization?: pulumi.Input<string>;
    /**
     * The organizational_unit of the subject.
     */
    organizationalUnit?: pulumi.Input<string>;
    /**
     * The postal code of the subject.
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The province, territory, or regional state of the subject.
     */
    province?: pulumi.Input<string>;
    /**
     * The street address of the subject.
     */
    streetAddress?: pulumi.Input<string>;
}

/**
 * SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
 */
export interface SubjectAltNamesArgs {
    /**
     * Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.
     */
    customSans?: pulumi.Input<pulumi.Input<inputs.privateca.v1.X509ExtensionArgs>[]>;
    /**
     * Contains only valid, fully-qualified host names.
     */
    dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains only valid RFC 2822 E-mail addresses.
     */
    emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
     */
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains only valid RFC 3986 URIs.
     */
    uris?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
 */
export interface SubjectConfigArgs {
    /**
     * Contains distinguished name fields such as the common name, location and organization.
     */
    subject: pulumi.Input<inputs.privateca.v1.SubjectArgs>;
    /**
     * Optional. The subject alternative name fields.
     */
    subjectAltName?: pulumi.Input<inputs.privateca.v1.SubjectAltNamesArgs>;
}

/**
 * Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
 */
export interface SubordinateConfigArgs {
    /**
     * This can refer to a CertificateAuthority that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*&#47;locations/*&#47;caPools/*&#47;certificateAuthorities/*`.
     */
    certificateAuthority: pulumi.Input<string>;
    /**
     * Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
     */
    pemIssuerChain: pulumi.Input<inputs.privateca.v1.SubordinateConfigChainArgs>;
}

/**
 * This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
 */
export interface SubordinateConfigChainArgs {
    /**
     * Expected to be in leaf-to-root order according to RFC 5246.
     */
    pemCertificates: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
 */
export interface X509ExtensionArgs {
    /**
     * Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
     */
    critical?: pulumi.Input<boolean>;
    /**
     * The OID for this X.509 extension.
     */
    objectId: pulumi.Input<inputs.privateca.v1.ObjectIdArgs>;
    /**
     * The value of this X.509 extension.
     */
    value: pulumi.Input<string>;
}

/**
 * An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
 */
export interface X509ParametersArgs {
    /**
     * Optional. Describes custom X.509 extensions.
     */
    additionalExtensions?: pulumi.Input<pulumi.Input<inputs.privateca.v1.X509ExtensionArgs>[]>;
    /**
     * Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
     */
    aiaOcspServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
     */
    caOptions?: pulumi.Input<inputs.privateca.v1.CaOptionsArgs>;
    /**
     * Optional. Indicates the intended use for keys that correspond to a certificate.
     */
    keyUsage?: pulumi.Input<inputs.privateca.v1.KeyUsageArgs>;
    /**
     * Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
     */
    policyIds?: pulumi.Input<pulumi.Input<inputs.privateca.v1.ObjectIdArgs>[]>;
}

