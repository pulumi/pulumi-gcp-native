// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Accelerator describes Compute Engine accelerators to be attached to the VM.
 */
export interface AcceleratorArgs {
    /**
     * The number of accelerators of this type.
     */
    count?: pulumi.Input<string>;
    /**
     * Deprecated: please use instances[0].install_gpu_drivers instead.
     *
     * @deprecated Deprecated: please use instances[0].install_gpu_drivers instead.
     */
    installGpuDrivers?: pulumi.Input<boolean>;
    /**
     * The accelerator type. For example, "nvidia-tesla-t4". See `gcloud compute accelerator-types list`.
     */
    type?: pulumi.Input<string>;
}

/**
 * Conditions for actions to deal with task failures.
 */
export interface ActionConditionArgs {
    /**
     * Exit codes of a task execution. If there are more than 1 exit codes, when task executes with any of the exit code in the list, the condition is met and the action will be executed.
     */
    exitCodes?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job.
 */
export interface AllocationPolicyArgs {
    /**
     * Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.batch.v1.InstancePolicyOrTemplateArgs>[]>;
    /**
     * Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location where compute resources should be allocated for the Job.
     */
    location?: pulumi.Input<inputs.batch.v1.LocationPolicyArgs>;
    /**
     * The network policy.
     */
    network?: pulumi.Input<inputs.batch.v1.NetworkPolicyArgs>;
    /**
     * Service account that VMs will run as.
     */
    serviceAccount?: pulumi.Input<inputs.batch.v1.ServiceAccountArgs>;
}

/**
 * A new or an existing persistent disk (PD) or a local ssd attached to a VM instance.
 */
export interface AttachedDiskArgs {
    /**
     * Device name that the guest operating system will see. It is used by Runnable.volumes field to mount disks. So please specify the device_name if you want Batch to help mount the disk, and it should match the device_name field in volumes.
     */
    deviceName?: pulumi.Input<string>;
    /**
     * Name of an existing PD.
     */
    existingDisk?: pulumi.Input<string>;
    newDisk?: pulumi.Input<inputs.batch.v1.DiskArgs>;
}

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface AuditConfigArgs {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs?: pulumi.Input<pulumi.Input<inputs.batch.v1.AuditLogConfigArgs>[]>;
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service?: pulumi.Input<string>;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigArgs {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The log type that this config enables.
     */
    logType?: pulumi.Input<enums.batch.v1.AuditLogConfigLogType>;
}

/**
 * Barrier runnable blocks until all tasks in a taskgroup reach it.
 */
export interface BarrierArgs {
    /**
     * Barriers are identified by their index in runnable list. Names are not required, but if present should be an identifier.
     */
    name?: pulumi.Input<string>;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingArgs {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition?: pulumi.Input<inputs.batch.v1.ExprArgs>;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role?: pulumi.Input<string>;
}

/**
 * Compute resource requirements
 */
export interface ComputeResourceArgs {
    /**
     * Extra boot disk size in MiB for each task.
     */
    bootDiskMib?: pulumi.Input<string>;
    /**
     * The milliCPU count.
     */
    cpuMilli?: pulumi.Input<string>;
    /**
     * Memory in MiB.
     */
    memoryMib?: pulumi.Input<string>;
}

/**
 * Container runnable.
 */
export interface ContainerArgs {
    /**
     * If set to true, external network access to and from container will be blocked. The container will use the default internal network 'goog-internal'.
     */
    blockExternalNetwork?: pulumi.Input<boolean>;
    /**
     * Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
     */
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Overrides the `ENTRYPOINT` specified in the container.
     */
    entrypoint?: pulumi.Input<string>;
    /**
     * The URI to pull the container image from.
     */
    imageUri?: pulumi.Input<string>;
    /**
     * Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".
     */
    options?: pulumi.Input<string>;
    /**
     * Optional password for logging in to a docker registry. If password matches "projects/*&#47;secrets/*&#47;versions/*" then Batch will read the password from the Secret Manager;
     */
    password?: pulumi.Input<string>;
    /**
     * Optional username for logging in to a docker registry. If username matches "projects/*&#47;secrets/*&#47;versions/*" then Batch will read the username from the Secret Manager.
     */
    username?: pulumi.Input<string>;
    /**
     * Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
     */
    volumes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. https://cloud.google.com/compute/docs/disks#pdspecs. https://cloud.google.com/compute/docs/disks#localssds.
 */
export interface DiskArgs {
    /**
     * Local SSDs are available through both "SCSI" and "NVMe" interfaces. If not indicated, "NVMe" will be the default one for local ssds. We only support "SCSI" for persistent disks now.
     */
    diskInterface?: pulumi.Input<string>;
    /**
     * Name of a public or custom image used as the data source.
     */
    image?: pulumi.Input<string>;
    /**
     * Disk size in GB. This field is ignored if `data_source` is `disk` or `image`. If `type` is `local-ssd`, size_gb should be a multiple of 375GB, otherwise, the final size will be the next greater multiple of 375 GB.
     */
    sizeGb?: pulumi.Input<string>;
    /**
     * Name of a snapshot used as the data source.
     */
    snapshot?: pulumi.Input<string>;
    /**
     * Disk type as shown in `gcloud compute disk-types list` For example, "pd-ssd", "pd-standard", "pd-balanced", "local-ssd".
     */
    type?: pulumi.Input<string>;
}

/**
 * An Environment describes a collection of environment variables to set when executing Tasks.
 */
export interface EnvironmentArgs {
    /**
     * A map of environment variable names to values.
     */
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprArgs {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description?: pulumi.Input<string>;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression?: pulumi.Input<string>;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location?: pulumi.Input<string>;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title?: pulumi.Input<string>;
}

/**
 * Represents a Google Cloud Storage volume.
 */
export interface GCSArgs {
    /**
     * Remote path, either a bucket name or a subdirectory of a bucket, e.g.: bucket_name, bucket_name/subdirectory/
     */
    remotePath?: pulumi.Input<string>;
}

/**
 * InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.
 */
export interface InstancePolicyArgs {
    /**
     * The accelerators attached to each VM instance.
     */
    accelerators?: pulumi.Input<pulumi.Input<inputs.batch.v1.AcceleratorArgs>[]>;
    /**
     * Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.batch.v1.AttachedDiskArgs>[]>;
    /**
     * The Compute Engine machine type.
     */
    machineType?: pulumi.Input<string>;
    /**
     * The minimum CPU platform. See `https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform`. Not yet implemented.
     */
    minCpuPlatform?: pulumi.Input<string>;
    /**
     * The provisioning model.
     */
    provisioningModel?: pulumi.Input<enums.batch.v1.InstancePolicyProvisioningModel>;
}

/**
 * Either an InstancePolicy or an instance template.
 */
export interface InstancePolicyOrTemplateArgs {
    /**
     * Set this field true if users want Batch to help fetch drivers from a third party location and install them for GPUs specified in policy.accelerators or instance_template on their behalf. Default is false.
     */
    installGpuDrivers?: pulumi.Input<boolean>;
    /**
     * Name of an instance template used to create VMs. Named the field as 'instance_template' instead of 'template' to avoid c++ keyword conflict.
     */
    instanceTemplate?: pulumi.Input<string>;
    /**
     * InstancePolicy.
     */
    policy?: pulumi.Input<inputs.batch.v1.InstancePolicyArgs>;
}

/**
 * Notification configurations.
 */
export interface JobNotificationArgs {
    /**
     * The attribute requirements of messages to be sent to this Pub/Sub topic. Without this field, no message will be sent.
     */
    message?: pulumi.Input<inputs.batch.v1.MessageArgs>;
    /**
     * The Pub/Sub topic where notifications like the job state changes will be published. This topic exist in the same project as the job and billings will be charged to this project. If not specified, no Pub/Sub messages will be sent. Topic format: `projects/{project}/topics/{topic}`.
     */
    pubsubTopic?: pulumi.Input<string>;
}

/**
 * LifecyclePolicy describes how to deal with task failures based on different conditions.
 */
export interface LifecyclePolicyArgs {
    /**
     * Action to execute when ActionCondition is true.
     */
    action?: pulumi.Input<enums.batch.v1.LifecyclePolicyAction>;
    /**
     * Conditions that decide why a task failure is dealt with a specific action.
     */
    actionCondition?: pulumi.Input<inputs.batch.v1.ActionConditionArgs>;
}

export interface LocationPolicyArgs {
    /**
     * A list of allowed location names represented by internal URLs. Each location can be a region or a zone. Only one region or multiple zones in one region is supported now. For example, ["regions/us-central1"] allow VMs in any zones in region us-central1. ["zones/us-central1-a", "zones/us-central1-c"] only allow VMs in zones us-central1-a and us-central1-c. All locations end up in different regions would cause errors. For example, ["regions/us-central1", "zones/us-central1-a", "zones/us-central1-b", "zones/us-west1-a"] contains 2 regions "us-central1" and "us-west1". An error is expected in this case.
     */
    allowedLocations?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved.
 */
export interface LogsPolicyArgs {
    /**
     * Where logs should be saved.
     */
    destination?: pulumi.Input<enums.batch.v1.LogsPolicyDestination>;
    /**
     * The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path.
     */
    logsPath?: pulumi.Input<string>;
}

/**
 * Message details. Describe the attribute that a message should have. Without specified message attributes, no message will be sent by default.
 */
export interface MessageArgs {
    /**
     * The new job state.
     */
    newJobState?: pulumi.Input<enums.batch.v1.MessageNewJobState>;
    /**
     * The new task state.
     */
    newTaskState?: pulumi.Input<enums.batch.v1.MessageNewTaskState>;
    /**
     * The message type.
     */
    type?: pulumi.Input<enums.batch.v1.MessageType>;
}

/**
 * Represents an NFS volume.
 */
export interface NFSArgs {
    /**
     * Remote source path exported from the NFS, e.g., "/share".
     */
    remotePath?: pulumi.Input<string>;
    /**
     * The IP address of the NFS.
     */
    server?: pulumi.Input<string>;
}

/**
 * A network interface.
 */
export interface NetworkInterfaceArgs {
    /**
     * The URL of the network resource.
     */
    network?: pulumi.Input<string>;
    /**
     * Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https://cloud.google.com/vpc/docs/configure-private-google-access and https://cloud.google.com/nat/docs/gce-example#create-nat for more information.
     */
    noExternalIpAddress?: pulumi.Input<boolean>;
    /**
     * The URL of the Subnetwork resource.
     */
    subnetwork?: pulumi.Input<string>;
}

/**
 * NetworkPolicy describes VM instance network configurations.
 */
export interface NetworkPolicyArgs {
    /**
     * Network configurations.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.batch.v1.NetworkInterfaceArgs>[]>;
}

/**
 * Runnable describes instructions for executing a specific script or container as part of a Task.
 */
export interface RunnableArgs {
    /**
     * By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.
     */
    alwaysRun?: pulumi.Input<boolean>;
    /**
     * This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
     */
    background?: pulumi.Input<boolean>;
    /**
     * Barrier runnable.
     */
    barrier?: pulumi.Input<inputs.batch.v1.BarrierArgs>;
    /**
     * Container runnable.
     */
    container?: pulumi.Input<inputs.batch.v1.ContainerArgs>;
    /**
     * Environment variables for this Runnable (overrides variables set for the whole Task or TaskGroup).
     */
    environment?: pulumi.Input<inputs.batch.v1.EnvironmentArgs>;
    /**
     * Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.
     */
    ignoreExitStatus?: pulumi.Input<boolean>;
    /**
     * Script runnable.
     */
    script?: pulumi.Input<inputs.batch.v1.ScriptArgs>;
    /**
     * Timeout for this Runnable.
     */
    timeout?: pulumi.Input<string>;
}

/**
 * Script runnable.
 */
export interface ScriptArgs {
    /**
     * Script file path on the host VM.
     */
    path?: pulumi.Input<string>;
    /**
     * Shell script text.
     */
    text?: pulumi.Input<string>;
}

/**
 * Carries information about a Google Cloud service account.
 */
export interface ServiceAccountArgs {
    /**
     * Email address of the service account. If not specified, the default Compute Engine service account for the project will be used. If instance template is being used, the service account has to be specified in the instance template and it has to match the email field here.
     */
    email?: pulumi.Input<string>;
}

/**
 * A TaskGroup contains one or multiple Tasks that share the same Runnable but with different runtime parameters.
 */
export interface TaskGroupArgs {
    /**
     * Max number of tasks that can run in parallel. Default to min(task_count, 1000).
     */
    parallelism?: pulumi.Input<string>;
    /**
     * When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.
     */
    permissiveSsh?: pulumi.Input<boolean>;
    /**
     * When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false.
     */
    requireHostsFile?: pulumi.Input<boolean>;
    /**
     * Number of Tasks in the TaskGroup. default is 1
     */
    taskCount?: pulumi.Input<string>;
    /**
     * Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.
     */
    taskCountPerNode?: pulumi.Input<string>;
    /**
     * An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1). task_environments supports up to 200 entries.
     */
    taskEnvironments?: pulumi.Input<pulumi.Input<inputs.batch.v1.EnvironmentArgs>[]>;
    /**
     * Tasks in the group share the same task spec.
     */
    taskSpec: pulumi.Input<inputs.batch.v1.TaskSpecArgs>;
}

/**
 * Spec of a task
 */
export interface TaskSpecArgs {
    /**
     * ComputeResource requirements.
     */
    computeResource?: pulumi.Input<inputs.batch.v1.ComputeResourceArgs>;
    /**
     * Environment variables to set before running the Task.
     */
    environment?: pulumi.Input<inputs.batch.v1.EnvironmentArgs>;
    /**
     * Environment variables to set before running the Task. You can set up to 100 environments.
     */
    environments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Lifecycle management schema when any task in a task group is failed. The valid size of lifecycle policies are [0, 10]. For each lifecycle policy, when the condition is met, the action in that policy will execute. If there are multiple policies that the task execution result matches, we use the action from the first matched policy. If task execution result does not meet with any of the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.
     */
    lifecyclePolicies?: pulumi.Input<pulumi.Input<inputs.batch.v1.LifecyclePolicyArgs>[]>;
    /**
     * Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].
     */
    maxRetryCount?: pulumi.Input<number>;
    /**
     * Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
     */
    maxRunDuration?: pulumi.Input<string>;
    /**
     * The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.
     */
    runnables?: pulumi.Input<pulumi.Input<inputs.batch.v1.RunnableArgs>[]>;
    /**
     * Volumes to mount before running Tasks using this TaskSpec.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.batch.v1.VolumeArgs>[]>;
}

/**
 * Volume describes a volume and parameters for it to be mounted to a VM.
 */
export interface VolumeArgs {
    /**
     * Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template.
     */
    deviceName?: pulumi.Input<string>;
    /**
     * A Google Cloud Storage (GCS) volume.
     */
    gcs?: pulumi.Input<inputs.batch.v1.GCSArgs>;
    /**
     * For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html).
     */
    mountOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The mount path for the volume, e.g. /mnt/disks/share.
     */
    mountPath?: pulumi.Input<string>;
    /**
     * A Network File System (NFS) volume. For example, a Filestore file share.
     */
    nfs?: pulumi.Input<inputs.batch.v1.NFSArgs>;
}

