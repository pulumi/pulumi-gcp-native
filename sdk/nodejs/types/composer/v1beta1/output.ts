// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Allowed IP range with user-provided description.
 */
export interface AllowedIpRangeResponse {
    /**
     * Optional. User-provided description. It must contain at most 300 characters.
     */
    description: string;
    /**
     * IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
     */
    value: string;
}

/**
 * CIDR block with an optional name.
 */
export interface CidrBlockResponse {
    /**
     * CIDR block that must be specified in CIDR notation.
     */
    cidrBlock: string;
    /**
     * User-defined name that identifies the CIDR block.
     */
    displayName: string;
}

/**
 * The configuration of Cloud SQL instance that is used by the Apache Airflow software.
 */
export interface DatabaseConfigResponse {
    /**
     * Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    machineType: string;
}

/**
 * The encryption options for the Cloud Composer environment and its dependencies. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
 */
export interface EncryptionConfigResponse {
    /**
     * Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
     */
    kmsKeyName: string;
}

/**
 * Configuration information for an environment.
 */
export interface EnvironmentConfigResponse {
    /**
     * The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
     */
    airflowUri: string;
    /**
     * The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
     */
    dagGcsPrefix: string;
    /**
     * Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
     */
    databaseConfig: outputs.composer.v1beta1.DatabaseConfigResponse;
    /**
     * Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
     */
    encryptionConfig: outputs.composer.v1beta1.EncryptionConfigResponse;
    /**
     * Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     */
    environmentSize: string;
    /**
     * The Kubernetes Engine cluster used to run this environment.
     */
    gkeCluster: string;
    /**
     * Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, Cloud Composer components may be subject to maintenance at any time.
     */
    maintenanceWindow: outputs.composer.v1beta1.MaintenanceWindowResponse;
    /**
     * Optional. The configuration options for GKE cluster master authorized networks. By default master authorized networks feature is: - in case of private environment: enabled with no external networks allowlisted. - in case of public environment: disabled.
     */
    masterAuthorizedNetworksConfig: outputs.composer.v1beta1.MasterAuthorizedNetworksConfigResponse;
    /**
     * The configuration used for the Kubernetes Engine cluster.
     */
    nodeConfig: outputs.composer.v1beta1.NodeConfigResponse;
    /**
     * The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    nodeCount: number;
    /**
     * The configuration used for the Private IP Cloud Composer environment.
     */
    privateEnvironmentConfig: outputs.composer.v1beta1.PrivateEnvironmentConfigResponse;
    /**
     * The configuration settings for software inside the environment.
     */
    softwareConfig: outputs.composer.v1beta1.SoftwareConfigResponse;
    /**
     * Optional. The configuration settings for the Airflow web server App Engine instance. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    webServerConfig: outputs.composer.v1beta1.WebServerConfigResponse;
    /**
     * Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
     */
    webServerNetworkAccessControl: outputs.composer.v1beta1.WebServerNetworkAccessControlResponse;
    /**
     * Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     */
    workloadsConfig: outputs.composer.v1beta1.WorkloadsConfigResponse;
}

/**
 * Configuration for controlling how IPs are allocated in the GKE cluster.
 */
export interface IPAllocationPolicyResponse {
    /**
     * Optional. The IP address range used to allocate IP addresses to pods in the cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
     */
    clusterIpv4CidrBlock: string;
    /**
     * Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
     */
    clusterSecondaryRangeName: string;
    /**
     * Optional. The IP address range of the services IP addresses in this cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
     */
    servicesIpv4CidrBlock: string;
    /**
     * Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
     */
    servicesSecondaryRangeName: string;
    /**
     * Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
     */
    useIpAliases: boolean;
}

/**
 * The configuration settings for Cloud Composer maintenance window. The following example: ``` { "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" } ``` would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
 */
export interface MaintenanceWindowResponse {
    /**
     * Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end_time must be in the future, relative to `start_time`.
     */
    endTime: string;
    /**
     * Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
     */
    recurrence: string;
    /**
     * Start time of the first recurrence of the maintenance window.
     */
    startTime: string;
}

/**
 * Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
 */
export interface MasterAuthorizedNetworksConfigResponse {
    /**
     * Up to 50 external networks that could access Kubernetes master through HTTPS.
     */
    cidrBlocks: outputs.composer.v1beta1.CidrBlockResponse[];
    /**
     * Whether or not master authorized networks feature is enabled.
     */
    enabled: boolean;
}

/**
 * Configuration options for networking connections in the Composer 2 environment.
 */
export interface NetworkingConfigResponse {
    /**
     * Optional. Indicates the user requested specifc connection type between Tenant and Customer projects. You cannot set networking connection type in public IP environment.
     */
    connectionType: string;
}

/**
 * The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
 */
export interface NodeConfigResponse {
    /**
     * Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    diskSizeGb: number;
    /**
     * Optional. Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for all destination addresses, except between pods traffic. See: https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent
     */
    enableIpMasqAgent: boolean;
    /**
     * Optional. The IPAllocationPolicy fields for the GKE cluster.
     */
    ipAllocationPolicy: outputs.composer.v1beta1.IPAllocationPolicyResponse;
    /**
     * Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    location: string;
    /**
     * Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    machineType: string;
    /**
     * Optional. The maximum number of pods per node in the Cloud Composer GKE cluster. The value must be between 8 and 110 and it can be set only if the environment is VPC-native. The default value is 32. Values of this field will be propagated both to the `default-pool` node pool of the newly created GKE cluster, and to the default "Maximum Pods per Node" value which is used for newly created node pools if their value is not explicitly set during node pool creation. For more information, see [Optimizing IP address allocation] (https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    maxPodsPerNode: number;
    /**
     * Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the default network in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
     */
    network: string;
    /**
     * Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    oauthScopes: string[];
    /**
     * Optional. The Google Cloud Platform Service Account to be used by the workloads. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
     */
    serviceAccount: string;
    /**
     * Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
     */
    subnetwork: string;
    /**
     * Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    tags: string[];
}

/**
 * Configuration options for the private GKE cluster in a Cloud Composer environment.
 */
export interface PrivateClusterConfigResponse {
    /**
     * Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
     */
    enablePrivateEndpoint: boolean;
    /**
     * Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
     */
    masterIpv4CidrBlock: string;
    /**
     * The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
     */
    masterIpv4ReservedRange: string;
}

/**
 * The configuration information for configuring a Private IP Cloud Composer environment.
 */
export interface PrivateEnvironmentConfigResponse {
    /**
     * Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
     */
    cloudComposerConnectionSubnetwork: string;
    /**
     * Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     */
    cloudComposerNetworkIpv4CidrBlock: string;
    /**
     * The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     */
    cloudComposerNetworkIpv4ReservedRange: string;
    /**
     * Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
     */
    cloudSqlIpv4CidrBlock: string;
    /**
     * Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    enablePrivateEnvironment: boolean;
    /**
     * Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for `IPAllocationPolicy.cluster_ipv4_cidr_block` and `IPAllocationPolicy.service_ipv4_cidr_block`.
     */
    enablePrivatelyUsedPublicIps: boolean;
    /**
     * Optional. Configuration for the network connections configuration in the environment.
     */
    networkingConfig: outputs.composer.v1beta1.NetworkingConfigResponse;
    /**
     * Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
     */
    privateClusterConfig: outputs.composer.v1beta1.PrivateClusterConfigResponse;
    /**
     * Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    webServerIpv4CidrBlock: string;
    /**
     * The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    webServerIpv4ReservedRange: string;
}

/**
 * Configuration for resources used by Airflow schedulers.
 */
export interface SchedulerResourceResponse {
    /**
     * Optional. The number of schedulers.
     */
    count: number;
    /**
     * Optional. CPU request and limit for a single Airflow scheduler replica.
     */
    cpu: number;
    /**
     * Optional. Memory (GB) request and limit for a single Airflow scheduler replica.
     */
    memoryGb: number;
    /**
     * Optional. Storage (GB) request and limit for a single Airflow scheduler replica.
     */
    storageGb: number;
}

/**
 * Specifies the selection and configuration of software inside the environment.
 */
export interface SoftwareConfigResponse {
    /**
     * Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
     */
    airflowConfigOverrides: {[key: string]: string};
    /**
     * Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
     */
    envVariables: {[key: string]: string};
    /**
     * The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?)?|latest)-airflow-([0-9]+(\.[0-9]+(\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
     */
    imageVersion: string;
    /**
     * Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
     */
    pypiPackages: {[key: string]: string};
    /**
     * Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
     */
    pythonVersion: string;
    /**
     * Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
     */
    schedulerCount: number;
}

/**
 * The configuration settings for the Airflow web server App Engine instance. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
 */
export interface WebServerConfigResponse {
    /**
     * Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
     */
    machineType: string;
}

/**
 * Network-level access control policy for the Airflow web server.
 */
export interface WebServerNetworkAccessControlResponse {
    /**
     * A collection of allowed IP ranges with descriptions.
     */
    allowedIpRanges: outputs.composer.v1beta1.AllowedIpRangeResponse[];
}

/**
 * Configuration for resources used by Airflow web server.
 */
export interface WebServerResourceResponse {
    /**
     * Optional. CPU request and limit for Airflow web server.
     */
    cpu: number;
    /**
     * Optional. Memory (GB) request and limit for Airflow web server.
     */
    memoryGb: number;
    /**
     * Optional. Storage (GB) request and limit for Airflow web server.
     */
    storageGb: number;
}

/**
 * Configuration for resources used by Airflow workers.
 */
export interface WorkerResourceResponse {
    /**
     * Optional. CPU request and limit for a single Airflow worker replica.
     */
    cpu: number;
    /**
     * Optional. Maximum number of workers for autoscaling.
     */
    maxCount: number;
    /**
     * Optional. Memory (GB) request and limit for a single Airflow worker replica.
     */
    memoryGb: number;
    /**
     * Optional. Minimum number of workers for autoscaling.
     */
    minCount: number;
    /**
     * Optional. Storage (GB) request and limit for a single Airflow worker replica.
     */
    storageGb: number;
}

/**
 * The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
 */
export interface WorkloadsConfigResponse {
    /**
     * Optional. Resources used by Airflow schedulers.
     */
    scheduler: outputs.composer.v1beta1.SchedulerResourceResponse;
    /**
     * Optional. Resources used by Airflow web server.
     */
    webServer: outputs.composer.v1beta1.WebServerResourceResponse;
    /**
     * Optional. Resources used by Airflow workers.
     */
    worker: outputs.composer.v1beta1.WorkerResourceResponse;
}

