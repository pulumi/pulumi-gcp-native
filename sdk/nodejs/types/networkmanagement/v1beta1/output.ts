// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Details of the final state "abort" and associated resource.
 */
export interface AbortInfoResponse {
    /**
     * Causes that the analysis is aborted.
     */
    cause: string;
    /**
     * List of project IDs that the user has specified in the request but does not have permission to access network configs. Analysis is aborted in this case with the PERMISSION_DENIED cause.
     */
    projectsMissingPermission: string[];
    /**
     * URI of the resource that caused the abort.
     */
    resourceUri: string;
}

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface AuditConfigResponse {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs: outputs.networkmanagement.v1beta1.AuditLogConfigResponse[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service: string;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigResponse {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers: string[];
    /**
     * The log type that this config enables.
     */
    logType: string;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.networkmanagement.v1beta1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * Wrapper for Cloud Function attributes.
 */
export interface CloudFunctionEndpointResponse {
    /**
     * A [Cloud Function](https://cloud.google.com/functions) name.
     */
    uri: string;
}

/**
 * For display only. Metadata associated with a Cloud Function.
 */
export interface CloudFunctionInfoResponse {
    /**
     * Name of a Cloud Function.
     */
    displayName: string;
    /**
     * Location in which the Cloud Function is deployed.
     */
    location: string;
    /**
     * URI of a Cloud Function.
     */
    uri: string;
    /**
     * Latest successfully deployed version id of the Cloud Function.
     */
    versionId: string;
}

/**
 * For display only. Metadata associated with a Cloud SQL instance.
 */
export interface CloudSQLInstanceInfoResponse {
    /**
     * Name of a Cloud SQL instance.
     */
    displayName: string;
    /**
     * External IP address of a Cloud SQL instance.
     */
    externalIp: string;
    /**
     * Internal IP address of a Cloud SQL instance.
     */
    internalIp: string;
    /**
     * URI of a Cloud SQL instance network or empty string if the instance does not have one.
     */
    networkUri: string;
    /**
     * Region in which the Cloud SQL instance is running.
     */
    region: string;
    /**
     * URI of a Cloud SQL instance.
     */
    uri: string;
}

/**
 * Details of the final state "deliver" and associated resource.
 */
export interface DeliverInfoResponse {
    /**
     * URI of the resource that the packet is delivered to.
     */
    resourceUri: string;
    /**
     * Target type where the packet is delivered to.
     */
    target: string;
}

/**
 * Details of the final state "drop" and associated resource.
 */
export interface DropInfoResponse {
    /**
     * Cause that the packet is dropped.
     */
    cause: string;
    /**
     * URI of the resource that caused the drop.
     */
    resourceUri: string;
}

/**
 * Representation of a network edge location as per https://cloud.google.com/vpc/docs/edge-locations.
 */
export interface EdgeLocationResponse {
    /**
     * Name of the metropolitan area.
     */
    metropolitanArea: string;
}

/**
 * For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
 */
export interface EndpointInfoResponse {
    /**
     * Destination IP address.
     */
    destinationIp: string;
    /**
     * URI of the network where this packet is sent to.
     */
    destinationNetworkUri: string;
    /**
     * Destination port. Only valid when protocol is TCP or UDP.
     */
    destinationPort: number;
    /**
     * IP protocol in string format, for example: "TCP", "UDP", "ICMP".
     */
    protocol: string;
    /**
     * URI of the source telemetry agent this packet originates from.
     */
    sourceAgentUri: string;
    /**
     * Source IP address.
     */
    sourceIp: string;
    /**
     * URI of the network where this packet originates from.
     */
    sourceNetworkUri: string;
    /**
     * Source port. Only valid when protocol is TCP or UDP.
     */
    sourcePort: number;
}

/**
 * Source or destination of the Connectivity Test.
 */
export interface EndpointResponse {
    /**
     * A [Cloud Function](https://cloud.google.com/functions).
     */
    cloudFunction: outputs.networkmanagement.v1beta1.CloudFunctionEndpointResponse;
    /**
     * A [Cloud SQL](https://cloud.google.com/sql) instance URI.
     */
    cloudSqlInstance: string;
    /**
     * A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).
     */
    gkeMasterCluster: string;
    /**
     * A Compute Engine instance URI.
     */
    instance: string;
    /**
     * The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](https://cloud.google.com/load-balancing/docs/load-balancing-overview).
     */
    ipAddress: string;
    /**
     * A Compute Engine network URI.
     */
    network: string;
    /**
     * Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
     */
    networkType: string;
    /**
     * The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
     */
    port: number;
    /**
     * Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
     */
    project: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
 */
export interface FirewallInfoResponse {
    /**
     * Possible values: ALLOW, DENY
     */
    action: string;
    /**
     * Possible values: INGRESS, EGRESS
     */
    direction: string;
    /**
     * The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
     */
    displayName: string;
    /**
     * The firewall rule's type.
     */
    firewallRuleType: string;
    /**
     * The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
     */
    networkUri: string;
    /**
     * The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
     */
    policy: string;
    /**
     * The priority of the firewall rule.
     */
    priority: number;
    /**
     * The target service accounts specified by the firewall rule.
     */
    targetServiceAccounts: string[];
    /**
     * The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
     */
    targetTags: string[];
    /**
     * The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
     */
    uri: string;
}

/**
 * Details of the final state "forward" and associated resource.
 */
export interface ForwardInfoResponse {
    /**
     * URI of the resource that the packet is forwarded to.
     */
    resourceUri: string;
    /**
     * Target type where this packet is forwarded to.
     */
    target: string;
}

/**
 * For display only. Metadata associated with a Compute Engine forwarding rule.
 */
export interface ForwardingRuleInfoResponse {
    /**
     * Name of a Compute Engine forwarding rule.
     */
    displayName: string;
    /**
     * Port range defined in the forwarding rule that matches the test.
     */
    matchedPortRange: string;
    /**
     * Protocol defined in the forwarding rule that matches the test.
     */
    matchedProtocol: string;
    /**
     * Network URI. Only valid for Internal Load Balancer.
     */
    networkUri: string;
    /**
     * Target type of the forwarding rule.
     */
    target: string;
    /**
     * URI of a Compute Engine forwarding rule.
     */
    uri: string;
    /**
     * VIP of the forwarding rule.
     */
    vip: string;
}

/**
 * For display only. Metadata associated with a Google Kubernetes Engine (GKE) cluster master.
 */
export interface GKEMasterInfoResponse {
    /**
     * URI of a GKE cluster network.
     */
    clusterNetworkUri: string;
    /**
     * URI of a GKE cluster.
     */
    clusterUri: string;
    /**
     * External IP address of a GKE cluster master.
     */
    externalIp: string;
    /**
     * Internal IP address of a GKE cluster master.
     */
    internalIp: string;
}

/**
 * For display only. Metadata associated with a Compute Engine instance.
 */
export interface InstanceInfoResponse {
    /**
     * Name of a Compute Engine instance.
     */
    displayName: string;
    /**
     * External IP address of the network interface.
     */
    externalIp: string;
    /**
     * Name of the network interface of a Compute Engine instance.
     */
    interface: string;
    /**
     * Internal IP address of the network interface.
     */
    internalIp: string;
    /**
     * Network tags configured on the instance.
     */
    networkTags: string[];
    /**
     * URI of a Compute Engine network.
     */
    networkUri: string;
    /**
     * Service account authorized for the instance.
     */
    serviceAccount: string;
    /**
     * URI of a Compute Engine instance.
     */
    uri: string;
}

/**
 * Describes measured latency distribution.
 */
export interface LatencyDistributionResponse {
    /**
     * Representative latency percentiles.
     */
    latencyPercentiles: outputs.networkmanagement.v1beta1.LatencyPercentileResponse[];
}

/**
 * Latency percentile rank and value.
 */
export interface LatencyPercentileResponse {
    /**
     * percent-th percentile of latency observed, in microseconds. Fraction of percent/100 of samples have latency lower or equal to the value of this field.
     */
    latencyMicros: string;
    /**
     * Percentage of samples this data point applies to.
     */
    percent: number;
}

/**
 * For display only. Metadata associated with a specific load balancer backend.
 */
export interface LoadBalancerBackendResponse {
    /**
     * Name of a Compute Engine instance or network endpoint.
     */
    displayName: string;
    /**
     * A list of firewall rule URIs allowing probes from health check IP ranges.
     */
    healthCheckAllowingFirewallRules: string[];
    /**
     * A list of firewall rule URIs blocking probes from health check IP ranges.
     */
    healthCheckBlockingFirewallRules: string[];
    /**
     * State of the health check firewall configuration.
     */
    healthCheckFirewallState: string;
    /**
     * URI of a Compute Engine instance or network endpoint.
     */
    uri: string;
}

/**
 * For display only. Metadata associated with a load balancer.
 */
export interface LoadBalancerInfoResponse {
    /**
     * Type of load balancer's backend configuration.
     */
    backendType: string;
    /**
     * Backend configuration URI.
     */
    backendUri: string;
    /**
     * Information for the loadbalancer backends.
     */
    backends: outputs.networkmanagement.v1beta1.LoadBalancerBackendResponse[];
    /**
     * URI of the health check for the load balancer.
     */
    healthCheckUri: string;
    /**
     * Type of the load balancer.
     */
    loadBalancerType: string;
}

/**
 * For display only. Metadata associated with a Compute Engine network.
 */
export interface NetworkInfoResponse {
    /**
     * Name of a Compute Engine network.
     */
    displayName: string;
    /**
     * The IP range that matches the test.
     */
    matchedIpRange: string;
    /**
     * URI of a Compute Engine network.
     */
    uri: string;
}

/**
 * Results of active probing from the last run of the test.
 */
export interface ProbingDetailsResponse {
    /**
     * The reason probing was aborted.
     */
    abortCause: string;
    /**
     * The EdgeLocation from which a packet destined for/originating from the internet will egress/ingress the Google network. This will only be populated for a connectivity test which has an internet destination/source address. The absence of this field *must not* be used as an indication that the destination/source is part of the Google network.
     */
    destinationEgressLocation: outputs.networkmanagement.v1beta1.EdgeLocationResponse;
    /**
     * The source and destination endpoints derived from the test input and used for active probing.
     */
    endpointInfo: outputs.networkmanagement.v1beta1.EndpointInfoResponse;
    /**
     * Details about an internal failure or the cancellation of active probing.
     */
    error: outputs.networkmanagement.v1beta1.StatusResponse;
    /**
     * Latency as measured by active probing in one direction: from the source to the destination endpoint.
     */
    probingLatency: outputs.networkmanagement.v1beta1.LatencyDistributionResponse;
    /**
     * The overall result of active probing.
     */
    result: string;
    /**
     * Number of probes sent.
     */
    sentProbeCount: number;
    /**
     * Number of probes that reached the destination.
     */
    successfulProbeCount: number;
    /**
     * The time that reachability was assessed through active probing.
     */
    verifyTime: string;
}

/**
 * Results of the configuration analysis from the last run of the test.
 */
export interface ReachabilityDetailsResponse {
    /**
     * The details of a failure or a cancellation of reachability analysis.
     */
    error: outputs.networkmanagement.v1beta1.StatusResponse;
    /**
     * The overall result of the test's configuration analysis.
     */
    result: string;
    /**
     * Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
     */
    traces: outputs.networkmanagement.v1beta1.TraceResponse[];
    /**
     * The time of the configuration analysis.
     */
    verifyTime: string;
}

/**
 * For display only. Metadata associated with a Compute Engine route.
 */
export interface RouteInfoResponse {
    /**
     * Destination IP range of the route.
     */
    destIpRange: string;
    /**
     * Destination port ranges of the route. Policy based routes only.
     */
    destPortRanges: string[];
    /**
     * Name of a Compute Engine route.
     */
    displayName: string;
    /**
     * Instance tags of the route.
     */
    instanceTags: string[];
    /**
     * URI of a Compute Engine network.
     */
    networkUri: string;
    /**
     * Next hop of the route.
     */
    nextHop: string;
    /**
     * Type of next hop.
     */
    nextHopType: string;
    /**
     * Priority of the route.
     */
    priority: number;
    /**
     * Protocols of the route. Policy based routes only.
     */
    protocols: string[];
    /**
     * Type of route.
     */
    routeType: string;
    /**
     * Source IP address range of the route. Policy based routes only.
     */
    srcIpRange: string;
    /**
     * Source port ranges of the route. Policy based routes only.
     */
    srcPortRanges: string[];
    /**
     * URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
     */
    uri: string;
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface StatusResponse {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code: number;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details: {[key: string]: string}[];
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message: string;
}

/**
 * A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
 */
export interface StepResponse {
    /**
     * Display information of the final state "abort" and reason.
     */
    abort: outputs.networkmanagement.v1beta1.AbortInfoResponse;
    /**
     * This is a step that leads to the final state Drop.
     */
    causesDrop: boolean;
    /**
     * Display information of a Cloud Function.
     */
    cloudFunction: outputs.networkmanagement.v1beta1.CloudFunctionInfoResponse;
    /**
     * Display information of a Cloud SQL instance.
     */
    cloudSqlInstance: outputs.networkmanagement.v1beta1.CloudSQLInstanceInfoResponse;
    /**
     * Display information of the final state "deliver" and reason.
     */
    deliver: outputs.networkmanagement.v1beta1.DeliverInfoResponse;
    /**
     * A description of the step. Usually this is a summary of the state.
     */
    description: string;
    /**
     * Display information of the final state "drop" and reason.
     */
    drop: outputs.networkmanagement.v1beta1.DropInfoResponse;
    /**
     * Display information of the source and destination under analysis. The endpoint information in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
     */
    endpoint: outputs.networkmanagement.v1beta1.EndpointInfoResponse;
    /**
     * Display information of a Compute Engine firewall rule.
     */
    firewall: outputs.networkmanagement.v1beta1.FirewallInfoResponse;
    /**
     * Display information of the final state "forward" and reason.
     */
    forward: outputs.networkmanagement.v1beta1.ForwardInfoResponse;
    /**
     * Display information of a Compute Engine forwarding rule.
     */
    forwardingRule: outputs.networkmanagement.v1beta1.ForwardingRuleInfoResponse;
    /**
     * Display information of a Google Kubernetes Engine cluster master.
     */
    gkeMaster: outputs.networkmanagement.v1beta1.GKEMasterInfoResponse;
    /**
     * Display information of a Compute Engine instance.
     */
    instance: outputs.networkmanagement.v1beta1.InstanceInfoResponse;
    /**
     * Display information of the load balancers.
     */
    loadBalancer: outputs.networkmanagement.v1beta1.LoadBalancerInfoResponse;
    /**
     * Display information of a Google Cloud network.
     */
    network: outputs.networkmanagement.v1beta1.NetworkInfoResponse;
    /**
     * Project ID that contains the configuration this step is validating.
     */
    project: string;
    /**
     * Display information of a Compute Engine route.
     */
    route: outputs.networkmanagement.v1beta1.RouteInfoResponse;
    /**
     * Each step is in one of the pre-defined states.
     */
    state: string;
    /**
     * Display information of a VPC connector.
     */
    vpcConnector: outputs.networkmanagement.v1beta1.VpcConnectorInfoResponse;
    /**
     * Display information of a Compute Engine VPN gateway.
     */
    vpnGateway: outputs.networkmanagement.v1beta1.VpnGatewayInfoResponse;
    /**
     * Display information of a Compute Engine VPN tunnel.
     */
    vpnTunnel: outputs.networkmanagement.v1beta1.VpnTunnelInfoResponse;
}

/**
 * Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). ``` |---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final)) ```
 */
export interface TraceResponse {
    /**
     * Derived from the source and destination endpoints definition specified by user request, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
     */
    endpointInfo: outputs.networkmanagement.v1beta1.EndpointInfoResponse;
    /**
     * A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
     */
    steps: outputs.networkmanagement.v1beta1.StepResponse[];
}

/**
 * For display only. Metadata associated with a VPC connector.
 */
export interface VpcConnectorInfoResponse {
    /**
     * Name of a VPC connector.
     */
    displayName: string;
    /**
     * Location in which the VPC connector is deployed.
     */
    location: string;
    /**
     * URI of a VPC connector.
     */
    uri: string;
}

/**
 * For display only. Metadata associated with a Compute Engine VPN gateway.
 */
export interface VpnGatewayInfoResponse {
    /**
     * Name of a VPN gateway.
     */
    displayName: string;
    /**
     * IP address of the VPN gateway.
     */
    ipAddress: string;
    /**
     * URI of a Compute Engine network where the VPN gateway is configured.
     */
    networkUri: string;
    /**
     * Name of a Google Cloud region where this VPN gateway is configured.
     */
    region: string;
    /**
     * URI of a VPN gateway.
     */
    uri: string;
    /**
     * A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.
     */
    vpnTunnelUri: string;
}

/**
 * For display only. Metadata associated with a Compute Engine VPN tunnel.
 */
export interface VpnTunnelInfoResponse {
    /**
     * Name of a VPN tunnel.
     */
    displayName: string;
    /**
     * URI of a Compute Engine network where the VPN tunnel is configured.
     */
    networkUri: string;
    /**
     * Name of a Google Cloud region where this VPN tunnel is configured.
     */
    region: string;
    /**
     * URI of a VPN gateway at remote end of the tunnel.
     */
    remoteGateway: string;
    /**
     * Remote VPN gateway's IP address.
     */
    remoteGatewayIp: string;
    /**
     * Type of the routing policy.
     */
    routingType: string;
    /**
     * URI of the VPN gateway at local end of the tunnel.
     */
    sourceGateway: string;
    /**
     * Local VPN gateway's IP address.
     */
    sourceGatewayIp: string;
    /**
     * URI of a VPN tunnel.
     */
    uri: string;
}

