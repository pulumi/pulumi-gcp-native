// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Represents an 'access point' for the share.
 */
export interface AllowedClientResponse {
    /**
     * Allow dev flag. Which controls whether to allow creation of devices.
     */
    allowDev: boolean;
    /**
     * Allow the setuid flag.
     */
    allowSuid: boolean;
    /**
     * The subnet of IP addresses permitted to access the share.
     */
    allowedClientsCidr: string;
    /**
     * Mount permissions.
     */
    mountPermissions: string;
    /**
     * The network the access point sits on.
     */
    network: string;
    /**
     * The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like "10.0.0.0:/g123456789-nfs001"
     */
    nfsPath: string;
    /**
     * Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
     */
    noRootSquash: boolean;
    /**
     * The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr.
     */
    shareIp: string;
}

/**
 * Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
 */
export interface GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse {
    /**
     * The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
     *
     * @deprecated The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
     */
    interfaceIndex: number;
    /**
     * List of logical network interfaces within a logical interface.
     */
    logicalNetworkInterfaces: outputs.baremetalsolution.v2.LogicalNetworkInterfaceResponse[];
    /**
     * Interface name. This is of syntax or and forms part of the network template name.
     */
    name: string;
}

/**
 * Configuration parameters for a new instance.
 */
export interface InstanceConfigResponse {
    /**
     * If true networks can be from different projects of the same vendor account.
     */
    accountNetworksEnabled: boolean;
    /**
     * Client network address. Filled if InstanceConfig.multivlan_config is false.
     */
    clientNetwork: outputs.baremetalsolution.v2.NetworkAddressResponse;
    /**
     * Whether the instance should be provisioned with Hyperthreading enabled.
     */
    hyperthreading: boolean;
    /**
     * Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
     */
    instanceType: string;
    /**
     * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
     */
    logicalInterfaces: outputs.baremetalsolution.v2.GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse[];
    /**
     * The name of the instance config.
     */
    name: string;
    /**
     * The type of network configuration on the instance.
     */
    networkConfig: string;
    /**
     * Server network template name. Filled if InstanceConfig.multivlan_config is true.
     */
    networkTemplate: string;
    /**
     * OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
     */
    osImage: string;
    /**
     * Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
     */
    privateNetwork: outputs.baremetalsolution.v2.NetworkAddressResponse;
    /**
     * User note field, it can be used by customers to add additional information for the BMS Ops team .
     */
    userNote: string;
}

/**
 * A GCP vlan attachment.
 */
export interface IntakeVlanAttachmentResponse {
    /**
     * Attachment pairing key.
     */
    pairingKey: string;
}

/**
 * Each logical network interface is effectively a network and IP pair.
 */
export interface LogicalNetworkInterfaceResponse {
    /**
     * Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
     */
    defaultGateway: boolean;
    /**
     * IP address in the network
     */
    ipAddress: string;
    /**
     * Name of the network
     */
    network: string;
    /**
     * Type of network.
     */
    networkType: string;
}

/**
 * A LUN(Logical Unit Number) range.
 */
export interface LunRangeResponse {
    /**
     * Number of LUNs to create.
     */
    quantity: number;
    /**
     * The requested size of each LUN, in GB.
     */
    sizeGb: number;
}

/**
 * A storage volume logical unit number (LUN).
 */
export interface LunResponse {
    /**
     * Display if this LUN is a boot LUN.
     */
    bootLun: boolean;
    /**
     * The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
     */
    multiprotocolType: string;
    /**
     * The name of the LUN.
     */
    name: string;
    /**
     * Display if this LUN can be shared between multiple physical servers.
     */
    shareable: boolean;
    /**
     * The size of this LUN, in gigabytes.
     */
    sizeGb: string;
    /**
     * The state of this storage volume.
     */
    state: string;
    /**
     * The storage type for this LUN.
     */
    storageType: string;
    /**
     * Display the storage volume for this LUN.
     */
    storageVolume: string;
    /**
     * The WWID for this LUN.
     */
    wwid: string;
}

/**
 * A reservation of one or more addresses in a network.
 */
export interface NetworkAddressReservationResponse {
    /**
     * The last address of this reservation block, inclusive. I.e., for cases when reservations are only single addresses, end_address and start_address will be the same. Must be specified as a single IPv4 address, e.g. 10.1.2.2.
     */
    endAddress: string;
    /**
     * A note about this reservation, intended for human consumption.
     */
    note: string;
    /**
     * The first address of this reservation block. Must be specified as a single IPv4 address, e.g. 10.1.2.2.
     */
    startAddress: string;
}

/**
 * A network.
 */
export interface NetworkAddressResponse {
    /**
     * IPv4 address to be assigned to the server.
     */
    address: string;
    /**
     * Name of the existing network to use.
     */
    existingNetworkId: string;
    /**
     * Id of the network to use, within the same ProvisioningConfig request.
     */
    networkId: string;
}

/**
 * Configuration parameters for a new network.
 */
export interface NetworkConfigResponse {
    /**
     * Interconnect bandwidth. Set only when type is CLIENT.
     */
    bandwidth: string;
    /**
     * CIDR range of the network.
     */
    cidr: string;
    /**
     * The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
     */
    gcpService: string;
    /**
     * The JumboFramesEnabled option for customer to set.
     */
    jumboFramesEnabled: boolean;
    /**
     * The name of the network config.
     */
    name: string;
    /**
     * Service CIDR, if any.
     */
    serviceCidr: string;
    /**
     * The type of this network, either Client or Private.
     */
    type: string;
    /**
     * User note field, it can be used by customers to add additional information for the BMS Ops team .
     */
    userNote: string;
    /**
     * List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
     */
    vlanAttachments: outputs.baremetalsolution.v2.IntakeVlanAttachmentResponse[];
    /**
     * Whether the VLAN attachment pair is located in the same project.
     */
    vlanSameProject: boolean;
}

/**
 * Mount point for a network.
 */
export interface NetworkMountPointResponse {
    /**
     * Network should be a default gateway.
     */
    defaultGateway: boolean;
    /**
     * Instance to attach network to.
     */
    instance: string;
    /**
     * Ip address of the server.
     */
    ipAddress: string;
    /**
     * Logical interface to detach from.
     */
    logicalInterface: string;
}

/**
 * A Network.
 */
export interface NetworkResponse {
    /**
     * The cidr of the Network.
     */
    cidr: string;
    /**
     * Gateway ip address.
     */
    gatewayIp: string;
    /**
     * IP address configured.
     */
    ipAddress: string;
    /**
     * Whether network uses standard frames or jumbo ones.
     */
    jumboFramesEnabled: boolean;
    /**
     * Labels as key value pairs.
     */
    labels: {[key: string]: string};
    /**
     * List of physical interfaces.
     */
    macAddress: string[];
    /**
     * Input only. List of mount points to attach the network to.
     */
    mountPoints: outputs.baremetalsolution.v2.NetworkMountPointResponse[];
    /**
     * The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`
     */
    name: string;
    /**
     * Pod name.
     */
    pod: string;
    /**
     * List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.
     */
    reservations: outputs.baremetalsolution.v2.NetworkAddressReservationResponse[];
    /**
     * IP range for reserved for services (e.g. NFS).
     */
    servicesCidr: string;
    /**
     * The Network state.
     */
    state: string;
    /**
     * The type of this network.
     */
    type: string;
    /**
     * The vlan id of the Network.
     */
    vlanId: string;
    /**
     * The vrf for the Network.
     */
    vrf: outputs.baremetalsolution.v2.VRFResponse;
}

/**
 * A NFS export entry.
 */
export interface NfsExportResponse {
    /**
     * Allow dev flag in NfsShare AllowedClientsRequest.
     */
    allowDev: boolean;
    /**
     * Allow the setuid flag.
     */
    allowSuid: boolean;
    /**
     * A CIDR range.
     */
    cidr: string;
    /**
     * Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
     */
    machineId: string;
    /**
     * Network to use to publish the export.
     */
    networkId: string;
    /**
     * Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
     */
    noRootSquash: boolean;
    /**
     * Export permissions.
     */
    permissions: string;
}

/**
 * QOS policy parameters.
 */
export interface QosPolicyResponse {
    /**
     * The bandwidth permitted by the QOS policy, in gbps.
     */
    bandwidthGbps: number;
}

/**
 * Details about snapshot space reservation and usage on the storage volume.
 */
export interface SnapshotReservationDetailResponse {
    /**
     * The space on this storage volume reserved for snapshots, shown in GiB.
     */
    reservedSpaceGib: string;
    /**
     * Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.
     */
    reservedSpacePercent: number;
    /**
     * The amount, in GiB, of available space in this storage volume's reserved snapshot space.
     */
    reservedSpaceRemainingGib: string;
    /**
     * The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.
     */
    reservedSpaceUsedPercent: number;
}

/**
 * A network VRF.
 */
export interface VRFResponse {
    /**
     * The name of the VRF.
     */
    name: string;
    /**
     * The QOS policy applied to this VRF. The value is only meaningful when all the vlan attachments have the same QoS. This field should not be used for new integrations, use vlan attachment level qos instead. The field is left for backward-compatibility.
     */
    qosPolicy: outputs.baremetalsolution.v2.QosPolicyResponse;
    /**
     * The possible state of VRF.
     */
    state: string;
    /**
     * The list of VLAN attachments for the VRF.
     */
    vlanAttachments: outputs.baremetalsolution.v2.VlanAttachmentResponse[];
}

/**
 * VLAN attachment details.
 */
export interface VlanAttachmentResponse {
    /**
     * Input only. Pairing key.
     */
    pairingKey: string;
    /**
     * The peer IP of the attachment.
     */
    peerIp: string;
    /**
     * The peer vlan ID of the attachment.
     */
    peerVlanId: string;
    /**
     * The QOS policy applied to this VLAN attachment. This value should be preferred to using qos at vrf level.
     */
    qosPolicy: outputs.baremetalsolution.v2.QosPolicyResponse;
    /**
     * The router IP of the attachment.
     */
    routerIp: string;
}

/**
 * Configuration parameters for a new volume.
 */
export interface VolumeConfigResponse {
    /**
     * The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
     */
    gcpService: string;
    /**
     * LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
     */
    lunRanges: outputs.baremetalsolution.v2.LunRangeResponse[];
    /**
     * Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
     */
    machineIds: string[];
    /**
     * The name of the volume config.
     */
    name: string;
    /**
     * NFS exports. Set only when protocol is PROTOCOL_NFS.
     */
    nfsExports: outputs.baremetalsolution.v2.NfsExportResponse[];
    /**
     * Performance tier of the Volume. Default is SHARED.
     */
    performanceTier: string;
    /**
     * Volume protocol.
     */
    protocol: string;
    /**
     * The requested size of this volume, in GB.
     */
    sizeGb: number;
    /**
     * Whether snapshots should be enabled.
     */
    snapshotsEnabled: boolean;
    /**
     * The type of this Volume.
     */
    type: string;
    /**
     * User note field, it can be used by customers to add additional information for the BMS Ops team .
     */
    userNote: string;
}

/**
 * A storage volume.
 */
export interface VolumeResponse {
    /**
     * The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.
     */
    autoGrownSizeGib: string;
    /**
     * Whether this volume is a boot volume. A boot volume is one which contains a boot LUN.
     */
    bootVolume: boolean;
    /**
     * The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.
     */
    currentSizeGib: string;
    /**
     * Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.
     */
    emergencySizeGib: string;
    /**
     * Labels as key value pairs.
     */
    labels: {[key: string]: string};
    /**
     * Maximum size volume can be expanded to in case of evergency, in GiB.
     */
    maxSizeGib: string;
    /**
     * The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}`
     */
    name: string;
    /**
     * Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.
     */
    notes: string;
    /**
     * Originally requested size, in GiB.
     */
    originallyRequestedSizeGib: string;
    /**
     * Immutable. Performance tier of the Volume. Default is SHARED.
     */
    performanceTier: string;
    /**
     * Immutable. Pod name.
     */
    pod: string;
    /**
     * Storage protocol for the Volume.
     */
    protocol: string;
    /**
     * The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.
     */
    remainingSpaceGib: string;
    /**
     * The requested size of this storage volume, in GiB.
     */
    requestedSizeGib: string;
    /**
     * The behavior to use when snapshot reserved space is full.
     */
    snapshotAutoDeleteBehavior: string;
    /**
     * Whether snapshots are enabled.
     */
    snapshotEnabled: boolean;
    /**
     * Details about snapshot space reservation and usage on the storage volume.
     */
    snapshotReservationDetail: outputs.baremetalsolution.v2.SnapshotReservationDetailResponse;
    /**
     * The name of the snapshot schedule policy in use for this volume, if any.
     */
    snapshotSchedulePolicy: string;
    /**
     * The state of this storage volume.
     */
    state: string;
    /**
     * The storage type for this volume.
     */
    storageType: string;
}

