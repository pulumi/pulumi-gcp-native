// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Represents a single Apt package repository. This repository is added to a repo file that is stored at `/etc/apt/sources.list.d/google_osconfig.list`.
 */
export interface AptRepositoryResponse {
    /**
     * Type of archive files in this repository. The default behavior is DEB.
     */
    archiveType: string;
    /**
     * List of components for this repository. Must contain at least one item.
     */
    components: string[];
    /**
     * Distribution of this repository.
     */
    distribution: string;
    /**
     * URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg` containing all the keys in any applied guest policy.
     */
    gpgKey: string;
    /**
     * URI for this repository.
     */
    uri: string;
}

/**
 * Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
 */
export interface AptSettingsResponse {
    /**
     * List of packages to exclude from update. These packages will be excluded
     */
    excludes: string[];
    /**
     * An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
     */
    exclusivePackages: string[];
    /**
     * By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
     */
    type: string;
}

/**
 * Represents a group of VM intances that can be identified as having all these labels, for example "env=prod and app=web".
 */
export interface AssignmentGroupLabelResponse {
    /**
     * Google Compute Engine instance labels that must be present for an instance to be included in this assignment group.
     */
    labels: {[key: string]: string};
}

/**
 * Defines the criteria for selecting VM Instances by OS type.
 */
export interface AssignmentOsTypeResponse {
    /**
     * Targets VM instances with OS Inventory enabled and having the following OS architecture.
     */
    osArchitecture: string;
    /**
     * Targets VM instances with OS Inventory enabled and having the following OS short name, for example "debian" or "windows".
     */
    osShortName: string;
    /**
     * Targets VM instances with OS Inventory enabled and having the following following OS version.
     */
    osVersion: string;
}

/**
 * An assignment represents the group or groups of VM instances that the policy applies to. If an assignment is empty, it applies to all VM instances. Otherwise, the targeted VM instances must meet all the criteria specified. So if both labels and zones are specified, the policy applies to VM instances with those labels and in those zones.
 */
export interface AssignmentResponse {
    /**
     * Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example "env=prod or env=staging".
     */
    groupLabels: outputs.osconfig.v1beta.AssignmentGroupLabelResponse[];
    /**
     * Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix="prod-". Only supported for project-level policies.
     */
    instanceNamePrefixes: string[];
    /**
     * Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.
     */
    instances: string[];
    /**
     * Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.
     */
    osTypes: outputs.osconfig.v1beta.AssignmentOsTypeResponse[];
    /**
     * Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
     */
    zones: string[];
}

/**
 * Common configurations for an ExecStep.
 */
export interface ExecStepConfigResponse {
    /**
     * Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
     */
    allowedSuccessCodes: number[];
    /**
     * A Google Cloud Storage object containing the executable.
     */
    gcsObject: outputs.osconfig.v1beta.GcsObjectResponse;
    /**
     * The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
     */
    interpreter: string;
    /**
     * An absolute path to the executable on the VM.
     */
    localPath: string;
}

/**
 * A step that runs an executable for a PatchJob.
 */
export interface ExecStepResponse {
    /**
     * The ExecStepConfig for all Linux VMs targeted by the PatchJob.
     */
    linuxExecStepConfig: outputs.osconfig.v1beta.ExecStepConfigResponse;
    /**
     * The ExecStepConfig for all Windows VMs targeted by the PatchJob.
     */
    windowsExecStepConfig: outputs.osconfig.v1beta.ExecStepConfigResponse;
}

/**
 * Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
 */
export interface FixedOrPercentResponse {
    /**
     * Specifies a fixed value.
     */
    fixed: number;
    /**
     * Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
     */
    percent: number;
}

/**
 * Google Cloud Storage object representation.
 */
export interface GcsObjectResponse {
    /**
     * Bucket of the Google Cloud Storage object.
     */
    bucket: string;
    /**
     * Generation number of the Google Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
     */
    generationNumber: string;
    /**
     * Name of the Google Cloud Storage object.
     */
    object: string;
}

/**
 * Represents a Goo package repository. These is added to a repo file that is stored at C:/ProgramData/GooGet/repos/google_osconfig.repo.
 */
export interface GooRepositoryResponse {
    /**
     * The name of the repository.
     */
    name: string;
    /**
     * The url of the repository.
     */
    url: string;
}

/**
 * Googet patching is performed by running `googet update`.
 */
export interface GooSettingsResponse {
}

/**
 * Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
 */
export interface MonthlyScheduleResponse {
    /**
     * One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
     */
    monthDay: number;
    /**
     * Week day in a month.
     */
    weekDayOfMonth: outputs.osconfig.v1beta.WeekDayOfMonthResponse;
}

/**
 * Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 */
export interface OneTimeScheduleResponse {
    /**
     * The desired patch job execution time.
     */
    executeTime: string;
}

/**
 * A package repository.
 */
export interface PackageRepositoryResponse {
    /**
     * An Apt Repository.
     */
    apt: outputs.osconfig.v1beta.AptRepositoryResponse;
    /**
     * A Goo Repository.
     */
    goo: outputs.osconfig.v1beta.GooRepositoryResponse;
    /**
     * A Yum Repository.
     */
    yum: outputs.osconfig.v1beta.YumRepositoryResponse;
    /**
     * A Zypper Repository.
     */
    zypper: outputs.osconfig.v1beta.ZypperRepositoryResponse;
}

/**
 * Package is a reference to the software package to be installed or removed. The agent on the VM instance uses the system package manager to apply the config. These are the commands that the agent uses to install or remove packages. Apt install: `apt-get update && apt-get -y install package1 package2 package3` remove: `apt-get -y remove package1 package2 package3` Yum install: `yum -y install package1 package2 package3` remove: `yum -y remove package1 package2 package3` Zypper install: `zypper install package1 package2 package3` remove: `zypper rm package1 package2` Googet install: `googet -noconfirm install package1 package2 package3` remove: `googet -noconfirm remove package1 package2 package3`
 */
export interface PackageResponse {
    /**
     * The desired_state the agent should maintain for this package. The default is to ensure the package is installed.
     */
    desiredState: string;
    /**
     * Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify `ANY`, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.
     */
    manager: string;
    /**
     * The name of the package. A package is uniquely identified for conflict validation by checking the package name and the manager(s) that the package targets.
     */
    name: string;
}

/**
 * Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
 */
export interface PatchConfigResponse {
    /**
     * Apt update settings. Use this setting to override the default `apt` patch rules.
     */
    apt: outputs.osconfig.v1beta.AptSettingsResponse;
    /**
     * Goo update settings. Use this setting to override the default `goo` patch rules.
     */
    goo: outputs.osconfig.v1beta.GooSettingsResponse;
    /**
     * Allows the patch job to run on Managed instance groups (MIGs).
     */
    migInstancesAllowed: boolean;
    /**
     * The `ExecStep` to run after the patch update.
     */
    postStep: outputs.osconfig.v1beta.ExecStepResponse;
    /**
     * The `ExecStep` to run before the patch update.
     */
    preStep: outputs.osconfig.v1beta.ExecStepResponse;
    /**
     * Post-patch reboot settings.
     */
    rebootConfig: string;
    /**
     * Windows update settings. Use this override the default windows patch rules.
     */
    windowsUpdate: outputs.osconfig.v1beta.WindowsUpdateSettingsResponse;
    /**
     * Yum update settings. Use this setting to override the default `yum` patch rules.
     */
    yum: outputs.osconfig.v1beta.YumSettingsResponse;
    /**
     * Zypper update settings. Use this setting to override the default `zypper` patch rules.
     */
    zypper: outputs.osconfig.v1beta.ZypperSettingsResponse;
}

/**
 * Represents a group of VMs that can be identified as having all these labels, for example "env=prod and app=web".
 */
export interface PatchInstanceFilterGroupLabelResponse {
    /**
     * Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
     */
    labels: {[key: string]: string};
}

/**
 * A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
 */
export interface PatchInstanceFilterResponse {
    /**
     * Target all VM instances in the project. If true, no other criteria is permitted.
     */
    all: boolean;
    /**
     * Targets VM instances matching at least one of these label sets. This allows targeting of disparate groups, for example "env=prod or env=staging".
     */
    groupLabels: outputs.osconfig.v1beta.PatchInstanceFilterGroupLabelResponse[];
    /**
     * Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
     */
    instanceNamePrefixes: string[];
    /**
     * Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
     */
    instances: string[];
    /**
     * Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
     */
    zones: string[];
}

/**
 * Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
 */
export interface PatchRolloutResponse {
    /**
     * The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
     */
    disruptionBudget: outputs.osconfig.v1beta.FixedOrPercentResponse;
    /**
     * Mode of the patch rollout.
     */
    mode: string;
}

/**
 * Sets the time for recurring patch deployments.
 */
export interface RecurringScheduleResponse {
    /**
     * Optional. The end time at which a recurring patch deployment schedule is no longer active.
     */
    endTime: string;
    /**
     * The frequency unit of this recurring schedule.
     */
    frequency: string;
    /**
     * The time the last patch job ran successfully.
     */
    lastExecuteTime: string;
    /**
     * Schedule with monthly executions.
     */
    monthly: outputs.osconfig.v1beta.MonthlyScheduleResponse;
    /**
     * The time the next patch job is scheduled to run.
     */
    nextExecuteTime: string;
    /**
     * Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
     */
    startTime: string;
    /**
     * Time of the day to run a recurring deployment.
     */
    timeOfDay: outputs.osconfig.v1beta.TimeOfDayResponse;
    /**
     * Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
     */
    timeZone: outputs.osconfig.v1beta.TimeZoneResponse;
    /**
     * Schedule with weekly executions.
     */
    weekly: outputs.osconfig.v1beta.WeeklyScheduleResponse;
}

/**
 * Specifies an artifact available as a Google Cloud Storage object.
 */
export interface SoftwareRecipeArtifactGcsResponse {
    /**
     * Bucket of the Google Cloud Storage object. Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `my-bucket`.
     */
    bucket: string;
    /**
     * Must be provided if allow_insecure is false. Generation number of the Google Cloud Storage object. `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `1234567`.
     */
    generation: string;
    /**
     * Name of the Google Cloud Storage object. As specified [here] (https://cloud.google.com/storage/docs/naming#objectnames) Given an example URL: `https://storage.googleapis.com/my-bucket/foo/bar#1234567` this value would be `foo/bar`.
     */
    object: string;
}

/**
 * Specifies an artifact available via some URI.
 */
export interface SoftwareRecipeArtifactRemoteResponse {
    /**
     * Must be provided if `allow_insecure` is `false`. SHA256 checksum in hex format, to compare to the checksum of the artifact. If the checksum is not empty and it doesn't match the artifact then the recipe installation fails before running any of the steps.
     */
    checksum: string;
    /**
     * URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
     */
    uri: string;
}

/**
 * Specifies a resource to be used in the recipe.
 */
export interface SoftwareRecipeArtifactResponse {
    /**
     * Defaults to false. When false, recipes are subject to validations based on the artifact type: Remote: A checksum must be specified, and only protocols with transport-layer security are permitted. GCS: An object generation number must be specified.
     */
    allowInsecure: boolean;
    /**
     * A Google Cloud Storage artifact.
     */
    gcs: outputs.osconfig.v1beta.SoftwareRecipeArtifactGcsResponse;
    /**
     * A generic remote artifact.
     */
    remote: outputs.osconfig.v1beta.SoftwareRecipeArtifactRemoteResponse;
}

/**
 * A software recipe is a set of instructions for installing and configuring a piece of software. It consists of a set of artifacts that are downloaded, and a set of steps that install, configure, and/or update the software. Recipes support installing and updating software from artifacts in the following formats: Zip archive, Tar archive, Windows MSI, Debian package, and RPM package. Additionally, recipes support executing a script (either defined in a file or directly in this api) in bash, sh, cmd, and powershell. Updating a software recipe If a recipe is assigned to an instance and there is a recipe with the same name but a lower version already installed and the assigned state of the recipe is `UPDATED`, then the recipe is updated to the new version. Script Working Directories Each script or execution step is run in its own temporary directory which is deleted after completing the step.
 */
export interface SoftwareRecipeResponse {
    /**
     * Resources available to be used in the steps in the recipe.
     */
    artifacts: outputs.osconfig.v1beta.SoftwareRecipeArtifactResponse[];
    /**
     * Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
     */
    desiredState: string;
    /**
     * Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
     */
    installSteps: outputs.osconfig.v1beta.SoftwareRecipeStepResponse[];
    /**
     * Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.
     */
    name: string;
    /**
     * Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
     */
    updateSteps: outputs.osconfig.v1beta.SoftwareRecipeStepResponse[];
    /**
     * The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
     */
    version: string;
}

/**
 * Copies the artifact to the specified path on the instance.
 */
export interface SoftwareRecipeStepCopyFileResponse {
    /**
     * The id of the relevant artifact in the recipe.
     */
    artifactId: string;
    /**
     * The absolute path on the instance to put the file.
     */
    destination: string;
    /**
     * Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.
     */
    overwrite: boolean;
    /**
     * Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
     */
    permissions: string;
}

/**
 * Executes an artifact or local file.
 */
export interface SoftwareRecipeStepExecFileResponse {
    /**
     * Defaults to [0]. A list of possible return values that the program can return to indicate a success.
     */
    allowedExitCodes: number[];
    /**
     * Arguments to be passed to the provided executable.
     */
    args: string[];
    /**
     * The id of the relevant artifact in the recipe.
     */
    artifactId: string;
    /**
     * The absolute path of the file on the local filesystem.
     */
    localPath: string;
}

/**
 * Extracts an archive of the type specified in the specified directory.
 */
export interface SoftwareRecipeStepExtractArchiveResponse {
    /**
     * The id of the relevant artifact in the recipe.
     */
    artifactId: string;
    /**
     * Directory to extract archive to. Defaults to `/` on Linux or `C:\` on Windows.
     */
    destination: string;
    /**
     * The type of the archive to extract.
     */
    type: string;
}

/**
 * Installs a deb via dpkg.
 */
export interface SoftwareRecipeStepInstallDpkgResponse {
    /**
     * The id of the relevant artifact in the recipe.
     */
    artifactId: string;
}

/**
 * Installs an MSI file.
 */
export interface SoftwareRecipeStepInstallMsiResponse {
    /**
     * Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
     */
    allowedExitCodes: number[];
    /**
     * The id of the relevant artifact in the recipe.
     */
    artifactId: string;
    /**
     * The flags to use when installing the MSI defaults to ["/i"] (i.e. the install flag).
     */
    flags: string[];
}

/**
 * Installs an rpm file via the rpm utility.
 */
export interface SoftwareRecipeStepInstallRpmResponse {
    /**
     * The id of the relevant artifact in the recipe.
     */
    artifactId: string;
}

/**
 * An action that can be taken as part of installing or updating a recipe.
 */
export interface SoftwareRecipeStepResponse {
    /**
     * Extracts an archive into the specified directory.
     */
    archiveExtraction: outputs.osconfig.v1beta.SoftwareRecipeStepExtractArchiveResponse;
    /**
     * Installs a deb file via dpkg.
     */
    dpkgInstallation: outputs.osconfig.v1beta.SoftwareRecipeStepInstallDpkgResponse;
    /**
     * Copies a file onto the instance.
     */
    fileCopy: outputs.osconfig.v1beta.SoftwareRecipeStepCopyFileResponse;
    /**
     * Executes an artifact or local file.
     */
    fileExec: outputs.osconfig.v1beta.SoftwareRecipeStepExecFileResponse;
    /**
     * Installs an MSI file.
     */
    msiInstallation: outputs.osconfig.v1beta.SoftwareRecipeStepInstallMsiResponse;
    /**
     * Installs an rpm file via the rpm utility.
     */
    rpmInstallation: outputs.osconfig.v1beta.SoftwareRecipeStepInstallRpmResponse;
    /**
     * Runs commands in a shell.
     */
    scriptRun: outputs.osconfig.v1beta.SoftwareRecipeStepRunScriptResponse;
}

/**
 * Runs a script through an interpreter.
 */
export interface SoftwareRecipeStepRunScriptResponse {
    /**
     * Return codes that indicate that the software installed or updated successfully. Behaviour defaults to [0]
     */
    allowedExitCodes: number[];
    /**
     * The script interpreter to use to run the script. If no interpreter is specified the script is executed directly, which likely only succeed for scripts with [shebang lines](https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
     */
    interpreter: string;
    /**
     * The shell script to be executed.
     */
    script: string;
}

/**
 * Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
 */
export interface TimeOfDayResponse {
    /**
     * Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
     */
    hours: number;
    /**
     * Minutes of hour of day. Must be from 0 to 59.
     */
    minutes: number;
    /**
     * Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
     */
    nanos: number;
    /**
     * Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
     */
    seconds: number;
}

/**
 * Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
 */
export interface TimeZoneResponse {
    /**
     * Optional. IANA Time Zone Database version number, e.g. "2019a".
     */
    version: string;
}

/**
 * Represents one week day in a month. An example is "the 4th Sunday".
 */
export interface WeekDayOfMonthResponse {
    /**
     * A day of the week.
     */
    dayOfWeek: string;
    /**
     * Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second day of the month and this `day_offset` value is set to `3`, the patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, the patches are deployed five days before before the second Tuesday of the month. Allowed values are in range [-30, 30].
     */
    dayOffset: number;
    /**
     * Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
     */
    weekOrdinal: number;
}

/**
 * Represents a weekly schedule.
 */
export interface WeeklyScheduleResponse {
    /**
     * Day of the week.
     */
    dayOfWeek: string;
}

/**
 * Windows patching is performed using the Windows Update Agent.
 */
export interface WindowsUpdateSettingsResponse {
    /**
     * Only apply updates of these windows update classifications. If empty, all updates are applied.
     */
    classifications: string[];
    /**
     * List of KBs to exclude from update.
     */
    excludes: string[];
    /**
     * An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
     */
    exclusivePatches: string[];
}

/**
 * Represents a single Yum package repository. This repository is added to a repo file that is stored at `/etc/yum.repos.d/google_osconfig.repo`.
 */
export interface YumRepositoryResponse {
    /**
     * The location of the repository directory.
     */
    baseUrl: string;
    /**
     * The display name of the repository.
     */
    displayName: string;
    /**
     * URIs of GPG keys.
     */
    gpgKeys: string[];
}

/**
 * Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
 */
export interface YumSettingsResponse {
    /**
     * List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
     */
    excludes: string[];
    /**
     * An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
     */
    exclusivePackages: string[];
    /**
     * Will cause patch to run `yum update-minimal` instead.
     */
    minimal: boolean;
    /**
     * Adds the `--security` flag to `yum update`. Not supported on all platforms.
     */
    security: boolean;
}

/**
 * Represents a single Zypper package repository. This repository is added to a repo file that is stored at `/etc/zypp/repos.d/google_osconfig.repo`.
 */
export interface ZypperRepositoryResponse {
    /**
     * The location of the repository directory.
     */
    baseUrl: string;
    /**
     * The display name of the repository.
     */
    displayName: string;
    /**
     * URIs of GPG keys.
     */
    gpgKeys: string[];
}

/**
 * Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
 */
export interface ZypperSettingsResponse {
    /**
     * Install only patches with these categories. Common categories include security, recommended, and feature.
     */
    categories: string[];
    /**
     * List of patches to exclude from update.
     */
    excludes: string[];
    /**
     * An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
     */
    exclusivePatches: string[];
    /**
     * Install only patches with these severities. Common severities include critical, important, moderate, and low.
     */
    severities: string[];
    /**
     * Adds the `--with-optional` flag to `zypper patch`.
     */
    withOptional: boolean;
    /**
     * Adds the `--with-update` flag, to `zypper patch`.
     */
    withUpdate: boolean;
}

