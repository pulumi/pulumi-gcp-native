// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.datacatalog.v1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * Specification for the BigQuery connection.
 */
export interface GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse {
    /**
     * Specification for the BigQuery connection to a Cloud SQL instance.
     */
    cloudSql: outputs.datacatalog.v1.GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse;
    /**
     * The type of the BigQuery connection.
     */
    connectionType: string;
    /**
     * True if there are credentials attached to the BigQuery connection; false otherwise.
     */
    hasCredential: boolean;
}

/**
 * Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
 */
export interface GoogleCloudDatacatalogV1BigQueryDateShardedSpecResponse {
    /**
     * The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.
     */
    dataset: string;
    /**
     * BigQuery resource name of the latest shard.
     */
    latestShardResource: string;
    /**
     * Total number of shards.
     */
    shardCount: string;
    /**
     * The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.
     */
    tablePrefix: string;
}

/**
 * Fields specific for BigQuery routines.
 */
export interface GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse {
    /**
     * Paths of the imported libraries.
     */
    importedLibraries: string[];
}

/**
 * Describes a BigQuery table.
 */
export interface GoogleCloudDatacatalogV1BigQueryTableSpecResponse {
    /**
     * The table source type.
     */
    tableSourceType: string;
    /**
     * Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
     */
    tableSpec: outputs.datacatalog.v1.GoogleCloudDatacatalogV1TableSpecResponse;
    /**
     * Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
     */
    viewSpec: outputs.datacatalog.v1.GoogleCloudDatacatalogV1ViewSpecResponse;
}

/**
 * Business Context of the entry.
 */
export interface GoogleCloudDatacatalogV1BusinessContextResponse {
    /**
     * Contact people for the entry.
     */
    contacts: outputs.datacatalog.v1.GoogleCloudDatacatalogV1ContactsResponse;
    /**
     * Entry overview fields for rich text descriptions of entries.
     */
    entryOverview: outputs.datacatalog.v1.GoogleCloudDatacatalogV1EntryOverviewResponse;
}

/**
 * Specification for the BigQuery connection to a Cloud SQL instance.
 */
export interface GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpecResponse {
    /**
     * Database name.
     */
    database: string;
    /**
     * Cloud SQL instance ID in the format of `project:location:instance`.
     */
    instanceId: string;
    /**
     * Type of the Cloud SQL database.
     */
    type: string;
}

/**
 * A column within a schema. Columns can be nested inside other columns.
 */
export interface GoogleCloudDatacatalogV1ColumnSchemaResponse {
    /**
     * Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
     */
    column: string;
    /**
     * Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
     */
    description: string;
    /**
     * Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
     */
    mode: string;
    /**
     * Optional. Schema of sub-columns. A column can have zero or more sub-columns.
     */
    subcolumns: outputs.datacatalog.v1.GoogleCloudDatacatalogV1ColumnSchemaResponse[];
    /**
     * Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
     */
    type: string;
}

/**
 * A contact person for the entry.
 */
export interface GoogleCloudDatacatalogV1ContactsPersonResponse {
    /**
     * Designation of the person, for example, Data Steward.
     */
    designation: string;
    /**
     * Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
     */
    email: string;
}

/**
 * Contact people for the entry.
 */
export interface GoogleCloudDatacatalogV1ContactsResponse {
    /**
     * The list of contact people for the entry.
     */
    people: outputs.datacatalog.v1.GoogleCloudDatacatalogV1ContactsPersonResponse[];
}

/**
 * Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type. Only one of internal specs can be set at the time, and cannot be changed later.
 */
export interface GoogleCloudDatacatalogV1DataSourceConnectionSpecResponse {
    /**
     * Fields specific to BigQuery connections.
     */
    bigqueryConnectionSpec: outputs.datacatalog.v1.GoogleCloudDatacatalogV1BigQueryConnectionSpecResponse;
}

/**
 * Physical location of an entry.
 */
export interface GoogleCloudDatacatalogV1DataSourceResponse {
    /**
     * Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
     */
    resource: string;
    /**
     * Service that physically stores the data.
     */
    service: string;
    /**
     * Data Catalog entry name, if applicable.
     */
    sourceEntry: string;
    /**
     * Detailed properties of the underlying storage.
     */
    storageProperties: outputs.datacatalog.v1.GoogleCloudDatacatalogV1StoragePropertiesResponse;
}

/**
 * Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
 */
export interface GoogleCloudDatacatalogV1DatabaseTableSpecResponse {
    /**
     * Fields specific to a Dataplex table and present only in the Dataplex table entries.
     */
    dataplexTable: outputs.datacatalog.v1.GoogleCloudDatacatalogV1DataplexTableSpecResponse;
    /**
     * Type of this table.
     */
    type: string;
}

/**
 * External table registered by Dataplex. Dataplex publishes data discovered from an asset into multiple other systems (BigQuery, DPMS) in form of tables. We call them "external tables". External tables are also synced into the Data Catalog. This message contains pointers to those external tables (fully qualified name, resource name et cetera) within the Data Catalog.
 */
export interface GoogleCloudDatacatalogV1DataplexExternalTableResponse {
    /**
     * Name of the Data Catalog entry representing the external table.
     */
    dataCatalogEntry: string;
    /**
     * Fully qualified name (FQN) of the external table.
     */
    fullyQualifiedName: string;
    /**
     * Google Cloud resource name of the external table.
     */
    googleCloudResource: string;
    /**
     * Service in which the external table is registered.
     */
    system: string;
}

/**
 * Entry specyfication for a Dataplex fileset.
 */
export interface GoogleCloudDatacatalogV1DataplexFilesetSpecResponse {
    /**
     * Common Dataplex fields.
     */
    dataplexSpec: outputs.datacatalog.v1.GoogleCloudDatacatalogV1DataplexSpecResponse;
}

/**
 * Common Dataplex fields.
 */
export interface GoogleCloudDatacatalogV1DataplexSpecResponse {
    /**
     * Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.
     */
    asset: string;
    /**
     * Compression format of the data, e.g., zip, gzip etc.
     */
    compressionFormat: string;
    /**
     * Format of the data.
     */
    dataFormat: outputs.datacatalog.v1.GoogleCloudDatacatalogV1PhysicalSchemaResponse;
    /**
     * Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset.
     */
    project: string;
}

/**
 * Entry specification for a Dataplex table.
 */
export interface GoogleCloudDatacatalogV1DataplexTableSpecResponse {
    /**
     * Common Dataplex fields.
     */
    dataplexSpec: outputs.datacatalog.v1.GoogleCloudDatacatalogV1DataplexSpecResponse;
    /**
     * List of external tables registered by Dataplex in other systems based on the same underlying data. External tables allow to query this data in those systems.
     */
    externalTables: outputs.datacatalog.v1.GoogleCloudDatacatalogV1DataplexExternalTableResponse[];
    /**
     * Indicates if the table schema is managed by the user or not.
     */
    userManaged: boolean;
}

/**
 * Entry overview fields for rich text descriptions of entries.
 */
export interface GoogleCloudDatacatalogV1EntryOverviewResponse {
    /**
     * Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
     */
    overview: string;
}

/**
 * Specification that applies to a fileset. Valid only for entries with the 'FILESET' type.
 */
export interface GoogleCloudDatacatalogV1FilesetSpecResponse {
    /**
     * Fields specific to a Dataplex fileset and present only in the Dataplex fileset entries.
     */
    dataplexFileset: outputs.datacatalog.v1.GoogleCloudDatacatalogV1DataplexFilesetSpecResponse;
}

/**
 * Specification of a single file in Cloud Storage.
 */
export interface GoogleCloudDatacatalogV1GcsFileSpecResponse {
    /**
     * Full file path. Example: `gs://bucket_name/a/b.txt`.
     */
    filePath: string;
    /**
     * Creation, modification, and expiration timestamps of a Cloud Storage file.
     */
    gcsTimestamps: outputs.datacatalog.v1.GoogleCloudDatacatalogV1SystemTimestampsResponse;
    /**
     * File size in bytes.
     */
    sizeBytes: string;
}

/**
 * Describes a Cloud Storage fileset entry.
 */
export interface GoogleCloudDatacatalogV1GcsFilesetSpecResponse {
    /**
     * Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*&#47;b`: matches all files in `bucket_name` that match the `a/*&#47;b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`
     */
    filePatterns: string[];
    /**
     * Sample files contained in this fileset, not all files contained in this fileset are represented here.
     */
    sampleGcsFileSpecs: outputs.datacatalog.v1.GoogleCloudDatacatalogV1GcsFileSpecResponse[];
}

/**
 * Entry metadata relevant only to the user and private to them.
 */
export interface GoogleCloudDatacatalogV1PersonalDetailsResponse {
    /**
     * Set if the entry is starred; unset otherwise.
     */
    starTime: string;
    /**
     * True if the entry is starred by the user; false otherwise.
     */
    starred: boolean;
}

/**
 * Schema in Avro JSON format.
 */
export interface GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaResponse {
    /**
     * JSON source of the Avro schema.
     */
    text: string;
}

/**
 * Marks a CSV-encoded data source.
 */
export interface GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaResponse {
}

/**
 * Marks an ORC-encoded data source.
 */
export interface GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaResponse {
}

/**
 * Marks a Parquet-encoded data source.
 */
export interface GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaResponse {
}

/**
 * Schema in protocol buffer format.
 */
export interface GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaResponse {
    /**
     * Protocol buffer source of the schema.
     */
    text: string;
}

/**
 * Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.
 */
export interface GoogleCloudDatacatalogV1PhysicalSchemaResponse {
    /**
     * Schema in Avro JSON format.
     */
    avro: outputs.datacatalog.v1.GoogleCloudDatacatalogV1PhysicalSchemaAvroSchemaResponse;
    /**
     * Marks a CSV-encoded data source.
     */
    csv: outputs.datacatalog.v1.GoogleCloudDatacatalogV1PhysicalSchemaCsvSchemaResponse;
    /**
     * Marks an ORC-encoded data source.
     */
    orc: outputs.datacatalog.v1.GoogleCloudDatacatalogV1PhysicalSchemaOrcSchemaResponse;
    /**
     * Marks a Parquet-encoded data source.
     */
    parquet: outputs.datacatalog.v1.GoogleCloudDatacatalogV1PhysicalSchemaParquetSchemaResponse;
    /**
     * Schema in protocol buffer format.
     */
    protobuf: outputs.datacatalog.v1.GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchemaResponse;
    /**
     * Schema in Thrift format.
     */
    thrift: outputs.datacatalog.v1.GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaResponse;
}

/**
 * Schema in Thrift format.
 */
export interface GoogleCloudDatacatalogV1PhysicalSchemaThriftSchemaResponse {
    /**
     * Thrift IDL source of the schema.
     */
    text: string;
}

/**
 * Input or output argument of a function or stored procedure.
 */
export interface GoogleCloudDatacatalogV1RoutineSpecArgumentResponse {
    /**
     * Specifies whether the argument is input or output.
     */
    mode: string;
    /**
     * The name of the argument. A return argument of a function might not have a name.
     */
    name: string;
    /**
     * Type of the argument. The exact value depends on the source system and the language.
     */
    type: string;
}

/**
 * Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
 */
export interface GoogleCloudDatacatalogV1RoutineSpecResponse {
    /**
     * Fields specific for BigQuery routines.
     */
    bigqueryRoutineSpec: outputs.datacatalog.v1.GoogleCloudDatacatalogV1BigQueryRoutineSpecResponse;
    /**
     * The body of the routine.
     */
    definitionBody: string;
    /**
     * The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`
     */
    language: string;
    /**
     * Return type of the argument. The exact value depends on the source system and the language.
     */
    returnType: string;
    /**
     * Arguments of the routine.
     */
    routineArguments: outputs.datacatalog.v1.GoogleCloudDatacatalogV1RoutineSpecArgumentResponse[];
    /**
     * The type of the routine.
     */
    routineType: string;
}

/**
 * Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
 */
export interface GoogleCloudDatacatalogV1SchemaResponse {
    /**
     * The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
     */
    columns: outputs.datacatalog.v1.GoogleCloudDatacatalogV1ColumnSchemaResponse[];
}

/**
 * Details the properties of the underlying storage.
 */
export interface GoogleCloudDatacatalogV1StoragePropertiesResponse {
    /**
     * Patterns to identify a set of files for this fileset. Examples of a valid `file_pattern`: * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir` and all subdirectories recursively * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*&#47;b`: matches all files in `bucket_name` that match the `a/*&#47;b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`
     */
    filePattern: string[];
    /**
     * File type in MIME format, for example, `text/plain`.
     */
    fileType: string;
}

/**
 * Timestamps associated with this resource in a particular system.
 */
export interface GoogleCloudDatacatalogV1SystemTimestampsResponse {
    /**
     * Creation timestamp of the resource within the given system.
     */
    createTime: string;
    /**
     * Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.
     */
    expireTime: string;
    /**
     * Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.
     */
    updateTime: string;
}

/**
 * Normal BigQuery table specification.
 */
export interface GoogleCloudDatacatalogV1TableSpecResponse {
    /**
     * If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.
     */
    groupedEntry: string;
}

/**
 * The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.
 */
export interface GoogleCloudDatacatalogV1UsageSignalResponse {
    /**
     * The end timestamp of the duration of usage statistics.
     */
    updateTime: string;
    /**
     * BigQuery usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.
     */
    usageWithinTimeRange: {[key: string]: string};
}

/**
 * Table view specification.
 */
export interface GoogleCloudDatacatalogV1ViewSpecResponse {
    /**
     * The query that defines the table view.
     */
    viewQuery: string;
}

