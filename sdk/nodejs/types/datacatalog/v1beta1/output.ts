// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.datacatalog.v1beta1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * Spec for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding
 */
export interface GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpecResponse {
    /**
     * The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`.
     */
    dataset: string;
    /**
     * Total number of shards.
     */
    shardCount: string;
    /**
     * The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`.
     */
    tablePrefix: string;
}

/**
 * Describes a BigQuery table.
 */
export interface GoogleCloudDatacatalogV1beta1BigQueryTableSpecResponse {
    /**
     * The table source type.
     */
    tableSourceType: string;
    /**
     * Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`.
     */
    tableSpec: outputs.datacatalog.v1beta1.GoogleCloudDatacatalogV1beta1TableSpecResponse;
    /**
     * Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`.
     */
    viewSpec: outputs.datacatalog.v1beta1.GoogleCloudDatacatalogV1beta1ViewSpecResponse;
}

/**
 * Representation of a column within a schema. Columns could be nested inside other columns.
 */
export interface GoogleCloudDatacatalogV1beta1ColumnSchemaResponse {
    /**
     * Name of the column.
     */
    column: string;
    /**
     * Optional. Description of the column. Default value is an empty string.
     */
    description: string;
    /**
     * Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.
     */
    mode: string;
    /**
     * Optional. Schema of sub-columns. A column can have zero or more sub-columns.
     */
    subcolumns: outputs.datacatalog.v1beta1.GoogleCloudDatacatalogV1beta1ColumnSchemaResponse[];
    /**
     * Type of the column.
     */
    type: string;
}

/**
 * Specifications of a single file in Cloud Storage.
 */
export interface GoogleCloudDatacatalogV1beta1GcsFileSpecResponse {
    /**
     * The full file path. Example: `gs://bucket_name/a/b.txt`.
     */
    filePath: string;
    /**
     * Timestamps about the Cloud Storage file.
     */
    gcsTimestamps: outputs.datacatalog.v1beta1.GoogleCloudDatacatalogV1beta1SystemTimestampsResponse;
    /**
     * The size of the file, in bytes.
     */
    sizeBytes: string;
}

/**
 * Describes a Cloud Storage fileset entry.
 */
export interface GoogleCloudDatacatalogV1beta1GcsFilesetSpecResponse {
    /**
     * Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*&#47;b`: matches all files in `bucket_name` that match `a/*&#47;b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`
     */
    filePatterns: string[];
    /**
     * Sample files contained in this fileset, not all files contained in this fileset are represented here.
     */
    sampleGcsFileSpecs: outputs.datacatalog.v1beta1.GoogleCloudDatacatalogV1beta1GcsFileSpecResponse[];
}

/**
 * Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).
 */
export interface GoogleCloudDatacatalogV1beta1SchemaResponse {
    /**
     * Schema of columns. A maximum of 10,000 columns and sub-columns can be specified.
     */
    columns: outputs.datacatalog.v1beta1.GoogleCloudDatacatalogV1beta1ColumnSchemaResponse[];
}

/**
 * Timestamps about this resource according to a particular system.
 */
export interface GoogleCloudDatacatalogV1beta1SystemTimestampsResponse {
    /**
     * The creation time of the resource within the given system.
     */
    createTime: string;
    /**
     * The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources.
     */
    expireTime: string;
    /**
     * The last-modified time of the resource within the given system.
     */
    updateTime: string;
}

/**
 * Normal BigQuery table spec.
 */
export interface GoogleCloudDatacatalogV1beta1TableSpecResponse {
    /**
     * If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty.
     */
    groupedEntry: string;
}

/**
 * The set of all usage signals that we store in Data Catalog.
 */
export interface GoogleCloudDatacatalogV1beta1UsageSignalResponse {
    /**
     * The timestamp of the end of the usage statistics duration.
     */
    updateTime: string;
    /**
     * Usage statistics over each of the pre-defined time ranges, supported strings for time ranges are {"24H", "7D", "30D"}.
     */
    usageWithinTimeRange: {[key: string]: string};
}

/**
 * Table view specification.
 */
export interface GoogleCloudDatacatalogV1beta1ViewSpecResponse {
    /**
     * The query that defines the table view.
     */
    viewQuery: string;
}

