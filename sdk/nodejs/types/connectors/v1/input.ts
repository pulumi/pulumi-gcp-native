// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface AuditConfigArgs {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs?: pulumi.Input<pulumi.Input<inputs.connectors.v1.AuditLogConfigArgs>[]>;
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service?: pulumi.Input<string>;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigArgs {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The log type that this config enables.
     */
    logType?: pulumi.Input<enums.connectors.v1.AuditLogConfigLogType>;
}

/**
 * AuthConfig defines details of a authentication type.
 */
export interface AuthConfigArgs {
    /**
     * List containing additional auth configs.
     */
    additionalVariables?: pulumi.Input<pulumi.Input<inputs.connectors.v1.ConfigVariableArgs>[]>;
    /**
     * The type of authentication configured.
     */
    authType?: pulumi.Input<enums.connectors.v1.AuthConfigAuthType>;
    /**
     * Oauth2ClientCredentials.
     */
    oauth2ClientCredentials?: pulumi.Input<inputs.connectors.v1.Oauth2ClientCredentialsArgs>;
    /**
     * Oauth2JwtBearer.
     */
    oauth2JwtBearer?: pulumi.Input<inputs.connectors.v1.Oauth2JwtBearerArgs>;
    /**
     * SSH Public Key.
     */
    sshPublicKey?: pulumi.Input<inputs.connectors.v1.SshPublicKeyArgs>;
    /**
     * UserPassword.
     */
    userPassword?: pulumi.Input<inputs.connectors.v1.UserPasswordArgs>;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingArgs {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition?: pulumi.Input<inputs.connectors.v1.ExprArgs>;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role?: pulumi.Input<string>;
}

/**
 * ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
 */
export interface ConfigVariableArgs {
    /**
     * Value is a bool.
     */
    boolValue?: pulumi.Input<boolean>;
    /**
     * Value is an integer
     */
    intValue?: pulumi.Input<string>;
    /**
     * Key of the config variable.
     */
    key?: pulumi.Input<string>;
    /**
     * Value is a secret.
     */
    secretValue?: pulumi.Input<inputs.connectors.v1.SecretArgs>;
    /**
     * Value is a string.
     */
    stringValue?: pulumi.Input<string>;
}

export interface DestinationArgs {
    /**
     * For publicly routable host.
     */
    host?: pulumi.Input<string>;
    /**
     * The port is the target port number that is accepted by the destination.
     */
    port?: pulumi.Input<number>;
    /**
     * PSC service attachments. Format: projects/*&#47;regions/*&#47;serviceAttachments/*
     */
    serviceAttachment?: pulumi.Input<string>;
}

/**
 * Define the Connectors target endpoint.
 */
export interface DestinationConfigArgs {
    /**
     * The destinations for the key.
     */
    destinations?: pulumi.Input<pulumi.Input<inputs.connectors.v1.DestinationArgs>[]>;
    /**
     * The key is the destination identifier that is supported by the Connector.
     */
    key?: pulumi.Input<string>;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprArgs {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description?: pulumi.Input<string>;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression?: pulumi.Input<string>;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location?: pulumi.Input<string>;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title?: pulumi.Input<string>;
}

/**
 * JWT claims used for the jwt-bearer authorization grant.
 */
export interface JwtClaimsArgs {
    /**
     * Value for the "aud" claim.
     */
    audience?: pulumi.Input<string>;
    /**
     * Value for the "iss" claim.
     */
    issuer?: pulumi.Input<string>;
    /**
     * Value for the "sub" claim.
     */
    subject?: pulumi.Input<string>;
}

/**
 * Determines whether or no a connection is locked. If locked, a reason must be specified.
 */
export interface LockConfigArgs {
    /**
     * Indicates whether or not the connection is locked.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Describes why a connection is locked.
     */
    reason?: pulumi.Input<string>;
}

/**
 * Configuration for the connection.
 */
export interface NodeConfigArgs {
    /**
     * Maximum number of nodes in the runtime nodes.
     */
    maxNodeCount?: pulumi.Input<number>;
    /**
     * Minimum number of nodes in the runtime nodes.
     */
    minNodeCount?: pulumi.Input<number>;
}

/**
 * Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
 */
export interface Oauth2ClientCredentialsArgs {
    /**
     * The client identifier.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Secret version reference containing the client secret.
     */
    clientSecret?: pulumi.Input<inputs.connectors.v1.SecretArgs>;
}

/**
 * Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
 */
export interface Oauth2JwtBearerArgs {
    /**
     * Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*&#47;secrets/*&#47;versions/*`.
     */
    clientKey?: pulumi.Input<inputs.connectors.v1.SecretArgs>;
    /**
     * JwtClaims providers fields to generate the token.
     */
    jwtClaims?: pulumi.Input<inputs.connectors.v1.JwtClaimsArgs>;
}

/**
 * Secret provides a reference to entries in Secret Manager.
 */
export interface SecretArgs {
    /**
     * The resource name of the secret version in the format, format as: `projects/*&#47;secrets/*&#47;versions/*`.
     */
    secretVersion?: pulumi.Input<string>;
}

/**
 * Parameters to support Ssh public key Authentication.
 */
export interface SshPublicKeyArgs {
    /**
     * Format of SSH Client cert.
     */
    certType?: pulumi.Input<string>;
    /**
     * SSH Client Cert. It should contain both public and private key.
     */
    sshClientCert?: pulumi.Input<inputs.connectors.v1.SecretArgs>;
    /**
     * Password (passphrase) for ssh client certificate if it has one.
     */
    sshClientCertPass?: pulumi.Input<inputs.connectors.v1.SecretArgs>;
    /**
     * The user account used to authenticate.
     */
    username?: pulumi.Input<string>;
}

/**
 * Parameters to support Username and Password Authentication.
 */
export interface UserPasswordArgs {
    /**
     * Secret version reference containing the password.
     */
    password?: pulumi.Input<inputs.connectors.v1.SecretArgs>;
    /**
     * Username.
     */
    username?: pulumi.Input<string>;
}

