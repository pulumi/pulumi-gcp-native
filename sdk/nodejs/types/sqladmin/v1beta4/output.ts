// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * An entry for an Access Control list.
 */
export interface AclEntryResponse {
    /**
     * The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    expirationTime: string;
    /**
     * This is always `sql#aclEntry`.
     */
    kind: string;
    /**
     * Optional. A label to identify this entry.
     */
    name: string;
    /**
     * The allowlisted value for the access control list.
     */
    value: string;
}

/**
 * Database instance backup configuration.
 */
export interface BackupConfigurationResponse {
    /**
     * Backup retention settings.
     */
    backupRetentionSettings: outputs.sqladmin.v1beta4.BackupRetentionSettingsResponse;
    /**
     * (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
     */
    binaryLogEnabled: boolean;
    /**
     * Whether this configuration is enabled.
     */
    enabled: boolean;
    /**
     * This is always `sql#backupConfiguration`.
     */
    kind: string;
    /**
     * Location of the backup
     */
    location: string;
    /**
     * (Postgres only) Whether point in time recovery is enabled.
     */
    pointInTimeRecoveryEnabled: boolean;
    /**
     * Reserved for future use.
     */
    replicationLogArchivingEnabled: boolean;
    /**
     * Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.
     */
    startTime: string;
    /**
     * The number of days of transaction logs we retain for point in time restore, from 1-7.
     */
    transactionLogRetentionDays: number;
}

/**
 * We currently only support backup retention by specifying the number of backups we will retain.
 */
export interface BackupRetentionSettingsResponse {
    /**
     * Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
     */
    retainedBackups: number;
    /**
     * The unit that 'retained_backups' represents.
     */
    retentionUnit: string;
}

/**
 * Database flags for Cloud SQL instances.
 */
export interface DatabaseFlagsResponse {
    /**
     * The name of the flag. These flags are passed at instance startup, so include both server options and system variables. Flags are specified with underscores, not hyphens. For more information, see [Configuring Database Flags](https://cloud.google.com/sql/docs/mysql/flags) in the Cloud SQL documentation.
     */
    name: string;
    /**
     * The value of the flag. Boolean flags are set to `on` for true and `off` for false. This field must be omitted if the flag doesn't take a value.
     */
    value: string;
}

/**
 * Deny Maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
 */
export interface DenyMaintenancePeriodResponse {
    /**
     * "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
     */
    endDate: string;
    /**
     * "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
     */
    startDate: string;
    /**
     * Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
     */
    time: string;
}

/**
 * Disk encryption configuration for an instance.
 */
export interface DiskEncryptionConfigurationResponse {
    /**
     * This is always `sql#diskEncryptionConfiguration`.
     */
    kind: string;
    /**
     * Resource name of KMS key for disk encryption
     */
    kmsKeyName: string;
}

/**
 * Disk encryption status for an instance.
 */
export interface DiskEncryptionStatusResponse {
    /**
     * This is always `sql#diskEncryptionStatus`.
     */
    kind: string;
    /**
     * KMS key version used to encrypt the Cloud SQL instance resource
     */
    kmsKeyVersionName: string;
}

/**
 * Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
 */
export interface InsightsConfigResponse {
    /**
     * Whether Query Insights feature is enabled.
     */
    queryInsightsEnabled: boolean;
    /**
     * Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
     */
    queryPlansPerMinute: number;
    /**
     * Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
     */
    queryStringLength: number;
    /**
     * Whether Query Insights will record application tags from query when enabled.
     */
    recordApplicationTags: boolean;
    /**
     * Whether Query Insights will record client address when enabled.
     */
    recordClientAddress: boolean;
}

/**
 * The name and status of the failover replica.
 */
export interface InstanceFailoverReplicaResponse {
    /**
     * The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only failover to the failover replica when the status is true.
     */
    available: boolean;
    /**
     * The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn't include the project ID.
     */
    name: string;
}

/**
 * Reference to another Cloud SQL instance.
 */
export interface InstanceReferenceResponse {
    /**
     * The name of the Cloud SQL instance being referenced. This does not include the project ID.
     */
    name: string;
    /**
     * The project ID of the Cloud SQL instance being referenced. The default is the same project ID as the instance references it.
     */
    project: string;
    /**
     * The region of the Cloud SQL instance being referenced.
     */
    region: string;
}

/**
 * IP Management configuration.
 */
export interface IpConfigurationResponse {
    /**
     * The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
     */
    allocatedIpRange: string;
    /**
     * The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
     */
    authorizedNetworks: outputs.sqladmin.v1beta4.AclEntryResponse[];
    /**
     * Controls connectivity to private IP instances from Google services, such as BigQuery.
     */
    enablePrivatePathForGoogleCloudServices: boolean;
    /**
     * Whether the instance is assigned a public IP address or not.
     */
    ipv4Enabled: boolean;
    /**
     * The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
     */
    privateNetwork: string;
    /**
     * Whether SSL connections over IP are enforced or not.
     */
    requireSsl: boolean;
}

/**
 * Database instance IP Mapping.
 */
export interface IpMappingResponse {
    /**
     * The IP address assigned.
     */
    ipAddress: string;
    /**
     * The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.
     */
    timeToRetire: string;
    /**
     * The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.
     */
    type: string;
}

/**
 * Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
 */
export interface LocationPreferenceResponse {
    /**
     * The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
     */
    followGaeApplication: string;
    /**
     * This is always `sql#locationPreference`.
     */
    kind: string;
    /**
     * The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
     */
    secondaryZone: string;
    /**
     * The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
     */
    zone: string;
}

/**
 * Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
 */
export interface MaintenanceWindowResponse {
    /**
     * day of week (1-7), starting on Monday.
     */
    day: number;
    /**
     * hour of day - 0 to 23.
     */
    hour: number;
    /**
     * This is always `sql#maintenanceWindow`.
     */
    kind: string;
    /**
     * Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).
     */
    updateTrack: string;
}

/**
 * Read-replica configuration specific to MySQL databases.
 */
export interface MySqlReplicaConfigurationResponse {
    /**
     * PEM representation of the trusted CA's x509 certificate.
     */
    caCertificate: string;
    /**
     * PEM representation of the replica's x509 certificate.
     */
    clientCertificate: string;
    /**
     * PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
     */
    clientKey: string;
    /**
     * Seconds to wait between connect retries. MySQL's default is 60 seconds.
     */
    connectRetryInterval: number;
    /**
     * Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
     */
    dumpFilePath: string;
    /**
     * This is always `sql#mysqlReplicaConfiguration`.
     */
    kind: string;
    /**
     * Interval in milliseconds between replication heartbeats.
     */
    masterHeartbeatPeriod: string;
    /**
     * The password for the replication connection.
     */
    password: string;
    /**
     * A list of permissible ciphers to use for SSL encryption.
     */
    sslCipher: string;
    /**
     * The username for the replication connection.
     */
    username: string;
    /**
     * Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
     */
    verifyServerCertificate: boolean;
}

/**
 * On-premises instance configuration.
 */
export interface OnPremisesConfigurationResponse {
    /**
     * PEM representation of the trusted CA's x509 certificate.
     */
    caCertificate: string;
    /**
     * PEM representation of the replica's x509 certificate.
     */
    clientCertificate: string;
    /**
     * PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
     */
    clientKey: string;
    /**
     * The dump file to create the Cloud SQL replica.
     */
    dumpFilePath: string;
    /**
     * The host and port of the on-premises instance in host:port format
     */
    hostPort: string;
    /**
     * This is always `sql#onPremisesConfiguration`.
     */
    kind: string;
    /**
     * The password for connecting to on-premises instance.
     */
    password: string;
    /**
     * The reference to Cloud SQL instance if the source is Cloud SQL.
     */
    sourceInstance: outputs.sqladmin.v1beta4.InstanceReferenceResponse;
    /**
     * The username for connecting to on-premises instance.
     */
    username: string;
}

/**
 * Database instance operation error.
 */
export interface OperationErrorResponse {
    /**
     * Identifies the specific error that occurred.
     */
    code: string;
    /**
     * This is always `sql#operationError`.
     */
    kind: string;
    /**
     * Additional information about the error encountered.
     */
    message: string;
}

/**
 * Read-only password status.
 */
export interface PasswordStatusResponse {
    /**
     * If true, user does not have login privileges.
     */
    locked: boolean;
    /**
     * The expiration time of the current password.
     */
    passwordExpirationTime: string;
}

/**
 * Database instance local user password validation policy
 */
export interface PasswordValidationPolicyResponse {
    /**
     * The complexity of the password.
     */
    complexity: string;
    /**
     * Disallow username as a part of the password.
     */
    disallowUsernameSubstring: boolean;
    /**
     * Whether the password policy is enabled or not.
     */
    enablePasswordPolicy: boolean;
    /**
     * Minimum number of characters allowed.
     */
    minLength: number;
    /**
     * Minimum interval after which the password can be changed. This flag is only supported for PostgresSQL.
     */
    passwordChangeInterval: string;
    /**
     * Number of previous passwords that cannot be reused.
     */
    reuseInterval: number;
}

/**
 * Read-replica configuration for connecting to the primary instance.
 */
export interface ReplicaConfigurationResponse {
    /**
     * Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
     */
    failoverTarget: boolean;
    /**
     * This is always `sql#replicaConfiguration`.
     */
    kind: string;
    /**
     * MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named `master.info` in the data directory.
     */
    mysqlReplicaConfiguration: outputs.sqladmin.v1beta4.MySqlReplicaConfigurationResponse;
}

/**
 * Database instance settings.
 */
export interface SettingsResponse {
    /**
     * The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
     */
    activationPolicy: string;
    /**
     * Active Directory configuration, relevant only for Cloud SQL for SQL Server.
     */
    activeDirectoryConfig: outputs.sqladmin.v1beta4.SqlActiveDirectoryConfigResponse;
    /**
     * The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
     *
     * @deprecated The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
     */
    authorizedGaeApplications: string[];
    /**
     * Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
     */
    availabilityType: string;
    /**
     * The daily backup configuration for the instance.
     */
    backupConfiguration: outputs.sqladmin.v1beta4.BackupConfigurationResponse;
    /**
     * The name of server Instance collation.
     */
    collation: string;
    /**
     * Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors) Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.
     */
    connectorEnforcement: string;
    /**
     * Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
     */
    crashSafeReplicationEnabled: boolean;
    /**
     * The size of data disk, in GB. The data disk size minimum is 10GB.
     */
    dataDiskSizeGb: string;
    /**
     * The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
     */
    dataDiskType: string;
    /**
     * The database flags passed to the instance at startup.
     */
    databaseFlags: outputs.sqladmin.v1beta4.DatabaseFlagsResponse[];
    /**
     * Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
     */
    databaseReplicationEnabled: boolean;
    /**
     * Configuration to protect against accidental instance deletion.
     */
    deletionProtectionEnabled: boolean;
    /**
     * Deny maintenance periods
     */
    denyMaintenancePeriods: outputs.sqladmin.v1beta4.DenyMaintenancePeriodResponse[];
    /**
     * Insights configuration, for now relevant only for Postgres.
     */
    insightsConfig: outputs.sqladmin.v1beta4.InsightsConfigResponse;
    /**
     * The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
     */
    ipConfiguration: outputs.sqladmin.v1beta4.IpConfigurationResponse;
    /**
     * This is always `sql#settings`.
     */
    kind: string;
    /**
     * The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
     */
    locationPreference: outputs.sqladmin.v1beta4.LocationPreferenceResponse;
    /**
     * The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
     */
    maintenanceWindow: outputs.sqladmin.v1beta4.MaintenanceWindowResponse;
    /**
     * The local user password validation policy of the instance.
     */
    passwordValidationPolicy: outputs.sqladmin.v1beta4.PasswordValidationPolicyResponse;
    /**
     * The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
     */
    pricingPlan: string;
    /**
     * The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
     *
     * @deprecated The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
     */
    replicationType: string;
    /**
     * The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
     */
    settingsVersion: string;
    /**
     * SQL Server specific audit configuration.
     */
    sqlServerAuditConfig: outputs.sqladmin.v1beta4.SqlServerAuditConfigResponse;
    /**
     * Configuration to increase storage size automatically. The default value is true.
     */
    storageAutoResize: boolean;
    /**
     * The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
     */
    storageAutoResizeLimit: string;
    /**
     * The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
     */
    tier: string;
    /**
     * Server timezone, relevant only for Cloud SQL for SQL Server.
     */
    timeZone: string;
    /**
     * User-provided labels, represented as a dictionary where each label is a single key value pair.
     */
    userLabels: {[key: string]: string};
}

/**
 * Active Directory configuration, relevant only for Cloud SQL for SQL Server.
 */
export interface SqlActiveDirectoryConfigResponse {
    /**
     * The name of the domain (e.g., mydomain.com).
     */
    domain: string;
    /**
     * This is always sql#activeDirectoryConfig.
     */
    kind: string;
}

/**
 * This message wraps up the information written by out-of-disk detection job.
 */
export interface SqlOutOfDiskReportResponse {
    /**
     * The minimum recommended increase size in GigaBytes This field is consumed by the frontend * Writers: * the proactive database wellness job for OOD. * Readers:
     */
    sqlMinRecommendedIncreaseSizeGb: number;
    /**
     * This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job
     */
    sqlOutOfDiskState: string;
}

/**
 * Any scheduled maintenance for this instance.
 */
export interface SqlScheduledMaintenanceResponse {
    canDefer: boolean;
    /**
     * If the scheduled maintenance can be rescheduled.
     */
    canReschedule: boolean;
    /**
     * Maintenance cannot be rescheduled to start beyond this deadline.
     */
    scheduleDeadlineTime: string;
    /**
     * The start time of any upcoming scheduled maintenance for this instance.
     */
    startTime: string;
}

/**
 * SQL Server specific audit configuration.
 */
export interface SqlServerAuditConfigResponse {
    /**
     * The name of the destination bucket (e.g., gs://mybucket).
     */
    bucket: string;
    /**
     * This is always sql#sqlServerAuditConfig
     */
    kind: string;
    /**
     * How long to keep generated audit files.
     */
    retentionInterval: string;
    /**
     * How often to upload generated audit files.
     */
    uploadInterval: string;
}

/**
 * Represents a Sql Server database on the Cloud SQL instance.
 */
export interface SqlServerDatabaseDetailsResponse {
    /**
     * The version of SQL Server with which the database is to be made compatible
     */
    compatibilityLevel: number;
    /**
     * The recovery model of a SQL Server database
     */
    recoveryModel: string;
}

/**
 * Represents a Sql Server user on the Cloud SQL instance.
 */
export interface SqlServerUserDetailsResponse {
    /**
     * If the user has been disabled
     */
    disabled: boolean;
    /**
     * The server roles for this user
     */
    serverRoles: string[];
}

/**
 * SslCerts Resource
 */
export interface SslCertResponse {
    /**
     * PEM representation.
     */
    cert: string;
    /**
     * Serial number, as extracted from the certificate.
     */
    certSerialNumber: string;
    /**
     * User supplied name. Constrained to [a-zA-Z.-_ ]+.
     */
    commonName: string;
    /**
     * The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    createTime: string;
    /**
     * The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    expirationTime: string;
    /**
     * Name of the database instance.
     */
    instance: string;
    /**
     * This is always `sql#sslCert`.
     */
    kind: string;
    /**
     * The URI of this resource.
     */
    selfLink: string;
    /**
     * Sha1 Fingerprint.
     */
    sha1Fingerprint: string;
}

/**
 * User level password validation policy.
 */
export interface UserPasswordValidationPolicyResponse {
    /**
     * Number of failed login attempts allowed before user get locked.
     */
    allowedFailedAttempts: number;
    /**
     * If true, failed login attempts check will be enabled.
     */
    enableFailedAttemptsCheck: boolean;
    /**
     * If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
     */
    enablePasswordVerification: boolean;
    /**
     * Expiration duration after password is updated.
     */
    passwordExpirationDuration: string;
    /**
     * Read-only password status.
     */
    status: outputs.sqladmin.v1beta4.PasswordStatusResponse;
}

