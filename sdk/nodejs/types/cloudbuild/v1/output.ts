// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * ApprovalConfig describes configuration for manual approval of a build.
 */
export interface ApprovalConfigResponse {
    /**
     * Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
     */
    approvalRequired: boolean;
}

/**
 * ApprovalResult describes the decision and associated metadata of a manual approval of a build.
 */
export interface ApprovalResultResponse {
    /**
     * The time when the approval decision was made.
     */
    approvalTime: string;
    /**
     * Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
     */
    approverAccount: string;
    /**
     * Optional. An optional comment for this manual approval result.
     */
    comment: string;
    /**
     * The decision of this manual approval.
     */
    decision: string;
    /**
     * Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.
     */
    url: string;
}

/**
 * Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
 */
export interface ArtifactObjectsResponse {
    /**
     * Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
     */
    location: string;
    /**
     * Path globs used to match files in the build's workspace.
     */
    paths: string[];
    /**
     * Stores timing information for pushing all artifact objects.
     */
    timing: outputs.cloudbuild.v1.TimeSpanResponse;
}

/**
 * Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
 */
export interface ArtifactsResponse {
    /**
     * A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
     */
    images: string[];
    /**
     * A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
     */
    mavenArtifacts: outputs.cloudbuild.v1.MavenArtifactResponse[];
    /**
     * A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
     */
    objects: outputs.cloudbuild.v1.ArtifactObjectsResponse;
    /**
     * A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
     */
    pythonPackages: outputs.cloudbuild.v1.PythonPackageResponse[];
}

/**
 * BitbucketServerConfig represents the configuration for a Bitbucket Server.
 */
export interface BitbucketServerConfigResponse {
    /**
     * Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     */
    apiKey: string;
    /**
     * Connected Bitbucket Server repositories for this config.
     */
    connectedRepositories: outputs.cloudbuild.v1.BitbucketServerRepositoryIdResponse[];
    /**
     * Time when the config was created.
     */
    createTime: string;
    /**
     * Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     */
    hostUri: string;
    /**
     * The resource name for the config.
     */
    name: string;
    /**
     * Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     */
    peeredNetwork: string;
    /**
     * Secret Manager secrets needed by the config.
     */
    secrets: outputs.cloudbuild.v1.BitbucketServerSecretsResponse;
    /**
     * Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
     */
    sslCa: string;
    /**
     * Username of the account Cloud Build will use on Bitbucket Server.
     */
    username: string;
    /**
     * UUID included in webhook requests. The UUID is used to look up the corresponding config.
     */
    webhookKey: string;
}

/**
 * BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
 */
export interface BitbucketServerRepositoryIdResponse {
    /**
     * Identifier for the project storing the repository.
     */
    projectKey: string;
    /**
     * Identifier for the repository.
     */
    repoSlug: string;
    /**
     * The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
     */
    webhookId: number;
}

/**
 * BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server.
 */
export interface BitbucketServerSecretsResponse {
    /**
     * The resource name for the admin access token's secret version.
     */
    adminAccessTokenVersionName: string;
    /**
     * The resource name for the read access token's secret version.
     */
    readAccessTokenVersionName: string;
    /**
     * Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     */
    webhookSecretVersionName: string;
}

/**
 * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
 */
export interface BitbucketServerTriggerConfigResponse {
    /**
     * The BitbucketServerConfig specified in the bitbucket_server_config_resource field.
     */
    bitbucketServerConfig: outputs.cloudbuild.v1.BitbucketServerConfigResponse;
    /**
     * The Bitbucket server config resource that this trigger config maps to.
     */
    bitbucketServerConfigResource: string;
    /**
     * Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
     */
    projectKey: string;
    /**
     * Filter to match changes in pull requests.
     */
    pullRequest: outputs.cloudbuild.v1.PullRequestFilterResponse;
    /**
     * Filter to match changes in refs like branches, tags.
     */
    push: outputs.cloudbuild.v1.PushFilterResponse;
    /**
     * Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
     */
    repoSlug: string;
}

/**
 * BuildApproval describes a build's approval configuration, state, and result.
 */
export interface BuildApprovalResponse {
    /**
     * Configuration for manual approval of this build.
     */
    config: outputs.cloudbuild.v1.ApprovalConfigResponse;
    /**
     * Result of manual approval for this Build.
     */
    result: outputs.cloudbuild.v1.ApprovalResultResponse;
    /**
     * The state of this build's approval.
     */
    state: string;
}

/**
 * Optional arguments to enable specific features of builds.
 */
export interface BuildOptionsResponse {
    /**
     * Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.
     */
    diskSizeGb: string;
    /**
     * Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
     */
    dynamicSubstitutions: boolean;
    /**
     * A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
     */
    env: string[];
    /**
     * Option to define build log streaming behavior to Google Cloud Storage.
     */
    logStreamingOption: string;
    /**
     * Option to specify the logging mode, which determines if and where build logs are stored.
     */
    logging: string;
    /**
     * Compute Engine machine type on which to run the build.
     */
    machineType: string;
    /**
     * Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
     */
    pool: outputs.cloudbuild.v1.PoolOptionResponse;
    /**
     * Requested verifiability options.
     */
    requestedVerifyOption: string;
    /**
     * A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
     */
    secretEnv: string[];
    /**
     * Requested hash for SourceProvenance.
     */
    sourceProvenanceHash: string[];
    /**
     * Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
     */
    substitutionOption: string;
    /**
     * Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
     */
    volumes: outputs.cloudbuild.v1.VolumeResponse[];
    /**
     * This field deprecated; please use `pool.name` instead.
     */
    workerPool: string;
}

/**
 * A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
 */
export interface BuildResponse {
    /**
     * Describes this build's approval configuration, status, and result.
     */
    approval: outputs.cloudbuild.v1.BuildApprovalResponse;
    /**
     * Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
     */
    artifacts: outputs.cloudbuild.v1.ArtifactsResponse;
    /**
     * Secrets and secret environment variables.
     */
    availableSecrets: outputs.cloudbuild.v1.SecretsResponse;
    /**
     * The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
     */
    buildTriggerId: string;
    /**
     * Time at which the request to create the build was received.
     */
    createTime: string;
    /**
     * Contains information about the build when status=FAILURE.
     */
    failureInfo: outputs.cloudbuild.v1.FailureInfoResponse;
    /**
     * Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
     */
    finishTime: string;
    /**
     * A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
     */
    images: string[];
    /**
     * URL to logs for this build in Google Cloud Console.
     */
    logUrl: string;
    /**
     * Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
     */
    logsBucket: string;
    /**
     * The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
     */
    name: string;
    /**
     * Special options for this build.
     */
    options: outputs.cloudbuild.v1.BuildOptionsResponse;
    /**
     * ID of the project.
     */
    project: string;
    /**
     * TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
     */
    queueTtl: string;
    /**
     * Results of the build.
     */
    results: outputs.cloudbuild.v1.ResultsResponse;
    /**
     * Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
     */
    secrets: outputs.cloudbuild.v1.SecretResponse[];
    /**
     * IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 
     */
    serviceAccount: string;
    /**
     * The location of the source files to build.
     */
    source: outputs.cloudbuild.v1.SourceResponse;
    /**
     * A permanent fixed identifier for source.
     */
    sourceProvenance: outputs.cloudbuild.v1.SourceProvenanceResponse;
    /**
     * Time at which execution of the build was started.
     */
    startTime: string;
    /**
     * Status of the build.
     */
    status: string;
    /**
     * Customer-readable message about the current status.
     */
    statusDetail: string;
    /**
     * The operations to be performed on the workspace.
     */
    steps: outputs.cloudbuild.v1.BuildStepResponse[];
    /**
     * Substitutions data for `Build` resource.
     */
    substitutions: {[key: string]: string};
    /**
     * Tags for annotation of a `Build`. These are not docker tags.
     */
    tags: string[];
    /**
     * Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
     */
    timeout: string;
    /**
     * Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
     */
    timing: {[key: string]: string};
    /**
     * Non-fatal problems encountered during the execution of the build.
     */
    warnings: outputs.cloudbuild.v1.WarningResponse[];
}

/**
 * A step in the build pipeline.
 */
export interface BuildStepResponse {
    /**
     * Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
     */
    allowExitCodes: number[];
    /**
     * Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
     */
    allowFailure: boolean;
    /**
     * A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
     */
    args: string[];
    /**
     * Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
     */
    dir: string;
    /**
     * Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
     */
    entrypoint: string;
    /**
     * A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
     */
    env: string[];
    /**
     * Return code from running the step.
     */
    exitCode: number;
    /**
     * The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
     */
    name: string;
    /**
     * Stores timing information for pulling this build step's builder image only.
     */
    pullTiming: outputs.cloudbuild.v1.TimeSpanResponse;
    /**
     * A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
     */
    script: string;
    /**
     * A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
     */
    secretEnv: string[];
    /**
     * Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
     */
    status: string;
    /**
     * Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
     */
    timeout: string;
    /**
     * Stores timing information for executing this build step.
     */
    timing: outputs.cloudbuild.v1.TimeSpanResponse;
    /**
     * List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
     */
    volumes: outputs.cloudbuild.v1.VolumeResponse[];
    /**
     * The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
     */
    waitFor: string[];
}

/**
 * An image built by the pipeline.
 */
export interface BuiltImageResponse {
    /**
     * Docker Registry 2.0 digest.
     */
    digest: string;
    /**
     * Name used to push the container image to Google Container Registry, as presented to `docker push`.
     */
    name: string;
    /**
     * Stores timing information for pushing the specified image.
     */
    pushTiming: outputs.cloudbuild.v1.TimeSpanResponse;
}

/**
 * A fatal problem encountered during the execution of the build.
 */
export interface FailureInfoResponse {
    /**
     * Explains the failure issue in more detail using hard-coded text.
     */
    detail: string;
    /**
     * The name of the failure.
     */
    type: string;
}

/**
 * Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
 */
export interface FileHashesResponse {
    /**
     * Collection of file hashes.
     */
    fileHash: outputs.cloudbuild.v1.HashResponse[];
}

/**
 * GitFileSource describes a file within a (possibly remote) code repository.
 */
export interface GitFileSourceResponse {
    /**
     * The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
     */
    bitbucketServerConfig: string;
    /**
     * The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
     */
    githubEnterpriseConfig: string;
    /**
     * The path of the file, with the repo root as the root of the path.
     */
    path: string;
    /**
     * See RepoType above.
     */
    repoType: string;
    /**
     * The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
     */
    revision: string;
    /**
     * The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
     */
    uri: string;
}

/**
 * GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.
 */
export interface GitHubEnterpriseSecretsResponse {
    /**
     * The resource name for the OAuth client ID secret in Secret Manager.
     */
    oauthClientIdName: string;
    /**
     * The resource name for the OAuth client ID secret version in Secret Manager.
     */
    oauthClientIdVersionName: string;
    /**
     * The resource name for the OAuth secret in Secret Manager.
     */
    oauthSecretName: string;
    /**
     * The resource name for the OAuth secret secret version in Secret Manager.
     */
    oauthSecretVersionName: string;
    /**
     * The resource name for the private key secret.
     */
    privateKeyName: string;
    /**
     * The resource name for the private key secret version.
     */
    privateKeyVersionName: string;
    /**
     * The resource name for the webhook secret in Secret Manager.
     */
    webhookSecretName: string;
    /**
     * The resource name for the webhook secret secret version in Secret Manager.
     */
    webhookSecretVersionName: string;
}

/**
 * GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
 */
export interface GitHubEventsConfigResponse {
    /**
     * Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
     */
    enterpriseConfigResourceName: string;
    /**
     * The installationID that emits the GitHub event.
     */
    installationId: string;
    /**
     * Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
     */
    name: string;
    /**
     * Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
     */
    owner: string;
    /**
     * filter to match changes in pull requests.
     */
    pullRequest: outputs.cloudbuild.v1.PullRequestFilterResponse;
    /**
     * filter to match changes in refs like branches, tags.
     */
    push: outputs.cloudbuild.v1.PushFilterResponse;
}

/**
 * GitLabConfig represents the configuration for a GitLab integration.
 */
export interface GitLabConfigResponse {
    /**
     * Connected GitLab.com or GitLabEnterprise repositories for this config.
     */
    connectedRepositories: outputs.cloudbuild.v1.GitLabRepositoryIdResponse[];
    /**
     * Time when the config was created.
     */
    createTime: string;
    /**
     * Optional. GitLabEnterprise config.
     */
    enterpriseConfig: outputs.cloudbuild.v1.GitLabEnterpriseConfigResponse;
    /**
     * The resource name for the config.
     */
    name: string;
    /**
     * Secret Manager secrets needed by the config.
     */
    secrets: outputs.cloudbuild.v1.GitLabSecretsResponse;
    /**
     * Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
     */
    username: string;
    /**
     * UUID included in webhook requests. The UUID is used to look up the corresponding config.
     */
    webhookKey: string;
}

/**
 * GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.
 */
export interface GitLabEnterpriseConfigResponse {
    /**
     * Immutable. The URI of the GitlabEnterprise host.
     */
    hostUri: string;
    /**
     * The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance.
     */
    serviceDirectoryConfig: outputs.cloudbuild.v1.ServiceDirectoryConfigResponse;
    /**
     * The SSL certificate to use in requests to GitLab Enterprise instances.
     */
    sslCa: string;
}

/**
 * GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.
 */
export interface GitLabEventsConfigResponse {
    /**
     * The GitLabConfig specified in the gitlab_config_resource field.
     */
    gitlabConfig: outputs.cloudbuild.v1.GitLabConfigResponse;
    /**
     * The GitLab config resource that this trigger config maps to.
     */
    gitlabConfigResource: string;
    /**
     * Namespace of the GitLab project.
     */
    projectNamespace: string;
    /**
     * Filter to match changes in pull requests.
     */
    pullRequest: outputs.cloudbuild.v1.PullRequestFilterResponse;
    /**
     * Filter to match changes in refs like branches, tags.
     */
    push: outputs.cloudbuild.v1.PushFilterResponse;
}

/**
 * GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
 */
export interface GitLabRepositoryIdResponse {
    /**
     * The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
     */
    webhookId: number;
}

/**
 * GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.
 */
export interface GitLabSecretsResponse {
    /**
     * The resource name for the api access token’s secret version
     */
    apiAccessTokenVersion: string;
    /**
     * Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.
     */
    apiKeyVersion: string;
    /**
     * The resource name for the read access token’s secret version
     */
    readAccessTokenVersion: string;
    /**
     * Immutable. The resource name for the webhook secret’s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig.
     */
    webhookSecretVersion: string;
}

/**
 * GitRepoSource describes a repo and ref of a code repository.
 */
export interface GitRepoSourceResponse {
    /**
     * The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
     */
    bitbucketServerConfig: string;
    /**
     * The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
     */
    githubEnterpriseConfig: string;
    /**
     * The branch or tag to use. Must start with "refs/" (required).
     */
    ref: string;
    /**
     * See RepoType below.
     */
    repoType: string;
    /**
     * The URI of the repo. Either uri or repository can be specified and is required.
     */
    uri: string;
}

/**
 * Container message for hash values.
 */
export interface HashResponse {
    /**
     * The type of hash that was performed.
     */
    type: string;
    /**
     * The hash value.
     */
    value: string;
}

/**
 * Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
 */
export interface InlineSecretResponse {
    /**
     * Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
     */
    envMap: {[key: string]: string};
    /**
     * Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*
     */
    kmsKeyName: string;
}

/**
 * A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
 */
export interface MavenArtifactResponse {
    /**
     * Maven `artifactId` value used when uploading the artifact to Artifact Registry.
     */
    artifactId: string;
    /**
     * Maven `groupId` value used when uploading the artifact to Artifact Registry.
     */
    groupId: string;
    /**
     * Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
     */
    path: string;
    /**
     * Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
     */
    repository: string;
    /**
     * Maven `version` value used when uploading the artifact to Artifact Registry.
     */
    version: string;
}

/**
 * Defines the network configuration for the pool.
 */
export interface NetworkConfigResponse {
    /**
     * Option to configure network egress for the workers.
     */
    egressOption: string;
    /**
     * Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
     */
    peeredNetwork: string;
}

/**
 * Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
 */
export interface PoolOptionResponse {
    /**
     * The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
     */
    name: string;
}

/**
 * Configuration for a V1 `PrivatePool`.
 */
export interface PrivatePoolV1ConfigResponse {
    /**
     * Network configuration for the pool.
     */
    networkConfig: outputs.cloudbuild.v1.NetworkConfigResponse;
    /**
     * Machine configuration for the workers in the pool.
     */
    workerConfig: outputs.cloudbuild.v1.WorkerConfigResponse;
}

/**
 * PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
 */
export interface PubsubConfigResponse {
    /**
     * Service account that will make the push request.
     */
    serviceAccountEmail: string;
    /**
     * Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
     */
    state: string;
    /**
     * Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.
     */
    subscription: string;
    /**
     * The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
     */
    topic: string;
}

/**
 * PullRequestFilter contains filter properties for matching GitHub Pull Requests.
 */
export interface PullRequestFilterResponse {
    /**
     * Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     */
    branch: string;
    /**
     * Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
     */
    commentControl: string;
    /**
     * If true, branches that do NOT match the git_ref will trigger a build.
     */
    invertRegex: boolean;
}

/**
 * Push contains filter properties for matching GitHub git pushes.
 */
export interface PushFilterResponse {
    /**
     * Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     */
    branch: string;
    /**
     * When true, only trigger a build if the revision regex does NOT match the git_ref regex.
     */
    invertRegex: boolean;
    /**
     * Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     */
    tag: string;
}

/**
 * Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
 */
export interface PythonPackageResponse {
    /**
     * Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
     */
    paths: string[];
    /**
     * Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
     */
    repository: string;
}

/**
 * Location of the source in a Google Cloud Source Repository.
 */
export interface RepoSourceResponse {
    /**
     * Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     */
    branchName: string;
    /**
     * Explicit commit SHA to build.
     */
    commitSha: string;
    /**
     * Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
     */
    dir: string;
    /**
     * Only trigger a build if the revision regex does NOT match the revision regex.
     */
    invertRegex: boolean;
    /**
     * ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
     */
    project: string;
    /**
     * Name of the Cloud Source Repository.
     */
    repoName: string;
    /**
     * Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
     */
    substitutions: {[key: string]: string};
    /**
     * Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
     */
    tagName: string;
}

/**
 * Artifacts created by the build pipeline.
 */
export interface ResultsResponse {
    /**
     * Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
     */
    artifactManifest: string;
    /**
     * Time to push all non-container artifacts to Cloud Storage.
     */
    artifactTiming: outputs.cloudbuild.v1.TimeSpanResponse;
    /**
     * List of build step digests, in the order corresponding to build step indices.
     */
    buildStepImages: string[];
    /**
     * List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
     */
    buildStepOutputs: string[];
    /**
     * Container images that were built as a part of the build.
     */
    images: outputs.cloudbuild.v1.BuiltImageResponse[];
    /**
     * Maven artifacts uploaded to Artifact Registry at the end of the build.
     */
    mavenArtifacts: outputs.cloudbuild.v1.UploadedMavenArtifactResponse[];
    /**
     * Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
     */
    numArtifacts: string;
    /**
     * Python artifacts uploaded to Artifact Registry at the end of the build.
     */
    pythonPackages: outputs.cloudbuild.v1.UploadedPythonPackageResponse[];
}

/**
 * Pairs a secret environment variable with a SecretVersion in Secret Manager.
 */
export interface SecretManagerSecretResponse {
    /**
     * Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
     */
    env: string;
    /**
     * Resource name of the SecretVersion. In format: projects/*&#47;secrets/*&#47;versions/*
     */
    versionName: string;
}

/**
 * Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
 */
export interface SecretResponse {
    /**
     * Cloud KMS key name to use to decrypt these envs.
     */
    kmsKeyName: string;
    /**
     * Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
     */
    secretEnv: {[key: string]: string};
}

/**
 * Secrets and secret environment variables.
 */
export interface SecretsResponse {
    /**
     * Secrets encrypted with KMS key and the associated secret environment variable.
     */
    inline: outputs.cloudbuild.v1.InlineSecretResponse[];
    /**
     * Secrets in Secret Manager and associated secret environment variable.
     */
    secretManager: outputs.cloudbuild.v1.SecretManagerSecretResponse[];
}

/**
 * ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.
 */
export interface ServiceDirectoryConfigResponse {
    /**
     * The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
     */
    service: string;
}

/**
 * Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
 */
export interface SourceProvenanceResponse {
    /**
     * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
     */
    fileHashes: {[key: string]: string};
    /**
     * A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
     */
    resolvedRepoSource: outputs.cloudbuild.v1.RepoSourceResponse;
    /**
     * A copy of the build's `source.storage_source`, if exists, with any generations resolved.
     */
    resolvedStorageSource: outputs.cloudbuild.v1.StorageSourceResponse;
    /**
     * A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
     */
    resolvedStorageSourceManifest: outputs.cloudbuild.v1.StorageSourceManifestResponse;
}

/**
 * Location of the source in a supported storage service.
 */
export interface SourceResponse {
    /**
     * If provided, get the source from this location in a Cloud Source Repository.
     */
    repoSource: outputs.cloudbuild.v1.RepoSourceResponse;
    /**
     * If provided, get the source from this location in Google Cloud Storage.
     */
    storageSource: outputs.cloudbuild.v1.StorageSourceResponse;
    /**
     * If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
     */
    storageSourceManifest: outputs.cloudbuild.v1.StorageSourceManifestResponse;
}

/**
 * Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
 */
export interface StorageSourceManifestResponse {
    /**
     * Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
     */
    bucket: string;
    /**
     * Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
     */
    generation: string;
    /**
     * Google Cloud Storage object containing the source manifest. This object must be a JSON file.
     */
    object: string;
}

/**
 * Location of the source in an archive file in Google Cloud Storage.
 */
export interface StorageSourceResponse {
    /**
     * Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
     */
    bucket: string;
    /**
     * Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
     */
    generation: string;
    /**
     * Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
     */
    object: string;
}

/**
 * Start and end times for a build execution phase.
 */
export interface TimeSpanResponse {
    /**
     * End of time span.
     */
    endTime: string;
    /**
     * Start of time span.
     */
    startTime: string;
}

/**
 * A Maven artifact uploaded using the MavenArtifact directive.
 */
export interface UploadedMavenArtifactResponse {
    /**
     * Hash types and values of the Maven Artifact.
     */
    fileHashes: outputs.cloudbuild.v1.FileHashesResponse;
    /**
     * Stores timing information for pushing the specified artifact.
     */
    pushTiming: outputs.cloudbuild.v1.TimeSpanResponse;
    /**
     * URI of the uploaded artifact.
     */
    uri: string;
}

/**
 * Artifact uploaded using the PythonPackage directive.
 */
export interface UploadedPythonPackageResponse {
    /**
     * Hash types and values of the Python Artifact.
     */
    fileHashes: outputs.cloudbuild.v1.FileHashesResponse;
    /**
     * Stores timing information for pushing the specified artifact.
     */
    pushTiming: outputs.cloudbuild.v1.TimeSpanResponse;
    /**
     * URI of the uploaded artifact.
     */
    uri: string;
}

/**
 * Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
 */
export interface VolumeResponse {
    /**
     * Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
     */
    name: string;
    /**
     * Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
     */
    path: string;
}

/**
 * A non-fatal problem encountered during the execution of the build.
 */
export interface WarningResponse {
    /**
     * The priority for this warning.
     */
    priority: string;
    /**
     * Explanation of the warning generated.
     */
    text: string;
}

/**
 * WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
 */
export interface WebhookConfigResponse {
    /**
     * Resource name for the secret required as a URL parameter.
     */
    secret: string;
    /**
     * Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
     */
    state: string;
}

/**
 * Defines the configuration to be used for creating workers in the pool.
 */
export interface WorkerConfigResponse {
    /**
     * Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 1000. If `0` is specified, Cloud Build will use a standard disk size.
     */
    diskSizeGb: string;
    /**
     * Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.
     */
    machineType: string;
}

