// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * The throughput capacity configuration for each partition.
 */
export interface CapacityArgs {
    /**
     * Publish throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.
     */
    publishMibPerSec?: pulumi.Input<number>;
    /**
     * Subscribe throughput capacity per partition in MiB/s. Must be >= 4 and <= 32.
     */
    subscribeMibPerSec?: pulumi.Input<number>;
}

/**
 * The settings for a subscription's message delivery.
 */
export interface DeliveryConfigArgs {
    /**
     * The DeliveryRequirement for this subscription.
     */
    deliveryRequirement?: pulumi.Input<enums.pubsublite.v1.DeliveryConfigDeliveryRequirement>;
}

/**
 * The settings for a topic's partitions.
 */
export interface PartitionConfigArgs {
    /**
     * The capacity configuration.
     */
    capacity?: pulumi.Input<inputs.pubsublite.v1.CapacityArgs>;
    /**
     * The number of partitions in the topic. Must be at least 1. Once a topic has been created the number of partitions can be increased but not decreased. Message ordering is not guaranteed across a topic resize. For more information see https://cloud.google.com/pubsub/lite/docs/topics#scaling_capacity
     */
    count?: pulumi.Input<string>;
    /**
     * DEPRECATED: Use capacity instead which can express a superset of configurations. Every partition in the topic is allocated throughput equivalent to `scale` times the standard partition throughput (4 MiB/s). This is also reflected in the cost of this topic; a topic with `scale` of 2 and count of 10 is charged for 20 partitions. This value must be in the range [1,4].
     *
     * @deprecated DEPRECATED: Use capacity instead which can express a superset of configurations. Every partition in the topic is allocated throughput equivalent to `scale` times the standard partition throughput (4 MiB/s). This is also reflected in the cost of this topic; a topic with `scale` of 2 and count of 10 is charged for 20 partitions. This value must be in the range [1,4].
     */
    scale?: pulumi.Input<number>;
}

/**
 * The settings for this topic's Reservation usage.
 */
export interface ReservationConfigArgs {
    /**
     * The Reservation to use for this topic's throughput capacity. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}
     */
    throughputReservation?: pulumi.Input<string>;
}

/**
 * The settings for a topic's message retention.
 */
export interface RetentionConfigArgs {
    /**
     * The provisioned storage, in bytes, per partition. If the number of bytes stored in any of the topic's partitions grows beyond this value, older messages will be dropped to make room for newer ones, regardless of the value of `period`.
     */
    perPartitionBytes?: pulumi.Input<string>;
    /**
     * How long a published message is retained. If unset, messages will be retained as long as the bytes retained for each partition is below `per_partition_bytes`.
     */
    period?: pulumi.Input<string>;
}

