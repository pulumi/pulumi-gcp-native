// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Represents the action responsible for access control list management operations.
 */
export interface GoogleCloudContentwarehouseV1AccessControlActionResponse {
    /**
     * Identifies the type of operation.
     */
    operationType: string;
    /**
     * Represents the new policy from which bindings are added, removed or replaced based on the type of the operation. the policy is limited to a few 10s of KB.
     */
    policy: outputs.contentwarehouse.v1.GoogleIamV1PolicyResponse;
}

/**
 * Represents the action triggered by Rule Engine when the rule is true.
 */
export interface GoogleCloudContentwarehouseV1ActionResponse {
    /**
     * Action triggering access control operations.
     */
    accessControl: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1AccessControlActionResponse;
    /**
     * ID of the action. Managed internally.
     */
    actionId: string;
    /**
     * Action triggering create document link operation.
     */
    addToFolder: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1AddToFolderActionResponse;
    /**
     * Action triggering data update operations.
     */
    dataUpdate: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1DataUpdateActionResponse;
    /**
     * Action triggering data validation operations.
     */
    dataValidation: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1DataValidationActionResponse;
    /**
     * Action deleting the document.
     */
    deleteDocumentAction: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1DeleteDocumentActionResponse;
    /**
     * Action publish to Pub/Sub operation.
     */
    publishToPubSub: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1PublishActionResponse;
    /**
     * Action removing a document from a folder.
     */
    removeFromFolderAction: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1RemoveFromFolderActionResponse;
}

/**
 * Represents the action responsible for adding document under a folder.
 */
export interface GoogleCloudContentwarehouseV1AddToFolderActionResponse {
    /**
     * Names of the folder under which new document is to be added. Format: projects/{project_number}/locations/{location}/documents/{document_id}.
     */
    folders: string[];
}

/**
 * Represents the action responsible for properties update operations.
 */
export interface GoogleCloudContentwarehouseV1DataUpdateActionResponse {
    /**
     * Map of (K, V) -> (valid name of the field, new value of the field) E.g., ("age", "60") entry triggers update of field age with a value of 60. If the field is not present then new entry is added. During update action execution, value strings will be casted to appropriate types.
     */
    entries: {[key: string]: string};
}

/**
 * Represents the action responsible for data validation operations.
 */
export interface GoogleCloudContentwarehouseV1DataValidationActionResponse {
    /**
     * Map of (K, V) -> (field, string condition to be evaluated on the field) E.g., ("age", "age > 18 && age < 60") entry triggers validation of field age with the given condition. Map entries will be ANDed during validation.
     */
    conditions: {[key: string]: string};
}

/**
 * DateTime values.
 */
export interface GoogleCloudContentwarehouseV1DateTimeArrayResponse {
    /**
     * List of datetime values. Both OffsetDateTime and ZonedDateTime are supported.
     */
    values: outputs.contentwarehouse.v1.GoogleTypeDateTimeResponse[];
}

/**
 * Configurations for a date time property.
 */
export interface GoogleCloudContentwarehouseV1DateTimeTypeOptionsResponse {
}

/**
 * Represents the action responsible for deleting the document.
 */
export interface GoogleCloudContentwarehouseV1DeleteDocumentActionResponse {
    /**
     * Boolean field to select between hard vs soft delete options. Set 'true' for 'hard delete' and 'false' for 'soft delete'.
     */
    enableHardDelete: boolean;
}

/**
 * Enum values.
 */
export interface GoogleCloudContentwarehouseV1EnumArrayResponse {
    /**
     * List of enum values.
     */
    values: string[];
}

/**
 * Configurations for an enum/categorical property.
 */
export interface GoogleCloudContentwarehouseV1EnumTypeOptionsResponse {
    /**
     * List of possible enum values.
     */
    possibleValues: string[];
    /**
     * Make sure the Enum property value provided in the document is in the possile value list during document creation. The validation check runs by default.
     */
    validationCheckDisabled: boolean;
}

/**
 * Float values.
 */
export interface GoogleCloudContentwarehouseV1FloatArrayResponse {
    /**
     * List of float values.
     */
    values: number[];
}

/**
 * Configurations for a float property.
 */
export interface GoogleCloudContentwarehouseV1FloatTypeOptionsResponse {
}

/**
 * Integer values.
 */
export interface GoogleCloudContentwarehouseV1IntegerArrayResponse {
    /**
     * List of integer values.
     */
    values: number[];
}

/**
 * Configurations for an integer property.
 */
export interface GoogleCloudContentwarehouseV1IntegerTypeOptionsResponse {
}

/**
 * Map property value. Represents a structured entries of key value pairs, consisting of field names which map to dynamically typed values.
 */
export interface GoogleCloudContentwarehouseV1MapPropertyResponse {
    /**
     * Unordered map of dynamically typed values.
     */
    fields: {[key: string]: string};
}

/**
 * Configurations for a Map property.
 */
export interface GoogleCloudContentwarehouseV1MapTypeOptionsResponse {
}

/**
 * Property values.
 */
export interface GoogleCloudContentwarehouseV1PropertyArrayResponse {
    /**
     * List of property values.
     */
    properties: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1PropertyResponse[];
}

/**
 * Defines the metadata for a schema property.
 */
export interface GoogleCloudContentwarehouseV1PropertyDefinitionResponse {
    /**
     * Date time property. It is not supported by CMEK compliant deployment.
     */
    dateTimeTypeOptions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1DateTimeTypeOptionsResponse;
    /**
     * The display-name for the property, used for front-end.
     */
    displayName: string;
    /**
     * Enum/categorical property.
     */
    enumTypeOptions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1EnumTypeOptionsResponse;
    /**
     * Float property.
     */
    floatTypeOptions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1FloatTypeOptionsResponse;
    /**
     * Integer property.
     */
    integerTypeOptions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1IntegerTypeOptionsResponse;
    /**
     * Whether the property can be filtered. If this is a sub-property, all the parent properties must be marked filterable.
     */
    isFilterable: boolean;
    /**
     * Whether the property is user supplied metadata.
     */
    isMetadata: boolean;
    /**
     * Whether the property can have multiple values.
     */
    isRepeatable: boolean;
    /**
     * Whether the property is mandatory. Default is 'false', i.e. populating property value can be skipped. If 'true' then user must populate the value for this property.
     */
    isRequired: boolean;
    /**
     * Indicates that the property should be included in a global search.
     */
    isSearchable: boolean;
    /**
     * Map property.
     */
    mapTypeOptions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1MapTypeOptionsResponse;
    /**
     * The name of the metadata property. Must be unique within a document schema and is case insensitive. Names must be non-blank, start with a letter, and can contain alphanumeric characters and: /, :, -, _, and .
     */
    name: string;
    /**
     * Nested structured data property.
     */
    propertyTypeOptions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1PropertyTypeOptionsResponse;
    /**
     * Text/string property.
     */
    textTypeOptions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1TextTypeOptionsResponse;
    /**
     * Timestamp property. It is not supported by CMEK compliant deployment.
     */
    timestampTypeOptions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1TimestampTypeOptionsResponse;
}

/**
 * Property of a document.
 */
export interface GoogleCloudContentwarehouseV1PropertyResponse {
    /**
     * Date time property values. It is not supported by CMEK compliant deployment.
     */
    dateTimeValues: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1DateTimeArrayResponse;
    /**
     * Enum property values.
     */
    enumValues: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1EnumArrayResponse;
    /**
     * Float property values.
     */
    floatValues: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1FloatArrayResponse;
    /**
     * Integer property values.
     */
    integerValues: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1IntegerArrayResponse;
    /**
     * Map property values.
     */
    mapProperty: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1MapPropertyResponse;
    /**
     * Must match the name of a PropertyDefinition in the DocumentSchema.
     */
    name: string;
    /**
     * Nested structured data property values.
     */
    propertyValues: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1PropertyArrayResponse;
    /**
     * String/text property values.
     */
    textValues: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1TextArrayResponse;
    /**
     * Timestamp property values. It is not supported by CMEK compliant deployment.
     */
    timestampValues: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1TimestampArrayResponse;
}

/**
 * Configurations for a nested structured data property.
 */
export interface GoogleCloudContentwarehouseV1PropertyTypeOptionsResponse {
    /**
     * List of property definitions.
     */
    propertyDefinitions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1PropertyDefinitionResponse[];
}

/**
 * Represents the action responsible for publishing messages to a Pub/Sub topic.
 */
export interface GoogleCloudContentwarehouseV1PublishActionResponse {
    /**
     * Messages to be published.
     */
    messages: string[];
    /**
     * The topic id in the Pub/Sub service for which messages will be published to.
     */
    topicId: string;
}

/**
 * Represents the action responsible for remove a document from a specific folder.
 */
export interface GoogleCloudContentwarehouseV1RemoveFromFolderActionResponse {
    /**
     * Condition of the action to be executed.
     */
    condition: string;
    /**
     * Name of the folder under which new document is to be added. Format: projects/{project_number}/locations/{location}/documents/{document_id}.
     */
    folder: string;
}

/**
 * Represents the rule for a content warehouse trigger.
 */
export interface GoogleCloudContentwarehouseV1RuleResponse {
    /**
     * List of actions that are executed when the rule is satisfied.
     */
    actions: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1ActionResponse[];
    /**
     * Represents the conditional expression to be evaluated. Expression should evaluate to a boolean result. When the condition is true actions are executed. Example: user_role = "hsbc_role_1" AND doc.salary > 20000
     */
    condition: string;
    /**
     * Short description of the rule and its context.
     */
    description: string;
    /**
     * ID of the rule. It has to be unique across all the examples. This is managed internally.
     */
    ruleId: string;
    /**
     * Identifies the trigger type for running the policy.
     */
    triggerType: string;
}

/**
 * Represents a list of words given by the customer All these words are synonyms of each other.
 */
export interface GoogleCloudContentwarehouseV1SynonymSetSynonymResponse {
    /**
     * For example: sale, invoice, bill, order
     */
    words: string[];
}

/**
 * String/text values.
 */
export interface GoogleCloudContentwarehouseV1TextArrayResponse {
    /**
     * List of text values.
     */
    values: string[];
}

/**
 * Configurations for a text property.
 */
export interface GoogleCloudContentwarehouseV1TextTypeOptionsResponse {
}

/**
 * Timestamp values.
 */
export interface GoogleCloudContentwarehouseV1TimestampArrayResponse {
    /**
     * List of timestamp values.
     */
    values: outputs.contentwarehouse.v1.GoogleCloudContentwarehouseV1TimestampValueResponse[];
}

/**
 * Configurations for a timestamp property.
 */
export interface GoogleCloudContentwarehouseV1TimestampTypeOptionsResponse {
}

/**
 * Timestamp value type.
 */
export interface GoogleCloudContentwarehouseV1TimestampValueResponse {
    /**
     * The string must represent a valid instant in UTC and is parsed using java.time.format.DateTimeFormatter.ISO_INSTANT. e.g. "2013-09-29T18:46:19Z"
     */
    textValue: string;
    /**
     * Timestamp value
     */
    timestampValue: string;
}

/**
 * Encodes the detailed information of a barcode.
 */
export interface GoogleCloudDocumentaiV1BarcodeResponse {
    /**
     * Format of a barcode. The supported formats are: CODE_128: Code 128 type. CODE_39: Code 39 type. CODE_93: Code 93 type. CODABAR: Codabar type. DATA_MATRIX: 2D Data Matrix type. ITF: ITF type. EAN_13: EAN-13 type. EAN_8: EAN-8 type. QR_CODE: 2D QR code type. UPC_A: UPC-A type. UPC_E: UPC-E type. PDF417: PDF417 type. AZTEC: 2D Aztec code type. DATABAR: GS1 DataBar code type.
     */
    format: string;
    /**
     * Raw value encoded in the barcode. For example, 'MEBKM:TITLE:Google;URL:https://www.google.com;;'.
     */
    rawValue: string;
    /**
     * Value format describes the format of the value that a barcode encodes. The supported formats are: CONTACT_INFO: Contact information. EMAIL: Email address. ISBN: ISBN identifier. PHONE: Phone number. PRODUCT: Product. SMS: SMS message. TEXT: Text string. URL: URL address. WIFI: Wifi information. GEO: Geo-localization. CALENDAR_EVENT: Calendar event. DRIVER_LICENSE: Driver's license.
     */
    valueFormat: string;
}

/**
 * A bounding polygon for the detected image annotation.
 */
export interface GoogleCloudDocumentaiV1BoundingPolyResponse {
    /**
     * The bounding polygon normalized vertices.
     */
    normalizedVertices: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1NormalizedVertexResponse[];
    /**
     * The bounding polygon vertices.
     */
    vertices: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1VertexResponse[];
}

/**
 * Parsed and normalized entity value.
 */
export interface GoogleCloudDocumentaiV1DocumentEntityNormalizedValueResponse {
    /**
     * Postal address. See also: https://github.com/googleapis/googleapis/blob/master/google/type/postal_address.proto
     */
    addressValue: outputs.contentwarehouse.v1.GoogleTypePostalAddressResponse;
    /**
     * Boolean value. Can be used for entities with binary values, or for checkboxes.
     */
    booleanValue: boolean;
    /**
     * Date value. Includes year, month, day. See also: https://github.com/googleapis/googleapis/blob/master/google/type/date.proto
     */
    dateValue: outputs.contentwarehouse.v1.GoogleTypeDateResponse;
    /**
     * DateTime value. Includes date, time, and timezone. See also: https://github.com/googleapis/googleapis/blob/master/google/type/datetime.proto
     */
    datetimeValue: outputs.contentwarehouse.v1.GoogleTypeDateTimeResponse;
    /**
     * Float value.
     */
    floatValue: number;
    /**
     * Integer value.
     */
    integerValue: number;
    /**
     * Money value. See also: https://github.com/googleapis/googleapis/blob/master/google/type/money.proto
     */
    moneyValue: outputs.contentwarehouse.v1.GoogleTypeMoneyResponse;
    /**
     * Optional. An optional field to store a normalized string. For some entity types, one of respective `structured_value` fields may also be populated. Also not all the types of `structured_value` will be normalized. For example, some processors may not generate float or int normalized text by default. Below are sample formats mapped to structured values. - Money/Currency type (`money_value`) is in the ISO 4217 text format. - Date type (`date_value`) is in the ISO 8601 text format. - Datetime type (`datetime_value`) is in the ISO 8601 text format.
     */
    text: string;
}

/**
 * Relationship between Entities.
 */
export interface GoogleCloudDocumentaiV1DocumentEntityRelationResponse {
    /**
     * Object entity id.
     */
    objectId: string;
    /**
     * Relationship description.
     */
    relation: string;
    /**
     * Subject entity id.
     */
    subjectId: string;
}

/**
 * An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.
 */
export interface GoogleCloudDocumentaiV1DocumentEntityResponse {
    /**
     * Optional. Confidence of detected Schema entity. Range [0, 1].
     */
    confidence: number;
    /**
     * Optional. Deprecated. Use `id` field instead.
     *
     * @deprecated Optional. Deprecated. Use `id` field instead.
     */
    mentionId: string;
    /**
     * Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.
     */
    mentionText: string;
    /**
     * Optional. Normalized entity value. Absent if the extracted value could not be converted or the type (e.g. address) is not supported for certain parsers. This field is also only populated for certain supported document types.
     */
    normalizedValue: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentEntityNormalizedValueResponse;
    /**
     * Optional. Represents the provenance of this entity wrt. the location on the page where it was found.
     */
    pageAnchor: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageAnchorResponse;
    /**
     * Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.
     */
    properties: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentEntityResponse[];
    /**
     * Optional. The history of this annotation.
     */
    provenance: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentProvenanceResponse;
    /**
     * Optional. Whether the entity will be redacted for de-identification purposes.
     */
    redacted: boolean;
    /**
     * Optional. Provenance of the entity. Text anchor indexing into the Document.text.
     */
    textAnchor: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentTextAnchorResponse;
    /**
     * Entity type from a schema e.g. `Address`.
     */
    type: string;
}

/**
 * Represents a weak reference to a page element within a document.
 */
export interface GoogleCloudDocumentaiV1DocumentPageAnchorPageRefResponse {
    /**
     * Optional. Identifies the bounding polygon of a layout element on the page.
     */
    boundingPoly: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1BoundingPolyResponse;
    /**
     * Optional. Confidence of detected page element, if applicable. Range [0, 1].
     */
    confidence: number;
    /**
     * Optional. Deprecated. Use PageRef.bounding_poly instead.
     *
     * @deprecated Optional. Deprecated. Use PageRef.bounding_poly instead.
     */
    layoutId: string;
    /**
     * Optional. The type of the layout element that is being referenced if any.
     */
    layoutType: string;
    /**
     * Index into the Document.pages element, for example using Document.pages to locate the related page element. This field is skipped when its value is the default 0. See https://developers.google.com/protocol-buffers/docs/proto3#json.
     */
    page: string;
}

/**
 * Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.
 */
export interface GoogleCloudDocumentaiV1DocumentPageAnchorResponse {
    /**
     * One or more references to visual page elements
     */
    pageRefs: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageAnchorPageRefResponse[];
}

/**
 * A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.
 */
export interface GoogleCloudDocumentaiV1DocumentPageBlockResponse {
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * Layout for Block.
     */
    layout: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
    /**
     * The history of this annotation.
     */
    provenance: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentProvenanceResponse;
}

/**
 * A detected barcode.
 */
export interface GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeResponse {
    /**
     * Detailed barcode information of the DetectedBarcode.
     */
    barcode: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1BarcodeResponse;
    /**
     * Layout for DetectedBarcode.
     */
    layout: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
}

/**
 * Detected language for a structural component.
 */
export interface GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse {
    /**
     * Confidence of detected language. Range [0, 1].
     */
    confidence: number;
    /**
     * The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
     */
    languageCode: string;
}

/**
 * Dimension for the page.
 */
export interface GoogleCloudDocumentaiV1DocumentPageDimensionResponse {
    /**
     * Page height.
     */
    height: number;
    /**
     * Dimension unit.
     */
    unit: string;
    /**
     * Page width.
     */
    width: number;
}

/**
 * A form field detected on the page.
 */
export interface GoogleCloudDocumentaiV1DocumentPageFormFieldResponse {
    /**
     * Created for Labeling UI to export key text. If corrections were made to the text identified by the `field_name.text_anchor`, this field will contain the correction.
     */
    correctedKeyText: string;
    /**
     * Created for Labeling UI to export value text. If corrections were made to the text identified by the `field_value.text_anchor`, this field will contain the correction.
     */
    correctedValueText: string;
    /**
     * Layout for the FormField name. e.g. `Address`, `Email`, `Grand total`, `Phone number`, etc.
     */
    fieldName: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
    /**
     * Layout for the FormField value.
     */
    fieldValue: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
    /**
     * A list of detected languages for name together with confidence.
     */
    nameDetectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * The history of this annotation.
     */
    provenance: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentProvenanceResponse;
    /**
     * A list of detected languages for value together with confidence.
     */
    valueDetectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * If the value is non-textual, this field represents the type. Current valid values are: - blank (this indicates the field_value is normal text) - "unfilled_checkbox" - "filled_checkbox"
     */
    valueType: string;
}

/**
 * Image Quality Defects
 */
export interface GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectResponse {
    /**
     * Confidence of detected defect. Range [0, 1] where 1 indicates strong confidence of that the defect exists.
     */
    confidence: number;
    /**
     * Name of the defect type. Supported values are "quality/defect_blurry", "quality/defect_noisy", "quality/defect_dark", "quality/defect_faint", "quality/defect_text_too_small", "quality/defect_document_cutoff", "quality/defect_text_cutoff", "quality/defect_glare"
     */
    type: string;
}

/**
 * Image Quality Scores for the page image
 */
export interface GoogleCloudDocumentaiV1DocumentPageImageQualityScoresResponse {
    /**
     * A list of detected defects.
     */
    detectedDefects: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefectResponse[];
    /**
     * The overall quality score. Range [0, 1] where 1 is perfect quality.
     */
    qualityScore: number;
}

/**
 * Rendered image contents for this page.
 */
export interface GoogleCloudDocumentaiV1DocumentPageImageResponse {
    /**
     * Raw byte content of the image.
     */
    content: string;
    /**
     * Height of the image in pixels.
     */
    height: number;
    /**
     * Encoding mime type for the image.
     */
    mimeType: string;
    /**
     * Width of the image in pixels.
     */
    width: number;
}

/**
 * Visual element describing a layout unit on a page.
 */
export interface GoogleCloudDocumentaiV1DocumentPageLayoutResponse {
    /**
     * The bounding polygon for the Layout.
     */
    boundingPoly: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1BoundingPolyResponse;
    /**
     * Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range [0, 1].
     */
    confidence: number;
    /**
     * Detected orientation for the Layout.
     */
    orientation: string;
    /**
     * Text anchor indexing into the Document.text.
     */
    textAnchor: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentTextAnchorResponse;
}

/**
 * A collection of tokens that a human would perceive as a line. Does not cross column boundaries, can be horizontal, vertical, etc.
 */
export interface GoogleCloudDocumentaiV1DocumentPageLineResponse {
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * Layout for Line.
     */
    layout: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
    /**
     * The history of this annotation.
     */
    provenance: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentProvenanceResponse;
}

/**
 * Representation for transformation matrix, intended to be compatible and used with OpenCV format for image manipulation.
 */
export interface GoogleCloudDocumentaiV1DocumentPageMatrixResponse {
    /**
     * Number of columns in the matrix.
     */
    cols: number;
    /**
     * The matrix data.
     */
    data: string;
    /**
     * Number of rows in the matrix.
     */
    rows: number;
    /**
     * This encodes information about what data type the matrix uses. For example, 0 (CV_8U) is an unsigned 8-bit image. For the full list of OpenCV primitive data types, please refer to https://docs.opencv.org/4.3.0/d1/d1b/group__core__hal__interface.html
     */
    type: number;
}

/**
 * A collection of lines that a human would perceive as a paragraph.
 */
export interface GoogleCloudDocumentaiV1DocumentPageParagraphResponse {
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * Layout for Paragraph.
     */
    layout: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
    /**
     * The history of this annotation.
     */
    provenance: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentProvenanceResponse;
}

/**
 * A page in a Document.
 */
export interface GoogleCloudDocumentaiV1DocumentPageResponse {
    /**
     * A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.
     */
    blocks: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageBlockResponse[];
    /**
     * A list of detected barcodes.
     */
    detectedBarcodes: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedBarcodeResponse[];
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * Physical dimension of the page.
     */
    dimension: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDimensionResponse;
    /**
     * A list of visually detected form fields on the page.
     */
    formFields: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageFormFieldResponse[];
    /**
     * Rendered image for this page. This image is preprocessed to remove any skew, rotation, and distortions such that the annotation bounding boxes can be upright and axis-aligned.
     */
    image: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageImageResponse;
    /**
     * Image Quality Scores.
     */
    imageQualityScores: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageImageQualityScoresResponse;
    /**
     * Layout for the page.
     */
    layout: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
    /**
     * A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.
     */
    lines: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLineResponse[];
    /**
     * 1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.
     */
    pageNumber: number;
    /**
     * A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.
     */
    paragraphs: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageParagraphResponse[];
    /**
     * The history of this page.
     */
    provenance: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentProvenanceResponse;
    /**
     * A list of visually detected symbols on the page.
     */
    symbols: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageSymbolResponse[];
    /**
     * A list of visually detected tables on the page.
     */
    tables: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageTableResponse[];
    /**
     * A list of visually detected tokens on the page.
     */
    tokens: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageTokenResponse[];
    /**
     * Transformation matrices that were applied to the original document image to produce Page.image.
     */
    transforms: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageMatrixResponse[];
    /**
     * A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.
     */
    visualElements: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageVisualElementResponse[];
}

/**
 * A detected symbol.
 */
export interface GoogleCloudDocumentaiV1DocumentPageSymbolResponse {
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * Layout for Symbol.
     */
    layout: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
}

/**
 * A table representation similar to HTML table structure.
 */
export interface GoogleCloudDocumentaiV1DocumentPageTableResponse {
    /**
     * Body rows of the table.
     */
    bodyRows: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageTableTableRowResponse[];
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * Header rows of the table.
     */
    headerRows: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageTableTableRowResponse[];
    /**
     * Layout for Table.
     */
    layout: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
    /**
     * The history of this table.
     */
    provenance: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentProvenanceResponse;
}

/**
 * A cell representation inside the table.
 */
export interface GoogleCloudDocumentaiV1DocumentPageTableTableCellResponse {
    /**
     * How many columns this cell spans.
     */
    colSpan: number;
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * Layout for TableCell.
     */
    layout: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
    /**
     * How many rows this cell spans.
     */
    rowSpan: number;
}

/**
 * A row of table cells.
 */
export interface GoogleCloudDocumentaiV1DocumentPageTableTableRowResponse {
    /**
     * Cells that make up this row.
     */
    cells: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageTableTableCellResponse[];
}

/**
 * Detected break at the end of a Token.
 */
export interface GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakResponse {
    /**
     * Detected break type.
     */
    type: string;
}

/**
 * A detected token.
 */
export interface GoogleCloudDocumentaiV1DocumentPageTokenResponse {
    /**
     * Detected break at the end of a Token.
     */
    detectedBreak: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakResponse;
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * Layout for Token.
     */
    layout: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
    /**
     * The history of this annotation.
     */
    provenance: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentProvenanceResponse;
}

/**
 * Detected non-text visual elements e.g. checkbox, signature etc. on the page.
 */
export interface GoogleCloudDocumentaiV1DocumentPageVisualElementResponse {
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageDetectedLanguageResponse[];
    /**
     * Layout for VisualElement.
     */
    layout: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageLayoutResponse;
    /**
     * Type of the VisualElement.
     */
    type: string;
}

/**
 * The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.
 */
export interface GoogleCloudDocumentaiV1DocumentProvenanceParentResponse {
    /**
     * The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.
     */
    index: number;
    /**
     * The index of the index into current revision's parent_ids list.
     */
    revision: number;
}

/**
 * Structure to identify provenance relationships between annotations in different revisions.
 */
export interface GoogleCloudDocumentaiV1DocumentProvenanceResponse {
    /**
     * References to the original elements that are replaced.
     */
    parents: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentProvenanceParentResponse[];
    /**
     * The index of the revision that produced this element.
     */
    revision: number;
    /**
     * The type of provenance operation.
     */
    type: string;
}

/**
 * Document represents the canonical document resource in Document AI. It is an interchange format that provides insights into documents and allows for collaboration between users and Document AI to iterate and optimize for quality.
 */
export interface GoogleCloudDocumentaiV1DocumentResponse {
    /**
     * Optional. Inline document content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64.
     */
    content: string;
    /**
     * A list of entities detected on Document.text. For document shards, entities in this list may cross shard boundaries.
     */
    entities: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentEntityResponse[];
    /**
     * Placeholder. Relationship among Document.entities.
     */
    entityRelations: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentEntityRelationResponse[];
    /**
     * Any error that occurred while processing this document.
     */
    error: outputs.contentwarehouse.v1.GoogleRpcStatusResponse;
    /**
     * An IANA published MIME type (also referred to as media type). For more information, see https://www.iana.org/assignments/media-types/media-types.xhtml.
     */
    mimeType: string;
    /**
     * Visual page layout for the Document.
     */
    pages: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentPageResponse[];
    /**
     * Placeholder. Revision history of this document.
     */
    revisions: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentRevisionResponse[];
    /**
     * Information about the sharding if this document is sharded part of a larger document. If the document is not sharded, this message is not specified.
     */
    shardInfo: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentShardInfoResponse;
    /**
     * Optional. UTF-8 encoded text in reading order from the document.
     */
    text: string;
    /**
     * Placeholder. A list of text corrections made to [Document.text]. This is usually used for annotating corrections to OCR mistakes. Text changes for a given revision may not overlap with each other.
     */
    textChanges: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentTextChangeResponse[];
    /**
     * Placeholder. Styles for the Document.text.
     */
    textStyles: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentStyleResponse[];
    /**
     * Optional. Currently supports Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info.
     */
    uri: string;
}

/**
 * Human Review information of the document.
 */
export interface GoogleCloudDocumentaiV1DocumentRevisionHumanReviewResponse {
    /**
     * Human review state. e.g. `requested`, `succeeded`, `rejected`.
     */
    state: string;
    /**
     * A message providing more details about the current state of processing. For example, the rejection reason when the state is `rejected`.
     */
    stateMessage: string;
}

/**
 * Contains past or forward revisions of this document.
 */
export interface GoogleCloudDocumentaiV1DocumentRevisionResponse {
    /**
     * If the change was made by a person specify the name or id of that person.
     */
    agent: string;
    /**
     * The time that the revision was created.
     */
    createTime: string;
    /**
     * Human Review information of this revision.
     */
    humanReview: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentRevisionHumanReviewResponse;
    /**
     * The revisions that this revision is based on. This can include one or more parent (when documents are merged.) This field represents the index into the `revisions` field.
     */
    parent: number[];
    /**
     * The revisions that this revision is based on. Must include all the ids that have anything to do with this revision - eg. there are `provenance.parent.revision` fields that index into this field.
     */
    parentIds: string[];
    /**
     * If the annotation was made by processor identify the processor by its resource name.
     */
    processor: string;
}

/**
 * For a large document, sharding may be performed to produce several document shards. Each document shard contains this field to detail which shard it is.
 */
export interface GoogleCloudDocumentaiV1DocumentShardInfoResponse {
    /**
     * Total number of shards.
     */
    shardCount: string;
    /**
     * The 0-based index of this shard.
     */
    shardIndex: string;
    /**
     * The index of the first character in Document.text in the overall document global text.
     */
    textOffset: string;
}

/**
 * Font size with unit.
 */
export interface GoogleCloudDocumentaiV1DocumentStyleFontSizeResponse {
    /**
     * Font size for the text.
     */
    size: number;
    /**
     * Unit for the font size. Follows CSS naming (in, px, pt, etc.).
     */
    unit: string;
}

/**
 * Annotation for common text style attributes. This adheres to CSS conventions as much as possible.
 */
export interface GoogleCloudDocumentaiV1DocumentStyleResponse {
    /**
     * Text background color.
     */
    backgroundColor: outputs.contentwarehouse.v1.GoogleTypeColorResponse;
    /**
     * Text color.
     */
    color: outputs.contentwarehouse.v1.GoogleTypeColorResponse;
    /**
     * Font family such as "Arial", "Times New Roman". https://www.w3schools.com/cssref/pr_font_font-family.asp
     */
    fontFamily: string;
    /**
     * Font size.
     */
    fontSize: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentStyleFontSizeResponse;
    /**
     * Font weight. Possible values are normal, bold, bolder, and lighter. https://www.w3schools.com/cssref/pr_font_weight.asp
     */
    fontWeight: string;
    /**
     * Text anchor indexing into the Document.text.
     */
    textAnchor: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentTextAnchorResponse;
    /**
     * Text decoration. Follows CSS standard. https://www.w3schools.com/cssref/pr_text_text-decoration.asp
     */
    textDecoration: string;
    /**
     * Text style. Possible values are normal, italic, and oblique. https://www.w3schools.com/cssref/pr_font_font-style.asp
     */
    textStyle: string;
}

/**
 * Text reference indexing into the Document.text.
 */
export interface GoogleCloudDocumentaiV1DocumentTextAnchorResponse {
    /**
     * Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.
     */
    content: string;
    /**
     * The text segments from the Document.text.
     */
    textSegments: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentResponse[];
}

/**
 * A text segment in the Document.text. The indices may be out of bounds which indicate that the text extends into another document shard for large sharded documents. See ShardInfo.text_offset
 */
export interface GoogleCloudDocumentaiV1DocumentTextAnchorTextSegmentResponse {
    /**
     * TextSegment half open end UTF-8 char index in the Document.text.
     */
    endIndex: string;
    /**
     * TextSegment start UTF-8 char index in the Document.text.
     */
    startIndex: string;
}

/**
 * This message is used for text changes aka. OCR corrections.
 */
export interface GoogleCloudDocumentaiV1DocumentTextChangeResponse {
    /**
     * The text that replaces the text identified in the `text_anchor`.
     */
    changedText: string;
    /**
     * The history of this annotation.
     */
    provenance: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentProvenanceResponse[];
    /**
     * Provenance of the correction. Text anchor indexing into the Document.text. There can only be a single `TextAnchor.text_segments` element. If the start and end index of the text segment are the same, the text change is inserted before that index.
     */
    textAnchor: outputs.contentwarehouse.v1.GoogleCloudDocumentaiV1DocumentTextAnchorResponse;
}

/**
 * A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.
 */
export interface GoogleCloudDocumentaiV1NormalizedVertexResponse {
    /**
     * X coordinate.
     */
    x: number;
    /**
     * Y coordinate (starts from the top of the image).
     */
    y: number;
}

/**
 * A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.
 */
export interface GoogleCloudDocumentaiV1VertexResponse {
    /**
     * X coordinate.
     */
    x: number;
    /**
     * Y coordinate (starts from the top of the image).
     */
    y: number;
}

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface GoogleIamV1AuditConfigResponse {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs: outputs.contentwarehouse.v1.GoogleIamV1AuditLogConfigResponse[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service: string;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface GoogleIamV1AuditLogConfigResponse {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers: string[];
    /**
     * The log type that this config enables.
     */
    logType: string;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface GoogleIamV1BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.contentwarehouse.v1.GoogleTypeExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
 */
export interface GoogleIamV1PolicyResponse {
    /**
     * Specifies cloud audit logging configuration for this policy.
     */
    auditConfigs: outputs.contentwarehouse.v1.GoogleIamV1AuditConfigResponse[];
    /**
     * Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
     */
    bindings: outputs.contentwarehouse.v1.GoogleIamV1BindingResponse[];
    /**
     * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
     */
    etag: string;
    /**
     * Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    version: number;
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface GoogleRpcStatusResponse {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code: number;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details: {[key: string]: string}[];
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message: string;
}

/**
 * Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
 */
export interface GoogleTypeColorResponse {
    /**
     * The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).
     */
    alpha: number;
    /**
     * The amount of blue in the color as a value in the interval [0, 1].
     */
    blue: number;
    /**
     * The amount of green in the color as a value in the interval [0, 1].
     */
    green: number;
    /**
     * The amount of red in the color as a value in the interval [0, 1].
     */
    red: number;
}

/**
 * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
export interface GoogleTypeDateResponse {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day: number;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month: number;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year: number;
}

/**
 * Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
 */
export interface GoogleTypeDateTimeResponse {
    /**
     * Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.
     */
    day: number;
    /**
     * Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.
     */
    hours: number;
    /**
     * Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
     */
    minutes: number;
    /**
     * Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.
     */
    month: number;
    /**
     * Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.
     */
    nanos: number;
    /**
     * Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.
     */
    seconds: number;
    /**
     * Time zone.
     */
    timeZone: outputs.contentwarehouse.v1.GoogleTypeTimeZoneResponse;
    /**
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
     */
    utcOffset: string;
    /**
     * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
     */
    year: number;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface GoogleTypeExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * Represents an amount of money with its currency type.
 */
export interface GoogleTypeMoneyResponse {
    /**
     * The three-letter currency code defined in ISO 4217.
     */
    currencyCode: string;
    /**
     * Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
     */
    nanos: number;
    /**
     * The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
     */
    units: string;
}

/**
 * Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
 */
export interface GoogleTypePostalAddressResponse {
    /**
     * Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
     */
    addressLines: string[];
    /**
     * Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
     */
    administrativeArea: string;
    /**
     * Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
     */
    languageCode: string;
    /**
     * Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
     */
    locality: string;
    /**
     * Optional. The name of the organization at the address.
     */
    organization: string;
    /**
     * Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
     */
    postalCode: string;
    /**
     * Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
     */
    recipients: string[];
    /**
     * CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
     */
    regionCode: string;
    /**
     * The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
     */
    revision: number;
    /**
     * Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
     */
    sortingCode: string;
    /**
     * Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
     */
    sublocality: string;
}

/**
 * Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
 */
export interface GoogleTypeTimeZoneResponse {
    /**
     * Optional. IANA Time Zone Database version number, e.g. "2019a".
     */
    version: string;
}

