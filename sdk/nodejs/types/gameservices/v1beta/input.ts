// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface AuditConfigArgs {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs?: pulumi.Input<pulumi.Input<inputs.gameservices.v1beta.AuditLogConfigArgs>[]>;
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service?: pulumi.Input<string>;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigArgs {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers?: pulumi.Input<pulumi.Input<string>[]>;
    ignoreChildExemptions?: pulumi.Input<boolean>;
    /**
     * The log type that this config enables.
     */
    logType?: pulumi.Input<enums.gameservices.v1beta.AuditLogConfigLogType>;
}

/**
 * Authorization-related information used by Cloud Audit Logging.
 */
export interface AuthorizationLoggingOptionsArgs {
    /**
     * The type of the permission that was checked.
     */
    permissionType?: pulumi.Input<enums.gameservices.v1beta.AuthorizationLoggingOptionsPermissionType>;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingArgs {
    bindingId?: pulumi.Input<string>;
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition?: pulumi.Input<inputs.gameservices.v1beta.ExprArgs>;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role?: pulumi.Input<string>;
}

/**
 * Write a Cloud Audit log
 */
export interface CloudAuditOptionsArgs {
    /**
     * Information used by the Cloud Audit Logging pipeline.
     */
    authorizationLoggingOptions?: pulumi.Input<inputs.gameservices.v1beta.AuthorizationLoggingOptionsArgs>;
    /**
     * The log_name to populate in the Cloud Audit Record.
     */
    logName?: pulumi.Input<enums.gameservices.v1beta.CloudAuditOptionsLogName>;
}

/**
 * A condition to be met.
 */
export interface ConditionArgs {
    /**
     * Trusted attributes supplied by the IAM system.
     */
    iam?: pulumi.Input<enums.gameservices.v1beta.ConditionIam>;
    /**
     * An operator to apply the subject with.
     */
    op?: pulumi.Input<enums.gameservices.v1beta.ConditionOp>;
    /**
     * Trusted attributes discharged by the service.
     */
    svc?: pulumi.Input<string>;
    /**
     * Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
     */
    sys?: pulumi.Input<enums.gameservices.v1beta.ConditionSys>;
    /**
     * The objects of the condition.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields. Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
 */
export interface CounterOptionsArgs {
    /**
     * Custom fields.
     */
    customFields?: pulumi.Input<pulumi.Input<inputs.gameservices.v1beta.CustomFieldArgs>[]>;
    /**
     * The field value to attribute.
     */
    field?: pulumi.Input<string>;
    /**
     * The metric to update.
     */
    metric?: pulumi.Input<string>;
}

/**
 * Custom fields. These can be used to create a counter with arbitrary field/value pairs. See: go/rpcsp-custom-fields.
 */
export interface CustomFieldArgs {
    /**
     * Name is the field name.
     */
    name?: pulumi.Input<string>;
    /**
     * Value is the field value. It is important that in contrast to the CounterOptions.field, the value here is a constant that is not derived from the IAMContext.
     */
    value?: pulumi.Input<string>;
}

/**
 * Write a Data Access (Gin) log
 */
export interface DataAccessOptionsArgs {
    logMode?: pulumi.Input<enums.gameservices.v1beta.DataAccessOptionsLogMode>;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprArgs {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description?: pulumi.Input<string>;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression?: pulumi.Input<string>;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location?: pulumi.Input<string>;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title?: pulumi.Input<string>;
}

/**
 * Specifies what kind of log the caller must write
 */
export interface LogConfigArgs {
    /**
     * Cloud audit options.
     */
    cloudAudit?: pulumi.Input<inputs.gameservices.v1beta.CloudAuditOptionsArgs>;
    /**
     * Counter options.
     */
    counter?: pulumi.Input<inputs.gameservices.v1beta.CounterOptionsArgs>;
    /**
     * Data access options.
     */
    dataAccess?: pulumi.Input<inputs.gameservices.v1beta.DataAccessOptionsArgs>;
}

/**
 * A rule to be applied in a Policy.
 */
export interface RuleArgs {
    /**
     * Required
     */
    action?: pulumi.Input<enums.gameservices.v1beta.RuleAction>;
    /**
     * Additional restrictions that must be met. All conditions must pass for the rule to match.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.gameservices.v1beta.ConditionArgs>[]>;
    /**
     * Human-readable description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
     */
    in?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The config returned to callers of CheckPolicy for any entries that match the LOG action.
     */
    logConfig?: pulumi.Input<pulumi.Input<inputs.gameservices.v1beta.LogConfigArgs>[]>;
    /**
     * If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
     */
    notIn?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}

