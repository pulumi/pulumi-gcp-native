// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Maintenance policy for an instance.
 */
export interface MaintenancePolicyResponse {
    /**
     * The time when the policy was created.
     */
    createTime: string;
    /**
     * Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
     */
    description: string;
    /**
     * The time when the policy was last updated.
     */
    updateTime: string;
    /**
     * Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
     */
    weeklyMaintenanceWindow: outputs.redis.v1beta1.WeeklyMaintenanceWindowResponse[];
}

/**
 * Upcoming maintenance schedule. If no maintenance is scheduled, fields are not populated.
 */
export interface MaintenanceScheduleResponse {
    /**
     * If the scheduled maintenance can be rescheduled, default is true.
     */
    canReschedule: boolean;
    /**
     * The end time of any upcoming scheduled maintenance for this instance.
     */
    endTime: string;
    /**
     * The deadline that the maintenance schedule start time can not go beyond, including reschedule.
     */
    scheduleDeadlineTime: string;
    /**
     * The start time of any upcoming scheduled maintenance for this instance.
     */
    startTime: string;
}

/**
 * Node specific properties.
 */
export interface NodeInfoResponse {
    /**
     * Location of the node.
     */
    zone: string;
}

/**
 * Configuration of the persistence functionality.
 */
export interface PersistenceConfigResponse {
    /**
     * Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
     */
    persistenceMode: string;
    /**
     * The next time that a snapshot attempt is scheduled to occur.
     */
    rdbNextSnapshotTime: string;
    /**
     * Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
     */
    rdbSnapshotPeriod: string;
    /**
     * Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
     */
    rdbSnapshotStartTime: string;
}

/**
 * Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
 */
export interface TimeOfDayResponse {
    /**
     * Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
     */
    hours: number;
    /**
     * Minutes of hour of day. Must be from 0 to 59.
     */
    minutes: number;
    /**
     * Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
     */
    nanos: number;
    /**
     * Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
     */
    seconds: number;
}

/**
 * TlsCertificate Resource
 */
export interface TlsCertificateResponse {
    /**
     * PEM representation.
     */
    cert: string;
    /**
     * The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
     */
    createTime: string;
    /**
     * The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
     */
    expireTime: string;
    /**
     * Serial number, as extracted from the certificate.
     */
    serialNumber: string;
    /**
     * Sha1 Fingerprint of the certificate.
     */
    sha1Fingerprint: string;
}

/**
 * Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
 */
export interface WeeklyMaintenanceWindowResponse {
    /**
     * The day of week that maintenance updates occur.
     */
    day: string;
    /**
     * Duration of the maintenance window. The current window is fixed at 1 hour.
     */
    duration: string;
    /**
     * Start time of the window in UTC time.
     */
    startTime: outputs.redis.v1beta1.TimeOfDayResponse;
}

