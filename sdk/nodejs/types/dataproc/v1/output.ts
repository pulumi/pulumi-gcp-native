// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Specifies the type and number of accelerator cards attached to the instances of an instance. See GPUs on Compute Engine (https://cloud.google.com/compute/docs/gpus/).
 */
export interface AcceleratorConfigResponse {
    /**
     * The number of the accelerator cards of this type exposed to this instance.
     */
    acceleratorCount: number;
    /**
     * Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See Compute Engine AcceleratorTypes (https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes).Examples: https://www.googleapis.com/compute/beta/projects/[project_id]/zones/us-east1-a/acceleratorTypes/nvidia-tesla-k80 projects/[project_id]/zones/us-east1-a/acceleratorTypes/nvidia-tesla-k80 nvidia-tesla-k80Auto Zone Exception: If you are using the Dataproc Auto Zone Placement (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
     */
    acceleratorTypeUri: string;
}

/**
 * Autoscaling Policy config associated with the cluster.
 */
export interface AutoscalingConfigResponse {
    /**
     * Optional. The autoscaling policy used by the cluster.Only resource names including projectid and location (region) are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/autoscalingPolicies/[policy_id] projects/[project_id]/locations/[dataproc_region]/autoscalingPolicies/[policy_id]Note that the policy must be in the same project and Dataproc region.
     */
    policyUri: string;
}

/**
 * Auxiliary services configuration for a Cluster.
 */
export interface AuxiliaryServicesConfigResponse {
    /**
     * Optional. The Hive Metastore configuration for this workload.
     */
    metastoreConfig: outputs.dataproc.v1.MetastoreConfigResponse;
    /**
     * Optional. The Spark History Server configuration for the workload.
     */
    sparkHistoryServerConfig: outputs.dataproc.v1.SparkHistoryServerConfigResponse;
}

/**
 * Basic algorithm for autoscaling.
 */
export interface BasicAutoscalingAlgorithmResponse {
    /**
     * Optional. Duration between scaling events. A scaling period starts after the update operation from the previous event has completed.Bounds: 2m, 1d. Default: 2m.
     */
    cooldownPeriod: string;
    /**
     * Optional. Spark Standalone autoscaling configuration
     */
    sparkStandaloneConfig: outputs.dataproc.v1.SparkStandaloneAutoscalingConfigResponse;
    /**
     * Optional. YARN autoscaling configuration.
     */
    yarnConfig: outputs.dataproc.v1.BasicYarnAutoscalingConfigResponse;
}

/**
 * Basic autoscaling configurations for YARN.
 */
export interface BasicYarnAutoscalingConfigResponse {
    /**
     * Timeout for YARN graceful decommissioning of Node Managers. Specifies the duration to wait for jobs to complete before forcefully removing workers (and potentially interrupting jobs). Only applicable to downscaling operations.Bounds: 0s, 1d.
     */
    gracefulDecommissionTimeout: string;
    /**
     * Fraction of average YARN pending memory in the last cooldown period for which to remove workers. A scale-down factor of 1 will result in scaling down so that there is no available memory remaining after the update (more aggressive scaling). A scale-down factor of 0 disables removing workers, which can be beneficial for autoscaling a single job. See How autoscaling works (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/autoscaling#how_autoscaling_works) for more information.Bounds: 0.0, 1.0.
     */
    scaleDownFactor: number;
    /**
     * Optional. Minimum scale-down threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0 means the autoscaler will scale down on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
     */
    scaleDownMinWorkerFraction: number;
    /**
     * Fraction of average YARN pending memory in the last cooldown period for which to add workers. A scale-up factor of 1.0 will result in scaling up so that there is no pending memory remaining after the update (more aggressive scaling). A scale-up factor closer to 0 will result in a smaller magnitude of scaling up (less aggressive scaling). See How autoscaling works (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/autoscaling#how_autoscaling_works) for more information.Bounds: 0.0, 1.0.
     */
    scaleUpFactor: number;
    /**
     * Optional. Minimum scale-up threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of 0 means the autoscaler will scale up on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
     */
    scaleUpMinWorkerFraction: number;
}

/**
 * Associates members, or principals, with a role.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.dataproc.v1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a Google service account. For example, my-other-app@appspot.gserviceaccount.com. serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An identifier for a Kubernetes service account (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa]. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com.
     */
    members: string[];
    /**
     * Role that is assigned to the list of members, or principals. For example, roles/viewer, roles/editor, or roles/owner.
     */
    role: string;
}

/**
 * The cluster config.
 */
export interface ClusterConfigResponse {
    /**
     * Optional. Autoscaling config for the policy associated with the cluster. Cluster does not autoscale if this field is unset.
     */
    autoscalingConfig: outputs.dataproc.v1.AutoscalingConfigResponse;
    /**
     * Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
     */
    configBucket: string;
    /**
     * Optional. The config for Dataproc metrics.
     */
    dataprocMetricConfig: outputs.dataproc.v1.DataprocMetricConfigResponse;
    /**
     * Optional. Encryption settings for the cluster.
     */
    encryptionConfig: outputs.dataproc.v1.EncryptionConfigResponse;
    /**
     * Optional. Port/endpoint configuration for this cluster
     */
    endpointConfig: outputs.dataproc.v1.EndpointConfigResponse;
    /**
     * Optional. The shared Compute Engine config settings for all instances in a cluster.
     */
    gceClusterConfig: outputs.dataproc.v1.GceClusterConfigResponse;
    /**
     * Optional. BETA. The Kubernetes Engine config for Dataproc clusters deployed to The Kubernetes Engine config for Dataproc clusters deployed to Kubernetes. These config settings are mutually exclusive with Compute Engine-based options, such as gce_cluster_config, master_config, worker_config, secondary_worker_config, and autoscaling_config.
     */
    gkeClusterConfig: outputs.dataproc.v1.GkeClusterConfigResponse;
    /**
     * Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ "${ROLE}" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi 
     */
    initializationActions: outputs.dataproc.v1.NodeInitializationActionResponse[];
    /**
     * Optional. Lifecycle setting for the cluster.
     */
    lifecycleConfig: outputs.dataproc.v1.LifecycleConfigResponse;
    /**
     * Optional. The Compute Engine config settings for the cluster's master instance.
     */
    masterConfig: outputs.dataproc.v1.InstanceGroupConfigResponse;
    /**
     * Optional. Metastore configuration.
     */
    metastoreConfig: outputs.dataproc.v1.MetastoreConfigResponse;
    /**
     * Optional. The Compute Engine config settings for a cluster's secondary worker instances
     */
    secondaryWorkerConfig: outputs.dataproc.v1.InstanceGroupConfigResponse;
    /**
     * Optional. Security settings for the cluster.
     */
    securityConfig: outputs.dataproc.v1.SecurityConfigResponse;
    /**
     * Optional. The config settings for cluster software.
     */
    softwareConfig: outputs.dataproc.v1.SoftwareConfigResponse;
    /**
     * Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
     */
    tempBucket: string;
    /**
     * Optional. The Compute Engine config settings for the cluster's worker instances.
     */
    workerConfig: outputs.dataproc.v1.InstanceGroupConfigResponse;
}

/**
 * Contains cluster daemon metrics, such as HDFS and YARN stats.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
 */
export interface ClusterMetricsResponse {
    /**
     * The HDFS metrics.
     */
    hdfsMetrics: {[key: string]: string};
    /**
     * YARN metrics.
     */
    yarnMetrics: {[key: string]: string};
}

/**
 * A selector that chooses target cluster for jobs based on metadata.
 */
export interface ClusterSelectorResponse {
    /**
     * The cluster labels. Cluster must have all labels to match.
     */
    clusterLabels: {[key: string]: string};
    /**
     * Optional. The zone where workflow process executes. This parameter does not affect the selection of the cluster.If unspecified, the zone of the first cluster matching the selector is used.
     */
    zone: string;
}

/**
 * The status of a cluster and its instances.
 */
export interface ClusterStatusResponse {
    /**
     * Optional. Output only. Details of cluster's state.
     */
    detail: string;
    /**
     * The cluster's state.
     */
    state: string;
    /**
     * Time when this state was entered (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).
     */
    stateStartTime: string;
    /**
     * Additional state information that includes status reported by the agent.
     */
    substate: string;
}

/**
 * Confidential Instance Config for clusters using Confidential VMs (https://cloud.google.com/compute/confidential-vm/docs)
 */
export interface ConfidentialInstanceConfigResponse {
    /**
     * Optional. Defines whether the instance should have confidential compute enabled.
     */
    enableConfidentialCompute: boolean;
}

/**
 * Dataproc metric config.
 */
export interface DataprocMetricConfigResponse {
    /**
     * Metrics sources to enable.
     */
    metrics: outputs.dataproc.v1.MetricResponse[];
}

/**
 * Specifies the config of disk options for a group of VM instances.
 */
export interface DiskConfigResponse {
    /**
     * Optional. Size in GB of the boot disk (default is 500GB).
     */
    bootDiskSizeGb: number;
    /**
     * Optional. Type of the boot disk (default is "pd-standard"). Valid values: "pd-balanced" (Persistent Disk Balanced Solid State Drive), "pd-ssd" (Persistent Disk Solid State Drive), or "pd-standard" (Persistent Disk Hard Disk Drive). See Disk types (https://cloud.google.com/compute/docs/disks#disk-types).
     */
    bootDiskType: string;
    /**
     * Optional. Interface type of local SSDs (default is "scsi"). Valid values: "scsi" (Small Computer System Interface), "nvme" (Non-Volatile Memory Express). See local SSD performance (https://cloud.google.com/compute/docs/disks/local-ssd#performance).
     */
    localSsdInterface: string;
    /**
     * Optional. Number of attached SSDs, from 0 to 8 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and HDFS (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.Note: Local SSD options may vary by machine type and number of vCPUs selected.
     */
    numLocalSsds: number;
}

/**
 * Encryption settings for the cluster.
 */
export interface EncryptionConfigResponse {
    /**
     * Optional. The Cloud KMS key name to use for PD disk encryption for all instances in the cluster.
     */
    gcePdKmsKeyName: string;
}

/**
 * Endpoint config for this cluster
 */
export interface EndpointConfigResponse {
    /**
     * Optional. If true, enable http access to specific ports on the cluster from external sources. Defaults to false.
     */
    enableHttpPortAccess: boolean;
    /**
     * The map of port descriptions to URLs. Will only be populated if enable_http_port_access is true.
     */
    httpPorts: {[key: string]: string};
}

/**
 * Environment configuration for a workload.
 */
export interface EnvironmentConfigResponse {
    /**
     * Optional. Execution configuration for a workload.
     */
    executionConfig: outputs.dataproc.v1.ExecutionConfigResponse;
    /**
     * Optional. Peripherals configuration that workload has access to.
     */
    peripheralsConfig: outputs.dataproc.v1.PeripheralsConfigResponse;
}

/**
 * Execution configuration for a workload.
 */
export interface ExecutionConfigResponse {
    /**
     * Optional. The duration to keep the session alive while it's idling. Passing this threshold will cause the session to be terminated. Minimum value is 30 minutes; maximum value is 14 days (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
     */
    idleTtl: string;
    /**
     * Optional. The Cloud KMS key to use for encryption.
     */
    kmsKey: string;
    /**
     * Optional. Tags used for network traffic control.
     */
    networkTags: string[];
    /**
     * Optional. Network URI to connect workload to.
     */
    networkUri: string;
    /**
     * Optional. Service account that used to execute workload.
     */
    serviceAccount: string;
    /**
     * Optional. Subnetwork URI to connect workload to.
     */
    subnetworkUri: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
 */
export interface GceClusterConfigResponse {
    /**
     * Optional. Confidential Instance Config for clusters using Confidential VMs (https://cloud.google.com/compute/confidential-vm/docs).
     */
    confidentialInstanceConfig: outputs.dataproc.v1.ConfidentialInstanceConfigResponse;
    /**
     * Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.
     */
    internalIpOnly: boolean;
    /**
     * The Compute Engine metadata entries to add to all instances (see Project and instance metadata (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
     */
    metadata: {[key: string]: string};
    /**
     * Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the "default" network of the project is used, if it exists. Cannot be a "Custom Subnet Network" (see Using Subnetworks (https://cloud.google.com/compute/docs/subnetworks) for more information).A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/global/default projects/[project_id]/regions/global/default default
     */
    networkUri: string;
    /**
     * Optional. Node Group Affinity for sole-tenant clusters.
     */
    nodeGroupAffinity: outputs.dataproc.v1.NodeGroupAffinityResponse;
    /**
     * Optional. The type of IPv6 access for a cluster.
     */
    privateIpv6GoogleAccess: string;
    /**
     * Optional. Reservation Affinity for consuming Zonal reservation.
     */
    reservationAffinity: outputs.dataproc.v1.ReservationAffinityResponse;
    /**
     * Optional. The Dataproc service account (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/service-accounts#service_accounts_in_dataproc) (also see VM Data Plane identity (https://cloud.google.com/dataproc/docs/concepts/iam/dataproc-principals#vm_service_account_data_plane_identity)) used by Dataproc cluster VM instances to access Google Cloud Platform services.If not specified, the Compute Engine default service account (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
     */
    serviceAccount: string;
    /**
     * Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: https://www.googleapis.com/auth/cloud.useraccounts.readonly https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/logging.writeIf no scopes are specified, the following defaults are also provided: https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/bigtable.admin.table https://www.googleapis.com/auth/bigtable.data https://www.googleapis.com/auth/devstorage.full_control
     */
    serviceAccountScopes: string[];
    /**
     * Optional. Shielded Instance Config for clusters using Compute Engine Shielded VMs (https://cloud.google.com/security/shielded-cloud/shielded-vm).
     */
    shieldedInstanceConfig: outputs.dataproc.v1.ShieldedInstanceConfigResponse;
    /**
     * Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0 projects/[project_id]/regions/us-east1/subnetworks/sub0 sub0
     */
    subnetworkUri: string;
    /**
     * The Compute Engine tags to add to all instances (see Tagging instances (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
     */
    tags: string[];
    /**
     * Optional. The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone] projects/[project_id]/zones/[zone] us-central1-f
     */
    zoneUri: string;
}

/**
 * The cluster's GKE config.
 */
export interface GkeClusterConfigResponse {
    /**
     * Optional. A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster (the GKE cluster can be zonal or regional). Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'
     */
    gkeClusterTarget: string;
    /**
     * Optional. Deprecated. Use gkeClusterTarget. Used only for the deprecated beta. A target for the deployment.
     *
     * @deprecated Optional. Deprecated. Use gkeClusterTarget. Used only for the deprecated beta. A target for the deployment.
     */
    namespacedGkeDeploymentTarget: outputs.dataproc.v1.NamespacedGkeDeploymentTargetResponse;
    /**
     * Optional. GKE node pools where workloads will be scheduled. At least one node pool must be assigned the DEFAULT GkeNodePoolTarget.Role. If a GkeNodePoolTarget is not specified, Dataproc constructs a DEFAULT GkeNodePoolTarget. Each role can be given to only one GkeNodePoolTarget. All node pools must have the same location settings.
     */
    nodePoolTarget: outputs.dataproc.v1.GkeNodePoolTargetResponse[];
}

/**
 * Parameters that describe cluster nodes.
 */
export interface GkeNodeConfigResponse {
    /**
     * Optional. A list of hardware accelerators (https://cloud.google.com/compute/docs/gpus) to attach to each node.
     */
    accelerators: outputs.dataproc.v1.GkeNodePoolAcceleratorConfigResponse[];
    /**
     * Optional. The Customer Managed Encryption Key (CMEK) (https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek) used to encrypt the boot disk attached to each node in the node pool. Specify the key using the following format: projects/KEY_PROJECT_ID/locations/LOCATION /keyRings/RING_NAME/cryptoKeys/KEY_NAME.
     */
    bootDiskKmsKey: string;
    /**
     * Optional. The number of local SSD disks to attach to the node, which is limited by the maximum number of disks allowable per zone (see Adding Local SSDs (https://cloud.google.com/compute/docs/disks/local-ssd)).
     */
    localSsdCount: number;
    /**
     * Optional. The name of a Compute Engine machine type (https://cloud.google.com/compute/docs/machine-types).
     */
    machineType: string;
    /**
     * Optional. Minimum CPU platform (https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) to be used by this instance. The instance may be scheduled on the specified or a newer CPU platform. Specify the friendly names of CPU platforms, such as "Intel Haswell"` or Intel Sandy Bridge".
     */
    minCpuPlatform: string;
    /**
     * Optional. Whether the nodes are created as legacy preemptible VM instances (https://cloud.google.com/compute/docs/instances/preemptible). Also see Spot VMs, preemptible VM instances without a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).
     */
    preemptible: boolean;
    /**
     * Optional. Whether the nodes are created as Spot VM instances (https://cloud.google.com/compute/docs/instances/spot). Spot VMs are the latest update to legacy preemptible VMs. Spot VMs do not have a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).
     */
    spot: boolean;
}

/**
 * A GkeNodeConfigAcceleratorConfig represents a Hardware Accelerator request for a node pool.
 */
export interface GkeNodePoolAcceleratorConfigResponse {
    /**
     * The number of accelerator cards exposed to an instance.
     */
    acceleratorCount: string;
    /**
     * The accelerator type resource namename (see GPUs on Compute Engine).
     */
    acceleratorType: string;
    /**
     * Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide (https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
     */
    gpuPartitionSize: string;
}

/**
 * GkeNodePoolAutoscaling contains information the cluster autoscaler needs to adjust the size of the node pool to the current cluster usage.
 */
export interface GkeNodePoolAutoscalingConfigResponse {
    /**
     * The maximum number of nodes in the node pool. Must be >= min_node_count, and must be > 0. Note: Quota must be sufficient to scale up the cluster.
     */
    maxNodeCount: number;
    /**
     * The minimum number of nodes in the node pool. Must be >= 0 and <= max_node_count.
     */
    minNodeCount: number;
}

/**
 * The configuration of a GKE node pool used by a Dataproc-on-GKE cluster (https://cloud.google.com/dataproc/docs/concepts/jobs/dataproc-gke#create-a-dataproc-on-gke-cluster).
 */
export interface GkeNodePoolConfigResponse {
    /**
     * Optional. The autoscaler configuration for this node pool. The autoscaler is enabled only when a valid configuration is present.
     */
    autoscaling: outputs.dataproc.v1.GkeNodePoolAutoscalingConfigResponse;
    /**
     * Optional. The node pool configuration.
     */
    config: outputs.dataproc.v1.GkeNodeConfigResponse;
    /**
     * Optional. The list of Compute Engine zones (https://cloud.google.com/compute/docs/zones#available) where node pool nodes associated with a Dataproc on GKE virtual cluster will be located.Note: All node pools associated with a virtual cluster must be located in the same region as the virtual cluster, and they must be located in the same zone within that region.If a location is not specified during node pool creation, Dataproc on GKE will choose the zone.
     */
    locations: string[];
}

/**
 * GKE node pools that Dataproc workloads run on.
 */
export interface GkeNodePoolTargetResponse {
    /**
     * The target GKE node pool. Format: 'projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}'
     */
    nodePool: string;
    /**
     * Input only. The configuration for the GKE node pool.If specified, Dataproc attempts to create a node pool with the specified shape. If one with the same name already exists, it is verified against all specified fields. If a field differs, the virtual cluster creation will fail.If omitted, any node pool with the specified name is used. If a node pool with the specified name does not exist, Dataproc create a node pool with default values.This is an input only field. It will not be returned by the API.
     */
    nodePoolConfig: outputs.dataproc.v1.GkeNodePoolConfigResponse;
    /**
     * The roles associated with the GKE node pool.
     */
    roles: string[];
}

/**
 * A Dataproc job for running Apache Hadoop MapReduce (https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html) jobs on Apache Hadoop YARN (https://hadoop.apache.org/docs/r2.7.1/hadoop-yarn/hadoop-yarn-site/YARN.html).
 */
export interface HadoopJobResponse {
    /**
     * Optional. HCFS URIs of archives to be extracted in the working directory of Hadoop drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz, or .zip.
     */
    archiveUris: string[];
    /**
     * Optional. The arguments to pass to the driver. Do not include arguments, such as -libjars or -Dfoo=bar, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
     */
    args: string[];
    /**
     * Optional. HCFS (Hadoop Compatible Filesystem) URIs of files to be copied to the working directory of Hadoop drivers and distributed tasks. Useful for naively parallel tasks.
     */
    fileUris: string[];
    /**
     * Optional. Jar file URIs to add to the CLASSPATHs of the Hadoop driver and tasks.
     */
    jarFileUris: string[];
    /**
     * Optional. The runtime log config for job execution.
     */
    loggingConfig: outputs.dataproc.v1.LoggingConfigResponse;
    /**
     * The name of the driver's main class. The jar file containing the class must be in the default CLASSPATH or specified in jar_file_uris.
     */
    mainClass: string;
    /**
     * The HCFS URI of the jar file containing the main class. Examples: 'gs://foo-bucket/analytics-binaries/extract-useful-metrics-mr.jar' 'hdfs:/tmp/test-samples/custom-wordcount.jar' 'file:///home/usr/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar'
     */
    mainJarFileUri: string;
    /**
     * Optional. A mapping of property names to values, used to configure Hadoop. Properties that conflict with values set by the Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site and classes in user code.
     */
    properties: {[key: string]: string};
}

/**
 * A Dataproc job for running Apache Hive (https://hive.apache.org/) queries on YARN.
 */
export interface HiveJobResponse {
    /**
     * Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
     */
    continueOnFailure: boolean;
    /**
     * Optional. HCFS URIs of jar files to add to the CLASSPATH of the Hive server and Hadoop MapReduce (MR) tasks. Can contain Hive SerDes and UDFs.
     */
    jarFileUris: string[];
    /**
     * Optional. A mapping of property names and values, used to configure Hive. Properties that conflict with values set by the Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/hive/conf/hive-site.xml, and classes in user code.
     */
    properties: {[key: string]: string};
    /**
     * The HCFS URI of the script that contains Hive queries.
     */
    queryFileUri: string;
    /**
     * A list of queries.
     */
    queryList: outputs.dataproc.v1.QueryListResponse;
    /**
     * Optional. Mapping of query variable names to values (equivalent to the Hive command: SET name="value";).
     */
    scriptVariables: {[key: string]: string};
}

/**
 * Identity related configuration, including service account based secure multi-tenancy user mappings.
 */
export interface IdentityConfigResponse {
    /**
     * Map of user to service account.
     */
    userServiceAccountMapping: {[key: string]: string};
}

/**
 * Configuration for the size bounds of an instance group, including its proportional size to other groups.
 */
export interface InstanceGroupAutoscalingPolicyConfigResponse {
    /**
     * Maximum number of instances for this group. Required for primary workers. Note that by default, clusters will not use secondary workers. Required for secondary workers if the minimum secondary instances is set.Primary workers - Bounds: [min_instances, ). Secondary workers - Bounds: [min_instances, ). Default: 0.
     */
    maxInstances: number;
    /**
     * Optional. Minimum number of instances for this group.Primary workers - Bounds: 2, max_instances. Default: 2. Secondary workers - Bounds: 0, max_instances. Default: 0.
     */
    minInstances: number;
    /**
     * Optional. Weight for the instance group, which is used to determine the fraction of total workers in the cluster from this instance group. For example, if primary workers have weight 2, and secondary workers have weight 1, the cluster will have approximately 2 primary workers for each secondary worker.The cluster may not reach the specified balance if constrained by min/max bounds or other autoscaling settings. For example, if max_instances for secondary workers is 0, then only primary workers will be added. The cluster can also be out of balance when created.If weight is not set on any instance group, the cluster will default to equal weight for all groups: the cluster will attempt to maintain an equal number of workers in each group within the configured size bounds for each group. If weight is set for one group only, the cluster will default to zero weight on the unset group. For example if weight is set only on primary workers, the cluster will use primary workers only and no secondary workers.
     */
    weight: number;
}

/**
 * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
 */
export interface InstanceGroupConfigResponse {
    /**
     * Optional. The Compute Engine accelerator configuration for these instances.
     */
    accelerators: outputs.dataproc.v1.AcceleratorConfigResponse[];
    /**
     * Optional. Disk option config settings.
     */
    diskConfig: outputs.dataproc.v1.DiskConfigResponse;
    /**
     * Optional. The Compute Engine image resource used for cluster instances.The URI can represent an image or image family.Image examples: https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/[image-id] projects/[project_id]/global/images/[image-id] image-idImage family examples. Dataproc will use the most recent image from the family: https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/family/[custom-image-family-name] projects/[project_id]/global/images/family/[custom-image-family-name]If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
     */
    imageUri: string;
    /**
     * The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.
     */
    instanceNames: string[];
    /**
     * List of references to Compute Engine instances.
     */
    instanceReferences: outputs.dataproc.v1.InstanceReferenceResponse[];
    /**
     * Specifies that this instance group contains preemptible instances.
     */
    isPreemptible: boolean;
    /**
     * Optional. The Compute Engine machine type used for cluster instances.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2 projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2 n1-standard-2Auto Zone Exception: If you are using the Dataproc Auto Zone Placement (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2.
     */
    machineTypeUri: string;
    /**
     * The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.
     */
    managedGroupConfig: outputs.dataproc.v1.ManagedGroupConfigResponse;
    /**
     * Optional. Specifies the minimum cpu platform for the Instance Group. See Dataproc -> Minimum CPU Platform (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
     */
    minCpuPlatform: string;
    /**
     * Optional. The number of VM instances in the instance group. For HA cluster master_config groups, must be set to 3. For standard cluster master_config groups, must be set to 1.
     */
    numInstances: number;
    /**
     * Optional. Specifies the preemptibility of the instance group.The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed.The default value for secondary instances is PREEMPTIBLE.
     */
    preemptibility: string;
}

/**
 * A reference to a Compute Engine instance.
 */
export interface InstanceReferenceResponse {
    /**
     * The unique identifier of the Compute Engine instance.
     */
    instanceId: string;
    /**
     * The user-friendly name of the Compute Engine instance.
     */
    instanceName: string;
    /**
     * The public ECIES key used for sharing data with this instance.
     */
    publicEciesKey: string;
    /**
     * The public RSA key used for sharing data with this instance.
     */
    publicKey: string;
}

/**
 * Dataproc job config.
 */
export interface JobPlacementResponse {
    /**
     * Optional. Cluster labels to identify a cluster where the job will be submitted.
     */
    clusterLabels: {[key: string]: string};
    /**
     * The name of the cluster where the job will be submitted.
     */
    clusterName: string;
    /**
     * A cluster UUID generated by the Dataproc service when the job is submitted.
     */
    clusterUuid: string;
}

/**
 * Encapsulates the full scoping used to reference a job.
 */
export interface JobReferenceResponse {
    /**
     * Optional. The job ID, which must be unique within the project.The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or hyphens (-). The maximum length is 100 characters.If not specified by the caller, the job ID will be provided by the server.
     */
    jobId: string;
    /**
     * Optional. The ID of the Google Cloud Platform project that the job belongs to. If specified, must match the request project ID.
     */
    project: string;
}

/**
 * Job scheduling options.
 */
export interface JobSchedulingResponse {
    /**
     * Optional. Maximum number of times per hour a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed.A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window.Maximum value is 10.Note: Currently, this restartable job option is not supported in Dataproc workflow template (https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows#adding_jobs_to_a_template) jobs.
     */
    maxFailuresPerHour: number;
    /**
     * Optional. Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. Maximum value is 240.Note: Currently, this restartable job option is not supported in Dataproc workflow template (https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows#adding_jobs_to_a_template) jobs.
     */
    maxFailuresTotal: number;
}

/**
 * Dataproc job status.
 */
export interface JobStatusResponse {
    /**
     * Optional. Output only. Job state details, such as an error description if the state is ERROR.
     */
    details: string;
    /**
     * A state message specifying the overall job state.
     */
    state: string;
    /**
     * The time when this state was entered.
     */
    stateStartTime: string;
    /**
     * Additional state information, which includes status reported by the agent.
     */
    substate: string;
}

/**
 * Specifies Kerberos related configuration.
 */
export interface KerberosConfigResponse {
    /**
     * Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     */
    crossRealmTrustAdminServer: string;
    /**
     * Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
     */
    crossRealmTrustKdc: string;
    /**
     * Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
     */
    crossRealmTrustRealm: string;
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
     */
    crossRealmTrustSharedPasswordUri: string;
    /**
     * Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
     */
    enableKerberos: boolean;
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
     */
    kdcDbKeyUri: string;
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
     */
    keyPasswordUri: string;
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
     */
    keystorePasswordUri: string;
    /**
     * Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     */
    keystoreUri: string;
    /**
     * Optional. The uri of the KMS key used to encrypt various sensitive files.
     */
    kmsKeyUri: string;
    /**
     * Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
     */
    realm: string;
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
     */
    rootPrincipalPasswordUri: string;
    /**
     * Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
     */
    tgtLifetimeHours: number;
    /**
     * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
     */
    truststorePasswordUri: string;
    /**
     * Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
     */
    truststoreUri: string;
}

/**
 * The configuration for running the Dataproc cluster on Kubernetes.
 */
export interface KubernetesClusterConfigResponse {
    /**
     * The configuration for running the Dataproc cluster on GKE.
     */
    gkeClusterConfig: outputs.dataproc.v1.GkeClusterConfigResponse;
    /**
     * Optional. A namespace within the Kubernetes cluster to deploy into. If this namespace does not exist, it is created. If it exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it. If not specified, the name of the Dataproc Cluster is used.
     */
    kubernetesNamespace: string;
    /**
     * Optional. The software configuration for this Dataproc cluster running on Kubernetes.
     */
    kubernetesSoftwareConfig: outputs.dataproc.v1.KubernetesSoftwareConfigResponse;
}

/**
 * The software configuration for this Dataproc cluster running on Kubernetes.
 */
export interface KubernetesSoftwareConfigResponse {
    /**
     * The components that should be installed in this Dataproc cluster. The key must be a string from the KubernetesComponent enumeration. The value is the version of the software to be installed. At least one entry must be specified.
     */
    componentVersion: {[key: string]: string};
    /**
     * The properties to set on daemon config files.Property keys are specified in prefix:property format, for example spark:spark.kubernetes.container.image. The following are supported prefixes and their mappings: spark: spark-defaults.confFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
     */
    properties: {[key: string]: string};
}

/**
 * Specifies the cluster auto-delete schedule configuration.
 */
export interface LifecycleConfigResponse {
    /**
     * Optional. The time when cluster will be auto-deleted (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).
     */
    autoDeleteTime: string;
    /**
     * Optional. The lifetime duration of cluster. The cluster will be auto-deleted at the end of this period. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
     */
    autoDeleteTtl: string;
    /**
     * Optional. The duration to keep the cluster alive while idling (when no jobs are running). Passing this threshold will cause the cluster to be deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
     */
    idleDeleteTtl: string;
    /**
     * The time when cluster became idle (most recent job finished) and became eligible for deletion due to idleness (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).
     */
    idleStartTime: string;
}

/**
 * The runtime logging config of the job.
 */
export interface LoggingConfigResponse {
    /**
     * The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
     */
    driverLogLevels: {[key: string]: string};
}

/**
 * Cluster that is managed by the workflow.
 */
export interface ManagedClusterResponse {
    /**
     * The cluster name prefix. A unique cluster name will be formed by appending a random suffix.The name must contain only lower-case letters (a-z), numbers (0-9), and hyphens (-). Must begin with a letter. Cannot begin or end with hyphen. Must consist of between 2 and 35 characters.
     */
    clusterName: string;
    /**
     * The cluster configuration.
     */
    config: outputs.dataproc.v1.ClusterConfigResponse;
    /**
     * Optional. The labels to associate with this cluster.Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}\p{N}_-{0,63}No more than 32 labels can be associated with a given cluster.
     */
    labels: {[key: string]: string};
}

/**
 * Specifies the resources used to actively manage an instance group.
 */
export interface ManagedGroupConfigResponse {
    /**
     * The name of the Instance Group Manager for this group.
     */
    instanceGroupManagerName: string;
    /**
     * The name of the Instance Template used for the Managed Instance Group.
     */
    instanceTemplateName: string;
}

/**
 * Specifies a Metastore configuration.
 */
export interface MetastoreConfigResponse {
    /**
     * Resource name of an existing Dataproc Metastore service.Example: projects/[project_id]/locations/[dataproc_region]/services/[service-name]
     */
    dataprocMetastoreService: string;
}

/**
 * A Dataproc OSS metric.
 */
export interface MetricResponse {
    /**
     * Optional. Specify one or more available OSS metrics (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) to collect for the metric course (for the SPARK metric source, any Spark metric (https://spark.apache.org/docs/latest/monitoring.html#metrics) can be specified).Provide metrics in the following format: METRIC_SOURCE: INSTANCE:GROUP:METRIC Use camelcase as appropriate.Examples: yarn:ResourceManager:QueueMetrics:AppsCompleted spark:driver:DAGScheduler:job.allJobs sparkHistoryServer:JVM:Memory:NonHeapMemoryUsage.committed hiveserver2:JVM:Memory:NonHeapMemoryUsage.used Notes: Only the specified overridden metrics will be collected for the metric source. For example, if one or more spark:executive metrics are listed as metric overrides, other SPARK metrics will not be collected. The collection of the default metrics for other OSS metric sources is unaffected. For example, if both SPARK andd YARN metric sources are enabled, and overrides are provided for Spark metrics only, all default YARN metrics will be collected.
     */
    metricOverrides: string[];
    /**
     * Default metrics are collected unless metricOverrides are specified for the metric source (see Available OSS metrics (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) for more information).
     */
    metricSource: string;
}

/**
 * Deprecated. Used only for the deprecated beta. A full, namespace-isolated deployment target for an existing GKE cluster.
 */
export interface NamespacedGkeDeploymentTargetResponse {
    /**
     * Optional. A namespace within the GKE cluster to deploy into.
     */
    clusterNamespace: string;
    /**
     * Optional. The target GKE cluster to deploy to. Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'
     */
    targetGkeCluster: string;
}

/**
 * Node Group Affinity for clusters using sole-tenant node groups.
 */
export interface NodeGroupAffinityResponse {
    /**
     * The URI of a sole-tenant node group resource (https://cloud.google.com/compute/docs/reference/rest/v1/nodeGroups) that the cluster will be created on.A full URL, partial URI, or node group name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-central1-a/nodeGroups/node-group-1 projects/[project_id]/zones/us-central1-a/nodeGroups/node-group-1 node-group-1
     */
    nodeGroupUri: string;
}

/**
 * Specifies an executable to run on a fully configured node and a timeout period for executable completion.
 */
export interface NodeInitializationActionResponse {
    /**
     * Cloud Storage URI of executable file.
     */
    executableFile: string;
    /**
     * Optional. Amount of time executable has to complete. Default is 10 minutes (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.
     */
    executionTimeout: string;
}

/**
 * A job executed by the workflow.
 */
export interface OrderedJobResponse {
    /**
     * Optional. Job is a Hadoop job.
     */
    hadoopJob: outputs.dataproc.v1.HadoopJobResponse;
    /**
     * Optional. Job is a Hive job.
     */
    hiveJob: outputs.dataproc.v1.HiveJobResponse;
    /**
     * Optional. The labels to associate with this job.Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: \p{Ll}\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following regular expression: \p{Ll}\p{Lo}\p{N}_-{0,63}No more than 32 labels can be associated with a given job.
     */
    labels: {[key: string]: string};
    /**
     * Optional. Job is a Pig job.
     */
    pigJob: outputs.dataproc.v1.PigJobResponse;
    /**
     * Optional. The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.
     */
    prerequisiteStepIds: string[];
    /**
     * Optional. Job is a Presto job.
     */
    prestoJob: outputs.dataproc.v1.PrestoJobResponse;
    /**
     * Optional. Job is a PySpark job.
     */
    pysparkJob: outputs.dataproc.v1.PySparkJobResponse;
    /**
     * Optional. Job scheduling configuration.
     */
    scheduling: outputs.dataproc.v1.JobSchedulingResponse;
    /**
     * Optional. Job is a Spark job.
     */
    sparkJob: outputs.dataproc.v1.SparkJobResponse;
    /**
     * Optional. Job is a SparkR job.
     */
    sparkRJob: outputs.dataproc.v1.SparkRJobResponse;
    /**
     * Optional. Job is a SparkSql job.
     */
    sparkSqlJob: outputs.dataproc.v1.SparkSqlJobResponse;
    /**
     * The step id. The id must be unique among all jobs within the template.The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in prerequisiteStepIds field from other steps.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
     */
    stepId: string;
    /**
     * Optional. Job is a Trino job.
     */
    trinoJob: outputs.dataproc.v1.TrinoJobResponse;
}

/**
 * Configuration for parameter validation.
 */
export interface ParameterValidationResponse {
    /**
     * Validation based on regular expressions.
     */
    regex: outputs.dataproc.v1.RegexValidationResponse;
    /**
     * Validation based on a list of allowed values.
     */
    values: outputs.dataproc.v1.ValueValidationResponse;
}

/**
 * Auxiliary services configuration for a workload.
 */
export interface PeripheralsConfigResponse {
    /**
     * Optional. Resource name of an existing Dataproc Metastore service.Example: projects/[project_id]/locations/[region]/services/[service_id]
     */
    metastoreService: string;
    /**
     * Optional. The Spark History Server configuration for the workload.
     */
    sparkHistoryServerConfig: outputs.dataproc.v1.SparkHistoryServerConfigResponse;
}

/**
 * A Dataproc job for running Apache Pig (https://pig.apache.org/) queries on YARN.
 */
export interface PigJobResponse {
    /**
     * Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
     */
    continueOnFailure: boolean;
    /**
     * Optional. HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.
     */
    jarFileUris: string[];
    /**
     * Optional. The runtime log config for job execution.
     */
    loggingConfig: outputs.dataproc.v1.LoggingConfigResponse;
    /**
     * Optional. A mapping of property names to values, used to configure Pig. Properties that conflict with values set by the Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes in user code.
     */
    properties: {[key: string]: string};
    /**
     * The HCFS URI of the script that contains the Pig queries.
     */
    queryFileUri: string;
    /**
     * A list of queries.
     */
    queryList: outputs.dataproc.v1.QueryListResponse;
    /**
     * Optional. Mapping of query variable names to values (equivalent to the Pig command: name=[value]).
     */
    scriptVariables: {[key: string]: string};
}

/**
 * A Dataproc job for running Presto (https://prestosql.io/) queries. IMPORTANT: The Dataproc Presto Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/presto) must be enabled when the cluster is created to submit a Presto job to the cluster.
 */
export interface PrestoJobResponse {
    /**
     * Optional. Presto client tags to attach to this query
     */
    clientTags: string[];
    /**
     * Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
     */
    continueOnFailure: boolean;
    /**
     * Optional. The runtime log config for job execution.
     */
    loggingConfig: outputs.dataproc.v1.LoggingConfigResponse;
    /**
     * Optional. The format in which query output will be displayed. See the Presto documentation for supported output formats
     */
    outputFormat: string;
    /**
     * Optional. A mapping of property names to values. Used to set Presto session properties (https://prestodb.io/docs/current/sql/set-session.html) Equivalent to using the --session flag in the Presto CLI
     */
    properties: {[key: string]: string};
    /**
     * The HCFS URI of the script that contains SQL queries.
     */
    queryFileUri: string;
    /**
     * A list of queries.
     */
    queryList: outputs.dataproc.v1.QueryListResponse;
}

/**
 * A configuration for running an Apache PySpark (https://spark.apache.org/docs/latest/api/python/getting_started/quickstart.html) batch workload.
 */
export interface PySparkBatchResponse {
    /**
     * Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     */
    archiveUris: string[];
    /**
     * Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.
     */
    args: string[];
    /**
     * Optional. HCFS URIs of files to be placed in the working directory of each executor.
     */
    fileUris: string[];
    /**
     * Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.
     */
    jarFileUris: string[];
    /**
     * The HCFS URI of the main Python file to use as the Spark driver. Must be a .py file.
     */
    mainPythonFileUri: string;
    /**
     * Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
     */
    pythonFileUris: string[];
}

/**
 * A Dataproc job for running Apache PySpark (https://spark.apache.org/docs/0.9.0/python-programming-guide.html) applications on YARN.
 */
export interface PySparkJobResponse {
    /**
     * Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     */
    archiveUris: string[];
    /**
     * Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
     */
    args: string[];
    /**
     * Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
     */
    fileUris: string[];
    /**
     * Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Python driver and tasks.
     */
    jarFileUris: string[];
    /**
     * Optional. The runtime log config for job execution.
     */
    loggingConfig: outputs.dataproc.v1.LoggingConfigResponse;
    /**
     * The HCFS URI of the main Python file to use as the driver. Must be a .py file.
     */
    mainPythonFileUri: string;
    /**
     * Optional. A mapping of property names to values, used to configure PySpark. Properties that conflict with values set by the Dataproc API may be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.
     */
    properties: {[key: string]: string};
    /**
     * Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
     */
    pythonFileUris: string[];
}

/**
 * A list of queries to run on a cluster.
 */
export interface QueryListResponse {
    /**
     * The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": [ "query1", "query2", "query3;query4", ] } } 
     */
    queries: string[];
}

/**
 * Validation based on regular expressions.
 */
export interface RegexValidationResponse {
    /**
     * RE2 regular expressions used to validate the parameter's value. The value must match the regex in its entirety (substring matches are not sufficient).
     */
    regexes: string[];
}

/**
 * Reservation Affinity for consuming Zonal reservation.
 */
export interface ReservationAffinityResponse {
    /**
     * Optional. Type of reservation to consume
     */
    consumeReservationType: string;
    /**
     * Optional. Corresponds to the label key of reservation resource.
     */
    key: string;
    /**
     * Optional. Corresponds to the label values of reservation resource.
     */
    values: string[];
}

/**
 * Runtime configuration for a workload.
 */
export interface RuntimeConfigResponse {
    /**
     * Optional. Optional custom container image for the job runtime environment. If not specified, a default container image will be used.
     */
    containerImage: string;
    /**
     * Optional. A mapping of property names to values, which are used to configure workload execution.
     */
    properties: {[key: string]: string};
    /**
     * Optional. Version of the batch runtime.
     */
    version: string;
}

/**
 * Runtime information about workload execution.
 */
export interface RuntimeInfoResponse {
    /**
     * Approximate workload resource usage calculated after workload finishes.
     */
    approximateUsage: outputs.dataproc.v1.UsageMetricsResponse;
    /**
     * A URI pointing to the location of the diagnostics tarball.
     */
    diagnosticOutputUri: string;
    /**
     * Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
     */
    endpoints: {[key: string]: string};
    /**
     * A URI pointing to the location of the stdout and stderr of the workload.
     */
    outputUri: string;
}

/**
 * Security related configuration, including encryption, Kerberos, etc.
 */
export interface SecurityConfigResponse {
    /**
     * Optional. Identity related configuration, including service account based secure multi-tenancy user mappings.
     */
    identityConfig: outputs.dataproc.v1.IdentityConfigResponse;
    /**
     * Optional. Kerberos related configuration.
     */
    kerberosConfig: outputs.dataproc.v1.KerberosConfigResponse;
}

/**
 * Shielded Instance Config for clusters using Compute Engine Shielded VMs (https://cloud.google.com/security/shielded-cloud/shielded-vm).
 */
export interface ShieldedInstanceConfigResponse {
    /**
     * Optional. Defines whether instances have integrity monitoring enabled.
     */
    enableIntegrityMonitoring: boolean;
    /**
     * Optional. Defines whether instances have Secure Boot enabled.
     */
    enableSecureBoot: boolean;
    /**
     * Optional. Defines whether instances have the vTPM enabled.
     */
    enableVtpm: boolean;
}

/**
 * Specifies the selection and config of software inside the cluster.
 */
export interface SoftwareConfigResponse {
    /**
     * Optional. The version of software inside the cluster. It must be one of the supported Dataproc Versions (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as "1.2" (including a subminor version, such as "1.2.29"), or the "preview" version (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.
     */
    imageVersion: string;
    /**
     * Optional. The set of components to activate on the cluster.
     */
    optionalComponents: string[];
    /**
     * Optional. The properties to set on daemon config files.Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. The following are supported prefixes and their mappings: capacity-scheduler: capacity-scheduler.xml core: core-site.xml distcp: distcp-default.xml hdfs: hdfs-site.xml hive: hive-site.xml mapred: mapred-site.xml pig: pig.properties spark: spark-defaults.conf yarn: yarn-site.xmlFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
     */
    properties: {[key: string]: string};
}

/**
 * A configuration for running an Apache Spark (https://spark.apache.org/) batch workload.
 */
export interface SparkBatchResponse {
    /**
     * Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     */
    archiveUris: string[];
    /**
     * Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.
     */
    args: string[];
    /**
     * Optional. HCFS URIs of files to be placed in the working directory of each executor.
     */
    fileUris: string[];
    /**
     * Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.
     */
    jarFileUris: string[];
    /**
     * Optional. The name of the driver main class. The jar file that contains the class must be in the classpath or specified in jar_file_uris.
     */
    mainClass: string;
    /**
     * Optional. The HCFS URI of the jar file that contains the main class.
     */
    mainJarFileUri: string;
}

/**
 * Spark History Server configuration for the workload.
 */
export interface SparkHistoryServerConfigResponse {
    /**
     * Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the workload.Example: projects/[project_id]/regions/[region]/clusters/[cluster_name]
     */
    dataprocCluster: string;
}

/**
 * A Dataproc job for running Apache Spark (https://spark.apache.org/) applications on YARN.
 */
export interface SparkJobResponse {
    /**
     * Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     */
    archiveUris: string[];
    /**
     * Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
     */
    args: string[];
    /**
     * Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
     */
    fileUris: string[];
    /**
     * Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Spark driver and tasks.
     */
    jarFileUris: string[];
    /**
     * Optional. The runtime log config for job execution.
     */
    loggingConfig: outputs.dataproc.v1.LoggingConfigResponse;
    /**
     * The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
     */
    mainClass: string;
    /**
     * The HCFS URI of the jar file that contains the main class.
     */
    mainJarFileUri: string;
    /**
     * Optional. A mapping of property names to values, used to configure Spark. Properties that conflict with values set by the Dataproc API may be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.
     */
    properties: {[key: string]: string};
}

/**
 * A configuration for running an Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) batch workload.
 */
export interface SparkRBatchResponse {
    /**
     * Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     */
    archiveUris: string[];
    /**
     * Optional. The arguments to pass to the Spark driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.
     */
    args: string[];
    /**
     * Optional. HCFS URIs of files to be placed in the working directory of each executor.
     */
    fileUris: string[];
    /**
     * The HCFS URI of the main R file to use as the driver. Must be a .R or .r file.
     */
    mainRFileUri: string;
}

/**
 * A Dataproc job for running Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) applications on YARN.
 */
export interface SparkRJobResponse {
    /**
     * Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
     */
    archiveUris: string[];
    /**
     * Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
     */
    args: string[];
    /**
     * Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
     */
    fileUris: string[];
    /**
     * Optional. The runtime log config for job execution.
     */
    loggingConfig: outputs.dataproc.v1.LoggingConfigResponse;
    /**
     * The HCFS URI of the main R file to use as the driver. Must be a .R file.
     */
    mainRFileUri: string;
    /**
     * Optional. A mapping of property names to values, used to configure SparkR. Properties that conflict with values set by the Dataproc API may be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.
     */
    properties: {[key: string]: string};
}

/**
 * A configuration for running Apache Spark SQL (https://spark.apache.org/sql/) queries as a batch workload.
 */
export interface SparkSqlBatchResponse {
    /**
     * Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
     */
    jarFileUris: string[];
    /**
     * The HCFS URI of the script that contains Spark SQL queries to execute.
     */
    queryFileUri: string;
    /**
     * Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
     */
    queryVariables: {[key: string]: string};
}

/**
 * A Dataproc job for running Apache Spark SQL (https://spark.apache.org/sql/) queries.
 */
export interface SparkSqlJobResponse {
    /**
     * Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
     */
    jarFileUris: string[];
    /**
     * Optional. The runtime log config for job execution.
     */
    loggingConfig: outputs.dataproc.v1.LoggingConfigResponse;
    /**
     * Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
     */
    properties: {[key: string]: string};
    /**
     * The HCFS URI of the script that contains SQL queries.
     */
    queryFileUri: string;
    /**
     * A list of queries.
     */
    queryList: outputs.dataproc.v1.QueryListResponse;
    /**
     * Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
     */
    scriptVariables: {[key: string]: string};
}

/**
 * Basic autoscaling configurations for Spark Standalone.
 */
export interface SparkStandaloneAutoscalingConfigResponse {
    /**
     * Timeout for Spark graceful decommissioning of spark workers. Specifies the duration to wait for spark worker to complete spark decomissioning tasks before forcefully removing workers. Only applicable to downscaling operations.Bounds: 0s, 1d.
     */
    gracefulDecommissionTimeout: string;
    /**
     * Fraction of required executors to remove from Spark Serverless clusters. A scale-down factor of 1.0 will result in scaling down so that there are no more executors for the Spark Job.(more aggressive scaling). A scale-down factor closer to 0 will result in a smaller magnitude of scaling donw (less aggressive scaling).Bounds: 0.0, 1.0.
     */
    scaleDownFactor: number;
    /**
     * Optional. Minimum scale-down threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0 means the autoscaler will scale down on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
     */
    scaleDownMinWorkerFraction: number;
    /**
     * Fraction of required workers to add to Spark Standalone clusters. A scale-up factor of 1.0 will result in scaling up so that there are no more required workers for the Spark Job (more aggressive scaling). A scale-up factor closer to 0 will result in a smaller magnitude of scaling up (less aggressive scaling).Bounds: 0.0, 1.0.
     */
    scaleUpFactor: number;
    /**
     * Optional. Minimum scale-up threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of 0 means the autoscaler will scale up on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
     */
    scaleUpMinWorkerFraction: number;
}

/**
 * Historical state information.
 */
export interface StateHistoryResponse {
    /**
     * The state of the batch at this point in history.
     */
    state: string;
    /**
     * Details about the state at this point in history.
     */
    stateMessage: string;
    /**
     * The time when the batch entered the historical state.
     */
    stateStartTime: string;
}

/**
 * A configurable parameter that replaces one or more fields in the template. Parameterizable fields: - Labels - File uris - Job properties - Job arguments - Script variables - Main class (in HadoopJob and SparkJob) - Zone (in ClusterSelector)
 */
export interface TemplateParameterResponse {
    /**
     * Optional. Brief description of the parameter. Must not exceed 1024 characters.
     */
    description: string;
    /**
     * Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths.A field path is similar in syntax to a google.protobuf.FieldMask. For example, a field path that references the zone field of a workflow template's cluster selector would be specified as placement.clusterSelector.zone.Also, field paths can reference fields using the following syntax: Values in maps can be referenced by key: labels'key' placement.clusterSelector.clusterLabels'key' placement.managedCluster.labels'key' placement.clusterSelector.clusterLabels'key' jobs'step-id'.labels'key' Jobs in the jobs list can be referenced by step-id: jobs'step-id'.hadoopJob.mainJarFileUri jobs'step-id'.hiveJob.queryFileUri jobs'step-id'.pySparkJob.mainPythonFileUri jobs'step-id'.hadoopJob.jarFileUris0 jobs'step-id'.hadoopJob.archiveUris0 jobs'step-id'.hadoopJob.fileUris0 jobs'step-id'.pySparkJob.pythonFileUris0 Items in repeated fields can be referenced by a zero-based index: jobs'step-id'.sparkJob.args0 Other examples: jobs'step-id'.hadoopJob.properties'key' jobs'step-id'.hadoopJob.args0 jobs'step-id'.hiveJob.scriptVariables'key' jobs'step-id'.hadoopJob.mainJarFileUri placement.clusterSelector.zoneIt may not be possible to parameterize maps and repeated fields in their entirety since only individual map values and individual items in repeated fields can be referenced. For example, the following field paths are invalid: placement.clusterSelector.clusterLabels jobs'step-id'.sparkJob.args
     */
    fields: string[];
    /**
     * Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
     */
    name: string;
    /**
     * Optional. Validation rules to be applied to this parameter's value.
     */
    validation: outputs.dataproc.v1.ParameterValidationResponse;
}

/**
 * A Dataproc job for running Trino (https://trino.io/) queries. IMPORTANT: The Dataproc Trino Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/trino) must be enabled when the cluster is created to submit a Trino job to the cluster.
 */
export interface TrinoJobResponse {
    /**
     * Optional. Trino client tags to attach to this query
     */
    clientTags: string[];
    /**
     * Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
     */
    continueOnFailure: boolean;
    /**
     * Optional. The runtime log config for job execution.
     */
    loggingConfig: outputs.dataproc.v1.LoggingConfigResponse;
    /**
     * Optional. The format in which query output will be displayed. See the Trino documentation for supported output formats
     */
    outputFormat: string;
    /**
     * Optional. A mapping of property names to values. Used to set Trino session properties (https://trino.io/docs/current/sql/set-session.html) Equivalent to using the --session flag in the Trino CLI
     */
    properties: {[key: string]: string};
    /**
     * The HCFS URI of the script that contains SQL queries.
     */
    queryFileUri: string;
    /**
     * A list of queries.
     */
    queryList: outputs.dataproc.v1.QueryListResponse;
}

/**
 * Usage metrics represent total resources consumed by a workload.
 */
export interface UsageMetricsResponse {
    /**
     * Optional. DCU usage in milliDCU*seconds.
     */
    milliDcuSeconds: string;
    /**
     * Optional. Shuffle storage usage in GB*Seconds
     */
    shuffleStorageGbSeconds: string;
}

/**
 * Validation based on a list of allowed values.
 */
export interface ValueValidationResponse {
    /**
     * List of allowed values for the parameter.
     */
    values: string[];
}

/**
 * The Dataproc cluster config for a cluster that does not directly control the underlying compute resources, such as a Dataproc-on-GKE cluster (https://cloud.google.com/dataproc/docs/guides/dpgke/dataproc-gke).
 */
export interface VirtualClusterConfigResponse {
    /**
     * Optional. Configuration of auxiliary services used by this cluster.
     */
    auxiliaryServicesConfig: outputs.dataproc.v1.AuxiliaryServicesConfigResponse;
    /**
     * The configuration for running the Dataproc cluster on Kubernetes.
     */
    kubernetesClusterConfig: outputs.dataproc.v1.KubernetesClusterConfigResponse;
    /**
     * Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
     */
    stagingBucket: string;
}

/**
 * Specifies workflow execution target.Either managed_cluster or cluster_selector is required.
 */
export interface WorkflowTemplatePlacementResponse {
    /**
     * Optional. A selector that chooses target cluster for jobs based on metadata.The selector is evaluated at the time each job is submitted.
     */
    clusterSelector: outputs.dataproc.v1.ClusterSelectorResponse;
    /**
     * A cluster that is managed by the workflow.
     */
    managedCluster: outputs.dataproc.v1.ManagedClusterResponse;
}

/**
 * A YARN application created by a job. Application information is a subset of org.apache.hadoop.yarn.proto.YarnProtos.ApplicationReportProto.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
 */
export interface YarnApplicationResponse {
    /**
     * The application name.
     */
    name: string;
    /**
     * The numerical progress of the application, from 1 to 100.
     */
    progress: number;
    /**
     * The application state.
     */
    state: string;
    /**
     * Optional. The HTTP URL of the ApplicationMaster, HistoryServer, or TimelineServer that provides application-specific information. The URL uses the internal hostname, and requires a proxy server for resolution and, possibly, access.
     */
    trackingUrl: string;
}

