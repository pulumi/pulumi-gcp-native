// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.cloudiot.v1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * The device configuration. Eventually delivered to devices.
 */
export interface DeviceConfigResponse {
    /**
     * The device configuration data.
     */
    binaryData: string;
    /**
     * [Output only] The time at which this configuration version was updated in Cloud IoT Core. This timestamp is set by the server.
     */
    cloudUpdateTime: string;
    /**
     * [Output only] The time at which Cloud IoT Core received the acknowledgment from the device, indicating that the device has received this configuration version. If this field is not present, the device has not yet acknowledged that it received this version. Note that when the config was sent to the device, many config versions may have been available in Cloud IoT Core while the device was disconnected, and on connection, only the latest version is sent to the device. Some versions may never be sent to the device, and therefore are never acknowledged. This timestamp is set by Cloud IoT Core.
     */
    deviceAckTime: string;
    /**
     * [Output only] The version of this update. The version number is assigned by the server, and is always greater than 0 after device creation. The version must be 0 on the `CreateDevice` request if a `config` is specified; the response of `CreateDevice` will always have a value of 1.
     */
    version: string;
}

/**
 * A server-stored device credential used for authentication.
 */
export interface DeviceCredentialResponse {
    /**
     * [Optional] The time at which this credential becomes invalid. This credential will be ignored for new client authentication requests after this timestamp; however, it will not be automatically deleted.
     */
    expirationTime: string;
    /**
     * A public key used to verify the signature of JSON Web Tokens (JWTs). When adding a new device credential, either via device creation or via modifications, this public key credential may be required to be signed by one of the registry level certificates. More specifically, if the registry contains at least one certificate, any new device credential must be signed by one of the registry certificates. As a result, when the registry contains certificates, only X.509 certificates are accepted as device credentials. However, if the registry does not contain a certificate, self-signed certificates and public keys will be accepted. New device credentials must be different from every registry-level certificate.
     */
    publicKey: outputs.cloudiot.v1.PublicKeyCredentialResponse;
}

/**
 * The device state, as reported by the device.
 */
export interface DeviceStateResponse {
    /**
     * The device state data.
     */
    binaryData: string;
    /**
     * [Output only] The time at which this state version was updated in Cloud IoT Core.
     */
    updateTime: string;
}

/**
 * The configuration for forwarding telemetry events.
 */
export interface EventNotificationConfigResponse {
    /**
     * A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
     */
    pubsubTopicName: string;
    /**
     * If the subfolder name matches this string exactly, this configuration will be used. The string must not include the leading '/' character. If empty, all strings are matched. This field is used only for telemetry events; subfolders are not supported for state changes.
     */
    subfolderMatches: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * Gateway-related configuration and state.
 */
export interface GatewayConfigResponse {
    /**
     * Indicates how to authorize and/or authenticate devices to access the gateway.
     */
    gatewayAuthMethod: string;
    /**
     * Indicates whether the device is a gateway.
     */
    gatewayType: string;
    /**
     * [Output only] The ID of the gateway the device accessed most recently.
     */
    lastAccessedGatewayId: string;
    /**
     * [Output only] The most recent time at which the device accessed the gateway specified in `last_accessed_gateway`.
     */
    lastAccessedGatewayTime: string;
}

/**
 * The configuration of the HTTP bridge for a device registry.
 */
export interface HttpConfigResponse {
    /**
     * If enabled, allows devices to use DeviceService via the HTTP protocol. Otherwise, any requests to DeviceService will fail for this registry.
     */
    httpEnabledState: string;
}

/**
 * The configuration of MQTT for a device registry.
 */
export interface MqttConfigResponse {
    /**
     * If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.
     */
    mqttEnabledState: string;
}

/**
 * A public key certificate format and data.
 */
export interface PublicKeyCertificateResponse {
    /**
     * The certificate data.
     */
    certificate: string;
    /**
     * The certificate format.
     */
    format: string;
    /**
     * [Output only] The certificate details. Used only for X.509 certificates.
     */
    x509Details: outputs.cloudiot.v1.X509CertificateDetailsResponse;
}

/**
 * A public key format and data.
 */
export interface PublicKeyCredentialResponse {
    /**
     * The format of the key.
     */
    format: string;
    /**
     * The key data.
     */
    key: string;
}

/**
 * A server-stored registry credential used to validate device credentials.
 */
export interface RegistryCredentialResponse {
    /**
     * A public key certificate used to verify the device credentials.
     */
    publicKeyCertificate: outputs.cloudiot.v1.PublicKeyCertificateResponse;
}

/**
 * The configuration for notification of new states received from the device.
 */
export interface StateNotificationConfigResponse {
    /**
     * A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
     */
    pubsubTopicName: string;
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export interface StatusResponse {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code: number;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details: {[key: string]: string}[];
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message: string;
}

/**
 * Details of an X.509 certificate. For informational purposes only.
 */
export interface X509CertificateDetailsResponse {
    /**
     * The time the certificate becomes invalid.
     */
    expiryTime: string;
    /**
     * The entity that signed the certificate.
     */
    issuer: string;
    /**
     * The type of public key in the certificate.
     */
    publicKeyType: string;
    /**
     * The algorithm used to sign the certificate.
     */
    signatureAlgorithm: string;
    /**
     * The time the certificate becomes valid.
     */
    startTime: string;
    /**
     * The entity the certificate and public key belong to.
     */
    subject: string;
}

