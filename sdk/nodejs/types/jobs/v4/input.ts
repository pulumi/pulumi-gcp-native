// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Application related details of a job posting.
 */
export interface ApplicationInfoArgs {
    /**
     * Use this field to specify email address(es) to which resumes or applications can be sent. The maximum number of allowed characters for each entry is 255.
     */
    emails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use this field to provide instructions, such as "Mail your application to ...", that a candidate can follow to apply for the job. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 3,000.
     */
    instruction?: pulumi.Input<string>;
    /**
     * Use this URI field to direct an applicant to a website, for example to link to an online application form. The maximum number of allowed characters for each entry is 2,000.
     */
    uris?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year.
 */
export interface CompensationEntryArgs {
    /**
     * Compensation amount.
     */
    amount?: pulumi.Input<inputs.jobs.v4.MoneyArgs>;
    /**
     * Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus.
     */
    description?: pulumi.Input<string>;
    /**
     * Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1
     */
    expectedUnitsPerYear?: pulumi.Input<number>;
    /**
     * Compensation range.
     */
    range?: pulumi.Input<inputs.jobs.v4.CompensationRangeArgs>;
    /**
     * Compensation type. Default is CompensationType.COMPENSATION_TYPE_UNSPECIFIED.
     */
    type?: pulumi.Input<enums.jobs.v4.CompensationEntryType>;
    /**
     * Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.
     */
    unit?: pulumi.Input<enums.jobs.v4.CompensationEntryUnit>;
}

/**
 * Job compensation details.
 */
export interface CompensationInfoArgs {
    /**
     * Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as **base compensation entry** for the job.
     */
    entries?: pulumi.Input<pulumi.Input<inputs.jobs.v4.CompensationEntryArgs>[]>;
}

/**
 * Compensation range.
 */
export interface CompensationRangeArgs {
    /**
     * The maximum amount of compensation. If left empty, the value is set to a maximal compensation value and the currency code is set to match the currency code of min_compensation.
     */
    maxCompensation?: pulumi.Input<inputs.jobs.v4.MoneyArgs>;
    /**
     * The minimum amount of compensation. If left empty, the value is set to zero and the currency code is set to match the currency code of max_compensation.
     */
    minCompensation?: pulumi.Input<inputs.jobs.v4.MoneyArgs>;
}

/**
 * Represents an amount of money with its currency type.
 */
export interface MoneyArgs {
    /**
     * The three-letter currency code defined in ISO 4217.
     */
    currencyCode?: pulumi.Input<string>;
    /**
     * Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
     */
    nanos?: pulumi.Input<number>;
    /**
     * The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
     */
    units?: pulumi.Input<string>;
}

/**
 * Options for job processing.
 */
export interface ProcessingOptionsArgs {
    /**
     * If set to `true`, the service does not attempt to resolve a more precise address for the job.
     */
    disableStreetAddressResolution?: pulumi.Input<boolean>;
    /**
     * Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation isn't disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.
     */
    htmlSanitization?: pulumi.Input<enums.jobs.v4.ProcessingOptionsHtmlSanitization>;
}

