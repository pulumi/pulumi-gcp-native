// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

export interface CompositeFilterResponse {
    /**
     * The logic operator of the sub filter.
     */
    logicOperator: string;
    /**
     * Sub filters.
     */
    subFilters: outputs.cloudsearch.v1.FilterResponse[];
}

/**
 * Restriction on Datasource.
 */
export interface DataSourceRestrictionResponse {
    /**
     * Filter options restricting the results. If multiple filters are present, they are grouped by object type before joining. Filters with the same object type are joined conjunctively, then the resulting expressions are joined disjunctively. The maximum number of elements is 20. NOTE: Suggest API supports only few filters at the moment: "objecttype", "type" and "mimetype". For now, schema specific filters cannot be used to filter suggestions.
     */
    filterOptions: outputs.cloudsearch.v1.FilterOptionsResponse[];
    /**
     * The source of restriction.
     */
    source: outputs.cloudsearch.v1.SourceResponse;
}

/**
 * Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.
 */
export interface DateResponse {
    /**
     * Day of month. Must be from 1 to 31 and valid for the year and month.
     */
    day: number;
    /**
     * Month of date. Must be from 1 to 12.
     */
    month: number;
    /**
     * Year of date. Must be from 1 to 9999.
     */
    year: number;
}

/**
 * Specifies operators to return facet results for. There will be one FacetResult for every source_name/object_type/operator_name combination.
 */
export interface FacetOptionsResponse {
    /**
     * Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100.
     */
    numFacetBuckets: number;
    /**
     * If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets.
     */
    objectType: string;
    /**
     * The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions
     */
    operatorName: string;
    /**
     * Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used.
     */
    sourceName: string;
}

/**
 * Filter options to be applied on query.
 */
export interface FilterOptionsResponse {
    /**
     * Generic filter to restrict the search, such as `lang:en`, `site:xyz`.
     */
    filter: outputs.cloudsearch.v1.FilterResponse;
    /**
     * If object_type is set, only objects of that type are returned. This should correspond to the name of the object that was registered within the definition of schema. The maximum length is 256 characters.
     */
    objectType: string;
}

/**
 * A generic way of expressing filters in a query, which supports two approaches: **1. Setting a ValueFilter.** The name must match an operator_name defined in the schema for your data source. **2. Setting a CompositeFilter.** The filters are evaluated using the logical operator. The top-level operators can only be either an AND or a NOT. AND can appear only at the top-most level. OR can appear only under a top-level AND.
 */
export interface FilterResponse {
    compositeFilter: outputs.cloudsearch.v1.CompositeFilterResponse;
    valueFilter: outputs.cloudsearch.v1.ValueFilterResponse;
}

export interface GSuitePrincipalResponse {
    /**
     * This principal represents all users of the Google Workspace domain of the customer.
     */
    gsuiteDomain: boolean;
    /**
     * This principal references a Google Workspace group name.
     */
    gsuiteGroupEmail: string;
    /**
     * This principal references a Google Workspace user account.
     */
    gsuiteUserEmail: string;
}

/**
 * Default options to interpret user query.
 */
export interface QueryInterpretationConfigResponse {
    /**
     * Set this flag to disable supplemental results retrieval, setting a flag here will not retrieve supplemental results for queries associated with a given search application. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for supplemental results.
     */
    forceDisableSupplementalResults: boolean;
    /**
     * Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental results retrieval, and usage of synonyms including custom ones. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for verbatim mode.
     */
    forceVerbatimMode: boolean;
}

/**
 * Scoring configurations for a source while processing a Search or Suggest request.
 */
export interface ScoringConfigResponse {
    /**
     * Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI.
     */
    disableFreshness: boolean;
    /**
     * Whether to personalize the results. By default, personal signals will be used to boost results.
     */
    disablePersonalization: boolean;
}

export interface SortOptionsResponse {
    /**
     * The name of the operator corresponding to the field to sort on. The corresponding property must be marked as sortable.
     */
    operatorName: string;
    /**
     * Ascending is the default sort order
     */
    sortOrder: string;
}

/**
 * Configurations for a source while processing a Search or Suggest request.
 */
export interface SourceConfigResponse {
    /**
     * The crowding configuration for the source.
     */
    crowdingConfig: outputs.cloudsearch.v1.SourceCrowdingConfigResponse;
    /**
     * The scoring configuration for the source.
     */
    scoringConfig: outputs.cloudsearch.v1.SourceScoringConfigResponse;
    /**
     * The source for which this configuration is to be used.
     */
    source: outputs.cloudsearch.v1.SourceResponse;
}

/**
 * Set search results crowding limits. Crowding is a situation in which multiple results from the same source or host "crowd out" other results, diminishing the quality of search for users. To foster better search quality and source diversity in search results, you can set a condition to reduce repetitive results by source.
 */
export interface SourceCrowdingConfigResponse {
    /**
     * Maximum number of results allowed from a datasource in a result page as long as results from other sources are not exhausted. Value specified must not be negative. A default value is used if this value is equal to 0. To disable crowding, set the value greater than 100.
     */
    numResults: number;
    /**
     * Maximum number of suggestions allowed from a source. No limits will be set on results if this value is less than or equal to 0.
     */
    numSuggestions: number;
}

/**
 * Defines sources for the suggest/search APIs.
 */
export interface SourceResponse {
    /**
     * Source name for content indexed by the Indexing API.
     */
    name: string;
    /**
     * Predefined content source for Google Apps.
     */
    predefinedSource: string;
}

/**
 * Set the scoring configuration. This allows modifying the ranking of results for a source.
 */
export interface SourceScoringConfigResponse {
    /**
     * Importance of the source.
     */
    sourceImportance: string;
}

export interface ValueFilterResponse {
    /**
     * The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.
     */
    operatorName: string;
    /**
     * The value to be compared with.
     */
    value: outputs.cloudsearch.v1.ValueResponse;
}

/**
 * Definition of a single value with generic type.
 */
export interface ValueResponse {
    booleanValue: boolean;
    dateValue: outputs.cloudsearch.v1.DateResponse;
    doubleValue: number;
    integerValue: string;
    stringValue: string;
    timestampValue: string;
}

