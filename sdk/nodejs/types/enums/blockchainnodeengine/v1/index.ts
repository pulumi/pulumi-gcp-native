// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BlockchainNodeBlockchainType = {
    /**
     * Blockchain type has not been specified, but should be.
     */
    BlockchainTypeUnspecified: "BLOCKCHAIN_TYPE_UNSPECIFIED",
    /**
     * The blockchain type is Ethereum.
     */
    Ethereum: "ETHEREUM",
} as const;

/**
 * Immutable. The blockchain type of the node.
 */
export type BlockchainNodeBlockchainType = (typeof BlockchainNodeBlockchainType)[keyof typeof BlockchainNodeBlockchainType];

export const EthereumDetailsConsensusClient = {
    /**
     * Consensus client has not been specified, but should be.
     */
    ConsensusClientUnspecified: "CONSENSUS_CLIENT_UNSPECIFIED",
    /**
     * Consensus client implementation written in Rust, maintained by Sigma Prime. See [Lighthouse - Sigma Prime](https://lighthouse.sigmaprime.io/) for details.
     */
    Lighthouse: "LIGHTHOUSE",
    /**
     * Erigon's embedded consensus client embedded in the execution client. Note this option is not currently available when creating new blockchain nodes. See [Erigon on GitHub](https://github.com/ledgerwatch/erigon#embedded-consensus-layer) for details.
     */
    ErigonEmbeddedConsensusLayer: "ERIGON_EMBEDDED_CONSENSUS_LAYER",
} as const;

/**
 * Immutable. The consensus client.
 */
export type EthereumDetailsConsensusClient = (typeof EthereumDetailsConsensusClient)[keyof typeof EthereumDetailsConsensusClient];

export const EthereumDetailsExecutionClient = {
    /**
     * Execution client has not been specified, but should be.
     */
    ExecutionClientUnspecified: "EXECUTION_CLIENT_UNSPECIFIED",
    /**
     * Official Go implementation of the Ethereum protocol. See [go-ethereum](https://geth.ethereum.org/) for details.
     */
    Geth: "GETH",
    /**
     * An implementation of Ethereum (execution client), on the efficiency frontier, written in Go. See [Erigon on GitHub](https://github.com/ledgerwatch/erigon) for details.
     */
    Erigon: "ERIGON",
} as const;

/**
 * Immutable. The execution client
 */
export type EthereumDetailsExecutionClient = (typeof EthereumDetailsExecutionClient)[keyof typeof EthereumDetailsExecutionClient];

export const EthereumDetailsNetwork = {
    /**
     * The network has not been specified, but should be.
     */
    NetworkUnspecified: "NETWORK_UNSPECIFIED",
    /**
     * The Ethereum Mainnet.
     */
    Mainnet: "MAINNET",
    /**
     * The Ethereum Testnet based on Goerli protocol.
     */
    TestnetGoerliPrater: "TESTNET_GOERLI_PRATER",
    /**
     * The Ethereum Testnet based on Sepolia/Bepolia protocol. See https://github.com/eth-clients/sepolia.
     */
    TestnetSepolia: "TESTNET_SEPOLIA",
    /**
     * The Ethereum Testnet based on Holesky specification. See https://github.com/eth-clients/holesky.
     */
    TestnetHolesky: "TESTNET_HOLESKY",
} as const;

/**
 * Immutable. The Ethereum environment being accessed.
 */
export type EthereumDetailsNetwork = (typeof EthereumDetailsNetwork)[keyof typeof EthereumDetailsNetwork];

export const EthereumDetailsNodeType = {
    /**
     * Node type has not been specified, but should be.
     */
    NodeTypeUnspecified: "NODE_TYPE_UNSPECIFIED",
    /**
     * An Ethereum node that only downloads Ethereum block headers.
     */
    Light: "LIGHT",
    /**
     * Keeps a complete copy of the blockchain data, and contributes to the network by receiving, validating, and forwarding transactions.
     */
    Full: "FULL",
    /**
     * Holds the same data as full node as well as all of the blockchain's history state data dating back to the Genesis Block.
     */
    Archive: "ARCHIVE",
} as const;

/**
 * Immutable. The type of Ethereum node.
 */
export type EthereumDetailsNodeType = (typeof EthereumDetailsNodeType)[keyof typeof EthereumDetailsNodeType];

export const GethDetailsGarbageCollectionMode = {
    /**
     * The garbage collection has not been specified.
     */
    GarbageCollectionModeUnspecified: "GARBAGE_COLLECTION_MODE_UNSPECIFIED",
    /**
     * Configures Geth's garbage collection so that older data not needed for a full node is deleted. This is the default mode when creating a full node.
     */
    Full: "FULL",
    /**
     * Configures Geth's garbage collection so that old data is never deleted. This is the default mode when creating an archive node. This value can also be chosen when creating a full node in order to create a partial/recent archive node. See [Sync modes](https://geth.ethereum.org/docs/fundamentals/sync-modes) for more details.
     */
    Archive: "ARCHIVE",
} as const;

/**
 * Immutable. Blockchain garbage collection mode.
 */
export type GethDetailsGarbageCollectionMode = (typeof GethDetailsGarbageCollectionMode)[keyof typeof GethDetailsGarbageCollectionMode];
