// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BackupRetentionSettingsRetentionUnit = {
    /**
     * Backup retention unit is unspecified, will be treated as COUNT.
     */
    RetentionUnitUnspecified: "RETENTION_UNIT_UNSPECIFIED",
    /**
     * Retention will be by count, eg. "retain the most recent 7 backups".
     */
    Count: "COUNT",
} as const;

/**
 * The unit that 'retained_backups' represents.
 */
export type BackupRetentionSettingsRetentionUnit = (typeof BackupRetentionSettingsRetentionUnit)[keyof typeof BackupRetentionSettingsRetentionUnit];

export const BackupRunBackupKind = {
    /**
     * This is an unknown BackupKind.
     */
    SqlBackupKindUnspecified: "SQL_BACKUP_KIND_UNSPECIFIED",
    /**
     * The snapshot based backups
     */
    Snapshot: "SNAPSHOT",
    /**
     * Physical backups
     */
    Physical: "PHYSICAL",
} as const;

/**
 * Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
 */
export type BackupRunBackupKind = (typeof BackupRunBackupKind)[keyof typeof BackupRunBackupKind];

export const BackupRunStatus = {
    /**
     * The status of the run is unknown.
     */
    SqlBackupRunStatusUnspecified: "SQL_BACKUP_RUN_STATUS_UNSPECIFIED",
    /**
     * The backup operation was enqueued.
     */
    Enqueued: "ENQUEUED",
    /**
     * The backup is overdue across a given backup window. Indicates a problem. Example: Long-running operation in progress during the whole window.
     */
    Overdue: "OVERDUE",
    /**
     * The backup is in progress.
     */
    Running: "RUNNING",
    /**
     * The backup failed.
     */
    Failed: "FAILED",
    /**
     * The backup was successful.
     */
    Successful: "SUCCESSFUL",
    /**
     * The backup was skipped (without problems) for a given backup window. Example: Instance was idle.
     */
    Skipped: "SKIPPED",
    /**
     * The backup is about to be deleted.
     */
    DeletionPending: "DELETION_PENDING",
    /**
     * The backup deletion failed.
     */
    DeletionFailed: "DELETION_FAILED",
    /**
     * The backup has been deleted.
     */
    Deleted: "DELETED",
} as const;

/**
 * The status of this run.
 */
export type BackupRunStatus = (typeof BackupRunStatus)[keyof typeof BackupRunStatus];

export const BackupRunType = {
    /**
     * This is an unknown BackupRun type.
     */
    SqlBackupRunTypeUnspecified: "SQL_BACKUP_RUN_TYPE_UNSPECIFIED",
    /**
     * The backup schedule automatically triggers a backup.
     */
    Automated: "AUTOMATED",
    /**
     * The user manually triggers a backup.
     */
    OnDemand: "ON_DEMAND",
} as const;

/**
 * The type of this run; can be either "AUTOMATED" or "ON_DEMAND". This field defaults to "ON_DEMAND" and is ignored, when specified for insert requests.
 */
export type BackupRunType = (typeof BackupRunType)[keyof typeof BackupRunType];

export const InstanceBackendType = {
    /**
     * This is an unknown backend type for instance.
     */
    SqlBackendTypeUnspecified: "SQL_BACKEND_TYPE_UNSPECIFIED",
    /**
     * V1 speckle instance.
     */
    FirstGen: "FIRST_GEN",
    /**
     * V2 speckle instance.
     */
    SecondGen: "SECOND_GEN",
    /**
     * On premises instance.
     */
    External: "EXTERNAL",
} as const;

/**
 * The backend type. `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the `settings` object to determine the database type.
 */
export type InstanceBackendType = (typeof InstanceBackendType)[keyof typeof InstanceBackendType];

export const InstanceDatabaseVersion = {
    /**
     * This is an unknown database version.
     */
    SqlDatabaseVersionUnspecified: "SQL_DATABASE_VERSION_UNSPECIFIED",
    /**
     * The database version is MySQL 5.1.
     */
    Mysql51: "MYSQL_5_1",
    /**
     * The database version is MySQL 5.5.
     */
    Mysql55: "MYSQL_5_5",
    /**
     * The database version is MySQL 5.6.
     */
    Mysql56: "MYSQL_5_6",
    /**
     * The database version is MySQL 5.7.
     */
    Mysql57: "MYSQL_5_7",
    /**
     * The database version is PostgreSQL 9.6.
     */
    Postgres96: "POSTGRES_9_6",
    /**
     * The database version is PostgreSQL 11.
     */
    Postgres11: "POSTGRES_11",
    /**
     * The database version is SQL Server 2017 Standard.
     */
    Sqlserver2017Standard: "SQLSERVER_2017_STANDARD",
    /**
     * The database version is SQL Server 2017 Enterprise.
     */
    Sqlserver2017Enterprise: "SQLSERVER_2017_ENTERPRISE",
    /**
     * The database version is SQL Server 2017 Express.
     */
    Sqlserver2017Express: "SQLSERVER_2017_EXPRESS",
    /**
     * The database version is SQL Server 2017 Web.
     */
    Sqlserver2017Web: "SQLSERVER_2017_WEB",
    /**
     * The database version is PostgreSQL 10.
     */
    Postgres10: "POSTGRES_10",
    /**
     * The database version is PostgreSQL 12.
     */
    Postgres12: "POSTGRES_12",
    /**
     * The database version is MySQL 8.
     */
    Mysql80: "MYSQL_8_0",
    /**
     * The database major version is MySQL 8.0 and the minor version is 18.
     */
    Mysql8018: "MYSQL_8_0_18",
    /**
     * The database major version is MySQL 8.0 and the minor version is 26.
     */
    Mysql8026: "MYSQL_8_0_26",
    /**
     * The database major version is MySQL 8.0 and the minor version is 27.
     */
    Mysql8027: "MYSQL_8_0_27",
    /**
     * The database major version is MySQL 8.0 and the minor version is 28.
     */
    Mysql8028: "MYSQL_8_0_28",
    /**
     * The database version is PostgreSQL 13.
     */
    Postgres13: "POSTGRES_13",
    /**
     * The database version is PostgreSQL 14.
     */
    Postgres14: "POSTGRES_14",
    /**
     * The database version is SQL Server 2019 Standard.
     */
    Sqlserver2019Standard: "SQLSERVER_2019_STANDARD",
    /**
     * The database version is SQL Server 2019 Enterprise.
     */
    Sqlserver2019Enterprise: "SQLSERVER_2019_ENTERPRISE",
    /**
     * The database version is SQL Server 2019 Express.
     */
    Sqlserver2019Express: "SQLSERVER_2019_EXPRESS",
    /**
     * The database version is SQL Server 2019 Web.
     */
    Sqlserver2019Web: "SQLSERVER_2019_WEB",
} as const;

/**
 * The database engine type and version. The `databaseVersion` field cannot be changed after instance creation.
 */
export type InstanceDatabaseVersion = (typeof InstanceDatabaseVersion)[keyof typeof InstanceDatabaseVersion];

export const InstanceInstanceType = {
    /**
     * This is an unknown Cloud SQL instance type.
     */
    SqlInstanceTypeUnspecified: "SQL_INSTANCE_TYPE_UNSPECIFIED",
    /**
     * A regular Cloud SQL instance that is not replicating from a primary instance.
     */
    CloudSqlInstance: "CLOUD_SQL_INSTANCE",
    /**
     * An instance running on the customer's premises that is not managed by Cloud SQL.
     */
    OnPremisesInstance: "ON_PREMISES_INSTANCE",
    /**
     * A Cloud SQL instance acting as a read-replica.
     */
    ReadReplicaInstance: "READ_REPLICA_INSTANCE",
} as const;

/**
 * The instance type.
 */
export type InstanceInstanceType = (typeof InstanceInstanceType)[keyof typeof InstanceInstanceType];

export const InstanceState = {
    /**
     * The state of the instance is unknown.
     */
    SqlInstanceStateUnspecified: "SQL_INSTANCE_STATE_UNSPECIFIED",
    /**
     * The instance is running, or has been stopped by owner.
     */
    Runnable: "RUNNABLE",
    /**
     * The instance is not available, for example due to problems with billing.
     */
    Suspended: "SUSPENDED",
    /**
     * The instance is being deleted.
     */
    PendingDelete: "PENDING_DELETE",
    /**
     * The instance is being created.
     */
    PendingCreate: "PENDING_CREATE",
    /**
     * The instance is down for maintenance.
     */
    Maintenance: "MAINTENANCE",
    /**
     * The creation of the instance failed or a fatal error occurred during maintenance.
     */
    Failed: "FAILED",
    /**
     * Deprecated
     */
    OnlineMaintenance: "ONLINE_MAINTENANCE",
} as const;

/**
 * The current serving state of the Cloud SQL instance.
 */
export type InstanceState = (typeof InstanceState)[keyof typeof InstanceState];

export const InstanceSuspensionReasonItem = {
    /**
     * This is an unknown suspension reason.
     */
    SqlSuspensionReasonUnspecified: "SQL_SUSPENSION_REASON_UNSPECIFIED",
    /**
     * The instance is suspended due to billing issues (for example:, GCP account issue)
     */
    BillingIssue: "BILLING_ISSUE",
    /**
     * The instance is suspended due to illegal content (for example:, child pornography, copyrighted material, etc.).
     */
    LegalIssue: "LEGAL_ISSUE",
    /**
     * The instance is causing operational issues (for example:, causing the database to crash).
     */
    OperationalIssue: "OPERATIONAL_ISSUE",
    /**
     * The KMS key used by the instance is either revoked or denied access to
     */
    KmsKeyIssue: "KMS_KEY_ISSUE",
} as const;

export type InstanceSuspensionReasonItem = (typeof InstanceSuspensionReasonItem)[keyof typeof InstanceSuspensionReasonItem];

export const IpMappingType = {
    /**
     * This is an unknown IP address type.
     */
    SqlIpAddressTypeUnspecified: "SQL_IP_ADDRESS_TYPE_UNSPECIFIED",
    /**
     * IP address the customer is supposed to connect to. Usually this is the load balancer's IP address
     */
    Primary: "PRIMARY",
    /**
     * Source IP address of the connection a read replica establishes to its external primary instance. This IP address can be allowlisted by the customer in case it has a firewall that filters incoming connection to its on premises primary instance.
     */
    Outgoing: "OUTGOING",
    /**
     * Private IP used when using private IPs and network peering.
     */
    Private: "PRIVATE",
    /**
     * V1 IP of a migrated instance. We want the user to decommission this IP as soon as the migration is complete. Note: V1 instances with V1 ip addresses will be counted as PRIMARY.
     */
    Migrated1stGen: "MIGRATED_1ST_GEN",
} as const;

/**
 * The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.
 */
export type IpMappingType = (typeof IpMappingType)[keyof typeof IpMappingType];

export const MaintenanceWindowUpdateTrack = {
    /**
     * This is an unknown maintenance timing preference.
     */
    SqlUpdateTrackUnspecified: "SQL_UPDATE_TRACK_UNSPECIFIED",
    /**
     * For instance update that requires a restart, this update track indicates your instance prefer to restart for new version early in maintenance window.
     */
    Canary: "canary",
    /**
     * For instance update that requires a restart, this update track indicates your instance prefer to let Cloud SQL choose the timing of restart (within its Maintenance window, if applicable).
     */
    Stable: "stable",
} as const;

/**
 * Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).
 */
export type MaintenanceWindowUpdateTrack = (typeof MaintenanceWindowUpdateTrack)[keyof typeof MaintenanceWindowUpdateTrack];

export const PasswordValidationPolicyComplexity = {
    /**
     * Complexity check is not specified.
     */
    ComplexityUnspecified: "COMPLEXITY_UNSPECIFIED",
    /**
     * A combination of lowercase, uppercase, numeric, and non-alphanumeric characters.
     */
    ComplexityDefault: "COMPLEXITY_DEFAULT",
} as const;

/**
 * The complexity of the password.
 */
export type PasswordValidationPolicyComplexity = (typeof PasswordValidationPolicyComplexity)[keyof typeof PasswordValidationPolicyComplexity];

export const SettingsActivationPolicy = {
    /**
     * Unknown activation plan.
     */
    SqlActivationPolicyUnspecified: "SQL_ACTIVATION_POLICY_UNSPECIFIED",
    /**
     * The instance is always up and running.
     */
    Always: "ALWAYS",
    /**
     * The instance never starts.
     */
    Never: "NEVER",
    /**
     * The instance starts upon receiving requests.
     */
    OnDemand: "ON_DEMAND",
} as const;

/**
 * The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
 */
export type SettingsActivationPolicy = (typeof SettingsActivationPolicy)[keyof typeof SettingsActivationPolicy];

export const SettingsAvailabilityType = {
    /**
     * This is an unknown Availability type.
     */
    SqlAvailabilityTypeUnspecified: "SQL_AVAILABILITY_TYPE_UNSPECIFIED",
    /**
     * Zonal available instance.
     */
    Zonal: "ZONAL",
    /**
     * Regional available instance.
     */
    Regional: "REGIONAL",
} as const;

/**
 * Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
 */
export type SettingsAvailabilityType = (typeof SettingsAvailabilityType)[keyof typeof SettingsAvailabilityType];

export const SettingsDataDiskType = {
    /**
     * This is an unknown data disk type.
     */
    SqlDataDiskTypeUnspecified: "SQL_DATA_DISK_TYPE_UNSPECIFIED",
    /**
     * An SSD data disk.
     */
    PdSsd: "PD_SSD",
    /**
     * An HDD data disk.
     */
    PdHdd: "PD_HDD",
    /**
     * This field is deprecated and will be removed from a future version of the API.
     */
    ObsoleteLocalSsd: "OBSOLETE_LOCAL_SSD",
} as const;

/**
 * The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
 */
export type SettingsDataDiskType = (typeof SettingsDataDiskType)[keyof typeof SettingsDataDiskType];

export const SettingsPricingPlan = {
    /**
     * This is an unknown pricing plan for this instance.
     */
    SqlPricingPlanUnspecified: "SQL_PRICING_PLAN_UNSPECIFIED",
    /**
     * The instance is billed at a monthly flat rate.
     */
    Package: "PACKAGE",
    /**
     * The instance is billed per usage.
     */
    PerUse: "PER_USE",
} as const;

/**
 * The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
 */
export type SettingsPricingPlan = (typeof SettingsPricingPlan)[keyof typeof SettingsPricingPlan];

export const SettingsReplicationType = {
    /**
     * This is an unknown replication type for a Cloud SQL instance.
     */
    SqlReplicationTypeUnspecified: "SQL_REPLICATION_TYPE_UNSPECIFIED",
    /**
     * The synchronous replication mode for First Generation instances. It is the default value.
     */
    Synchronous: "SYNCHRONOUS",
    /**
     * The asynchronous replication mode for First Generation instances. It provides a slight performance gain, but if an outage occurs while this option is set to asynchronous, you can lose up to a few seconds of updates to your data.
     */
    Asynchronous: "ASYNCHRONOUS",
} as const;

/**
 * The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
 */
export type SettingsReplicationType = (typeof SettingsReplicationType)[keyof typeof SettingsReplicationType];

export const SqlOutOfDiskReportSqlOutOfDiskState = {
    /**
     * Unspecified state
     */
    SqlOutOfDiskStateUnspecified: "SQL_OUT_OF_DISK_STATE_UNSPECIFIED",
    /**
     * The instance has plenty space on data disk
     */
    Normal: "NORMAL",
    /**
     * Data disk is almost used up. It is shutdown to prevent data corruption.
     */
    SoftShutdown: "SOFT_SHUTDOWN",
} as const;

/**
 * This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job
 */
export type SqlOutOfDiskReportSqlOutOfDiskState = (typeof SqlOutOfDiskReportSqlOutOfDiskState)[keyof typeof SqlOutOfDiskReportSqlOutOfDiskState];
