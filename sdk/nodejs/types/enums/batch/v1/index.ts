// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const InstancePolicyProvisioningModel = {
    /**
     * Unspecified.
     */
    ProvisioningModelUnspecified: "PROVISIONING_MODEL_UNSPECIFIED",
    /**
     * Standard VM.
     */
    Standard: "STANDARD",
    /**
     * SPOT VM.
     */
    Spot: "SPOT",
    /**
     * Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported.
     */
    Preemptible: "PREEMPTIBLE",
} as const;

/**
 * The provisioning model.
 */
export type InstancePolicyProvisioningModel = (typeof InstancePolicyProvisioningModel)[keyof typeof InstancePolicyProvisioningModel];

export const LifecyclePolicyAction = {
    /**
     * Action unspecified.
     */
    ActionUnspecified: "ACTION_UNSPECIFIED",
    /**
     * Action that tasks in the group will be scheduled to re-execute.
     */
    RetryTask: "RETRY_TASK",
    /**
     * Action that tasks in the group will be stopped immediately.
     */
    FailTask: "FAIL_TASK",
} as const;

/**
 * Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found.
 */
export type LifecyclePolicyAction = (typeof LifecyclePolicyAction)[keyof typeof LifecyclePolicyAction];

export const LogsPolicyDestination = {
    /**
     * Logs are not preserved.
     */
    DestinationUnspecified: "DESTINATION_UNSPECIFIED",
    /**
     * Logs are streamed to Cloud Logging.
     */
    CloudLogging: "CLOUD_LOGGING",
    /**
     * Logs are saved to a file path.
     */
    Path: "PATH",
} as const;

/**
 * Where logs should be saved.
 */
export type LogsPolicyDestination = (typeof LogsPolicyDestination)[keyof typeof LogsPolicyDestination];

export const MessageNewJobState = {
    /**
     * Job state unspecified.
     */
    StateUnspecified: "STATE_UNSPECIFIED",
    /**
     * Job is admitted (validated and persisted) and waiting for resources.
     */
    Queued: "QUEUED",
    /**
     * Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.
     */
    Scheduled: "SCHEDULED",
    /**
     * Resource allocation has been successful. At least one Task in the Job is RUNNING.
     */
    Running: "RUNNING",
    /**
     * All Tasks in the Job have finished successfully.
     */
    Succeeded: "SUCCEEDED",
    /**
     * At least one Task in the Job has failed.
     */
    Failed: "FAILED",
    /**
     * The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up.
     */
    DeletionInProgress: "DELETION_IN_PROGRESS",
} as const;

/**
 * The new job state.
 */
export type MessageNewJobState = (typeof MessageNewJobState)[keyof typeof MessageNewJobState];

export const MessageNewTaskState = {
    /**
     * Unknown state.
     */
    StateUnspecified: "STATE_UNSPECIFIED",
    /**
     * The Task is created and waiting for resources.
     */
    Pending: "PENDING",
    /**
     * The Task is assigned to at least one VM.
     */
    Assigned: "ASSIGNED",
    /**
     * The Task is running.
     */
    Running: "RUNNING",
    /**
     * The Task has failed.
     */
    Failed: "FAILED",
    /**
     * The Task has succeeded.
     */
    Succeeded: "SUCCEEDED",
    /**
     * The Task has not been executed when the Job finishes.
     */
    Unexecuted: "UNEXECUTED",
} as const;

/**
 * The new task state.
 */
export type MessageNewTaskState = (typeof MessageNewTaskState)[keyof typeof MessageNewTaskState];

export const MessageType = {
    /**
     * Unspecified.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * Notify users that the job state has changed.
     */
    JobStateChanged: "JOB_STATE_CHANGED",
    /**
     * Notify users that the task state has changed.
     */
    TaskStateChanged: "TASK_STATE_CHANGED",
} as const;

/**
 * The message type.
 */
export type MessageType = (typeof MessageType)[keyof typeof MessageType];

export const TaskGroupSchedulingPolicy = {
    /**
     * Unspecified.
     */
    SchedulingPolicyUnspecified: "SCHEDULING_POLICY_UNSPECIFIED",
    /**
     * Run Tasks as soon as resources are available. Tasks might be executed in parallel depending on parallelism and task_count values.
     */
    AsSoonAsPossible: "AS_SOON_AS_POSSIBLE",
    /**
     * Run Tasks sequentially with increased task index.
     */
    InOrder: "IN_ORDER",
} as const;

/**
 * Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.
 */
export type TaskGroupSchedulingPolicy = (typeof TaskGroupSchedulingPolicy)[keyof typeof TaskGroupSchedulingPolicy];
