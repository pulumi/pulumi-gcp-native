// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const GoogleCloudRunV2EmptyDirVolumeSourceMedium = {
    /**
     * When not specified, falls back to the default implementation which is currently in memory (this may change over time).
     */
    MediumUnspecified: "MEDIUM_UNSPECIFIED",
    /**
     * Explicitly set the EmptyDir to be in memory. Uses tmpfs.
     */
    Memory: "MEMORY",
} as const;

/**
 * The medium on which the data is stored. Acceptable values today is only MEMORY or none. When none, the default will currently be backed by memory but could change over time. +optional
 */
export type GoogleCloudRunV2EmptyDirVolumeSourceMedium = (typeof GoogleCloudRunV2EmptyDirVolumeSourceMedium)[keyof typeof GoogleCloudRunV2EmptyDirVolumeSourceMedium];

export const GoogleCloudRunV2RevisionTemplateExecutionEnvironment = {
    /**
     * Unspecified
     */
    ExecutionEnvironmentUnspecified: "EXECUTION_ENVIRONMENT_UNSPECIFIED",
    /**
     * Uses the First Generation environment.
     */
    ExecutionEnvironmentGen1: "EXECUTION_ENVIRONMENT_GEN1",
    /**
     * Uses Second Generation environment.
     */
    ExecutionEnvironmentGen2: "EXECUTION_ENVIRONMENT_GEN2",
} as const;

/**
 * The sandbox environment to host this Revision.
 */
export type GoogleCloudRunV2RevisionTemplateExecutionEnvironment = (typeof GoogleCloudRunV2RevisionTemplateExecutionEnvironment)[keyof typeof GoogleCloudRunV2RevisionTemplateExecutionEnvironment];

export const GoogleCloudRunV2TaskTemplateExecutionEnvironment = {
    /**
     * Unspecified
     */
    ExecutionEnvironmentUnspecified: "EXECUTION_ENVIRONMENT_UNSPECIFIED",
    /**
     * Uses the First Generation environment.
     */
    ExecutionEnvironmentGen1: "EXECUTION_ENVIRONMENT_GEN1",
    /**
     * Uses Second Generation environment.
     */
    ExecutionEnvironmentGen2: "EXECUTION_ENVIRONMENT_GEN2",
} as const;

/**
 * The execution environment being used to host this Task.
 */
export type GoogleCloudRunV2TaskTemplateExecutionEnvironment = (typeof GoogleCloudRunV2TaskTemplateExecutionEnvironment)[keyof typeof GoogleCloudRunV2TaskTemplateExecutionEnvironment];

export const GoogleCloudRunV2TrafficTargetType = {
    /**
     * Unspecified instance allocation type.
     */
    TrafficTargetAllocationTypeUnspecified: "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED",
    /**
     * Allocates instances to the Service's latest ready Revision.
     */
    TrafficTargetAllocationTypeLatest: "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST",
    /**
     * Allocates instances to a Revision by name.
     */
    TrafficTargetAllocationTypeRevision: "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION",
} as const;

/**
 * The allocation type for this traffic target.
 */
export type GoogleCloudRunV2TrafficTargetType = (typeof GoogleCloudRunV2TrafficTargetType)[keyof typeof GoogleCloudRunV2TrafficTargetType];

export const GoogleCloudRunV2VpcAccessEgress = {
    /**
     * Unspecified
     */
    VpcEgressUnspecified: "VPC_EGRESS_UNSPECIFIED",
    /**
     * All outbound traffic is routed through the VPC connector.
     */
    AllTraffic: "ALL_TRAFFIC",
    /**
     * Only private IP ranges are routed through the VPC connector.
     */
    PrivateRangesOnly: "PRIVATE_RANGES_ONLY",
} as const;

/**
 * Traffic VPC egress settings.
 */
export type GoogleCloudRunV2VpcAccessEgress = (typeof GoogleCloudRunV2VpcAccessEgress)[keyof typeof GoogleCloudRunV2VpcAccessEgress];

export const GoogleIamV1AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type GoogleIamV1AuditLogConfigLogType = (typeof GoogleIamV1AuditLogConfigLogType)[keyof typeof GoogleIamV1AuditLogConfigLogType];

export const JobLaunchStage = {
    /**
     * Do not use this default value.
     */
    LaunchStageUnspecified: "LAUNCH_STAGE_UNSPECIFIED",
    /**
     * The feature is not yet implemented. Users can not use it.
     */
    Unimplemented: "UNIMPLEMENTED",
    /**
     * Prelaunch features are hidden from users and are only visible internally.
     */
    Prelaunch: "PRELAUNCH",
    /**
     * Early Access features are limited to a closed group of testers. To use these features, you must sign up in advance and sign a Trusted Tester agreement (which includes confidentiality provisions). These features may be unstable, changed in backward-incompatible ways, and are not guaranteed to be released.
     */
    EarlyAccess: "EARLY_ACCESS",
    /**
     * Alpha is a limited availability test for releases before they are cleared for widespread use. By Alpha, all significant design issues are resolved and we are in the process of verifying functionality. Alpha customers need to apply for access, agree to applicable terms, and have their projects allowlisted. Alpha releases don't have to be feature complete, no SLAs are provided, and there are no technical support obligations, but they will be far enough along that customers can actually use them in test environments or for limited-use tests -- just like they would in normal production cases.
     */
    Alpha: "ALPHA",
    /**
     * Beta is the point at which we are ready to open a release for any customer to use. There are no SLA or technical support obligations in a Beta release. Products will be complete from a feature perspective, but may have some open outstanding issues. Beta releases are suitable for limited production use cases.
     */
    Beta: "BETA",
    /**
     * GA features are open to all developers and are considered stable and fully qualified for production use.
     */
    Ga: "GA",
    /**
     * Deprecated features are scheduled to be shut down and removed. For more information, see the "Deprecation Policy" section of our [Terms of Service](https://cloud.google.com/terms/) and the [Google Cloud Platform Subject to the Deprecation Policy](https://cloud.google.com/terms/deprecation) documentation.
     */
    Deprecated: "DEPRECATED",
} as const;

/**
 * The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
 */
export type JobLaunchStage = (typeof JobLaunchStage)[keyof typeof JobLaunchStage];

export const ServiceIngress = {
    /**
     * Unspecified
     */
    IngressTrafficUnspecified: "INGRESS_TRAFFIC_UNSPECIFIED",
    /**
     * All inbound traffic is allowed.
     */
    IngressTrafficAll: "INGRESS_TRAFFIC_ALL",
    /**
     * Only internal traffic is allowed.
     */
    IngressTrafficInternalOnly: "INGRESS_TRAFFIC_INTERNAL_ONLY",
    /**
     * Both internal and Google Cloud Load Balancer traffic is allowed.
     */
    IngressTrafficInternalLoadBalancer: "INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER",
} as const;

/**
 * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
 */
export type ServiceIngress = (typeof ServiceIngress)[keyof typeof ServiceIngress];

export const ServiceLaunchStage = {
    /**
     * Do not use this default value.
     */
    LaunchStageUnspecified: "LAUNCH_STAGE_UNSPECIFIED",
    /**
     * The feature is not yet implemented. Users can not use it.
     */
    Unimplemented: "UNIMPLEMENTED",
    /**
     * Prelaunch features are hidden from users and are only visible internally.
     */
    Prelaunch: "PRELAUNCH",
    /**
     * Early Access features are limited to a closed group of testers. To use these features, you must sign up in advance and sign a Trusted Tester agreement (which includes confidentiality provisions). These features may be unstable, changed in backward-incompatible ways, and are not guaranteed to be released.
     */
    EarlyAccess: "EARLY_ACCESS",
    /**
     * Alpha is a limited availability test for releases before they are cleared for widespread use. By Alpha, all significant design issues are resolved and we are in the process of verifying functionality. Alpha customers need to apply for access, agree to applicable terms, and have their projects allowlisted. Alpha releases don't have to be feature complete, no SLAs are provided, and there are no technical support obligations, but they will be far enough along that customers can actually use them in test environments or for limited-use tests -- just like they would in normal production cases.
     */
    Alpha: "ALPHA",
    /**
     * Beta is the point at which we are ready to open a release for any customer to use. There are no SLA or technical support obligations in a Beta release. Products will be complete from a feature perspective, but may have some open outstanding issues. Beta releases are suitable for limited production use cases.
     */
    Beta: "BETA",
    /**
     * GA features are open to all developers and are considered stable and fully qualified for production use.
     */
    Ga: "GA",
    /**
     * Deprecated features are scheduled to be shut down and removed. For more information, see the "Deprecation Policy" section of our [Terms of Service](https://cloud.google.com/terms/) and the [Google Cloud Platform Subject to the Deprecation Policy](https://cloud.google.com/terms/deprecation) documentation.
     */
    Deprecated: "DEPRECATED",
} as const;

/**
 * The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
 */
export type ServiceLaunchStage = (typeof ServiceLaunchStage)[keyof typeof ServiceLaunchStage];
