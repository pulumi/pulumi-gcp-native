// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const InstanceProtocol = {
    /**
     * FILE_PROTOCOL_UNSPECIFIED serves a "not set" default value when a FileProtocol is a separate field in a message.
     */
    FileProtocolUnspecified: "FILE_PROTOCOL_UNSPECIFIED",
    /**
     * NFS 3.0.
     */
    NfsV3: "NFS_V3",
    /**
     * NFS 4.1.
     */
    NfsV41: "NFS_V4_1",
} as const;

/**
 * Immutable. The protocol indicates the access protocol for all shares in the instance. This field is immutable and it cannot be changed after the instance has been created. Default value: `NFS_V3`.
 */
export type InstanceProtocol = (typeof InstanceProtocol)[keyof typeof InstanceProtocol];

export const InstanceTier = {
    /**
     * Not set.
     */
    TierUnspecified: "TIER_UNSPECIFIED",
    /**
     * STANDARD tier. BASIC_HDD is the preferred term for this tier.
     */
    Standard: "STANDARD",
    /**
     * PREMIUM tier. BASIC_SSD is the preferred term for this tier.
     */
    Premium: "PREMIUM",
    /**
     * BASIC instances offer a maximum capacity of 63.9 TB. BASIC_HDD is an alias for STANDARD Tier, offering economical performance backed by HDD.
     */
    BasicHdd: "BASIC_HDD",
    /**
     * BASIC instances offer a maximum capacity of 63.9 TB. BASIC_SSD is an alias for PREMIUM Tier, and offers improved performance backed by SSD.
     */
    BasicSsd: "BASIC_SSD",
    /**
     * HIGH_SCALE instances offer expanded capacity and performance scaling capabilities.
     */
    HighScaleSsd: "HIGH_SCALE_SSD",
    /**
     * ENTERPRISE instances offer the features and availability needed for mission-critical workloads.
     */
    Enterprise: "ENTERPRISE",
    /**
     * ZONAL instances offer expanded capacity and performance scaling capabilities.
     */
    Zonal: "ZONAL",
} as const;

/**
 * The service tier of the instance.
 */
export type InstanceTier = (typeof InstanceTier)[keyof typeof InstanceTier];

export const NetworkConfigConnectMode = {
    /**
     * ConnectMode not set.
     */
    ConnectModeUnspecified: "CONNECT_MODE_UNSPECIFIED",
    /**
     * Connect via direct peering to the Filestore service.
     */
    DirectPeering: "DIRECT_PEERING",
    /**
     * Connect to your Filestore instance using Private Service Access. Private services access provides an IP address range for multiple Google Cloud services, including Filestore.
     */
    PrivateServiceAccess: "PRIVATE_SERVICE_ACCESS",
} as const;

/**
 * The network connect mode of the Filestore instance. If not provided, the connect mode defaults to DIRECT_PEERING.
 */
export type NetworkConfigConnectMode = (typeof NetworkConfigConnectMode)[keyof typeof NetworkConfigConnectMode];

export const NetworkConfigModesItem = {
    /**
     * Internet protocol not set.
     */
    AddressModeUnspecified: "ADDRESS_MODE_UNSPECIFIED",
    /**
     * Use the IPv4 internet protocol.
     */
    ModeIpv4: "MODE_IPV4",
} as const;

export type NetworkConfigModesItem = (typeof NetworkConfigModesItem)[keyof typeof NetworkConfigModesItem];

export const NfsExportOptionsAccessMode = {
    /**
     * AccessMode not set.
     */
    AccessModeUnspecified: "ACCESS_MODE_UNSPECIFIED",
    /**
     * The client can only read the file share.
     */
    ReadOnly: "READ_ONLY",
    /**
     * The client can read and write the file share (default).
     */
    ReadWrite: "READ_WRITE",
} as const;

/**
 * Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
 */
export type NfsExportOptionsAccessMode = (typeof NfsExportOptionsAccessMode)[keyof typeof NfsExportOptionsAccessMode];

export const NfsExportOptionsSecurityFlavorsItem = {
    /**
     * SecurityFlavor not set.
     */
    SecurityFlavorUnspecified: "SECURITY_FLAVOR_UNSPECIFIED",
    /**
     * The user's UNIX user-id and group-ids are transferred "in the clear" (not encrypted) on the network, unauthenticated by the NFS server (default).
     */
    AuthSys: "AUTH_SYS",
    /**
     * End-user authentication through Kerberos V5.
     */
    Krb5: "KRB5",
    /**
     * krb5 plus integrity protection (data packets are tamper proof).
     */
    Krb5i: "KRB5I",
    /**
     * krb5i plus privacy protection (data packets are tamper proof and encrypted).
     */
    Krb5p: "KRB5P",
} as const;

export type NfsExportOptionsSecurityFlavorsItem = (typeof NfsExportOptionsSecurityFlavorsItem)[keyof typeof NfsExportOptionsSecurityFlavorsItem];

export const NfsExportOptionsSquashMode = {
    /**
     * SquashMode not set.
     */
    SquashModeUnspecified: "SQUASH_MODE_UNSPECIFIED",
    /**
     * The Root user has root access to the file share (default).
     */
    NoRootSquash: "NO_ROOT_SQUASH",
    /**
     * The Root user has squashed access to the anonymous uid/gid.
     */
    RootSquash: "ROOT_SQUASH",
} as const;

/**
 * Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
 */
export type NfsExportOptionsSquashMode = (typeof NfsExportOptionsSquashMode)[keyof typeof NfsExportOptionsSquashMode];
