// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BasicPerfSampleSeriesPerfMetricType = {
    PerfMetricTypeUnspecified: "perfMetricTypeUnspecified",
    Memory: "memory",
    Cpu: "cpu",
    Network: "network",
    Graphics: "graphics",
} as const;

export type BasicPerfSampleSeriesPerfMetricType = (typeof BasicPerfSampleSeriesPerfMetricType)[keyof typeof BasicPerfSampleSeriesPerfMetricType];

export const BasicPerfSampleSeriesPerfUnit = {
    PerfUnitUnspecified: "perfUnitUnspecified",
    Kibibyte: "kibibyte",
    Percent: "percent",
    BytesPerSecond: "bytesPerSecond",
    FramesPerSecond: "framesPerSecond",
    Byte: "byte",
} as const;

export type BasicPerfSampleSeriesPerfUnit = (typeof BasicPerfSampleSeriesPerfUnit)[keyof typeof BasicPerfSampleSeriesPerfUnit];

export const BasicPerfSampleSeriesSampleSeriesLabel = {
    SampleSeriesTypeUnspecified: "sampleSeriesTypeUnspecified",
    /**
     * Memory sample series
     */
    MemoryRssPrivate: "memoryRssPrivate",
    MemoryRssShared: "memoryRssShared",
    MemoryRssTotal: "memoryRssTotal",
    MemoryTotal: "memoryTotal",
    /**
     * CPU sample series
     */
    CpuUser: "cpuUser",
    CpuKernel: "cpuKernel",
    CpuTotal: "cpuTotal",
    /**
     * Network sample series
     */
    NtBytesTransferred: "ntBytesTransferred",
    NtBytesReceived: "ntBytesReceived",
    NetworkSent: "networkSent",
    NetworkReceived: "networkReceived",
    /**
     * Graphics sample series
     */
    GraphicsFrameRate: "graphicsFrameRate",
} as const;

export type BasicPerfSampleSeriesSampleSeriesLabel = (typeof BasicPerfSampleSeriesSampleSeriesLabel)[keyof typeof BasicPerfSampleSeriesSampleSeriesLabel];

export const ExecutionState = {
    /**
     * Should never be in this state. Exists for proto deserialization backward compatibility.
     */
    UnknownState: "unknownState",
    /**
     * The Execution/Step is created, ready to run, but not running yet. If an Execution/Step is created without initial state, it is assumed that the Execution/Step is in PENDING state.
     */
    Pending: "pending",
    /**
     * The Execution/Step is in progress.
     */
    InProgress: "inProgress",
    /**
     * The finalized, immutable state. Steps/Executions in this state cannot be modified.
     */
    Complete: "complete",
} as const;

/**
 * The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
 */
export type ExecutionState = (typeof ExecutionState)[keyof typeof ExecutionState];

export const HistoryTestPlatform = {
    UnknownPlatform: "unknownPlatform",
    Android: "android",
    Ios: "ios",
} as const;

/**
 * The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
 */
export type HistoryTestPlatform = (typeof HistoryTestPlatform)[keyof typeof HistoryTestPlatform];

export const IndividualOutcomeOutcomeSummary = {
    /**
     * Do not use. For proto versioning only.
     */
    Unset: "unset",
    /**
     * The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
     */
    Success: "success",
    /**
     * A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
     */
    Failure: "failure",
    /**
     * Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
     */
    Inconclusive: "inconclusive",
    /**
     * All tests were skipped, for instance: - All device configurations were incompatible.
     */
    Skipped: "skipped",
    /**
     * A group of steps that were run with the same configuration had both failure and success outcomes.
     */
    Flaky: "flaky",
} as const;

export type IndividualOutcomeOutcomeSummary = (typeof IndividualOutcomeOutcomeSummary)[keyof typeof IndividualOutcomeOutcomeSummary];

export const OutcomeSummary = {
    /**
     * Do not use. For proto versioning only.
     */
    Unset: "unset",
    /**
     * The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
     */
    Success: "success",
    /**
     * A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
     */
    Failure: "failure",
    /**
     * Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
     */
    Inconclusive: "inconclusive",
    /**
     * All tests were skipped, for instance: - All device configurations were incompatible.
     */
    Skipped: "skipped",
    /**
     * A group of steps that were run with the same configuration had both failure and success outcomes.
     */
    Flaky: "flaky",
} as const;

/**
 * The simplest way to interpret a result. Required
 */
export type OutcomeSummary = (typeof OutcomeSummary)[keyof typeof OutcomeSummary];

export const PrimaryStepRollUp = {
    /**
     * Do not use. For proto versioning only.
     */
    Unset: "unset",
    /**
     * The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
     */
    Success: "success",
    /**
     * A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
     */
    Failure: "failure",
    /**
     * Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
     */
    Inconclusive: "inconclusive",
    /**
     * All tests were skipped, for instance: - All device configurations were incompatible.
     */
    Skipped: "skipped",
    /**
     * A group of steps that were run with the same configuration had both failure and success outcomes.
     */
    Flaky: "flaky",
} as const;

/**
 * Rollup test status of multiple steps that were run with the same configuration as a group.
 */
export type PrimaryStepRollUp = (typeof PrimaryStepRollUp)[keyof typeof PrimaryStepRollUp];

export const StepState = {
    /**
     * Should never be in this state. Exists for proto deserialization backward compatibility.
     */
    UnknownState: "unknownState",
    /**
     * The Execution/Step is created, ready to run, but not running yet. If an Execution/Step is created without initial state, it is assumed that the Execution/Step is in PENDING state.
     */
    Pending: "pending",
    /**
     * The Execution/Step is in progress.
     */
    InProgress: "inProgress",
    /**
     * The finalized, immutable state. Steps/Executions in this state cannot be modified.
     */
    Complete: "complete",
} as const;

/**
 * The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -> COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional
 */
export type StepState = (typeof StepState)[keyof typeof StepState];

export const TestIssueCategory = {
    /**
     * Default unspecified category. Do not use. For versioning only.
     */
    UnspecifiedCategory: "unspecifiedCategory",
    /**
     * Issue is not specific to a particular test kind (e.g., a native crash).
     */
    Common: "common",
    /**
     * Issue is specific to Robo run.
     */
    Robo: "robo",
} as const;

/**
 * Category of issue. Required.
 */
export type TestIssueCategory = (typeof TestIssueCategory)[keyof typeof TestIssueCategory];

export const TestIssueSeverity = {
    /**
     * Default unspecified severity. Do not use. For versioning only.
     */
    UnspecifiedSeverity: "unspecifiedSeverity",
    /**
     * Non critical issue, providing users with some info about the test run.
     */
    Info: "info",
    /**
     * Non critical issue, providing users with some hints on improving their testing experience, e.g., suggesting to use Game Loops.
     */
    Suggestion: "suggestion",
    /**
     * Potentially critical issue.
     */
    Warning: "warning",
    /**
     * Critical issue.
     */
    Severe: "severe",
} as const;

/**
 * Severity of issue. Required.
 */
export type TestIssueSeverity = (typeof TestIssueSeverity)[keyof typeof TestIssueSeverity];

export const TestIssueType = {
    /**
     * Default unspecified type. Do not use. For versioning only.
     */
    UnspecifiedType: "unspecifiedType",
    /**
     * Issue is a fatal exception.
     */
    FatalException: "fatalException",
    /**
     * Issue is a native crash.
     */
    NativeCrash: "nativeCrash",
    /**
     * Issue is an ANR crash.
     */
    Anr: "anr",
    /**
     * Issue is an unused robo directive.
     */
    UnusedRoboDirective: "unusedRoboDirective",
    /**
     * Issue is a suggestion to use orchestrator.
     */
    CompatibleWithOrchestrator: "compatibleWithOrchestrator",
    /**
     * Issue with finding a launcher activity
     */
    LauncherActivityNotFound: "launcherActivityNotFound",
    /**
     * Issue with resolving a user-provided intent to start an activity
     */
    StartActivityNotFound: "startActivityNotFound",
    /**
     * A Robo script was not fully executed.
     */
    IncompleteRoboScriptExecution: "incompleteRoboScriptExecution",
    /**
     * A Robo script was fully and successfully executed.
     */
    CompleteRoboScriptExecution: "completeRoboScriptExecution",
    /**
     * The APK failed to install.
     */
    FailedToInstall: "failedToInstall",
    /**
     * The app-under-test has deep links, but none were provided to Robo.
     */
    AvailableDeepLinks: "availableDeepLinks",
    /**
     * App accessed a non-sdk Api.
     */
    NonSdkApiUsageViolation: "nonSdkApiUsageViolation",
    /**
     * App accessed a non-sdk Api (new detailed report)
     */
    NonSdkApiUsageReport: "nonSdkApiUsageReport",
    /**
     * Robo crawl encountered at least one screen with elements that are not Android UI widgets.
     */
    EncounteredNonAndroidUiWidgetScreen: "encounteredNonAndroidUiWidgetScreen",
    /**
     * Robo crawl encountered at least one probable login screen.
     */
    EncounteredLoginScreen: "encounteredLoginScreen",
    /**
     * Robo signed in with Google.
     */
    PerformedGoogleLogin: "performedGoogleLogin",
    /**
     * iOS App crashed with an exception.
     */
    IosException: "iosException",
    /**
     * iOS App crashed without an exception (e.g. killed).
     */
    IosCrash: "iosCrash",
    /**
     * Robo crawl involved performing some monkey actions.
     */
    PerformedMonkeyActions: "performedMonkeyActions",
    /**
     * Robo crawl used a Robo directive.
     */
    UsedRoboDirective: "usedRoboDirective",
    /**
     * Robo crawl used a Robo directive to ignore an UI element.
     */
    UsedRoboIgnoreDirective: "usedRoboIgnoreDirective",
    /**
     * Robo did not crawl some potentially important parts of the app.
     */
    InsufficientCoverage: "insufficientCoverage",
    /**
     * Robo crawl involved some in-app purchases.
     */
    InAppPurchases: "inAppPurchases",
    /**
     * Crash dialog was detected during the test execution
     */
    CrashDialogError: "crashDialogError",
    /**
     * UI element depth is greater than the threshold
     */
    UiElementsTooDeep: "uiElementsTooDeep",
    /**
     * Blank screen is found in the Robo crawl
     */
    BlankScreen: "blankScreen",
    /**
     * Overlapping UI elements are found in the Robo crawl
     */
    OverlappingUiElements: "overlappingUiElements",
    /**
     * An uncaught Unity exception was detected (these don't crash apps).
     */
    UnityException: "unityException",
    /**
     * Device running out of memory was detected
     */
    DeviceOutOfMemory: "deviceOutOfMemory",
    /**
     * Problems detected while collecting logcat
     */
    LogcatCollectionError: "logcatCollectionError",
    /**
     * Robo detected a splash screen provided by app (vs. Android OS splash screen).
     */
    DetectedAppSplashScreen: "detectedAppSplashScreen",
} as const;

/**
 * Type of issue. Required.
 */
export type TestIssueType = (typeof TestIssueType)[keyof typeof TestIssueType];
