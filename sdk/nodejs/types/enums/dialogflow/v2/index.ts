// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ConversationConversationStage = {
    /**
     * Unknown. Should never be used after a conversation is successfully created.
     */
    ConversationStageUnspecified: "CONVERSATION_STAGE_UNSPECIFIED",
    /**
     * The conversation should return virtual agent responses into the conversation.
     */
    VirtualAgentStage: "VIRTUAL_AGENT_STAGE",
    /**
     * The conversation should not provide responses, just listen and provide suggestions.
     */
    HumanAssistStage: "HUMAN_ASSIST_STAGE",
} as const;

/**
 * The stage of a conversation. It indicates whether the virtual agent or a human agent is handling the conversation. If the conversation is created with the conversation profile that has Dialogflow config set, defaults to ConversationStage.VIRTUAL_AGENT_STAGE; Otherwise, defaults to ConversationStage.HUMAN_ASSIST_STAGE. If the conversation is created with the conversation profile that has Dialogflow config set but explicitly sets conversation_stage to ConversationStage.HUMAN_ASSIST_STAGE, it skips ConversationStage.VIRTUAL_AGENT_STAGE stage and directly goes to ConversationStage.HUMAN_ASSIST_STAGE.
 */
export type ConversationConversationStage = (typeof ConversationConversationStage)[keyof typeof ConversationConversationStage];

export const DocumentKnowledgeTypesItem = {
    /**
     * The type is unspecified or arbitrary.
     */
    KnowledgeTypeUnspecified: "KNOWLEDGE_TYPE_UNSPECIFIED",
    /**
     * The document content contains question and answer pairs as either HTML or CSV. Typical FAQ HTML formats are parsed accurately, but unusual formats may fail to be parsed. CSV must have questions in the first column and answers in the second, with no header. Because of this explicit format, they are always parsed accurately.
     */
    Faq: "FAQ",
    /**
     * Documents for which unstructured text is extracted and used for question answering.
     */
    ExtractiveQa: "EXTRACTIVE_QA",
    /**
     * The entire document content as a whole can be used for query results. Only for Contact Center Solutions on Dialogflow.
     */
    ArticleSuggestion: "ARTICLE_SUGGESTION",
    /**
     * The document contains agent-facing Smart Reply entries.
     */
    AgentFacingSmartReply: "AGENT_FACING_SMART_REPLY",
} as const;

export type DocumentKnowledgeTypesItem = (typeof DocumentKnowledgeTypesItem)[keyof typeof DocumentKnowledgeTypesItem];

export const EntityTypeAutoExpansionMode = {
    /**
     * Auto expansion disabled for the entity.
     */
    AutoExpansionModeUnspecified: "AUTO_EXPANSION_MODE_UNSPECIFIED",
    /**
     * Allows an agent to recognize values that have not been explicitly listed in the entity.
     */
    AutoExpansionModeDefault: "AUTO_EXPANSION_MODE_DEFAULT",
} as const;

/**
 * Optional. Indicates whether the entity type can be automatically expanded.
 */
export type EntityTypeAutoExpansionMode = (typeof EntityTypeAutoExpansionMode)[keyof typeof EntityTypeAutoExpansionMode];

export const EntityTypeKind = {
    /**
     * Not specified. This value should be never used.
     */
    KindUnspecified: "KIND_UNSPECIFIED",
    /**
     * Map entity types allow mapping of a group of synonyms to a reference value.
     */
    KindMap: "KIND_MAP",
    /**
     * List entity types contain a set of entries that do not map to reference values. However, list entity types can contain references to other entity types (with or without aliases).
     */
    KindList: "KIND_LIST",
    /**
     * Regexp entity types allow to specify regular expressions in entries values.
     */
    KindRegexp: "KIND_REGEXP",
} as const;

/**
 * Required. Indicates the kind of entity type.
 */
export type EntityTypeKind = (typeof EntityTypeKind)[keyof typeof EntityTypeKind];

export const GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType = {
    /**
     * ModelType unspecified.
     */
    ModelTypeUnspecified: "MODEL_TYPE_UNSPECIFIED",
    /**
     * ModelType smart reply dual encoder model.
     */
    SmartReplyDualEncoderModel: "SMART_REPLY_DUAL_ENCODER_MODEL",
    /**
     * ModelType smart reply bert model.
     */
    SmartReplyBertModel: "SMART_REPLY_BERT_MODEL",
} as const;

/**
 * Optional. Type of the article suggestion model. If not provided, model_type is used.
 */
export type GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType = (typeof GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType)[keyof typeof GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType];

export const GoogleCloudDialogflowV2FulfillmentFeatureType = {
    /**
     * Feature type not specified.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * Fulfillment is enabled for SmallTalk.
     */
    Smalltalk: "SMALLTALK",
} as const;

/**
 * The type of the feature that enabled for fulfillment.
 */
export type GoogleCloudDialogflowV2FulfillmentFeatureType = (typeof GoogleCloudDialogflowV2FulfillmentFeatureType)[keyof typeof GoogleCloudDialogflowV2FulfillmentFeatureType];

export const GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint = {
    /**
     * Unspecified
     */
    UrlTypeHintUnspecified: "URL_TYPE_HINT_UNSPECIFIED",
    /**
     * Url would be an amp action
     */
    AmpAction: "AMP_ACTION",
    /**
     * URL that points directly to AMP content, or to a canonical URL which refers to AMP content via .
     */
    AmpContent: "AMP_CONTENT",
} as const;

/**
 * Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser.
 */
export type GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint = (typeof GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint)[keyof typeof GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint];

export const GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions = {
    /**
     * Fill the gaps between the image and the image container with gray bars.
     */
    ImageDisplayOptionsUnspecified: "IMAGE_DISPLAY_OPTIONS_UNSPECIFIED",
    /**
     * Fill the gaps between the image and the image container with gray bars.
     */
    Gray: "GRAY",
    /**
     * Fill the gaps between the image and the image container with white bars.
     */
    White: "WHITE",
    /**
     * Image is scaled such that the image width and height match or exceed the container dimensions. This may crop the top and bottom of the image if the scaled image height is greater than the container height, or crop the left and right of the image if the scaled image width is greater than the container width. This is similar to "Zoom Mode" on a widescreen TV when playing a 4:3 video.
     */
    Cropped: "CROPPED",
    /**
     * Pad the gaps between image and image frame with a blurred copy of the same image.
     */
    BlurredBackground: "BLURRED_BACKGROUND",
} as const;

/**
 * Optional. Settings for displaying the image. Applies to every image in items.
 */
export type GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions = (typeof GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions)[keyof typeof GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions];

export const GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment = {
    /**
     * Text is aligned to the leading edge of the column.
     */
    HorizontalAlignmentUnspecified: "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
    /**
     * Text is aligned to the leading edge of the column.
     */
    Leading: "LEADING",
    /**
     * Text is centered in the column.
     */
    Center: "CENTER",
    /**
     * Text is aligned to the trailing edge of the column.
     */
    Trailing: "TRAILING",
} as const;

/**
 * Optional. Defines text alignment for all cells in this column.
 */
export type GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment = (typeof GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment)[keyof typeof GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment];

export const GoogleCloudDialogflowV2IntentMessageMediaContentMediaType = {
    /**
     * Unspecified.
     */
    ResponseMediaTypeUnspecified: "RESPONSE_MEDIA_TYPE_UNSPECIFIED",
    /**
     * Response media type is audio.
     */
    Audio: "AUDIO",
} as const;

/**
 * Optional. What type of media is the content (ie "audio").
 */
export type GoogleCloudDialogflowV2IntentMessageMediaContentMediaType = (typeof GoogleCloudDialogflowV2IntentMessageMediaContentMediaType)[keyof typeof GoogleCloudDialogflowV2IntentMessageMediaContentMediaType];

export const GoogleCloudDialogflowV2IntentMessagePlatform = {
    /**
     * Default platform.
     */
    PlatformUnspecified: "PLATFORM_UNSPECIFIED",
    /**
     * Facebook.
     */
    Facebook: "FACEBOOK",
    /**
     * Slack.
     */
    Slack: "SLACK",
    /**
     * Telegram.
     */
    Telegram: "TELEGRAM",
    /**
     * Kik.
     */
    Kik: "KIK",
    /**
     * Skype.
     */
    Skype: "SKYPE",
    /**
     * Line.
     */
    Line: "LINE",
    /**
     * Viber.
     */
    Viber: "VIBER",
    /**
     * Google Assistant See [Dialogflow webhook format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json)
     */
    ActionsOnGoogle: "ACTIONS_ON_GOOGLE",
    /**
     * Google Hangouts.
     */
    GoogleHangouts: "GOOGLE_HANGOUTS",
} as const;

/**
 * Optional. The platform that this message is intended for.
 */
export type GoogleCloudDialogflowV2IntentMessagePlatform = (typeof GoogleCloudDialogflowV2IntentMessagePlatform)[keyof typeof GoogleCloudDialogflowV2IntentMessagePlatform];

export const GoogleCloudDialogflowV2IntentTrainingPhraseType = {
    /**
     * Not specified. This value should never be used.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * Examples do not contain @-prefixed entity type names, but example parts can be annotated with entity types.
     */
    Example: "EXAMPLE",
    /**
     * Templates are not annotated with entity types, but they can contain @-prefixed entity type names as substrings. Template mode has been deprecated. Example mode is the only supported way to create new training phrases. If you have existing training phrases that you've created in template mode, those will continue to work.
     */
    Template: "TEMPLATE",
} as const;

/**
 * Required. The type of the training phrase.
 */
export type GoogleCloudDialogflowV2IntentTrainingPhraseType = (typeof GoogleCloudDialogflowV2IntentTrainingPhraseType)[keyof typeof GoogleCloudDialogflowV2IntentTrainingPhraseType];

export const GoogleCloudDialogflowV2NotificationConfigMessageFormat = {
    /**
     * If it is unspecified, PROTO will be used.
     */
    MessageFormatUnspecified: "MESSAGE_FORMAT_UNSPECIFIED",
    /**
     * Pub/Sub message will be serialized proto.
     */
    Proto: "PROTO",
    /**
     * Pub/Sub message will be json.
     */
    Json: "JSON",
} as const;

/**
 * Format of message.
 */
export type GoogleCloudDialogflowV2NotificationConfigMessageFormat = (typeof GoogleCloudDialogflowV2NotificationConfigMessageFormat)[keyof typeof GoogleCloudDialogflowV2NotificationConfigMessageFormat];

export const GoogleCloudDialogflowV2SmartReplyModelMetadataTrainingModelType = {
    /**
     * ModelType unspecified.
     */
    ModelTypeUnspecified: "MODEL_TYPE_UNSPECIFIED",
    /**
     * ModelType smart reply dual encoder model.
     */
    SmartReplyDualEncoderModel: "SMART_REPLY_DUAL_ENCODER_MODEL",
    /**
     * ModelType smart reply bert model.
     */
    SmartReplyBertModel: "SMART_REPLY_BERT_MODEL",
} as const;

/**
 * Optional. Type of the smart reply model. If not provided, model_type is used.
 */
export type GoogleCloudDialogflowV2SmartReplyModelMetadataTrainingModelType = (typeof GoogleCloudDialogflowV2SmartReplyModelMetadataTrainingModelType)[keyof typeof GoogleCloudDialogflowV2SmartReplyModelMetadataTrainingModelType];

export const GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariant = {
    /**
     * No model variant specified. In this case Dialogflow defaults to USE_BEST_AVAILABLE.
     */
    SpeechModelVariantUnspecified: "SPEECH_MODEL_VARIANT_UNSPECIFIED",
    /**
     * Use the best available variant of the Speech model that the caller is eligible for. Please see the [Dialogflow docs](https://cloud.google.com/dialogflow/docs/data-logging) for how to make your project eligible for enhanced models.
     */
    UseBestAvailable: "USE_BEST_AVAILABLE",
    /**
     * Use standard model variant even if an enhanced model is available. See the [Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/enhanced-models) for details about enhanced models.
     */
    UseStandard: "USE_STANDARD",
    /**
     * Use an enhanced model variant: * If an enhanced variant does not exist for the given model and request language, Dialogflow falls back to the standard variant. The [Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/enhanced-models) describes which models have enhanced variants. * If the API caller isn't eligible for enhanced models, Dialogflow returns an error. Please see the [Dialogflow docs](https://cloud.google.com/dialogflow/docs/data-logging) for how to make your project eligible.
     */
    UseEnhanced: "USE_ENHANCED",
} as const;

/**
 * The speech model used in speech to text. `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE` will be treated as `USE_ENHANCED`. It can be overridden in AnalyzeContentRequest and StreamingAnalyzeContentRequest request. If enhanced model variant is specified and an enhanced version of the specified model for the language does not exist, then it would emit an error.
 */
export type GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariant = (typeof GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariant)[keyof typeof GoogleCloudDialogflowV2SpeechToTextConfigSpeechModelVariant];

export const GoogleCloudDialogflowV2SuggestionFeatureType = {
    /**
     * Unspecified feature type.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * Run article suggestion model.
     */
    ArticleSuggestion: "ARTICLE_SUGGESTION",
    /**
     * Run FAQ model.
     */
    Faq: "FAQ",
    /**
     * Run smart reply model.
     */
    SmartReply: "SMART_REPLY",
} as const;

/**
 * Type of Human Agent Assistant API feature to request.
 */
export type GoogleCloudDialogflowV2SuggestionFeatureType = (typeof GoogleCloudDialogflowV2SuggestionFeatureType)[keyof typeof GoogleCloudDialogflowV2SuggestionFeatureType];

export const GoogleCloudDialogflowV2TextToSpeechSettingsOutputAudioEncoding = {
    /**
     * Not specified.
     */
    OutputAudioEncodingUnspecified: "OUTPUT_AUDIO_ENCODING_UNSPECIFIED",
    /**
     * Uncompressed 16-bit signed little-endian samples (Linear PCM). Audio content returned as LINEAR16 also contains a WAV header.
     */
    OutputAudioEncodingLinear16: "OUTPUT_AUDIO_ENCODING_LINEAR_16",
    /**
     * MP3 audio at 32kbps.
     */
    OutputAudioEncodingMp3: "OUTPUT_AUDIO_ENCODING_MP3",
    /**
     * MP3 audio at 64kbps.
     */
    OutputAudioEncodingMp364Kbps: "OUTPUT_AUDIO_ENCODING_MP3_64_KBPS",
    /**
     * Opus encoded audio wrapped in an ogg container. The result will be a file which can be played natively on Android, and in browsers (at least Chrome and Firefox). The quality of the encoding is considerably higher than MP3 while using approximately the same bitrate.
     */
    OutputAudioEncodingOggOpus: "OUTPUT_AUDIO_ENCODING_OGG_OPUS",
    /**
     * 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
     */
    OutputAudioEncodingMulaw: "OUTPUT_AUDIO_ENCODING_MULAW",
} as const;

/**
 * Required. Audio encoding of the synthesized audio content.
 */
export type GoogleCloudDialogflowV2TextToSpeechSettingsOutputAudioEncoding = (typeof GoogleCloudDialogflowV2TextToSpeechSettingsOutputAudioEncoding)[keyof typeof GoogleCloudDialogflowV2TextToSpeechSettingsOutputAudioEncoding];

export const IntentDefaultResponsePlatformsItem = {
    /**
     * Default platform.
     */
    PlatformUnspecified: "PLATFORM_UNSPECIFIED",
    /**
     * Facebook.
     */
    Facebook: "FACEBOOK",
    /**
     * Slack.
     */
    Slack: "SLACK",
    /**
     * Telegram.
     */
    Telegram: "TELEGRAM",
    /**
     * Kik.
     */
    Kik: "KIK",
    /**
     * Skype.
     */
    Skype: "SKYPE",
    /**
     * Line.
     */
    Line: "LINE",
    /**
     * Viber.
     */
    Viber: "VIBER",
    /**
     * Google Assistant See [Dialogflow webhook format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json)
     */
    ActionsOnGoogle: "ACTIONS_ON_GOOGLE",
    /**
     * Google Hangouts.
     */
    GoogleHangouts: "GOOGLE_HANGOUTS",
} as const;

export type IntentDefaultResponsePlatformsItem = (typeof IntentDefaultResponsePlatformsItem)[keyof typeof IntentDefaultResponsePlatformsItem];

export const IntentWebhookState = {
    /**
     * Webhook is disabled in the agent and in the intent.
     */
    WebhookStateUnspecified: "WEBHOOK_STATE_UNSPECIFIED",
    /**
     * Webhook is enabled in the agent and in the intent.
     */
    WebhookStateEnabled: "WEBHOOK_STATE_ENABLED",
    /**
     * Webhook is enabled in the agent and in the intent. Also, each slot filling prompt is forwarded to the webhook.
     */
    WebhookStateEnabledForSlotFilling: "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING",
} as const;

/**
 * Optional. Indicates whether webhooks are enabled for the intent.
 */
export type IntentWebhookState = (typeof IntentWebhookState)[keyof typeof IntentWebhookState];

export const ParticipantRole = {
    /**
     * Participant role not set.
     */
    RoleUnspecified: "ROLE_UNSPECIFIED",
    /**
     * Participant is a human agent.
     */
    HumanAgent: "HUMAN_AGENT",
    /**
     * Participant is an automated agent, such as a Dialogflow agent.
     */
    AutomatedAgent: "AUTOMATED_AGENT",
    /**
     * Participant is an end user that has called or chatted with Dialogflow services.
     */
    EndUser: "END_USER",
} as const;

/**
 * Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
 */
export type ParticipantRole = (typeof ParticipantRole)[keyof typeof ParticipantRole];

export const SessionEntityTypeEntityOverrideMode = {
    /**
     * Not specified. This value should be never used.
     */
    EntityOverrideModeUnspecified: "ENTITY_OVERRIDE_MODE_UNSPECIFIED",
    /**
     * The collection of session entities overrides the collection of entities in the corresponding custom entity type.
     */
    EntityOverrideModeOverride: "ENTITY_OVERRIDE_MODE_OVERRIDE",
    /**
     * The collection of session entities extends the collection of entities in the corresponding custom entity type. Note: Even in this override mode calls to `ListSessionEntityTypes`, `GetSessionEntityType`, `CreateSessionEntityType` and `UpdateSessionEntityType` only return the additional entities added in this session entity type. If you want to get the supplemented list, please call EntityTypes.GetEntityType on the custom entity type and merge.
     */
    EntityOverrideModeSupplement: "ENTITY_OVERRIDE_MODE_SUPPLEMENT",
} as const;

/**
 * Required. Indicates whether the additional data should override or supplement the custom entity type definition.
 */
export type SessionEntityTypeEntityOverrideMode = (typeof SessionEntityTypeEntityOverrideMode)[keyof typeof SessionEntityTypeEntityOverrideMode];
