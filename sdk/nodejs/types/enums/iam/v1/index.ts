// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type AuditLogConfigLogType = (typeof AuditLogConfigLogType)[keyof typeof AuditLogConfigLogType];

export const GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehavior = {
    /**
     * No assertion claims behavior specified.
     */
    AssertionClaimsBehaviorUnspecified: "ASSERTION_CLAIMS_BEHAVIOR_UNSPECIFIED",
    /**
     * Merge the UserInfo Endpoint Claims with ID Token Claims, preferring UserInfo Claim Values for the same Claim Name. This option is available only for the Authorization Code Flow.
     */
    MergeUserInfoOverIdTokenClaims: "MERGE_USER_INFO_OVER_ID_TOKEN_CLAIMS",
    /**
     * Only include ID Token Claims.
     */
    OnlyIdTokenClaims: "ONLY_ID_TOKEN_CLAIMS",
} as const;

/**
 * Required. The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
 */
export type GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehavior = (typeof GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehavior)[keyof typeof GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehavior];

export const GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseType = {
    /**
     * No Response Type specified.
     */
    ResponseTypeUnspecified: "RESPONSE_TYPE_UNSPECIFIED",
    /**
     * The `response_type=code` selection uses the Authorization Code Flow for web sign-in. Requires a configured client secret.
     */
    Code: "CODE",
    /**
     * The `response_type=id_token` selection uses the Implicit Flow for web sign-in.
     */
    IdToken: "ID_TOKEN",
} as const;

/**
 * Required. The Response Type to request for in the OIDC Authorization Request for web sign-in. The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
 */
export type GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseType = (typeof GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseType)[keyof typeof GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseType];

export const KeyDataKeySpec = {
    /**
     * No key specification specified.
     */
    KeySpecUnspecified: "KEY_SPEC_UNSPECIFIED",
    /**
     * A 2048 bit RSA key.
     */
    Rsa2048: "RSA_2048",
    /**
     * A 3072 bit RSA key.
     */
    Rsa3072: "RSA_3072",
    /**
     * A 4096 bit RSA key.
     */
    Rsa4096: "RSA_4096",
} as const;

/**
 * Required. The specifications for the key.
 */
export type KeyDataKeySpec = (typeof KeyDataKeySpec)[keyof typeof KeyDataKeySpec];

export const KeyKeyAlgorithm = {
    /**
     * An unspecified key algorithm.
     */
    KeyAlgUnspecified: "KEY_ALG_UNSPECIFIED",
    /**
     * 1k RSA Key.
     */
    KeyAlgRsa1024: "KEY_ALG_RSA_1024",
    /**
     * 2k RSA Key.
     */
    KeyAlgRsa2048: "KEY_ALG_RSA_2048",
} as const;

/**
 * Which type of key and algorithm to use for the key. The default is currently a 2K RSA key. However this may change in the future.
 */
export type KeyKeyAlgorithm = (typeof KeyKeyAlgorithm)[keyof typeof KeyKeyAlgorithm];

export const KeyPrivateKeyType = {
    /**
     * Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * PKCS12 format. The password for the PKCS12 file is `notasecret`. For more information, see https://tools.ietf.org/html/rfc7292.
     */
    TypePkcs12File: "TYPE_PKCS12_FILE",
    /**
     * Google Credentials File format.
     */
    TypeGoogleCredentialsFile: "TYPE_GOOGLE_CREDENTIALS_FILE",
} as const;

/**
 * The output format of the private key. The default value is `TYPE_GOOGLE_CREDENTIALS_FILE`, which is the Google Credentials File format.
 */
export type KeyPrivateKeyType = (typeof KeyPrivateKeyType)[keyof typeof KeyPrivateKeyType];

export const OrganizationRoleStage = {
    /**
     * The user has indicated this role is currently in an Alpha phase. If this launch stage is selected, the `stage` field will not be included when requesting the definition for a given role.
     */
    Alpha: "ALPHA",
    /**
     * The user has indicated this role is currently in a Beta phase.
     */
    Beta: "BETA",
    /**
     * The user has indicated this role is generally available.
     */
    Ga: "GA",
    /**
     * The user has indicated this role is being deprecated.
     */
    Deprecated: "DEPRECATED",
    /**
     * This role is disabled and will not contribute permissions to any principals it is granted to in policies.
     */
    Disabled: "DISABLED",
    /**
     * The user has indicated this role is currently in an EAP phase.
     */
    Eap: "EAP",
} as const;

/**
 * The current launch stage of the role. If the `ALPHA` launch stage has been selected for a role, the `stage` field will not be included in the returned definition for the role.
 */
export type OrganizationRoleStage = (typeof OrganizationRoleStage)[keyof typeof OrganizationRoleStage];

export const RoleStage = {
    /**
     * The user has indicated this role is currently in an Alpha phase. If this launch stage is selected, the `stage` field will not be included when requesting the definition for a given role.
     */
    Alpha: "ALPHA",
    /**
     * The user has indicated this role is currently in a Beta phase.
     */
    Beta: "BETA",
    /**
     * The user has indicated this role is generally available.
     */
    Ga: "GA",
    /**
     * The user has indicated this role is being deprecated.
     */
    Deprecated: "DEPRECATED",
    /**
     * This role is disabled and will not contribute permissions to any principals it is granted to in policies.
     */
    Disabled: "DISABLED",
    /**
     * The user has indicated this role is currently in an EAP phase.
     */
    Eap: "EAP",
} as const;

/**
 * The current launch stage of the role. If the `ALPHA` launch stage has been selected for a role, the `stage` field will not be included in the returned definition for the role.
 */
export type RoleStage = (typeof RoleStage)[keyof typeof RoleStage];

export const WorkforcePoolKeyUse = {
    /**
     * KeyUse unspecified.
     */
    KeyUseUnspecified: "KEY_USE_UNSPECIFIED",
    /**
     * The key is used for encryption.
     */
    Encryption: "ENCRYPTION",
} as const;

/**
 * Required. The purpose of the key.
 */
export type WorkforcePoolKeyUse = (typeof WorkforcePoolKeyUse)[keyof typeof WorkforcePoolKeyUse];

export const WorkloadIdentityPoolKeyUse = {
    /**
     * The key use is not known.
     */
    KeyUseUnspecified: "KEY_USE_UNSPECIFIED",
    /**
     * The public key is used for encryption purposes.
     */
    Encryption: "ENCRYPTION",
} as const;

/**
 * Required. The purpose of the key.
 */
export type WorkloadIdentityPoolKeyUse = (typeof WorkloadIdentityPoolKeyUse)[keyof typeof WorkloadIdentityPoolKeyUse];
