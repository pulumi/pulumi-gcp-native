// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BuildSignatureKeyType = {
    /**
     * `KeyType` is not set.
     */
    KeyTypeUnspecified: "KEY_TYPE_UNSPECIFIED",
    /**
     * `PGP ASCII Armored` public key.
     */
    PgpAsciiArmored: "PGP_ASCII_ARMORED",
    /**
     * `PKIX PEM` public key.
     */
    PkixPem: "PKIX_PEM",
} as const;

/**
 * The type of the key, either stored in `public_key` or referenced in `key_id`
 */
export type BuildSignatureKeyType = (typeof BuildSignatureKeyType)[keyof typeof BuildSignatureKeyType];

export const CisBenchmarkSeverity = {
    /**
     * Unknown Impact
     */
    SeverityUnspecified: "SEVERITY_UNSPECIFIED",
    /**
     * Minimal Impact
     */
    Minimal: "MINIMAL",
    /**
     * Low Impact
     */
    Low: "LOW",
    /**
     * Medium Impact
     */
    Medium: "MEDIUM",
    /**
     * High Impact
     */
    High: "HIGH",
    /**
     * Critical Impact
     */
    Critical: "CRITICAL",
} as const;

/**
 * The severity level of this CIS benchmark check.
 */
export type CisBenchmarkSeverity = (typeof CisBenchmarkSeverity)[keyof typeof CisBenchmarkSeverity];

export const DeploymentPlatform = {
    /**
     * Unknown
     */
    PlatformUnspecified: "PLATFORM_UNSPECIFIED",
    /**
     * Google Container Engine
     */
    Gke: "GKE",
    /**
     * Google App Engine: Flexible Environment
     */
    Flex: "FLEX",
    /**
     * Custom user-defined platform
     */
    Custom: "CUSTOM",
} as const;

/**
 * Platform hosting this deployment.
 */
export type DeploymentPlatform = (typeof DeploymentPlatform)[keyof typeof DeploymentPlatform];

export const DiscoveredAnalysisStatus = {
    /**
     * Unknown
     */
    AnalysisStatusUnspecified: "ANALYSIS_STATUS_UNSPECIFIED",
    /**
     * Resource is known but no action has been taken yet.
     */
    Pending: "PENDING",
    /**
     * Resource is being analyzed.
     */
    Scanning: "SCANNING",
    /**
     * Analysis has finished successfully.
     */
    FinishedSuccess: "FINISHED_SUCCESS",
    /**
     * Analysis has finished unsuccessfully, the analysis itself is in a bad state.
     */
    FinishedFailed: "FINISHED_FAILED",
    /**
     * The resource is known not to be supported.
     */
    FinishedUnsupported: "FINISHED_UNSUPPORTED",
} as const;

/**
 * The status of discovery for the resource.
 */
export type DiscoveredAnalysisStatus = (typeof DiscoveredAnalysisStatus)[keyof typeof DiscoveredAnalysisStatus];

export const DiscoveredContinuousAnalysis = {
    /**
     * Unknown
     */
    ContinuousAnalysisUnspecified: "CONTINUOUS_ANALYSIS_UNSPECIFIED",
    /**
     * The resource is continuously analyzed.
     */
    Active: "ACTIVE",
    /**
     * The resource is ignored for continuous analysis.
     */
    Inactive: "INACTIVE",
} as const;

/**
 * Whether the resource is continuously analyzed.
 */
export type DiscoveredContinuousAnalysis = (typeof DiscoveredContinuousAnalysis)[keyof typeof DiscoveredContinuousAnalysis];

export const DiscoveryAnalysisKind = {
    /**
     * Unknown
     */
    KindUnspecified: "KIND_UNSPECIFIED",
    /**
     * The note and occurrence represent a package vulnerability.
     */
    PackageVulnerability: "PACKAGE_VULNERABILITY",
    /**
     * The note and occurrence assert build provenance.
     */
    BuildDetails: "BUILD_DETAILS",
    /**
     * This represents an image basis relationship.
     */
    ImageBasis: "IMAGE_BASIS",
    /**
     * This represents a package installed via a package manager.
     */
    PackageManager: "PACKAGE_MANAGER",
    /**
     * The note and occurrence track deployment events.
     */
    Deployable: "DEPLOYABLE",
    /**
     * The note and occurrence track the initial discovery status of a resource.
     */
    Discovery: "DISCOVERY",
    /**
     * This represents a logical "role" that can attest to artifacts.
     */
    AttestationAuthority: "ATTESTATION_AUTHORITY",
    /**
     * This represents an available software upgrade.
     */
    Upgrade: "UPGRADE",
    /**
     * This represents a compliance check that can be applied to a resource.
     */
    Compliance: "COMPLIANCE",
} as const;

/**
 * The kind of analysis that is handled by this discovery.
 */
export type DiscoveryAnalysisKind = (typeof DiscoveryAnalysisKind)[keyof typeof DiscoveryAnalysisKind];

export const DistributionArchitecture = {
    /**
     * Unknown architecture
     */
    ArchitectureUnspecified: "ARCHITECTURE_UNSPECIFIED",
    /**
     * X86 architecture
     */
    X86: "X86",
    /**
     * X64 architecture
     */
    X64: "X64",
} as const;

/**
 * The CPU architecture for which packages in this distribution channel were built
 */
export type DistributionArchitecture = (typeof DistributionArchitecture)[keyof typeof DistributionArchitecture];

export const GoogleDevtoolsContaineranalysisV1alpha1AliasContextKind = {
    /**
     * Unknown.
     */
    KindUnspecified: "KIND_UNSPECIFIED",
    /**
     * Git tag.
     */
    Fixed: "FIXED",
    /**
     * Git branch.
     */
    Movable: "MOVABLE",
    /**
     * Used to specify non-standard aliases. For example, if a Git repo has a ref named "refs/foo/bar".
     */
    Other: "OTHER",
} as const;

/**
 * The alias kind.
 */
export type GoogleDevtoolsContaineranalysisV1alpha1AliasContextKind = (typeof GoogleDevtoolsContaineranalysisV1alpha1AliasContextKind)[keyof typeof GoogleDevtoolsContaineranalysisV1alpha1AliasContextKind];

export const HashType = {
    /**
     * No hash requested.
     */
    None: "NONE",
    /**
     * A sha256 hash.
     */
    Sha256: "SHA256",
} as const;

/**
 * The type of hash that was performed.
 */
export type HashType = (typeof HashType)[keyof typeof HashType];

export const LayerDirective = {
    /**
     * Default value for unsupported/missing directive
     */
    DirectiveUnspecified: "DIRECTIVE_UNSPECIFIED",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Maintainer: "MAINTAINER",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Run: "RUN",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Cmd: "CMD",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Label: "LABEL",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Expose: "EXPOSE",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Env: "ENV",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Add: "ADD",
    /**
     * https://docs.docker.com/reference/builder/#copy
     */
    Copy: "COPY",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Entrypoint: "ENTRYPOINT",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Volume: "VOLUME",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    User: "USER",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Workdir: "WORKDIR",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Arg: "ARG",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Onbuild: "ONBUILD",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Stopsignal: "STOPSIGNAL",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Healthcheck: "HEALTHCHECK",
    /**
     * https://docs.docker.com/engine/reference/builder/
     */
    Shell: "SHELL",
} as const;

/**
 * The recovered Dockerfile directive used to construct this layer.
 */
export type LayerDirective = (typeof LayerDirective)[keyof typeof LayerDirective];

export const PgpSignedAttestationContentType = {
    /**
     * `ContentType` is not set.
     */
    ContentTypeUnspecified: "CONTENT_TYPE_UNSPECIFIED",
    /**
     * Atomic format attestation signature. See https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md The payload extracted from `signature` is a JSON blob conforming to the linked schema.
     */
    SimpleSigningJson: "SIMPLE_SIGNING_JSON",
} as const;

/**
 * Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).
 */
export type PgpSignedAttestationContentType = (typeof PgpSignedAttestationContentType)[keyof typeof PgpSignedAttestationContentType];

export const VersionKind = {
    /**
     * A standard package version, defined by the other fields.
     */
    Normal: "NORMAL",
    /**
     * A special version representing negative infinity, other fields are ignored.
     */
    Minimum: "MINIMUM",
    /**
     * A special version representing positive infinity, other fields are ignored.
     */
    Maximum: "MAXIMUM",
} as const;

/**
 * Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.
 */
export type VersionKind = (typeof VersionKind)[keyof typeof VersionKind];

export const VulnerabilityDetailsEffectiveSeverity = {
    /**
     * Unknown Impact
     */
    SeverityUnspecified: "SEVERITY_UNSPECIFIED",
    /**
     * Minimal Impact
     */
    Minimal: "MINIMAL",
    /**
     * Low Impact
     */
    Low: "LOW",
    /**
     * Medium Impact
     */
    Medium: "MEDIUM",
    /**
     * High Impact
     */
    High: "HIGH",
    /**
     * Critical Impact
     */
    Critical: "CRITICAL",
} as const;

/**
 * The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
 */
export type VulnerabilityDetailsEffectiveSeverity = (typeof VulnerabilityDetailsEffectiveSeverity)[keyof typeof VulnerabilityDetailsEffectiveSeverity];

export const VulnerabilityTypeSeverity = {
    /**
     * Unknown Impact
     */
    SeverityUnspecified: "SEVERITY_UNSPECIFIED",
    /**
     * Minimal Impact
     */
    Minimal: "MINIMAL",
    /**
     * Low Impact
     */
    Low: "LOW",
    /**
     * Medium Impact
     */
    Medium: "MEDIUM",
    /**
     * High Impact
     */
    High: "HIGH",
    /**
     * Critical Impact
     */
    Critical: "CRITICAL",
} as const;

/**
 * Note provider assigned impact of the vulnerability
 */
export type VulnerabilityTypeSeverity = (typeof VulnerabilityTypeSeverity)[keyof typeof VulnerabilityTypeSeverity];
