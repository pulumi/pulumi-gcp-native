// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AliasContextKind = {
    /**
     * Unknown.
     */
    KindUnspecified: "KIND_UNSPECIFIED",
    /**
     * Git tag.
     */
    Fixed: "FIXED",
    /**
     * Git branch.
     */
    Movable: "MOVABLE",
    /**
     * Used to specify non-standard aliases. For example, if a Git repo has a ref named "refs/foo/bar".
     */
    Other: "OTHER",
} as const;

/**
 * The alias kind.
 */
export type AliasContextKind = (typeof AliasContextKind)[keyof typeof AliasContextKind];

export const AssessmentState = {
    /**
     * No state is specified.
     */
    StateUnspecified: "STATE_UNSPECIFIED",
    /**
     * This product is known to be affected by this vulnerability.
     */
    Affected: "AFFECTED",
    /**
     * This product is known to be not affected by this vulnerability.
     */
    NotAffected: "NOT_AFFECTED",
    /**
     * This product contains a fix for this vulnerability.
     */
    Fixed: "FIXED",
    /**
     * It is not known yet whether these versions are or are not affected by the vulnerability. However, it is still under investigation.
     */
    UnderInvestigation: "UNDER_INVESTIGATION",
} as const;

/**
 * Provides the state of this Vulnerability assessment.
 */
export type AssessmentState = (typeof AssessmentState)[keyof typeof AssessmentState];

export const CVSSAttackComplexity = {
    AttackComplexityUnspecified: "ATTACK_COMPLEXITY_UNSPECIFIED",
    AttackComplexityLow: "ATTACK_COMPLEXITY_LOW",
    AttackComplexityHigh: "ATTACK_COMPLEXITY_HIGH",
    AttackComplexityMedium: "ATTACK_COMPLEXITY_MEDIUM",
} as const;

export type CVSSAttackComplexity = (typeof CVSSAttackComplexity)[keyof typeof CVSSAttackComplexity];

export const CVSSAttackVector = {
    AttackVectorUnspecified: "ATTACK_VECTOR_UNSPECIFIED",
    AttackVectorNetwork: "ATTACK_VECTOR_NETWORK",
    AttackVectorAdjacent: "ATTACK_VECTOR_ADJACENT",
    AttackVectorLocal: "ATTACK_VECTOR_LOCAL",
    AttackVectorPhysical: "ATTACK_VECTOR_PHYSICAL",
} as const;

/**
 * Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
 */
export type CVSSAttackVector = (typeof CVSSAttackVector)[keyof typeof CVSSAttackVector];

export const CVSSAuthentication = {
    AuthenticationUnspecified: "AUTHENTICATION_UNSPECIFIED",
    AuthenticationMultiple: "AUTHENTICATION_MULTIPLE",
    AuthenticationSingle: "AUTHENTICATION_SINGLE",
    AuthenticationNone: "AUTHENTICATION_NONE",
} as const;

export type CVSSAuthentication = (typeof CVSSAuthentication)[keyof typeof CVSSAuthentication];

export const CVSSAvailabilityImpact = {
    ImpactUnspecified: "IMPACT_UNSPECIFIED",
    ImpactHigh: "IMPACT_HIGH",
    ImpactLow: "IMPACT_LOW",
    ImpactNone: "IMPACT_NONE",
    ImpactPartial: "IMPACT_PARTIAL",
    ImpactComplete: "IMPACT_COMPLETE",
} as const;

export type CVSSAvailabilityImpact = (typeof CVSSAvailabilityImpact)[keyof typeof CVSSAvailabilityImpact];

export const CVSSConfidentialityImpact = {
    ImpactUnspecified: "IMPACT_UNSPECIFIED",
    ImpactHigh: "IMPACT_HIGH",
    ImpactLow: "IMPACT_LOW",
    ImpactNone: "IMPACT_NONE",
    ImpactPartial: "IMPACT_PARTIAL",
    ImpactComplete: "IMPACT_COMPLETE",
} as const;

export type CVSSConfidentialityImpact = (typeof CVSSConfidentialityImpact)[keyof typeof CVSSConfidentialityImpact];

export const CVSSIntegrityImpact = {
    ImpactUnspecified: "IMPACT_UNSPECIFIED",
    ImpactHigh: "IMPACT_HIGH",
    ImpactLow: "IMPACT_LOW",
    ImpactNone: "IMPACT_NONE",
    ImpactPartial: "IMPACT_PARTIAL",
    ImpactComplete: "IMPACT_COMPLETE",
} as const;

export type CVSSIntegrityImpact = (typeof CVSSIntegrityImpact)[keyof typeof CVSSIntegrityImpact];

export const CVSSPrivilegesRequired = {
    PrivilegesRequiredUnspecified: "PRIVILEGES_REQUIRED_UNSPECIFIED",
    PrivilegesRequiredNone: "PRIVILEGES_REQUIRED_NONE",
    PrivilegesRequiredLow: "PRIVILEGES_REQUIRED_LOW",
    PrivilegesRequiredHigh: "PRIVILEGES_REQUIRED_HIGH",
} as const;

export type CVSSPrivilegesRequired = (typeof CVSSPrivilegesRequired)[keyof typeof CVSSPrivilegesRequired];

export const CVSSScope = {
    ScopeUnspecified: "SCOPE_UNSPECIFIED",
    ScopeUnchanged: "SCOPE_UNCHANGED",
    ScopeChanged: "SCOPE_CHANGED",
} as const;

export type CVSSScope = (typeof CVSSScope)[keyof typeof CVSSScope];

export const CVSSUserInteraction = {
    UserInteractionUnspecified: "USER_INTERACTION_UNSPECIFIED",
    UserInteractionNone: "USER_INTERACTION_NONE",
    UserInteractionRequired: "USER_INTERACTION_REQUIRED",
} as const;

export type CVSSUserInteraction = (typeof CVSSUserInteraction)[keyof typeof CVSSUserInteraction];

export const CVSSv3AttackComplexity = {
    AttackComplexityUnspecified: "ATTACK_COMPLEXITY_UNSPECIFIED",
    AttackComplexityLow: "ATTACK_COMPLEXITY_LOW",
    AttackComplexityHigh: "ATTACK_COMPLEXITY_HIGH",
} as const;

export type CVSSv3AttackComplexity = (typeof CVSSv3AttackComplexity)[keyof typeof CVSSv3AttackComplexity];

export const CVSSv3AttackVector = {
    AttackVectorUnspecified: "ATTACK_VECTOR_UNSPECIFIED",
    AttackVectorNetwork: "ATTACK_VECTOR_NETWORK",
    AttackVectorAdjacent: "ATTACK_VECTOR_ADJACENT",
    AttackVectorLocal: "ATTACK_VECTOR_LOCAL",
    AttackVectorPhysical: "ATTACK_VECTOR_PHYSICAL",
} as const;

/**
 * Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
 */
export type CVSSv3AttackVector = (typeof CVSSv3AttackVector)[keyof typeof CVSSv3AttackVector];

export const CVSSv3AvailabilityImpact = {
    ImpactUnspecified: "IMPACT_UNSPECIFIED",
    ImpactHigh: "IMPACT_HIGH",
    ImpactLow: "IMPACT_LOW",
    ImpactNone: "IMPACT_NONE",
} as const;

export type CVSSv3AvailabilityImpact = (typeof CVSSv3AvailabilityImpact)[keyof typeof CVSSv3AvailabilityImpact];

export const CVSSv3ConfidentialityImpact = {
    ImpactUnspecified: "IMPACT_UNSPECIFIED",
    ImpactHigh: "IMPACT_HIGH",
    ImpactLow: "IMPACT_LOW",
    ImpactNone: "IMPACT_NONE",
} as const;

export type CVSSv3ConfidentialityImpact = (typeof CVSSv3ConfidentialityImpact)[keyof typeof CVSSv3ConfidentialityImpact];

export const CVSSv3IntegrityImpact = {
    ImpactUnspecified: "IMPACT_UNSPECIFIED",
    ImpactHigh: "IMPACT_HIGH",
    ImpactLow: "IMPACT_LOW",
    ImpactNone: "IMPACT_NONE",
} as const;

export type CVSSv3IntegrityImpact = (typeof CVSSv3IntegrityImpact)[keyof typeof CVSSv3IntegrityImpact];

export const CVSSv3PrivilegesRequired = {
    PrivilegesRequiredUnspecified: "PRIVILEGES_REQUIRED_UNSPECIFIED",
    PrivilegesRequiredNone: "PRIVILEGES_REQUIRED_NONE",
    PrivilegesRequiredLow: "PRIVILEGES_REQUIRED_LOW",
    PrivilegesRequiredHigh: "PRIVILEGES_REQUIRED_HIGH",
} as const;

export type CVSSv3PrivilegesRequired = (typeof CVSSv3PrivilegesRequired)[keyof typeof CVSSv3PrivilegesRequired];

export const CVSSv3Scope = {
    ScopeUnspecified: "SCOPE_UNSPECIFIED",
    ScopeUnchanged: "SCOPE_UNCHANGED",
    ScopeChanged: "SCOPE_CHANGED",
} as const;

export type CVSSv3Scope = (typeof CVSSv3Scope)[keyof typeof CVSSv3Scope];

export const CVSSv3UserInteraction = {
    UserInteractionUnspecified: "USER_INTERACTION_UNSPECIFIED",
    UserInteractionNone: "USER_INTERACTION_NONE",
    UserInteractionRequired: "USER_INTERACTION_REQUIRED",
} as const;

export type CVSSv3UserInteraction = (typeof CVSSv3UserInteraction)[keyof typeof CVSSv3UserInteraction];

export const CisBenchmarkSeverity = {
    /**
     * Unknown.
     */
    SeverityUnspecified: "SEVERITY_UNSPECIFIED",
    /**
     * Minimal severity.
     */
    Minimal: "MINIMAL",
    /**
     * Low severity.
     */
    Low: "LOW",
    /**
     * Medium severity.
     */
    Medium: "MEDIUM",
    /**
     * High severity.
     */
    High: "HIGH",
    /**
     * Critical severity.
     */
    Critical: "CRITICAL",
} as const;

export type CisBenchmarkSeverity = (typeof CisBenchmarkSeverity)[keyof typeof CisBenchmarkSeverity];

export const DeploymentOccurrencePlatform = {
    /**
     * Unknown.
     */
    PlatformUnspecified: "PLATFORM_UNSPECIFIED",
    /**
     * Google Container Engine.
     */
    Gke: "GKE",
    /**
     * Google App Engine: Flexible Environment.
     */
    Flex: "FLEX",
    /**
     * Custom user-defined platform.
     */
    Custom: "CUSTOM",
} as const;

/**
 * Platform hosting this deployment.
 */
export type DeploymentOccurrencePlatform = (typeof DeploymentOccurrencePlatform)[keyof typeof DeploymentOccurrencePlatform];

export const DiscoveryNoteAnalysisKind = {
    /**
     * Default value. This value is unused.
     */
    NoteKindUnspecified: "NOTE_KIND_UNSPECIFIED",
    /**
     * The note and occurrence represent a package vulnerability.
     */
    Vulnerability: "VULNERABILITY",
    /**
     * The note and occurrence assert build provenance.
     */
    Build: "BUILD",
    /**
     * This represents an image basis relationship.
     */
    Image: "IMAGE",
    /**
     * This represents a package installed via a package manager.
     */
    Package: "PACKAGE",
    /**
     * The note and occurrence track deployment events.
     */
    Deployment: "DEPLOYMENT",
    /**
     * The note and occurrence track the initial discovery status of a resource.
     */
    Discovery: "DISCOVERY",
    /**
     * This represents a logical "role" that can attest to artifacts.
     */
    Attestation: "ATTESTATION",
    /**
     * This represents an available package upgrade.
     */
    Upgrade: "UPGRADE",
    /**
     * This represents a Compliance Note
     */
    Compliance: "COMPLIANCE",
    /**
     * This represents a DSSE attestation Note
     */
    DsseAttestation: "DSSE_ATTESTATION",
    /**
     * This represents a Vulnerability Assessment.
     */
    VulnerabilityAssessment: "VULNERABILITY_ASSESSMENT",
    /**
     * This represents an SBOM Reference.
     */
    SbomReference: "SBOM_REFERENCE",
} as const;

/**
 * Required. Immutable. The kind of analysis that is handled by this discovery.
 */
export type DiscoveryNoteAnalysisKind = (typeof DiscoveryNoteAnalysisKind)[keyof typeof DiscoveryNoteAnalysisKind];

export const DiscoveryOccurrenceAnalysisStatus = {
    /**
     * Unknown.
     */
    AnalysisStatusUnspecified: "ANALYSIS_STATUS_UNSPECIFIED",
    /**
     * Resource is known but no action has been taken yet.
     */
    Pending: "PENDING",
    /**
     * Resource is being analyzed.
     */
    Scanning: "SCANNING",
    /**
     * Analysis has finished successfully.
     */
    FinishedSuccess: "FINISHED_SUCCESS",
    /**
     * Analysis has completed.
     */
    Complete: "COMPLETE",
    /**
     * Analysis has finished unsuccessfully, the analysis itself is in a bad state.
     */
    FinishedFailed: "FINISHED_FAILED",
    /**
     * The resource is known not to be supported.
     */
    FinishedUnsupported: "FINISHED_UNSUPPORTED",
} as const;

/**
 * The status of discovery for the resource.
 */
export type DiscoveryOccurrenceAnalysisStatus = (typeof DiscoveryOccurrenceAnalysisStatus)[keyof typeof DiscoveryOccurrenceAnalysisStatus];

export const DiscoveryOccurrenceContinuousAnalysis = {
    /**
     * Unknown.
     */
    ContinuousAnalysisUnspecified: "CONTINUOUS_ANALYSIS_UNSPECIFIED",
    /**
     * The resource is continuously analyzed.
     */
    Active: "ACTIVE",
    /**
     * The resource is ignored for continuous analysis.
     */
    Inactive: "INACTIVE",
} as const;

/**
 * Whether the resource is continuously analyzed.
 */
export type DiscoveryOccurrenceContinuousAnalysis = (typeof DiscoveryOccurrenceContinuousAnalysis)[keyof typeof DiscoveryOccurrenceContinuousAnalysis];

export const DistributionArchitecture = {
    /**
     * Unknown architecture.
     */
    ArchitectureUnspecified: "ARCHITECTURE_UNSPECIFIED",
    /**
     * X86 architecture.
     */
    X86: "X86",
    /**
     * X64 architecture.
     */
    X64: "X64",
} as const;

/**
 * The CPU architecture for which packages in this distribution channel were built.
 */
export type DistributionArchitecture = (typeof DistributionArchitecture)[keyof typeof DistributionArchitecture];

export const JustificationJustificationType = {
    /**
     * JUSTIFICATION_TYPE_UNSPECIFIED.
     */
    JustificationTypeUnspecified: "JUSTIFICATION_TYPE_UNSPECIFIED",
    /**
     * The vulnerable component is not present in the product.
     */
    ComponentNotPresent: "COMPONENT_NOT_PRESENT",
    /**
     * The vulnerable code is not present. Typically this case occurs when source code is configured or built in a way that excludes the vulnerable code.
     */
    VulnerableCodeNotPresent: "VULNERABLE_CODE_NOT_PRESENT",
    /**
     * The vulnerable code can not be executed. Typically this case occurs when the product includes the vulnerable code but does not call or use the vulnerable code.
     */
    VulnerableCodeNotInExecutePath: "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH",
    /**
     * The vulnerable code cannot be controlled by an attacker to exploit the vulnerability.
     */
    VulnerableCodeCannotBeControlledByAdversary: "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY",
    /**
     * The product includes built-in protections or features that prevent exploitation of the vulnerability. These built-in protections cannot be subverted by the attacker and cannot be configured or disabled by the user. These mitigations completely prevent exploitation based on known attack vectors.
     */
    InlineMitigationsAlreadyExist: "INLINE_MITIGATIONS_ALREADY_EXIST",
} as const;

/**
 * The justification type for this vulnerability.
 */
export type JustificationJustificationType = (typeof JustificationJustificationType)[keyof typeof JustificationJustificationType];

export const PackageNoteArchitecture = {
    /**
     * Unknown architecture.
     */
    ArchitectureUnspecified: "ARCHITECTURE_UNSPECIFIED",
    /**
     * X86 architecture.
     */
    X86: "X86",
    /**
     * X64 architecture.
     */
    X64: "X64",
} as const;

/**
 * The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
 */
export type PackageNoteArchitecture = (typeof PackageNoteArchitecture)[keyof typeof PackageNoteArchitecture];

export const RemediationRemediationType = {
    /**
     * No remediation type specified.
     */
    RemediationTypeUnspecified: "REMEDIATION_TYPE_UNSPECIFIED",
    /**
     * A MITIGATION is available.
     */
    Mitigation: "MITIGATION",
    /**
     * No fix is planned.
     */
    NoFixPlanned: "NO_FIX_PLANNED",
    /**
     * Not available.
     */
    NoneAvailable: "NONE_AVAILABLE",
    /**
     * A vendor fix is available.
     */
    VendorFix: "VENDOR_FIX",
    /**
     * A workaround is available.
     */
    Workaround: "WORKAROUND",
} as const;

/**
 * The type of remediation that can be applied.
 */
export type RemediationRemediationType = (typeof RemediationRemediationType)[keyof typeof RemediationRemediationType];

export const SBOMStatusSbomState = {
    /**
     * Default unknown state.
     */
    SbomStateUnspecified: "SBOM_STATE_UNSPECIFIED",
    /**
     * SBOM scanning is pending.
     */
    Pending: "PENDING",
    /**
     * SBOM scanning has completed.
     */
    Complete: "COMPLETE",
} as const;

/**
 * The progress of the SBOM generation.
 */
export type SBOMStatusSbomState = (typeof SBOMStatusSbomState)[keyof typeof SBOMStatusSbomState];

export const VersionKind = {
    /**
     * Unknown.
     */
    VersionKindUnspecified: "VERSION_KIND_UNSPECIFIED",
    /**
     * A standard package version.
     */
    Normal: "NORMAL",
    /**
     * A special version representing negative infinity.
     */
    Minimum: "MINIMUM",
    /**
     * A special version representing positive infinity.
     */
    Maximum: "MAXIMUM",
} as const;

/**
 * Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
 */
export type VersionKind = (typeof VersionKind)[keyof typeof VersionKind];

export const VexAssessmentState = {
    /**
     * No state is specified.
     */
    StateUnspecified: "STATE_UNSPECIFIED",
    /**
     * This product is known to be affected by this vulnerability.
     */
    Affected: "AFFECTED",
    /**
     * This product is known to be not affected by this vulnerability.
     */
    NotAffected: "NOT_AFFECTED",
    /**
     * This product contains a fix for this vulnerability.
     */
    Fixed: "FIXED",
    /**
     * It is not known yet whether these versions are or are not affected by the vulnerability. However, it is still under investigation.
     */
    UnderInvestigation: "UNDER_INVESTIGATION",
} as const;

/**
 * Provides the state of this Vulnerability assessment.
 */
export type VexAssessmentState = (typeof VexAssessmentState)[keyof typeof VexAssessmentState];

export const VulnerabilityNoteCvssVersion = {
    CvssVersionUnspecified: "CVSS_VERSION_UNSPECIFIED",
    CvssVersion2: "CVSS_VERSION_2",
    CvssVersion3: "CVSS_VERSION_3",
} as const;

/**
 * CVSS version used to populate cvss_score and severity.
 */
export type VulnerabilityNoteCvssVersion = (typeof VulnerabilityNoteCvssVersion)[keyof typeof VulnerabilityNoteCvssVersion];

export const VulnerabilityNoteSeverity = {
    /**
     * Unknown.
     */
    SeverityUnspecified: "SEVERITY_UNSPECIFIED",
    /**
     * Minimal severity.
     */
    Minimal: "MINIMAL",
    /**
     * Low severity.
     */
    Low: "LOW",
    /**
     * Medium severity.
     */
    Medium: "MEDIUM",
    /**
     * High severity.
     */
    High: "HIGH",
    /**
     * Critical severity.
     */
    Critical: "CRITICAL",
} as const;

/**
 * The note provider assigned severity of this vulnerability.
 */
export type VulnerabilityNoteSeverity = (typeof VulnerabilityNoteSeverity)[keyof typeof VulnerabilityNoteSeverity];

export const VulnerabilityOccurrenceEffectiveSeverity = {
    /**
     * Unknown.
     */
    SeverityUnspecified: "SEVERITY_UNSPECIFIED",
    /**
     * Minimal severity.
     */
    Minimal: "MINIMAL",
    /**
     * Low severity.
     */
    Low: "LOW",
    /**
     * Medium severity.
     */
    Medium: "MEDIUM",
    /**
     * High severity.
     */
    High: "HIGH",
    /**
     * Critical severity.
     */
    Critical: "CRITICAL",
} as const;

/**
 * The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
 */
export type VulnerabilityOccurrenceEffectiveSeverity = (typeof VulnerabilityOccurrenceEffectiveSeverity)[keyof typeof VulnerabilityOccurrenceEffectiveSeverity];
