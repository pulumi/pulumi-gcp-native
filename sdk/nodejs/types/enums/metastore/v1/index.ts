// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type AuditLogConfigLogType = (typeof AuditLogConfigLogType)[keyof typeof AuditLogConfigLogType];

export const BackendMetastoreMetastoreType = {
    /**
     * The metastore type is not set.
     */
    MetastoreTypeUnspecified: "METASTORE_TYPE_UNSPECIFIED",
    /**
     * The backend metastore is BigQuery.
     */
    Bigquery: "BIGQUERY",
    /**
     * The backend metastore is Dataproc Metastore.
     */
    DataprocMetastore: "DATAPROC_METASTORE",
} as const;

/**
 * The type of the backend metastore.
 */
export type BackendMetastoreMetastoreType = (typeof BackendMetastoreMetastoreType)[keyof typeof BackendMetastoreMetastoreType];

export const DatabaseDumpDatabaseType = {
    /**
     * The type of the source database is unknown.
     */
    DatabaseTypeUnspecified: "DATABASE_TYPE_UNSPECIFIED",
    /**
     * The type of the source database is MySQL.
     */
    Mysql: "MYSQL",
} as const;

/**
 * The type of the database.
 */
export type DatabaseDumpDatabaseType = (typeof DatabaseDumpDatabaseType)[keyof typeof DatabaseDumpDatabaseType];

export const DatabaseDumpType = {
    /**
     * The type of the database dump is unknown.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * Database dump is a MySQL dump file.
     */
    Mysql: "MYSQL",
    /**
     * Database dump contains Avro files.
     */
    Avro: "AVRO",
} as const;

/**
 * Optional. The type of the database dump. If unspecified, defaults to MYSQL.
 */
export type DatabaseDumpType = (typeof DatabaseDumpType)[keyof typeof DatabaseDumpType];

export const HiveMetastoreConfigEndpointProtocol = {
    /**
     * The protocol is not set.
     */
    EndpointProtocolUnspecified: "ENDPOINT_PROTOCOL_UNSPECIFIED",
    /**
     * Use the legacy Apache Thrift protocol for the metastore service endpoint.
     */
    Thrift: "THRIFT",
    /**
     * Use the modernized gRPC protocol for the metastore service endpoint.
     */
    Grpc: "GRPC",
} as const;

/**
 * The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
 */
export type HiveMetastoreConfigEndpointProtocol = (typeof HiveMetastoreConfigEndpointProtocol)[keyof typeof HiveMetastoreConfigEndpointProtocol];

export const MaintenanceWindowDayOfWeek = {
    /**
     * The day of the week is unspecified.
     */
    DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
    /**
     * Monday
     */
    Monday: "MONDAY",
    /**
     * Tuesday
     */
    Tuesday: "TUESDAY",
    /**
     * Wednesday
     */
    Wednesday: "WEDNESDAY",
    /**
     * Thursday
     */
    Thursday: "THURSDAY",
    /**
     * Friday
     */
    Friday: "FRIDAY",
    /**
     * Saturday
     */
    Saturday: "SATURDAY",
    /**
     * Sunday
     */
    Sunday: "SUNDAY",
} as const;

/**
 * The day of week, when the window starts.
 */
export type MaintenanceWindowDayOfWeek = (typeof MaintenanceWindowDayOfWeek)[keyof typeof MaintenanceWindowDayOfWeek];

export const ScalingConfigInstanceSize = {
    /**
     * Unspecified instance size
     */
    InstanceSizeUnspecified: "INSTANCE_SIZE_UNSPECIFIED",
    /**
     * Extra small instance size, maps to a scaling factor of 0.1.
     */
    ExtraSmall: "EXTRA_SMALL",
    /**
     * Small instance size, maps to a scaling factor of 0.5.
     */
    Small: "SMALL",
    /**
     * Medium instance size, maps to a scaling factor of 1.0.
     */
    Medium: "MEDIUM",
    /**
     * Large instance size, maps to a scaling factor of 3.0.
     */
    Large: "LARGE",
    /**
     * Extra large instance size, maps to a scaling factor of 6.0.
     */
    ExtraLarge: "EXTRA_LARGE",
} as const;

/**
 * An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))
 */
export type ScalingConfigInstanceSize = (typeof ScalingConfigInstanceSize)[keyof typeof ScalingConfigInstanceSize];

export const ServiceDatabaseType = {
    /**
     * The DATABASE_TYPE is not set.
     */
    DatabaseTypeUnspecified: "DATABASE_TYPE_UNSPECIFIED",
    /**
     * MySQL is used to persist the metastore data.
     */
    Mysql: "MYSQL",
    /**
     * Spanner is used to persist the metastore data.
     */
    Spanner: "SPANNER",
} as const;

/**
 * Immutable. The database type that the Metastore service stores its data.
 */
export type ServiceDatabaseType = (typeof ServiceDatabaseType)[keyof typeof ServiceDatabaseType];

export const ServiceReleaseChannel = {
    /**
     * Release channel is not specified.
     */
    ReleaseChannelUnspecified: "RELEASE_CHANNEL_UNSPECIFIED",
    /**
     * The CANARY release channel contains the newest features, which may be unstable and subject to unresolved issues with no known workarounds. Services using the CANARY release channel are not subject to any SLAs.
     */
    Canary: "CANARY",
    /**
     * The STABLE release channel contains features that are considered stable and have been validated for production use.
     */
    Stable: "STABLE",
} as const;

/**
 * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
 */
export type ServiceReleaseChannel = (typeof ServiceReleaseChannel)[keyof typeof ServiceReleaseChannel];

export const ServiceTier = {
    /**
     * The tier is not set.
     */
    TierUnspecified: "TIER_UNSPECIFIED",
    /**
     * The developer tier provides limited scalability and no fault tolerance. Good for low-cost proof-of-concept.
     */
    Developer: "DEVELOPER",
    /**
     * The enterprise tier provides multi-zone high availability, and sufficient scalability for enterprise-level Dataproc Metastore workloads.
     */
    Enterprise: "ENTERPRISE",
} as const;

/**
 * The tier of the service.
 */
export type ServiceTier = (typeof ServiceTier)[keyof typeof ServiceTier];

export const TelemetryConfigLogFormat = {
    /**
     * The LOG_FORMAT is not set.
     */
    LogFormatUnspecified: "LOG_FORMAT_UNSPECIFIED",
    /**
     * Logging output uses the legacy textPayload format.
     */
    Legacy: "LEGACY",
    /**
     * Logging output uses the jsonPayload format.
     */
    Json: "JSON",
} as const;

/**
 * The output format of the Dataproc Metastore service's logs.
 */
export type TelemetryConfigLogFormat = (typeof TelemetryConfigLogFormat)[keyof typeof TelemetryConfigLogFormat];
