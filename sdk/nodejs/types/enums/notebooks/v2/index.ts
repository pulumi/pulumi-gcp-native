// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AcceleratorConfigType = {
    /**
     * Accelerator type is not specified.
     */
    AcceleratorTypeUnspecified: "ACCELERATOR_TYPE_UNSPECIFIED",
    /**
     * Accelerator type is Nvidia Tesla P100.
     */
    NvidiaTeslaP100: "NVIDIA_TESLA_P100",
    /**
     * Accelerator type is Nvidia Tesla V100.
     */
    NvidiaTeslaV100: "NVIDIA_TESLA_V100",
    /**
     * Accelerator type is Nvidia Tesla P4.
     */
    NvidiaTeslaP4: "NVIDIA_TESLA_P4",
    /**
     * Accelerator type is Nvidia Tesla T4.
     */
    NvidiaTeslaT4: "NVIDIA_TESLA_T4",
    /**
     * Accelerator type is Nvidia Tesla A100 - 40GB.
     */
    NvidiaTeslaA100: "NVIDIA_TESLA_A100",
    /**
     * Accelerator type is Nvidia Tesla A100 - 80GB.
     */
    NvidiaA10080gb: "NVIDIA_A100_80GB",
    /**
     * Accelerator type is Nvidia Tesla L4.
     */
    NvidiaL4: "NVIDIA_L4",
    /**
     * Accelerator type is NVIDIA Tesla T4 Virtual Workstations.
     */
    NvidiaTeslaT4Vws: "NVIDIA_TESLA_T4_VWS",
    /**
     * Accelerator type is NVIDIA Tesla P100 Virtual Workstations.
     */
    NvidiaTeslaP100Vws: "NVIDIA_TESLA_P100_VWS",
    /**
     * Accelerator type is NVIDIA Tesla P4 Virtual Workstations.
     */
    NvidiaTeslaP4Vws: "NVIDIA_TESLA_P4_VWS",
} as const;

/**
 * Optional. Type of this accelerator.
 */
export type AcceleratorConfigType = (typeof AcceleratorConfigType)[keyof typeof AcceleratorConfigType];

export const BootDiskDiskEncryption = {
    /**
     * Disk encryption is not specified.
     */
    DiskEncryptionUnspecified: "DISK_ENCRYPTION_UNSPECIFIED",
    /**
     * Use Google managed encryption keys to encrypt the boot disk.
     */
    Gmek: "GMEK",
    /**
     * Use customer managed encryption keys to encrypt the boot disk.
     */
    Cmek: "CMEK",
} as const;

/**
 * Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
 */
export type BootDiskDiskEncryption = (typeof BootDiskDiskEncryption)[keyof typeof BootDiskDiskEncryption];

export const BootDiskDiskType = {
    /**
     * Disk type not set.
     */
    DiskTypeUnspecified: "DISK_TYPE_UNSPECIFIED",
    /**
     * Standard persistent disk type.
     */
    PdStandard: "PD_STANDARD",
    /**
     * SSD persistent disk type.
     */
    PdSsd: "PD_SSD",
    /**
     * Balanced persistent disk type.
     */
    PdBalanced: "PD_BALANCED",
    /**
     * Extreme persistent disk type.
     */
    PdExtreme: "PD_EXTREME",
} as const;

/**
 * Optional. Indicates the type of the disk.
 */
export type BootDiskDiskType = (typeof BootDiskDiskType)[keyof typeof BootDiskDiskType];

export const DataDiskDiskEncryption = {
    /**
     * Disk encryption is not specified.
     */
    DiskEncryptionUnspecified: "DISK_ENCRYPTION_UNSPECIFIED",
    /**
     * Use Google managed encryption keys to encrypt the boot disk.
     */
    Gmek: "GMEK",
    /**
     * Use customer managed encryption keys to encrypt the boot disk.
     */
    Cmek: "CMEK",
} as const;

/**
 * Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
 */
export type DataDiskDiskEncryption = (typeof DataDiskDiskEncryption)[keyof typeof DataDiskDiskEncryption];

export const DataDiskDiskType = {
    /**
     * Disk type not set.
     */
    DiskTypeUnspecified: "DISK_TYPE_UNSPECIFIED",
    /**
     * Standard persistent disk type.
     */
    PdStandard: "PD_STANDARD",
    /**
     * SSD persistent disk type.
     */
    PdSsd: "PD_SSD",
    /**
     * Balanced persistent disk type.
     */
    PdBalanced: "PD_BALANCED",
    /**
     * Extreme persistent disk type.
     */
    PdExtreme: "PD_EXTREME",
} as const;

/**
 * Optional. Input only. Indicates the type of the disk.
 */
export type DataDiskDiskType = (typeof DataDiskDiskType)[keyof typeof DataDiskDiskType];

export const NetworkInterfaceNicType = {
    /**
     * No type specified.
     */
    NicTypeUnspecified: "NIC_TYPE_UNSPECIFIED",
    /**
     * VIRTIO
     */
    VirtioNet: "VIRTIO_NET",
    /**
     * GVNIC
     */
    Gvnic: "GVNIC",
} as const;

/**
 * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
 */
export type NetworkInterfaceNicType = (typeof NetworkInterfaceNicType)[keyof typeof NetworkInterfaceNicType];
