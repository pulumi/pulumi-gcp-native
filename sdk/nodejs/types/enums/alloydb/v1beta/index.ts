// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BackupType = {
    /**
     * Backup Type is unknown.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * ON_DEMAND backups that were triggered by the customer (e.g., not AUTOMATED).
     */
    OnDemand: "ON_DEMAND",
    /**
     * AUTOMATED backups triggered by the automated backups scheduler pursuant to an automated backup policy.
     */
    Automated: "AUTOMATED",
    /**
     * CONTINUOUS backups triggered by the automated backups scheduler due to a continuous backup policy.
     */
    Continuous: "CONTINUOUS",
} as const;

/**
 * The backup type, which suggests the trigger for the backup.
 */
export type BackupType = (typeof BackupType)[keyof typeof BackupType];

export const ClusterDatabaseVersion = {
    /**
     * This is an unknown database version.
     */
    DatabaseVersionUnspecified: "DATABASE_VERSION_UNSPECIFIED",
    /**
     * DEPRECATED - The database version is Postgres 13.
     */
    Postgres13: "POSTGRES_13",
    /**
     * The database version is Postgres 14.
     */
    Postgres14: "POSTGRES_14",
    /**
     * The database version is Postgres 15.
     */
    Postgres15: "POSTGRES_15",
} as const;

/**
 * Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
 */
export type ClusterDatabaseVersion = (typeof ClusterDatabaseVersion)[keyof typeof ClusterDatabaseVersion];

export const InstanceAvailabilityType = {
    /**
     * This is an unknown Availability type.
     */
    AvailabilityTypeUnspecified: "AVAILABILITY_TYPE_UNSPECIFIED",
    /**
     * Zonal available instance.
     */
    Zonal: "ZONAL",
    /**
     * Regional (or Highly) available instance.
     */
    Regional: "REGIONAL",
} as const;

/**
 * Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).
 */
export type InstanceAvailabilityType = (typeof InstanceAvailabilityType)[keyof typeof InstanceAvailabilityType];

export const InstanceInstanceType = {
    /**
     * The type of the instance is unknown.
     */
    InstanceTypeUnspecified: "INSTANCE_TYPE_UNSPECIFIED",
    /**
     * PRIMARY instances support read and write operations.
     */
    Primary: "PRIMARY",
    /**
     * READ POOL instances support read operations only. Each read pool instance consists of one or more homogeneous nodes. * Read pool of size 1 can only have zonal availability. * Read pools with node count of 2 or more can have regional availability (nodes are present in 2 or more zones in a region).
     */
    ReadPool: "READ_POOL",
    /**
     * SECONDARY instances support read operations only. SECONDARY instance is a cross-region read replica
     */
    Secondary: "SECONDARY",
} as const;

/**
 * Required. The type of the instance. Specified at creation time.
 */
export type InstanceInstanceType = (typeof InstanceInstanceType)[keyof typeof InstanceInstanceType];

export const SslConfigCaSource = {
    /**
     * Certificate Authority (CA) source not specified. Defaults to CA_SOURCE_MANAGED.
     */
    CaSourceUnspecified: "CA_SOURCE_UNSPECIFIED",
    /**
     * Certificate Authority (CA) managed by the AlloyDB Cluster.
     */
    CaSourceManaged: "CA_SOURCE_MANAGED",
} as const;

/**
 * Optional. Certificate Authority (CA) source. Only CA_SOURCE_MANAGED is supported currently, and is the default value.
 */
export type SslConfigCaSource = (typeof SslConfigCaSource)[keyof typeof SslConfigCaSource];

export const SslConfigSslMode = {
    /**
     * SSL mode not specified. Defaults to ENCRYPTED_ONLY.
     */
    SslModeUnspecified: "SSL_MODE_UNSPECIFIED",
    /**
     * SSL connections are optional. CA verification not enforced.
     */
    SslModeAllow: "SSL_MODE_ALLOW",
    /**
     * SSL connections are required. CA verification not enforced. Clients may use locally self-signed certificates (default psql client behavior).
     */
    SslModeRequire: "SSL_MODE_REQUIRE",
    /**
     * SSL connections are required. CA verification enforced. Clients must have certificates signed by a Cluster CA, e.g. via GenerateClientCertificate.
     */
    SslModeVerifyCa: "SSL_MODE_VERIFY_CA",
    /**
     * SSL connections are optional. CA verification not enforced.
     */
    AllowUnencryptedAndEncrypted: "ALLOW_UNENCRYPTED_AND_ENCRYPTED",
    /**
     * SSL connections are required. CA verification not enforced.
     */
    EncryptedOnly: "ENCRYPTED_ONLY",
} as const;

/**
 * Optional. SSL mode. Specifies client-server SSL/TLS connection behavior.
 */
export type SslConfigSslMode = (typeof SslConfigSslMode)[keyof typeof SslConfigSslMode];

export const UpdatePolicyMode = {
    /**
     * Mode is unknown.
     */
    ModeUnspecified: "MODE_UNSPECIFIED",
    /**
     * Least disruptive way to apply the update.
     */
    Default: "DEFAULT",
    /**
     * Performs a forced update when applicable. This will be fast but may incur a downtime.
     */
    ForceApply: "FORCE_APPLY",
} as const;

/**
 * Mode for updating the instance.
 */
export type UpdatePolicyMode = (typeof UpdatePolicyMode)[keyof typeof UpdatePolicyMode];

export const UserUserType = {
    /**
     * Unspecified user type.
     */
    UserTypeUnspecified: "USER_TYPE_UNSPECIFIED",
    /**
     * The default user type that authenticates via password-based authentication.
     */
    AlloydbBuiltIn: "ALLOYDB_BUILT_IN",
    /**
     * Database user that can authenticate via IAM-Based authentication.
     */
    AlloydbIamUser: "ALLOYDB_IAM_USER",
} as const;

/**
 * Optional. Type of this user.
 */
export type UserUserType = (typeof UserUserType)[keyof typeof UserUserType];

export const WeeklyScheduleDaysOfWeekItem = {
    /**
     * The day of the week is unspecified.
     */
    DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
    /**
     * Monday
     */
    Monday: "MONDAY",
    /**
     * Tuesday
     */
    Tuesday: "TUESDAY",
    /**
     * Wednesday
     */
    Wednesday: "WEDNESDAY",
    /**
     * Thursday
     */
    Thursday: "THURSDAY",
    /**
     * Friday
     */
    Friday: "FRIDAY",
    /**
     * Saturday
     */
    Saturday: "SATURDAY",
    /**
     * Sunday
     */
    Sunday: "SUNDAY",
} as const;

export type WeeklyScheduleDaysOfWeekItem = (typeof WeeklyScheduleDaysOfWeekItem)[keyof typeof WeeklyScheduleDaysOfWeekItem];
