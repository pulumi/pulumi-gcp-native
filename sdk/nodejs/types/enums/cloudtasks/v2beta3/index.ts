// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AppEngineHttpRequestHttpMethod = {
    /**
     * HTTP method unspecified
     */
    HttpMethodUnspecified: "HTTP_METHOD_UNSPECIFIED",
    /**
     * HTTP POST
     */
    Post: "POST",
    /**
     * HTTP GET
     */
    Get: "GET",
    /**
     * HTTP HEAD
     */
    Head: "HEAD",
    /**
     * HTTP PUT
     */
    Put: "PUT",
    /**
     * HTTP DELETE
     */
    Delete: "DELETE",
    /**
     * HTTP PATCH
     */
    Patch: "PATCH",
    /**
     * HTTP OPTIONS
     */
    Options: "OPTIONS",
} as const;

/**
 * The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
 */
export type AppEngineHttpRequestHttpMethod = (typeof AppEngineHttpRequestHttpMethod)[keyof typeof AppEngineHttpRequestHttpMethod];

export const HttpRequestHttpMethod = {
    /**
     * HTTP method unspecified
     */
    HttpMethodUnspecified: "HTTP_METHOD_UNSPECIFIED",
    /**
     * HTTP POST
     */
    Post: "POST",
    /**
     * HTTP GET
     */
    Get: "GET",
    /**
     * HTTP HEAD
     */
    Head: "HEAD",
    /**
     * HTTP PUT
     */
    Put: "PUT",
    /**
     * HTTP DELETE
     */
    Delete: "DELETE",
    /**
     * HTTP PATCH
     */
    Patch: "PATCH",
    /**
     * HTTP OPTIONS
     */
    Options: "OPTIONS",
} as const;

/**
 * The HTTP method to use for the request. The default is POST.
 */
export type HttpRequestHttpMethod = (typeof HttpRequestHttpMethod)[keyof typeof HttpRequestHttpMethod];

export const HttpTargetHttpMethod = {
    /**
     * HTTP method unspecified
     */
    HttpMethodUnspecified: "HTTP_METHOD_UNSPECIFIED",
    /**
     * HTTP POST
     */
    Post: "POST",
    /**
     * HTTP GET
     */
    Get: "GET",
    /**
     * HTTP HEAD
     */
    Head: "HEAD",
    /**
     * HTTP PUT
     */
    Put: "PUT",
    /**
     * HTTP DELETE
     */
    Delete: "DELETE",
    /**
     * HTTP PATCH
     */
    Patch: "PATCH",
    /**
     * HTTP OPTIONS
     */
    Options: "OPTIONS",
} as const;

/**
 * The HTTP method to use for the request. When specified, it overrides HttpRequest for the task. Note that if the value is set to HttpMethod the HttpRequest of the task will be ignored at execution time.
 */
export type HttpTargetHttpMethod = (typeof HttpTargetHttpMethod)[keyof typeof HttpTargetHttpMethod];

export const QueueType = {
    /**
     * Default value.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * A pull queue.
     */
    Pull: "PULL",
    /**
     * A push queue.
     */
    Push: "PUSH",
} as const;

/**
 * Immutable. The type of a queue (push or pull). `Queue.type` is an immutable property of the queue that is set at the queue creation time. When left unspecified, the default value of `PUSH` is selected.
 */
export type QueueType = (typeof QueueType)[keyof typeof QueueType];

export const TaskResponseView = {
    /**
     * Unspecified. Defaults to BASIC.
     */
    ViewUnspecified: "VIEW_UNSPECIFIED",
    /**
     * The basic view omits fields which can be large or can contain sensitive data. This view does not include the body in AppEngineHttpRequest. Bodies are desirable to return only when needed, because they can be large and because of the sensitivity of the data that you choose to store in it.
     */
    Basic: "BASIC",
    /**
     * All information is returned. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Queue resource.
     */
    Full: "FULL",
} as const;

/**
 * The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
 */
export type TaskResponseView = (typeof TaskResponseView)[keyof typeof TaskResponseView];

export const UriOverrideScheme = {
    /**
     * Scheme unspecified. Defaults to HTTPS.
     */
    SchemeUnspecified: "SCHEME_UNSPECIFIED",
    /**
     * Convert the scheme to HTTP, e.g., https://www.google.ca will change to http://www.google.ca.
     */
    Http: "HTTP",
    /**
     * Convert the scheme to HTTPS, e.g., http://www.google.ca will change to https://www.google.ca.
     */
    Https: "HTTPS",
} as const;

/**
 * Scheme override. When specified, the task URI scheme is replaced by the provided value (HTTP or HTTPS).
 */
export type UriOverrideScheme = (typeof UriOverrideScheme)[keyof typeof UriOverrideScheme];

export const UriOverrideUriOverrideEnforceMode = {
    /**
     * OverrideMode Unspecified. Defaults to ALWAYS.
     */
    UriOverrideEnforceModeUnspecified: "URI_OVERRIDE_ENFORCE_MODE_UNSPECIFIED",
    /**
     * In the IF_NOT_EXISTS mode, queue-level configuration is only applied where task-level configuration does not exist.
     */
    IfNotExists: "IF_NOT_EXISTS",
    /**
     * In the ALWAYS mode, queue-level configuration overrides all task-level configuration
     */
    Always: "ALWAYS",
} as const;

/**
 * URI Override Enforce Mode When specified, determines the Target UriOverride mode. If not specified, it defaults to ALWAYS.
 */
export type UriOverrideUriOverrideEnforceMode = (typeof UriOverrideUriOverrideEnforceMode)[keyof typeof UriOverrideUriOverrideEnforceMode];
