// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const PkixPublicKeySignatureAlgorithm = {
    /**
     * Not specified.
     */
    SignatureAlgorithmUnspecified: "SIGNATURE_ALGORITHM_UNSPECIFIED",
    /**
     * RSASSA-PSS 2048 bit key with a SHA256 digest.
     */
    RsaPss2048Sha256: "RSA_PSS_2048_SHA256",
    /**
     * RSASSA-PSS 2048 bit key with a SHA256 digest.
     */
    RsaSignPss2048Sha256: "RSA_SIGN_PSS_2048_SHA256",
    /**
     * RSASSA-PSS 3072 bit key with a SHA256 digest.
     */
    RsaPss3072Sha256: "RSA_PSS_3072_SHA256",
    /**
     * RSASSA-PSS 3072 bit key with a SHA256 digest.
     */
    RsaSignPss3072Sha256: "RSA_SIGN_PSS_3072_SHA256",
    /**
     * RSASSA-PSS 4096 bit key with a SHA256 digest.
     */
    RsaPss4096Sha256: "RSA_PSS_4096_SHA256",
    /**
     * RSASSA-PSS 4096 bit key with a SHA256 digest.
     */
    RsaSignPss4096Sha256: "RSA_SIGN_PSS_4096_SHA256",
    /**
     * RSASSA-PSS 4096 bit key with a SHA512 digest.
     */
    RsaPss4096Sha512: "RSA_PSS_4096_SHA512",
    /**
     * RSASSA-PSS 4096 bit key with a SHA512 digest.
     */
    RsaSignPss4096Sha512: "RSA_SIGN_PSS_4096_SHA512",
    /**
     * RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
     */
    RsaSignPkcs12048Sha256: "RSA_SIGN_PKCS1_2048_SHA256",
    /**
     * RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
     */
    RsaSignPkcs13072Sha256: "RSA_SIGN_PKCS1_3072_SHA256",
    /**
     * RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
     */
    RsaSignPkcs14096Sha256: "RSA_SIGN_PKCS1_4096_SHA256",
    /**
     * RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
     */
    RsaSignPkcs14096Sha512: "RSA_SIGN_PKCS1_4096_SHA512",
    /**
     * ECDSA on the NIST P-256 curve with a SHA256 digest.
     */
    EcdsaP256Sha256: "ECDSA_P256_SHA256",
    /**
     * ECDSA on the NIST P-256 curve with a SHA256 digest.
     */
    EcSignP256Sha256: "EC_SIGN_P256_SHA256",
    /**
     * ECDSA on the NIST P-384 curve with a SHA384 digest.
     */
    EcdsaP384Sha384: "ECDSA_P384_SHA384",
    /**
     * ECDSA on the NIST P-384 curve with a SHA384 digest.
     */
    EcSignP384Sha384: "EC_SIGN_P384_SHA384",
    /**
     * ECDSA on the NIST P-521 curve with a SHA512 digest.
     */
    EcdsaP521Sha512: "ECDSA_P521_SHA512",
    /**
     * ECDSA on the NIST P-521 curve with a SHA512 digest.
     */
    EcSignP521Sha512: "EC_SIGN_P521_SHA512",
} as const;

/**
 * The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).
 */
export type PkixPublicKeySignatureAlgorithm = (typeof PkixPublicKeySignatureAlgorithm)[keyof typeof PkixPublicKeySignatureAlgorithm];

export const VerificationRuleTrustedBuilder = {
    /**
     * Should never happen.
     */
    BuilderUnspecified: "BUILDER_UNSPECIFIED",
    /**
     * The whole Google Cloud Build (GCB) builder group, including all GCB builder types.
     */
    GoogleCloudBuild: "GOOGLE_CLOUD_BUILD",
} as const;

/**
 * Each verification rule is used for evaluation against provenances generated by a specific builder (group). For some of the builders, such as the Google Cloud Build, users don't need to explicitly specify their roots of trust in the policy since the evaluation service can automatically fetch them based on the builder (group).
 */
export type VerificationRuleTrustedBuilder = (typeof VerificationRuleTrustedBuilder)[keyof typeof VerificationRuleTrustedBuilder];

export const VulnerabilityCheckMaximumFixableSeverity = {
    /**
     * Not specified.
     */
    MaximumAllowedSeverityUnspecified: "MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED",
    /**
     * Block any vulnerability.
     */
    BlockAll: "BLOCK_ALL",
    /**
     * Allow only minimal severity.
     */
    Minimal: "MINIMAL",
    /**
     * Allow only low severity and lower.
     */
    Low: "LOW",
    /**
     * Allow medium severity and lower.
     */
    Medium: "MEDIUM",
    /**
     * Allow high severity and lower.
     */
    High: "HIGH",
    /**
     * Allow critical severity and lower.
     */
    Critical: "CRITICAL",
    /**
     * Allow all severity, even vulnerability with unspecified severity.
     */
    AllowAll: "ALLOW_ALL",
} as const;

/**
 * Required. The threshold for severity for which a fix is currently available. This field is required and must be set.
 */
export type VulnerabilityCheckMaximumFixableSeverity = (typeof VulnerabilityCheckMaximumFixableSeverity)[keyof typeof VulnerabilityCheckMaximumFixableSeverity];

export const VulnerabilityCheckMaximumUnfixableSeverity = {
    /**
     * Not specified.
     */
    MaximumAllowedSeverityUnspecified: "MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED",
    /**
     * Block any vulnerability.
     */
    BlockAll: "BLOCK_ALL",
    /**
     * Allow only minimal severity.
     */
    Minimal: "MINIMAL",
    /**
     * Allow only low severity and lower.
     */
    Low: "LOW",
    /**
     * Allow medium severity and lower.
     */
    Medium: "MEDIUM",
    /**
     * Allow high severity and lower.
     */
    High: "HIGH",
    /**
     * Allow critical severity and lower.
     */
    Critical: "CRITICAL",
    /**
     * Allow all severity, even vulnerability with unspecified severity.
     */
    AllowAll: "ALLOW_ALL",
} as const;

/**
 * Required. The threshold for severity for which a fix isn't currently available. This field is required and must be set.
 */
export type VulnerabilityCheckMaximumUnfixableSeverity = (typeof VulnerabilityCheckMaximumUnfixableSeverity)[keyof typeof VulnerabilityCheckMaximumUnfixableSeverity];
