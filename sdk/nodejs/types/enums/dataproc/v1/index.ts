// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const GceClusterConfigPrivateIpv6GoogleAccess = {
    /**
     * If unspecified, Compute Engine default behavior will apply, which is the same as INHERIT_FROM_SUBNETWORK.
     */
    PrivateIpv6GoogleAccessUnspecified: "PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED",
    /**
     * Private access to and from Google Services configuration inherited from the subnetwork configuration. This is the default Compute Engine behavior.
     */
    InheritFromSubnetwork: "INHERIT_FROM_SUBNETWORK",
    /**
     * Enables outbound private IPv6 access to Google Services from the Dataproc cluster.
     */
    Outbound: "OUTBOUND",
    /**
     * Enables bidirectional private IPv6 access between Google Services and the Dataproc cluster.
     */
    Bidirectional: "BIDIRECTIONAL",
} as const;

/**
 * Optional. The type of IPv6 access for a cluster.
 */
export type GceClusterConfigPrivateIpv6GoogleAccess = (typeof GceClusterConfigPrivateIpv6GoogleAccess)[keyof typeof GceClusterConfigPrivateIpv6GoogleAccess];

export const GkeNodePoolTargetRolesItem = {
    /**
     * Role is unspecified.
     */
    RoleUnspecified: "ROLE_UNSPECIFIED",
    /**
     * At least one node pool must have the DEFAULT role. Work assigned to a role that is not associated with a node pool is assigned to the node pool with the DEFAULT role. For example, work assigned to the CONTROLLER role will be assigned to the node pool with the DEFAULT role if no node pool has the CONTROLLER role.
     */
    Default: "DEFAULT",
    /**
     * Run work associated with the Dataproc control plane (for example, controllers and webhooks). Very low resource requirements.
     */
    Controller: "CONTROLLER",
    /**
     * Run work associated with a Spark driver of a job.
     */
    SparkDriver: "SPARK_DRIVER",
    /**
     * Run work associated with a Spark executor of a job.
     */
    SparkExecutor: "SPARK_EXECUTOR",
} as const;

export type GkeNodePoolTargetRolesItem = (typeof GkeNodePoolTargetRolesItem)[keyof typeof GkeNodePoolTargetRolesItem];

export const InstanceGroupConfigPreemptibility = {
    /**
     * Preemptibility is unspecified, the system will choose the appropriate setting for each instance group.
     */
    PreemptibilityUnspecified: "PREEMPTIBILITY_UNSPECIFIED",
    /**
     * Instances are non-preemptible.This option is allowed for all instance groups and is the only valid value for Master and Worker instance groups.
     */
    NonPreemptible: "NON_PREEMPTIBLE",
    /**
     * Instances are preemptible (https://cloud.google.com/compute/docs/instances/preemptible).This option is allowed only for secondary worker (https://cloud.google.com/dataproc/docs/concepts/compute/secondary-vms) groups.
     */
    Preemptible: "PREEMPTIBLE",
    /**
     * Instances are Spot VMs (https://cloud.google.com/compute/docs/instances/spot).This option is allowed only for secondary worker (https://cloud.google.com/dataproc/docs/concepts/compute/secondary-vms) groups. Spot VMs are the latest version of preemptible VMs (https://cloud.google.com/compute/docs/instances/preemptible), and provide additional features.
     */
    Spot: "SPOT",
} as const;

/**
 * Optional. Specifies the preemptibility of the instance group.The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed.The default value for secondary instances is PREEMPTIBLE.
 */
export type InstanceGroupConfigPreemptibility = (typeof InstanceGroupConfigPreemptibility)[keyof typeof InstanceGroupConfigPreemptibility];

export const MetricMetricSource = {
    /**
     * Required unspecified metric source.
     */
    MetricSourceUnspecified: "METRIC_SOURCE_UNSPECIFIED",
    /**
     * Default monitoring agent metrics. If this source is enabled, Dataproc enables the monitoring agent in Compute Engine, and collects default monitoring agent metrics, which are published with an agent.googleapis.com prefix.
     */
    MonitoringAgentDefaults: "MONITORING_AGENT_DEFAULTS",
    /**
     * HDFS metric source.
     */
    Hdfs: "HDFS",
    /**
     * Spark metric source.
     */
    Spark: "SPARK",
    /**
     * YARN metric source.
     */
    Yarn: "YARN",
    /**
     * Spark History Server metric source.
     */
    SparkHistoryServer: "SPARK_HISTORY_SERVER",
    /**
     * Hiveserver2 metric source.
     */
    Hiveserver2: "HIVESERVER2",
} as const;

/**
 * Required. Default metrics are collected unless metricOverrides are specified for the metric source (see Available OSS metrics (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) for more information).
 */
export type MetricMetricSource = (typeof MetricMetricSource)[keyof typeof MetricMetricSource];

export const ReservationAffinityConsumeReservationType = {
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * Do not consume from any allocated capacity.
     */
    NoReservation: "NO_RESERVATION",
    /**
     * Consume any reservation available.
     */
    AnyReservation: "ANY_RESERVATION",
    /**
     * Must consume from a specific reservation. Must specify key value fields for specifying the reservations.
     */
    SpecificReservation: "SPECIFIC_RESERVATION",
} as const;

/**
 * Optional. Type of reservation to consume
 */
export type ReservationAffinityConsumeReservationType = (typeof ReservationAffinityConsumeReservationType)[keyof typeof ReservationAffinityConsumeReservationType];

export const SoftwareConfigOptionalComponentsItem = {
    /**
     * Unspecified component. Specifying this will cause Cluster creation to fail.
     */
    ComponentUnspecified: "COMPONENT_UNSPECIFIED",
    /**
     * The Anaconda python distribution. The Anaconda component is not supported in the Dataproc 2.0 image. The 2.0 image is pre-installed with Miniconda.
     */
    Anaconda: "ANACONDA",
    /**
     * Docker
     */
    Docker: "DOCKER",
    /**
     * The Druid query engine. (alpha)
     */
    Druid: "DRUID",
    /**
     * Flink
     */
    Flink: "FLINK",
    /**
     * HBase. (beta)
     */
    Hbase: "HBASE",
    /**
     * The Hive Web HCatalog (the REST service for accessing HCatalog).
     */
    HiveWebhcat: "HIVE_WEBHCAT",
    /**
     * The Jupyter Notebook.
     */
    Jupyter: "JUPYTER",
    /**
     * The Presto query engine.
     */
    Presto: "PRESTO",
    /**
     * The Ranger service.
     */
    Ranger: "RANGER",
    /**
     * The Solr service.
     */
    Solr: "SOLR",
    /**
     * The Zeppelin notebook.
     */
    Zeppelin: "ZEPPELIN",
    /**
     * The Zookeeper service.
     */
    Zookeeper: "ZOOKEEPER",
} as const;

export type SoftwareConfigOptionalComponentsItem = (typeof SoftwareConfigOptionalComponentsItem)[keyof typeof SoftwareConfigOptionalComponentsItem];
