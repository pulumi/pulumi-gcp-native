// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const GceClusterConfigPrivateIpv6GoogleAccess = {
    /**
     * If unspecified, Compute Engine default behavior will apply, which is the same as INHERIT_FROM_SUBNETWORK.
     */
    PrivateIpv6GoogleAccessUnspecified: "PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED",
    /**
     * Private access to and from Google Services configuration inherited from the subnetwork configuration. This is the default Compute Engine behavior.
     */
    InheritFromSubnetwork: "INHERIT_FROM_SUBNETWORK",
    /**
     * Enables outbound private IPv6 access to Google Services from the Dataproc cluster.
     */
    Outbound: "OUTBOUND",
    /**
     * Enables bidirectional private IPv6 access between Google Services and the Dataproc cluster.
     */
    Bidirectional: "BIDIRECTIONAL",
} as const;

/**
 * Optional. The type of IPv6 access for a cluster.
 */
export type GceClusterConfigPrivateIpv6GoogleAccess = (typeof GceClusterConfigPrivateIpv6GoogleAccess)[keyof typeof GceClusterConfigPrivateIpv6GoogleAccess];

export const GkeNodePoolTargetRolesItem = {
    /**
     * Role is unspecified.
     */
    RoleUnspecified: "ROLE_UNSPECIFIED",
    /**
     * Any roles that are not directly assigned to a NodePool run on the default role's NodePool.
     */
    Default: "DEFAULT",
    /**
     * Run controllers and webhooks.
     */
    Controller: "CONTROLLER",
    /**
     * Run spark driver.
     */
    SparkDriver: "SPARK_DRIVER",
    /**
     * Run spark executors.
     */
    SparkExecutor: "SPARK_EXECUTOR",
} as const;

export type GkeNodePoolTargetRolesItem = (typeof GkeNodePoolTargetRolesItem)[keyof typeof GkeNodePoolTargetRolesItem];

export const InstanceGroupConfigPreemptibility = {
    /**
     * Preemptibility is unspecified, the system will choose the appropriate setting for each instance group.
     */
    PreemptibilityUnspecified: "PREEMPTIBILITY_UNSPECIFIED",
    /**
     * Instances are non-preemptible.This option is allowed for all instance groups and is the only valid value for Master and Worker instance groups.
     */
    NonPreemptible: "NON_PREEMPTIBLE",
    /**
     * Instances are preemptible.This option is allowed only for secondary worker groups.
     */
    Preemptible: "PREEMPTIBLE",
} as const;

/**
 * Optional. Specifies the preemptibility of the instance group.The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed.The default value for secondary instances is PREEMPTIBLE.
 */
export type InstanceGroupConfigPreemptibility = (typeof InstanceGroupConfigPreemptibility)[keyof typeof InstanceGroupConfigPreemptibility];

export const MetricMetricSource = {
    /**
     * Required unspecified metric source
     */
    MetricSourceUnspecified: "METRIC_SOURCE_UNSPECIFIED",
    /**
     * all default monitoring agent metrics that are published with prefix "agent.googleapis.com" when we enable a monitoring agent in Compute Engine
     */
    MonitoringAgentDefaults: "MONITORING_AGENT_DEFAULTS",
    /**
     * Hdfs metric source
     */
    Hdfs: "HDFS",
    /**
     * Spark metric source
     */
    Spark: "SPARK",
    /**
     * Yarn metric source
     */
    Yarn: "YARN",
    /**
     * Spark history server metric source
     */
    SparkHistoryServer: "SPARK_HISTORY_SERVER",
    /**
     * hiveserver2 metric source
     */
    Hiveserver2: "HIVESERVER2",
} as const;

/**
 * Required. MetricSource that should be enabled
 */
export type MetricMetricSource = (typeof MetricMetricSource)[keyof typeof MetricMetricSource];

export const ReservationAffinityConsumeReservationType = {
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * Do not consume from any allocated capacity.
     */
    NoReservation: "NO_RESERVATION",
    /**
     * Consume any reservation available.
     */
    AnyReservation: "ANY_RESERVATION",
    /**
     * Must consume from a specific reservation. Must specify key value fields for specifying the reservations.
     */
    SpecificReservation: "SPECIFIC_RESERVATION",
} as const;

/**
 * Optional. Type of reservation to consume
 */
export type ReservationAffinityConsumeReservationType = (typeof ReservationAffinityConsumeReservationType)[keyof typeof ReservationAffinityConsumeReservationType];

export const SoftwareConfigOptionalComponentsItem = {
    /**
     * Unspecified component. Specifying this will cause Cluster creation to fail.
     */
    ComponentUnspecified: "COMPONENT_UNSPECIFIED",
    /**
     * The Anaconda python distribution. The Anaconda component is not supported in the Dataproc 2.0 image. The 2.0 image is pre-installed with Miniconda.
     */
    Anaconda: "ANACONDA",
    /**
     * Docker
     */
    Docker: "DOCKER",
    /**
     * The Druid query engine. (alpha)
     */
    Druid: "DRUID",
    /**
     * Flink
     */
    Flink: "FLINK",
    /**
     * HBase. (beta)
     */
    Hbase: "HBASE",
    /**
     * The Hive Web HCatalog (the REST service for accessing HCatalog).
     */
    HiveWebhcat: "HIVE_WEBHCAT",
    /**
     * The Jupyter Notebook.
     */
    Jupyter: "JUPYTER",
    /**
     * The Presto query engine.
     */
    Presto: "PRESTO",
    /**
     * The Ranger service.
     */
    Ranger: "RANGER",
    /**
     * The Solr service.
     */
    Solr: "SOLR",
    /**
     * The Zeppelin notebook.
     */
    Zeppelin: "ZEPPELIN",
    /**
     * The Zookeeper service.
     */
    Zookeeper: "ZOOKEEPER",
} as const;

export type SoftwareConfigOptionalComponentsItem = (typeof SoftwareConfigOptionalComponentsItem)[keyof typeof SoftwareConfigOptionalComponentsItem];
