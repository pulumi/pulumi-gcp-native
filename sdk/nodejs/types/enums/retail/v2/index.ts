// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ProductAvailability = {
    /**
     * Default product availability. Default to Availability.IN_STOCK if unset.
     */
    AvailabilityUnspecified: "AVAILABILITY_UNSPECIFIED",
    /**
     * Product in stock.
     */
    InStock: "IN_STOCK",
    /**
     * Product out of stock.
     */
    OutOfStock: "OUT_OF_STOCK",
    /**
     * Product that is in pre-order state.
     */
    Preorder: "PREORDER",
    /**
     * Product that is back-ordered (i.e. temporarily out of stock).
     */
    Backorder: "BACKORDER",
} as const;

/**
 * The online availability of the Product. Default to Availability.IN_STOCK. Corresponding properties: Google Merchant Center property [availability](https://support.google.com/merchants/answer/6324448). Schema.org property [Offer.availability](https://schema.org/availability).
 */
export type ProductAvailability = (typeof ProductAvailability)[keyof typeof ProductAvailability];

export const ProductType = {
    /**
     * Default value. Default to Catalog.product_level_config.ingestion_product_type if unset.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * The primary type. As the primary unit for predicting, indexing and search serving, a Type.PRIMARY Product is grouped with multiple Type.VARIANT Products.
     */
    Primary: "PRIMARY",
    /**
     * The variant type. Type.VARIANT Products usually share some common attributes on the same Type.PRIMARY Products, but they have variant attributes like different colors, sizes and prices, etc.
     */
    Variant: "VARIANT",
    /**
     * The collection type. Collection products are bundled Type.PRIMARY Products or Type.VARIANT Products that are sold together, such as a jewelry set with necklaces, earrings and rings, etc.
     */
    Collection: "COLLECTION",
} as const;

/**
 * Immutable. The type of the product. Default to Catalog.product_level_config.ingestion_product_type if unset.
 */
export type ProductType = (typeof ProductType)[keyof typeof ProductType];
