// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AlloyDbSettingsDatabaseVersion = {
    /**
     * This is an unknown database version.
     */
    DatabaseVersionUnspecified: "DATABASE_VERSION_UNSPECIFIED",
    /**
     * The database version is Postgres 14.
     */
    Postgres14: "POSTGRES_14",
    /**
     * The database version is Postgres 15.
     */
    Postgres15: "POSTGRES_15",
} as const;

/**
 * Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
 */
export type AlloyDbSettingsDatabaseVersion = (typeof AlloyDbSettingsDatabaseVersion)[keyof typeof AlloyDbSettingsDatabaseVersion];

export const AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type AuditLogConfigLogType = (typeof AuditLogConfigLogType)[keyof typeof AuditLogConfigLogType];

export const CloudSqlSettingsActivationPolicy = {
    /**
     * unspecified policy.
     */
    SqlActivationPolicyUnspecified: "SQL_ACTIVATION_POLICY_UNSPECIFIED",
    /**
     * The instance is always up and running.
     */
    Always: "ALWAYS",
    /**
     * The instance should never spin up.
     */
    Never: "NEVER",
} as const;

/**
 * The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
 */
export type CloudSqlSettingsActivationPolicy = (typeof CloudSqlSettingsActivationPolicy)[keyof typeof CloudSqlSettingsActivationPolicy];

export const CloudSqlSettingsAvailabilityType = {
    /**
     * This is an unknown Availability type.
     */
    SqlAvailabilityTypeUnspecified: "SQL_AVAILABILITY_TYPE_UNSPECIFIED",
    /**
     * Zonal availablility instance.
     */
    Zonal: "ZONAL",
    /**
     * Regional availability instance.
     */
    Regional: "REGIONAL",
} as const;

/**
 * Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
 */
export type CloudSqlSettingsAvailabilityType = (typeof CloudSqlSettingsAvailabilityType)[keyof typeof CloudSqlSettingsAvailabilityType];

export const CloudSqlSettingsDataDiskType = {
    /**
     * Unspecified.
     */
    SqlDataDiskTypeUnspecified: "SQL_DATA_DISK_TYPE_UNSPECIFIED",
    /**
     * SSD disk.
     */
    PdSsd: "PD_SSD",
    /**
     * HDD disk.
     */
    PdHdd: "PD_HDD",
} as const;

/**
 * The type of storage: `PD_SSD` (default) or `PD_HDD`.
 */
export type CloudSqlSettingsDataDiskType = (typeof CloudSqlSettingsDataDiskType)[keyof typeof CloudSqlSettingsDataDiskType];

export const CloudSqlSettingsDatabaseVersion = {
    /**
     * Unspecified version.
     */
    SqlDatabaseVersionUnspecified: "SQL_DATABASE_VERSION_UNSPECIFIED",
    /**
     * MySQL 5.6.
     */
    Mysql56: "MYSQL_5_6",
    /**
     * MySQL 5.7.
     */
    Mysql57: "MYSQL_5_7",
    /**
     * MySQL 8.0.
     */
    Mysql80: "MYSQL_8_0",
    /**
     * The database major version is MySQL 8.0 and the minor version is 18.
     */
    Mysql8018: "MYSQL_8_0_18",
    /**
     * The database major version is MySQL 8.0 and the minor version is 26.
     */
    Mysql8026: "MYSQL_8_0_26",
    /**
     * The database major version is MySQL 8.0 and the minor version is 27.
     */
    Mysql8027: "MYSQL_8_0_27",
    /**
     * The database major version is MySQL 8.0 and the minor version is 28.
     */
    Mysql8028: "MYSQL_8_0_28",
    /**
     * The database major version is MySQL 8.0 and the minor version is 30.
     */
    Mysql8030: "MYSQL_8_0_30",
    /**
     * The database major version is MySQL 8.0 and the minor version is 31.
     */
    Mysql8031: "MYSQL_8_0_31",
    /**
     * The database major version is MySQL 8.0 and the minor version is 32.
     */
    Mysql8032: "MYSQL_8_0_32",
    /**
     * The database major version is MySQL 8.0 and the minor version is 33.
     */
    Mysql8033: "MYSQL_8_0_33",
    /**
     * The database major version is MySQL 8.0 and the minor version is 34.
     */
    Mysql8034: "MYSQL_8_0_34",
    /**
     * PostgreSQL 9.6.
     */
    Postgres96: "POSTGRES_9_6",
    /**
     * PostgreSQL 11.
     */
    Postgres11: "POSTGRES_11",
    /**
     * PostgreSQL 10.
     */
    Postgres10: "POSTGRES_10",
    /**
     * PostgreSQL 12.
     */
    Postgres12: "POSTGRES_12",
    /**
     * PostgreSQL 13.
     */
    Postgres13: "POSTGRES_13",
    /**
     * PostgreSQL 14.
     */
    Postgres14: "POSTGRES_14",
    /**
     * PostgreSQL 15.
     */
    Postgres15: "POSTGRES_15",
} as const;

/**
 * The database engine type and version.
 */
export type CloudSqlSettingsDatabaseVersion = (typeof CloudSqlSettingsDatabaseVersion)[keyof typeof CloudSqlSettingsDatabaseVersion];

export const CloudSqlSettingsEdition = {
    /**
     * The instance did not specify the edition.
     */
    EditionUnspecified: "EDITION_UNSPECIFIED",
    /**
     * The instance is an enterprise edition.
     */
    Enterprise: "ENTERPRISE",
    /**
     * The instance is an enterprise plus edition.
     */
    EnterprisePlus: "ENTERPRISE_PLUS",
} as const;

/**
 * Optional. The edition of the given Cloud SQL instance.
 */
export type CloudSqlSettingsEdition = (typeof CloudSqlSettingsEdition)[keyof typeof CloudSqlSettingsEdition];

export const ConnectionProfileProvider = {
    /**
     * The database provider is unknown.
     */
    DatabaseProviderUnspecified: "DATABASE_PROVIDER_UNSPECIFIED",
    /**
     * CloudSQL runs the database.
     */
    Cloudsql: "CLOUDSQL",
    /**
     * RDS runs the database.
     */
    Rds: "RDS",
    /**
     * Amazon Aurora.
     */
    Aurora: "AURORA",
    /**
     * AlloyDB.
     */
    Alloydb: "ALLOYDB",
} as const;

/**
 * The database provider.
 */
export type ConnectionProfileProvider = (typeof ConnectionProfileProvider)[keyof typeof ConnectionProfileProvider];

export const ConnectionProfileState = {
    /**
     * The state of the connection profile is unknown.
     */
    StateUnspecified: "STATE_UNSPECIFIED",
    /**
     * The connection profile is in draft mode and fully editable.
     */
    Draft: "DRAFT",
    /**
     * The connection profile is being created.
     */
    Creating: "CREATING",
    /**
     * The connection profile is ready.
     */
    Ready: "READY",
    /**
     * The connection profile is being updated.
     */
    Updating: "UPDATING",
    /**
     * The connection profile is being deleted.
     */
    Deleting: "DELETING",
    /**
     * The connection profile has been deleted.
     */
    Deleted: "DELETED",
    /**
     * The last action on the connection profile failed.
     */
    Failed: "FAILED",
} as const;

/**
 * The current connection profile state (e.g. DRAFT, READY, or FAILED).
 */
export type ConnectionProfileState = (typeof ConnectionProfileState)[keyof typeof ConnectionProfileState];

export const DatabaseEngineInfoEngine = {
    /**
     * The source database engine of the migration job is unknown.
     */
    DatabaseEngineUnspecified: "DATABASE_ENGINE_UNSPECIFIED",
    /**
     * The source engine is MySQL.
     */
    Mysql: "MYSQL",
    /**
     * The source engine is PostgreSQL.
     */
    Postgresql: "POSTGRESQL",
    /**
     * The source engine is Oracle.
     */
    Oracle: "ORACLE",
} as const;

/**
 * Required. Engine type.
 */
export type DatabaseEngineInfoEngine = (typeof DatabaseEngineInfoEngine)[keyof typeof DatabaseEngineInfoEngine];

export const DatabaseTypeEngine = {
    /**
     * The source database engine of the migration job is unknown.
     */
    DatabaseEngineUnspecified: "DATABASE_ENGINE_UNSPECIFIED",
    /**
     * The source engine is MySQL.
     */
    Mysql: "MYSQL",
    /**
     * The source engine is PostgreSQL.
     */
    Postgresql: "POSTGRESQL",
    /**
     * The source engine is Oracle.
     */
    Oracle: "ORACLE",
} as const;

/**
 * The database engine.
 */
export type DatabaseTypeEngine = (typeof DatabaseTypeEngine)[keyof typeof DatabaseTypeEngine];

export const DatabaseTypeProvider = {
    /**
     * The database provider is unknown.
     */
    DatabaseProviderUnspecified: "DATABASE_PROVIDER_UNSPECIFIED",
    /**
     * CloudSQL runs the database.
     */
    Cloudsql: "CLOUDSQL",
    /**
     * RDS runs the database.
     */
    Rds: "RDS",
    /**
     * Amazon Aurora.
     */
    Aurora: "AURORA",
    /**
     * AlloyDB.
     */
    Alloydb: "ALLOYDB",
} as const;

/**
 * The database provider.
 */
export type DatabaseTypeProvider = (typeof DatabaseTypeProvider)[keyof typeof DatabaseTypeProvider];

export const DoubleComparisonFilterValueComparison = {
    /**
     * Value comparison unspecified.
     */
    ValueComparisonUnspecified: "VALUE_COMPARISON_UNSPECIFIED",
    /**
     * Value is smaller than the Compare value.
     */
    ValueComparisonIfValueSmallerThan: "VALUE_COMPARISON_IF_VALUE_SMALLER_THAN",
    /**
     * Value is smaller or equal than the Compare value.
     */
    ValueComparisonIfValueSmallerEqualThan: "VALUE_COMPARISON_IF_VALUE_SMALLER_EQUAL_THAN",
    /**
     * Value is larger than the Compare value.
     */
    ValueComparisonIfValueLargerThan: "VALUE_COMPARISON_IF_VALUE_LARGER_THAN",
    /**
     * Value is larger or equal than the Compare value.
     */
    ValueComparisonIfValueLargerEqualThan: "VALUE_COMPARISON_IF_VALUE_LARGER_EQUAL_THAN",
} as const;

/**
 * Required. Relation between source value and compare value
 */
export type DoubleComparisonFilterValueComparison = (typeof DoubleComparisonFilterValueComparison)[keyof typeof DoubleComparisonFilterValueComparison];

export const IntComparisonFilterValueComparison = {
    /**
     * Value comparison unspecified.
     */
    ValueComparisonUnspecified: "VALUE_COMPARISON_UNSPECIFIED",
    /**
     * Value is smaller than the Compare value.
     */
    ValueComparisonIfValueSmallerThan: "VALUE_COMPARISON_IF_VALUE_SMALLER_THAN",
    /**
     * Value is smaller or equal than the Compare value.
     */
    ValueComparisonIfValueSmallerEqualThan: "VALUE_COMPARISON_IF_VALUE_SMALLER_EQUAL_THAN",
    /**
     * Value is larger than the Compare value.
     */
    ValueComparisonIfValueLargerThan: "VALUE_COMPARISON_IF_VALUE_LARGER_THAN",
    /**
     * Value is larger or equal than the Compare value.
     */
    ValueComparisonIfValueLargerEqualThan: "VALUE_COMPARISON_IF_VALUE_LARGER_EQUAL_THAN",
} as const;

/**
 * Required. Relation between source value and compare value
 */
export type IntComparisonFilterValueComparison = (typeof IntComparisonFilterValueComparison)[keyof typeof IntComparisonFilterValueComparison];

export const MappingRuleRuleScope = {
    /**
     * Unspecified database entity type.
     */
    DatabaseEntityTypeUnspecified: "DATABASE_ENTITY_TYPE_UNSPECIFIED",
    /**
     * Schema.
     */
    DatabaseEntityTypeSchema: "DATABASE_ENTITY_TYPE_SCHEMA",
    /**
     * Table.
     */
    DatabaseEntityTypeTable: "DATABASE_ENTITY_TYPE_TABLE",
    /**
     * Column.
     */
    DatabaseEntityTypeColumn: "DATABASE_ENTITY_TYPE_COLUMN",
    /**
     * Constraint.
     */
    DatabaseEntityTypeConstraint: "DATABASE_ENTITY_TYPE_CONSTRAINT",
    /**
     * Index.
     */
    DatabaseEntityTypeIndex: "DATABASE_ENTITY_TYPE_INDEX",
    /**
     * Trigger.
     */
    DatabaseEntityTypeTrigger: "DATABASE_ENTITY_TYPE_TRIGGER",
    /**
     * View.
     */
    DatabaseEntityTypeView: "DATABASE_ENTITY_TYPE_VIEW",
    /**
     * Sequence.
     */
    DatabaseEntityTypeSequence: "DATABASE_ENTITY_TYPE_SEQUENCE",
    /**
     * Stored Procedure.
     */
    DatabaseEntityTypeStoredProcedure: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE",
    /**
     * Function.
     */
    DatabaseEntityTypeFunction: "DATABASE_ENTITY_TYPE_FUNCTION",
    /**
     * Synonym.
     */
    DatabaseEntityTypeSynonym: "DATABASE_ENTITY_TYPE_SYNONYM",
    /**
     * Package.
     */
    DatabaseEntityTypeDatabasePackage: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE",
    /**
     * UDT.
     */
    DatabaseEntityTypeUdt: "DATABASE_ENTITY_TYPE_UDT",
    /**
     * Materialized View.
     */
    DatabaseEntityTypeMaterializedView: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW",
    /**
     * Database.
     */
    DatabaseEntityTypeDatabase: "DATABASE_ENTITY_TYPE_DATABASE",
} as const;

/**
 * Required. The rule scope
 */
export type MappingRuleRuleScope = (typeof MappingRuleRuleScope)[keyof typeof MappingRuleRuleScope];

export const MappingRuleState = {
    /**
     * The state of the mapping rule is unknown.
     */
    StateUnspecified: "STATE_UNSPECIFIED",
    /**
     * The rule is enabled.
     */
    Enabled: "ENABLED",
    /**
     * The rule is disabled.
     */
    Disabled: "DISABLED",
    /**
     * The rule is logically deleted.
     */
    Deleted: "DELETED",
} as const;

/**
 * Optional. The mapping rule state
 */
export type MappingRuleState = (typeof MappingRuleState)[keyof typeof MappingRuleState];

export const MigrationJobState = {
    /**
     * The state of the migration job is unknown.
     */
    StateUnspecified: "STATE_UNSPECIFIED",
    /**
     * The migration job is down for maintenance.
     */
    Maintenance: "MAINTENANCE",
    /**
     * The migration job is in draft mode and no resources are created.
     */
    Draft: "DRAFT",
    /**
     * The migration job is being created.
     */
    Creating: "CREATING",
    /**
     * The migration job is created and not started.
     */
    NotStarted: "NOT_STARTED",
    /**
     * The migration job is running.
     */
    Running: "RUNNING",
    /**
     * The migration job failed.
     */
    Failed: "FAILED",
    /**
     * The migration job has been completed.
     */
    Completed: "COMPLETED",
    /**
     * The migration job is being deleted.
     */
    Deleting: "DELETING",
    /**
     * The migration job is being stopped.
     */
    Stopping: "STOPPING",
    /**
     * The migration job is currently stopped.
     */
    Stopped: "STOPPED",
    /**
     * The migration job has been deleted.
     */
    Deleted: "DELETED",
    /**
     * The migration job is being updated.
     */
    Updating: "UPDATING",
    /**
     * The migration job is starting.
     */
    Starting: "STARTING",
    /**
     * The migration job is restarting.
     */
    Restarting: "RESTARTING",
    /**
     * The migration job is resuming.
     */
    Resuming: "RESUMING",
} as const;

/**
 * The current migration job state.
 */
export type MigrationJobState = (typeof MigrationJobState)[keyof typeof MigrationJobState];

export const MigrationJobType = {
    /**
     * The type of the migration job is unknown.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * The migration job is a one time migration.
     */
    OneTime: "ONE_TIME",
    /**
     * The migration job is a continuous migration.
     */
    Continuous: "CONTINUOUS",
} as const;

/**
 * Required. The migration job type.
 */
export type MigrationJobType = (typeof MigrationJobType)[keyof typeof MigrationJobType];

export const MultiEntityRenameSourceNameTransformation = {
    /**
     * Entity name transformation unspecified.
     */
    EntityNameTransformationUnspecified: "ENTITY_NAME_TRANSFORMATION_UNSPECIFIED",
    /**
     * No transformation.
     */
    EntityNameTransformationNoTransformation: "ENTITY_NAME_TRANSFORMATION_NO_TRANSFORMATION",
    /**
     * Transform to lower case.
     */
    EntityNameTransformationLowerCase: "ENTITY_NAME_TRANSFORMATION_LOWER_CASE",
    /**
     * Transform to upper case.
     */
    EntityNameTransformationUpperCase: "ENTITY_NAME_TRANSFORMATION_UPPER_CASE",
    /**
     * Transform to capitalized case.
     */
    EntityNameTransformationCapitalizedCase: "ENTITY_NAME_TRANSFORMATION_CAPITALIZED_CASE",
} as const;

/**
 * Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
 */
export type MultiEntityRenameSourceNameTransformation = (typeof MultiEntityRenameSourceNameTransformation)[keyof typeof MultiEntityRenameSourceNameTransformation];

export const PerformanceConfigDumpParallelLevel = {
    /**
     * Unknown dump parallel level. Will be defaulted to OPTIMAL.
     */
    DumpParallelLevelUnspecified: "DUMP_PARALLEL_LEVEL_UNSPECIFIED",
    /**
     * Minimal parallel level.
     */
    Min: "MIN",
    /**
     * Optimal parallel level.
     */
    Optimal: "OPTIMAL",
    /**
     * Maximum parallel level.
     */
    Max: "MAX",
} as const;

/**
 * Initial dump parallelism level.
 */
export type PerformanceConfigDumpParallelLevel = (typeof PerformanceConfigDumpParallelLevel)[keyof typeof PerformanceConfigDumpParallelLevel];

export const SourceNumericFilterNumericFilterOption = {
    /**
     * Numeric filter option unspecified
     */
    NumericFilterOptionUnspecified: "NUMERIC_FILTER_OPTION_UNSPECIFIED",
    /**
     * Numeric filter option that matches all numeric columns.
     */
    NumericFilterOptionAll: "NUMERIC_FILTER_OPTION_ALL",
    /**
     * Numeric filter option that matches columns having numeric datatypes with specified precision and scale within the limited range of filter.
     */
    NumericFilterOptionLimit: "NUMERIC_FILTER_OPTION_LIMIT",
    /**
     * Numeric filter option that matches only the numeric columns with no precision and scale specified.
     */
    NumericFilterOptionLimitless: "NUMERIC_FILTER_OPTION_LIMITLESS",
} as const;

/**
 * Required. Enum to set the option defining the datatypes numeric filter has to be applied to
 */
export type SourceNumericFilterNumericFilterOption = (typeof SourceNumericFilterNumericFilterOption)[keyof typeof SourceNumericFilterNumericFilterOption];

export const ValueListFilterValuePresentList = {
    /**
     * Value present in list unspecified
     */
    ValuePresentInListUnspecified: "VALUE_PRESENT_IN_LIST_UNSPECIFIED",
    /**
     * If the source value is in the supplied list at value_list
     */
    ValuePresentInListIfValueList: "VALUE_PRESENT_IN_LIST_IF_VALUE_LIST",
    /**
     * If the source value is not in the supplied list at value_list
     */
    ValuePresentInListIfValueNotList: "VALUE_PRESENT_IN_LIST_IF_VALUE_NOT_LIST",
} as const;

/**
 * Required. Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
 */
export type ValueListFilterValuePresentList = (typeof ValueListFilterValuePresentList)[keyof typeof ValueListFilterValuePresentList];
