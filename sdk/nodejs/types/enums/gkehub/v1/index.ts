// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type AuditLogConfigLogType = (typeof AuditLogConfigLogType)[keyof typeof AuditLogConfigLogType];

export const BinaryAuthorizationConfigEvaluationMode = {
    /**
     * Default value
     */
    EvaluationModeUnspecified: "EVALUATION_MODE_UNSPECIFIED",
    /**
     * Disable BinaryAuthorization
     */
    Disabled: "DISABLED",
    /**
     * Use Binary Authorization with the policies specified in policy_bindings.
     */
    PolicyBindings: "POLICY_BINDINGS",
} as const;

/**
 * Optional. Mode of operation for binauthz policy evaluation.
 */
export type BinaryAuthorizationConfigEvaluationMode = (typeof BinaryAuthorizationConfigEvaluationMode)[keyof typeof BinaryAuthorizationConfigEvaluationMode];

export const ConfigManagementPolicyControllerMonitoringBackendsItem = {
    /**
     * Backend cannot be determined
     */
    MonitoringBackendUnspecified: "MONITORING_BACKEND_UNSPECIFIED",
    /**
     * Prometheus backend for monitoring
     */
    Prometheus: "PROMETHEUS",
    /**
     * Stackdriver/Cloud Monitoring backend for monitoring
     */
    CloudMonitoring: "CLOUD_MONITORING",
} as const;

export type ConfigManagementPolicyControllerMonitoringBackendsItem = (typeof ConfigManagementPolicyControllerMonitoringBackendsItem)[keyof typeof ConfigManagementPolicyControllerMonitoringBackendsItem];

export const FleetObservabilityRoutingConfigMode = {
    /**
     * If UNSPECIFIED, fleet logging feature is disabled.
     */
    ModeUnspecified: "MODE_UNSPECIFIED",
    /**
     * logs will be copied to the destination project.
     */
    Copy: "COPY",
    /**
     * logs will be moved to the destination project.
     */
    Move: "MOVE",
} as const;

/**
 * mode configures the logs routing mode.
 */
export type FleetObservabilityRoutingConfigMode = (typeof FleetObservabilityRoutingConfigMode)[keyof typeof FleetObservabilityRoutingConfigMode];

export const OnPremClusterClusterType = {
    /**
     * The ClusterType is not set.
     */
    ClustertypeUnspecified: "CLUSTERTYPE_UNSPECIFIED",
    /**
     * The ClusterType is bootstrap cluster.
     */
    Bootstrap: "BOOTSTRAP",
    /**
     * The ClusterType is baremetal hybrid cluster.
     */
    Hybrid: "HYBRID",
    /**
     * The ClusterType is baremetal standalone cluster.
     */
    Standalone: "STANDALONE",
    /**
     * The ClusterType is user cluster.
     */
    User: "USER",
} as const;

/**
 * Immutable. The on prem cluster's type.
 */
export type OnPremClusterClusterType = (typeof OnPremClusterClusterType)[keyof typeof OnPremClusterClusterType];

export const OriginType = {
    /**
     * Type is unknown or not set.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * Per-Membership spec was inherited from the fleet-level default.
     */
    Fleet: "FLEET",
    /**
     * Per-Membership spec was inherited from the fleet-level default but is now out of sync with the current default.
     */
    FleetOutOfSync: "FLEET_OUT_OF_SYNC",
    /**
     * Per-Membership spec was inherited from a user specification.
     */
    User: "USER",
} as const;

/**
 * Type specifies which type of origin is set.
 */
export type OriginType = (typeof OriginType)[keyof typeof OriginType];

export const PolicyControllerHubConfigInstallSpec = {
    /**
     * Spec is unknown.
     */
    InstallSpecUnspecified: "INSTALL_SPEC_UNSPECIFIED",
    /**
     * Request to uninstall Policy Controller.
     */
    InstallSpecNotInstalled: "INSTALL_SPEC_NOT_INSTALLED",
    /**
     * Request to install and enable Policy Controller.
     */
    InstallSpecEnabled: "INSTALL_SPEC_ENABLED",
    /**
     * Request to suspend Policy Controller i.e. its webhooks. If Policy Controller is not installed, it will be installed but suspended.
     */
    InstallSpecSuspended: "INSTALL_SPEC_SUSPENDED",
    /**
     * Request to stop all reconciliation actions by PoCo Hub controller. This is a breakglass mechanism to stop PoCo Hub from affecting cluster resources.
     */
    InstallSpecDetached: "INSTALL_SPEC_DETACHED",
} as const;

/**
 * The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
 */
export type PolicyControllerHubConfigInstallSpec = (typeof PolicyControllerHubConfigInstallSpec)[keyof typeof PolicyControllerHubConfigInstallSpec];

export const PolicyControllerMonitoringConfigBackendsItem = {
    /**
     * Backend cannot be determined
     */
    MonitoringBackendUnspecified: "MONITORING_BACKEND_UNSPECIFIED",
    /**
     * Prometheus backend for monitoring
     */
    Prometheus: "PROMETHEUS",
    /**
     * Stackdriver/Cloud Monitoring backend for monitoring
     */
    CloudMonitoring: "CLOUD_MONITORING",
} as const;

export type PolicyControllerMonitoringConfigBackendsItem = (typeof PolicyControllerMonitoringConfigBackendsItem)[keyof typeof PolicyControllerMonitoringConfigBackendsItem];

export const PolicyControllerPolicyControllerDeploymentConfigPodAffinity = {
    /**
     * No affinity configuration has been specified.
     */
    AffinityUnspecified: "AFFINITY_UNSPECIFIED",
    /**
     * Affinity configurations will be removed from the deployment.
     */
    NoAffinity: "NO_AFFINITY",
    /**
     * Anti-affinity configuration will be applied to this deployment. Default for admissions deployment.
     */
    AntiAffinity: "ANTI_AFFINITY",
} as const;

/**
 * Pod affinity configuration.
 */
export type PolicyControllerPolicyControllerDeploymentConfigPodAffinity = (typeof PolicyControllerPolicyControllerDeploymentConfigPodAffinity)[keyof typeof PolicyControllerPolicyControllerDeploymentConfigPodAffinity];

export const PolicyControllerTemplateLibraryConfigInstallation = {
    /**
     * No installation strategy has been specified.
     */
    InstallationUnspecified: "INSTALLATION_UNSPECIFIED",
    /**
     * Do not install the template library.
     */
    NotInstalled: "NOT_INSTALLED",
    /**
     * Install the entire template library.
     */
    All: "ALL",
} as const;

/**
 * Configures the manner in which the template library is installed on the cluster.
 */
export type PolicyControllerTemplateLibraryConfigInstallation = (typeof PolicyControllerTemplateLibraryConfigInstallation)[keyof typeof PolicyControllerTemplateLibraryConfigInstallation];

export const RolePredefinedRole = {
    /**
     * UNKNOWN
     */
    Unknown: "UNKNOWN",
    /**
     * ADMIN has EDIT and RBAC permissions
     */
    Admin: "ADMIN",
    /**
     * EDIT can edit all resources except RBAC
     */
    Edit: "EDIT",
    /**
     * VIEW can only read resources
     */
    View: "VIEW",
    /**
     * ANTHOS_SUPPORT gives Google Support read-only access to a number of cluster resources.
     */
    AnthosSupport: "ANTHOS_SUPPORT",
} as const;

/**
 * predefined_role is the Kubernetes default role to use
 */
export type RolePredefinedRole = (typeof RolePredefinedRole)[keyof typeof RolePredefinedRole];

export const SecurityPostureConfigMode = {
    /**
     * Default value not specified.
     */
    ModeUnspecified: "MODE_UNSPECIFIED",
    /**
     * Disables Security Posture features on the cluster.
     */
    Disabled: "DISABLED",
    /**
     * Applies Security Posture features on the cluster.
     */
    Basic: "BASIC",
} as const;

/**
 * Sets which mode to use for Security Posture features.
 */
export type SecurityPostureConfigMode = (typeof SecurityPostureConfigMode)[keyof typeof SecurityPostureConfigMode];

export const SecurityPostureConfigVulnerabilityMode = {
    /**
     * Default value not specified.
     */
    VulnerabilityModeUnspecified: "VULNERABILITY_MODE_UNSPECIFIED",
    /**
     * Disables vulnerability scanning on the cluster.
     */
    VulnerabilityDisabled: "VULNERABILITY_DISABLED",
    /**
     * Applies basic vulnerability scanning on the cluster.
     */
    VulnerabilityBasic: "VULNERABILITY_BASIC",
    /**
     * Applies the Security Posture's vulnerability on cluster Enterprise level features.
     */
    VulnerabilityEnterprise: "VULNERABILITY_ENTERPRISE",
} as const;

/**
 * Sets which mode to use for vulnerability scanning.
 */
export type SecurityPostureConfigVulnerabilityMode = (typeof SecurityPostureConfigVulnerabilityMode)[keyof typeof SecurityPostureConfigVulnerabilityMode];

export const ServiceMeshMembershipSpecControlPlane = {
    /**
     * Unspecified
     */
    ControlPlaneManagementUnspecified: "CONTROL_PLANE_MANAGEMENT_UNSPECIFIED",
    /**
     * Google should provision a control plane revision and make it available in the cluster. Google will enroll this revision in a release channel and keep it up to date. The control plane revision may be a managed service, or a managed install.
     */
    Automatic: "AUTOMATIC",
    /**
     * User will manually configure the control plane (e.g. via CLI, or via the ControlPlaneRevision KRM API)
     */
    Manual: "MANUAL",
} as const;

/**
 * Deprecated: use `management` instead Enables automatic control plane management.
 */
export type ServiceMeshMembershipSpecControlPlane = (typeof ServiceMeshMembershipSpecControlPlane)[keyof typeof ServiceMeshMembershipSpecControlPlane];

export const ServiceMeshMembershipSpecManagement = {
    /**
     * Unspecified
     */
    ManagementUnspecified: "MANAGEMENT_UNSPECIFIED",
    /**
     * Google should manage my Service Mesh for the cluster.
     */
    ManagementAutomatic: "MANAGEMENT_AUTOMATIC",
    /**
     * User will manually configure their service mesh components.
     */
    ManagementManual: "MANAGEMENT_MANUAL",
} as const;

/**
 * Enables automatic Service Mesh management.
 */
export type ServiceMeshMembershipSpecManagement = (typeof ServiceMeshMembershipSpecManagement)[keyof typeof ServiceMeshMembershipSpecManagement];
