// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ArgumentArgumentKind = {
    /**
     * Default value.
     */
    ArgumentKindUnspecified: "ARGUMENT_KIND_UNSPECIFIED",
    /**
     * The argument is a variable with fully specified type, which can be a struct or an array, but not a table.
     */
    FixedType: "FIXED_TYPE",
    /**
     * The argument is any type, including struct or array, but not a table. To be added: FIXED_TABLE, ANY_TABLE
     */
    AnyType: "ANY_TYPE",
} as const;

/**
 * Optional. Defaults to FIXED_TYPE.
 */
export type ArgumentArgumentKind = (typeof ArgumentArgumentKind)[keyof typeof ArgumentArgumentKind];

export const ArgumentMode = {
    /**
     * Default value.
     */
    ModeUnspecified: "MODE_UNSPECIFIED",
    /**
     * The argument is input-only.
     */
    In: "IN",
    /**
     * The argument is output-only.
     */
    Out: "OUT",
    /**
     * The argument is both an input and an output.
     */
    Inout: "INOUT",
} as const;

/**
 * Optional. Specifies whether the argument is input or output. Can be set for procedures only.
 */
export type ArgumentMode = (typeof ArgumentMode)[keyof typeof ArgumentMode];

export const AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type AuditLogConfigLogType = (typeof AuditLogConfigLogType)[keyof typeof AuditLogConfigLogType];

export const BigLakeConfigurationFileFormat = {
    /**
     * Default Value.
     */
    FileFormatUnspecified: "FILE_FORMAT_UNSPECIFIED",
    /**
     * Apache Parquet format.
     */
    Parquet: "PARQUET",
} as const;

/**
 * Required. The file format the table data is stored in.
 */
export type BigLakeConfigurationFileFormat = (typeof BigLakeConfigurationFileFormat)[keyof typeof BigLakeConfigurationFileFormat];

export const BigLakeConfigurationTableFormat = {
    /**
     * Default Value.
     */
    TableFormatUnspecified: "TABLE_FORMAT_UNSPECIFIED",
    /**
     * Apache Iceberg format.
     */
    Iceberg: "ICEBERG",
} as const;

/**
 * Required. The table format the metadata only snapshots are stored in.
 */
export type BigLakeConfigurationTableFormat = (typeof BigLakeConfigurationTableFormat)[keyof typeof BigLakeConfigurationTableFormat];

export const DatasetAccessEntryTargetTypesItem = {
    /**
     * Do not use. You must set a target type explicitly.
     */
    TargetTypeUnspecified: "TARGET_TYPE_UNSPECIFIED",
    /**
     * This entry applies to views in the dataset.
     */
    Views: "VIEWS",
    /**
     * This entry applies to routines in the dataset.
     */
    Routines: "ROUTINES",
} as const;

export type DatasetAccessEntryTargetTypesItem = (typeof DatasetAccessEntryTargetTypesItem)[keyof typeof DatasetAccessEntryTargetTypesItem];

export const DatasetDefaultRoundingMode = {
    /**
     * Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO.
     */
    RoundingModeUnspecified: "ROUNDING_MODE_UNSPECIFIED",
    /**
     * ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero when applying precision and scale upon writing of NUMERIC and BIGNUMERIC values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5, 1.6, 1.7, 1.8, 1.9 => 2
     */
    RoundHalfAwayFromZero: "ROUND_HALF_AWAY_FROM_ZERO",
    /**
     * ROUND_HALF_EVEN rounds half values to the nearest even value when applying precision and scale upon writing of NUMERIC and BIGNUMERIC values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5 => 2 1.6, 1.7, 1.8, 1.9 => 2 2.5 => 2
     */
    RoundHalfEven: "ROUND_HALF_EVEN",
} as const;

/**
 * Optional. Defines the default rounding mode specification of new tables created within this dataset. During table creation, if this field is specified, the table within this dataset will inherit the default rounding mode of the dataset. Setting the default rounding mode on a table overrides this option. Existing tables in the dataset are unaffected. If columns are defined during that table creation, they will immediately inherit the table's default rounding mode, unless otherwise specified.
 */
export type DatasetDefaultRoundingMode = (typeof DatasetDefaultRoundingMode)[keyof typeof DatasetDefaultRoundingMode];

export const DatasetStorageBillingModel = {
    /**
     * Value not set.
     */
    StorageBillingModelUnspecified: "STORAGE_BILLING_MODEL_UNSPECIFIED",
    /**
     * Billing for logical bytes.
     */
    Logical: "LOGICAL",
    /**
     * Billing for physical bytes.
     */
    Physical: "PHYSICAL",
} as const;

/**
 * Optional. Updates storage_billing_model for the dataset.
 */
export type DatasetStorageBillingModel = (typeof DatasetStorageBillingModel)[keyof typeof DatasetStorageBillingModel];

export const ExternalDataConfigurationDecimalTargetTypesItem = {
    /**
     * Invalid type.
     */
    DecimalTargetTypeUnspecified: "DECIMAL_TARGET_TYPE_UNSPECIFIED",
    /**
     * Decimal values could be converted to NUMERIC type.
     */
    Numeric: "NUMERIC",
    /**
     * Decimal values could be converted to BIGNUMERIC type.
     */
    Bignumeric: "BIGNUMERIC",
    /**
     * Decimal values could be converted to STRING type.
     */
    String: "STRING",
} as const;

export type ExternalDataConfigurationDecimalTargetTypesItem = (typeof ExternalDataConfigurationDecimalTargetTypesItem)[keyof typeof ExternalDataConfigurationDecimalTargetTypesItem];

export const ExternalDataConfigurationFileSetSpecType = {
    /**
     * This option expands source URIs by listing files from the object store. It is the default behavior if FileSetSpecType is not set.
     */
    FileSetSpecTypeFileSystemMatch: "FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH",
    /**
     * This option indicates that the provided URIs are newline-delimited manifest files, with one URI per line. Wildcard URIs are not supported.
     */
    FileSetSpecTypeNewLineDelimitedManifest: "FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST",
} as const;

/**
 * Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
 */
export type ExternalDataConfigurationFileSetSpecType = (typeof ExternalDataConfigurationFileSetSpecType)[keyof typeof ExternalDataConfigurationFileSetSpecType];

export const ExternalDataConfigurationJsonExtension = {
    /**
     * The default if provided value is not one included in the enum, or the value is not specified. The source formate is parsed without any modification.
     */
    JsonExtensionUnspecified: "JSON_EXTENSION_UNSPECIFIED",
    /**
     * Use GeoJSON variant of JSON. See https://tools.ietf.org/html/rfc7946.
     */
    Geojson: "GEOJSON",
} as const;

/**
 * Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
 */
export type ExternalDataConfigurationJsonExtension = (typeof ExternalDataConfigurationJsonExtension)[keyof typeof ExternalDataConfigurationJsonExtension];

export const ExternalDataConfigurationMetadataCacheMode = {
    /**
     * Unspecified metadata cache mode.
     */
    MetadataCacheModeUnspecified: "METADATA_CACHE_MODE_UNSPECIFIED",
    /**
     * Set this mode to trigger automatic background refresh of metadata cache from the external source. Queries will use the latest available cache version within the table's maxStaleness interval.
     */
    Automatic: "AUTOMATIC",
    /**
     * Set this mode to enable triggering manual refresh of the metadata cache from external source. Queries will use the latest manually triggered cache version within the table's maxStaleness interval.
     */
    Manual: "MANUAL",
} as const;

/**
 * Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
 */
export type ExternalDataConfigurationMetadataCacheMode = (typeof ExternalDataConfigurationMetadataCacheMode)[keyof typeof ExternalDataConfigurationMetadataCacheMode];

export const ExternalDataConfigurationObjectMetadata = {
    /**
     * Unspecified by default.
     */
    ObjectMetadataUnspecified: "OBJECT_METADATA_UNSPECIFIED",
    /**
     * A synonym for `SIMPLE`.
     */
    Directory: "DIRECTORY",
    /**
     * Directory listing of objects.
     */
    Simple: "SIMPLE",
} as const;

/**
 * Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
 */
export type ExternalDataConfigurationObjectMetadata = (typeof ExternalDataConfigurationObjectMetadata)[keyof typeof ExternalDataConfigurationObjectMetadata];

export const JobConfigurationLoadDecimalTargetTypesItem = {
    /**
     * Invalid type.
     */
    DecimalTargetTypeUnspecified: "DECIMAL_TARGET_TYPE_UNSPECIFIED",
    /**
     * Decimal values could be converted to NUMERIC type.
     */
    Numeric: "NUMERIC",
    /**
     * Decimal values could be converted to BIGNUMERIC type.
     */
    Bignumeric: "BIGNUMERIC",
    /**
     * Decimal values could be converted to STRING type.
     */
    String: "STRING",
} as const;

export type JobConfigurationLoadDecimalTargetTypesItem = (typeof JobConfigurationLoadDecimalTargetTypesItem)[keyof typeof JobConfigurationLoadDecimalTargetTypesItem];

export const JobConfigurationLoadFileSetSpecType = {
    /**
     * This option expands source URIs by listing files from the object store. It is the default behavior if FileSetSpecType is not set.
     */
    FileSetSpecTypeFileSystemMatch: "FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH",
    /**
     * This option indicates that the provided URIs are newline-delimited manifest files, with one URI per line. Wildcard URIs are not supported.
     */
    FileSetSpecTypeNewLineDelimitedManifest: "FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST",
} as const;

/**
 * Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.
 */
export type JobConfigurationLoadFileSetSpecType = (typeof JobConfigurationLoadFileSetSpecType)[keyof typeof JobConfigurationLoadFileSetSpecType];

export const JobConfigurationLoadJsonExtension = {
    /**
     * The default if provided value is not one included in the enum, or the value is not specified. The source formate is parsed without any modification.
     */
    JsonExtensionUnspecified: "JSON_EXTENSION_UNSPECIFIED",
    /**
     * Use GeoJSON variant of JSON. See https://tools.ietf.org/html/rfc7946.
     */
    Geojson: "GEOJSON",
} as const;

/**
 * Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
 */
export type JobConfigurationLoadJsonExtension = (typeof JobConfigurationLoadJsonExtension)[keyof typeof JobConfigurationLoadJsonExtension];

export const JobConfigurationTableCopyOperationType = {
    /**
     * Unspecified operation type.
     */
    OperationTypeUnspecified: "OPERATION_TYPE_UNSPECIFIED",
    /**
     * The source and destination table have the same table type.
     */
    Copy: "COPY",
    /**
     * The source table type is TABLE and the destination table type is SNAPSHOT.
     */
    Snapshot: "SNAPSHOT",
    /**
     * The source table type is SNAPSHOT and the destination table type is TABLE.
     */
    Restore: "RESTORE",
    /**
     * The source and destination table have the same table type, but only bill for unique data.
     */
    Clone: "CLONE",
} as const;

/**
 * Optional. Supported operation types in table copy job.
 */
export type JobConfigurationTableCopyOperationType = (typeof JobConfigurationTableCopyOperationType)[keyof typeof JobConfigurationTableCopyOperationType];

export const RoutineDataGovernanceType = {
    /**
     * The data governance type is unspecified.
     */
    DataGovernanceTypeUnspecified: "DATA_GOVERNANCE_TYPE_UNSPECIFIED",
    /**
     * The data governance type is data masking.
     */
    DataMasking: "DATA_MASKING",
} as const;

/**
 * Optional. If set to `DATA_MASKING`, the function is validated and made available as a masking function. For more information, see [Create custom masking routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).
 */
export type RoutineDataGovernanceType = (typeof RoutineDataGovernanceType)[keyof typeof RoutineDataGovernanceType];

export const RoutineDeterminismLevel = {
    /**
     * The determinism of the UDF is unspecified.
     */
    DeterminismLevelUnspecified: "DETERMINISM_LEVEL_UNSPECIFIED",
    /**
     * The UDF is deterministic, meaning that 2 function calls with the same inputs always produce the same result, even across 2 query runs.
     */
    Deterministic: "DETERMINISTIC",
    /**
     * The UDF is not deterministic.
     */
    NotDeterministic: "NOT_DETERMINISTIC",
} as const;

/**
 * Optional. The determinism level of the JavaScript UDF, if defined.
 */
export type RoutineDeterminismLevel = (typeof RoutineDeterminismLevel)[keyof typeof RoutineDeterminismLevel];

export const RoutineLanguage = {
    /**
     * Default value.
     */
    LanguageUnspecified: "LANGUAGE_UNSPECIFIED",
    /**
     * SQL language.
     */
    Sql: "SQL",
    /**
     * JavaScript language.
     */
    Javascript: "JAVASCRIPT",
    /**
     * Python language.
     */
    Python: "PYTHON",
    /**
     * Java language.
     */
    Java: "JAVA",
    /**
     * Scala language.
     */
    Scala: "SCALA",
} as const;

/**
 * Optional. Defaults to "SQL" if remote_function_options field is absent, not set otherwise.
 */
export type RoutineLanguage = (typeof RoutineLanguage)[keyof typeof RoutineLanguage];

export const RoutineRoutineType = {
    /**
     * Default value.
     */
    RoutineTypeUnspecified: "ROUTINE_TYPE_UNSPECIFIED",
    /**
     * Non-built-in persistent scalar function.
     */
    ScalarFunction: "SCALAR_FUNCTION",
    /**
     * Stored procedure.
     */
    Procedure: "PROCEDURE",
    /**
     * Non-built-in persistent TVF.
     */
    TableValuedFunction: "TABLE_VALUED_FUNCTION",
    /**
     * Non-built-in persistent aggregate function.
     */
    AggregateFunction: "AGGREGATE_FUNCTION",
} as const;

/**
 * Required. The type of routine.
 */
export type RoutineRoutineType = (typeof RoutineRoutineType)[keyof typeof RoutineRoutineType];

export const RoutineSecurityMode = {
    /**
     * The security mode of the routine is unspecified.
     */
    SecurityModeUnspecified: "SECURITY_MODE_UNSPECIFIED",
    /**
     * The routine is to be executed with the privileges of the user who defines it.
     */
    Definer: "DEFINER",
    /**
     * The routine is to be executed with the privileges of the user who invokes it.
     */
    Invoker: "INVOKER",
} as const;

/**
 * Optional. The security mode of the routine, if defined. If not defined, the security mode is automatically determined from the routine's configuration.
 */
export type RoutineSecurityMode = (typeof RoutineSecurityMode)[keyof typeof RoutineSecurityMode];

export const ScriptOptionsKeyResultStatement = {
    /**
     * Default value.
     */
    KeyResultStatementKindUnspecified: "KEY_RESULT_STATEMENT_KIND_UNSPECIFIED",
    /**
     * The last result determines the key result.
     */
    Last: "LAST",
    /**
     * The first SELECT statement determines the key result.
     */
    FirstSelect: "FIRST_SELECT",
} as const;

/**
 * Determines which statement in the script represents the "key result", used to populate the schema and query results of the script job. Default is LAST.
 */
export type ScriptOptionsKeyResultStatement = (typeof ScriptOptionsKeyResultStatement)[keyof typeof ScriptOptionsKeyResultStatement];

export const StandardSqlDataTypeTypeKind = {
    /**
     * Invalid type.
     */
    TypeKindUnspecified: "TYPE_KIND_UNSPECIFIED",
    /**
     * Encoded as a string in decimal format.
     */
    Int64: "INT64",
    /**
     * Encoded as a boolean "false" or "true".
     */
    Bool: "BOOL",
    /**
     * Encoded as a number, or string "NaN", "Infinity" or "-Infinity".
     */
    Float64: "FLOAT64",
    /**
     * Encoded as a string value.
     */
    String: "STRING",
    /**
     * Encoded as a base64 string per RFC 4648, section 4.
     */
    Bytes: "BYTES",
    /**
     * Encoded as an RFC 3339 timestamp with mandatory "Z" time zone string: 1985-04-12T23:20:50.52Z
     */
    Timestamp: "TIMESTAMP",
    /**
     * Encoded as RFC 3339 full-date format string: 1985-04-12
     */
    Date: "DATE",
    /**
     * Encoded as RFC 3339 partial-time format string: 23:20:50.52
     */
    Time: "TIME",
    /**
     * Encoded as RFC 3339 full-date "T" partial-time: 1985-04-12T23:20:50.52
     */
    Datetime: "DATETIME",
    /**
     * Encoded as fully qualified 3 part: 0-5 15 2:30:45.6
     */
    Interval: "INTERVAL",
    /**
     * Encoded as WKT
     */
    Geography: "GEOGRAPHY",
    /**
     * Encoded as a decimal string.
     */
    Numeric: "NUMERIC",
    /**
     * Encoded as a decimal string.
     */
    Bignumeric: "BIGNUMERIC",
    /**
     * Encoded as a string.
     */
    Json: "JSON",
    /**
     * Encoded as a list with types matching Type.array_type.
     */
    Array: "ARRAY",
    /**
     * Encoded as a list with fields of type Type.struct_type[i]. List is used because a JSON object cannot have duplicate field names.
     */
    Struct: "STRUCT",
    /**
     * Encoded as a pair with types matching range_element_type. Pairs must begin with "[", end with ")", and be separated by ", ".
     */
    Range: "RANGE",
} as const;

/**
 * Required. The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
 */
export type StandardSqlDataTypeTypeKind = (typeof StandardSqlDataTypeTypeKind)[keyof typeof StandardSqlDataTypeTypeKind];

export const TableDefaultRoundingMode = {
    /**
     * Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO.
     */
    RoundingModeUnspecified: "ROUNDING_MODE_UNSPECIFIED",
    /**
     * ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero when applying precision and scale upon writing of NUMERIC and BIGNUMERIC values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5, 1.6, 1.7, 1.8, 1.9 => 2
     */
    RoundHalfAwayFromZero: "ROUND_HALF_AWAY_FROM_ZERO",
    /**
     * ROUND_HALF_EVEN rounds half values to the nearest even value when applying precision and scale upon writing of NUMERIC and BIGNUMERIC values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5 => 2 1.6, 1.7, 1.8, 1.9 => 2 2.5 => 2
     */
    RoundHalfEven: "ROUND_HALF_EVEN",
} as const;

/**
 * Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.
 */
export type TableDefaultRoundingMode = (typeof TableDefaultRoundingMode)[keyof typeof TableDefaultRoundingMode];

export const TableFieldSchemaRoundingMode = {
    /**
     * Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO.
     */
    RoundingModeUnspecified: "ROUNDING_MODE_UNSPECIFIED",
    /**
     * ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero when applying precision and scale upon writing of NUMERIC and BIGNUMERIC values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5, 1.6, 1.7, 1.8, 1.9 => 2
     */
    RoundHalfAwayFromZero: "ROUND_HALF_AWAY_FROM_ZERO",
    /**
     * ROUND_HALF_EVEN rounds half values to the nearest even value when applying precision and scale upon writing of NUMERIC and BIGNUMERIC values. For Scale: 0 1.1, 1.2, 1.3, 1.4 => 1 1.5 => 2 1.6, 1.7, 1.8, 1.9 => 2 2.5 => 2
     */
    RoundHalfEven: "ROUND_HALF_EVEN",
} as const;

/**
 * Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.
 */
export type TableFieldSchemaRoundingMode = (typeof TableFieldSchemaRoundingMode)[keyof typeof TableFieldSchemaRoundingMode];
