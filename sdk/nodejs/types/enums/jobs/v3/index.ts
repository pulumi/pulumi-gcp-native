// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const CompanySize = {
    /**
     * Default value if the size is not specified.
     */
    CompanySizeUnspecified: "COMPANY_SIZE_UNSPECIFIED",
    /**
     * The company has less than 50 employees.
     */
    Mini: "MINI",
    /**
     * The company has between 50 and 99 employees.
     */
    Small: "SMALL",
    /**
     * The company has between 100 and 499 employees.
     */
    Smedium: "SMEDIUM",
    /**
     * The company has between 500 and 999 employees.
     */
    Medium: "MEDIUM",
    /**
     * The company has between 1,000 and 4,999 employees.
     */
    Big: "BIG",
    /**
     * The company has between 5,000 and 9,999 employees.
     */
    Bigger: "BIGGER",
    /**
     * The company has 10,000 or more employees.
     */
    Giant: "GIANT",
} as const;

/**
 * Optional. The employer's company size.
 */
export type CompanySize = (typeof CompanySize)[keyof typeof CompanySize];

export const CompensationEntryType = {
    /**
     * Default value.
     */
    CompensationTypeUnspecified: "COMPENSATION_TYPE_UNSPECIFIED",
    /**
     * Base compensation: Refers to the fixed amount of money paid to an employee by an employer in return for work performed. Base compensation does not include benefits, bonuses or any other potential compensation from an employer.
     */
    Base: "BASE",
    /**
     * Bonus.
     */
    Bonus: "BONUS",
    /**
     * Signing bonus.
     */
    SigningBonus: "SIGNING_BONUS",
    /**
     * Equity.
     */
    Equity: "EQUITY",
    /**
     * Profit sharing.
     */
    ProfitSharing: "PROFIT_SHARING",
    /**
     * Commission.
     */
    Commissions: "COMMISSIONS",
    /**
     * Tips.
     */
    Tips: "TIPS",
    /**
     * Other compensation type.
     */
    OtherCompensationType: "OTHER_COMPENSATION_TYPE",
} as const;

/**
 * Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.
 */
export type CompensationEntryType = (typeof CompensationEntryType)[keyof typeof CompensationEntryType];

export const CompensationEntryUnit = {
    /**
     * Default value.
     */
    CompensationUnitUnspecified: "COMPENSATION_UNIT_UNSPECIFIED",
    /**
     * Hourly.
     */
    Hourly: "HOURLY",
    /**
     * Daily.
     */
    Daily: "DAILY",
    /**
     * Weekly
     */
    Weekly: "WEEKLY",
    /**
     * Monthly.
     */
    Monthly: "MONTHLY",
    /**
     * Yearly.
     */
    Yearly: "YEARLY",
    /**
     * One time.
     */
    OneTime: "ONE_TIME",
    /**
     * Other compensation units.
     */
    OtherCompensationUnit: "OTHER_COMPENSATION_UNIT",
} as const;

/**
 * Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.
 */
export type CompensationEntryUnit = (typeof CompensationEntryUnit)[keyof typeof CompensationEntryUnit];

export const JobDegreeTypesItem = {
    /**
     * Default value. Represents no degree, or early childhood education. Maps to ISCED code 0. Ex) Kindergarten
     */
    DegreeTypeUnspecified: "DEGREE_TYPE_UNSPECIFIED",
    /**
     * Primary education which is typically the first stage of compulsory education. ISCED code 1. Ex) Elementary school
     */
    PrimaryEducation: "PRIMARY_EDUCATION",
    /**
     * Lower secondary education; First stage of secondary education building on primary education, typically with a more subject-oriented curriculum. ISCED code 2. Ex) Middle school
     */
    LowerSecondaryEducation: "LOWER_SECONDARY_EDUCATION",
    /**
     * Middle education; Second/final stage of secondary education preparing for tertiary education and/or providing skills relevant to employment. Usually with an increased range of subject options and streams. ISCED code 3. Ex) High school
     */
    UpperSecondaryEducation: "UPPER_SECONDARY_EDUCATION",
    /**
     * Adult Remedial Education; Programmes providing learning experiences that build on secondary education and prepare for labour market entry and/or tertiary education. The content is broader than secondary but not as complex as tertiary education. ISCED code 4.
     */
    AdultRemedialEducation: "ADULT_REMEDIAL_EDUCATION",
    /**
     * Associate's or equivalent; Short first tertiary programmes that are typically practically-based, occupationally-specific and prepare for labour market entry. These programmes may also provide a pathway to other tertiary programmes. ISCED code 5.
     */
    AssociatesOrEquivalent: "ASSOCIATES_OR_EQUIVALENT",
    /**
     * Bachelor's or equivalent; Programmes designed to provide intermediate academic and/or professional knowledge, skills and competencies leading to a first tertiary degree or equivalent qualification. ISCED code 6.
     */
    BachelorsOrEquivalent: "BACHELORS_OR_EQUIVALENT",
    /**
     * Master's or equivalent; Programmes designed to provide advanced academic and/or professional knowledge, skills and competencies leading to a second tertiary degree or equivalent qualification. ISCED code 7.
     */
    MastersOrEquivalent: "MASTERS_OR_EQUIVALENT",
    /**
     * Doctoral or equivalent; Programmes designed primarily to lead to an advanced research qualification, usually concluding with the submission and defense of a substantive dissertation of publishable quality based on original research. ISCED code 8.
     */
    DoctoralOrEquivalent: "DOCTORAL_OR_EQUIVALENT",
} as const;

export type JobDegreeTypesItem = (typeof JobDegreeTypesItem)[keyof typeof JobDegreeTypesItem];

export const JobDerivedInfoJobCategoriesItem = {
    /**
     * The default value if the category isn't specified.
     */
    JobCategoryUnspecified: "JOB_CATEGORY_UNSPECIFIED",
    /**
     * An accounting and finance job, such as an Accountant.
     */
    AccountingAndFinance: "ACCOUNTING_AND_FINANCE",
    /**
     * An administrative and office job, such as an Administrative Assistant.
     */
    AdministrativeAndOffice: "ADMINISTRATIVE_AND_OFFICE",
    /**
     * An advertising and marketing job, such as Marketing Manager.
     */
    AdvertisingAndMarketing: "ADVERTISING_AND_MARKETING",
    /**
     * An animal care job, such as Veterinarian.
     */
    AnimalCare: "ANIMAL_CARE",
    /**
     * An art, fashion, or design job, such as Designer.
     */
    ArtFashionAndDesign: "ART_FASHION_AND_DESIGN",
    /**
     * A business operations job, such as Business Operations Manager.
     */
    BusinessOperations: "BUSINESS_OPERATIONS",
    /**
     * A cleaning and facilities job, such as Custodial Staff.
     */
    CleaningAndFacilities: "CLEANING_AND_FACILITIES",
    /**
     * A computer and IT job, such as Systems Administrator.
     */
    ComputerAndIt: "COMPUTER_AND_IT",
    /**
     * A construction job, such as General Laborer.
     */
    Construction: "CONSTRUCTION",
    /**
     * A customer service job, such s Cashier.
     */
    CustomerService: "CUSTOMER_SERVICE",
    /**
     * An education job, such as School Teacher.
     */
    Education: "EDUCATION",
    /**
     * An entertainment and travel job, such as Flight Attendant.
     */
    EntertainmentAndTravel: "ENTERTAINMENT_AND_TRAVEL",
    /**
     * A farming or outdoor job, such as Park Ranger.
     */
    FarmingAndOutdoors: "FARMING_AND_OUTDOORS",
    /**
     * A healthcare job, such as Registered Nurse.
     */
    Healthcare: "HEALTHCARE",
    /**
     * A human resources job, such as Human Resources Director.
     */
    HumanResources: "HUMAN_RESOURCES",
    /**
     * An installation, maintenance, or repair job, such as Electrician.
     */
    InstallationMaintenanceAndRepair: "INSTALLATION_MAINTENANCE_AND_REPAIR",
    /**
     * A legal job, such as Law Clerk.
     */
    Legal: "LEGAL",
    /**
     * A management job, often used in conjunction with another category, such as Store Manager.
     */
    Management: "MANAGEMENT",
    /**
     * A manufacturing or warehouse job, such as Assembly Technician.
     */
    ManufacturingAndWarehouse: "MANUFACTURING_AND_WAREHOUSE",
    /**
     * A media, communications, or writing job, such as Media Relations.
     */
    MediaCommunicationsAndWriting: "MEDIA_COMMUNICATIONS_AND_WRITING",
    /**
     * An oil, gas or mining job, such as Offshore Driller.
     */
    OilGasAndMining: "OIL_GAS_AND_MINING",
    /**
     * A personal care and services job, such as Hair Stylist.
     */
    PersonalCareAndServices: "PERSONAL_CARE_AND_SERVICES",
    /**
     * A protective services job, such as Security Guard.
     */
    ProtectiveServices: "PROTECTIVE_SERVICES",
    /**
     * A real estate job, such as Buyer's Agent.
     */
    RealEstate: "REAL_ESTATE",
    /**
     * A restaurant and hospitality job, such as Restaurant Server.
     */
    RestaurantAndHospitality: "RESTAURANT_AND_HOSPITALITY",
    /**
     * A sales and/or retail job, such Sales Associate.
     */
    SalesAndRetail: "SALES_AND_RETAIL",
    /**
     * A science and engineering job, such as Lab Technician.
     */
    ScienceAndEngineering: "SCIENCE_AND_ENGINEERING",
    /**
     * A social services or non-profit job, such as Case Worker.
     */
    SocialServicesAndNonProfit: "SOCIAL_SERVICES_AND_NON_PROFIT",
    /**
     * A sports, fitness, or recreation job, such as Personal Trainer.
     */
    SportsFitnessAndRecreation: "SPORTS_FITNESS_AND_RECREATION",
    /**
     * A transportation or logistics job, such as Truck Driver.
     */
    TransportationAndLogistics: "TRANSPORTATION_AND_LOGISTICS",
} as const;

export type JobDerivedInfoJobCategoriesItem = (typeof JobDerivedInfoJobCategoriesItem)[keyof typeof JobDerivedInfoJobCategoriesItem];

export const JobEmploymentTypesItem = {
    /**
     * The default value if the employment type is not specified.
     */
    EmploymentTypeUnspecified: "EMPLOYMENT_TYPE_UNSPECIFIED",
    /**
     * The job requires working a number of hours that constitute full time employment, typically 40 or more hours per week.
     */
    FullTime: "FULL_TIME",
    /**
     * The job entails working fewer hours than a full time job, typically less than 40 hours a week.
     */
    PartTime: "PART_TIME",
    /**
     * The job is offered as a contracted, as opposed to a salaried employee, position.
     */
    Contractor: "CONTRACTOR",
    /**
     * The job is offered as a contracted position with the understanding that it's converted into a full-time position at the end of the contract. Jobs of this type are also returned by a search for EmploymentType.CONTRACTOR jobs.
     */
    ContractToHire: "CONTRACT_TO_HIRE",
    /**
     * The job is offered as a temporary employment opportunity, usually a short-term engagement.
     */
    Temporary: "TEMPORARY",
    /**
     * The job is a fixed-term opportunity for students or entry-level job seekers to obtain on-the-job training, typically offered as a summer position.
     */
    Intern: "INTERN",
    /**
     * The is an opportunity for an individual to volunteer, where there's no expectation of compensation for the provided services.
     */
    Volunteer: "VOLUNTEER",
    /**
     * The job requires an employee to work on an as-needed basis with a flexible schedule.
     */
    PerDiem: "PER_DIEM",
    /**
     * The job involves employing people in remote areas and flying them temporarily to the work site instead of relocating employees and their families permanently.
     */
    FlyInFlyOut: "FLY_IN_FLY_OUT",
    /**
     * The job does not fit any of the other listed types.
     */
    OtherEmploymentType: "OTHER_EMPLOYMENT_TYPE",
} as const;

export type JobEmploymentTypesItem = (typeof JobEmploymentTypesItem)[keyof typeof JobEmploymentTypesItem];

export const JobJobBenefitsItem = {
    /**
     * Default value if the type is not specified.
     */
    JobBenefitUnspecified: "JOB_BENEFIT_UNSPECIFIED",
    /**
     * The job includes access to programs that support child care, such as daycare.
     */
    ChildCare: "CHILD_CARE",
    /**
     * The job includes dental services covered by a dental insurance plan.
     */
    Dental: "DENTAL",
    /**
     * The job offers specific benefits to domestic partners.
     */
    DomesticPartner: "DOMESTIC_PARTNER",
    /**
     * The job allows for a flexible work schedule.
     */
    FlexibleHours: "FLEXIBLE_HOURS",
    /**
     * The job includes health services covered by a medical insurance plan.
     */
    Medical: "MEDICAL",
    /**
     * The job includes a life insurance plan provided by the employer or available for purchase by the employee.
     */
    LifeInsurance: "LIFE_INSURANCE",
    /**
     * The job allows for a leave of absence to a parent to care for a newborn child.
     */
    ParentalLeave: "PARENTAL_LEAVE",
    /**
     * The job includes a workplace retirement plan provided by the employer or available for purchase by the employee.
     */
    RetirementPlan: "RETIREMENT_PLAN",
    /**
     * The job allows for paid time off due to illness.
     */
    SickDays: "SICK_DAYS",
    /**
     * The job includes paid time off for vacation.
     */
    Vacation: "VACATION",
    /**
     * The job includes vision services covered by a vision insurance plan.
     */
    Vision: "VISION",
} as const;

export type JobJobBenefitsItem = (typeof JobJobBenefitsItem)[keyof typeof JobJobBenefitsItem];

export const JobJobLevel = {
    /**
     * The default value if the level is not specified.
     */
    JobLevelUnspecified: "JOB_LEVEL_UNSPECIFIED",
    /**
     * Entry-level individual contributors, typically with less than 2 years of experience in a similar role. Includes interns.
     */
    EntryLevel: "ENTRY_LEVEL",
    /**
     * Experienced individual contributors, typically with 2+ years of experience in a similar role.
     */
    Experienced: "EXPERIENCED",
    /**
     * Entry- to mid-level managers responsible for managing a team of people.
     */
    Manager: "MANAGER",
    /**
     * Senior-level managers responsible for managing teams of managers.
     */
    Director: "DIRECTOR",
    /**
     * Executive-level managers and above, including C-level positions.
     */
    Executive: "EXECUTIVE",
} as const;

/**
 * Optional. The experience level associated with the job, such as "Entry Level".
 */
export type JobJobLevel = (typeof JobJobLevel)[keyof typeof JobJobLevel];

export const JobPostingRegion = {
    /**
     * If the region is unspecified, the job is only returned if it matches the LocationFilter.
     */
    PostingRegionUnspecified: "POSTING_REGION_UNSPECIFIED",
    /**
     * In addition to exact location matching, job posting is returned when the LocationFilter in the search query is in the same administrative area as the returned job posting. For example, if a `ADMINISTRATIVE_AREA` job is posted in "CA, USA", it's returned if LocationFilter has "Mountain View". Administrative area refers to top-level administrative subdivision of this country. For example, US state, IT region, UK constituent nation and JP prefecture.
     */
    AdministrativeArea: "ADMINISTRATIVE_AREA",
    /**
     * In addition to exact location matching, job is returned when LocationFilter in search query is in the same country as this job. For example, if a `NATION_WIDE` job is posted in "USA", it's returned if LocationFilter has 'Mountain View'.
     */
    Nation: "NATION",
    /**
     * Job allows employees to work remotely (telecommute). If locations are provided with this value, the job is considered as having a location, but telecommuting is allowed.
     */
    Telecommute: "TELECOMMUTE",
} as const;

/**
 * Optional. The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
 */
export type JobPostingRegion = (typeof JobPostingRegion)[keyof typeof JobPostingRegion];

export const LocationLocationType = {
    /**
     * Default value if the type is not specified.
     */
    LocationTypeUnspecified: "LOCATION_TYPE_UNSPECIFIED",
    /**
     * A country level location.
     */
    Country: "COUNTRY",
    /**
     * A state or equivalent level location.
     */
    AdministrativeArea: "ADMINISTRATIVE_AREA",
    /**
     * A county or equivalent level location.
     */
    SubAdministrativeArea: "SUB_ADMINISTRATIVE_AREA",
    /**
     * A city or equivalent level location.
     */
    Locality: "LOCALITY",
    /**
     * A postal code level location.
     */
    PostalCode: "POSTAL_CODE",
    /**
     * A sublocality is a subdivision of a locality, for example a city borough, ward, or arrondissement. Sublocalities are usually recognized by a local political authority. For example, Manhattan and Brooklyn are recognized as boroughs by the City of New York, and are therefore modeled as sublocalities.
     */
    SubLocality: "SUB_LOCALITY",
    /**
     * A district or equivalent level location.
     */
    SubLocality1: "SUB_LOCALITY_1",
    /**
     * A smaller district or equivalent level display.
     */
    SubLocality2: "SUB_LOCALITY_2",
    /**
     * A neighborhood level location.
     */
    Neighborhood: "NEIGHBORHOOD",
    /**
     * A street address level location.
     */
    StreetAddress: "STREET_ADDRESS",
} as const;

/**
 * The type of a location, which corresponds to the address lines field of PostalAddress. For example, "Downtown, Atlanta, GA, USA" has a type of LocationType#NEIGHBORHOOD, and "Kansas City, KS, USA" has a type of LocationType#LOCALITY.
 */
export type LocationLocationType = (typeof LocationLocationType)[keyof typeof LocationLocationType];

export const ProcessingOptionsHtmlSanitization = {
    /**
     * Default value.
     */
    HtmlSanitizationUnspecified: "HTML_SANITIZATION_UNSPECIFIED",
    /**
     * Disables sanitization on HTML input.
     */
    HtmlSanitizationDisabled: "HTML_SANITIZATION_DISABLED",
    /**
     * Sanitizes HTML input, only accepts bold, italic, ordered list, and unordered list markup tags.
     */
    SimpleFormattingOnly: "SIMPLE_FORMATTING_ONLY",
} as const;

/**
 * Optional. Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation is not disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.
 */
export type ProcessingOptionsHtmlSanitization = (typeof ProcessingOptionsHtmlSanitization)[keyof typeof ProcessingOptionsHtmlSanitization];
