// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const DeviceLogLevel = {
    /**
     * No logging specified. If not specified, logging will be disabled.
     */
    LogLevelUnspecified: "LOG_LEVEL_UNSPECIFIED",
    /**
     * Disables logging.
     */
    None: "NONE",
    /**
     * Error events will be logged.
     */
    Error: "ERROR",
    /**
     * Informational events will be logged, such as connections and disconnections.
     */
    Info: "INFO",
    /**
     * All events will be logged.
     */
    Debug: "DEBUG",
} as const;

/**
 * **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.
 */
export type DeviceLogLevel = (typeof DeviceLogLevel)[keyof typeof DeviceLogLevel];

export const GatewayConfigGatewayAuthMethod = {
    /**
     * No authentication/authorization method specified. No devices are allowed to access the gateway.
     */
    GatewayAuthMethodUnspecified: "GATEWAY_AUTH_METHOD_UNSPECIFIED",
    /**
     * The device is authenticated through the gateway association only. Device credentials are ignored even if provided.
     */
    AssociationOnly: "ASSOCIATION_ONLY",
    /**
     * The device is authenticated through its own credentials. Gateway association is not checked.
     */
    DeviceAuthTokenOnly: "DEVICE_AUTH_TOKEN_ONLY",
    /**
     * The device is authenticated through both device credentials and gateway association. The device must be bound to the gateway and must provide its own credentials.
     */
    AssociationAndDeviceAuthToken: "ASSOCIATION_AND_DEVICE_AUTH_TOKEN",
} as const;

/**
 * Indicates how to authorize and/or authenticate devices to access the gateway.
 */
export type GatewayConfigGatewayAuthMethod = (typeof GatewayConfigGatewayAuthMethod)[keyof typeof GatewayConfigGatewayAuthMethod];

export const GatewayConfigGatewayType = {
    /**
     * If unspecified, the device is considered a non-gateway device.
     */
    GatewayTypeUnspecified: "GATEWAY_TYPE_UNSPECIFIED",
    /**
     * The device is a gateway.
     */
    Gateway: "GATEWAY",
    /**
     * The device is not a gateway.
     */
    NonGateway: "NON_GATEWAY",
} as const;

/**
 * Indicates whether the device is a gateway.
 */
export type GatewayConfigGatewayType = (typeof GatewayConfigGatewayType)[keyof typeof GatewayConfigGatewayType];

export const HttpConfigHttpEnabledState = {
    /**
     * No HTTP state specified. If not specified, DeviceService will be enabled by default.
     */
    HttpStateUnspecified: "HTTP_STATE_UNSPECIFIED",
    /**
     * Enables DeviceService (HTTP) service for the registry.
     */
    HttpEnabled: "HTTP_ENABLED",
    /**
     * Disables DeviceService (HTTP) service for the registry.
     */
    HttpDisabled: "HTTP_DISABLED",
} as const;

/**
 * If enabled, allows devices to use DeviceService via the HTTP protocol. Otherwise, any requests to DeviceService will fail for this registry.
 */
export type HttpConfigHttpEnabledState = (typeof HttpConfigHttpEnabledState)[keyof typeof HttpConfigHttpEnabledState];

export const MqttConfigMqttEnabledState = {
    /**
     * No MQTT state specified. If not specified, MQTT will be enabled by default.
     */
    MqttStateUnspecified: "MQTT_STATE_UNSPECIFIED",
    /**
     * Enables a MQTT connection.
     */
    MqttEnabled: "MQTT_ENABLED",
    /**
     * Disables a MQTT connection.
     */
    MqttDisabled: "MQTT_DISABLED",
} as const;

/**
 * If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.
 */
export type MqttConfigMqttEnabledState = (typeof MqttConfigMqttEnabledState)[keyof typeof MqttConfigMqttEnabledState];

export const PublicKeyCertificateFormat = {
    /**
     * The format has not been specified. This is an invalid default value and must not be used.
     */
    UnspecifiedPublicKeyCertificateFormat: "UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT",
    /**
     * An X.509v3 certificate ([RFC5280](https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
     */
    X509CertificatePem: "X509_CERTIFICATE_PEM",
} as const;

/**
 * The certificate format.
 */
export type PublicKeyCertificateFormat = (typeof PublicKeyCertificateFormat)[keyof typeof PublicKeyCertificateFormat];

export const PublicKeyCredentialFormat = {
    /**
     * The format has not been specified. This is an invalid default value and must not be used.
     */
    UnspecifiedPublicKeyFormat: "UNSPECIFIED_PUBLIC_KEY_FORMAT",
    /**
     * An RSA public key encoded in base64, and wrapped by `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC KEY-----`. This can be used to verify `RS256` signatures in JWT tokens ([RFC7518]( https://www.ietf.org/rfc/rfc7518.txt)).
     */
    RsaPem: "RSA_PEM",
    /**
     * As RSA_PEM, but wrapped in an X.509v3 certificate ([RFC5280]( https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
     */
    RsaX509Pem: "RSA_X509_PEM",
    /**
     * Public key for the ECDSA algorithm using P-256 and SHA-256, encoded in base64, and wrapped by `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC KEY-----`. This can be used to verify JWT tokens with the `ES256` algorithm ([RFC7518](https://www.ietf.org/rfc/rfc7518.txt)). This curve is defined in [OpenSSL](https://www.openssl.org/) as the `prime256v1` curve.
     */
    Es256Pem: "ES256_PEM",
    /**
     * As ES256_PEM, but wrapped in an X.509v3 certificate ([RFC5280]( https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
     */
    Es256X509Pem: "ES256_X509_PEM",
} as const;

/**
 * The format of the key.
 */
export type PublicKeyCredentialFormat = (typeof PublicKeyCredentialFormat)[keyof typeof PublicKeyCredentialFormat];

export const RegistryLogLevel = {
    /**
     * No logging specified. If not specified, logging will be disabled.
     */
    LogLevelUnspecified: "LOG_LEVEL_UNSPECIFIED",
    /**
     * Disables logging.
     */
    None: "NONE",
    /**
     * Error events will be logged.
     */
    Error: "ERROR",
    /**
     * Informational events will be logged, such as connections and disconnections.
     */
    Info: "INFO",
    /**
     * All events will be logged.
     */
    Debug: "DEBUG",
} as const;

/**
 * **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
 */
export type RegistryLogLevel = (typeof RegistryLogLevel)[keyof typeof RegistryLogLevel];
