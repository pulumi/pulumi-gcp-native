// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type AuditLogConfigLogType = (typeof AuditLogConfigLogType)[keyof typeof AuditLogConfigLogType];

export const RestoreConfigClusterResourceConflictPolicy = {
    /**
     * Unspecified. Only allowed if no cluster-scoped resources will be restored.
     */
    ClusterResourceConflictPolicyUnspecified: "CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED",
    /**
     * Do not attempt to restore the conflicting resource.
     */
    UseExistingVersion: "USE_EXISTING_VERSION",
    /**
     * Delete the existing version before re-creating it from the Backup. This is a dangerous option which could cause unintentional data loss if used inappropriately. For example, deleting a CRD will cause Kubernetes to delete all CRs of that type.
     */
    UseBackupVersion: "USE_BACKUP_VERSION",
} as const;

/**
 * Optional. Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.
 */
export type RestoreConfigClusterResourceConflictPolicy = (typeof RestoreConfigClusterResourceConflictPolicy)[keyof typeof RestoreConfigClusterResourceConflictPolicy];

export const RestoreConfigNamespacedResourceRestoreMode = {
    /**
     * Unspecified (invalid).
     */
    NamespacedResourceRestoreModeUnspecified: "NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED",
    /**
     * When conflicting top-level resources (either Namespaces or ProtectedApplications, depending upon the scope) are encountered, this will first trigger a delete of the conflicting resource AND ALL OF ITS REFERENCED RESOURCES (e.g., all resources in the Namespace or all resources referenced by the ProtectedApplication) before restoring the resources from the Backup. This mode should only be used when you are intending to revert some portion of a cluster to an earlier state.
     */
    DeleteAndRestore: "DELETE_AND_RESTORE",
    /**
     * If conflicting top-level resources (either Namespaces or ProtectedApplications, depending upon the scope) are encountered at the beginning of a restore process, the Restore will fail. If a conflict occurs during the restore process itself (e.g., because an out of band process creates conflicting resources), a conflict will be reported.
     */
    FailOnConflict: "FAIL_ON_CONFLICT",
} as const;

/**
 * Optional. Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.
 */
export type RestoreConfigNamespacedResourceRestoreMode = (typeof RestoreConfigNamespacedResourceRestoreMode)[keyof typeof RestoreConfigNamespacedResourceRestoreMode];

export const RestoreConfigVolumeDataRestorePolicy = {
    /**
     * Unspecified (illegal).
     */
    VolumeDataRestorePolicyUnspecified: "VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED",
    /**
     * For each PVC to be restored, create a new underlying volume and PV from the corresponding VolumeBackup contained within the Backup.
     */
    RestoreVolumeDataFromBackup: "RESTORE_VOLUME_DATA_FROM_BACKUP",
    /**
     * For each PVC to be restored, attempt to reuse the original PV contained in the Backup (with its original underlying volume). This option is likely only usable when restoring a workload to its original cluster.
     */
    ReuseVolumeHandleFromBackup: "REUSE_VOLUME_HANDLE_FROM_BACKUP",
    /**
     * For each PVC to be restored, create PVC without any particular action to restore data. In this case, the normal Kubernetes provisioning logic would kick in, and this would likely result in either dynamically provisioning blank PVs or binding to statically provisioned PVs.
     */
    NoVolumeDataRestoration: "NO_VOLUME_DATA_RESTORATION",
} as const;

/**
 * Optional. Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).
 */
export type RestoreConfigVolumeDataRestorePolicy = (typeof RestoreConfigVolumeDataRestorePolicy)[keyof typeof RestoreConfigVolumeDataRestorePolicy];

export const TransformationRuleActionOp = {
    /**
     * Unspecified operation
     */
    OpUnspecified: "OP_UNSPECIFIED",
    /**
     * The "remove" operation removes the value at the target location.
     */
    Remove: "REMOVE",
    /**
     * The "move" operation removes the value at a specified location and adds it to the target location.
     */
    Move: "MOVE",
    /**
     * The "copy" operation copies the value at a specified location to the target location.
     */
    Copy: "COPY",
    /**
     * The "add" operation performs one of the following functions, depending upon what the target location references: 1. If the target location specifies an array index, a new value is inserted into the array at the specified index. 2. If the target location specifies an object member that does not already exist, a new member is added to the object. 3. If the target location specifies an object member that does exist, that member's value is replaced.
     */
    Add: "ADD",
    /**
     * The "test" operation tests that a value at the target location is equal to a specified value.
     */
    Test: "TEST",
    /**
     * The "replace" operation replaces the value at the target location with a new value. The operation object MUST contain a "value" member whose content specifies the replacement value.
     */
    Replace: "REPLACE",
} as const;

/**
 * Required. op specifies the operation to perform.
 */
export type TransformationRuleActionOp = (typeof TransformationRuleActionOp)[keyof typeof TransformationRuleActionOp];
