// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const DatabaseAppEngineIntegrationMode = {
    /**
     * Not used.
     */
    AppEngineIntegrationModeUnspecified: "APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED",
    /**
     * If an App Engine application exists in the same region as this database, App Engine configuration will impact this database. This includes disabling of the application & database, as well as disabling writes to the database.
     */
    Enabled: "ENABLED",
    /**
     * App Engine has no effect on the ability of this database to serve requests. This is the default setting for databases created with the Firestore API.
     */
    Disabled: "DISABLED",
} as const;

/**
 * The App Engine integration mode to use for this database.
 */
export type DatabaseAppEngineIntegrationMode = (typeof DatabaseAppEngineIntegrationMode)[keyof typeof DatabaseAppEngineIntegrationMode];

export const DatabaseConcurrencyMode = {
    /**
     * Not used.
     */
    ConcurrencyModeUnspecified: "CONCURRENCY_MODE_UNSPECIFIED",
    /**
     * Use optimistic concurrency control by default. This mode is available for Cloud Firestore databases.
     */
    Optimistic: "OPTIMISTIC",
    /**
     * Use pessimistic concurrency control by default. This mode is available for Cloud Firestore databases. This is the default setting for Cloud Firestore.
     */
    Pessimistic: "PESSIMISTIC",
    /**
     * Use optimistic concurrency control with entity groups by default. This is the only available mode for Cloud Datastore. This mode is also available for Cloud Firestore with Datastore Mode but is not recommended.
     */
    OptimisticWithEntityGroups: "OPTIMISTIC_WITH_ENTITY_GROUPS",
} as const;

/**
 * The concurrency control mode to use for this database.
 */
export type DatabaseConcurrencyMode = (typeof DatabaseConcurrencyMode)[keyof typeof DatabaseConcurrencyMode];

export const DatabaseDeleteProtectionState = {
    /**
     * The default value. Delete protection type is not specified
     */
    DeleteProtectionStateUnspecified: "DELETE_PROTECTION_STATE_UNSPECIFIED",
    /**
     * Delete protection is disabled
     */
    DeleteProtectionDisabled: "DELETE_PROTECTION_DISABLED",
    /**
     * Delete protection is enabled
     */
    DeleteProtectionEnabled: "DELETE_PROTECTION_ENABLED",
} as const;

/**
 * State of delete protection for the database.
 */
export type DatabaseDeleteProtectionState = (typeof DatabaseDeleteProtectionState)[keyof typeof DatabaseDeleteProtectionState];

export const DatabasePointInTimeRecoveryEnablement = {
    /**
     * Not used.
     */
    PointInTimeRecoveryEnablementUnspecified: "POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED",
    /**
     * Reads are supported on selected versions of the data from within the past 7 days: * Reads against any timestamp within the past hour * Reads against 1-minute snapshots beyond 1 hour and within 7 days `version_retention_period` and `earliest_version_time` can be used to determine the supported versions.
     */
    PointInTimeRecoveryEnabled: "POINT_IN_TIME_RECOVERY_ENABLED",
    /**
     * Reads are supported on any version of the data from within the past 1 hour.
     */
    PointInTimeRecoveryDisabled: "POINT_IN_TIME_RECOVERY_DISABLED",
} as const;

/**
 * Whether to enable the PITR feature on this database.
 */
export type DatabasePointInTimeRecoveryEnablement = (typeof DatabasePointInTimeRecoveryEnablement)[keyof typeof DatabasePointInTimeRecoveryEnablement];

export const DatabaseType = {
    /**
     * The default value. This value is used if the database type is omitted.
     */
    DatabaseTypeUnspecified: "DATABASE_TYPE_UNSPECIFIED",
    /**
     * Firestore Native Mode
     */
    FirestoreNative: "FIRESTORE_NATIVE",
    /**
     * Firestore in Datastore Mode.
     */
    DatastoreMode: "DATASTORE_MODE",
} as const;

/**
 * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
 */
export type DatabaseType = (typeof DatabaseType)[keyof typeof DatabaseType];

export const GoogleFirestoreAdminV1IndexFieldArrayConfig = {
    /**
     * The index does not support additional array queries.
     */
    ArrayConfigUnspecified: "ARRAY_CONFIG_UNSPECIFIED",
    /**
     * The index supports array containment queries.
     */
    Contains: "CONTAINS",
} as const;

/**
 * Indicates that this field supports operations on `array_value`s.
 */
export type GoogleFirestoreAdminV1IndexFieldArrayConfig = (typeof GoogleFirestoreAdminV1IndexFieldArrayConfig)[keyof typeof GoogleFirestoreAdminV1IndexFieldArrayConfig];

export const GoogleFirestoreAdminV1IndexFieldOrder = {
    /**
     * The ordering is unspecified. Not a valid option.
     */
    OrderUnspecified: "ORDER_UNSPECIFIED",
    /**
     * The field is ordered by ascending field value.
     */
    Ascending: "ASCENDING",
    /**
     * The field is ordered by descending field value.
     */
    Descending: "DESCENDING",
} as const;

/**
 * Indicates that this field supports ordering by the specified order or comparing using =, !=, <, <=, >, >=.
 */
export type GoogleFirestoreAdminV1IndexFieldOrder = (typeof GoogleFirestoreAdminV1IndexFieldOrder)[keyof typeof GoogleFirestoreAdminV1IndexFieldOrder];

export const GoogleFirestoreAdminV1WeeklyRecurrenceDay = {
    /**
     * The day of the week is unspecified.
     */
    DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
    /**
     * Monday
     */
    Monday: "MONDAY",
    /**
     * Tuesday
     */
    Tuesday: "TUESDAY",
    /**
     * Wednesday
     */
    Wednesday: "WEDNESDAY",
    /**
     * Thursday
     */
    Thursday: "THURSDAY",
    /**
     * Friday
     */
    Friday: "FRIDAY",
    /**
     * Saturday
     */
    Saturday: "SATURDAY",
    /**
     * Sunday
     */
    Sunday: "SUNDAY",
} as const;

/**
 * The day of week to run. DAY_OF_WEEK_UNSPECIFIED is not allowed.
 */
export type GoogleFirestoreAdminV1WeeklyRecurrenceDay = (typeof GoogleFirestoreAdminV1WeeklyRecurrenceDay)[keyof typeof GoogleFirestoreAdminV1WeeklyRecurrenceDay];

export const IndexApiScope = {
    /**
     * The index can only be used by the Firestore Native query API. This is the default.
     */
    AnyApi: "ANY_API",
    /**
     * The index can only be used by the Firestore in Datastore Mode query API.
     */
    DatastoreModeApi: "DATASTORE_MODE_API",
} as const;

/**
 * The API scope supported by this index.
 */
export type IndexApiScope = (typeof IndexApiScope)[keyof typeof IndexApiScope];

export const IndexQueryScope = {
    /**
     * The query scope is unspecified. Not a valid option.
     */
    QueryScopeUnspecified: "QUERY_SCOPE_UNSPECIFIED",
    /**
     * Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the collection id specified by the index.
     */
    Collection: "COLLECTION",
    /**
     * Indexes with a collection group query scope specified allow queries against all collections that has the collection id specified by the index.
     */
    CollectionGroup: "COLLECTION_GROUP",
    /**
     * Include all the collections's ancestor in the index. Only available for Datastore Mode databases.
     */
    CollectionRecursive: "COLLECTION_RECURSIVE",
} as const;

/**
 * Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.
 */
export type IndexQueryScope = (typeof IndexQueryScope)[keyof typeof IndexQueryScope];
