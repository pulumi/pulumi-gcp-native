// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AptRepositoryArchiveType = {
    /**
     * Unspecified.
     */
    ArchiveTypeUnspecified: "ARCHIVE_TYPE_UNSPECIFIED",
    /**
     * DEB indicates that the archive contains binary files.
     */
    Deb: "DEB",
    /**
     * DEB_SRC indicates that the archive contains source files.
     */
    DebSrc: "DEB_SRC",
} as const;

/**
 * Type of archive files in this repository. The default behavior is DEB.
 */
export type AptRepositoryArchiveType = (typeof AptRepositoryArchiveType)[keyof typeof AptRepositoryArchiveType];

export const AptSettingsType = {
    /**
     * By default, upgrade will be performed.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * Runs `apt-get dist-upgrade`.
     */
    Dist: "DIST",
    /**
     * Runs `apt-get upgrade`.
     */
    Upgrade: "UPGRADE",
} as const;

/**
 * By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
 */
export type AptSettingsType = (typeof AptSettingsType)[keyof typeof AptSettingsType];

export const ExecStepConfigInterpreter = {
    /**
     * If the interpreter is not specified, the value defaults to `NONE`.
     */
    InterpreterUnspecified: "INTERPRETER_UNSPECIFIED",
    /**
     * Indicates that the file is run as follows on each operating system: + For Linux VMs, the file is ran as an executable and the interpreter might be parsed from the [shebang line](https://wikipedia.org/wiki/Shebang_(Unix)) of the file. + For Windows VM, this value is not supported.
     */
    None: "NONE",
    /**
     * Indicates that the file is run with `/bin/sh` on Linux and `cmd` on Windows.
     */
    Shell: "SHELL",
    /**
     * Indicates that the file is run with PowerShell.
     */
    Powershell: "POWERSHELL",
} as const;

/**
 * The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
 */
export type ExecStepConfigInterpreter = (typeof ExecStepConfigInterpreter)[keyof typeof ExecStepConfigInterpreter];

export const PackageDesiredState = {
    /**
     * The default is to ensure the package is installed.
     */
    DesiredStateUnspecified: "DESIRED_STATE_UNSPECIFIED",
    /**
     * The agent ensures that the package is installed.
     */
    Installed: "INSTALLED",
    /**
     * The agent ensures that the package is installed and periodically checks for and install any updates.
     */
    Updated: "UPDATED",
    /**
     * The agent ensures that the package is not installed and uninstall it if detected.
     */
    Removed: "REMOVED",
} as const;

/**
 * The desired_state the agent should maintain for this package. The default is to ensure the package is installed.
 */
export type PackageDesiredState = (typeof PackageDesiredState)[keyof typeof PackageDesiredState];

export const PackageManager = {
    /**
     * The default behavior is ANY.
     */
    ManagerUnspecified: "MANAGER_UNSPECIFIED",
    /**
     * Apply this package config using the default system package manager.
     */
    Any: "ANY",
    /**
     * Apply this package config only if Apt is available on the system.
     */
    Apt: "APT",
    /**
     * Apply this package config only if Yum is available on the system.
     */
    Yum: "YUM",
    /**
     * Apply this package config only if Zypper is available on the system.
     */
    Zypper: "ZYPPER",
    /**
     * Apply this package config only if GooGet is available on the system.
     */
    Goo: "GOO",
} as const;

/**
 * Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify `ANY`, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.
 */
export type PackageManager = (typeof PackageManager)[keyof typeof PackageManager];

export const PatchConfigRebootConfig = {
    /**
     * The default behavior is DEFAULT.
     */
    RebootConfigUnspecified: "REBOOT_CONFIG_UNSPECIFIED",
    /**
     * The agent decides if a reboot is necessary by checking signals such as registry keys on Windows or `/var/run/reboot-required` on APT based systems. On RPM based systems, a set of core system package install times are compared with system boot time.
     */
    Default: "DEFAULT",
    /**
     * Always reboot the machine after the update completes.
     */
    Always: "ALWAYS",
    /**
     * Never reboot the machine after the update completes.
     */
    Never: "NEVER",
} as const;

/**
 * Post-patch reboot settings.
 */
export type PatchConfigRebootConfig = (typeof PatchConfigRebootConfig)[keyof typeof PatchConfigRebootConfig];

export const PatchRolloutMode = {
    /**
     * Mode must be specified.
     */
    ModeUnspecified: "MODE_UNSPECIFIED",
    /**
     * Patches are applied one zone at a time. The patch job begins in the region with the lowest number of targeted VMs. Within the region, patching begins in the zone with the lowest number of targeted VMs. If multiple regions (or zones within a region) have the same number of targeted VMs, a tie-breaker is achieved by sorting the regions or zones in alphabetical order.
     */
    ZoneByZone: "ZONE_BY_ZONE",
    /**
     * Patches are applied to VMs in all zones at the same time.
     */
    ConcurrentZones: "CONCURRENT_ZONES",
} as const;

/**
 * Mode of the patch rollout.
 */
export type PatchRolloutMode = (typeof PatchRolloutMode)[keyof typeof PatchRolloutMode];

export const RecurringScheduleFrequency = {
    /**
     * Invalid. A frequency must be specified.
     */
    FrequencyUnspecified: "FREQUENCY_UNSPECIFIED",
    /**
     * Indicates that the frequency of recurrence should be expressed in terms of weeks.
     */
    Weekly: "WEEKLY",
    /**
     * Indicates that the frequency of recurrence should be expressed in terms of months.
     */
    Monthly: "MONTHLY",
    /**
     * Indicates that the frequency of recurrence should be expressed in terms of days.
     */
    Daily: "DAILY",
} as const;

/**
 * Required. The frequency unit of this recurring schedule.
 */
export type RecurringScheduleFrequency = (typeof RecurringScheduleFrequency)[keyof typeof RecurringScheduleFrequency];

export const SoftwareRecipeDesiredState = {
    /**
     * The default is to ensure the package is installed.
     */
    DesiredStateUnspecified: "DESIRED_STATE_UNSPECIFIED",
    /**
     * The agent ensures that the package is installed.
     */
    Installed: "INSTALLED",
    /**
     * The agent ensures that the package is installed and periodically checks for and install any updates.
     */
    Updated: "UPDATED",
    /**
     * The agent ensures that the package is not installed and uninstall it if detected.
     */
    Removed: "REMOVED",
} as const;

/**
 * Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
 */
export type SoftwareRecipeDesiredState = (typeof SoftwareRecipeDesiredState)[keyof typeof SoftwareRecipeDesiredState];

export const SoftwareRecipeStepExtractArchiveType = {
    /**
     * Indicates that the archive type isn't specified.
     */
    ArchiveTypeUnspecified: "ARCHIVE_TYPE_UNSPECIFIED",
    /**
     * Indicates that the archive is a tar archive with no encryption.
     */
    Tar: "TAR",
    /**
     * Indicates that the archive is a tar archive with gzip encryption.
     */
    TarGzip: "TAR_GZIP",
    /**
     * Indicates that the archive is a tar archive with bzip encryption.
     */
    TarBzip: "TAR_BZIP",
    /**
     * Indicates that the archive is a tar archive with lzma encryption.
     */
    TarLzma: "TAR_LZMA",
    /**
     * Indicates that the archive is a tar archive with xz encryption.
     */
    TarXz: "TAR_XZ",
    /**
     * Indicates that the archive is a zip archive.
     */
    Zip: "ZIP",
} as const;

/**
 * Required. The type of the archive to extract.
 */
export type SoftwareRecipeStepExtractArchiveType = (typeof SoftwareRecipeStepExtractArchiveType)[keyof typeof SoftwareRecipeStepExtractArchiveType];

export const SoftwareRecipeStepRunScriptInterpreter = {
    /**
     * Default value for ScriptType.
     */
    InterpreterUnspecified: "INTERPRETER_UNSPECIFIED",
    /**
     * Indicates that the script is run with `/bin/sh` on Linux and `cmd` on windows.
     */
    Shell: "SHELL",
    /**
     * Indicates that the script is run with powershell.
     */
    Powershell: "POWERSHELL",
} as const;

/**
 * The script interpreter to use to run the script. If no interpreter is specified the script is executed directly, which likely only succeed for scripts with [shebang lines](https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
 */
export type SoftwareRecipeStepRunScriptInterpreter = (typeof SoftwareRecipeStepRunScriptInterpreter)[keyof typeof SoftwareRecipeStepRunScriptInterpreter];

export const WeekDayOfMonthDayOfWeek = {
    /**
     * The day of the week is unspecified.
     */
    DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
    /**
     * Monday
     */
    Monday: "MONDAY",
    /**
     * Tuesday
     */
    Tuesday: "TUESDAY",
    /**
     * Wednesday
     */
    Wednesday: "WEDNESDAY",
    /**
     * Thursday
     */
    Thursday: "THURSDAY",
    /**
     * Friday
     */
    Friday: "FRIDAY",
    /**
     * Saturday
     */
    Saturday: "SATURDAY",
    /**
     * Sunday
     */
    Sunday: "SUNDAY",
} as const;

/**
 * Required. A day of the week.
 */
export type WeekDayOfMonthDayOfWeek = (typeof WeekDayOfMonthDayOfWeek)[keyof typeof WeekDayOfMonthDayOfWeek];

export const WeeklyScheduleDayOfWeek = {
    /**
     * The day of the week is unspecified.
     */
    DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
    /**
     * Monday
     */
    Monday: "MONDAY",
    /**
     * Tuesday
     */
    Tuesday: "TUESDAY",
    /**
     * Wednesday
     */
    Wednesday: "WEDNESDAY",
    /**
     * Thursday
     */
    Thursday: "THURSDAY",
    /**
     * Friday
     */
    Friday: "FRIDAY",
    /**
     * Saturday
     */
    Saturday: "SATURDAY",
    /**
     * Sunday
     */
    Sunday: "SUNDAY",
} as const;

/**
 * Required. Day of the week.
 */
export type WeeklyScheduleDayOfWeek = (typeof WeeklyScheduleDayOfWeek)[keyof typeof WeeklyScheduleDayOfWeek];

export const WindowsUpdateSettingsClassificationsItem = {
    /**
     * Invalid. If classifications are included, they must be specified.
     */
    ClassificationUnspecified: "CLASSIFICATION_UNSPECIFIED",
    /**
     * "A widely released fix for a specific problem that addresses a critical, non-security-related bug." [1]
     */
    Critical: "CRITICAL",
    /**
     * "A widely released fix for a product-specific, security-related vulnerability. Security vulnerabilities are rated by their severity. The severity rating is indicated in the Microsoft security bulletin as critical, important, moderate, or low." [1]
     */
    Security: "SECURITY",
    /**
     * "A widely released and frequent software update that contains additions to a product's definition database. Definition databases are often used to detect objects that have specific attributes, such as malicious code, phishing websites, or junk mail." [1]
     */
    Definition: "DEFINITION",
    /**
     * "Software that controls the input and output of a device." [1]
     */
    Driver: "DRIVER",
    /**
     * "New product functionality that is first distributed outside the context of a product release and that is typically included in the next full product release." [1]
     */
    FeaturePack: "FEATURE_PACK",
    /**
     * "A tested, cumulative set of all hotfixes, security updates, critical updates, and updates. Additionally, service packs may contain additional fixes for problems that are found internally since the release of the product. Service packs my also contain a limited number of customer-requested design changes or features." [1]
     */
    ServicePack: "SERVICE_PACK",
    /**
     * "A utility or feature that helps complete a task or set of tasks." [1]
     */
    Tool: "TOOL",
    /**
     * "A tested, cumulative set of hotfixes, security updates, critical updates, and updates that are packaged together for easy deployment. A rollup generally targets a specific area, such as security, or a component of a product, such as Internet Information Services (IIS)." [1]
     */
    UpdateRollup: "UPDATE_ROLLUP",
    /**
     * "A widely released fix for a specific problem. An update addresses a noncritical, non-security-related bug." [1]
     */
    Update: "UPDATE",
} as const;

export type WindowsUpdateSettingsClassificationsItem = (typeof WindowsUpdateSettingsClassificationsItem)[keyof typeof WindowsUpdateSettingsClassificationsItem];
