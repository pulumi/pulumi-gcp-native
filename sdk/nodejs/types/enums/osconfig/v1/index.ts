// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AptSettingsType = {
    /**
     * By default, upgrade will be performed.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * Runs `apt-get dist-upgrade`.
     */
    Dist: "DIST",
    /**
     * Runs `apt-get upgrade`.
     */
    Upgrade: "UPGRADE",
} as const;

/**
 * By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
 */
export type AptSettingsType = (typeof AptSettingsType)[keyof typeof AptSettingsType];

export const ExecStepConfigInterpreter = {
    /**
     * Invalid for a Windows ExecStepConfig. For a Linux ExecStepConfig, the interpreter will be parsed from the shebang line of the script if unspecified.
     */
    InterpreterUnspecified: "INTERPRETER_UNSPECIFIED",
    /**
     * Indicates that the script is run with `/bin/sh` on Linux and `cmd` on Windows.
     */
    Shell: "SHELL",
    /**
     * Indicates that the file is run with PowerShell flags `-NonInteractive`, `-NoProfile`, and `-ExecutionPolicy Bypass`.
     */
    Powershell: "POWERSHELL",
} as const;

/**
 * The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
 */
export type ExecStepConfigInterpreter = (typeof ExecStepConfigInterpreter)[keyof typeof ExecStepConfigInterpreter];

export const OSPolicyMode = {
    /**
     * Invalid mode
     */
    ModeUnspecified: "MODE_UNSPECIFIED",
    /**
     * This mode checks if the configuration resources in the policy are in their desired state. No actions are performed if they are not in the desired state. This mode is used for reporting purposes.
     */
    Validation: "VALIDATION",
    /**
     * This mode checks if the configuration resources in the policy are in their desired state, and if not, enforces the desired state.
     */
    Enforcement: "ENFORCEMENT",
} as const;

/**
 * Required. Policy mode
 */
export type OSPolicyMode = (typeof OSPolicyMode)[keyof typeof OSPolicyMode];

export const OSPolicyResourceExecResourceExecInterpreter = {
    /**
     * Invalid value, the request will return validation error.
     */
    InterpreterUnspecified: "INTERPRETER_UNSPECIFIED",
    /**
     * If an interpreter is not specified, the source is executed directly. This execution, without an interpreter, only succeeds for executables and scripts that have shebang lines.
     */
    None: "NONE",
    /**
     * Indicates that the script runs with `/bin/sh` on Linux and `cmd.exe` on Windows.
     */
    Shell: "SHELL",
    /**
     * Indicates that the script runs with PowerShell.
     */
    Powershell: "POWERSHELL",
} as const;

/**
 * Required. The script interpreter to use.
 */
export type OSPolicyResourceExecResourceExecInterpreter = (typeof OSPolicyResourceExecResourceExecInterpreter)[keyof typeof OSPolicyResourceExecResourceExecInterpreter];

export const OSPolicyResourceFileResourceState = {
    /**
     * Unspecified is invalid.
     */
    DesiredStateUnspecified: "DESIRED_STATE_UNSPECIFIED",
    /**
     * Ensure file at path is present.
     */
    Present: "PRESENT",
    /**
     * Ensure file at path is absent.
     */
    Absent: "ABSENT",
    /**
     * Ensure the contents of the file at path matches. If the file does not exist it will be created.
     */
    ContentsMatch: "CONTENTS_MATCH",
} as const;

/**
 * Required. Desired state of the file.
 */
export type OSPolicyResourceFileResourceState = (typeof OSPolicyResourceFileResourceState)[keyof typeof OSPolicyResourceFileResourceState];

export const OSPolicyResourcePackageResourceDesiredState = {
    /**
     * Unspecified is invalid.
     */
    DesiredStateUnspecified: "DESIRED_STATE_UNSPECIFIED",
    /**
     * Ensure that the package is installed.
     */
    Installed: "INSTALLED",
    /**
     * The agent ensures that the package is not installed and uninstalls it if detected.
     */
    Removed: "REMOVED",
} as const;

/**
 * Required. The desired state the agent should maintain for this package.
 */
export type OSPolicyResourcePackageResourceDesiredState = (typeof OSPolicyResourcePackageResourceDesiredState)[keyof typeof OSPolicyResourcePackageResourceDesiredState];

export const OSPolicyResourceRepositoryResourceAptRepositoryArchiveType = {
    /**
     * Unspecified is invalid.
     */
    ArchiveTypeUnspecified: "ARCHIVE_TYPE_UNSPECIFIED",
    /**
     * Deb indicates that the archive contains binary files.
     */
    Deb: "DEB",
    /**
     * Deb-src indicates that the archive contains source files.
     */
    DebSrc: "DEB_SRC",
} as const;

/**
 * Required. Type of archive files in this repository.
 */
export type OSPolicyResourceRepositoryResourceAptRepositoryArchiveType = (typeof OSPolicyResourceRepositoryResourceAptRepositoryArchiveType)[keyof typeof OSPolicyResourceRepositoryResourceAptRepositoryArchiveType];

export const PatchConfigRebootConfig = {
    /**
     * The default behavior is DEFAULT.
     */
    RebootConfigUnspecified: "REBOOT_CONFIG_UNSPECIFIED",
    /**
     * The agent decides if a reboot is necessary by checking signals such as registry keys on Windows or `/var/run/reboot-required` on APT based systems. On RPM based systems, a set of core system package install times are compared with system boot time.
     */
    Default: "DEFAULT",
    /**
     * Always reboot the machine after the update completes.
     */
    Always: "ALWAYS",
    /**
     * Never reboot the machine after the update completes.
     */
    Never: "NEVER",
} as const;

/**
 * Post-patch reboot settings.
 */
export type PatchConfigRebootConfig = (typeof PatchConfigRebootConfig)[keyof typeof PatchConfigRebootConfig];

export const PatchRolloutMode = {
    /**
     * Mode must be specified.
     */
    ModeUnspecified: "MODE_UNSPECIFIED",
    /**
     * Patches are applied one zone at a time. The patch job begins in the region with the lowest number of targeted VMs. Within the region, patching begins in the zone with the lowest number of targeted VMs. If multiple regions (or zones within a region) have the same number of targeted VMs, a tie-breaker is achieved by sorting the regions or zones in alphabetical order.
     */
    ZoneByZone: "ZONE_BY_ZONE",
    /**
     * Patches are applied to VMs in all zones at the same time.
     */
    ConcurrentZones: "CONCURRENT_ZONES",
} as const;

/**
 * Mode of the patch rollout.
 */
export type PatchRolloutMode = (typeof PatchRolloutMode)[keyof typeof PatchRolloutMode];

export const RecurringScheduleFrequency = {
    /**
     * Invalid. A frequency must be specified.
     */
    FrequencyUnspecified: "FREQUENCY_UNSPECIFIED",
    /**
     * Indicates that the frequency of recurrence should be expressed in terms of weeks.
     */
    Weekly: "WEEKLY",
    /**
     * Indicates that the frequency of recurrence should be expressed in terms of months.
     */
    Monthly: "MONTHLY",
    /**
     * Indicates that the frequency of recurrence should be expressed in terms of days.
     */
    Daily: "DAILY",
} as const;

/**
 * Required. The frequency unit of this recurring schedule.
 */
export type RecurringScheduleFrequency = (typeof RecurringScheduleFrequency)[keyof typeof RecurringScheduleFrequency];

export const WeekDayOfMonthDayOfWeek = {
    /**
     * The day of the week is unspecified.
     */
    DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
    /**
     * Monday
     */
    Monday: "MONDAY",
    /**
     * Tuesday
     */
    Tuesday: "TUESDAY",
    /**
     * Wednesday
     */
    Wednesday: "WEDNESDAY",
    /**
     * Thursday
     */
    Thursday: "THURSDAY",
    /**
     * Friday
     */
    Friday: "FRIDAY",
    /**
     * Saturday
     */
    Saturday: "SATURDAY",
    /**
     * Sunday
     */
    Sunday: "SUNDAY",
} as const;

/**
 * Required. A day of the week.
 */
export type WeekDayOfMonthDayOfWeek = (typeof WeekDayOfMonthDayOfWeek)[keyof typeof WeekDayOfMonthDayOfWeek];

export const WeeklyScheduleDayOfWeek = {
    /**
     * The day of the week is unspecified.
     */
    DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
    /**
     * Monday
     */
    Monday: "MONDAY",
    /**
     * Tuesday
     */
    Tuesday: "TUESDAY",
    /**
     * Wednesday
     */
    Wednesday: "WEDNESDAY",
    /**
     * Thursday
     */
    Thursday: "THURSDAY",
    /**
     * Friday
     */
    Friday: "FRIDAY",
    /**
     * Saturday
     */
    Saturday: "SATURDAY",
    /**
     * Sunday
     */
    Sunday: "SUNDAY",
} as const;

/**
 * Required. Day of the week.
 */
export type WeeklyScheduleDayOfWeek = (typeof WeeklyScheduleDayOfWeek)[keyof typeof WeeklyScheduleDayOfWeek];

export const WindowsUpdateSettingsClassificationsItem = {
    /**
     * Invalid. If classifications are included, they must be specified.
     */
    ClassificationUnspecified: "CLASSIFICATION_UNSPECIFIED",
    /**
     * "A widely released fix for a specific problem that addresses a critical, non-security-related bug." [1]
     */
    Critical: "CRITICAL",
    /**
     * "A widely released fix for a product-specific, security-related vulnerability. Security vulnerabilities are rated by their severity. The severity rating is indicated in the Microsoft security bulletin as critical, important, moderate, or low." [1]
     */
    Security: "SECURITY",
    /**
     * "A widely released and frequent software update that contains additions to a product's definition database. Definition databases are often used to detect objects that have specific attributes, such as malicious code, phishing websites, or junk mail." [1]
     */
    Definition: "DEFINITION",
    /**
     * "Software that controls the input and output of a device." [1]
     */
    Driver: "DRIVER",
    /**
     * "New product functionality that is first distributed outside the context of a product release and that is typically included in the next full product release." [1]
     */
    FeaturePack: "FEATURE_PACK",
    /**
     * "A tested, cumulative set of all hotfixes, security updates, critical updates, and updates. Additionally, service packs may contain additional fixes for problems that are found internally since the release of the product. Service packs my also contain a limited number of customer-requested design changes or features." [1]
     */
    ServicePack: "SERVICE_PACK",
    /**
     * "A utility or feature that helps complete a task or set of tasks." [1]
     */
    Tool: "TOOL",
    /**
     * "A tested, cumulative set of hotfixes, security updates, critical updates, and updates that are packaged together for easy deployment. A rollup generally targets a specific area, such as security, or a component of a product, such as Internet Information Services (IIS)." [1]
     */
    UpdateRollup: "UPDATE_ROLLUP",
    /**
     * "A widely released fix for a specific problem. An update addresses a noncritical, non-security-related bug." [1]
     */
    Update: "UPDATE",
} as const;

export type WindowsUpdateSettingsClassificationsItem = (typeof WindowsUpdateSettingsClassificationsItem)[keyof typeof WindowsUpdateSettingsClassificationsItem];
