// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BillingAccountSinkOutputVersionFormat = {
    /**
     * An unspecified format version that will default to V2.
     */
    VersionFormatUnspecified: "VERSION_FORMAT_UNSPECIFIED",
    /**
     * LogEntry version 2 format.
     */
    V2: "V2",
    /**
     * LogEntry version 1 format.
     */
    V1: "V1",
} as const;

/**
 * Deprecated. This field is unused.
 */
export type BillingAccountSinkOutputVersionFormat = (typeof BillingAccountSinkOutputVersionFormat)[keyof typeof BillingAccountSinkOutputVersionFormat];

export const FolderSinkOutputVersionFormat = {
    /**
     * An unspecified format version that will default to V2.
     */
    VersionFormatUnspecified: "VERSION_FORMAT_UNSPECIFIED",
    /**
     * LogEntry version 2 format.
     */
    V2: "V2",
    /**
     * LogEntry version 1 format.
     */
    V1: "V1",
} as const;

/**
 * Deprecated. This field is unused.
 */
export type FolderSinkOutputVersionFormat = (typeof FolderSinkOutputVersionFormat)[keyof typeof FolderSinkOutputVersionFormat];

export const IndexConfigType = {
    /**
     * The index's type is unspecified.
     */
    IndexTypeUnspecified: "INDEX_TYPE_UNSPECIFIED",
    /**
     * The index is a string-type index.
     */
    IndexTypeString: "INDEX_TYPE_STRING",
    /**
     * The index is a integer-type index.
     */
    IndexTypeInteger: "INDEX_TYPE_INTEGER",
} as const;

/**
 * Required. The type of data in this index.
 */
export type IndexConfigType = (typeof IndexConfigType)[keyof typeof IndexConfigType];

export const LabelDescriptorValueType = {
    /**
     * A variable-length string. This is the default.
     */
    String: "STRING",
    /**
     * Boolean; true or false.
     */
    Bool: "BOOL",
    /**
     * A 64-bit signed integer.
     */
    Int64: "INT64",
} as const;

/**
 * The type of data that can be assigned to the label.
 */
export type LabelDescriptorValueType = (typeof LabelDescriptorValueType)[keyof typeof LabelDescriptorValueType];

export const MetricDescriptorLaunchStage = {
    /**
     * Do not use this default value.
     */
    LaunchStageUnspecified: "LAUNCH_STAGE_UNSPECIFIED",
    /**
     * The feature is not yet implemented. Users can not use it.
     */
    Unimplemented: "UNIMPLEMENTED",
    /**
     * Prelaunch features are hidden from users and are only visible internally.
     */
    Prelaunch: "PRELAUNCH",
    /**
     * Early Access features are limited to a closed group of testers. To use these features, you must sign up in advance and sign a Trusted Tester agreement (which includes confidentiality provisions). These features may be unstable, changed in backward-incompatible ways, and are not guaranteed to be released.
     */
    EarlyAccess: "EARLY_ACCESS",
    /**
     * Alpha is a limited availability test for releases before they are cleared for widespread use. By Alpha, all significant design issues are resolved and we are in the process of verifying functionality. Alpha customers need to apply for access, agree to applicable terms, and have their projects allowlisted. Alpha releases don't have to be feature complete, no SLAs are provided, and there are no technical support obligations, but they will be far enough along that customers can actually use them in test environments or for limited-use tests -- just like they would in normal production cases.
     */
    Alpha: "ALPHA",
    /**
     * Beta is the point at which we are ready to open a release for any customer to use. There are no SLA or technical support obligations in a Beta release. Products will be complete from a feature perspective, but may have some open outstanding issues. Beta releases are suitable for limited production use cases.
     */
    Beta: "BETA",
    /**
     * GA features are open to all developers and are considered stable and fully qualified for production use.
     */
    Ga: "GA",
    /**
     * Deprecated features are scheduled to be shut down and removed. For more information, see the "Deprecation Policy" section of our Terms of Service (https://cloud.google.com/terms/) and the Google Cloud Platform Subject to the Deprecation Policy (https://cloud.google.com/terms/deprecation) documentation.
     */
    Deprecated: "DEPRECATED",
} as const;

/**
 * Optional. The launch stage of the metric definition.
 */
export type MetricDescriptorLaunchStage = (typeof MetricDescriptorLaunchStage)[keyof typeof MetricDescriptorLaunchStage];

export const MetricDescriptorMetadataLaunchStage = {
    /**
     * Do not use this default value.
     */
    LaunchStageUnspecified: "LAUNCH_STAGE_UNSPECIFIED",
    /**
     * The feature is not yet implemented. Users can not use it.
     */
    Unimplemented: "UNIMPLEMENTED",
    /**
     * Prelaunch features are hidden from users and are only visible internally.
     */
    Prelaunch: "PRELAUNCH",
    /**
     * Early Access features are limited to a closed group of testers. To use these features, you must sign up in advance and sign a Trusted Tester agreement (which includes confidentiality provisions). These features may be unstable, changed in backward-incompatible ways, and are not guaranteed to be released.
     */
    EarlyAccess: "EARLY_ACCESS",
    /**
     * Alpha is a limited availability test for releases before they are cleared for widespread use. By Alpha, all significant design issues are resolved and we are in the process of verifying functionality. Alpha customers need to apply for access, agree to applicable terms, and have their projects allowlisted. Alpha releases don't have to be feature complete, no SLAs are provided, and there are no technical support obligations, but they will be far enough along that customers can actually use them in test environments or for limited-use tests -- just like they would in normal production cases.
     */
    Alpha: "ALPHA",
    /**
     * Beta is the point at which we are ready to open a release for any customer to use. There are no SLA or technical support obligations in a Beta release. Products will be complete from a feature perspective, but may have some open outstanding issues. Beta releases are suitable for limited production use cases.
     */
    Beta: "BETA",
    /**
     * GA features are open to all developers and are considered stable and fully qualified for production use.
     */
    Ga: "GA",
    /**
     * Deprecated features are scheduled to be shut down and removed. For more information, see the "Deprecation Policy" section of our Terms of Service (https://cloud.google.com/terms/) and the Google Cloud Platform Subject to the Deprecation Policy (https://cloud.google.com/terms/deprecation) documentation.
     */
    Deprecated: "DEPRECATED",
} as const;

/**
 * Deprecated. Must use the MetricDescriptor.launch_stage instead.
 */
export type MetricDescriptorMetadataLaunchStage = (typeof MetricDescriptorMetadataLaunchStage)[keyof typeof MetricDescriptorMetadataLaunchStage];

export const MetricDescriptorMetricKind = {
    /**
     * Do not use this default value.
     */
    MetricKindUnspecified: "METRIC_KIND_UNSPECIFIED",
    /**
     * An instantaneous measurement of a value.
     */
    Gauge: "GAUGE",
    /**
     * The change in a value during a time interval.
     */
    Delta: "DELTA",
    /**
     * A value accumulated over a time interval. Cumulative measurements in a time series should have the same start time and increasing end times, until an event resets the cumulative value to zero and sets a new start time for the following points.
     */
    Cumulative: "CUMULATIVE",
} as const;

/**
 * Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
 */
export type MetricDescriptorMetricKind = (typeof MetricDescriptorMetricKind)[keyof typeof MetricDescriptorMetricKind];

export const MetricDescriptorValueType = {
    /**
     * Do not use this default value.
     */
    ValueTypeUnspecified: "VALUE_TYPE_UNSPECIFIED",
    /**
     * The value is a boolean. This value type can be used only if the metric kind is GAUGE.
     */
    Bool: "BOOL",
    /**
     * The value is a signed 64-bit integer.
     */
    Int64: "INT64",
    /**
     * The value is a double precision floating point number.
     */
    Double: "DOUBLE",
    /**
     * The value is a text string. This value type can be used only if the metric kind is GAUGE.
     */
    String: "STRING",
    /**
     * The value is a Distribution.
     */
    Distribution: "DISTRIBUTION",
    /**
     * The value is money.
     */
    Money: "MONEY",
} as const;

/**
 * Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
 */
export type MetricDescriptorValueType = (typeof MetricDescriptorValueType)[keyof typeof MetricDescriptorValueType];

export const MetricVersion = {
    /**
     * Logging API v2.
     */
    V2: "V2",
    /**
     * Logging API v1.
     */
    V1: "V1",
} as const;

/**
 * Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
 */
export type MetricVersion = (typeof MetricVersion)[keyof typeof MetricVersion];

export const OrganizationSinkOutputVersionFormat = {
    /**
     * An unspecified format version that will default to V2.
     */
    VersionFormatUnspecified: "VERSION_FORMAT_UNSPECIFIED",
    /**
     * LogEntry version 2 format.
     */
    V2: "V2",
    /**
     * LogEntry version 1 format.
     */
    V1: "V1",
} as const;

/**
 * Deprecated. This field is unused.
 */
export type OrganizationSinkOutputVersionFormat = (typeof OrganizationSinkOutputVersionFormat)[keyof typeof OrganizationSinkOutputVersionFormat];

export const SinkOutputVersionFormat = {
    /**
     * An unspecified format version that will default to V2.
     */
    VersionFormatUnspecified: "VERSION_FORMAT_UNSPECIFIED",
    /**
     * LogEntry version 2 format.
     */
    V2: "V2",
    /**
     * LogEntry version 1 format.
     */
    V1: "V1",
} as const;

/**
 * Deprecated. This field is unused.
 */
export type SinkOutputVersionFormat = (typeof SinkOutputVersionFormat)[keyof typeof SinkOutputVersionFormat];
