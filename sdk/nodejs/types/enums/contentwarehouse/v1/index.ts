// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const DocumentRawDocumentFileType = {
    /**
     * No raw document specified or it is non-parsable
     */
    RawDocumentFileTypeUnspecified: "RAW_DOCUMENT_FILE_TYPE_UNSPECIFIED",
    /**
     * Adobe PDF format
     */
    RawDocumentFileTypePdf: "RAW_DOCUMENT_FILE_TYPE_PDF",
    /**
     * Microsoft Word format
     */
    RawDocumentFileTypeDocx: "RAW_DOCUMENT_FILE_TYPE_DOCX",
    /**
     * Microsoft Excel format
     */
    RawDocumentFileTypeXlsx: "RAW_DOCUMENT_FILE_TYPE_XLSX",
    /**
     * Microsoft Powerpoint format
     */
    RawDocumentFileTypePptx: "RAW_DOCUMENT_FILE_TYPE_PPTX",
    /**
     * UTF-8 encoded text format
     */
    RawDocumentFileTypeText: "RAW_DOCUMENT_FILE_TYPE_TEXT",
} as const;

/**
 * This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.
 */
export type DocumentRawDocumentFileType = (typeof DocumentRawDocumentFileType)[keyof typeof DocumentRawDocumentFileType];

export const GoogleCloudContentwarehouseV1AccessControlActionOperationType = {
    Unknown: "UNKNOWN",
    /**
     * Adds newly given policy bindings in the existing bindings list.
     */
    AddPolicyBinding: "ADD_POLICY_BINDING",
    /**
     * Removes newly given policy bindings from the existing bindings list.
     */
    RemovePolicyBinding: "REMOVE_POLICY_BINDING",
    /**
     * Replaces existing policy bindings with the given policy binding list
     */
    ReplacePolicyBinding: "REPLACE_POLICY_BINDING",
} as const;

/**
 * Identifies the type of operation.
 */
export type GoogleCloudContentwarehouseV1AccessControlActionOperationType = (typeof GoogleCloudContentwarehouseV1AccessControlActionOperationType)[keyof typeof GoogleCloudContentwarehouseV1AccessControlActionOperationType];

export const GoogleCloudContentwarehouseV1RuleTriggerType = {
    Unknown: "UNKNOWN",
    /**
     * Trigger for create document action.
     */
    OnCreate: "ON_CREATE",
    /**
     * Trigger for update document action.
     */
    OnUpdate: "ON_UPDATE",
} as const;

/**
 * Identifies the trigger type for running the policy.
 */
export type GoogleCloudContentwarehouseV1RuleTriggerType = (typeof GoogleCloudContentwarehouseV1RuleTriggerType)[keyof typeof GoogleCloudContentwarehouseV1RuleTriggerType];

export const GoogleCloudContentwarehouseV1UpdateOptionsUpdateType = {
    /**
     * Defaults to full replace behavior, ie. FULL_REPLACE.
     */
    UpdateTypeUnspecified: "UPDATE_TYPE_UNSPECIFIED",
    /**
     * Fully replace all the fields. Any field masks will be ignored.
     */
    UpdateTypeReplace: "UPDATE_TYPE_REPLACE",
    /**
     * Merge the fields into the existing entities.
     */
    UpdateTypeMerge: "UPDATE_TYPE_MERGE",
    /**
     * Inserts the properties by names.
     */
    UpdateTypeInsertPropertiesByNames: "UPDATE_TYPE_INSERT_PROPERTIES_BY_NAMES",
    /**
     * Replace the properties by names.
     */
    UpdateTypeReplacePropertiesByNames: "UPDATE_TYPE_REPLACE_PROPERTIES_BY_NAMES",
    /**
     * Delete the properties by names.
     */
    UpdateTypeDeletePropertiesByNames: "UPDATE_TYPE_DELETE_PROPERTIES_BY_NAMES",
} as const;

/**
 * Type for update.
 */
export type GoogleCloudContentwarehouseV1UpdateOptionsUpdateType = (typeof GoogleCloudContentwarehouseV1UpdateOptionsUpdateType)[keyof typeof GoogleCloudContentwarehouseV1UpdateOptionsUpdateType];

export const GoogleCloudDocumentaiV1DocumentPageAnchorPageRefLayoutType = {
    /**
     * Layout Unspecified.
     */
    LayoutTypeUnspecified: "LAYOUT_TYPE_UNSPECIFIED",
    /**
     * References a Page.blocks element.
     */
    Block: "BLOCK",
    /**
     * References a Page.paragraphs element.
     */
    Paragraph: "PARAGRAPH",
    /**
     * References a Page.lines element.
     */
    Line: "LINE",
    /**
     * References a Page.tokens element.
     */
    Token: "TOKEN",
    /**
     * References a Page.visual_elements element.
     */
    VisualElement: "VISUAL_ELEMENT",
    /**
     * Refrrences a Page.tables element.
     */
    Table: "TABLE",
    /**
     * References a Page.form_fields element.
     */
    FormField: "FORM_FIELD",
} as const;

/**
 * Optional. The type of the layout element that is being referenced if any.
 */
export type GoogleCloudDocumentaiV1DocumentPageAnchorPageRefLayoutType = (typeof GoogleCloudDocumentaiV1DocumentPageAnchorPageRefLayoutType)[keyof typeof GoogleCloudDocumentaiV1DocumentPageAnchorPageRefLayoutType];

export const GoogleCloudDocumentaiV1DocumentPageLayoutOrientation = {
    /**
     * Unspecified orientation.
     */
    OrientationUnspecified: "ORIENTATION_UNSPECIFIED",
    /**
     * Orientation is aligned with page up.
     */
    PageUp: "PAGE_UP",
    /**
     * Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.
     */
    PageRight: "PAGE_RIGHT",
    /**
     * Orientation is aligned with page down. Turn the head 180 degrees from upright to read.
     */
    PageDown: "PAGE_DOWN",
    /**
     * Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read.
     */
    PageLeft: "PAGE_LEFT",
} as const;

/**
 * Detected orientation for the Layout.
 */
export type GoogleCloudDocumentaiV1DocumentPageLayoutOrientation = (typeof GoogleCloudDocumentaiV1DocumentPageLayoutOrientation)[keyof typeof GoogleCloudDocumentaiV1DocumentPageLayoutOrientation];

export const GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakType = {
    /**
     * Unspecified break type.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * A single whitespace.
     */
    Space: "SPACE",
    /**
     * A wider whitespace.
     */
    WideSpace: "WIDE_SPACE",
    /**
     * A hyphen that indicates that a token has been split across lines.
     */
    Hyphen: "HYPHEN",
} as const;

/**
 * Detected break type.
 */
export type GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakType = (typeof GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakType)[keyof typeof GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreakType];

export const GoogleCloudDocumentaiV1DocumentProvenanceType = {
    /**
     * Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a `parent`.
     */
    OperationTypeUnspecified: "OPERATION_TYPE_UNSPECIFIED",
    /**
     * Add an element.
     */
    Add: "ADD",
    /**
     * Remove an element identified by `parent`.
     */
    Remove: "REMOVE",
    /**
     * Replace an element identified by `parent`.
     */
    Replace: "REPLACE",
    /**
     * Request human review for the element identified by `parent`.
     */
    EvalRequested: "EVAL_REQUESTED",
    /**
     * Element is reviewed and approved at human review, confidence will be set to 1.0.
     */
    EvalApproved: "EVAL_APPROVED",
    /**
     * Element is skipped in the validation process.
     */
    EvalSkipped: "EVAL_SKIPPED",
} as const;

/**
 * The type of provenance operation.
 */
export type GoogleCloudDocumentaiV1DocumentProvenanceType = (typeof GoogleCloudDocumentaiV1DocumentProvenanceType)[keyof typeof GoogleCloudDocumentaiV1DocumentProvenanceType];

export const GoogleIamV1AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type GoogleIamV1AuditLogConfigLogType = (typeof GoogleIamV1AuditLogConfigLogType)[keyof typeof GoogleIamV1AuditLogConfigLogType];
