// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AddressGroupType = {
    /**
     * Default value.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * IP v4 ranges.
     */
    Ipv4: "IPV4",
    /**
     * IP v6 ranges.
     */
    Ipv6: "IPV6",
} as const;

/**
 * Required. The type of the Address Group. Possible values are "IPv4" or "IPV6".
 */
export type AddressGroupType = (typeof AddressGroupType)[keyof typeof AddressGroupType];

export const AuthorizationPolicyAction = {
    /**
     * Default value.
     */
    ActionUnspecified: "ACTION_UNSPECIFIED",
    /**
     * Grant access.
     */
    Allow: "ALLOW",
    /**
     * Deny access. Deny rules should be avoided unless they are used to provide a default "deny all" fallback.
     */
    Deny: "DENY",
} as const;

/**
 * Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
 */
export type AuthorizationPolicyAction = (typeof AuthorizationPolicyAction)[keyof typeof AuthorizationPolicyAction];

export const GoogleIamV1AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type GoogleIamV1AuditLogConfigLogType = (typeof GoogleIamV1AuditLogConfigLogType)[keyof typeof GoogleIamV1AuditLogConfigLogType];

export const MTLSPolicyClientValidationMode = {
    /**
     * Not allowed.
     */
    ClientValidationModeUnspecified: "CLIENT_VALIDATION_MODE_UNSPECIFIED",
    /**
     * Allow connection even if certificate chain validation of the client certificate failed or no client certificate was presented. The proof of possession of the private key is always checked if client certificate was presented. This mode requires the backend to implement processing of data extracted from a client certificate to authenticate the peer, or to reject connections if the client certificate fingerprint is missing.
     */
    AllowInvalidOrMissingClientCert: "ALLOW_INVALID_OR_MISSING_CLIENT_CERT",
    /**
     * Require a client certificate and allow connection to the backend only if validation of the client certificate passed. If set, requires a reference to non-empty TrustConfig specified in `client_validation_trust_config`.
     */
    RejectInvalid: "REJECT_INVALID",
} as const;

/**
 * When the client presents an invalid certificate or no certificate to the load balancer, the `client_validation_mode` specifies how the client connection is handled. Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
 */
export type MTLSPolicyClientValidationMode = (typeof MTLSPolicyClientValidationMode)[keyof typeof MTLSPolicyClientValidationMode];

export const OrganizationAddressGroupType = {
    /**
     * Default value.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * IP v4 ranges.
     */
    Ipv4: "IPV4",
    /**
     * IP v6 ranges.
     */
    Ipv6: "IPV6",
} as const;

/**
 * Required. The type of the Address Group. Possible values are "IPv4" or "IPV6".
 */
export type OrganizationAddressGroupType = (typeof OrganizationAddressGroupType)[keyof typeof OrganizationAddressGroupType];

export const RuleBasicProfile = {
    /**
     * If there is not a mentioned action for the target.
     */
    BasicProfileUnspecified: "BASIC_PROFILE_UNSPECIFIED",
    /**
     * Allow the matched traffic.
     */
    Allow: "ALLOW",
    /**
     * Deny the matched traffic.
     */
    Deny: "DENY",
} as const;

/**
 * Required. Profile which tells what the primitive action should be.
 */
export type RuleBasicProfile = (typeof RuleBasicProfile)[keyof typeof RuleBasicProfile];
