// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AddressGroupType = {
    /**
     * Default value.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * IP v4 ranges.
     */
    Ipv4: "IPV4",
    /**
     * IP v6 ranges.
     */
    Ipv6: "IPV6",
} as const;

/**
 * Required. The type of the Address Group. Possible values are "IPv4" or "IPV6".
 */
export type AddressGroupType = (typeof AddressGroupType)[keyof typeof AddressGroupType];

export const AuthorizationPolicyAction = {
    /**
     * Default value.
     */
    ActionUnspecified: "ACTION_UNSPECIFIED",
    /**
     * Grant access.
     */
    Allow: "ALLOW",
    /**
     * Deny access. Deny rules should be avoided unless they are used to provide a default "deny all" fallback.
     */
    Deny: "DENY",
} as const;

/**
 * Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
 */
export type AuthorizationPolicyAction = (typeof AuthorizationPolicyAction)[keyof typeof AuthorizationPolicyAction];

export const GoogleIamV1AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type GoogleIamV1AuditLogConfigLogType = (typeof GoogleIamV1AuditLogConfigLogType)[keyof typeof GoogleIamV1AuditLogConfigLogType];

export const MTLSPolicyClientValidationMode = {
    /**
     * Not allowed.
     */
    ClientValidationModeUnspecified: "CLIENT_VALIDATION_MODE_UNSPECIFIED",
    /**
     * Allow connection even if certificate chain validation of the client certificate failed or no client certificate was presented. The proof of possession of the private key is always checked if client certificate was presented. This mode requires the backend to implement processing of data extracted from a client certificate to authenticate the peer, or to reject connections if the client certificate fingerprint is missing.
     */
    AllowInvalidOrMissingClientCert: "ALLOW_INVALID_OR_MISSING_CLIENT_CERT",
    /**
     * Require a client certificate and allow connection to the backend only if validation of the client certificate passed. If set, requires a reference to non-empty TrustConfig specified in `client_validation_trust_config`.
     */
    RejectInvalid: "REJECT_INVALID",
} as const;

/**
 * When the client presents an invalid certificate or no certificate to the load balancer, the `client_validation_mode` specifies how the client connection is handled. Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
 */
export type MTLSPolicyClientValidationMode = (typeof MTLSPolicyClientValidationMode)[keyof typeof MTLSPolicyClientValidationMode];

export const OrganizationAddressGroupType = {
    /**
     * Default value.
     */
    TypeUnspecified: "TYPE_UNSPECIFIED",
    /**
     * IP v4 ranges.
     */
    Ipv4: "IPV4",
    /**
     * IP v6 ranges.
     */
    Ipv6: "IPV6",
} as const;

/**
 * Required. The type of the Address Group. Possible values are "IPv4" or "IPV6".
 */
export type OrganizationAddressGroupType = (typeof OrganizationAddressGroupType)[keyof typeof OrganizationAddressGroupType];

export const RuleBasicProfile = {
    /**
     * If there is not a mentioned action for the target.
     */
    BasicProfileUnspecified: "BASIC_PROFILE_UNSPECIFIED",
    /**
     * Allow the matched traffic.
     */
    Allow: "ALLOW",
    /**
     * Deny the matched traffic.
     */
    Deny: "DENY",
} as const;

/**
 * Required. Profile which tells what the primitive action should be.
 */
export type RuleBasicProfile = (typeof RuleBasicProfile)[keyof typeof RuleBasicProfile];

export const SecurityProfileType = {
    /**
     * Profile type not specified.
     */
    ProfileTypeUnspecified: "PROFILE_TYPE_UNSPECIFIED",
    /**
     * Profile type for threat prevention.
     */
    ThreatPrevention: "THREAT_PREVENTION",
} as const;

/**
 * Immutable. The single ProfileType that the SecurityProfile resource configures.
 */
export type SecurityProfileType = (typeof SecurityProfileType)[keyof typeof SecurityProfileType];

export const SeverityOverrideAction = {
    /**
     * Threat action not specified.
     */
    ThreatActionUnspecified: "THREAT_ACTION_UNSPECIFIED",
    /**
     * The default action (as specified by the vendor) is taken.
     */
    DefaultAction: "DEFAULT_ACTION",
    /**
     * The packet matching this rule will be allowed to transmit.
     */
    Allow: "ALLOW",
    /**
     * The packet matching this rule will be allowed to transmit, but a threat_log entry will be sent to the consumer project.
     */
    Alert: "ALERT",
    /**
     * The packet matching this rule will be dropped, and a threat_log entry will be sent to the consumer project.
     */
    Deny: "DENY",
} as const;

/**
 * Required. Threat action override.
 */
export type SeverityOverrideAction = (typeof SeverityOverrideAction)[keyof typeof SeverityOverrideAction];

export const SeverityOverrideSeverity = {
    /**
     * Severity level not specified.
     */
    SeverityUnspecified: "SEVERITY_UNSPECIFIED",
    /**
     * Suspicious events that do not pose an immediate threat, but that are reported to call attention to deeper problems that could possibly exist.
     */
    Informational: "INFORMATIONAL",
    /**
     * Warning-level threats that have very little impact on an organization's infrastructure. They usually require local or physical system access and may often result in victim privacy issues and information leakage.
     */
    Low: "LOW",
    /**
     * Minor threats in which impact is minimized, that do not compromise the target or exploits that require an attacker to reside on the same local network as the victim, affect only non-standard configurations or obscure applications, or provide very limited access.
     */
    Medium: "MEDIUM",
    /**
     * Threats that have the ability to become critical but have mitigating factors; for example, they may be difficult to exploit, do not result in elevated privileges, or do not have a large victim pool.
     */
    High: "HIGH",
    /**
     * Serious threats, such as those that affect default installations of widely deployed software, result in root compromise of servers, and the exploit code is widely available to attackers. The attacker usually does not need any special authentication credentials or knowledge about the individual victims and the target does not need to be manipulated into performing any special functions.
     */
    Critical: "CRITICAL",
} as const;

/**
 * Required. Severity level to match.
 */
export type SeverityOverrideSeverity = (typeof SeverityOverrideSeverity)[keyof typeof SeverityOverrideSeverity];

export const ThreatOverrideAction = {
    /**
     * Threat action not specified.
     */
    ThreatActionUnspecified: "THREAT_ACTION_UNSPECIFIED",
    /**
     * The default action (as specified by the vendor) is taken.
     */
    DefaultAction: "DEFAULT_ACTION",
    /**
     * The packet matching this rule will be allowed to transmit.
     */
    Allow: "ALLOW",
    /**
     * The packet matching this rule will be allowed to transmit, but a threat_log entry will be sent to the consumer project.
     */
    Alert: "ALERT",
    /**
     * The packet matching this rule will be dropped, and a threat_log entry will be sent to the consumer project.
     */
    Deny: "DENY",
} as const;

/**
 * Required. Threat action override. For some threat types, only a subset of actions applies.
 */
export type ThreatOverrideAction = (typeof ThreatOverrideAction)[keyof typeof ThreatOverrideAction];

export const TlsInspectionPolicyMinTlsVersion = {
    /**
     * Indicates no TLS version was specified.
     */
    TlsVersionUnspecified: "TLS_VERSION_UNSPECIFIED",
    /**
     * TLS 1.0
     */
    Tls10: "TLS_1_0",
    /**
     * TLS 1.1
     */
    Tls11: "TLS_1_1",
    /**
     * TLS 1.2
     */
    Tls12: "TLS_1_2",
    /**
     * TLS 1.3
     */
    Tls13: "TLS_1_3",
} as const;

/**
 * Optional. Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
 */
export type TlsInspectionPolicyMinTlsVersion = (typeof TlsInspectionPolicyMinTlsVersion)[keyof typeof TlsInspectionPolicyMinTlsVersion];

export const TlsInspectionPolicyTlsFeatureProfile = {
    /**
     * Indicates no profile was specified.
     */
    ProfileUnspecified: "PROFILE_UNSPECIFIED",
    /**
     * Compatible profile. Allows the broadest set of clients, even those which support only out-of-date SSL features to negotiate with the TLS inspection proxy.
     */
    ProfileCompatible: "PROFILE_COMPATIBLE",
    /**
     * Modern profile. Supports a wide set of SSL features, allowing modern clients to negotiate SSL with the TLS inspection proxy.
     */
    ProfileModern: "PROFILE_MODERN",
    /**
     * Restricted profile. Supports a reduced set of SSL features, intended to meet stricter compliance requirements.
     */
    ProfileRestricted: "PROFILE_RESTRICTED",
    /**
     * Custom profile. Allow only the set of allowed SSL features specified in the custom_features field of SslPolicy.
     */
    ProfileCustom: "PROFILE_CUSTOM",
} as const;

/**
 * Optional. The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers ("PROFILE_COMPATIBLE"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.
 */
export type TlsInspectionPolicyTlsFeatureProfile = (typeof TlsInspectionPolicyTlsFeatureProfile)[keyof typeof TlsInspectionPolicyTlsFeatureProfile];
