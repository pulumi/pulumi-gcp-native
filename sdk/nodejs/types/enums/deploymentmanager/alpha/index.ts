// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AuditLogConfigLogType = {
    /**
     * Default case. Should never be this.
     */
    LogTypeUnspecified: "LOG_TYPE_UNSPECIFIED",
    /**
     * Admin reads. Example: CloudIAM getIamPolicy
     */
    AdminRead: "ADMIN_READ",
    /**
     * Data writes. Example: CloudSQL Users create
     */
    DataWrite: "DATA_WRITE",
    /**
     * Data reads. Example: CloudSQL Users list
     */
    DataRead: "DATA_READ",
} as const;

/**
 * The log type that this config enables.
 */
export type AuditLogConfigLogType = (typeof AuditLogConfigLogType)[keyof typeof AuditLogConfigLogType];

export const CompositeTypeStatus = {
    UnknownStatus: "UNKNOWN_STATUS",
    Deprecated: "DEPRECATED",
    Experimental: "EXPERIMENTAL",
    Supported: "SUPPORTED",
} as const;

export type CompositeTypeStatus = (typeof CompositeTypeStatus)[keyof typeof CompositeTypeStatus];

export const DiagnosticLevel = {
    Unknown: "UNKNOWN",
    /**
     * If level is informational, it only gets displayed as part of the resource.
     */
    Information: "INFORMATION",
    /**
     * If level is warning, will end up in the resource as a warning.
     */
    Warning: "WARNING",
    /**
     * If level is error, it will indicate an error occurred after finishCondition is set, and this field will populate resource errors and operation errors.
     */
    Error: "ERROR",
} as const;

/**
 * Level to record this diagnostic.
 */
export type DiagnosticLevel = (typeof DiagnosticLevel)[keyof typeof DiagnosticLevel];

export const InputMappingLocation = {
    Unknown: "UNKNOWN",
    Path: "PATH",
    Query: "QUERY",
    Body: "BODY",
    Header: "HEADER",
} as const;

/**
 * The location where this mapping applies.
 */
export type InputMappingLocation = (typeof InputMappingLocation)[keyof typeof InputMappingLocation];

export const OperationStatus = {
    Pending: "PENDING",
    Running: "RUNNING",
    Done: "DONE",
} as const;

/**
 * [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
 */
export type OperationStatus = (typeof OperationStatus)[keyof typeof OperationStatus];

export const OperationWarningsItemCode = {
    /**
     * A link to a deprecated resource was created.
     */
    DeprecatedResourceUsed: "DEPRECATED_RESOURCE_USED",
    /**
     * No results are present on a particular list page.
     */
    NoResultsOnPage: "NO_RESULTS_ON_PAGE",
    /**
     * A given scope cannot be reached.
     */
    Unreachable: "UNREACHABLE",
    /**
     * The route's nextHopIp address is not assigned to an instance on the network.
     */
    NextHopAddressNotAssigned: "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
    /**
     * The route's nextHopInstance URL refers to an instance that does not exist.
     */
    NextHopInstanceNotFound: "NEXT_HOP_INSTANCE_NOT_FOUND",
    /**
     * The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
     */
    NextHopInstanceNotOnNetwork: "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
    /**
     * The route's next hop instance cannot ip forward.
     */
    NextHopCannotIpForward: "NEXT_HOP_CANNOT_IP_FORWARD",
    /**
     * The route's next hop instance does not have a status of RUNNING.
     */
    NextHopNotRunning: "NEXT_HOP_NOT_RUNNING",
    /**
     * The operation involved use of an injected kernel, which is deprecated.
     */
    InjectedKernelsDeprecated: "INJECTED_KERNELS_DEPRECATED",
    /**
     * The user attempted to use a resource that requires a TOS they have not accepted.
     */
    RequiredTosAgreement: "REQUIRED_TOS_AGREEMENT",
    /**
     * The user created a boot disk that is larger than image size.
     */
    DiskSizeLargerThanImageSize: "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
    /**
     * One or more of the resources set to auto-delete could not be deleted because they were in use.
     */
    ResourceNotDeleted: "RESOURCE_NOT_DELETED",
    /**
     * Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
     */
    SingleInstancePropertyTemplate: "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
    /**
     * Error which is not critical. We decided to continue the process despite the mentioned error.
     */
    NotCriticalError: "NOT_CRITICAL_ERROR",
    /**
     * Warning about failed cleanup of transient changes made by a failed operation.
     */
    CleanupFailed: "CLEANUP_FAILED",
    /**
     * Warning that value of a field has been overridden. Deprecated unused field.
     */
    FieldValueOverriden: "FIELD_VALUE_OVERRIDEN",
    /**
     * Warning that a resource is in use.
     */
    ResourceInUseByOtherResourceWarning: "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
    /**
     * A resource depends on a missing type
     */
    MissingTypeDependency: "MISSING_TYPE_DEPENDENCY",
    /**
     * Warning that is present in an external api call
     */
    ExternalApiWarning: "EXTERNAL_API_WARNING",
    /**
     * When a resource schema validation is ignored.
     */
    SchemaValidationIgnored: "SCHEMA_VALIDATION_IGNORED",
    /**
     * When undeclared properties in the schema are present
     */
    UndeclaredProperties: "UNDECLARED_PROPERTIES",
    /**
     * When deploying and at least one of the resources has a type marked as experimental
     */
    ExperimentalTypeUsed: "EXPERIMENTAL_TYPE_USED",
    /**
     * When deploying and at least one of the resources has a type marked as deprecated
     */
    DeprecatedTypeUsed: "DEPRECATED_TYPE_USED",
    /**
     * Success is reported, but some results may be missing due to errors
     */
    PartialSuccess: "PARTIAL_SUCCESS",
    /**
     * When deploying a deployment with a exceedingly large number of resources
     */
    LargeDeploymentWarning: "LARGE_DEPLOYMENT_WARNING",
} as const;

/**
 * [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
 */
export type OperationWarningsItemCode = (typeof OperationWarningsItemCode)[keyof typeof OperationWarningsItemCode];

export const TemplateContentsInterpreter = {
    UnknownInterpreter: "UNKNOWN_INTERPRETER",
    Python: "PYTHON",
    Jinja: "JINJA",
} as const;

/**
 * Which interpreter (python or jinja) should be used during expansion.
 */
export type TemplateContentsInterpreter = (typeof TemplateContentsInterpreter)[keyof typeof TemplateContentsInterpreter];

export const ValidationOptionsSchemaValidation = {
    Unknown: "UNKNOWN",
    /**
     * Ignore schema failures.
     */
    Ignore: "IGNORE",
    /**
     * Ignore schema failures but display them as warnings.
     */
    IgnoreWithWarnings: "IGNORE_WITH_WARNINGS",
    /**
     * Fail the resource if the schema is not valid, this is the default behavior.
     */
    Fail: "FAIL",
} as const;

/**
 * Customize how deployment manager will validate the resource against schema errors.
 */
export type ValidationOptionsSchemaValidation = (typeof ValidationOptionsSchemaValidation)[keyof typeof ValidationOptionsSchemaValidation];

export const ValidationOptionsUndeclaredProperties = {
    Unknown: "UNKNOWN",
    /**
     * Always include even if not present on discovery doc.
     */
    Include: "INCLUDE",
    /**
     * Always ignore if not present on discovery doc.
     */
    Ignore: "IGNORE",
    /**
     * Include on request, but emit a warning.
     */
    IncludeWithWarnings: "INCLUDE_WITH_WARNINGS",
    /**
     * Ignore properties, but emit a warning.
     */
    IgnoreWithWarnings: "IGNORE_WITH_WARNINGS",
    /**
     * Always fail if undeclared properties are present.
     */
    Fail: "FAIL",
} as const;

/**
 * Specify what to do with extra properties when executing a request.
 */
export type ValidationOptionsUndeclaredProperties = (typeof ValidationOptionsUndeclaredProperties)[keyof typeof ValidationOptionsUndeclaredProperties];
