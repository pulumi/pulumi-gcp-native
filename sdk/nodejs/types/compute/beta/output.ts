// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * A specification of the type and number of accelerator cards attached to the instance.
 */
export interface AcceleratorConfigResponse {
    /**
     * The number of the guest accelerator cards exposed to this instance.
     */
    acceleratorCount: number;
    /**
     * Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
     */
    acceleratorType: string;
}

/**
 * An access configuration attached to an instance's network interface. Only one access config per instance is supported.
 */
export interface AccessConfigResponse {
    /**
     * The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.
     */
    externalIpv6: string;
    /**
     * The prefix length of the external IPv6 range.
     */
    externalIpv6PrefixLength: number;
    /**
     * Type of the resource. Always compute#accessConfig for access configs.
     */
    kind: string;
    /**
     * The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access.
     */
    name: string;
    /**
     * An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
     */
    natIP: string;
    /**
     * This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
     */
    networkTier: string;
    /**
     * The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled in accessConfig. If this field is unspecified in ipv6AccessConfig, a default PTR record will be createc for first IP in associated external IPv6 range.
     */
    publicPtrDomainName: string;
    /**
     * Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name. This field is not used in ipv6AccessConfig. A default PTR record will be created if the VM has external IPv6 range associated.
     */
    setPublicPtr: boolean;
    /**
     * The type of configuration. The default and only option is ONE_TO_ONE_NAT.
     */
    type: string;
}

/**
 * Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
 */
export interface AdvancedMachineFeaturesResponse {
    /**
     * Whether to enable nested virtualization or not (default is false).
     */
    enableNestedVirtualization: boolean;
    /**
     * Whether to enable UEFI networking for instance creation.
     */
    enableUefiNetworking: boolean;
    /**
     * The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
     */
    threadsPerCore: number;
    /**
     * The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance's nominal CPU count and the underlying platform's SMT width.
     */
    visibleCoreCount: number;
}

/**
 * An alias IP range attached to an instance's network interface.
 */
export interface AliasIpRangeResponse {
    /**
     * The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
     */
    ipCidrRange: string;
    /**
     * The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.
     */
    subnetworkRangeName: string;
}

export interface AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse {
    /**
     * Specifies the size of the disk in base-2 GB.
     */
    diskSizeGb: string;
    /**
     * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
     */
    interface: string;
}

/**
 * Properties of the SKU instances being reserved. Next ID: 9
 */
export interface AllocationSpecificSKUAllocationReservedInstancePropertiesResponse {
    /**
     * Specifies accelerator type and count.
     */
    guestAccelerators: outputs.compute.beta.AcceleratorConfigResponse[];
    /**
     * Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
     */
    localSsds: outputs.compute.beta.AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse[];
    /**
     * An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
     */
    locationHint: string;
    /**
     * Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
     */
    machineType: string;
    /**
     * Specifies the number of hours after reservation creation where instances using the reservation won't be scheduled for maintenance.
     */
    maintenanceFreezeDurationHours: number;
    /**
     * Specifies the frequency of planned maintenance events. The accepted values are: `PERIODIC`.
     */
    maintenanceInterval: string;
    /**
     * Minimum cpu platform the reservation.
     */
    minCpuPlatform: string;
}

/**
 * This reservation type allows to pre allocate specific instance configuration. Next ID: 6
 */
export interface AllocationSpecificSKUReservationResponse {
    /**
     * Indicates how many instances are actually usable currently.
     */
    assuredCount: string;
    /**
     * Specifies the number of resources that are allocated.
     */
    count: string;
    /**
     * Indicates how many instances are in use.
     */
    inUseCount: string;
    /**
     * The instance properties for the reservation.
     */
    instanceProperties: outputs.compute.beta.AllocationSpecificSKUAllocationReservedInstancePropertiesResponse;
}

/**
 * [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This field is persisted and returned for instanceTemplate and not returned in the context of instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
 */
export interface AttachedDiskInitializeParamsResponse {
    /**
     * The architecture of the attached disk. Valid values are arm64 or x86_64.
     */
    architecture: string;
    /**
     * An optional description. Provide this property when creating the disk.
     */
    description: string;
    /**
     * Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
     */
    diskName: string;
    /**
     * Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
     */
    diskSizeGb: string;
    /**
     * Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
     */
    diskType: string;
    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. Guest OS features are applied by merging initializeParams.guestOsFeatures and disks.guestOsFeatures
     */
    guestOsFeatures: outputs.compute.beta.GuestOsFeatureResponse[];
    /**
     * Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
     */
    labels: {[key: string]: string};
    /**
     * A list of publicly visible licenses. Reserved for Google's use.
     */
    licenses: string[];
    /**
     * Indicates whether or not the disk can be read/write attached to more than one instance.
     */
    multiWriter: boolean;
    /**
     * Specifies which action to take on instance update with this disk. Default is to use the existing disk.
     */
    onUpdateAction: string;
    /**
     * Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
     */
    provisionedIops: string;
    /**
     * Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
     */
    resourceManagerTags: {[key: string]: string};
    /**
     * Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
     */
    resourcePolicies: string[];
    /**
     * The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
     */
    sourceImage: string;
    /**
     * The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
     */
    sourceImageEncryptionKey: outputs.compute.beta.CustomerEncryptionKeyResponse;
    /**
     * The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
     */
    sourceSnapshot: string;
    /**
     * The customer-supplied encryption key of the source snapshot.
     */
    sourceSnapshotEncryptionKey: outputs.compute.beta.CustomerEncryptionKeyResponse;
}

/**
 * An instance-attached disk resource.
 */
export interface AttachedDiskResponse {
    /**
     * The architecture of the attached disk. Valid values are ARM64 or X86_64.
     */
    architecture: string;
    /**
     * Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
     */
    autoDelete: boolean;
    /**
     * Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
     */
    boot: boolean;
    /**
     * Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
     */
    deviceName: string;
    /**
     * Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
     */
    diskEncryptionKey: outputs.compute.beta.CustomerEncryptionKeyResponse;
    /**
     * The size of the disk in GB.
     */
    diskSizeGb: string;
    /**
     * [Input Only] Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error.
     */
    forceAttach: boolean;
    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
     */
    guestOsFeatures: outputs.compute.beta.GuestOsFeatureResponse[];
    /**
     * A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
     */
    index: number;
    /**
     * [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
     */
    initializeParams: outputs.compute.beta.AttachedDiskInitializeParamsResponse;
    /**
     * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In certain configurations, persistent disks can use NVMe. For more information, see About persistent disks.
     */
    interface: string;
    /**
     * Type of the resource. Always compute#attachedDisk for attached disks.
     */
    kind: string;
    /**
     * Any valid publicly visible licenses.
     */
    licenses: string[];
    /**
     * Whether to indicate the attached disk is locked. The locked disk is not allowed to be detached from the instance, or to be used as the source of the snapshot creation, and the image creation. The instance with at least one locked attached disk is not allow to be used as source of machine image creation, instant snapshot creation, and not allowed to be deleted with --keep-disk parameter set to true for locked disks.
     */
    locked: boolean;
    /**
     * The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
     */
    mode: string;
    /**
     * shielded vm initial state stored on disk
     */
    shieldedInstanceInitialState: outputs.compute.beta.InitialStateConfigResponse;
    /**
     * Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name for zonal disk, and the URL for regional disk.
     */
    source: string;
    /**
     * Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
     */
    type: string;
    /**
     * A list of user provided licenses. It represents a list of URLs to the license resource. Unlike regular licenses, user provided licenses can be modified after the disk is created.
     */
    userLicenses: string[];
}

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
 */
export interface AuditConfigResponse {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs: outputs.compute.beta.AuditLogConfigResponse[];
    /**
     * This is deprecated and has no effect. Do not use.
     */
    exemptedMembers: string[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service: string;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigResponse {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers: string[];
    /**
     * This is deprecated and has no effect. Do not use.
     */
    ignoreChildExemptions: boolean;
    /**
     * The log type that this config enables.
     */
    logType: string;
}

/**
 * This is deprecated and has no effect. Do not use.
 */
export interface AuthorizationLoggingOptionsResponse {
    /**
     * This is deprecated and has no effect. Do not use.
     */
    permissionType: string;
}

export interface AutoscalerStatusDetailsResponse {
    /**
     * The status message.
     */
    message: string;
    /**
     * The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions.
     */
    type: string;
}

/**
 * CPU utilization policy.
 */
export interface AutoscalingPolicyCpuUtilizationResponse {
    /**
     * Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
     */
    predictiveMethod: string;
    /**
     * The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
     */
    utilizationTarget: number;
}

/**
 * Custom utilization metric policy.
 */
export interface AutoscalingPolicyCustomMetricUtilizationResponse {
    /**
     * A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
     */
    filter: string;
    /**
     * The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE.
     */
    metric: string;
    /**
     * If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead.
     */
    singleInstanceAssignment: number;
    /**
     * The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances.
     */
    utilizationTarget: number;
    /**
     * Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
     */
    utilizationTargetType: string;
}

/**
 * Configuration parameters of autoscaling based on load balancing.
 */
export interface AutoscalingPolicyLoadBalancingUtilizationResponse {
    /**
     * Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
     */
    utilizationTarget: number;
}

/**
 * Cloud Autoscaler policy.
 */
export interface AutoscalingPolicyResponse {
    /**
     * The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
     */
    coolDownPeriodSec: number;
    /**
     * Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
     */
    cpuUtilization: outputs.compute.beta.AutoscalingPolicyCpuUtilizationResponse;
    /**
     * Configuration parameters of autoscaling based on a custom metric.
     */
    customMetricUtilizations: outputs.compute.beta.AutoscalingPolicyCustomMetricUtilizationResponse[];
    /**
     * Configuration parameters of autoscaling based on load balancer.
     */
    loadBalancingUtilization: outputs.compute.beta.AutoscalingPolicyLoadBalancingUtilizationResponse;
    /**
     * The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
     */
    maxNumReplicas: number;
    /**
     * The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
     */
    minNumReplicas: number;
    /**
     * Defines operating mode for this policy.
     */
    mode: string;
    scaleDownControl: outputs.compute.beta.AutoscalingPolicyScaleDownControlResponse;
    scaleInControl: outputs.compute.beta.AutoscalingPolicyScaleInControlResponse;
    /**
     * Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
     */
    scalingSchedules: {[key: string]: string};
}

/**
 * Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
 */
export interface AutoscalingPolicyScaleDownControlResponse {
    /**
     * Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
     */
    maxScaledDownReplicas: outputs.compute.beta.FixedOrPercentResponse;
    /**
     * How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
     */
    timeWindowSec: number;
}

/**
 * Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
 */
export interface AutoscalingPolicyScaleInControlResponse {
    /**
     * Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
     */
    maxScaledInReplicas: outputs.compute.beta.FixedOrPercentResponse;
    /**
     * How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
     */
    timeWindowSec: number;
}

/**
 * Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
 */
export interface BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse {
    /**
     * The header field name to match on when bypassing cache. Values are case-insensitive.
     */
    headerName: string;
}

/**
 * Message containing what to include in the cache key for a request for Cloud CDN.
 */
export interface BackendBucketCdnPolicyCacheKeyPolicyResponse {
    /**
     * Allows HTTP request headers (by name) to be used in the cache key.
     */
    includeHttpHeaders: string[];
    /**
     * Names of query string parameters to include in cache keys. Default parameters are always included. '&' and '=' will be percent encoded and not treated as delimiters.
     */
    queryStringWhitelist: string[];
}

/**
 * Specify CDN TTLs for response error codes.
 */
export interface BackendBucketCdnPolicyNegativeCachingPolicyResponse {
    /**
     * The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
     */
    code: number;
    /**
     * The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     */
    ttl: number;
}

/**
 * Message containing Cloud CDN configuration for a backend bucket.
 */
export interface BackendBucketCdnPolicyResponse {
    /**
     * Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
     */
    bypassCacheOnRequestHeaders: outputs.compute.beta.BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse[];
    /**
     * The CacheKeyPolicy for this CdnPolicy.
     */
    cacheKeyPolicy: outputs.compute.beta.BackendBucketCdnPolicyCacheKeyPolicyResponse;
    /**
     * Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
     */
    cacheMode: string;
    /**
     * Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
     */
    clientTtl: number;
    /**
     * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     */
    defaultTtl: number;
    /**
     * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     */
    maxTtl: number;
    /**
     * Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
     */
    negativeCaching: boolean;
    /**
     * Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
     */
    negativeCachingPolicy: outputs.compute.beta.BackendBucketCdnPolicyNegativeCachingPolicyResponse[];
    /**
     * If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
     */
    requestCoalescing: boolean;
    /**
     * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
     */
    serveWhileStale: number;
    /**
     * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
     */
    signedUrlCacheMaxAgeSec: string;
    /**
     * Names of the keys for signing request URLs.
     */
    signedUrlKeyNames: string[];
}

/**
 * Message containing information of one individual backend.
 */
export interface BackendResponse {
    /**
     * Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
     */
    balancingMode: string;
    /**
     * A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
     */
    capacityScaler: number;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description: string;
    /**
     * This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
     */
    failover: boolean;
    /**
     * The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
     */
    group: string;
    /**
     * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
     */
    maxConnections: number;
    /**
     * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
     */
    maxConnectionsPerEndpoint: number;
    /**
     * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
     */
    maxConnectionsPerInstance: number;
    /**
     * Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
     */
    maxRate: number;
    /**
     * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
     */
    maxRatePerEndpoint: number;
    /**
     * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
     */
    maxRatePerInstance: number;
    /**
     * Optional parameter to define a target capacity for the UTILIZATION balancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode.
     */
    maxUtilization: number;
}

/**
 * Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
 */
export interface BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse {
    /**
     * The header field name to match on when bypassing cache. Values are case-insensitive.
     */
    headerName: string;
}

/**
 * Specify CDN TTLs for response error codes.
 */
export interface BackendServiceCdnPolicyNegativeCachingPolicyResponse {
    /**
     * The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
     */
    code: number;
    /**
     * The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     */
    ttl: number;
}

/**
 * Message containing Cloud CDN configuration for a backend service.
 */
export interface BackendServiceCdnPolicyResponse {
    /**
     * Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
     */
    bypassCacheOnRequestHeaders: outputs.compute.beta.BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse[];
    /**
     * The CacheKeyPolicy for this CdnPolicy.
     */
    cacheKeyPolicy: outputs.compute.beta.CacheKeyPolicyResponse;
    /**
     * Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
     */
    cacheMode: string;
    /**
     * Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
     */
    clientTtl: number;
    /**
     * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     */
    defaultTtl: number;
    /**
     * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
     */
    maxTtl: number;
    /**
     * Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
     */
    negativeCaching: boolean;
    /**
     * Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
     */
    negativeCachingPolicy: outputs.compute.beta.BackendServiceCdnPolicyNegativeCachingPolicyResponse[];
    /**
     * If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
     */
    requestCoalescing: boolean;
    /**
     * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
     */
    serveWhileStale: number;
    /**
     * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
     */
    signedUrlCacheMaxAgeSec: string;
    /**
     * Names of the keys for signing request URLs.
     */
    signedUrlKeyNames: string[];
}

/**
 * Connection Tracking configuration for this BackendService.
 */
export interface BackendServiceConnectionTrackingPolicyResponse {
    /**
     * Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL. If set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP. If set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy). If set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default. For more details, see [Connection Persistence for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#connection-persistence) and [Connection Persistence for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#connection-persistence).
     */
    connectionPersistenceOnUnhealthyBackends: string;
    /**
     * Enable Strong Session Affinity for Network Load Balancing. This option is not available publicly.
     */
    enableStrongAffinity: boolean;
    /**
     * Specifies how long to keep a Connection Tracking entry while there is no matching traffic (in seconds). For Internal TCP/UDP Load Balancing: - The minimum (default) is 10 minutes and the maximum is 16 hours. - It can be set only if Connection Tracking is less than 5-tuple (i.e. Session Affinity is CLIENT_IP_NO_DESTINATION, CLIENT_IP or CLIENT_IP_PROTO, and Tracking Mode is PER_SESSION). For Network Load Balancer the default is 60 seconds. This option is not available publicly.
     */
    idleTimeoutSec: number;
    /**
     * Specifies the key used for connection tracking. There are two options: - PER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol. - PER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity. For more details, see [Tracking Mode for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#tracking-mode) and [Tracking Mode for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#tracking-mode).
     */
    trackingMode: string;
}

/**
 * For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes).
 */
export interface BackendServiceFailoverPolicyResponse {
    /**
     * This can be set to true only if the protocol is TCP. The default is false.
     */
    disableConnectionDrainOnFailover: boolean;
    /**
     * If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). The default is false.
     */
    dropTrafficIfUnhealthy: boolean;
    /**
     * The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
     */
    failoverRatio: number;
}

/**
 * Identity-Aware Proxy
 */
export interface BackendServiceIAPResponse {
    /**
     * Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
     */
    enabled: boolean;
    /**
     * OAuth2 client ID to use for the authentication flow.
     */
    oauth2ClientId: string;
    /**
     * OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
     */
    oauth2ClientSecret: string;
    /**
     * SHA256 hash value for the field oauth2_client_secret above.
     */
    oauth2ClientSecretSha256: string;
}

/**
 * The configuration for a custom policy implemented by the user and deployed with the client.
 */
export interface BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyResponse {
    /**
     * An optional, arbitrary JSON object with configuration data, understood by a locally installed custom policy implementation.
     */
    data: string;
    /**
     * Identifies the custom policy. The value should match the type the custom implementation is registered with on the gRPC clients. It should follow protocol buffer message naming conventions and include the full path (e.g. myorg.CustomLbPolicy). The maximum length is 256 characters. Note that specifying the same custom policy more than once for a backend is not a valid configuration and will be rejected.
     */
    name: string;
}

/**
 * The configuration for a built-in load balancing policy.
 */
export interface BackendServiceLocalityLoadBalancingPolicyConfigPolicyResponse {
    /**
     * The name of a locality load balancer policy to be used. The value should be one of the predefined ones as supported by localityLbPolicy, although at the moment only ROUND_ROBIN is supported. This field should only be populated when the customPolicy field is not used. Note that specifying the same policy more than once for a backend is not a valid configuration and will be rejected.
     */
    name: string;
}

/**
 * Container for either a built-in LB policy supported by gRPC or Envoy or a custom one implemented by the end user.
 */
export interface BackendServiceLocalityLoadBalancingPolicyConfigResponse {
    customPolicy: outputs.compute.beta.BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicyResponse;
    policy: outputs.compute.beta.BackendServiceLocalityLoadBalancingPolicyConfigPolicyResponse;
}

/**
 * The available logging options for the load balancer traffic served by this backend service.
 */
export interface BackendServiceLogConfigResponse {
    /**
     * Denotes whether to enable logging for the load balancer traffic served by this backend service. The default value is false.
     */
    enable: boolean;
    /**
     * This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
     */
    sampleRate: number;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * This is deprecated and has no effect. Do not use.
     */
    bindingId: string;
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.compute.beta.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * Message containing what to include in the cache key for a request for Cloud CDN.
 */
export interface CacheKeyPolicyResponse {
    /**
     * If true, requests to different hosts will be cached separately.
     */
    includeHost: boolean;
    /**
     * Allows HTTP request headers (by name) to be used in the cache key.
     */
    includeHttpHeaders: string[];
    /**
     * Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
     */
    includeNamedCookies: string[];
    /**
     * If true, http and https requests will be cached separately.
     */
    includeProtocol: boolean;
    /**
     * If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
     */
    includeQueryString: boolean;
    /**
     * Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
     */
    queryStringBlacklist: string[];
    /**
     * Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
     */
    queryStringWhitelist: string[];
}

/**
 * Settings controlling the volume of requests, connections and retries to this backend service.
 */
export interface CircuitBreakersResponse {
    /**
     * The timeout for new network connections to hosts.
     */
    connectTimeout: outputs.compute.beta.DurationResponse;
    /**
     * The maximum number of connections to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    maxConnections: number;
    /**
     * The maximum number of pending requests allowed to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    maxPendingRequests: number;
    /**
     * The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
     */
    maxRequests: number;
    /**
     * Maximum requests for a single connection to the backend service. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    maxRequestsPerConnection: number;
    /**
     * The maximum number of parallel retries allowed to the backend cluster. If not specified, the default is 1. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    maxRetries: number;
}

/**
 * This is deprecated and has no effect. Do not use.
 */
export interface ConditionResponse {
    /**
     * This is deprecated and has no effect. Do not use.
     */
    iam: string;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    op: string;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    svc: string;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    sys: string;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    values: string[];
}

/**
 * A set of Confidential Instance options.
 */
export interface ConfidentialInstanceConfigResponse {
    /**
     * Defines whether the instance should have confidential compute enabled.
     */
    enableConfidentialCompute: boolean;
}

/**
 * Message containing connection draining configuration.
 */
export interface ConnectionDrainingResponse {
    /**
     * Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
     */
    drainingTimeoutSec: number;
}

/**
 * The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
 */
export interface ConsistentHashLoadBalancerSettingsHttpCookieResponse {
    /**
     * Name of the cookie.
     */
    name: string;
    /**
     * Path to set for the cookie.
     */
    path: string;
    /**
     * Lifetime of the cookie.
     */
    ttl: outputs.compute.beta.DurationResponse;
}

/**
 * This message defines settings for a consistent hash style load balancer.
 */
export interface ConsistentHashLoadBalancerSettingsResponse {
    /**
     * Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    httpCookie: outputs.compute.beta.ConsistentHashLoadBalancerSettingsHttpCookieResponse;
    /**
     * The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     */
    httpHeaderName: string;
    /**
     * The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
     */
    minimumRingSize: string;
}

/**
 * The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard.
 */
export interface CorsPolicyResponse {
    /**
     * In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This field translates to the Access-Control-Allow-Credentials header. Default is false.
     */
    allowCredentials: boolean;
    /**
     * Specifies the content for the Access-Control-Allow-Headers header.
     */
    allowHeaders: string[];
    /**
     * Specifies the content for the Access-Control-Allow-Methods header.
     */
    allowMethods: string[];
    /**
     * Specifies a regular expression that matches allowed origins. For more information about the regular expression syntax, see Syntax. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
     */
    allowOriginRegexes: string[];
    /**
     * Specifies the list of origins that is allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
     */
    allowOrigins: string[];
    /**
     * If true, the setting specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
     */
    disabled: boolean;
    /**
     * Specifies the content for the Access-Control-Expose-Headers header.
     */
    exposeHeaders: string[];
    /**
     * Specifies how long results of a preflight request can be cached in seconds. This field translates to the Access-Control-Max-Age header.
     */
    maxAge: number;
}

export interface CustomerEncryptionKeyResponse {
    /**
     * The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key 
     */
    kmsKeyName: string;
    /**
     * The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: "kmsKeyServiceAccount": "name@project_id.iam.gserviceaccount.com/ 
     */
    kmsKeyServiceAccount: string;
    /**
     * Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rawKey": "SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0=" 
     */
    rawKey: string;
    /**
     * Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: "rsaEncryptedKey": "ieCx/NcW06PcT7Ep1X6LUTc/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH z0mBibXUInrC/jEk014kCK/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==" The key must meet the following requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem 
     */
    rsaEncryptedKey: string;
    /**
     * [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
     */
    sha256: string;
}

/**
 * Deprecation status for a public resource.
 */
export interface DeprecationStatusResponse {
    /**
     * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
     */
    deleted: string;
    /**
     * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
     */
    deprecated: string;
    /**
     * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
     */
    obsolete: string;
    /**
     * The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
     */
    replacement: string;
    /**
     * The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
     */
    state: string;
    /**
     * The rollout policy for this deprecation. This policy is only enforced by image family views. The rollout policy restricts the zones where the associated resource is considered in a deprecated state. When the rollout policy does not include the user specified zone, or if the zone is rolled out, the associated resource is considered in a deprecated state. The rollout policy for this deprecation is read-only, except for allowlisted users. This field might not be configured. To view the latest non-deprecated image in a specific zone, use the imageFamilyViews.get method.
     */
    stateOverride: outputs.compute.beta.RolloutPolicyResponse;
}

/**
 * A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
 */
export interface DiskInstantiationConfigResponse {
    /**
     * Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
     */
    autoDelete: boolean;
    /**
     * The custom source image to be used to restore this disk when instantiating this instance template.
     */
    customImage: string;
    /**
     * Specifies the device name of the disk to which the configurations apply to.
     */
    deviceName: string;
    /**
     * Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks. 
     */
    instantiateFrom: string;
}

/**
 * Additional disk params.
 */
export interface DiskParamsResponse {
    /**
     * Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
     */
    resourceManagerTags: {[key: string]: string};
}

/**
 * A set of Display Device options
 */
export interface DisplayDeviceResponse {
    /**
     * Defines whether the instance has Display enabled.
     */
    enableDisplay: boolean;
}

export interface DistributionPolicyResponse {
    /**
     * The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
     */
    targetShape: string;
    /**
     * Zones where the regional managed instance group will create and manage its instances.
     */
    zones: outputs.compute.beta.DistributionPolicyZoneConfigurationResponse[];
}

export interface DistributionPolicyZoneConfigurationResponse {
    /**
     * The URL of the zone. The zone must exist in the region where the managed instance group is located.
     */
    zone: string;
}

/**
 * A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
 */
export interface DurationResponse {
    /**
     * Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
     */
    nanos: number;
    /**
     * Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
     */
    seconds: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * The interface for the external VPN gateway.
 */
export interface ExternalVpnGatewayInterfaceResponse {
    /**
     * IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine.
     */
    ipAddress: string;
}

export interface FileContentBufferResponse {
    /**
     * The raw content in the secure keys file.
     */
    content: string;
    /**
     * The file type of source file.
     */
    fileType: string;
}

export interface FirewallAllowedItemResponse {
    /**
     * The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
     */
    ipProtocol: string;
    /**
     * An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
     */
    ports: string[];
}

export interface FirewallDeniedItemResponse {
    /**
     * The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
     */
    ipProtocol: string;
    /**
     * An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
     */
    ports: string[];
}

/**
 * The available logging options for a firewall rule.
 */
export interface FirewallLogConfigResponse {
    /**
     * This field denotes whether to enable logging for a particular firewall rule.
     */
    enable: boolean;
    /**
     * This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
     */
    metadata: string;
}

export interface FirewallPolicyAssociationResponse {
    /**
     * The target that the firewall policy is attached to.
     */
    attachmentTarget: string;
    /**
     * Deprecated, please use short name instead. The display name of the firewall policy of the association.
     */
    displayName: string;
    /**
     * The firewall policy ID of the association.
     */
    firewallPolicyId: string;
    /**
     * The name for an association.
     */
    name: string;
    /**
     * The short name of the firewall policy of the association.
     */
    shortName: string;
}

export interface FirewallPolicyRuleMatcherLayer4ConfigResponse {
    /**
     * The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
     */
    ipProtocol: string;
    /**
     * An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
     */
    ports: string[];
}

/**
 * Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
 */
export interface FirewallPolicyRuleMatcherResponse {
    /**
     * Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10.
     */
    destAddressGroups: string[];
    /**
     * Fully Qualified Domain Name (FQDN) which should be matched against traffic destination. Maximum number of destination fqdn allowed is 100.
     */
    destFqdns: string[];
    /**
     * CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
     */
    destIpRanges: string[];
    /**
     * Region codes whose IP addresses will be used to match for destination of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex."US" Maximum number of dest region codes allowed is 5000.
     */
    destRegionCodes: string[];
    /**
     * Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic destination.
     */
    destThreatIntelligences: string[];
    /**
     * Pairs of IP protocols and ports that the rule should match.
     */
    layer4Configs: outputs.compute.beta.FirewallPolicyRuleMatcherLayer4ConfigResponse[];
    /**
     * Address groups which should be matched against the traffic source. Maximum number of source address groups is 10.
     */
    srcAddressGroups: string[];
    /**
     * Fully Qualified Domain Name (FQDN) which should be matched against traffic source. Maximum number of source fqdn allowed is 100.
     */
    srcFqdns: string[];
    /**
     * CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
     */
    srcIpRanges: string[];
    /**
     * Region codes whose IP addresses will be used to match for source of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex."US" Maximum number of source region codes allowed is 5000.
     */
    srcRegionCodes: string[];
    /**
     * List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
     */
    srcSecureTags: outputs.compute.beta.FirewallPolicyRuleSecureTagResponse[];
    /**
     * Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic source.
     */
    srcThreatIntelligences: string[];
}

/**
 * Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
 */
export interface FirewallPolicyRuleResponse {
    /**
     * The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
     */
    action: string;
    /**
     * An optional description for this resource.
     */
    description: string;
    /**
     * The direction in which this rule applies.
     */
    direction: string;
    /**
     * Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
     */
    disabled: boolean;
    /**
     * Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
     */
    enableLogging: boolean;
    /**
     * [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules
     */
    kind: string;
    /**
     * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
     */
    match: outputs.compute.beta.FirewallPolicyRuleMatcherResponse;
    /**
     * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
     */
    priority: number;
    /**
     * An optional name for the rule. This field is not a unique identifier and can be updated.
     */
    ruleName: string;
    /**
     * Calculation of the complexity of a single firewall policy rule.
     */
    ruleTupleCount: number;
    /**
     * A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
     */
    targetResources: string[];
    /**
     * A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the target_secure_tag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
     */
    targetSecureTags: outputs.compute.beta.FirewallPolicyRuleSecureTagResponse[];
    /**
     * A list of service accounts indicating the sets of instances that are applied with this rule.
     */
    targetServiceAccounts: string[];
}

export interface FirewallPolicyRuleSecureTagResponse {
    /**
     * Name of the secure tag, created with TagManager's TagValue API.
     */
    name: string;
    /**
     * State of the secure tag, either `EFFECTIVE` or `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted or its network is deleted.
     */
    state: string;
}

/**
 * Encapsulates numeric value that can be either absolute or relative.
 */
export interface FixedOrPercentResponse {
    /**
     * Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded. 
     */
    calculated: number;
    /**
     * Specifies a fixed number of VM instances. This must be a positive integer.
     */
    fixed: number;
    /**
     * Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
     */
    percent: number;
}

/**
 * Describes the auto-registration of the Forwarding Rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this Forwarding Rule.
 */
export interface ForwardingRuleServiceDirectoryRegistrationResponse {
    /**
     * Service Directory namespace to register the forwarding rule under.
     */
    namespace: string;
    /**
     * Service Directory service to register the forwarding rule under.
     */
    service: string;
    /**
     * [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding Rules on the same network should use the same Service Directory region.
     */
    serviceDirectoryRegion: string;
}

export interface GRPCHealthCheckResponse {
    /**
     * The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.
     */
    grpcServiceName: string;
    /**
     * The TCP port number to which the health check prober sends packets. Valid values are 1 through 65535.
     */
    port: number;
    /**
     * Not supported.
     */
    portName: string;
    /**
     * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
     */
    portSpecification: string;
}

/**
 * Guest OS features.
 */
export interface GuestOsFeatureResponse {
    /**
     * The ID of a supported feature. To add multiple values, use commas to separate values. Set to one or more of the following values: - VIRTIO_SCSI_MULTIQUEUE - WINDOWS - MULTI_IP_SUBNET - UEFI_COMPATIBLE - GVNIC - SEV_CAPABLE - SUSPEND_RESUME_COMPATIBLE - SEV_SNP_CAPABLE For more information, see Enabling guest operating system features.
     */
    type: string;
}

export interface HTTP2HealthCheckResponse {
    /**
     * The value of the host header in the HTTP/2 health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest
     */
    host: string;
    /**
     * The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
     */
    port: number;
    /**
     * Not supported.
     */
    portName: string;
    /**
     * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
     */
    portSpecification: string;
    /**
     * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
     */
    proxyHeader: string;
    /**
     * The request path of the HTTP/2 health check request. The default value is /.
     */
    requestPath: string;
    /**
     * Creates a content-based HTTP/2 health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http
     */
    response: string;
}

export interface HTTPHealthCheckResponse {
    /**
     * The value of the host header in the HTTP health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest
     */
    host: string;
    /**
     * The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
     */
    port: number;
    /**
     * Not supported.
     */
    portName: string;
    /**
     * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Also supported in legacy HTTP health checks for target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
     */
    portSpecification: string;
    /**
     * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
     */
    proxyHeader: string;
    /**
     * The request path of the HTTP health check request. The default value is /.
     */
    requestPath: string;
    /**
     * Creates a content-based HTTP health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http
     */
    response: string;
}

export interface HTTPSHealthCheckResponse {
    /**
     * The value of the host header in the HTTPS health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest
     */
    host: string;
    /**
     * The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
     */
    port: number;
    /**
     * Not supported.
     */
    portName: string;
    /**
     * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
     */
    portSpecification: string;
    /**
     * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
     */
    proxyHeader: string;
    /**
     * The request path of the HTTPS health check request. The default value is /.
     */
    requestPath: string;
    /**
     * Creates a content-based HTTPS health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http
     */
    response: string;
}

/**
 * Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
 */
export interface HealthCheckLogConfigResponse {
    /**
     * Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
     */
    enable: boolean;
}

/**
 * UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
 */
export interface HostRuleResponse {
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description: string;
    /**
     * The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character, and if followed by anything, the immediate following character must be either - or .. * based matching is not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
     */
    hosts: string[];
    /**
     * The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.
     */
    pathMatcher: string;
}

/**
 * Specification for how requests are aborted as part of fault injection.
 */
export interface HttpFaultAbortResponse {
    /**
     * The HTTP status code used to abort the request. The value must be from 200 to 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
     */
    httpStatus: number;
    /**
     * The percentage of traffic for connections, operations, or requests that is aborted as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
     */
    percentage: number;
}

/**
 * Specifies the delay introduced by the load balancer before forwarding the request to the backend service as part of fault injection.
 */
export interface HttpFaultDelayResponse {
    /**
     * Specifies the value of the fixed delay interval.
     */
    fixedDelay: outputs.compute.beta.DurationResponse;
    /**
     * The percentage of traffic for connections, operations, or requests for which a delay is introduced as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
     */
    percentage: number;
}

/**
 * The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by the load balancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests.
 */
export interface HttpFaultInjectionResponse {
    /**
     * The specification for how client requests are aborted as part of fault injection.
     */
    abort: outputs.compute.beta.HttpFaultAbortResponse;
    /**
     * The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
     */
    delay: outputs.compute.beta.HttpFaultDelayResponse;
}

/**
 * HttpFilterConfiguration supplies additional contextual settings for networkservices.HttpFilter resources enabled by Traffic Director.
 */
export interface HttpFilterConfigResponse {
    /**
     * The configuration needed to enable the networkservices.HttpFilter resource. The configuration must be YAML formatted and only contain fields defined in the protobuf identified in configTypeUrl
     */
    config: string;
    /**
     * The fully qualified versioned proto3 type url of the protobuf that the filter expects for its contextual settings, for example: type.googleapis.com/google.protobuf.Struct
     */
    configTypeUrl: string;
    /**
     * Name of the networkservices.HttpFilter resource this configuration belongs to. This name must be known to the xDS client. Example: envoy.wasm
     */
    filterName: string;
}

/**
 * The request and response header transformations that take effect before the request is passed along to the selected backendService.
 */
export interface HttpHeaderActionResponse {
    /**
     * Headers to add to a matching request before forwarding the request to the backendService.
     */
    requestHeadersToAdd: outputs.compute.beta.HttpHeaderOptionResponse[];
    /**
     * A list of header names for headers that need to be removed from the request before forwarding the request to the backendService.
     */
    requestHeadersToRemove: string[];
    /**
     * Headers to add the response before sending the response back to the client.
     */
    responseHeadersToAdd: outputs.compute.beta.HttpHeaderOptionResponse[];
    /**
     * A list of header names for headers that need to be removed from the response before sending the response back to the client.
     */
    responseHeadersToRemove: string[];
}

/**
 * matchRule criteria for request header matches.
 */
export interface HttpHeaderMatchResponse {
    /**
     * The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
     */
    exactMatch: string;
    /**
     * The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method". When the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin`.
     */
    headerName: string;
    /**
     * If set to false, the headerMatch is considered a match if the preceding match criteria are met. If set to true, the headerMatch is considered a match if the preceding match criteria are NOT met. The default setting is false. 
     */
    invertMatch: boolean;
    /**
     * The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
     */
    prefixMatch: string;
    /**
     * A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
     */
    presentMatch: boolean;
    /**
     * The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0] - -3 will match. - 0 will not match. - 0.25 will not match. - -3someString will not match. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. rangeMatch is not supported for load balancers that have loadBalancingScheme set to EXTERNAL.
     */
    rangeMatch: outputs.compute.beta.Int64RangeMatchResponse;
    /**
     * The value of the header must match the regular expression specified in regexMatch. For more information about regular expression syntax, see Syntax. For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
     */
    regexMatch: string;
    /**
     * The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
     */
    suffixMatch: string;
}

/**
 * Specification determining how headers are added to requests or responses.
 */
export interface HttpHeaderOptionResponse {
    /**
     * The name of the header.
     */
    headerName: string;
    /**
     * The value of the header to add.
     */
    headerValue: string;
    /**
     * If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false. 
     */
    replace: boolean;
}

/**
 * HttpRouteRuleMatch criteria for a request's query parameter.
 */
export interface HttpQueryParameterMatchResponse {
    /**
     * The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch, or regexMatch must be set. 
     */
    exactMatch: string;
    /**
     * The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
     */
    name: string;
    /**
     * Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch, or regexMatch must be set. 
     */
    presentMatch: boolean;
    /**
     * The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For more information about regular expression syntax, see Syntax. Only one of presentMatch, exactMatch, or regexMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED. 
     */
    regexMatch: string;
}

/**
 * Specifies settings for an HTTP redirect.
 */
export interface HttpRedirectActionResponse {
    /**
     * The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters.
     */
    hostRedirect: string;
    /**
     * If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
     */
    httpsRedirect: boolean;
    /**
     * The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     */
    pathRedirect: string;
    /**
     * The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
     */
    prefixRedirect: string;
    /**
     * The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained. 
     */
    redirectResponseCode: string;
    /**
     * If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false. 
     */
    stripQuery: boolean;
}

/**
 * The retry policy associates with HttpRouteRule
 */
export interface HttpRetryPolicyResponse {
    /**
     * Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
     */
    numRetries: number;
    /**
     * Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in the HttpRouteAction field. If timeout in the HttpRouteAction field is not set, this field uses the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
     */
    perTryTimeout: outputs.compute.beta.DurationResponse;
    /**
     * Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: retry is attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all. For example, disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - connect-failure: a retry is attempted on failures connecting to the instance or endpoint. For example, connection timeouts. - retriable-4xx: a retry is attempted if the instance or endpoint responds with a 4xx response code. The only error that you can retry is error code 409. - refused-stream: a retry is attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: a retry is attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: a retry is attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: a retry is attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: a retry is attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: a retry is attempted if the gRPC status code in the response header is set to unavailable. Only the following codes are supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true. - cancelled - deadline-exceeded - internal - resource-exhausted - unavailable 
     */
    retryConditions: string[];
}

export interface HttpRouteActionResponse {
    /**
     * The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard. Not supported when the URL map is bound to a target gRPC proxy.
     */
    corsPolicy: outputs.compute.beta.CorsPolicyResponse;
    /**
     * The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by a load balancer on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests. timeout and retry_policy is ignored by clients that are configured with a fault_injection_policy if: 1. The traffic is generated by fault injection AND 2. The fault injection is not a delay fault injection. Fault injection is not supported with the global external HTTP(S) load balancer (classic). To see which load balancers support fault injection, see Load balancing: Routing and traffic management features.
     */
    faultInjectionPolicy: outputs.compute.beta.HttpFaultInjectionResponse;
    /**
     * Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (known as *end-of-stream*), the duration in this field is computed from the beginning of the stream until the response has been processed, including all retries. A stream that does not complete in this duration is closed. If not specified, this field uses the maximum maxStreamDuration value among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     */
    maxStreamDuration: outputs.compute.beta.DurationResponse;
    /**
     * Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. The load balancer does not wait for responses from the shadow service. Before sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
     */
    requestMirrorPolicy: outputs.compute.beta.RequestMirrorPolicyResponse;
    /**
     * Specifies the retry policy associated with this route.
     */
    retryPolicy: outputs.compute.beta.HttpRetryPolicyResponse;
    /**
     * Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (known as *end-of-stream*) up until the response has been processed. Timeout includes all retries. If not specified, this field uses the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     */
    timeout: outputs.compute.beta.DurationResponse;
    /**
     * The spec to modify the URL of the request, before forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
     */
    urlRewrite: outputs.compute.beta.UrlRewriteResponse;
    /**
     * A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. After a backend service is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
     */
    weightedBackendServices: outputs.compute.beta.WeightedBackendServiceResponse[];
}

/**
 * HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur.
 */
export interface HttpRouteRuleMatchResponse {
    /**
     * For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
     */
    fullPathMatch: string;
    /**
     * Specifies a list of header match criteria, all of which must match corresponding headers in the request.
     */
    headerMatches: outputs.compute.beta.HttpHeaderMatchResponse[];
    /**
     * Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to a target gRPC proxy.
     */
    ignoreCase: boolean;
    /**
     * Opaque filter criteria used by the load balancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to the load balancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadata filters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here is applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies to load balancers that have loadBalancingScheme set to INTERNAL_SELF_MANAGED. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     */
    metadataFilters: outputs.compute.beta.MetadataFilterResponse[];
    /**
     * For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
     */
    prefixMatch: string;
    /**
     * Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to a target gRPC proxy.
     */
    queryParameterMatches: outputs.compute.beta.HttpQueryParameterMatchResponse[];
    /**
     * For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For more information about regular expression syntax, see Syntax. Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
     */
    regexMatch: string;
}

/**
 * The HttpRouteRule setting specifies how to match an HTTP request and the corresponding routing action that load balancing proxies perform.
 */
export interface HttpRouteRuleResponse {
    /**
     * The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters.
     */
    description: string;
    /**
     * Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction value specified here is applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction HeaderAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     */
    headerAction: outputs.compute.beta.HttpHeaderActionResponse;
    /**
     * Outbound route specific configuration for networkservices.HttpFilter resources enabled by Traffic Director. httpFilterConfigs only applies for load balancers with loadBalancingScheme set to INTERNAL_SELF_MANAGED. See ForwardingRule for more details. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     */
    httpFilterConfigs: outputs.compute.beta.HttpFilterConfigResponse[];
    /**
     * Outbound route specific metadata supplied to networkservices.HttpFilter resources enabled by Traffic Director. httpFilterMetadata only applies for load balancers with loadBalancingScheme set to INTERNAL_SELF_MANAGED. See ForwardingRule for more details. The only configTypeUrl supported is type.googleapis.com/google.protobuf.Struct Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     */
    httpFilterMetadata: outputs.compute.beta.HttpFilterConfigResponse[];
    /**
     * The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
     */
    matchRules: outputs.compute.beta.HttpRouteRuleMatchResponse[];
    /**
     * For routeRules within a given pathMatcher, priority determines the order in which a load balancer interprets routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number from 0 to 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
     */
    priority: number;
    /**
     * In response to a matching matchRule, the load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within a route rule's routeAction.
     */
    routeAction: outputs.compute.beta.HttpRouteActionResponse;
    /**
     * The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
     */
    service: string;
    /**
     * When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
     */
    urlRedirect: outputs.compute.beta.HttpRedirectActionResponse;
}

/**
 * The parameters of the raw disk image.
 */
export interface ImageRawDiskResponse {
    /**
     * The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
     */
    containerType: string;
    /**
     * [Deprecated] This field is deprecated. An optional SHA1 checksum of the disk image before unpackaging provided by the client when the disk image is created.
     *
     * @deprecated [Deprecated] This field is deprecated. An optional SHA1 checksum of the disk image before unpackaging provided by the client when the disk image is created.
     */
    sha1Checksum: string;
    /**
     * The full Google Cloud Storage URL where the raw disk image archive is stored. The following are valid formats for the URL: - https://storage.googleapis.com/bucket_name/image_archive_name - https://storage.googleapis.com/bucket_name/folder_name/ image_archive_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL 
     */
    source: string;
}

/**
 * Initial State for shielded instance, these are public keys which are safe to store in public
 */
export interface InitialStateConfigResponse {
    /**
     * The Key Database (db).
     */
    dbs: outputs.compute.beta.FileContentBufferResponse[];
    /**
     * The forbidden key database (dbx).
     */
    dbxs: outputs.compute.beta.FileContentBufferResponse[];
    /**
     * The Key Exchange Key (KEK).
     */
    keks: outputs.compute.beta.FileContentBufferResponse[];
    /**
     * The Platform Key (PK).
     */
    pk: outputs.compute.beta.FileContentBufferResponse;
}

export interface InstanceGroupManagerActionsSummaryResponse {
    /**
     * The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.
     */
    abandoning: number;
    /**
     * The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully. If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
     */
    creating: number;
    /**
     * The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly.
     */
    creatingWithoutRetries: number;
    /**
     * The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.
     */
    deleting: number;
    /**
     * The number of instances in the managed instance group that are running and have no scheduled actions.
     */
    none: number;
    /**
     * The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.
     */
    recreating: number;
    /**
     * The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.
     */
    refreshing: number;
    /**
     * The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.
     */
    restarting: number;
    /**
     * The number of instances in the managed instance group that are scheduled to be resumed or are currently being resumed.
     */
    resuming: number;
    /**
     * The number of instances in the managed instance group that are scheduled to be started or are currently being started.
     */
    starting: number;
    /**
     * The number of instances in the managed instance group that are scheduled to be stopped or are currently being stopped.
     */
    stopping: number;
    /**
     * The number of instances in the managed instance group that are scheduled to be suspended or are currently being suspended.
     */
    suspending: number;
    /**
     * The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation.
     */
    verifying: number;
}

export interface InstanceGroupManagerAllInstancesConfigResponse {
    /**
     * Properties to set on all instances in the group. You can add or modify properties using the instanceGroupManagers.patch or regionInstanceGroupManagers.patch. After setting allInstancesConfig on the group, you must update the group's instances to apply the configuration. To apply the configuration, set the group's updatePolicy.type field to use proactive updates or use the applyUpdatesToInstances method.
     */
    properties: outputs.compute.beta.InstancePropertiesPatchResponse;
}

export interface InstanceGroupManagerAutoHealingPolicyResponse {
    /**
     * The URL for the health check that signals autohealing.
     */
    healthCheck: string;
    /**
     * The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
     */
    initialDelaySec: number;
}

export interface InstanceGroupManagerInstanceLifecyclePolicyResponse {
    /**
     * A bit indicating whether to forcefully apply the group's latest configuration when repairing a VM. Valid options are: - NO (default): If configuration updates are available, they are not forcefully applied during repair. Instead, configuration updates are applied according to the group's update policy. - YES: If configuration updates are available, they are applied during repair. 
     */
    forceUpdateOnRepair: string;
}

export interface InstanceGroupManagerStatusAllInstancesConfigResponse {
    /**
     * Current all-instances configuration revision. This value is in RFC3339 text format.
     */
    currentRevision: string;
    /**
     * A bit indicating whether this configuration has been applied to all managed instances in the group.
     */
    effective: boolean;
}

export interface InstanceGroupManagerStatusResponse {
    /**
     * [Output only] Status of all-instances configuration on the group.
     */
    allInstancesConfig: outputs.compute.beta.InstanceGroupManagerStatusAllInstancesConfigResponse;
    /**
     * The URL of the Autoscaler that targets this instance group manager.
     */
    autoscaler: string;
    /**
     * A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.
     */
    isStable: boolean;
    /**
     * Stateful status of the given Instance Group Manager.
     */
    stateful: outputs.compute.beta.InstanceGroupManagerStatusStatefulResponse;
    /**
     * A status of consistency of Instances' versions with their target version specified by version field on Instance Group Manager.
     */
    versionTarget: outputs.compute.beta.InstanceGroupManagerStatusVersionTargetResponse;
}

export interface InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse {
    /**
     * A bit indicating if all of the group's per-instance configurations (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs.
     */
    allEffective: boolean;
}

export interface InstanceGroupManagerStatusStatefulResponse {
    /**
     * A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful configuration even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.
     */
    hasStatefulConfig: boolean;
    /**
     * A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful configuration even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions. This field is deprecated in favor of has_stateful_config.
     *
     * @deprecated [Output Only] A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful configuration even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions. This field is deprecated in favor of has_stateful_config.
     */
    isStateful: boolean;
    /**
     * Status of per-instance configurations on the instance.
     */
    perInstanceConfigs: outputs.compute.beta.InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse;
}

export interface InstanceGroupManagerStatusVersionTargetResponse {
    /**
     * A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager.
     */
    isReached: boolean;
}

export interface InstanceGroupManagerUpdatePolicyResponse {
    /**
     * The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled. 
     */
    instanceRedistributionType: string;
    /**
     * The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
     */
    maxSurge: outputs.compute.beta.FixedOrPercentResponse;
    /**
     * The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
     */
    maxUnavailable: outputs.compute.beta.FixedOrPercentResponse;
    /**
     * Minimum number of seconds to wait for after a newly created instance becomes available. This value must be from range [0, 3600].
     */
    minReadySec: number;
    /**
     * Minimal action to be taken on an instance. Use this option to minimize disruption as much as possible or to apply a more disruptive action than is necessary. - To limit disruption as much as possible, set the minimal action to REFRESH. If your update requires a more disruptive action, Compute Engine performs the necessary action to execute the update. - To apply a more disruptive action than is strictly necessary, set the minimal action to RESTART or REPLACE. For example, Compute Engine does not need to restart a VM to change its metadata. But if your application reads instance metadata only when a VM is restarted, you can set the minimal action to RESTART in order to pick up metadata changes. 
     */
    minimalAction: string;
    /**
     * Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.
     */
    mostDisruptiveAllowedAction: string;
    /**
     * What action should be used to replace instances. See minimal_action.REPLACE
     */
    replacementMethod: string;
    /**
     * The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
     */
    type: string;
}

export interface InstanceGroupManagerVersionResponse {
    /**
     * The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached.
     */
    instanceTemplate: string;
    /**
     * Name of the version. Unique among all versions in the scope of this managed instance group.
     */
    name: string;
    /**
     * Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to: - If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. - if expressed as a percent, the targetSize would be (targetSize.percent/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded. If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information.
     */
    targetSize: outputs.compute.beta.FixedOrPercentResponse;
}

/**
 * Additional instance params.
 */
export interface InstanceParamsResponse {
    /**
     * Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
     */
    resourceManagerTags: {[key: string]: string};
}

/**
 * Represents the change that you want to make to the instance properties.
 */
export interface InstancePropertiesPatchResponse {
    /**
     * The label key-value pairs that you want to patch onto the instance.
     */
    labels: {[key: string]: string};
    /**
     * The metadata key-value pairs that you want to patch onto the instance. For more information, see Project and instance metadata.
     */
    metadata: {[key: string]: string};
}

export interface InstancePropertiesResponse {
    /**
     * Controls for advanced machine-related behavior features. Note that for MachineImage, this is not supported yet.
     */
    advancedMachineFeatures: outputs.compute.beta.AdvancedMachineFeaturesResponse;
    /**
     * Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
     */
    canIpForward: boolean;
    /**
     * Specifies the Confidential Instance options. Note that for MachineImage, this is not supported yet.
     */
    confidentialInstanceConfig: outputs.compute.beta.ConfidentialInstanceConfigResponse;
    /**
     * An optional text description for the instances that are created from these properties.
     */
    description: string;
    /**
     * An array of disks that are associated with the instances that are created from these properties.
     */
    disks: outputs.compute.beta.AttachedDiskResponse[];
    /**
     * Display Device properties to enable support for remote display products like: Teradici, VNC and TeamViewer Note that for MachineImage, this is not supported yet.
     */
    displayDevice: outputs.compute.beta.DisplayDeviceResponse;
    /**
     * A list of guest accelerator cards' type and count to use for instances created from these properties.
     */
    guestAccelerators: outputs.compute.beta.AcceleratorConfigResponse[];
    /**
     * KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
     */
    keyRevocationActionType: string;
    /**
     * Labels to apply to instances that are created from these properties.
     */
    labels: {[key: string]: string};
    /**
     * The machine type to use for instances that are created from these properties.
     */
    machineType: string;
    /**
     * The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
     */
    metadata: outputs.compute.beta.MetadataResponse;
    /**
     * Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
     */
    minCpuPlatform: string;
    /**
     * An array of network access configurations for this interface.
     */
    networkInterfaces: outputs.compute.beta.NetworkInterfaceResponse[];
    /**
     * Note that for MachineImage, this is not supported yet.
     */
    networkPerformanceConfig: outputs.compute.beta.NetworkPerformanceConfigResponse;
    /**
     * PostKeyRevocationActionType of the instance.
     */
    postKeyRevocationActionType: string;
    /**
     * The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default. Note that for MachineImage, this is not supported yet.
     */
    privateIpv6GoogleAccess: string;
    /**
     * Specifies the reservations that instances can consume from. Note that for MachineImage, this is not supported yet.
     */
    reservationAffinity: outputs.compute.beta.ReservationAffinityResponse;
    /**
     * Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
     */
    resourceManagerTags: {[key: string]: string};
    /**
     * Resource policies (names, not URLs) applied to instances created from these properties. Note that for MachineImage, this is not supported yet.
     */
    resourcePolicies: string[];
    /**
     * Specifies the scheduling options for the instances that are created from these properties.
     */
    scheduling: outputs.compute.beta.SchedulingResponse;
    /**
     * A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
     */
    serviceAccounts: outputs.compute.beta.ServiceAccountResponse[];
    /**
     * Note that for MachineImage, this is not supported yet.
     */
    shieldedInstanceConfig: outputs.compute.beta.ShieldedInstanceConfigResponse;
    /**
     * Specifies the Shielded VM options for the instances that are created from these properties.
     */
    shieldedVmConfig: outputs.compute.beta.ShieldedVmConfigResponse;
    /**
     * A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
     */
    tags: outputs.compute.beta.TagsResponse;
}

/**
 * HttpRouteRuleMatch criteria for field values that must stay within the specified integer range.
 */
export interface Int64RangeMatchResponse {
    /**
     * The end of the range (exclusive) in signed long integer format.
     */
    rangeEnd: string;
    /**
     * The start of the range (inclusive) in signed long integer format.
     */
    rangeStart: string;
}

/**
 * Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
 */
export interface InterconnectAttachmentPartnerMetadataResponse {
    /**
     * Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values.
     */
    interconnectName: string;
    /**
     * Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
     */
    partnerName: string;
    /**
     * URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
     */
    portalUrl: string;
}

/**
 * Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED.
 */
export interface InterconnectAttachmentPrivateInfoResponse {
    /**
     * 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.
     */
    tag8021q: number;
}

/**
 * Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only.
 */
export interface InterconnectCircuitInfoResponse {
    /**
     * Customer-side demarc ID for this circuit.
     */
    customerDemarcId: string;
    /**
     * Google-assigned unique ID for this circuit. Assigned at circuit turn-up.
     */
    googleCircuitId: string;
    /**
     * Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA.
     */
    googleDemarcId: string;
}

/**
 * Description of a planned outage on this Interconnect.
 */
export interface InterconnectOutageNotificationResponse {
    /**
     * If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected.
     */
    affectedCircuits: string[];
    /**
     * A description about the purpose of the outage.
     */
    description: string;
    /**
     * Scheduled end time for the outage (milliseconds since Unix epoch).
     */
    endTime: string;
    /**
     * Form this outage is expected to take, which can take one of the following values: - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values.
     */
    issueType: string;
    /**
     * Unique identifier for this outage notification.
     */
    name: string;
    /**
     * The party that generated this notification, which can take the following value: - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
     */
    source: string;
    /**
     * Scheduled start time for the outage (milliseconds since Unix epoch).
     */
    startTime: string;
    /**
     * State of this notification, which can take one of the following values: - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. - COMPLETED: The outage associated with this notification is complete. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values.
     */
    state: string;
}

/**
 * Commitment for a particular license resource.
 */
export interface LicenseResourceCommitmentResponse {
    /**
     * The number of licenses purchased.
     */
    amount: string;
    /**
     * Specifies the core range of the instance for which this license applies.
     */
    coresPerLicense: string;
    /**
     * Any applicable license URI.
     */
    license: string;
}

export interface LicenseResourceRequirementsResponse {
    /**
     * Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
     */
    minGuestCpuCount: number;
    /**
     * Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
     */
    minMemoryMb: number;
}

export interface LocalDiskResponse {
    /**
     * Specifies the number of such disks.
     */
    diskCount: number;
    /**
     * Specifies the size of the disk in base-2 GB.
     */
    diskSizeGb: number;
    /**
     * Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL.
     */
    diskType: string;
}

/**
 * This is deprecated and has no effect. Do not use.
 */
export interface LogConfigCloudAuditOptionsResponse {
    /**
     * This is deprecated and has no effect. Do not use.
     */
    authorizationLoggingOptions: outputs.compute.beta.AuthorizationLoggingOptionsResponse;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    logName: string;
}

/**
 * This is deprecated and has no effect. Do not use.
 */
export interface LogConfigCounterOptionsCustomFieldResponse {
    /**
     * This is deprecated and has no effect. Do not use.
     */
    name: string;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    value: string;
}

/**
 * This is deprecated and has no effect. Do not use.
 */
export interface LogConfigCounterOptionsResponse {
    /**
     * This is deprecated and has no effect. Do not use.
     */
    customFields: outputs.compute.beta.LogConfigCounterOptionsCustomFieldResponse[];
    /**
     * This is deprecated and has no effect. Do not use.
     */
    field: string;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    metric: string;
}

/**
 * This is deprecated and has no effect. Do not use.
 */
export interface LogConfigDataAccessOptionsResponse {
    /**
     * This is deprecated and has no effect. Do not use.
     */
    logMode: string;
}

/**
 * This is deprecated and has no effect. Do not use.
 */
export interface LogConfigResponse {
    /**
     * This is deprecated and has no effect. Do not use.
     */
    cloudAudit: outputs.compute.beta.LogConfigCloudAuditOptionsResponse;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    counter: outputs.compute.beta.LogConfigCounterOptionsResponse;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    dataAccess: outputs.compute.beta.LogConfigDataAccessOptionsResponse;
}

/**
 * MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the load balancer.
 */
export interface MetadataFilterLabelMatchResponse {
    /**
     * Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.
     */
    name: string;
    /**
     * The value of the label must match the specified value. value can have a maximum length of 1024 characters.
     */
    value: string;
}

/**
 * Opaque filter criteria used by load balancers to restrict routing configuration to a limited set of load balancing proxies. Proxies and sidecars involved in load balancing would typically present metadata to the load balancers that need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if load balancing involves Envoys, they receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers.
 */
export interface MetadataFilterResponse {
    /**
     * The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries.
     */
    filterLabels: outputs.compute.beta.MetadataFilterLabelMatchResponse[];
    /**
     * Specifies how individual filter label matches within the list of filterLabels and contributes toward the overall metadataFilter match. Supported values are: - MATCH_ANY: at least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: all filterLabels must have matching labels in the provided metadata. 
     */
    filterMatchCriteria: string;
}

/**
 * Metadata
 */
export interface MetadataItemsItemResponse {
    /**
     * Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
     */
    key: string;
    /**
     * Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB).
     */
    value: string;
}

/**
 * A metadata key/value entry.
 */
export interface MetadataResponse {
    /**
     * Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the resource.
     */
    fingerprint: string;
    /**
     * Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
     */
    items: outputs.compute.beta.MetadataItemsItemResponse[];
    /**
     * Type of the resource. Always compute#metadata for metadata.
     */
    kind: string;
}

/**
 * The named port. For example: <"http", 80>.
 */
export interface NamedPortResponse {
    /**
     * The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.
     */
    name: string;
    /**
     * The port number, which can be a value between 1 and 65535.
     */
    port: number;
}

/**
 * Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG.
 */
export interface NetworkEndpointGroupAppEngineResponse {
    /**
     * Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service".
     */
    service: string;
    /**
     * A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "<service>-dot-appname.appspot.com/<version>". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
     */
    urlMask: string;
    /**
     * Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2".
     */
    version: string;
}

/**
 * Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG.
 */
export interface NetworkEndpointGroupCloudFunctionResponse {
    /**
     * A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1".
     */
    function: string;
    /**
     * A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/<function>". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively.
     */
    urlMask: string;
}

/**
 * Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG.
 */
export interface NetworkEndpointGroupCloudRunResponse {
    /**
     * Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service".
     */
    service: string;
    /**
     * Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010".
     */
    tag: string;
    /**
     * A template to parse <service> and <tag> fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask "<tag>.domain.com/<service>". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
     */
    urlMask: string;
}

/**
 * Load balancing specific fields for network endpoint group.
 */
export interface NetworkEndpointGroupLbNetworkEndpointGroupResponse {
    /**
     * The default port used if the port number is not specified in the network endpoint. [Deprecated] This field is deprecated.
     *
     * @deprecated The default port used if the port number is not specified in the network endpoint. [Deprecated] This field is deprecated.
     */
    defaultPort: number;
    /**
     * The URL of the network to which all network endpoints in the NEG belong. Uses "default" project network if unspecified. [Deprecated] This field is deprecated.
     *
     * @deprecated The URL of the network to which all network endpoints in the NEG belong. Uses "default" project network if unspecified. [Deprecated] This field is deprecated.
     */
    network: string;
    /**
     * Optional URL of the subnetwork to which all network endpoints in the NEG belong. [Deprecated] This field is deprecated.
     *
     * @deprecated Optional URL of the subnetwork to which all network endpoints in the NEG belong. [Deprecated] This field is deprecated.
     */
    subnetwork: string;
    /**
     * The URL of the zone where the network endpoint group is located. [Deprecated] This field is deprecated.
     *
     * @deprecated [Output Only] The URL of the zone where the network endpoint group is located. [Deprecated] This field is deprecated.
     */
    zone: string;
}

/**
 * All data that is specifically relevant to only network endpoint groups of type PRIVATE_SERVICE_CONNECT.
 */
export interface NetworkEndpointGroupPscDataResponse {
    /**
     * Address allocated from given subnetwork for PSC. This IP address acts as a VIP for a PSC NEG, allowing it to act as an endpoint in L7 PSC-XLB.
     */
    consumerPscAddress: string;
    /**
     * The PSC connection id of the PSC Network Endpoint Group Consumer.
     */
    pscConnectionId: string;
    /**
     * The connection status of the PSC Forwarding Rule.
     */
    pscConnectionStatus: string;
}

/**
 * Configuration for a serverless network endpoint group (NEG). The platform must be provided. Note: The target backend service must be in the same project and located in the same region as the Serverless NEG.
 */
export interface NetworkEndpointGroupServerlessDeploymentResponse {
    /**
     * The platform of the backend target(s) of this NEG. The only supported value is API Gateway: apigateway.googleapis.com.
     */
    platform: string;
    /**
     * The user-defined name of the workload/instance. This value must be provided explicitly or in the urlMask. The resource identified by this value is platform-specific and is as follows: 1. API Gateway: The gateway ID 2. App Engine: The service name 3. Cloud Functions: The function name 4. Cloud Run: The service name 
     */
    resource: string;
    /**
     * A template to parse platform-specific fields from a request URL. URL mask allows for routing to multiple resources on the same serverless platform without having to create multiple Network Endpoint Groups and backend resources. The fields parsed by this template are platform-specific and are as follows: 1. API Gateway: The gateway ID 2. App Engine: The service and version 3. Cloud Functions: The function name 4. Cloud Run: The service and tag 
     */
    urlMask: string;
    /**
     * The optional resource version. The version identified by this value is platform-specific and is follows: 1. API Gateway: Unused 2. App Engine: The service version 3. Cloud Functions: Unused 4. Cloud Run: The service tag 
     */
    version: string;
}

/**
 * A network interface resource attached to an instance.
 */
export interface NetworkInterfaceResponse {
    /**
     * An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
     */
    accessConfigs: outputs.compute.beta.AccessConfigResponse[];
    /**
     * An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
     */
    aliasIpRanges: outputs.compute.beta.AliasIpRangeResponse[];
    /**
     * Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date.
     */
    fingerprint: string;
    /**
     * The prefix length of the primary internal IPv6 range.
     */
    internalIpv6PrefixLength: number;
    /**
     * An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
     */
    ipv6AccessConfigs: outputs.compute.beta.AccessConfigResponse[];
    /**
     * One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
     */
    ipv6AccessType: string;
    /**
     * An IPv6 internal network address for this network interface.
     */
    ipv6Address: string;
    /**
     * Type of the resource. Always compute#networkInterface for network interfaces.
     */
    kind: string;
    /**
     * The name of the network interface, which is generated by the server. For a VM, the network interface uses the nicN naming format. Where N is a value between 0 and 7. The default interface value is nic0.
     */
    name: string;
    /**
     * URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used. If the selected project doesn't have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default 
     */
    network: string;
    /**
     * An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
     */
    networkIP: string;
    /**
     * The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
     */
    nicType: string;
    /**
     * The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It'll be empty if not specified by the users.
     */
    queueCount: number;
    /**
     * The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
     */
    stackType: string;
    /**
     * The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork 
     */
    subnetwork: string;
}

/**
 * A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering.
 */
export interface NetworkPeeringResponse {
    /**
     * This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
     */
    autoCreateRoutes: boolean;
    /**
     * Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
     */
    exchangeSubnetRoutes: boolean;
    /**
     * Whether to export the custom routes to peer network. The default value is false.
     */
    exportCustomRoutes: boolean;
    /**
     * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not controlled by this field.
     */
    exportSubnetRoutesWithPublicIp: boolean;
    /**
     * Whether to import the custom routes from peer network. The default value is false.
     */
    importCustomRoutes: boolean;
    /**
     * Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field.
     */
    importSubnetRoutesWithPublicIp: boolean;
    /**
     * Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name: string;
    /**
     * The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
     */
    network: string;
    /**
     * Maximum Transmission Unit in bytes.
     */
    peerMtu: number;
    /**
     * Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY.
     */
    stackType: string;
    /**
     * State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
     */
    state: string;
    /**
     * Details about the current state of the peering.
     */
    stateDetails: string;
}

export interface NetworkPerformanceConfigResponse {
    totalEgressBandwidthTier: string;
}

/**
 * A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide.
 */
export interface NetworkRoutingConfigResponse {
    /**
     * The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
     */
    routingMode: string;
}

export interface NodeGroupAutoscalingPolicyResponse {
    /**
     * The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
     */
    maxNodes: number;
    /**
     * The minimum number of nodes that the group should have.
     */
    minNodes: number;
    /**
     * The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
     */
    mode: string;
}

/**
 * Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window.
 */
export interface NodeGroupMaintenanceWindowResponse {
    /**
     * [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
     */
    maintenanceDuration: outputs.compute.beta.DurationResponse;
    /**
     * Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
     */
    startTime: string;
}

export interface NodeTemplateNodeTypeFlexibilityResponse {
    cpus: string;
    localSsd: string;
    memory: string;
}

/**
 * Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint.
 */
export interface NotificationEndpointGrpcSettingsResponse {
    /**
     * Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
     */
    authority: string;
    /**
     * Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
     */
    endpoint: string;
    /**
     * Optional. If specified, this field is used to populate the "name" field in gRPC requests.
     */
    payloadName: string;
    /**
     * Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed.
     */
    resendInterval: outputs.compute.beta.DurationResponse;
    /**
     * How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
     */
    retryDurationSec: number;
}

/**
 * Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
 */
export interface OutlierDetectionResponse {
    /**
     * The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
     */
    baseEjectionTime: outputs.compute.beta.DurationResponse;
    /**
     * Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    consecutiveErrors: number;
    /**
     * The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    consecutiveGatewayFailure: number;
    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    enforcingConsecutiveErrors: number;
    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
     */
    enforcingConsecutiveGatewayFailure: number;
    /**
     * The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
     */
    enforcingSuccessRate: number;
    /**
     * Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
     */
    interval: outputs.compute.beta.DurationResponse;
    /**
     * Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
     */
    maxEjectionPercent: number;
    /**
     * The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
     */
    successRateMinimumHosts: number;
    /**
     * The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
     */
    successRateRequestVolume: number;
    /**
     * This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
     */
    successRateStdevFactor: number;
}

export interface PacketMirroringFilterResponse {
    /**
     * IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
     */
    cidrRanges: string[];
    /**
     * Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
     */
    direction: string;
    /**
     * Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
     */
    ipProtocols: string[];
}

export interface PacketMirroringForwardingRuleInfoResponse {
    /**
     * Unique identifier for the forwarding rule; defined by the server.
     */
    canonicalUrl: string;
    /**
     * Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
     */
    url: string;
}

export interface PacketMirroringMirroredResourceInfoInstanceInfoResponse {
    /**
     * Unique identifier for the instance; defined by the server.
     */
    canonicalUrl: string;
    /**
     * Resource URL to the virtual machine instance which is being mirrored.
     */
    url: string;
}

export interface PacketMirroringMirroredResourceInfoResponse {
    /**
     * A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
     */
    instances: outputs.compute.beta.PacketMirroringMirroredResourceInfoInstanceInfoResponse[];
    /**
     * A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
     */
    subnetworks: outputs.compute.beta.PacketMirroringMirroredResourceInfoSubnetInfoResponse[];
    /**
     * A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
     */
    tags: string[];
}

export interface PacketMirroringMirroredResourceInfoSubnetInfoResponse {
    /**
     * Unique identifier for the subnetwork; defined by the server.
     */
    canonicalUrl: string;
    /**
     * Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored.
     */
    url: string;
}

export interface PacketMirroringNetworkInfoResponse {
    /**
     * Unique identifier for the network; defined by the server.
     */
    canonicalUrl: string;
    /**
     * URL of the network resource.
     */
    url: string;
}

/**
 * A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service is used.
 */
export interface PathMatcherResponse {
    /**
     * defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within a path matcher's defaultRouteAction.
     */
    defaultRouteAction: outputs.compute.beta.HttpRouteActionResponse;
    /**
     * The full or partial URL to the BackendService resource. This URL is used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService - compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect , or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: - compute.backendBuckets.use - compute.backendServices.use 
     */
    defaultService: string;
    /**
     * When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
     */
    defaultUrlRedirect: outputs.compute.beta.HttpRedirectActionResponse;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description: string;
    /**
     * Specifies changes to request and response headers that need to take effect for the selected backend service. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap HeaderAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     */
    headerAction: outputs.compute.beta.HttpHeaderActionResponse;
    /**
     * The name to which this PathMatcher is referred by the HostRule.
     */
    name: string;
    /**
     * The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.
     */
    pathRules: outputs.compute.beta.PathRuleResponse[];
    /**
     * The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules.
     */
    routeRules: outputs.compute.beta.HttpRouteRuleResponse[];
}

/**
 * A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL.
 */
export interface PathRuleResponse {
    /**
     * The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.
     */
    paths: string[];
    /**
     * In response to a matching path, the load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of routeAction or urlRedirect must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within a path rule's routeAction.
     */
    routeAction: outputs.compute.beta.HttpRouteActionResponse;
    /**
     * The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
     */
    service: string;
    /**
     * When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
     */
    urlRedirect: outputs.compute.beta.HttpRedirectActionResponse;
}

/**
 * Represents a CIDR range which can be used to assign addresses.
 */
export interface PublicAdvertisedPrefixPublicDelegatedPrefixResponse {
    /**
     * The IP address range of the public delegated prefix
     */
    ipRange: string;
    /**
     * The name of the public delegated prefix
     */
    name: string;
    /**
     * The project number of the public delegated prefix
     */
    project: string;
    /**
     * The region of the public delegated prefix if it is regional. If absent, the prefix is global.
     */
    region: string;
    /**
     * The status of the public delegated prefix. Possible values are: INITIALIZING: The public delegated prefix is being initialized and addresses cannot be created yet. ANNOUNCED: The public delegated prefix is active.
     */
    status: string;
}

/**
 * Represents a sub PublicDelegatedPrefix.
 */
export interface PublicDelegatedPrefixPublicDelegatedSubPrefixResponse {
    /**
     * Name of the project scoping this PublicDelegatedSubPrefix.
     */
    delegateeProject: string;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description: string;
    /**
     * The IPv4 address range, in CIDR format, represented by this sub public delegated prefix.
     */
    ipCidrRange: string;
    /**
     * Whether the sub prefix is delegated to create Address resources in the delegatee project.
     */
    isAddress: boolean;
    /**
     * The name of the sub public delegated prefix.
     */
    name: string;
    /**
     * The region of the sub public delegated prefix if it is regional. If absent, the sub prefix is global.
     */
    region: string;
    /**
     * The status of the sub public delegated prefix.
     */
    status: string;
}

export interface RegionSslPolicyWarningsItemDataItemResponse {
    /**
     * A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
     */
    key: string;
    /**
     * A warning data value corresponding to the key.
     */
    value: string;
}

export interface RegionSslPolicyWarningsItemResponse {
    /**
     * A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
     */
    code: string;
    /**
     * Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
     */
    data: outputs.compute.beta.RegionSslPolicyWarningsItemDataItemResponse[];
    /**
     * A human-readable description of the warning code.
     */
    message: string;
}

/**
 * A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. The load balancer doesn't wait for responses from the shadow service. Before sending traffic to the shadow service, the host or authority header is suffixed with -shadow.
 */
export interface RequestMirrorPolicyResponse {
    /**
     * The full or partial URL to the BackendService resource being mirrored to. The backend service configured for a mirroring policy must reference backends that are of the same type as the original backend service matched in the URL map. Serverless NEG backends are not currently supported as a mirrored backend service. 
     */
    backendService: string;
}

/**
 * Specifies the reservations that this instance can consume from.
 */
export interface ReservationAffinityResponse {
    /**
     * Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
     */
    consumeReservationType: string;
    /**
     * Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
     */
    key: string;
    /**
     * Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
     */
    values: string[];
}

/**
 * Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources.
 */
export interface ReservationResponse {
    /**
     * Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
     */
    commitment: string;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    creationTimestamp: string;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description: string;
    /**
     * Type of the resource. Always compute#reservations for reservations.
     */
    kind: string;
    /**
     * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name: string;
    /**
     * Resource policies to be added to this reservation. The key is defined by user, and the value is resource policy url. This is to define placement policy with reservation.
     */
    resourcePolicies: {[key: string]: string};
    /**
     * Reserved for future use.
     */
    satisfiesPzs: boolean;
    /**
     * Server-defined fully-qualified URL for this resource.
     */
    selfLink: string;
    /**
     * Share-settings for shared-reservation
     */
    shareSettings: outputs.compute.beta.ShareSettingsResponse;
    /**
     * Reservation for instances with specific machine shapes.
     */
    specificReservation: outputs.compute.beta.AllocationSpecificSKUReservationResponse;
    /**
     * Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
     */
    specificReservationRequired: boolean;
    /**
     * The status of the reservation.
     */
    status: string;
    /**
     * Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
     */
    zone: string;
}

/**
 * Commitment for a particular resource (a Commitment is composed of one or more of these).
 */
export interface ResourceCommitmentResponse {
    /**
     * Name of the accelerator type resource. Applicable only when the type is ACCELERATOR.
     */
    acceleratorType: string;
    /**
     * The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
     */
    amount: string;
    /**
     * Type of resource for which this commitment applies. Possible values are VCPU and MEMORY
     */
    type: string;
}

/**
 * Time window specified for daily operations.
 */
export interface ResourcePolicyDailyCycleResponse {
    /**
     * Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle.
     */
    daysInCycle: number;
    /**
     * [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
     */
    duration: string;
    /**
     * Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
     */
    startTime: string;
}

/**
 * A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality
 */
export interface ResourcePolicyGroupPlacementPolicyResponse {
    /**
     * The number of availability domains to spread instances across. If two instances are in different availability domain, they are not in the same low latency network.
     */
    availabilityDomainCount: number;
    /**
     * Specifies network collocation
     */
    collocation: string;
    /**
     * Number of VMs in this placement group. Google does not recommend that you use this field unless you use a compact policy and you want your policy to work only if it contains this exact number of VMs.
     */
    vmCount: number;
}

/**
 * Time window specified for hourly operations.
 */
export interface ResourcePolicyHourlyCycleResponse {
    /**
     * [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
     */
    duration: string;
    /**
     * Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
     */
    hoursInCycle: number;
    /**
     * Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
     */
    startTime: string;
}

/**
 * An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.
 */
export interface ResourcePolicyInstanceSchedulePolicyResponse {
    /**
     * The expiration time of the schedule. The timestamp is an RFC3339 string.
     */
    expirationTime: string;
    /**
     * The start time of the schedule. The timestamp is an RFC3339 string.
     */
    startTime: string;
    /**
     * Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
     */
    timeZone: string;
    /**
     * Specifies the schedule for starting instances.
     */
    vmStartSchedule: outputs.compute.beta.ResourcePolicyInstanceSchedulePolicyScheduleResponse;
    /**
     * Specifies the schedule for stopping instances.
     */
    vmStopSchedule: outputs.compute.beta.ResourcePolicyInstanceSchedulePolicyScheduleResponse;
}

/**
 * Schedule for an instance operation.
 */
export interface ResourcePolicyInstanceSchedulePolicyScheduleResponse {
    /**
     * Specifies the frequency for the operation, using the unix-cron format.
     */
    schedule: string;
}

export interface ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse {
    /**
     * The last time the schedule successfully ran. The timestamp is an RFC3339 string.
     */
    lastRunStartTime: string;
    /**
     * The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string.
     */
    nextRunStartTime: string;
}

/**
 * Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this "status" field should mimic the structure of ResourcePolicy proto specification.
 */
export interface ResourcePolicyResourceStatusResponse {
    /**
     * Specifies a set of output values reffering to the instance_schedule_policy system status. This field should have the same name as corresponding policy field.
     */
    instanceSchedulePolicy: outputs.compute.beta.ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse;
}

/**
 * A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.
 */
export interface ResourcePolicySnapshotSchedulePolicyResponse {
    /**
     * Retention policy applied to snapshots created by this resource policy.
     */
    retentionPolicy: outputs.compute.beta.ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse;
    /**
     * A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
     */
    schedule: outputs.compute.beta.ResourcePolicySnapshotSchedulePolicyScheduleResponse;
    /**
     * Properties with which snapshots are created such as labels, encryption keys.
     */
    snapshotProperties: outputs.compute.beta.ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse;
}

/**
 * Policy for retention of scheduled snapshots.
 */
export interface ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse {
    /**
     * Maximum age of the snapshot that is allowed to be kept.
     */
    maxRetentionDays: number;
    /**
     * Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
     */
    onSourceDiskDelete: string;
}

/**
 * A schedule for disks where the schedueled operations are performed.
 */
export interface ResourcePolicySnapshotSchedulePolicyScheduleResponse {
    dailySchedule: outputs.compute.beta.ResourcePolicyDailyCycleResponse;
    hourlySchedule: outputs.compute.beta.ResourcePolicyHourlyCycleResponse;
    weeklySchedule: outputs.compute.beta.ResourcePolicyWeeklyCycleResponse;
}

/**
 * Specified snapshot properties for scheduled snapshots created by this policy.
 */
export interface ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse {
    /**
     * Chain name that the snapshot is created in.
     */
    chainName: string;
    /**
     * Indication to perform a 'guest aware' snapshot.
     */
    guestFlush: boolean;
    /**
     * Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
     */
    labels: {[key: string]: string};
    /**
     * Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
     */
    storageLocations: string[];
}

export interface ResourcePolicyWeeklyCycleDayOfWeekResponse {
    /**
     * Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
     */
    day: string;
    /**
     * [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
     */
    duration: string;
    /**
     * Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
     */
    startTime: string;
}

/**
 * Time window specified for weekly operations.
 */
export interface ResourcePolicyWeeklyCycleResponse {
    /**
     * Up to 7 intervals/windows, one for each day of the week.
     */
    dayOfWeeks: outputs.compute.beta.ResourcePolicyWeeklyCycleDayOfWeekResponse[];
}

/**
 * Contains output only fields. Use this sub-message for actual values set on Instance attributes as compared to the value requested by the user (intent) in their instance CRUD calls.
 */
export interface ResourceStatusResponse {
    /**
     * An opaque ID of the host on which the VM is running.
     */
    physicalHost: string;
}

/**
 * A rollout policy configuration.
 */
export interface RolloutPolicyResponse {
    /**
     * An optional RFC3339 timestamp on or after which the update is considered rolled out to any zone that is not explicitly stated.
     */
    defaultRolloutTime: string;
    /**
     * Location based rollout policies to apply to the resource. Currently only zone names are supported and must be represented as valid URLs, like: zones/us-central1-a. The value expects an RFC3339 timestamp on or after which the update is considered rolled out to the specified location.
     */
    locationRolloutPolicies: {[key: string]: string};
}

export interface RouteAsPathResponse {
    /**
     * The AS numbers of the AS Path.
     */
    asLists: number[];
    /**
     * The type of the AS Path, which can be one of the following values: - 'AS_SET': unordered set of autonomous systems that the route in has traversed - 'AS_SEQUENCE': ordered set of autonomous systems that the route has traversed - 'AS_CONFED_SEQUENCE': ordered set of Member Autonomous Systems in the local confederation that the route has traversed - 'AS_CONFED_SET': unordered set of Member Autonomous Systems in the local confederation that the route has traversed 
     */
    pathSegmentType: string;
}

export interface RouteWarningsItemDataItemResponse {
    /**
     * A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
     */
    key: string;
    /**
     * A warning data value corresponding to the key.
     */
    value: string;
}

export interface RouteWarningsItemResponse {
    /**
     * A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
     */
    code: string;
    /**
     * Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
     */
    data: outputs.compute.beta.RouteWarningsItemDataItemResponse[];
    /**
     * A human-readable description of the warning code.
     */
    message: string;
}

/**
 * Description-tagged IP ranges for the router to advertise.
 */
export interface RouterAdvertisedIpRangeResponse {
    /**
     * User-specified description for the IP range.
     */
    description: string;
    /**
     * The IP range to advertise. The value must be a CIDR-formatted string.
     */
    range: string;
}

export interface RouterBgpPeerBfdResponse {
    /**
     * The minimum interval, in milliseconds, between BFD control packets received from the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the transmit interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
     */
    minReceiveInterval: number;
    /**
     * The minimum interval, in milliseconds, between BFD control packets transmitted to the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the corresponding receive interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
     */
    minTransmitInterval: number;
    /**
     * The number of consecutive BFD packets that must be missed before BFD declares that a peer is unavailable. If set, the value must be a value between 5 and 16. The default is 5.
     */
    multiplier: number;
    /**
     * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is DISABLED.
     */
    sessionInitializationMode: string;
}

export interface RouterBgpPeerResponse {
    /**
     * User-specified flag to indicate which mode to use for advertisement.
     */
    advertiseMode: string;
    /**
     * User-specified list of prefix groups to advertise in custom mode, which can take one of the following options: - ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets. - ALL_VPC_SUBNETS: Advertises the router's own VPC subnets. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
     */
    advertisedGroups: string[];
    /**
     * User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
     */
    advertisedIpRanges: outputs.compute.beta.RouterAdvertisedIpRangeResponse[];
    /**
     * The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
     */
    advertisedRoutePriority: number;
    /**
     * BFD configuration for the BGP peering.
     */
    bfd: outputs.compute.beta.RouterBgpPeerBfdResponse;
    /**
     * The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
     */
    enable: string;
    /**
     * Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
     */
    enableIpv6: boolean;
    /**
     * Name of the interface the BGP peer is associated with.
     */
    interfaceName: string;
    /**
     * IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.
     */
    ipAddress: string;
    /**
     * IPv6 address of the interface inside Google Cloud Platform.
     */
    ipv6NexthopAddress: string;
    /**
     * The resource that configures and manages this BGP peer. - MANAGED_BY_USER is the default value and can be managed by you or other users - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted. 
     */
    managementType: string;
    /**
     * Present if MD5 authentication is enabled for the peering. Must be the name of one of the entries in the Router.md5_authentication_keys. The field must comply with RFC1035.
     */
    md5AuthenticationKeyName: string;
    /**
     * Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name: string;
    /**
     * Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
     */
    peerAsn: number;
    /**
     * IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.
     */
    peerIpAddress: string;
    /**
     * IPv6 address of the BGP interface outside Google Cloud Platform.
     */
    peerIpv6NexthopAddress: string;
    /**
     * URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance must be located in zones contained in the same region as this Cloud Router. The VM instance is the peer side of the BGP session.
     */
    routerApplianceInstance: string;
}

export interface RouterBgpResponse {
    /**
     * User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
     */
    advertiseMode: string;
    /**
     * User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
     */
    advertisedGroups: string[];
    /**
     * User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
     */
    advertisedIpRanges: outputs.compute.beta.RouterAdvertisedIpRangeResponse[];
    /**
     * Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
     */
    asn: number;
    /**
     * The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
     */
    keepaliveInterval: number;
}

export interface RouterInterfaceResponse {
    /**
     * IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
     */
    ipRange: string;
    /**
     * URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
     */
    linkedInterconnectAttachment: string;
    /**
     * URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
     */
    linkedVpnTunnel: string;
    /**
     * The resource that configures and manages this interface. - MANAGED_BY_USER is the default value and can be managed directly by users. - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted. 
     */
    managementType: string;
    /**
     * Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    name: string;
    /**
     * The regional private internal IP address that is used to establish BGP sessions to a VM instance acting as a third-party Router Appliance, such as a Next Gen Firewall, a Virtual Router, or an SD-WAN VM.
     */
    privateIpAddress: string;
    /**
     * Name of the interface that will be redundant with the current interface you are creating. The redundantInterface must belong to the same Cloud Router as the interface here. To establish the BGP session to a Router Appliance VM, you must create two BGP peers. The two BGP peers must be attached to two separate interfaces that are redundant with each other. The redundant_interface must be 1-63 characters long, and comply with RFC1035. Specifically, the redundant_interface must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    redundantInterface: string;
    /**
     * The URI of the subnetwork resource that this interface belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here.
     */
    subnetwork: string;
}

export interface RouterMd5AuthenticationKeyResponse {
    /**
     * [Input only] Value of the key. For patch and update calls, it can be skipped to copy the value from the previous configuration. This is allowed if the key with the same name existed before the operation. Maximum length is 80 characters. Can only contain printable ASCII characters.
     */
    key: string;
    /**
     * Name used to identify the key. Must be unique within a router. Must be referenced by at least one bgpPeer. Must comply with RFC1035.
     */
    name: string;
}

/**
 * Configuration of logging on a NAT.
 */
export interface RouterNatLogConfigResponse {
    /**
     * Indicates whether or not to export logs. This is false by default.
     */
    enable: boolean;
    /**
     * Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful. 
     */
    filter: string;
}

/**
 * Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided.
 */
export interface RouterNatResponse {
    /**
     * A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only.
     */
    drainNatIps: string[];
    /**
     * Enable Dynamic Port Allocation. If not specified, it is disabled by default. If set to true, - Dynamic Port Allocation will be enabled on this NAT config. - enableEndpointIndependentMapping cannot be set to true. - If minPorts is set, minPortsPerVm must be set to a power of two greater than or equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config. 
     */
    enableDynamicPortAllocation: boolean;
    enableEndpointIndependentMapping: boolean;
    /**
     * List of NAT-ted endpoint types supported by the Nat Gateway. If the list is empty, then it will be equivalent to include ENDPOINT_TYPE_VM
     */
    endpointTypes: string[];
    /**
     * Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
     */
    icmpIdleTimeoutSec: number;
    /**
     * Configure logging on this NAT.
     */
    logConfig: outputs.compute.beta.RouterNatLogConfigResponse;
    /**
     * Maximum number of ports allocated to a VM from this NAT config when Dynamic Port Allocation is enabled. If Dynamic Port Allocation is not enabled, this field has no effect. If Dynamic Port Allocation is enabled, and this field is set, it must be set to a power of two greater than minPortsPerVm, or 64 if minPortsPerVm is not set. If Dynamic Port Allocation is enabled and this field is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
     */
    maxPortsPerVm: number;
    /**
     * Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
     */
    minPortsPerVm: number;
    /**
     * Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
     */
    name: string;
    /**
     * Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty. 
     */
    natIpAllocateOption: string;
    /**
     * A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project.
     */
    natIps: string[];
    /**
     * A list of rules associated with this NAT.
     */
    rules: outputs.compute.beta.RouterNatRuleResponse[];
    /**
     * Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
     */
    sourceSubnetworkIpRangesToNat: string;
    /**
     * A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above.
     */
    subnetworks: outputs.compute.beta.RouterNatSubnetworkToNatResponse[];
    /**
     * Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
     */
    tcpEstablishedIdleTimeoutSec: number;
    /**
     * Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
     */
    tcpTimeWaitTimeoutSec: number;
    /**
     * Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
     */
    tcpTransitoryIdleTimeoutSec: number;
    /**
     * Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
     */
    udpIdleTimeoutSec: number;
}

export interface RouterNatRuleActionResponse {
    /**
     * A list of URLs of the IP resources used for this NAT rule. These IP addresses must be valid static external IP addresses assigned to the project. This field is used for public NAT.
     */
    sourceNatActiveIps: string[];
    /**
     * A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT rule only. This field is used for public NAT.
     */
    sourceNatDrainIps: string[];
}

export interface RouterNatRuleResponse {
    /**
     * The action to be enforced for traffic that matches this rule.
     */
    action: outputs.compute.beta.RouterNatRuleActionResponse;
    /**
     * An optional description of this rule.
     */
    description: string;
    /**
     * CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding `action` is enforced. The following examples are valid match expressions for public NAT: "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')" "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'" The following example is a valid match expression for private NAT: "nexthop.hub == 'https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1'"
     */
    match: string;
    /**
     * An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
     */
    ruleNumber: number;
}

/**
 * Defines the IP ranges that want to use NAT for a subnetwork.
 */
export interface RouterNatSubnetworkToNatResponse {
    /**
     * URL for the subnetwork resource that will use NAT.
     */
    name: string;
    /**
     * A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in source_ip_ranges_to_nat.
     */
    secondaryIpRangeNames: string[];
    /**
     * Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES]
     */
    sourceIpRangesToNat: string[];
}

/**
 * This is deprecated and has no effect. Do not use.
 */
export interface RuleResponse {
    /**
     * This is deprecated and has no effect. Do not use.
     */
    action: string;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    conditions: outputs.compute.beta.ConditionResponse[];
    /**
     * This is deprecated and has no effect. Do not use.
     */
    description: string;
    /**
     * This is deprecated and has no effect. Do not use.
     */
    ins: string[];
    /**
     * This is deprecated and has no effect. Do not use.
     */
    logConfigs: outputs.compute.beta.LogConfigResponse[];
    /**
     * This is deprecated and has no effect. Do not use.
     */
    notIns: string[];
    /**
     * This is deprecated and has no effect. Do not use.
     */
    permissions: string[];
}

export interface SSLHealthCheckResponse {
    /**
     * The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
     */
    port: number;
    /**
     * Not supported.
     */
    portName: string;
    /**
     * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
     */
    portSpecification: string;
    /**
     * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
     */
    proxyHeader: string;
    /**
     * Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection and SSL handshake.
     */
    request: string;
    /**
     * Creates a content-based SSL health check. In addition to establishing a TCP connection and the TLS handshake, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
     */
    response: string;
}

/**
 * DEPRECATED: Please use compute#savedDisk instead. An instance-attached disk resource.
 */
export interface SavedAttachedDiskResponse {
    /**
     * Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
     */
    autoDelete: boolean;
    /**
     * Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
     */
    boot: boolean;
    /**
     * Specifies the name of the disk attached to the source instance.
     */
    deviceName: string;
    /**
     * The encryption key for the disk.
     */
    diskEncryptionKey: outputs.compute.beta.CustomerEncryptionKeyResponse;
    /**
     * The size of the disk in base-2 GB.
     */
    diskSizeGb: string;
    /**
     * URL of the disk type resource. For example: projects/project /zones/zone/diskTypes/pd-standard or pd-ssd
     */
    diskType: string;
    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
     */
    guestOsFeatures: outputs.compute.beta.GuestOsFeatureResponse[];
    /**
     * Specifies zero-based index of the disk that is attached to the source instance.
     */
    index: number;
    /**
     * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME.
     */
    interface: string;
    /**
     * Type of the resource. Always compute#attachedDisk for attached disks.
     */
    kind: string;
    /**
     * Any valid publicly visible licenses.
     */
    licenses: string[];
    /**
     * The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY.
     */
    mode: string;
    /**
     * Specifies a URL of the disk attached to the source instance.
     */
    source: string;
    /**
     * A size of the storage used by the disk's snapshot by this machine image.
     */
    storageBytes: string;
    /**
     * An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
     */
    storageBytesStatus: string;
    /**
     * Specifies the type of the attached disk, either SCRATCH or PERSISTENT.
     */
    type: string;
}

/**
 * An instance-attached disk resource.
 */
export interface SavedDiskResponse {
    /**
     * The architecture of the attached disk.
     */
    architecture: string;
    /**
     * Type of the resource. Always compute#savedDisk for attached disks.
     */
    kind: string;
    /**
     * Specifies a URL of the disk attached to the source instance.
     */
    sourceDisk: string;
    /**
     * Size of the individual disk snapshot used by this machine image.
     */
    storageBytes: string;
    /**
     * An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
     */
    storageBytesStatus: string;
}

/**
 * Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.
 */
export interface SchedulingNodeAffinityResponse {
    /**
     * Corresponds to the label key of Node resource.
     */
    key: string;
    /**
     * Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
     */
    operator: string;
    /**
     * Corresponds to the label values of Node resource.
     */
    values: string[];
}

/**
 * Sets the scheduling options for an Instance.
 */
export interface SchedulingResponse {
    /**
     * Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
     */
    automaticRestart: boolean;
    /**
     * Specify the time in seconds for host error detection, the value must be within the range of [90, 330] with the increment of 30, if unset, the default behavior of host error recovery will be used.
     */
    hostErrorTimeoutSeconds: number;
    /**
     * Specifies the termination action for the instance.
     */
    instanceTerminationAction: string;
    /**
     * An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
     */
    locationHint: string;
    /**
     * Specifies the number of hours after VM instance creation where the VM won't be scheduled for maintenance.
     */
    maintenanceFreezeDurationHours: number;
    /**
     * Specifies the frequency of planned maintenance events. The accepted values are: `PERIODIC`.
     */
    maintenanceInterval: string;
    /**
     * Specifies the max run duration for the given instance. If specified, the instance termination action will be performed at the end of the run duration.
     */
    maxRunDuration: outputs.compute.beta.DurationResponse;
    /**
     * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
     */
    minNodeCpus: number;
    /**
     * A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
     */
    nodeAffinities: outputs.compute.beta.SchedulingNodeAffinityResponse[];
    /**
     * Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy.
     */
    onHostMaintenance: string;
    /**
     * Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
     */
    preemptible: boolean;
    /**
     * Specifies the provisioning model of the instance.
     */
    provisioningModel: string;
    /**
     * Specifies the timestamp, when the instance will be terminated, in RFC3339 text format. If specified, the instance termination action will be performed at the termination time.
     */
    terminationTime: string;
}

/**
 * Configuration options for Adaptive Protection auto-deploy feature.
 */
export interface SecurityPolicyAdaptiveProtectionConfigAutoDeployConfigResponse {
    confidenceThreshold: number;
    expirationSec: number;
    impactedBaselineThreshold: number;
    loadThreshold: number;
}

/**
 * Configuration options for L7 DDoS detection.
 */
export interface SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse {
    /**
     * If set to true, enables CAAP for L7 DDoS detection.
     */
    enable: boolean;
    /**
     * Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
     */
    ruleVisibility: string;
}

/**
 * Configuration options for Cloud Armor Adaptive Protection (CAAP).
 */
export interface SecurityPolicyAdaptiveProtectionConfigResponse {
    autoDeployConfig: outputs.compute.beta.SecurityPolicyAdaptiveProtectionConfigAutoDeployConfigResponse;
    /**
     * If set to true, enables Cloud Armor Machine Learning.
     */
    layer7DdosDefenseConfig: outputs.compute.beta.SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse;
}

export interface SecurityPolicyAdvancedOptionsConfigJsonCustomConfigResponse {
    /**
     * A list of custom Content-Type header values to apply the JSON parsing. As per RFC 1341, a Content-Type header value has the following format: Content-Type := type "/" subtype *[";" parameter] When configuring a custom Content-Type header value, only the type/subtype needs to be specified, and the parameters should be excluded.
     */
    contentTypes: string[];
}

export interface SecurityPolicyAdvancedOptionsConfigResponse {
    /**
     * Custom configuration to apply the JSON parsing. Only applicable when json_parsing is set to STANDARD.
     */
    jsonCustomConfig: outputs.compute.beta.SecurityPolicyAdvancedOptionsConfigJsonCustomConfigResponse;
    jsonParsing: string;
    logLevel: string;
}

export interface SecurityPolicyAssociationResponse {
    /**
     * The resource that the security policy is attached to.
     */
    attachmentId: string;
    /**
     * The display name of the security policy of the association.
     */
    displayName: string;
    /**
     * The name for an association.
     */
    name: string;
    /**
     * The security policy ID of the association.
     */
    securityPolicyId: string;
}

export interface SecurityPolicyDdosProtectionConfigResponse {
    ddosProtection: string;
}

export interface SecurityPolicyRecaptchaOptionsConfigResponse {
    /**
     * An optional field to supply a reCAPTCHA site key to be used for all the rules using the redirect action with the type of GOOGLE_RECAPTCHA under the security policy. The specified site key needs to be created from the reCAPTCHA API. The user is responsible for the validity of the specified site key. If not specified, a Google-managed site key is used.
     */
    redirectSiteKey: string;
}

export interface SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionResponse {
    /**
     * The name of the header to set.
     */
    headerName: string;
    /**
     * The value to set the named header to.
     */
    headerValue: string;
}

export interface SecurityPolicyRuleHttpHeaderActionResponse {
    /**
     * The list of request headers to add or overwrite if they're already present.
     */
    requestHeadersToAdds: outputs.compute.beta.SecurityPolicyRuleHttpHeaderActionHttpHeaderOptionResponse[];
}

export interface SecurityPolicyRuleMatcherConfigLayer4ConfigResponse {
    /**
     * The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
     */
    ipProtocol: string;
    /**
     * An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"]. This field may only be specified when versioned_expr is set to FIREWALL.
     */
    ports: string[];
}

export interface SecurityPolicyRuleMatcherConfigResponse {
    /**
     * CIDR IP address range. This field may only be specified when versioned_expr is set to FIREWALL.
     */
    destIpRanges: string[];
    /**
     * Pairs of IP protocols and ports that the rule should match. This field may only be specified when versioned_expr is set to FIREWALL.
     */
    layer4Configs: outputs.compute.beta.SecurityPolicyRuleMatcherConfigLayer4ConfigResponse[];
    /**
     * CIDR IP address range. Maximum number of src_ip_ranges allowed is 10.
     */
    srcIpRanges: string[];
}

/**
 * Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
 */
export interface SecurityPolicyRuleMatcherResponse {
    /**
     * The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.
     */
    config: outputs.compute.beta.SecurityPolicyRuleMatcherConfigResponse;
    /**
     * User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
     */
    expr: outputs.compute.beta.ExprResponse;
    /**
     * Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
     */
    versionedExpr: string;
}

export interface SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsResponse {
    /**
     * The match operator for the field.
     */
    op: string;
    /**
     * The value of the field.
     */
    val: string;
}

export interface SecurityPolicyRulePreconfiguredWafConfigExclusionResponse {
    /**
     * A list of request cookie names whose value will be excluded from inspection during preconfigured WAF evaluation.
     */
    requestCookiesToExclude: outputs.compute.beta.SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsResponse[];
    /**
     * A list of request header names whose value will be excluded from inspection during preconfigured WAF evaluation.
     */
    requestHeadersToExclude: outputs.compute.beta.SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsResponse[];
    /**
     * A list of request query parameter names whose value will be excluded from inspection during preconfigured WAF evaluation. Note that the parameter can be in the query string or in the POST body.
     */
    requestQueryParamsToExclude: outputs.compute.beta.SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsResponse[];
    /**
     * A list of request URIs from the request line to be excluded from inspection during preconfigured WAF evaluation. When specifying this field, the query or fragment part should be excluded.
     */
    requestUrisToExclude: outputs.compute.beta.SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParamsResponse[];
    /**
     * A list of target rule IDs under the WAF rule set to apply the preconfigured WAF exclusion. If omitted, it refers to all the rule IDs under the WAF rule set.
     */
    targetRuleIds: string[];
    /**
     * Target WAF rule set to apply the preconfigured WAF exclusion.
     */
    targetRuleSet: string;
}

export interface SecurityPolicyRulePreconfiguredWafConfigResponse {
    /**
     * A list of exclusions to apply during preconfigured WAF evaluation.
     */
    exclusions: outputs.compute.beta.SecurityPolicyRulePreconfiguredWafConfigExclusionResponse[];
}

export interface SecurityPolicyRuleRateLimitOptionsResponse {
    /**
     * Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     */
    banDurationSec: number;
    /**
     * Can only be specified if the action for the rule is "rate_based_ban". If specified, the key will be banned for the configured 'ban_duration_sec' when the number of requests that exceed the 'rate_limit_threshold' also exceed this 'ban_threshold'.
     */
    banThreshold: outputs.compute.beta.SecurityPolicyRuleRateLimitOptionsThresholdResponse;
    /**
     * Action to take for requests that are under the configured rate limit threshold. Valid option is "allow" only.
     */
    conformAction: string;
    /**
     * Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if this field 'enforce_on_key' is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the HTTP header whose name is configured under "enforce_on_key_name". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name is configured under "enforce_on_key_name". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates. 
     */
    enforceOnKey: string;
    /**
     * Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     */
    enforceOnKeyName: string;
    /**
     * Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are "deny(status)", where valid values for status are 403, 404, 429, and 502, and "redirect" where the redirect parameters come from exceedRedirectOptions below.
     */
    exceedAction: string;
    /**
     * Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect.
     */
    exceedRedirectOptions: outputs.compute.beta.SecurityPolicyRuleRedirectOptionsResponse;
    /**
     * Threshold at which to begin ratelimiting.
     */
    rateLimitThreshold: outputs.compute.beta.SecurityPolicyRuleRateLimitOptionsThresholdResponse;
}

export interface SecurityPolicyRuleRateLimitOptionsThresholdResponse {
    /**
     * Number of HTTP(S) requests for calculating the threshold.
     */
    count: number;
    /**
     * Interval over which the threshold is computed.
     */
    intervalSec: number;
}

export interface SecurityPolicyRuleRedirectOptionsResponse {
    /**
     * Target for the redirect action. This is required if the type is EXTERNAL_302 and cannot be specified for GOOGLE_RECAPTCHA.
     */
    target: string;
    /**
     * Type of the redirect action.
     */
    type: string;
}

/**
 * Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
 */
export interface SecurityPolicyRuleResponse {
    /**
     * The Action to perform when the rule is matched. The following are the valid actions: - allow: allow access to target. - deny(): deny access to target, returns the HTTP response code specified (valid values are 403, 404, and 502). - rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rate_limit_options to be set. - redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. - throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rate_limit_options to be set for this. 
     */
    action: string;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    description: string;
    /**
     * The direction in which this rule applies. This field may only be specified when versioned_expr is set to FIREWALL.
     */
    direction: string;
    /**
     * Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules. This field may only be specified when the versioned_expr is set to FIREWALL.
     */
    enableLogging: boolean;
    /**
     * Optional, additional actions that are performed on headers.
     */
    headerAction: outputs.compute.beta.SecurityPolicyRuleHttpHeaderActionResponse;
    /**
     * [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules
     */
    kind: string;
    /**
     * A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
     */
    match: outputs.compute.beta.SecurityPolicyRuleMatcherResponse;
    /**
     * Preconfigured WAF configuration to be applied for the rule. If the rule does not evaluate preconfigured WAF rules, i.e., if evaluatePreconfiguredWaf() is not used, this field will have no effect.
     */
    preconfiguredWafConfig: outputs.compute.beta.SecurityPolicyRulePreconfiguredWafConfigResponse;
    /**
     * If set to true, the specified action is not enforced.
     */
    preview: boolean;
    /**
     * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
     */
    priority: number;
    /**
     * Must be specified if the action is "rate_based_ban" or "throttle". Cannot be specified for any other actions.
     */
    rateLimitOptions: outputs.compute.beta.SecurityPolicyRuleRateLimitOptionsResponse;
    /**
     * Parameters defining the redirect action. Cannot be specified for any other actions.
     */
    redirectOptions: outputs.compute.beta.SecurityPolicyRuleRedirectOptionsResponse;
    /**
     * Identifier for the rule. This is only unique within the given security policy. This can only be set during rule creation, if rule number is not specified it will be generated by the server.
     */
    ruleNumber: string;
    /**
     * Calculation of the complexity of a single firewall security policy rule.
     */
    ruleTupleCount: number;
    /**
     * A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule. This field may only be specified when versioned_expr is set to FIREWALL.
     */
    targetResources: string[];
    /**
     * A list of service accounts indicating the sets of instances that are applied with this rule.
     */
    targetServiceAccounts: string[];
}

/**
 * The authentication and authorization settings for a BackendService.
 */
export interface SecuritySettingsResponse {
    /**
     * [Deprecated] Use clientTlsPolicy instead.
     *
     * @deprecated [Deprecated] Use clientTlsPolicy instead.
     */
    authentication: string;
    /**
     * Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
     */
    clientTlsPolicy: string;
    /**
     * Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
     */
    subjectAltNames: string[];
}

export interface ServerBindingResponse {
    type: string;
}

/**
 * A service account.
 */
export interface ServiceAccountResponse {
    /**
     * Email address of the service account.
     */
    email: string;
    /**
     * The list of scopes to be made available for this service account.
     */
    scopes: string[];
}

/**
 * [Output Only] A connection connected to this service attachment.
 */
export interface ServiceAttachmentConnectedEndpointResponse {
    /**
     * The url of a connected endpoint.
     */
    endpoint: string;
    /**
     * The PSC connection id of the connected endpoint.
     */
    pscConnectionId: string;
    /**
     * The status of a connected endpoint to this service attachment.
     */
    status: string;
}

export interface ServiceAttachmentConsumerProjectLimitResponse {
    /**
     * The value of the limit to set.
     */
    connectionLimit: number;
    /**
     * The project id or number for the project to set the limit for.
     */
    projectIdOrNum: string;
}

/**
 * The share setting for reservations and sole tenancy node groups.
 */
export interface ShareSettingsResponse {
    /**
     * A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS.
     */
    projectMap: {[key: string]: string};
    /**
     * A List of Project names to specify consumer projects for this shared-reservation. This is only valid when share_type's value is SPECIFIC_PROJECTS.
     */
    projects: string[];
    /**
     * Type of sharing for this shared-reservation
     */
    shareType: string;
}

/**
 * A set of Shielded Instance options.
 */
export interface ShieldedInstanceConfigResponse {
    /**
     * Defines whether the instance has integrity monitoring enabled. Enabled by default.
     */
    enableIntegrityMonitoring: boolean;
    /**
     * Defines whether the instance has Secure Boot enabled. Disabled by default.
     */
    enableSecureBoot: boolean;
    /**
     * Defines whether the instance has the vTPM enabled. Enabled by default.
     */
    enableVtpm: boolean;
}

/**
 * The policy describes the baseline against which Instance boot integrity is measured.
 */
export interface ShieldedInstanceIntegrityPolicyResponse {
    /**
     * Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
     */
    updateAutoLearnPolicy: boolean;
}

/**
 * A set of Shielded VM options.
 */
export interface ShieldedVmConfigResponse {
    /**
     * Defines whether the instance has integrity monitoring enabled.
     */
    enableIntegrityMonitoring: boolean;
    /**
     * Defines whether the instance has Secure Boot enabled.
     */
    enableSecureBoot: boolean;
    /**
     * Defines whether the instance has the vTPM enabled.
     */
    enableVtpm: boolean;
}

/**
 * The policy describes the baseline against which VM instance boot integrity is measured.
 */
export interface ShieldedVmIntegrityPolicyResponse {
    /**
     * Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
     */
    updateAutoLearnPolicy: boolean;
}

export interface SourceDiskEncryptionKeyResponse {
    /**
     * The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
     */
    diskEncryptionKey: outputs.compute.beta.CustomerEncryptionKeyResponse;
    /**
     * URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk 
     */
    sourceDisk: string;
}

/**
 * A specification of the parameters to use when creating the instance template from a source instance.
 */
export interface SourceInstanceParamsResponse {
    /**
     * Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
     */
    diskConfigs: outputs.compute.beta.DiskInstantiationConfigResponse[];
}

/**
 * DEPRECATED: Please use compute#instanceProperties instead. New properties will not be added to this field.
 */
export interface SourceInstancePropertiesResponse {
    /**
     * Enables instances created based on this machine image to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
     */
    canIpForward: boolean;
    /**
     * Whether the instance created from this machine image should be protected against deletion.
     */
    deletionProtection: boolean;
    /**
     * An optional text description for the instances that are created from this machine image.
     */
    description: string;
    /**
     * An array of disks that are associated with the instances that are created from this machine image.
     */
    disks: outputs.compute.beta.SavedAttachedDiskResponse[];
    /**
     * A list of guest accelerator cards' type and count to use for instances created from this machine image.
     */
    guestAccelerators: outputs.compute.beta.AcceleratorConfigResponse[];
    /**
     * KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
     */
    keyRevocationActionType: string;
    /**
     * Labels to apply to instances that are created from this machine image.
     */
    labels: {[key: string]: string};
    /**
     * The machine type to use for instances that are created from this machine image.
     */
    machineType: string;
    /**
     * The metadata key/value pairs to assign to instances that are created from this machine image. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
     */
    metadata: outputs.compute.beta.MetadataResponse;
    /**
     * Minimum cpu/platform to be used by instances created from this machine image. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
     */
    minCpuPlatform: string;
    /**
     * An array of network access configurations for this interface.
     */
    networkInterfaces: outputs.compute.beta.NetworkInterfaceResponse[];
    /**
     * PostKeyRevocationActionType of the instance.
     */
    postKeyRevocationActionType: string;
    /**
     * Specifies the scheduling options for the instances that are created from this machine image.
     */
    scheduling: outputs.compute.beta.SchedulingResponse;
    /**
     * A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this machine image. Use metadata queries to obtain the access tokens for these instances.
     */
    serviceAccounts: outputs.compute.beta.ServiceAccountResponse[];
    /**
     * A list of tags to apply to the instances that are created from this machine image. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
     */
    tags: outputs.compute.beta.TagsResponse;
}

/**
 * Configuration and status of a managed SSL certificate.
 */
export interface SslCertificateManagedSslCertificateResponse {
    /**
     * [Output only] Detailed statuses of the domains specified for managed certificate resource.
     */
    domainStatus: {[key: string]: string};
    /**
     * The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
     */
    domains: string[];
    /**
     * [Output only] Status of the managed certificate resource.
     */
    status: string;
}

/**
 * Configuration and status of a self-managed SSL certificate.
 */
export interface SslCertificateSelfManagedSslCertificateResponse {
    /**
     * A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
     */
    certificate: string;
    /**
     * A write-only private key in PEM format. Only insert requests will include this field.
     */
    privateKey: string;
}

export interface SslPolicyWarningsItemDataItemResponse {
    /**
     * A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
     */
    key: string;
    /**
     * A warning data value corresponding to the key.
     */
    value: string;
}

export interface SslPolicyWarningsItemResponse {
    /**
     * A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
     */
    code: string;
    /**
     * Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
     */
    data: outputs.compute.beta.SslPolicyWarningsItemDataItemResponse[];
    /**
     * A human-readable description of the warning code.
     */
    message: string;
}

/**
 * Configuration of preserved resources.
 */
export interface StatefulPolicyPreservedStateResponse {
    /**
     * Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
     */
    disks: {[key: string]: string};
    /**
     * External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
     */
    externalIPs: {[key: string]: string};
    /**
     * Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
     */
    internalIPs: {[key: string]: string};
}

export interface StatefulPolicyResponse {
    preservedState: outputs.compute.beta.StatefulPolicyPreservedStateResponse;
}

/**
 * The available logging options for this subnetwork.
 */
export interface SubnetworkLogConfigResponse {
    /**
     * Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
     */
    aggregationInterval: string;
    /**
     * Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled.
     */
    enable: boolean;
    /**
     * Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging.
     */
    filterExpr: string;
    /**
     * Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
     */
    flowSampling: number;
    /**
     * Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
     */
    metadata: string;
    /**
     * Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
     */
    metadataFields: string[];
}

/**
 * Represents a secondary IP range of a subnetwork.
 */
export interface SubnetworkSecondaryRangeResponse {
    /**
     * The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
     */
    ipCidrRange: string;
    /**
     * The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
     */
    rangeName: string;
    /**
     * The URL of the reserved internal range.
     */
    reservedInternalRange: string;
}

/**
 * Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director.
 */
export interface SubsettingResponse {
    policy: string;
    /**
     * The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled.
     */
    subsetSize: number;
}

export interface TCPHealthCheckResponse {
    /**
     * The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
     */
    port: number;
    /**
     * Not supported.
     */
    portName: string;
    /**
     * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
     */
    portSpecification: string;
    /**
     * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
     */
    proxyHeader: string;
    /**
     * Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection.
     */
    request: string;
    /**
     * Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
     */
    response: string;
}

/**
 * A set of instance tags.
 */
export interface TagsResponse {
    /**
     * Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance.
     */
    fingerprint: string;
    /**
     * An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
     */
    items: string[];
}

export interface Uint128Response {
    high: string;
    low: string;
}

/**
 * HTTP headers used in UrlMapTests.
 */
export interface UrlMapTestHeaderResponse {
    /**
     * Header name.
     */
    name: string;
    /**
     * Header value.
     */
    value: string;
}

/**
 * Message for the expected URL mappings.
 */
export interface UrlMapTestResponse {
    /**
     * Description of this test case.
     */
    description: string;
    /**
     * The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
     */
    expectedOutputUrl: string;
    /**
     * For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
     */
    expectedRedirectResponseCode: number;
    /**
     * HTTP headers for this request. If headers contains a host header, then host must also match the header value.
     */
    headers: outputs.compute.beta.UrlMapTestHeaderResponse[];
    /**
     * Host portion of the URL. If headers contains a host header, then host must also match the header value.
     */
    host: string;
    /**
     * Path portion of the URL.
     */
    path: string;
    /**
     * Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set.
     */
    service: string;
}

/**
 * The spec for modifying the path before sending the request to the matched backend service.
 */
export interface UrlRewriteResponse {
    /**
     * Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters.
     */
    hostRewrite: string;
    /**
     * Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters.
     */
    pathPrefixRewrite: string;
}

/**
 * A VPN gateway interface.
 */
export interface VpnGatewayVpnGatewayInterfaceResponse {
    /**
     * URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource.
     */
    interconnectAttachment: string;
    /**
     * IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For HA VPN over Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non HA VPN over Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address.
     */
    ipAddress: string;
}

/**
 * In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple backend services. The volume of traffic for each backend service is proportional to the weight specified in each WeightedBackendService
 */
export interface WeightedBackendServiceResponse {
    /**
     * The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as part of this backendServiceWeight.
     */
    backendService: string;
    /**
     * Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     */
    headerAction: outputs.compute.beta.HttpHeaderActionResponse;
    /**
     * Specifies the fraction of traffic sent to a backend service, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend service's session affinity policy. The value must be from 0 to 1000.
     */
    weight: number;
}

