// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * State of the latest attempt to authorize a domain for certificate issuance.
 */
export interface AuthorizationAttemptInfoResponse {
    /**
     * Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use FailureReason enum.
     */
    details: string;
    /**
     * Domain name of the authorization attempt.
     */
    domain: string;
    /**
     * Reason for failure of the authorization attempt for the domain.
     */
    failureReason: string;
    /**
     * State of the domain for managed certificate issuance.
     */
    state: string;
}

/**
 * The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
 */
export interface CertificateAuthorityConfigResponse {
    /**
     * Defines a CertificateAuthorityServiceConfig.
     */
    certificateAuthorityServiceConfig: outputs.certificatemanager.v1.CertificateAuthorityServiceConfigResponse;
}

/**
 * Contains information required to contact CA service.
 */
export interface CertificateAuthorityServiceConfigResponse {
    /**
     * A CA pool resource used to issue a certificate. The CA pool string has a relative resource path following the form "projects/{project}/locations/{location}/caPools/{ca_pool}".
     */
    caPool: string;
}

/**
 * The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be usable by certificate.
 */
export interface DnsResourceRecordResponse {
    /**
     * Data of the DNS Resource Record.
     */
    data: string;
    /**
     * Fully qualified name of the DNS Resource Record. e.g. `_acme-challenge.example.com`
     */
    name: string;
    /**
     * Type of the DNS Resource Record. Currently always set to "CNAME".
     */
    type: string;
}

/**
 * Describes a Target Proxy which uses this Certificate Map.
 */
export interface GclbTargetResponse {
    /**
     * IP configurations for this Target Proxy where the Certificate Map is serving.
     */
    ipConfigs: outputs.certificatemanager.v1.IpConfigResponse[];
    /**
     * This field returns the resource name in the following format: `//compute.googleapis.com/projects/*&#47;global/targetHttpsProxies/*`.
     */
    targetHttpsProxy: string;
    /**
     * This field returns the resource name in the following format: `//compute.googleapis.com/projects/*&#47;global/targetSslProxies/*`.
     */
    targetSslProxy: string;
}

/**
 * Defines IP configuration where this Certificate Map is serving.
 */
export interface IpConfigResponse {
    /**
     * An external IP address.
     */
    ipAddress: string;
    /**
     * Ports.
     */
    ports: number[];
}

/**
 * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
 */
export interface ManagedCertificateResponse {
    /**
     * Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
     */
    authorizationAttemptInfo: outputs.certificatemanager.v1.AuthorizationAttemptInfoResponse[];
    /**
     * Immutable. Authorizations that will be used for performing domain authorization.
     */
    dnsAuthorizations: string[];
    /**
     * Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
     */
    domains: string[];
    /**
     * Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*&#47;locations/*&#47;certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
     */
    issuanceConfig: string;
    /**
     * Information about issues with provisioning a Managed Certificate.
     */
    provisioningIssue: outputs.certificatemanager.v1.ProvisioningIssueResponse;
    /**
     * State of the managed certificate resource.
     */
    state: string;
}

/**
 * Information about issues with provisioning a Managed Certificate.
 */
export interface ProvisioningIssueResponse {
    /**
     * Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
     */
    details: string;
    /**
     * Reason for provisioning failures.
     */
    reason: string;
}

/**
 * Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
 */
export interface SelfManagedCertificateResponse {
    /**
     * Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
     */
    pemCertificate: string;
    /**
     * Input only. The PEM-encoded private key of the leaf certificate.
     */
    pemPrivateKey: string;
}

