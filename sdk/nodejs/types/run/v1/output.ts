// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Information for connecting over HTTP(s).
 */
export interface AddressableResponse {
    url: string;
}

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface AuditConfigResponse {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs: outputs.run.v1.AuditLogConfigResponse[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service: string;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigResponse {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers: string[];
    /**
     * The log type that this config enables.
     */
    logType: string;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.run.v1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * Not supported by Cloud Run. ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
 */
export interface ConfigMapEnvSourceResponse {
    /**
     * This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
     */
    localObjectReference: outputs.run.v1.LocalObjectReferenceResponse;
    /**
     * The ConfigMap to select from.
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined.
     */
    optional: boolean;
}

/**
 * Not supported by Cloud Run.
 */
export interface ConfigMapKeySelectorResponse {
    /**
     * Not supported by Cloud Run.
     */
    key: string;
    /**
     * Not supported by Cloud Run.
     */
    localObjectReference: outputs.run.v1.LocalObjectReferenceResponse;
    /**
     * Not supported by Cloud Run.
     */
    name: string;
    /**
     * Not supported by Cloud Run.
     */
    optional: boolean;
}

/**
 * Not supported by Cloud Run. Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
 */
export interface ConfigMapVolumeSourceResponse {
    /**
     * (Optional) Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode: number;
    /**
     * (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
     */
    items: outputs.run.v1.KeyToPathResponse[];
    /**
     * Name of the config.
     */
    name: string;
    /**
     * (Optional) Specify whether the Secret or its keys must be defined.
     */
    optional: boolean;
}

/**
 * ContainerPort represents a network port in a single container.
 */
export interface ContainerPortResponse {
    /**
     * Port number the container listens on. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
     */
    name: string;
    /**
     * Protocol for port. Must be "TCP". Defaults to "TCP".
     */
    protocol: string;
}

/**
 * A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
 */
export interface ContainerResponse {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
     */
    args: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references are not supported in Cloud Run.
     */
    command: string[];
    /**
     * List of environment variables to set in the container.
     */
    env: outputs.run.v1.EnvVarResponse[];
    /**
     * Not supported by Cloud Run.
     */
    envFrom: outputs.run.v1.EnvFromSourceResponse[];
    /**
     * URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
     */
    image: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
     */
    imagePullPolicy: string;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    livenessProbe: outputs.run.v1.ProbeResponse;
    /**
     * Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
     */
    name: string;
    /**
     * List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
     */
    ports: outputs.run.v1.ContainerPortResponse[];
    /**
     * Not supported by Cloud Run.
     */
    readinessProbe: outputs.run.v1.ProbeResponse;
    /**
     * Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.run.v1.ResourceRequirementsResponse;
    /**
     * Not supported by Cloud Run.
     */
    securityContext: outputs.run.v1.SecurityContextResponse;
    /**
     * Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not receive traffic if the probe fails. If not provided, a default startup probe with TCP socket action is used. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe: outputs.run.v1.ProbeResponse;
    /**
     * Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
     */
    terminationMessagePath: string;
    /**
     * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
     */
    volumeMounts: outputs.run.v1.VolumeMountResponse[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
     */
    workingDir: string;
}

/**
 * The desired state of the Domain Mapping.
 */
export interface DomainMappingSpecResponse {
    /**
     * The mode of the certificate.
     */
    certificateMode: string;
    /**
     * If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
     */
    forceOverride: boolean;
    /**
     * The name of the Knative Route that this DomainMapping applies to. The route must exist.
     */
    routeName: string;
}

/**
 * The current state of the Domain Mapping.
 */
export interface DomainMappingStatusResponse {
    /**
     * Array of observed DomainMappingConditions, indicating the current state of the DomainMapping.
     */
    conditions: outputs.run.v1.GoogleCloudRunV1ConditionResponse[];
    /**
     * The name of the route that the mapping currently points to.
     */
    mappedRouteName: string;
    /**
     * ObservedGeneration is the 'Generation' of the DomainMapping that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
     */
    observedGeneration: number;
    /**
     * The resource records required to configure this domain mapping. These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.
     */
    resourceRecords: outputs.run.v1.ResourceRecordResponse[];
    /**
     * Optional. Not supported by Cloud Run.
     */
    url: string;
}

/**
 * Not supported by Cloud Run. EnvFromSource represents the source of a set of ConfigMaps
 */
export interface EnvFromSourceResponse {
    /**
     * The ConfigMap to select from
     */
    configMapRef: outputs.run.v1.ConfigMapEnvSourceResponse;
    /**
     * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix: string;
    /**
     * The Secret to select from
     */
    secretRef: outputs.run.v1.SecretEnvSourceResponse;
}

/**
 * EnvVar represents an environment variable present in a Container.
 */
export interface EnvVarResponse {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER.
     */
    name: string;
    /**
     * Value of the environment variable. Defaults to "". Variable references are not supported in Cloud Run.
     */
    value: string;
    /**
     * Source for the environment variable's value. Only supports secret_key_ref. Cannot be used if value is not empty.
     */
    valueFrom: outputs.run.v1.EnvVarSourceResponse;
}

/**
 * EnvVarSource represents a source for the value of an EnvVar.
 */
export interface EnvVarSourceResponse {
    /**
     * Not supported by Cloud Run. Not supported in Cloud Run.
     */
    configMapKeyRef: outputs.run.v1.ConfigMapKeySelectorResponse;
    /**
     * Selects a key (version) of a secret in Secret Manager.
     */
    secretKeyRef: outputs.run.v1.SecretKeySelectorResponse;
}

/**
 * Not supported by Cloud Run. ExecAction describes a "run in container" action.
 */
export interface ExecActionResponse {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    command: string[];
}

/**
 * Reference to an Execution. Use /Executions.GetExecution with the given name to get full execution including the latest status.
 */
export interface ExecutionReferenceResponse {
    /**
     * Optional. Completion timestamp of the execution.
     */
    completionTimestamp: string;
    /**
     * Optional. Creation timestamp of the execution.
     */
    creationTimestamp: string;
    /**
     * Optional. Name of the execution.
     */
    name: string;
}

/**
 * ExecutionSpec describes how the execution will look.
 */
export interface ExecutionSpecResponse {
    /**
     * Optional. Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed, i.e. when the work left to do is less than max parallelism.
     */
    parallelism: number;
    /**
     * Optional. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution.
     */
    taskCount: number;
    /**
     * Optional. The template used to create tasks for this execution.
     */
    template: outputs.run.v1.TaskTemplateSpecResponse;
}

/**
 * ExecutionTemplateSpec describes the metadata and spec an Execution should have when created from a job. Based on: https://github.com/kubernetes/api/blob/e771f807/core/v1/types.go#L3179-L3190
 */
export interface ExecutionTemplateSpecResponse {
    /**
     * Optional. Optional metadata for this Execution, including labels and annotations. The following annotation keys set properties of the created execution: * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
     */
    metadata: outputs.run.v1.ObjectMetaResponse;
    /**
     * ExecutionSpec holds the desired configuration for executions of this job.
     */
    spec: outputs.run.v1.ExecutionSpecResponse;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * GRPCAction describes an action involving a GRPC port.
 */
export interface GRPCActionResponse {
    /**
     * Port number of the gRPC service. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service: string;
}

/**
 * Conditions show the status of reconciliation progress on a given resource. Most resource use a top-level condition type "Ready" or "Completed" to show overall status with other conditions to checkpoint each stage of reconciliation. Note that if metadata.Generation does not equal status.ObservedGeneration, the conditions shown may not be relevant for the current spec.
 */
export interface GoogleCloudRunV1ConditionResponse {
    /**
     * Optional. Last time the condition transitioned from one status to another.
     */
    lastTransitionTime: string;
    /**
     * Optional. Human readable message indicating details about the current status.
     */
    message: string;
    /**
     * Optional. One-word CamelCase reason for the condition's last transition. These are intended to be stable, unique values which the client may use to trigger error handling logic, whereas messages which may be changed later by the server.
     */
    reason: string;
    /**
     * Optional. How to interpret this condition. One of Error, Warning, or Info. Conditions of severity Info do not contribute to resource readiness.
     */
    severity: string;
    /**
     * Status of the condition, one of True, False, Unknown.
     */
    status: string;
    /**
     * type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready" or "Completed": True when the Resource is ready.
     */
    type: string;
}

/**
 * HTTPGetAction describes an action based on HTTP Get requests.
 */
export interface HTTPGetActionResponse {
    /**
     * Not supported by Cloud Run.
     */
    host: string;
    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     */
    httpHeaders: outputs.run.v1.HTTPHeaderResponse[];
    /**
     * Path to access on the HTTP server.
     */
    path: string;
    /**
     * Not supported by Cloud Run.
     */
    scheme: string;
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 */
export interface HTTPHeaderResponse {
    /**
     * The header field name
     */
    name: string;
    /**
     * The header field value
     */
    value: string;
}

/**
 * JobSpec describes how the job will look.
 */
export interface JobSpecResponse {
    /**
     * Optional. Describes the execution that will be created when running a job.
     */
    template: outputs.run.v1.ExecutionTemplateSpecResponse;
}

/**
 * JobStatus represents the current state of a Job.
 */
export interface JobStatusResponse {
    /**
     * Conditions communicate information about ongoing/complete reconciliation processes that bring the "spec" inline with the observed state of the world. Job-specific conditions include: * `Ready`: `True` when the job is ready to be executed.
     */
    conditions: outputs.run.v1.GoogleCloudRunV1ConditionResponse[];
    /**
     * Number of executions created for this job.
     */
    executionCount: number;
    /**
     * A pointer to the most recently created execution for this job. This is set regardless of the eventual state of the execution.
     */
    latestCreatedExecution: outputs.run.v1.ExecutionReferenceResponse;
    /**
     * The 'generation' of the job that was last processed by the controller.
     */
    observedGeneration: number;
}

/**
 * Maps a string key to a path within a volume.
 */
export interface KeyToPathResponse {
    /**
     * The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version. The key to project.
     */
    key: string;
    /**
     * (Optional) Mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode: number;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path: string;
}

/**
 * Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
 */
export interface LocalObjectReferenceResponse {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

/**
 * k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
 */
export interface ObjectMetaResponse {
    /**
     * Unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. In Cloud Run, annotations with 'run.googleapis.com/' and 'autoscaling.knative.dev' are restricted, and the accepted annotations will be different depending on the resource type. * `autoscaling.knative.dev/maxScale`: Revision. * `autoscaling.knative.dev/minScale`: Revision. * `run.googleapis.com/binary-authorization-breakglass`: Service, Job, * `run.googleapis.com/binary-authorization`: Service, Job, Execution. * `run.googleapis.com/client-name`: All resources. * `run.googleapis.com/cloudsql-instances`: Revision, Execution. * `run.googleapis.com/cpu-throttling`: Revision. * `run.googleapis.com/custom-audiences`: Service. * `run.googleapis.com/description`: Service. * `run.googleapis.com/encryption-key-shutdown-hours`: Revision * `run.googleapis.com/encryption-key`: Revision, Execution. * `run.googleapis.com/execution-environment`: Revision, Execution. * `run.googleapis.com/gc-traffic-tags`: Service. * `run.googleapis.com/ingress`: Service. * `run.googleapis.com/network-interfaces`: Revision, Execution. * `run.googleapis.com/post-key-revocation-action-type`: Revision. * `run.googleapis.com/secrets`: Revision, Execution. * `run.googleapis.com/secure-session-agent`: Revision. * `run.googleapis.com/sessionAffinity`: Revision. * `run.googleapis.com/startup-cpu-boost`: Revision. * `run.googleapis.com/vpc-access-connector`: Revision, Execution. * `run.googleapis.com/vpc-access-egress`: Revision, Execution. Execution. More info: https://kubernetes.io/docs/user-guide/annotations
     */
    annotations: {[key: string]: string};
    /**
     * Not supported by Cloud Run
     */
    clusterName: string;
    /**
     * UTC timestamp representing the server time when this object was created. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
     */
    creationTimestamp: string;
    /**
     * Not supported by Cloud Run
     */
    deletionGracePeriodSeconds: number;
    /**
     * The read-only soft deletion timestamp for this resource. In Cloud Run, users are not able to set this field. Instead, they must call the corresponding Delete API.
     */
    deletionTimestamp: string;
    /**
     * Not supported by Cloud Run
     */
    finalizers: string[];
    /**
     * Not supported by Cloud Run
     */
    generateName: string;
    /**
     * A system-provided sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: https://kubernetes.io/docs/user-guide/labels
     */
    labels: {[key: string]: string};
    /**
     * The name of the resource. In Cloud Run, name is required when creating top-level resources (Service, Job), must be unique within a Cloud Run project/region, and cannot be changed once created. More info: https://kubernetes.io/docs/user-guide/identifiers#names If ObjectMeta is part of a CreateServiceRequest, name must contain fewer than 50 characters.
     */
    name: string;
    /**
     * Defines the space within each name must be unique within a Cloud Run region. In Cloud Run, it must be project ID or number.
     */
    namespace: string;
    /**
     * Not supported by Cloud Run
     */
    ownerReferences: outputs.run.v1.OwnerReferenceResponse[];
    /**
     * Opaque, system-generated value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * URL representing this object.
     */
    selfLink: string;
    /**
     * Unique, system-generated identifier for this resource. More info: https://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid: string;
}

/**
 * This is not supported or used by Cloud Run.
 */
export interface OwnerReferenceResponse {
    /**
     * This is not supported or used by Cloud Run.
     */
    apiVersion: string;
    /**
     * This is not supported or used by Cloud Run.
     */
    blockOwnerDeletion: boolean;
    /**
     * This is not supported or used by Cloud Run.
     */
    controller: boolean;
    /**
     * This is not supported or used by Cloud Run.
     */
    kind: string;
    /**
     * This is not supported or used by Cloud Run.
     */
    name: string;
    /**
     * This is not supported or used by Cloud Run.
     */
    uid: string;
}

/**
 * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
 */
export interface ProbeResponse {
    /**
     * Not supported by Cloud Run.
     */
    exec: outputs.run.v1.ExecActionResponse;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     */
    failureThreshold: number;
    /**
     * GRPCAction specifies an action involving a GRPC port.
     */
    grpc: outputs.run.v1.GRPCActionResponse;
    /**
     * HTTPGet specifies the http request to perform.
     */
    httpGet: outputs.run.v1.HTTPGetActionResponse;
    /**
     * Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    initialDelaySeconds: number;
    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
     */
    periodSeconds: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.
     */
    successThreshold: number;
    /**
     * TCPSocket specifies an action involving a TCP port.
     */
    tcpSocket: outputs.run.v1.TCPSocketActionResponse;
    /**
     * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    timeoutSeconds: number;
}

/**
 * A DNS resource record.
 */
export interface ResourceRecordResponse {
    /**
     * Relative name of the object affected by this record. Only applicable for `CNAME` records. Example: 'www'.
     */
    name: string;
    /**
     * Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
     */
    rrdata: string;
    /**
     * Resource record type. Example: `AAAA`.
     */
    type: string;
}

/**
 * ResourceRequirements describes the compute resource requirements.
 */
export interface ResourceRequirementsResponse {
    /**
     * Only memory and CPU are supported. Limits describes the maximum amount of compute resources allowed. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
     */
    limits: {[key: string]: string};
    /**
     * Only memory and CPU are supported. Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
     */
    requests: {[key: string]: string};
}

/**
 * RevisionSpec holds the desired state of the Revision (from the client).
 */
export interface RevisionSpecResponse {
    /**
     * ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. If not specified, defaults to 80.
     */
    containerConcurrency: number;
    /**
     * Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided. The runtime contract is documented here: https://github.com/knative/specs/blob/main/specs/serving/runtime-contract.md
     */
    containers: outputs.run.v1.ContainerResponse[];
    /**
     * Not supported by Cloud Run.
     */
    enableServiceLinks: boolean;
    /**
     * Not supported by Cloud Run.
     */
    imagePullSecrets: outputs.run.v1.LocalObjectReferenceResponse[];
    /**
     * Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
     */
    serviceAccountName: string;
    /**
     * TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour).
     */
    timeoutSeconds: number;
    volumes: outputs.run.v1.VolumeResponse[];
}

/**
 * RevisionTemplateSpec describes the data a revision should have when created from a template. Based on: https://github.com/kubernetes/api/blob/e771f807/core/v1/types.go#L3179-L3190
 */
export interface RevisionTemplateResponse {
    /**
     * Optional metadata for this Revision, including labels and annotations. Name will be generated by the Configuration. The following annotation keys set properties of the created revision: * `autoscaling.knative.dev/minScale` sets the minimum number of instances. * `autoscaling.knative.dev/maxScale` sets the maximum number of instances. * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
     */
    metadata: outputs.run.v1.ObjectMetaResponse;
    /**
     * RevisionSpec holds the desired state of the Revision (from the client).
     */
    spec: outputs.run.v1.RevisionSpecResponse;
}

/**
 * Not supported by Cloud Run. SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
 */
export interface SecretEnvSourceResponse {
    /**
     * This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
     */
    localObjectReference: outputs.run.v1.LocalObjectReferenceResponse;
    /**
     * The Secret to select from.
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional: boolean;
}

/**
 * SecretKeySelector selects a key of a Secret.
 */
export interface SecretKeySelectorResponse {
    /**
     * A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
     */
    key: string;
    /**
     * This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
     */
    localObjectReference: outputs.run.v1.LocalObjectReferenceResponse;
    /**
     * The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
     */
    name: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional: boolean;
}

/**
 * A volume representing a secret stored in Google Secret Manager. The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
 */
export interface SecretVolumeSourceResponse {
    /**
     * Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode: number;
    /**
     * A list of secret versions to mount in the volume. If no items are specified, the volume will expose a file with the same name as the secret name. The contents of the file will be the data in the latest version of the secret. If items are specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify both a key and a path.
     */
    items: outputs.run.v1.KeyToPathResponse[];
    /**
     * Not supported by Cloud Run.
     */
    optional: boolean;
    /**
     * The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
     */
    secretName: string;
}

/**
 * Not supported by Cloud Run. SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
 */
export interface SecurityContextResponse {
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser: number;
}

/**
 * ServiceSpec holds the desired state of the Route (from the client), which is used to manipulate the underlying Route and Configuration(s).
 */
export interface ServiceSpecResponse {
    /**
     * Holds the latest specification for the Revision to be stamped out.
     */
    template: outputs.run.v1.RevisionTemplateResponse;
    /**
     * Specifies how to distribute traffic over a collection of Knative Revisions and Configurations to the Service's main URL.
     */
    traffic: outputs.run.v1.TrafficTargetResponse[];
}

/**
 * The current state of the Service. Output only.
 */
export interface ServiceStatusResponse {
    /**
     * Similar to url, information on where the service is available on HTTP.
     */
    address: outputs.run.v1.AddressableResponse;
    /**
     * Conditions communicate information about ongoing/complete reconciliation processes that bring the `spec` inline with the observed state of the world. Service-specific conditions include: * `ConfigurationsReady`: `True` when the underlying Configuration is ready. * `RoutesReady`: `True` when the underlying Route is ready. * `Ready`: `True` when all underlying resources are ready.
     */
    conditions: outputs.run.v1.GoogleCloudRunV1ConditionResponse[];
    /**
     * Name of the last revision that was created from this Service's Configuration. It might not be ready yet, for that use LatestReadyRevisionName.
     */
    latestCreatedRevisionName: string;
    /**
     * Name of the latest Revision from this Service's Configuration that has had its `Ready` condition become `True`.
     */
    latestReadyRevisionName: string;
    /**
     * Returns the generation last fully processed by the system. This will only match metadata.generation when reconciliation is complete. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
     */
    observedGeneration: number;
    /**
     * Holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.
     */
    traffic: outputs.run.v1.TrafficTargetResponse[];
    /**
     * URL that will distribute traffic over the provided traffic targets. It generally has the form https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app
     */
    url: string;
}

/**
 * TCPSocketAction describes an action based on opening a socket
 */
export interface TCPSocketActionResponse {
    /**
     * Not supported by Cloud Run.
     */
    host: string;
    /**
     * Port number to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
}

/**
 * TaskSpec is a description of a task.
 */
export interface TaskSpecResponse {
    /**
     * Optional. List of containers belonging to the task. We disallow a number of fields on this Container. Only a single container may be provided.
     */
    containers: outputs.run.v1.ContainerResponse[];
    /**
     * Optional. Number of retries allowed per task, before marking this job failed.
     */
    maxRetries: number;
    /**
     * Optional. Email address of the IAM service account associated with the task of a job execution. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
     */
    serviceAccountName: string;
    /**
     * Optional. Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
     */
    timeoutSeconds: string;
    /**
     * Optional. List of volumes that can be mounted by containers belonging to the task. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes: outputs.run.v1.VolumeResponse[];
}

/**
 * TaskTemplateSpec describes the data a task should have when created from a template.
 */
export interface TaskTemplateSpecResponse {
    /**
     * Optional. Specification of the desired behavior of the task. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     */
    spec: outputs.run.v1.TaskSpecResponse;
}

/**
 * TrafficTarget holds a single entry of the routing table for a Route.
 */
export interface TrafficTargetResponse {
    /**
     * ConfigurationName of a configuration to whose latest revision which will be sent this portion of traffic. When the "status.latestReadyRevisionName" of the referenced configuration changes, traffic will automatically migrate from the prior "latest ready" revision to the new one. This field is never set in Route's status, only its spec. This is mutually exclusive with RevisionName. Cloud Run currently supports a single ConfigurationName.
     */
    configurationName: string;
    /**
     * Optional. LatestRevision may be provided to indicate that the latest ready Revision of the Configuration should be used for this traffic target. When provided LatestRevision must be true if RevisionName is empty; it must be false when RevisionName is non-empty in spec. When shown in status, this indicates that the RevisionName was resolved from a spec's ConfigurationName.
     */
    latestRevision: boolean;
    /**
     * Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.
     */
    percent: number;
    /**
     * RevisionName of a specific revision to which to send this portion of traffic. This is mutually exclusive with ConfigurationName.
     */
    revisionName: string;
    /**
     * Optional. Tag is used to expose a dedicated url for referencing this target exclusively.
     */
    tag: string;
    /**
     * URL displays the URL for accessing tagged traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. https://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)
     */
    url: string;
}

/**
 * VolumeMount describes a mounting of a Volume within a container.
 */
export interface VolumeMountResponse {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * The name of the volume. There must be a corresponding Volume with the same name.
     */
    name: string;
    /**
     * Only true is accepted for Secret Volumes. Defaults to true for Secrets Volumes.
     */
    readOnly: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath: string;
}

/**
 * Volume represents a named volume in a container.
 */
export interface VolumeResponse {
    /**
     * Not supported in Cloud Run.
     */
    configMap: outputs.run.v1.ConfigMapVolumeSourceResponse;
    /**
     * Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
     */
    name: string;
    /**
     * The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secretName.
     */
    secret: outputs.run.v1.SecretVolumeSourceResponse;
}

