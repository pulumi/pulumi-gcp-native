// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Settings for Binary Authorization feature.
 */
export interface GoogleCloudRunV2BinaryAuthorizationResponse {
    /**
     * If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
     */
    breakglassJustification: string;
    /**
     * If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
     */
    useDefault: boolean;
}

/**
 * Represents a specific Cloud SQL instance.
 */
export interface GoogleCloudRunV2CloudSqlInstanceResponse {
    /**
     * The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
     */
    instances: string[];
}

/**
 * Defines a status condition for a resource.
 */
export interface GoogleCloudRunV2ConditionResponse {
    /**
     * A reason for the execution condition.
     */
    executionReason: string;
    /**
     * Last time the condition transitioned from one status to another.
     */
    lastTransitionTime: string;
    /**
     * Human readable message indicating details about the current status.
     */
    message: string;
    /**
     * A common (service-level) reason for this condition.
     */
    reason: string;
    /**
     * A reason for the revision condition.
     */
    revisionReason: string;
    /**
     * How to interpret failures of this condition, one of Error, Warning, Info
     */
    severity: string;
    /**
     * State of the condition.
     */
    state: string;
    /**
     * type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
     */
    type: string;
}

/**
 * ContainerPort represents a network port in a single container.
 */
export interface GoogleCloudRunV2ContainerPortResponse {
    /**
     * Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
     */
    containerPort: number;
    /**
     * If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
     */
    name: string;
}

/**
 * A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
 */
export interface GoogleCloudRunV2ContainerResponse {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    command: string[];
    /**
     * List of environment variables to set in the container.
     */
    env: outputs.run.v2.GoogleCloudRunV2EnvVarResponse[];
    /**
     * URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
     */
    image: string;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    livenessProbe: outputs.run.v2.GoogleCloudRunV2ProbeResponse;
    /**
     * Name of the container specified as a DNS_LABEL.
     */
    name: string;
    /**
     * List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
     */
    ports: outputs.run.v2.GoogleCloudRunV2ContainerPortResponse[];
    /**
     * Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.run.v2.GoogleCloudRunV2ResourceRequirementsResponse;
    /**
     * Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe: outputs.run.v2.GoogleCloudRunV2ProbeResponse;
    /**
     * Volume to mount into the container's filesystem.
     */
    volumeMounts: outputs.run.v2.GoogleCloudRunV2VolumeMountResponse[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
     */
    workingDir: string;
}

/**
 * EnvVar represents an environment variable present in a Container.
 */
export interface GoogleCloudRunV2EnvVarResponse {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
     */
    value: string;
    /**
     * Source for the environment variable's value.
     */
    valueSource: outputs.run.v2.GoogleCloudRunV2EnvVarSourceResponse;
}

/**
 * EnvVarSource represents a source for the value of an EnvVar.
 */
export interface GoogleCloudRunV2EnvVarSourceResponse {
    /**
     * Selects a secret and a specific version from Cloud Secret Manager.
     */
    secretKeyRef: outputs.run.v2.GoogleCloudRunV2SecretKeySelectorResponse;
}

/**
 * Reference to an Execution. Use /Executions.GetExecution with the given name to get full execution including the latest status.
 */
export interface GoogleCloudRunV2ExecutionReferenceResponse {
    /**
     * Creation timestamp of the execution.
     */
    completionTime: string;
    /**
     * Creation timestamp of the execution.
     */
    createTime: string;
    /**
     * Name of the execution.
     */
    name: string;
}

/**
 * ExecutionTemplate describes the data an execution should have when created from a template.
 */
export interface GoogleCloudRunV2ExecutionTemplateResponse {
    /**
     * KRM-style annotations for the resource.
     */
    annotations: {[key: string]: string};
    /**
     * KRM-style labels for the resource.
     */
    labels: {[key: string]: string};
    /**
     * Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
     */
    parallelism: number;
    /**
     * Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    taskCount: number;
    /**
     * Describes the task(s) that will be created when executing an execution.
     */
    template: outputs.run.v2.GoogleCloudRunV2TaskTemplateResponse;
}

/**
 * HTTPGetAction describes an action based on HTTP Get requests.
 */
export interface GoogleCloudRunV2HTTPGetActionResponse {
    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     */
    httpHeaders: outputs.run.v2.GoogleCloudRunV2HTTPHeaderResponse[];
    /**
     * Path to access on the HTTP server. Defaults to '/'.
     */
    path: string;
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 */
export interface GoogleCloudRunV2HTTPHeaderResponse {
    /**
     * The header field name
     */
    name: string;
    /**
     * The header field value
     */
    value: string;
}

/**
 * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
 */
export interface GoogleCloudRunV2ProbeResponse {
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     */
    failureThreshold: number;
    /**
     * HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
     */
    httpGet: outputs.run.v2.GoogleCloudRunV2HTTPGetActionResponse;
    /**
     * Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    initialDelaySeconds: number;
    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
     */
    periodSeconds: number;
    /**
     * TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
     */
    tcpSocket: outputs.run.v2.GoogleCloudRunV2TCPSocketActionResponse;
    /**
     * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    timeoutSeconds: number;
}

/**
 * ResourceRequirements describes the compute resource requirements.
 */
export interface GoogleCloudRunV2ResourceRequirementsResponse {
    /**
     * Determines whether CPU should be throttled or not outside of requests.
     */
    cpuIdle: boolean;
    /**
     * Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
     */
    limits: {[key: string]: string};
}

/**
 * Settings for revision-level scaling settings.
 */
export interface GoogleCloudRunV2RevisionScalingResponse {
    /**
     * Maximum number of serving instances that this resource should have.
     */
    maxInstanceCount: number;
    /**
     * Minimum number of serving instances that this resource should have.
     */
    minInstanceCount: number;
}

/**
 * RevisionTemplate describes the data a revision should have when created from a template.
 */
export interface GoogleCloudRunV2RevisionTemplateResponse {
    /**
     * KRM-style annotations for the resource.
     */
    annotations: {[key: string]: string};
    /**
     * Holds the single container that defines the unit of execution for this Revision.
     */
    containers: outputs.run.v2.GoogleCloudRunV2ContainerResponse[];
    /**
     * A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
     */
    encryptionKey: string;
    /**
     * The sandbox environment to host this Revision.
     */
    executionEnvironment: string;
    /**
     * KRM-style labels for the resource.
     */
    labels: {[key: string]: string};
    /**
     * Sets the maximum number of requests that each serving instance can receive.
     */
    maxInstanceRequestConcurrency: number;
    /**
     * The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
     */
    revision: string;
    /**
     * Scaling settings for this Revision.
     */
    scaling: outputs.run.v2.GoogleCloudRunV2RevisionScalingResponse;
    /**
     * Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
     */
    serviceAccount: string;
    /**
     * Max allowed time for an instance to respond to a request.
     */
    timeout: string;
    /**
     * A list of Volumes to make available to containers.
     */
    volumes: outputs.run.v2.GoogleCloudRunV2VolumeResponse[];
    /**
     * VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
     */
    vpcAccess: outputs.run.v2.GoogleCloudRunV2VpcAccessResponse;
}

/**
 * SecretEnvVarSource represents a source for the value of an EnvVar.
 */
export interface GoogleCloudRunV2SecretKeySelectorResponse {
    /**
     * The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
     */
    secret: string;
    /**
     * The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
     */
    version: string;
}

/**
 * The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
 */
export interface GoogleCloudRunV2SecretVolumeSourceResponse {
    /**
     * Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
     */
    defaultMode: number;
    /**
     * If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
     */
    items: outputs.run.v2.GoogleCloudRunV2VersionToPathResponse[];
    /**
     * The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
     */
    secret: string;
}

/**
 * TCPSocketAction describes an action based on opening a socket
 */
export interface GoogleCloudRunV2TCPSocketActionResponse {
    /**
     * Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to 8080.
     */
    port: number;
}

/**
 * TaskTemplate describes the data a task should have when created from a template.
 */
export interface GoogleCloudRunV2TaskTemplateResponse {
    /**
     * Holds the single container that defines the unit of execution for this task.
     */
    containers: outputs.run.v2.GoogleCloudRunV2ContainerResponse[];
    /**
     * A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
     */
    encryptionKey: string;
    /**
     * The execution environment being used to host this Task.
     */
    executionEnvironment: string;
    /**
     * Number of retries allowed per Task, before marking this Task failed.
     */
    maxRetries: number;
    /**
     * Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
     */
    serviceAccount: string;
    /**
     * Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
     */
    timeout: string;
    /**
     * A list of Volumes to make available to containers.
     */
    volumes: outputs.run.v2.GoogleCloudRunV2VolumeResponse[];
    /**
     * VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
     */
    vpcAccess: outputs.run.v2.GoogleCloudRunV2VpcAccessResponse;
}

/**
 * Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
 */
export interface GoogleCloudRunV2TrafficTargetResponse {
    /**
     * Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
     */
    percent: number;
    /**
     * Revision to which to send this portion of traffic, if traffic allocation is by revision.
     */
    revision: string;
    /**
     * Indicates a string to be part of the URI to exclusively reference this target.
     */
    tag: string;
    /**
     * The allocation type for this traffic target.
     */
    type: string;
}

/**
 * Represents the observed state of a single `TrafficTarget` entry.
 */
export interface GoogleCloudRunV2TrafficTargetStatusResponse {
    /**
     * Specifies percent of the traffic to this Revision.
     */
    percent: number;
    /**
     * Revision to which this traffic is sent.
     */
    revision: string;
    /**
     * Indicates the string used in the URI to exclusively reference this target.
     */
    tag: string;
    /**
     * The allocation type for this traffic target.
     */
    type: string;
    /**
     * Displays the target URI.
     */
    uri: string;
}

/**
 * VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
 */
export interface GoogleCloudRunV2VersionToPathResponse {
    /**
     * Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode: number;
    /**
     * The relative path of the secret in the container.
     */
    path: string;
    /**
     * The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
     */
    version: string;
}

/**
 * VolumeMount describes a mounting of a Volume within a container.
 */
export interface GoogleCloudRunV2VolumeMountResponse {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
     */
    mountPath: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
}

/**
 * Volume represents a named volume in a container.
 */
export interface GoogleCloudRunV2VolumeResponse {
    /**
     * For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
     */
    cloudSqlInstance: outputs.run.v2.GoogleCloudRunV2CloudSqlInstanceResponse;
    /**
     * Volume's name.
     */
    name: string;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
     */
    secret: outputs.run.v2.GoogleCloudRunV2SecretVolumeSourceResponse;
}

/**
 * VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
 */
export interface GoogleCloudRunV2VpcAccessResponse {
    /**
     * VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
     */
    connector: string;
    /**
     * Traffic VPC egress settings.
     */
    egress: string;
}

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface GoogleIamV1AuditConfigResponse {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs: outputs.run.v2.GoogleIamV1AuditLogConfigResponse[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service: string;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface GoogleIamV1AuditLogConfigResponse {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers: string[];
    /**
     * The log type that this config enables.
     */
    logType: string;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface GoogleIamV1BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.run.v2.GoogleTypeExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface GoogleTypeExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

