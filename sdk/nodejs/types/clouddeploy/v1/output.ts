// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Information specifying an Anthos Cluster.
 */
export interface AnthosClusterResponse {
    /**
     * Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.
     */
    membership: string;
}

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface AuditConfigResponse {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs: outputs.clouddeploy.v1.AuditLogConfigResponse[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service: string;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigResponse {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers: string[];
    /**
     * The log type that this config enables.
     */
    logType: string;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.clouddeploy.v1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * Description of an a image to use during Skaffold rendering.
 */
export interface BuildArtifactResponse {
    /**
     * Image name in Skaffold configuration.
     */
    image: string;
    /**
     * Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".
     */
    tag: string;
}

/**
 * Information specifying where to deploy a Cloud Run Service.
 */
export interface CloudRunLocationResponse {
    /**
     * The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.
     */
    location: string;
}

/**
 * CloudRunMetadata contains information from a Cloud Run deployment.
 */
export interface CloudRunMetadataResponse {
    /**
     * The Cloud Run Revision id associated with a `Rollout`.
     */
    revision: string;
    /**
     * The name of the Cloud Run Service that is associated with a `Rollout`. Format is projects/{project}/locations/{location}/services/{service}.
     */
    service: string;
    /**
     * The Cloud Run Service urls that are associated with a `Rollout`.
     */
    serviceUrls: string[];
}

/**
 * Execution using the default Cloud Build pool.
 */
export interface DefaultPoolResponse {
    /**
     * Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
     */
    artifactStorage: string;
    /**
     * Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
     */
    serviceAccount: string;
}

/**
 * A `DeliveryPipeline` resource in the Google Cloud Deploy API. A `DeliveryPipeline` defines a pipeline through which a Skaffold configuration can progress.
 */
export interface DeliveryPipelineResponse {
    /**
     * User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy.
     */
    annotations: {[key: string]: string};
    /**
     * Information around the state of the Delivery Pipeline.
     */
    condition: outputs.clouddeploy.v1.PipelineConditionResponse;
    /**
     * Time at which the pipeline was created.
     */
    createTime: string;
    /**
     * Description of the `DeliveryPipeline`. Max length is 255 characters.
     */
    description: string;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    etag: string;
    /**
     * Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
     */
    labels: {[key: string]: string};
    /**
     * Optional. Name of the `DeliveryPipeline`. Format is projects/{project}/ locations/{location}/deliveryPipelines/a-z{0,62}.
     */
    name: string;
    /**
     * SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
     */
    serialPipeline: outputs.clouddeploy.v1.SerialPipelineResponse;
    /**
     * When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
     */
    suspended: boolean;
    /**
     * Unique identifier of the `DeliveryPipeline`.
     */
    uid: string;
    /**
     * Most recent time at which the pipeline was updated.
     */
    updateTime: string;
}

/**
 * A deploy Job.
 */
export interface DeployJobResponse {
}

/**
 * Deployment job composition.
 */
export interface DeploymentJobsResponse {
    /**
     * The deploy Job. This is the first job run in the phase.
     */
    deployJob: outputs.clouddeploy.v1.JobResponse;
    /**
     * The verify Job. Runs after a deploy if the deploy succeeds.
     */
    verifyJob: outputs.clouddeploy.v1.JobResponse;
}

/**
 * Configuration of the environment to use when calling Skaffold.
 */
export interface ExecutionConfigResponse {
    /**
     * Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
     */
    artifactStorage: string;
    /**
     * Optional. Use default Cloud Build pool.
     */
    defaultPool: outputs.clouddeploy.v1.DefaultPoolResponse;
    /**
     * Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.
     */
    executionTimeout: string;
    /**
     * Optional. Use private Cloud Build pool.
     */
    privatePool: outputs.clouddeploy.v1.PrivatePoolResponse;
    /**
     * Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.
     */
    serviceAccount: string;
    /**
     * Usages when this configuration should be applied.
     */
    usages: string[];
    /**
     * Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.
     */
    workerPool: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * Information specifying a GKE Cluster.
 */
export interface GkeClusterResponse {
    /**
     * Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}.
     */
    cluster: string;
    /**
     * Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
     */
    internalIp: boolean;
}

/**
 * Job represents an operation for a `Rollout`.
 */
export interface JobResponse {
    /**
     * A deploy Job.
     */
    deployJob: outputs.clouddeploy.v1.DeployJobResponse;
    /**
     * The name of the `JobRun` responsible for the most recent invocation of this Job.
     */
    jobRun: string;
    /**
     * The current state of the Job.
     */
    state: string;
    /**
     * A verify Job.
     */
    verifyJob: outputs.clouddeploy.v1.VerifyJobResponse;
}

/**
 * Metadata includes information associated with a `Rollout`.
 */
export interface MetadataResponse {
    /**
     * The name of the Cloud Run Service that is associated with a `Rollout`.
     */
    cloudRun: outputs.clouddeploy.v1.CloudRunMetadataResponse;
}

/**
 * Phase represents a collection of jobs that are logically grouped together for a `Rollout`.
 */
export interface PhaseResponse {
    /**
     * Deployment job composition.
     */
    deploymentJobs: outputs.clouddeploy.v1.DeploymentJobsResponse;
    /**
     * Current state of the Phase.
     */
    state: string;
}

/**
 * PipelineCondition contains all conditions relevant to a Delivery Pipeline.
 */
export interface PipelineConditionResponse {
    /**
     * Details around the Pipeline's overall status.
     */
    pipelineReadyCondition: outputs.clouddeploy.v1.PipelineReadyConditionResponse;
    /**
     * Detalis around targets enumerated in the pipeline.
     */
    targetsPresentCondition: outputs.clouddeploy.v1.TargetsPresentConditionResponse;
}

/**
 * PipelineReadyCondition contains information around the status of the Pipeline.
 */
export interface PipelineReadyConditionResponse {
    /**
     * True if the Pipeline is in a valid state. Otherwise at least one condition in `PipelineCondition` is in an invalid state. Iterate over those conditions and see which condition(s) has status = false to find out what is wrong with the Pipeline.
     */
    status: boolean;
    /**
     * Last time the condition was updated.
     */
    updateTime: string;
}

/**
 * Execution using a private Cloud Build pool.
 */
export interface PrivatePoolResponse {
    /**
     * Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.
     */
    artifactStorage: string;
    /**
     * Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.
     */
    serviceAccount: string;
    /**
     * Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.
     */
    workerPool: string;
}

/**
 * SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
 */
export interface SerialPipelineResponse {
    /**
     * Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.
     */
    stages: outputs.clouddeploy.v1.StageResponse[];
}

/**
 * Stage specifies a location to which to deploy.
 */
export interface StageResponse {
    /**
     * Skaffold profiles to use when rendering the manifest for this stage's `Target`.
     */
    profiles: string[];
    /**
     * Optional. The strategy to use for a `Rollout` to this stage.
     */
    strategy: outputs.clouddeploy.v1.StrategyResponse;
    /**
     * The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.
     */
    targetId: string;
}

/**
 * Standard represents the standard deployment strategy.
 */
export interface StandardResponse {
    /**
     * Whether to verify a deployment.
     */
    verify: boolean;
}

/**
 * Strategy contains deployment strategy information.
 */
export interface StrategyResponse {
    /**
     * Standard deployment strategy executes a single deploy and allows verifying the deployment.
     */
    standard: outputs.clouddeploy.v1.StandardResponse;
}

/**
 * A `Target` resource in the Google Cloud Deploy API. A `Target` defines a location to which a Skaffold configuration can be deployed.
 */
export interface TargetResponse {
    /**
     * Optional. User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
     */
    annotations: {[key: string]: string};
    /**
     * Information specifying an Anthos Cluster.
     */
    anthosCluster: outputs.clouddeploy.v1.AnthosClusterResponse;
    /**
     * Time at which the `Target` was created.
     */
    createTime: string;
    /**
     * Optional. Description of the `Target`. Max length is 255 characters.
     */
    description: string;
    /**
     * Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    etag: string;
    /**
     * Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.
     */
    executionConfigs: outputs.clouddeploy.v1.ExecutionConfigResponse[];
    /**
     * Information specifying a GKE Cluster.
     */
    gke: outputs.clouddeploy.v1.GkeClusterResponse;
    /**
     * Optional. Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
     */
    labels: {[key: string]: string};
    /**
     * Optional. Name of the `Target`. Format is projects/{project}/locations/{location}/targets/a-z{0,62}.
     */
    name: string;
    /**
     * Optional. Whether or not the `Target` requires approval.
     */
    requireApproval: boolean;
    /**
     * Information specifying a Cloud Run deployment target.
     */
    run: outputs.clouddeploy.v1.CloudRunLocationResponse;
    /**
     * Resource id of the `Target`.
     */
    targetId: string;
    /**
     * Unique identifier of the `Target`.
     */
    uid: string;
    /**
     * Most recent time at which the `Target` was updated.
     */
    updateTime: string;
}

/**
 * TargetsPresentCondition contains information on any Targets defined in the Delivery Pipeline that do not actually exist.
 */
export interface TargetsPresentConditionResponse {
    /**
     * The list of Target names that are missing. For example, projects/{project_id}/locations/{location_name}/targets/{target_name}.
     */
    missingTargets: string[];
    /**
     * True if there aren't any missing Targets.
     */
    status: boolean;
    /**
     * Last time the condition was updated.
     */
    updateTime: string;
}

/**
 * A verify Job.
 */
export interface VerifyJobResponse {
}

