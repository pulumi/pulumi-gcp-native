// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface AuditConfigResponse {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs: outputs.networkservices.v1beta1.AuditLogConfigResponse[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service: string;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigResponse {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers: string[];
    /**
     * The log type that this config enables.
     */
    logType: string;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.networkservices.v1beta1.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

/**
 * A definition of a matcher that selects endpoints to which the policies should be applied.
 */
export interface EndpointMatcherResponse {
    /**
     * The matcher is based on node metadata presented by xDS clients.
     */
    metadataLabelMatcher: outputs.networkservices.v1beta1.MetadataLabelMatcherResponse;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

/**
 * The destination to which traffic will be routed.
 */
export interface GrpcRouteDestinationResponse {
    /**
     * The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService.
     */
    serviceName: string;
    /**
     * Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
     */
    weight: number;
}

/**
 * Specification of how client requests are aborted as part of fault injection before being sent to a destination.
 */
export interface GrpcRouteFaultInjectionPolicyAbortResponse {
    /**
     * The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
     */
    httpStatus: number;
    /**
     * The percentage of traffic which will be aborted. The value must be between [0, 100]
     */
    percentage: number;
}

/**
 * Specification of how client requests are delayed as part of fault injection before being sent to a destination.
 */
export interface GrpcRouteFaultInjectionPolicyDelayResponse {
    /**
     * Specify a fixed delay before forwarding the request.
     */
    fixedDelay: string;
    /**
     * The percentage of traffic on which delay will be injected. The value must be between [0, 100]
     */
    percentage: number;
}

/**
 * The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests.
 */
export interface GrpcRouteFaultInjectionPolicyResponse {
    /**
     * The specification for aborting to client requests.
     */
    abort: outputs.networkservices.v1beta1.GrpcRouteFaultInjectionPolicyAbortResponse;
    /**
     * The specification for injecting delay to client requests.
     */
    delay: outputs.networkservices.v1beta1.GrpcRouteFaultInjectionPolicyDelayResponse;
}

/**
 * A match against a collection of headers.
 */
export interface GrpcRouteHeaderMatchResponse {
    /**
     * The key of the header.
     */
    key: string;
    /**
     * Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used.
     */
    type: string;
    /**
     * The value of the header.
     */
    value: string;
}

/**
 * Specifies a match against a method.
 */
export interface GrpcRouteMethodMatchResponse {
    /**
     * Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.
     */
    caseSensitive: boolean;
    /**
     * Name of the method to match against. If unspecified, will match all methods.
     */
    grpcMethod: string;
    /**
     * Name of the service to match against. If unspecified, will match all services.
     */
    grpcService: string;
    /**
     * Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.
     */
    type: string;
}

/**
 * The specifications for retries.
 */
export interface GrpcRouteRetryPolicyResponse {
    /**
     * Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
     */
    numRetries: number;
    /**
     * - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
     */
    retryConditions: string[];
}

/**
 * Specifies how to route matched traffic.
 */
export interface GrpcRouteRouteActionResponse {
    /**
     * Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
     */
    destinations: outputs.networkservices.v1beta1.GrpcRouteDestinationResponse[];
    /**
     * Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
     */
    faultInjectionPolicy: outputs.networkservices.v1beta1.GrpcRouteFaultInjectionPolicyResponse;
    /**
     * Optional. Specifies the retry policy associated with this route.
     */
    retryPolicy: outputs.networkservices.v1beta1.GrpcRouteRetryPolicyResponse;
    /**
     * Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
     */
    timeout: string;
}

/**
 * Criteria for matching traffic. A RouteMatch will be considered to match when all supplied fields match.
 */
export interface GrpcRouteRouteMatchResponse {
    /**
     * Optional. Specifies a collection of headers to match.
     */
    headers: outputs.networkservices.v1beta1.GrpcRouteHeaderMatchResponse[];
    /**
     * Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.
     */
    method: outputs.networkservices.v1beta1.GrpcRouteMethodMatchResponse;
}

/**
 * Describes how to route traffic.
 */
export interface GrpcRouteRouteRuleResponse {
    /**
     * A detailed rule defining how to route traffic. This field is required.
     */
    action: outputs.networkservices.v1beta1.GrpcRouteRouteActionResponse;
    /**
     * Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic.
     */
    matches: outputs.networkservices.v1beta1.GrpcRouteRouteMatchResponse[];
}

/**
 * The Specification for allowing client side cross-origin requests.
 */
export interface HttpRouteCorsPolicyResponse {
    /**
     * In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.
     */
    allowCredentials: boolean;
    /**
     * Specifies the content for Access-Control-Allow-Headers header.
     */
    allowHeaders: string[];
    /**
     * Specifies the content for Access-Control-Allow-Methods header.
     */
    allowMethods: string[];
    /**
     * Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.
     */
    allowOriginRegexes: string[];
    /**
     * Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.
     */
    allowOrigins: string[];
    /**
     * If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
     */
    disabled: boolean;
    /**
     * Specifies the content for Access-Control-Expose-Headers header.
     */
    exposeHeaders: string[];
    /**
     * Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
     */
    maxAge: string;
}

/**
 * Specifications of a destination to which the request should be routed to.
 */
export interface HttpRouteDestinationResponse {
    /**
     * The URL of a BackendService to route traffic to.
     */
    serviceName: string;
    /**
     * Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
     */
    weight: number;
}

/**
 * Specification of how client requests are aborted as part of fault injection before being sent to a destination.
 */
export interface HttpRouteFaultInjectionPolicyAbortResponse {
    /**
     * The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
     */
    httpStatus: number;
    /**
     * The percentage of traffic which will be aborted. The value must be between [0, 100]
     */
    percentage: number;
}

/**
 * Specification of how client requests are delayed as part of fault injection before being sent to a destination.
 */
export interface HttpRouteFaultInjectionPolicyDelayResponse {
    /**
     * Specify a fixed delay before forwarding the request.
     */
    fixedDelay: string;
    /**
     * The percentage of traffic on which delay will be injected. The value must be between [0, 100]
     */
    percentage: number;
}

/**
 * The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.
 */
export interface HttpRouteFaultInjectionPolicyResponse {
    /**
     * The specification for aborting to client requests.
     */
    abort: outputs.networkservices.v1beta1.HttpRouteFaultInjectionPolicyAbortResponse;
    /**
     * The specification for injecting delay to client requests.
     */
    delay: outputs.networkservices.v1beta1.HttpRouteFaultInjectionPolicyDelayResponse;
}

/**
 * Represents an integer value range.
 */
export interface HttpRouteHeaderMatchIntegerRangeResponse {
    /**
     * End of the range (exclusive)
     */
    end: number;
    /**
     * Start of the range (inclusive)
     */
    start: number;
}

/**
 * Specifies how to select a route rule based on HTTP request headers.
 */
export interface HttpRouteHeaderMatchResponse {
    /**
     * The value of the header should match exactly the content of exact_match.
     */
    exactMatch: string;
    /**
     * The name of the HTTP header to match against.
     */
    header: string;
    /**
     * If specified, the match result will be inverted before checking. Default value is set to false.
     */
    invertMatch: boolean;
    /**
     * The value of the header must start with the contents of prefix_match.
     */
    prefixMatch: string;
    /**
     * A header with header_name must exist. The match takes place whether or not the header has a value.
     */
    presentMatch: boolean;
    /**
     * If specified, the rule will match if the request header value is within the range.
     */
    rangeMatch: outputs.networkservices.v1beta1.HttpRouteHeaderMatchIntegerRangeResponse;
    /**
     * The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
     */
    regexMatch: string;
    /**
     * The value of the header must end with the contents of suffix_match.
     */
    suffixMatch: string;
}

/**
 * The specification for modifying HTTP header in HTTP request and HTTP response.
 */
export interface HttpRouteHeaderModifierResponse {
    /**
     * Add the headers with given map where key is the name of the header, value is the value of the header.
     */
    add: {[key: string]: string};
    /**
     * Remove headers (matching by header names) specified in the list.
     */
    remove: string[];
    /**
     * Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
     */
    set: {[key: string]: string};
}

/**
 * Specifications to match a query parameter in the request.
 */
export interface HttpRouteQueryParameterMatchResponse {
    /**
     * The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.
     */
    exactMatch: string;
    /**
     * Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.
     */
    presentMatch: boolean;
    /**
     * The name of the query parameter to match.
     */
    queryParameter: string;
    /**
     * The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.
     */
    regexMatch: string;
}

/**
 * The specification for redirecting traffic.
 */
export interface HttpRouteRedirectResponse {
    /**
     * The host that will be used in the redirect response instead of the one that was supplied in the request.
     */
    hostRedirect: string;
    /**
     * If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
     */
    httpsRedirect: boolean;
    /**
     * The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
     */
    pathRedirect: string;
    /**
     * The port that will be used in the redirected request instead of the one that was supplied in the request.
     */
    portRedirect: number;
    /**
     * Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
     */
    prefixRewrite: string;
    /**
     * The HTTP Status code to use for the redirect.
     */
    responseCode: string;
    /**
     * if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
     */
    stripQuery: boolean;
}

/**
 * Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
 */
export interface HttpRouteRequestMirrorPolicyResponse {
    /**
     * The destination the requests will be mirrored to. The weight of the destination will be ignored.
     */
    destination: outputs.networkservices.v1beta1.HttpRouteDestinationResponse;
}

/**
 * The specifications for retries.
 */
export interface HttpRouteRetryPolicyResponse {
    /**
     * Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
     */
    numRetries: number;
    /**
     * Specifies a non-zero timeout per retry attempt.
     */
    perTryTimeout: string;
    /**
     * Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
     */
    retryConditions: string[];
}

/**
 * The specifications for routing traffic and applying associated policies.
 */
export interface HttpRouteRouteActionResponse {
    /**
     * The specification for allowing client side cross-origin requests.
     */
    corsPolicy: outputs.networkservices.v1beta1.HttpRouteCorsPolicyResponse;
    /**
     * The destination to which traffic should be forwarded.
     */
    destinations: outputs.networkservices.v1beta1.HttpRouteDestinationResponse[];
    /**
     * The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
     */
    faultInjectionPolicy: outputs.networkservices.v1beta1.HttpRouteFaultInjectionPolicyResponse;
    /**
     * If set, the request is directed as configured by this field.
     */
    redirect: outputs.networkservices.v1beta1.HttpRouteRedirectResponse;
    /**
     * The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
     */
    requestHeaderModifier: outputs.networkservices.v1beta1.HttpRouteHeaderModifierResponse;
    /**
     * Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
     */
    requestMirrorPolicy: outputs.networkservices.v1beta1.HttpRouteRequestMirrorPolicyResponse;
    /**
     * The specification for modifying the headers of a response prior to sending the response back to the client.
     */
    responseHeaderModifier: outputs.networkservices.v1beta1.HttpRouteHeaderModifierResponse;
    /**
     * Specifies the retry policy associated with this route.
     */
    retryPolicy: outputs.networkservices.v1beta1.HttpRouteRetryPolicyResponse;
    /**
     * Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
     */
    timeout: string;
    /**
     * The specification for rewrite URL before forwarding requests to the destination.
     */
    urlRewrite: outputs.networkservices.v1beta1.HttpRouteURLRewriteResponse;
}

/**
 * RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
 */
export interface HttpRouteRouteMatchResponse {
    /**
     * The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
     */
    fullPathMatch: string;
    /**
     * Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
     */
    headers: outputs.networkservices.v1beta1.HttpRouteHeaderMatchResponse[];
    /**
     * Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
     */
    ignoreCase: boolean;
    /**
     * The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
     */
    prefixMatch: string;
    /**
     * Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
     */
    queryParameters: outputs.networkservices.v1beta1.HttpRouteQueryParameterMatchResponse[];
    /**
     * The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
     */
    regexMatch: string;
}

/**
 * Specifies how to match traffic and how to route traffic when traffic is matched.
 */
export interface HttpRouteRouteRuleResponse {
    /**
     * The detailed rule defining how to route matched traffic.
     */
    action: outputs.networkservices.v1beta1.HttpRouteRouteActionResponse;
    /**
     * A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
     */
    matches: outputs.networkservices.v1beta1.HttpRouteRouteMatchResponse[];
}

/**
 * The specification for modifying the URL of the request, prior to forwarding the request to the destination.
 */
export interface HttpRouteURLRewriteResponse {
    /**
     * Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
     */
    hostRewrite: string;
    /**
     * Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
     */
    pathPrefixRewrite: string;
}

/**
 * The matcher that is based on node metadata presented by xDS clients.
 */
export interface MetadataLabelMatcherResponse {
    /**
     * Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
     */
    metadataLabelMatchCriteria: string;
    /**
     * The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
     */
    metadataLabels: outputs.networkservices.v1beta1.MetadataLabelsResponse[];
}

/**
 * Defines a name-pair value for a single label.
 */
export interface MetadataLabelsResponse {
    /**
     * Label name presented as key in xDS Node Metadata.
     */
    labelName: string;
    /**
     * Label value presented as value corresponding to the above key, in xDS Node Metadata.
     */
    labelValue: string;
}

/**
 * The specifications for routing traffic and applying associated policies.
 */
export interface TcpRouteRouteActionResponse {
    /**
     * Optional. The destination services to which traffic should be forwarded. At least one destination service is required.
     */
    destinations: outputs.networkservices.v1beta1.TcpRouteRouteDestinationResponse[];
    /**
     * Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false.
     */
    originalDestination: boolean;
}

/**
 * Describe the destination for traffic to be routed to.
 */
export interface TcpRouteRouteDestinationResponse {
    /**
     * The URL of a BackendService to route traffic to.
     */
    serviceName: string;
    /**
     * Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
     */
    weight: number;
}

/**
 * RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
 */
export interface TcpRouteRouteMatchResponse {
    /**
     * Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
     */
    address: string;
    /**
     * Specifies the destination port to match against.
     */
    port: string;
}

/**
 * Specifies how to match traffic and how to route traffic when traffic is matched.
 */
export interface TcpRouteRouteRuleResponse {
    /**
     * The detailed rule defining how to route matched traffic.
     */
    action: outputs.networkservices.v1beta1.TcpRouteRouteActionResponse;
    /**
     * Optional. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
     */
    matches: outputs.networkservices.v1beta1.TcpRouteRouteMatchResponse[];
}

/**
 * The specifications for routing traffic and applying associated policies.
 */
export interface TlsRouteRouteActionResponse {
    /**
     * The destination services to which traffic should be forwarded. At least one destination service is required.
     */
    destinations: outputs.networkservices.v1beta1.TlsRouteRouteDestinationResponse[];
}

/**
 * Describe the destination for traffic to be routed to.
 */
export interface TlsRouteRouteDestinationResponse {
    /**
     * The URL of a BackendService to route traffic to.
     */
    serviceName: string;
    /**
     * Optional. Specifies the proportion of requests forwareded to the backend referenced by the service_name field. This is computed as: weight/Sum(weights in destinations) Weights in all destinations does not need to sum up to 100.
     */
    weight: number;
}

/**
 * RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "AND"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
 */
export interface TlsRouteRouteMatchResponse {
    /**
     * Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: "http/1.1", "h2". At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
     */
    alpn: string[];
    /**
     * Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
     */
    sniHost: string[];
}

/**
 * Specifies how to match traffic and how to route traffic when traffic is matched.
 */
export interface TlsRouteRouteRuleResponse {
    /**
     * The detailed rule defining how to route matched traffic.
     */
    action: outputs.networkservices.v1beta1.TlsRouteRouteActionResponse;
    /**
     * RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
     */
    matches: outputs.networkservices.v1beta1.TlsRouteRouteMatchResponse[];
}

/**
 * Specification of a port-based selector.
 */
export interface TrafficPortSelectorResponse {
    /**
     * Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
     */
    ports: string[];
}

