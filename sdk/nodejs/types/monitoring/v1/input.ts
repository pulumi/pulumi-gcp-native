// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Describes how to combine multiple time series to provide a different view of the data. Aggregation of time series is done in two steps. First, each time series in the set is aligned to the same time interval boundaries, then the set of time series is optionally reduced in number.Alignment consists of applying the per_series_aligner operation to each time series after its data has been divided into regular alignment_period time intervals. This process takes all of the data points in an alignment period, applies a mathematical transformation such as averaging, minimum, maximum, delta, etc., and converts them into a single data point per period.Reduction is when the aligned and transformed time series can optionally be combined, reducing the number of time series through similar mathematical transformations. Reduction involves applying a cross_series_reducer to all the time series, optionally sorting the time series into subsets with group_by_fields, and applying the reducer to each subset.The raw time series data can contain a huge amount of information from multiple sources. Alignment and reduction transforms this mass of data into a more manageable and representative collection of data, for example "the 95% latency across the average of all tasks in a cluster". This representative data can be more easily graphed and comprehended, and the individual time series data is still available for later drilldown. For more details, see Filtering and aggregation (https://cloud.google.com/monitoring/api/v3/aggregation).
 */
export interface AggregationArgs {
    /**
     * The alignment_period specifies a time interval, in seconds, that is used to divide the data in all the time series into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.The value must be at least 60 seconds. If a per-series aligner other than ALIGN_NONE is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner ALIGN_NONE is specified, then this field is ignored.The maximum value of the alignment_period is 2 years, or 104 weeks.
     */
    alignmentPeriod?: pulumi.Input<string>;
    /**
     * The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.Not all reducer operations can be applied to all time series. The valid choices depend on the metric_kind and the value_type of the original time series. Reduction can yield a time series with a different metric_kind or value_type than the input time series.Time series data must first be aligned (see per_series_aligner) in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified, and must not be ALIGN_NONE. An alignment_period must also be specified; otherwise, an error is returned.
     */
    crossSeriesReducer?: pulumi.Input<enums.monitoring.v1.AggregationCrossSeriesReducer>;
    /**
     * The set of fields to preserve when cross_series_reducer is specified. The group_by_fields determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The cross_series_reducer is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains resource.type. Fields not specified in group_by_fields are aggregated away. If group_by_fields is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If cross_series_reducer is not defined, this field is ignored.
     */
    groupByFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An Aligner describes how to bring the data points in a single time series into temporal alignment. Except for ALIGN_NONE, all alignments cause all the data points in an alignment_period to be mathematically grouped together, resulting in a single data point for each alignment_period with end timestamp at the end of the period.Not all alignment operations may be applied to all time series. The valid choices depend on the metric_kind and value_type of the original time series. Alignment can change the metric_kind or the value_type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified and not equal to ALIGN_NONE and alignment_period must be specified; otherwise, an error is returned.
     */
    perSeriesAligner?: pulumi.Input<enums.monitoring.v1.AggregationPerSeriesAligner>;
}

/**
 * A chart that displays alert policy data.
 */
export interface AlertChartArgs {
    /**
     * The resource name of the alert policy. The format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID] 
     */
    name: pulumi.Input<string>;
}

/**
 * A chart axis.
 */
export interface AxisArgs {
    /**
     * The label of the axis.
     */
    label?: pulumi.Input<string>;
    /**
     * The axis scale. By default, a linear scale is used.
     */
    scale?: pulumi.Input<enums.monitoring.v1.AxisScale>;
}

/**
 * Options to control visual rendering of a chart.
 */
export interface ChartOptionsArgs {
    /**
     * The chart mode.
     */
    mode?: pulumi.Input<enums.monitoring.v1.ChartOptionsMode>;
}

/**
 * A widget that groups the other widgets. All widgets that are within the area spanned by the grouping widget are considered member widgets.
 */
export interface CollapsibleGroupArgs {
    /**
     * The collapsed state of the widget on first page load.
     */
    collapsed?: pulumi.Input<boolean>;
}

/**
 * Defines the layout properties and content for a column.
 */
export interface ColumnArgs {
    /**
     * The relative weight of this column. The column weight is used to adjust the width of columns on the screen (relative to peers). Greater the weight, greater the width of the column on the screen. If omitted, a value of 1 is used while rendering.
     */
    weight?: pulumi.Input<string>;
    /**
     * The display widgets arranged vertically in this column.
     */
    widgets?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.WidgetArgs>[]>;
}

/**
 * A simplified layout that divides the available space into vertical columns and arranges a set of widgets vertically in each column.
 */
export interface ColumnLayoutArgs {
    /**
     * The columns of content to display.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ColumnArgs>[]>;
}

/**
 * A filter to reduce the amount of data charted in relevant widgets.
 */
export interface DashboardFilterArgs {
    /**
     * The specified filter type
     */
    filterType?: pulumi.Input<enums.monitoring.v1.DashboardFilterFilterType>;
    /**
     * The key for the label
     */
    labelKey: pulumi.Input<string>;
    /**
     * A variable-length string value.
     */
    stringValue?: pulumi.Input<string>;
    /**
     * The placeholder text that can be referenced in a filter string or MQL query. If omitted, the dashboard filter will be applied to all relevant widgets in the dashboard.
     */
    templateVariable?: pulumi.Input<string>;
}

/**
 * Groups a time series query definition with charting options.
 */
export interface DataSetArgs {
    /**
     * A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value.
     */
    legendTemplate?: pulumi.Input<string>;
    /**
     * Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
     */
    minAlignmentPeriod?: pulumi.Input<string>;
    /**
     * How this data should be plotted on the chart.
     */
    plotType?: pulumi.Input<enums.monitoring.v1.DataSetPlotType>;
    /**
     * Optional. The target axis to use for plotting the metric.
     */
    targetAxis?: pulumi.Input<enums.monitoring.v1.DataSetTargetAxis>;
    /**
     * Fields for querying time series data from the Stackdriver metrics API.
     */
    timeSeriesQuery: pulumi.Input<inputs.monitoring.v1.TimeSeriesQueryArgs>;
}

/**
 * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 
 */
export interface EmptyArgs {
}

/**
 * A gauge chart shows where the current value sits within a pre-defined range. The upper and lower bounds should define the possible range of values for the scorecard's query (inclusive).
 */
export interface GaugeViewArgs {
    /**
     * The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.
     */
    lowerBound?: pulumi.Input<number>;
    /**
     * The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.
     */
    upperBound?: pulumi.Input<number>;
}

/**
 * A basic layout divides the available space into vertical columns of equal width and arranges a list of widgets using a row-first strategy.
 */
export interface GridLayoutArgs {
    /**
     * The number of columns into which the view's width is divided. If omitted or set to zero, a system default will be used while rendering.
     */
    columns?: pulumi.Input<string>;
    /**
     * The informational elements that are arranged into the columns row-first.
     */
    widgets?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.WidgetArgs>[]>;
}

/**
 * A widget that displays a stream of log.
 */
export interface LogsPanelArgs {
    /**
     * A filter that chooses which log entries to return. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.
     */
    filter?: pulumi.Input<string>;
    /**
     * The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.
     */
    resourceNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * A mosaic layout divides the available space into a grid of blocks, and overlays the grid with tiles. Unlike GridLayout, tiles may span multiple grid blocks and can be placed at arbitrary locations in the grid.
 */
export interface MosaicLayoutArgs {
    /**
     * The number of columns in the mosaic grid. The number of columns must be between 1 and 12, inclusive.
     */
    columns?: pulumi.Input<number>;
    /**
     * The tiles to display.
     */
    tiles?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.TileArgs>[]>;
}

/**
 * Describes a ranking-based time series filter. Each input time series is ranked with an aligner. The filter will allow up to num_time_series time series to pass through it, selecting them based on the relative ranking.For example, if ranking_method is METHOD_MEAN,direction is BOTTOM, and num_time_series is 3, then the 3 times series with the lowest mean values will pass through the filter.
 */
export interface PickTimeSeriesFilterArgs {
    /**
     * How to use the ranking to select time series that pass through the filter.
     */
    direction?: pulumi.Input<enums.monitoring.v1.PickTimeSeriesFilterDirection>;
    /**
     * How many time series to allow to pass through the filter.
     */
    numTimeSeries?: pulumi.Input<number>;
    /**
     * ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
     */
    rankingMethod?: pulumi.Input<enums.monitoring.v1.PickTimeSeriesFilterRankingMethod>;
}

/**
 * Describes a query to build the numerator or denominator of a TimeSeriesFilterRatio.
 */
export interface RatioPartArgs {
    /**
     * By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.
     */
    aggregation?: pulumi.Input<inputs.monitoring.v1.AggregationArgs>;
    /**
     * The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
     */
    filter: pulumi.Input<string>;
}

/**
 * Defines the layout properties and content for a row.
 */
export interface RowArgs {
    /**
     * The relative weight of this row. The row weight is used to adjust the height of rows on the screen (relative to peers). Greater the weight, greater the height of the row on the screen. If omitted, a value of 1 is used while rendering.
     */
    weight?: pulumi.Input<string>;
    /**
     * The display widgets arranged horizontally in this row.
     */
    widgets?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.WidgetArgs>[]>;
}

/**
 * A simplified layout that divides the available space into rows and arranges a set of widgets horizontally in each row.
 */
export interface RowLayoutArgs {
    /**
     * The rows of content to display.
     */
    rows?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.RowArgs>[]>;
}

/**
 * A widget showing the latest value of a metric, and how this value relates to one or more thresholds.
 */
export interface ScorecardArgs {
    /**
     * Will cause the scorecard to show a gauge chart.
     */
    gaugeView?: pulumi.Input<inputs.monitoring.v1.GaugeViewArgs>;
    /**
     * Will cause the scorecard to show a spark chart.
     */
    sparkChartView?: pulumi.Input<inputs.monitoring.v1.SparkChartViewArgs>;
    /**
     * The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)As an example, consider a scorecard with the following four thresholds: { value: 90, category: 'DANGER', trigger: 'ABOVE', }, { value: 70, category: 'WARNING', trigger: 'ABOVE', }, { value: 10, category: 'DANGER', trigger: 'BELOW', }, { value: 20, category: 'WARNING', trigger: 'BELOW', }Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.
     */
    thresholds?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ThresholdArgs>[]>;
    /**
     * Fields for querying time series data from the Stackdriver metrics API.
     */
    timeSeriesQuery: pulumi.Input<inputs.monitoring.v1.TimeSeriesQueryArgs>;
}

/**
 * A sparkChart is a small chart suitable for inclusion in a table-cell or inline in text. This message contains the configuration for a sparkChart to show up on a Scorecard, showing recent trends of the scorecard's timeseries.
 */
export interface SparkChartViewArgs {
    /**
     * The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.
     */
    minAlignmentPeriod?: pulumi.Input<string>;
    /**
     * The type of sparkchart to show in this chartView.
     */
    sparkChartType: pulumi.Input<enums.monitoring.v1.SparkChartViewSparkChartType>;
}

/**
 * A filter that ranks streams based on their statistical relation to other streams in a request. Note: This field is deprecated and completely ignored by the API.
 */
export interface StatisticalTimeSeriesFilterArgs {
    /**
     * How many time series to output.
     */
    numTimeSeries?: pulumi.Input<number>;
    /**
     * rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series.
     */
    rankingMethod?: pulumi.Input<enums.monitoring.v1.StatisticalTimeSeriesFilterRankingMethod>;
}

/**
 * Groups a time series query definition with table options.
 */
export interface TableDataSetArgs {
    /**
     * Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
     */
    minAlignmentPeriod?: pulumi.Input<string>;
    /**
     * Optional. Table display options for configuring how the table is rendered.
     */
    tableDisplayOptions?: pulumi.Input<inputs.monitoring.v1.TableDisplayOptionsArgs>;
    /**
     * Optional. A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value i.e. "${resource.labels.project_id}."
     */
    tableTemplate?: pulumi.Input<string>;
    /**
     * Fields for querying time series data from the Stackdriver metrics API.
     */
    timeSeriesQuery: pulumi.Input<inputs.monitoring.v1.TimeSeriesQueryArgs>;
}

/**
 * Table display options that can be reused.
 */
export interface TableDisplayOptionsArgs {
    /**
     * Optional. This field is unused and has been replaced by TimeSeriesTable.column_settings
     */
    shownColumns?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * A widget that displays textual content.
 */
export interface TextArgs {
    /**
     * The text content to be displayed.
     */
    content?: pulumi.Input<string>;
    /**
     * How the text content is formatted.
     */
    format?: pulumi.Input<enums.monitoring.v1.TextFormat>;
}

/**
 * Defines a threshold for categorizing time series values.
 */
export interface ThresholdArgs {
    /**
     * The state color for this threshold. Color is not allowed in a XyChart.
     */
    color?: pulumi.Input<enums.monitoring.v1.ThresholdColor>;
    /**
     * The direction for the current threshold. Direction is not allowed in a XyChart.
     */
    direction?: pulumi.Input<enums.monitoring.v1.ThresholdDirection>;
    /**
     * A label for the threshold.
     */
    label?: pulumi.Input<string>;
    /**
     * The target axis to use for plotting the threshold. Target axis is not allowed in a Scorecard.
     */
    targetAxis?: pulumi.Input<enums.monitoring.v1.ThresholdTargetAxis>;
    /**
     * The value of the threshold. The value should be defined in the native scale of the metric.
     */
    value?: pulumi.Input<number>;
}

/**
 * A single tile in the mosaic. The placement and size of the tile are configurable.
 */
export interface TileArgs {
    /**
     * The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.
     */
    height?: pulumi.Input<number>;
    /**
     * The informational widget contained in the tile. For example an XyChart.
     */
    widget?: pulumi.Input<inputs.monitoring.v1.WidgetArgs>;
    /**
     * The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.
     */
    width?: pulumi.Input<number>;
    /**
     * The zero-indexed position of the tile in grid blocks relative to the left edge of the grid. Tiles must be contained within the specified number of columns. x_pos cannot be negative.
     */
    xPos?: pulumi.Input<number>;
    /**
     * The zero-indexed position of the tile in grid blocks relative to the top edge of the grid. y_pos cannot be negative.
     */
    yPos?: pulumi.Input<number>;
}

/**
 * A filter that defines a subset of time series data that is displayed in a widget. Time series data is fetched using the ListTimeSeries (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) method.
 */
export interface TimeSeriesFilterArgs {
    /**
     * By default, the raw time series data is returned. Use this field to combine multiple time series for different views of the data.
     */
    aggregation?: pulumi.Input<inputs.monitoring.v1.AggregationArgs>;
    /**
     * The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.
     */
    filter: pulumi.Input<string>;
    /**
     * Ranking based time series filter.
     */
    pickTimeSeriesFilter?: pulumi.Input<inputs.monitoring.v1.PickTimeSeriesFilterArgs>;
    /**
     * Apply a second aggregation after aggregation is applied.
     */
    secondaryAggregation?: pulumi.Input<inputs.monitoring.v1.AggregationArgs>;
    /**
     * Statistics based time series filter. Note: This field is deprecated and completely ignored by the API.
     *
     * @deprecated Statistics based time series filter. Note: This field is deprecated and completely ignored by the API.
     */
    statisticalTimeSeriesFilter?: pulumi.Input<inputs.monitoring.v1.StatisticalTimeSeriesFilterArgs>;
}

/**
 * A pair of time series filters that define a ratio computation. The output time series is the pair-wise division of each aligned element from the numerator and denominator time series.
 */
export interface TimeSeriesFilterRatioArgs {
    /**
     * The denominator of the ratio.
     */
    denominator?: pulumi.Input<inputs.monitoring.v1.RatioPartArgs>;
    /**
     * The numerator of the ratio.
     */
    numerator?: pulumi.Input<inputs.monitoring.v1.RatioPartArgs>;
    /**
     * Ranking based time series filter.
     */
    pickTimeSeriesFilter?: pulumi.Input<inputs.monitoring.v1.PickTimeSeriesFilterArgs>;
    /**
     * Apply a second aggregation after the ratio is computed.
     */
    secondaryAggregation?: pulumi.Input<inputs.monitoring.v1.AggregationArgs>;
    /**
     * Statistics based time series filter. Note: This field is deprecated and completely ignored by the API.
     *
     * @deprecated Statistics based time series filter. Note: This field is deprecated and completely ignored by the API.
     */
    statisticalTimeSeriesFilter?: pulumi.Input<inputs.monitoring.v1.StatisticalTimeSeriesFilterArgs>;
}

/**
 * TimeSeriesQuery collects the set of supported methods for querying time series data from the Stackdriver metrics API.
 */
export interface TimeSeriesQueryArgs {
    /**
     * A query used to fetch time series with PromQL.
     */
    prometheusQuery?: pulumi.Input<string>;
    /**
     * Filter parameters to fetch time series.
     */
    timeSeriesFilter?: pulumi.Input<inputs.monitoring.v1.TimeSeriesFilterArgs>;
    /**
     * Parameters to fetch a ratio between two time series filters.
     */
    timeSeriesFilterRatio?: pulumi.Input<inputs.monitoring.v1.TimeSeriesFilterRatioArgs>;
    /**
     * A query used to fetch time series with MQL.
     */
    timeSeriesQueryLanguage?: pulumi.Input<string>;
    /**
     * The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the unit (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in MetricDescriptor.
     */
    unitOverride?: pulumi.Input<string>;
}

/**
 * A table that displays time series data.
 */
export interface TimeSeriesTableArgs {
    /**
     * The data displayed in this table.
     */
    dataSets: pulumi.Input<pulumi.Input<inputs.monitoring.v1.TableDataSetArgs>[]>;
    /**
     * Optional. Store rendering strategy
     */
    metricVisualization?: pulumi.Input<enums.monitoring.v1.TimeSeriesTableMetricVisualization>;
}

/**
 * Widget contains a single dashboard component and configuration of how to present the component in the dashboard.
 */
export interface WidgetArgs {
    /**
     * A chart of alert policy data.
     */
    alertChart?: pulumi.Input<inputs.monitoring.v1.AlertChartArgs>;
    /**
     * A blank space.
     */
    blank?: pulumi.Input<inputs.monitoring.v1.EmptyArgs>;
    /**
     * A widget that groups the other widgets. All widgets that are within the area spanned by the grouping widget are considered member widgets.
     */
    collapsibleGroup?: pulumi.Input<inputs.monitoring.v1.CollapsibleGroupArgs>;
    /**
     * A widget that shows a stream of logs.
     */
    logsPanel?: pulumi.Input<inputs.monitoring.v1.LogsPanelArgs>;
    /**
     * A scorecard summarizing time series data.
     */
    scorecard?: pulumi.Input<inputs.monitoring.v1.ScorecardArgs>;
    /**
     * A raw string or markdown displaying textual content.
     */
    text?: pulumi.Input<inputs.monitoring.v1.TextArgs>;
    /**
     * A widget that displays time series data in a tabular format.
     */
    timeSeriesTable?: pulumi.Input<inputs.monitoring.v1.TimeSeriesTableArgs>;
    /**
     * Optional. The title of the widget.
     */
    title?: pulumi.Input<string>;
    /**
     * A chart of time series data.
     */
    xyChart?: pulumi.Input<inputs.monitoring.v1.XyChartArgs>;
}

/**
 * A chart that displays data on a 2D (X and Y axes) plane.
 */
export interface XyChartArgs {
    /**
     * Display options for the chart.
     */
    chartOptions?: pulumi.Input<inputs.monitoring.v1.ChartOptionsArgs>;
    /**
     * The data displayed in this chart.
     */
    dataSets: pulumi.Input<pulumi.Input<inputs.monitoring.v1.DataSetArgs>[]>;
    /**
     * Threshold lines drawn horizontally across the chart.
     */
    thresholds?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ThresholdArgs>[]>;
    /**
     * The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
     */
    timeshiftDuration?: pulumi.Input<string>;
    /**
     * The properties applied to the X axis.
     */
    xAxis?: pulumi.Input<inputs.monitoring.v1.AxisArgs>;
    /**
     * The properties applied to the Y2 axis.
     */
    y2Axis?: pulumi.Input<inputs.monitoring.v1.AxisArgs>;
    /**
     * The properties applied to the Y axis.
     */
    yAxis?: pulumi.Input<inputs.monitoring.v1.AxisArgs>;
}

