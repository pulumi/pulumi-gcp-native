// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Describes how to combine multiple time series to provide a different view of the data. Aggregation of time series is done in two steps. First, each time series in the set is aligned to the same time interval boundaries, then the set of time series is optionally reduced in number.Alignment consists of applying the per_series_aligner operation to each time series after its data has been divided into regular alignment_period time intervals. This process takes all of the data points in an alignment period, applies a mathematical transformation such as averaging, minimum, maximum, delta, etc., and converts them into a single data point per period.Reduction is when the aligned and transformed time series can optionally be combined, reducing the number of time series through similar mathematical transformations. Reduction involves applying a cross_series_reducer to all the time series, optionally sorting the time series into subsets with group_by_fields, and applying the reducer to each subset.The raw time series data can contain a huge amount of information from multiple sources. Alignment and reduction transforms this mass of data into a more manageable and representative collection of data, for example "the 95% latency across the average of all tasks in a cluster". This representative data can be more easily graphed and comprehended, and the individual time series data is still available for later drilldown. For more details, see Filtering and aggregation (https://cloud.google.com/monitoring/api/v3/aggregation).
 */
export interface AggregationArgs {
    /**
     * The alignment_period specifies a time interval, in seconds, that is used to divide the data in all the time series into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.The value must be at least 60 seconds. If a per-series aligner other than ALIGN_NONE is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner ALIGN_NONE is specified, then this field is ignored.The maximum value of the alignment_period is 104 weeks (2 years) for charts, and 90,000 seconds (25 hours) for alerting policies.
     */
    alignmentPeriod?: pulumi.Input<string>;
    /**
     * The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.Not all reducer operations can be applied to all time series. The valid choices depend on the metric_kind and the value_type of the original time series. Reduction can yield a time series with a different metric_kind or value_type than the input time series.Time series data must first be aligned (see per_series_aligner) in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified, and must not be ALIGN_NONE. An alignment_period must also be specified; otherwise, an error is returned.
     */
    crossSeriesReducer?: pulumi.Input<enums.monitoring.v3.AggregationCrossSeriesReducer>;
    /**
     * The set of fields to preserve when cross_series_reducer is specified. The group_by_fields determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The cross_series_reducer is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains resource.type. Fields not specified in group_by_fields are aggregated away. If group_by_fields is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If cross_series_reducer is not defined, this field is ignored.
     */
    groupByFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An Aligner describes how to bring the data points in a single time series into temporal alignment. Except for ALIGN_NONE, all alignments cause all the data points in an alignment_period to be mathematically grouped together, resulting in a single data point for each alignment_period with end timestamp at the end of the period.Not all alignment operations may be applied to all time series. The valid choices depend on the metric_kind and value_type of the original time series. Alignment can change the metric_kind or the value_type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified and not equal to ALIGN_NONE and alignment_period must be specified; otherwise, an error is returned.
     */
    perSeriesAligner?: pulumi.Input<enums.monitoring.v3.AggregationPerSeriesAligner>;
}

/**
 * Control over how the notification channels in notification_channels are notified when this alert fires.
 */
export interface AlertStrategyArgs {
    /**
     * If an alert policy that was active has no data for this long, any open incidents will close
     */
    autoClose?: pulumi.Input<string>;
    /**
     * Required for alert policies with a LogMatch condition.This limit is not implemented for alert policies that are not log-based.
     */
    notificationRateLimit?: pulumi.Input<inputs.monitoring.v3.NotificationRateLimitArgs>;
}

/**
 * App Engine service. Learn more at https://cloud.google.com/appengine.
 */
export interface AppEngineArgs {
    /**
     * The ID of the App Engine module underlying this service. Corresponds to the module_id resource label in the gae_app monitored resource (https://cloud.google.com/monitoring/api/resources#tag_gae_app).
     */
    moduleId?: pulumi.Input<string>;
}

/**
 * Future parameters for the availability SLI.
 */
export interface AvailabilityCriteriaArgs {
}

/**
 * The authentication parameters to provide to the specified resource or URL that requires a username and password. Currently, only Basic HTTP authentication (https://tools.ietf.org/html/rfc7617) is supported in Uptime checks.
 */
export interface BasicAuthenticationArgs {
    /**
     * The password to use when authenticating with the HTTP server.
     */
    password?: pulumi.Input<string>;
    /**
     * The username to use when authenticating with the HTTP server.
     */
    username?: pulumi.Input<string>;
}

/**
 * A well-known service type, defined by its service type and service labels. Documentation and examples here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
 */
export interface BasicServiceArgs {
    /**
     * Labels that specify the resource that emits the monitoring data which is used for SLO reporting of this Service. Documentation and valid values for given service types here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
     */
    serviceLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of service that this basic service defines, e.g. APP_ENGINE service type. Documentation and valid values here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
     */
    serviceType?: pulumi.Input<string>;
}

/**
 * An SLI measuring performance on a well-known service type. Performance will be computed on the basis of pre-defined metrics. The type of the service_resource determines the metrics to use and the service_resource.labels and metric_labels are used to construct a monitoring filter to filter that metric down to just the data relevant to this service.
 */
export interface BasicSliArgs {
    /**
     * Good service is defined to be the count of requests made to this service that return successfully.
     */
    availability?: pulumi.Input<inputs.monitoring.v3.AvailabilityCriteriaArgs>;
    /**
     * Good service is defined to be the count of requests made to this service that are fast enough with respect to latency.threshold.
     */
    latency?: pulumi.Input<inputs.monitoring.v3.LatencyCriteriaArgs>;
    /**
     * OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don't support breaking down by location, setting this field will result in an error.
     */
    location?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service's methods. For service types that don't support breaking down by method, setting this field will result in an error.
     */
    method?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don't support breaking down by version, setting this field will result in an error.
     */
    version?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints.
 */
export interface CloudEndpointsArgs {
    /**
     * The name of the Cloud Endpoints service underlying this service. Corresponds to the service resource label in the api monitored resource (https://cloud.google.com/monitoring/api/resources#tag_api).
     */
    service?: pulumi.Input<string>;
}

/**
 * Cloud Run service. Learn more at https://cloud.google.com/run.
 */
export interface CloudRunArgs {
    /**
     * The location the service is run. Corresponds to the location resource label in the cloud_run_revision monitored resource (https://cloud.google.com/monitoring/api/resources#tag_cloud_run_revision).
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the Cloud Run service. Corresponds to the service_name resource label in the cloud_run_revision monitored resource (https://cloud.google.com/monitoring/api/resources#tag_cloud_run_revision).
     */
    serviceName?: pulumi.Input<string>;
}

/**
 * Istio service scoped to a single Kubernetes cluster. Learn more at https://istio.io. Clusters running OSS Istio will have their services ingested as this type.
 */
export interface ClusterIstioArgs {
    /**
     * The name of the Kubernetes cluster in which this Istio service is defined. Corresponds to the cluster_name resource label in k8s_cluster resources.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The location of the Kubernetes cluster in which this Istio service is defined. Corresponds to the location resource label in k8s_cluster resources.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the Istio service underlying this service. Corresponds to the destination_service_name metric label in Istio metrics.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The namespace of the Istio service underlying this service. Corresponds to the destination_service_namespace metric label in Istio metrics.
     */
    serviceNamespace?: pulumi.Input<string>;
}

/**
 * A condition is a true/false test that determines when an alerting policy should open an incident. If a condition evaluates to true, it signifies that something is wrong.
 */
export interface ConditionArgs {
    /**
     * A condition that checks that a time series continues to receive new data points.
     */
    conditionAbsent?: pulumi.Input<inputs.monitoring.v3.MetricAbsenceArgs>;
    /**
     * A condition that checks for log messages matching given constraints. If set, no other conditions can be present.
     */
    conditionMatchedLog?: pulumi.Input<inputs.monitoring.v3.LogMatchArgs>;
    /**
     * A condition that uses the Monitoring Query Language to define alerts.
     */
    conditionMonitoringQueryLanguage?: pulumi.Input<inputs.monitoring.v3.MonitoringQueryLanguageConditionArgs>;
    /**
     * A condition that compares a time series against a threshold.
     */
    conditionThreshold?: pulumi.Input<inputs.monitoring.v3.MetricThresholdArgs>;
    /**
     * A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple conditions in the same policy.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Cloud Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Cloud Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.
     */
    name?: pulumi.Input<string>;
}

/**
 * Optional. Used to perform content matching. This allows matching based on substrings and regular expressions, together with their negations. Only the first 4 MB of an HTTP or HTTPS check's response (and the first 1 MB of a TCP check's response) are examined for purposes of content matching.
 */
export interface ContentMatcherArgs {
    /**
     * String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.
     */
    content?: pulumi.Input<string>;
    /**
     * Matcher information for MATCHES_JSON_PATH and NOT_MATCHES_JSON_PATH
     */
    jsonPathMatcher?: pulumi.Input<inputs.monitoring.v3.JsonPathMatcherArgs>;
    /**
     * The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
     */
    matcher?: pulumi.Input<enums.monitoring.v3.ContentMatcherMatcher>;
}

/**
 * Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.
 */
export interface CustomArgs {
}

/**
 * A DistributionCut defines a TimeSeries and thresholds used for measuring good service and total service. The TimeSeries must have ValueType = DISTRIBUTION and MetricKind = DELTA or MetricKind = CUMULATIVE. The computed good_service will be the estimated count of values in the Distribution that fall within the specified min and max.
 */
export interface DistributionCutArgs {
    /**
     * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries aggregating values. Must have ValueType = DISTRIBUTION and MetricKind = DELTA or MetricKind = CUMULATIVE.
     */
    distributionFilter?: pulumi.Input<string>;
    /**
     * Range of values considered "good." For a one-sided range, set one bound to an infinite value.
     */
    range?: pulumi.Input<inputs.monitoring.v3.GoogleMonitoringV3RangeArgs>;
}

/**
 * A content string and a MIME type that describes the content string's format.
 */
export interface DocumentationArgs {
    /**
     * The text of the documentation, interpreted according to mime_type. The content may not exceed 8,192 Unicode characters and may not exceed more than 10,240 bytes when encoded in UTF-8 format, whichever is smaller. This text can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables).
     */
    content?: pulumi.Input<string>;
    /**
     * The format of the content field. Presently, only the value "text/markdown" is supported. See Markdown (https://en.wikipedia.org/wiki/Markdown) for more information.
     */
    mimeType?: pulumi.Input<string>;
}

/**
 * GKE Namespace. The field names correspond to the resource metadata labels on monitored resources that fall under a namespace (for example, k8s_container or k8s_pod).
 */
export interface GkeNamespaceArgs {
    /**
     * The name of the parent cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The location of the parent cluster. This may be a zone or region.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of this namespace.
     */
    namespaceName?: pulumi.Input<string>;
}

/**
 * GKE Service. The "service" here represents a Kubernetes service object (https://kubernetes.io/docs/concepts/services-networking/service). The field names correspond to the resource labels on k8s_service monitored resources (https://cloud.google.com/monitoring/api/resources#tag_k8s_service).
 */
export interface GkeServiceArgs {
    /**
     * The name of the parent cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The location of the parent cluster. This may be a zone or region.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the parent namespace.
     */
    namespaceName?: pulumi.Input<string>;
    /**
     * The name of this service.
     */
    serviceName?: pulumi.Input<string>;
}

/**
 * A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod).
 */
export interface GkeWorkloadArgs {
    /**
     * The name of the parent cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The location of the parent cluster. This may be a zone or region.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the parent namespace.
     */
    namespaceName?: pulumi.Input<string>;
    /**
     * The name of this workload.
     */
    topLevelControllerName?: pulumi.Input<string>;
    /**
     * The type of this workload (for example, "Deployment" or "DaemonSet")
     */
    topLevelControllerType?: pulumi.Input<string>;
}

/**
 * Range of numerical values within min and max.
 */
export interface GoogleMonitoringV3RangeArgs {
    /**
     * Range maximum.
     */
    max?: pulumi.Input<number>;
    /**
     * Range minimum.
     */
    min?: pulumi.Input<number>;
}

/**
 * Information involved in an HTTP/HTTPS Uptime check request.
 */
export interface HttpCheckArgs {
    /**
     * If present, the check will only pass if the HTTP response status code is in this set of status codes. If empty, the HTTP status code will only pass if the HTTP status code is 200-299.
     */
    acceptedResponseStatusCodes?: pulumi.Input<pulumi.Input<inputs.monitoring.v3.ResponseStatusCodeArgs>[]>;
    /**
     * The authentication information. Optional when creating an HTTP check; defaults to empty.
     */
    authInfo?: pulumi.Input<inputs.monitoring.v3.BasicAuthenticationArgs>;
    /**
     * The request body associated with the HTTP POST request. If content_type is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the request_method is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte.Note: If client libraries aren't used (which performs the conversion automatically) base64 encode your body data since the field is of bytes type.
     */
    body?: pulumi.Input<string>;
    /**
     * The content type header to use for the check. The following configurations result in errors: 1. Content type is specified in both the headers field and the content_type field. 2. Request method is GET and content_type is not TYPE_UNSPECIFIED 3. Request method is POST and content_type is TYPE_UNSPECIFIED. 4. Request method is POST and a "Content-Type" header is provided via headers field. The content_type field should be used instead.
     */
    contentType?: pulumi.Input<enums.monitoring.v3.HttpCheckContentType>;
    /**
     * The list of headers to send as part of the Uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described at https://www.w3.org/Protocols/rfc2616/rfc2616.txt (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to true then the headers will be obscured with ******.
     */
    maskHeaders?: pulumi.Input<boolean>;
    /**
     * Optional (defaults to "/"). The path to the page against which to run the check. Will be combined with the host (specified within the monitored_resource) and port to construct the full URL. If the provided path does not begin with "/", a "/" will be prepended automatically.
     */
    path?: pulumi.Input<string>;
    /**
     * Contains information needed to add pings to an HTTP check.
     */
    pingConfig?: pulumi.Input<inputs.monitoring.v3.PingConfigArgs>;
    /**
     * Optional (defaults to 80 when use_ssl is false, and 443 when use_ssl is true). The TCP port on the HTTP server against which to run the check. Will be combined with host (specified within the monitored_resource) and path to construct the full URL.
     */
    port?: pulumi.Input<number>;
    /**
     * The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
     */
    requestMethod?: pulumi.Input<enums.monitoring.v3.HttpCheckRequestMethod>;
    /**
     * If true, use HTTPS instead of HTTP to run the check.
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitored_resource is set to uptime_url. If use_ssl is false, setting validate_ssl to true has no effect.
     */
    validateSsl?: pulumi.Input<boolean>;
}

/**
 * An internal checker allows Uptime checks to run on private/internal GCP resources.
 */
export interface InternalCheckerArgs {
    /**
     * The checker's human-readable name. The display name should be unique within a Cloud Monitoring Metrics Scope in order to make it easier to identify; however, uniqueness is not enforced.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The GCP zone the Uptime check should egress from. Only respected for internal Uptime checks, where internal_network is specified.
     */
    gcpZone?: pulumi.Input<string>;
    /**
     * A unique resource name for this InternalChecker. The format is: projects/[PROJECT_ID_OR_NUMBER]/internalCheckers/[INTERNAL_CHECKER_ID] [PROJECT_ID_OR_NUMBER] is the Cloud Monitoring Metrics Scope project for the Uptime check config associated with the internal checker.
     */
    name?: pulumi.Input<string>;
    /**
     * The GCP VPC network (https://cloud.google.com/vpc/docs/vpc) where the internal resource lives (ex: "default").
     */
    network?: pulumi.Input<string>;
    /**
     * The GCP project ID where the internal checker lives. Not necessary the same as the Metrics Scope project.
     */
    peerProjectId?: pulumi.Input<string>;
    /**
     * The current operational state of the internal checker.
     */
    state?: pulumi.Input<enums.monitoring.v3.InternalCheckerState>;
}

/**
 * Canonical service scoped to an Istio mesh. Anthos clusters running ASM >= 1.6.8 will have their services ingested as this type.
 */
export interface IstioCanonicalServiceArgs {
    /**
     * The name of the canonical service underlying this service. Corresponds to the destination_canonical_service_name metric label in label in Istio metrics (https://cloud.google.com/monitoring/api/metrics_istio).
     */
    canonicalService?: pulumi.Input<string>;
    /**
     * The namespace of the canonical service underlying this service. Corresponds to the destination_canonical_service_namespace metric label in Istio metrics (https://cloud.google.com/monitoring/api/metrics_istio).
     */
    canonicalServiceNamespace?: pulumi.Input<string>;
    /**
     * Identifier for the Istio mesh in which this canonical service is defined. Corresponds to the mesh_uid metric label in Istio metrics (https://cloud.google.com/monitoring/api/metrics_istio).
     */
    meshUid?: pulumi.Input<string>;
}

/**
 * Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
 */
export interface JsonPathMatcherArgs {
    /**
     * The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)
     */
    jsonMatcher?: pulumi.Input<enums.monitoring.v3.JsonPathMatcherJsonMatcher>;
    /**
     * JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
     */
    jsonPath?: pulumi.Input<string>;
}

/**
 * A description of a label.
 */
export interface LabelDescriptorArgs {
    /**
     * A human-readable description for the label.
     */
    description?: pulumi.Input<string>;
    /**
     * The key for this label. The key must meet the following criteria: Does not exceed 100 characters. Matches the following regular expression: [a-zA-Z][a-zA-Z0-9_]* The first character must be an upper- or lower-case letter. The remaining characters must be letters, digits, or underscores.
     */
    key?: pulumi.Input<string>;
    /**
     * The type of data that can be assigned to the label.
     */
    valueType?: pulumi.Input<enums.monitoring.v3.LabelDescriptorValueType>;
}

/**
 * Parameters for a latency threshold SLI.
 */
export interface LatencyCriteriaArgs {
    /**
     * Good service is defined to be the count of requests made to this service that return in no more than threshold.
     */
    threshold?: pulumi.Input<string>;
}

/**
 * A condition type that checks whether a log message in the scoping project (https://cloud.google.com/monitoring/api/v3#project_name) satisfies the given filter. Logs from other projects in the metrics scope are not evaluated.
 */
export interface LogMatchArgs {
    /**
     * A logs-based filter. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries) for how this filter should be constructed.
     */
    filter: pulumi.Input<string>;
    /**
     * Optional. A map from a label key to an extractor expression, which is used to extract the value for this label key. Each entry in this map is a specification for how data should be extracted from log entries that match filter. Each combination of extracted values is treated as a separate rule for the purposes of triggering notifications. Label keys and corresponding values can be used in notifications generated by this condition.Please see the documentation on logs-based metric valueExtractors (https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.metrics#LogMetric.FIELDS.value_extractor) for syntax and examples.
     */
    labelExtractors?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * Istio service scoped to an Istio mesh. Anthos clusters running ASM < 1.6.8 will have their services ingested as this type.
 */
export interface MeshIstioArgs {
    /**
     * Identifier for the mesh in which this Istio service is defined. Corresponds to the mesh_uid metric label in Istio metrics.
     */
    meshUid?: pulumi.Input<string>;
    /**
     * The name of the Istio service underlying this service. Corresponds to the destination_service_name metric label in Istio metrics.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The namespace of the Istio service underlying this service. Corresponds to the destination_service_namespace metric label in Istio metrics.
     */
    serviceNamespace?: pulumi.Input<string>;
}

/**
 * A condition type that checks that monitored resources are reporting data. The configuration defines a metric and a set of monitored resources. The predicate is considered in violation when a time series for the specified metric of a monitored resource does not include any data in the specified duration.
 */
export interface MetricAbsenceArgs {
    /**
     * Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
     */
    aggregations?: pulumi.Input<pulumi.Input<inputs.monitoring.v3.AggregationArgs>[]>;
    /**
     * The amount of time that a time series must fail to report new data to be considered failing. The minimum value of this field is 120 seconds. Larger values that are a multiple of a minute--for example, 240 or 300 seconds--are supported. If an invalid value is given, an error will be returned. The Duration.nanos field is ignored.
     */
    duration?: pulumi.Input<string>;
    /**
     * A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
     */
    filter: pulumi.Input<string>;
    /**
     * The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations.
     */
    trigger?: pulumi.Input<inputs.monitoring.v3.TriggerArgs>;
}

/**
 * Additional annotations that can be used to guide the usage of a metric.
 */
export interface MetricDescriptorMetadataArgs {
    /**
     * The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
     */
    ingestDelay?: pulumi.Input<string>;
    /**
     * Deprecated. Must use the MetricDescriptor.launch_stage instead.
     *
     * @deprecated Deprecated. Must use the MetricDescriptor.launch_stage instead.
     */
    launchStage?: pulumi.Input<enums.monitoring.v3.MetricDescriptorMetadataLaunchStage>;
    /**
     * The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
     */
    samplePeriod?: pulumi.Input<string>;
}

/**
 * A MetricRange is used when each window is good when the value x of a single TimeSeries satisfies range.min <= x <= range.max. The provided TimeSeries must have ValueType = INT64 or ValueType = DOUBLE and MetricKind = GAUGE.
 */
export interface MetricRangeArgs {
    /**
     * Range of values considered "good." For a one-sided range, set one bound to an infinite value.
     */
    range?: pulumi.Input<inputs.monitoring.v3.GoogleMonitoringV3RangeArgs>;
    /**
     * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying the TimeSeries to use for evaluating window quality.
     */
    timeSeries?: pulumi.Input<string>;
}

/**
 * A condition type that compares a collection of time series against a threshold.
 */
export interface MetricThresholdArgs {
    /**
     * Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
     */
    aggregations?: pulumi.Input<pulumi.Input<inputs.monitoring.v3.AggregationArgs>[]>;
    /**
     * The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
     */
    comparison?: pulumi.Input<enums.monitoring.v3.MetricThresholdComparison>;
    /**
     * Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.
     */
    denominatorAggregations?: pulumi.Input<pulumi.Input<inputs.monitoring.v3.AggregationArgs>[]>;
    /**
     * A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.
     */
    denominatorFilter?: pulumi.Input<string>;
    /**
     * The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
     */
    duration?: pulumi.Input<string>;
    /**
     * A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
     */
    evaluationMissingData?: pulumi.Input<enums.monitoring.v3.MetricThresholdEvaluationMissingData>;
    /**
     * A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
     */
    filter: pulumi.Input<string>;
    /**
     * A value against which to compare the time series.
     */
    thresholdValue?: pulumi.Input<number>;
    /**
     * The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations, or by the ratio, if denominator_filter and denominator_aggregations are specified.
     */
    trigger?: pulumi.Input<inputs.monitoring.v3.TriggerArgs>;
}

/**
 * An object representing a resource that can be used for monitoring, logging, billing, or other purposes. Examples include virtual machine instances, databases, and storage devices such as disks. The type field identifies a MonitoredResourceDescriptor object that describes the resource's schema. Information in the labels field identifies the actual resource and its attributes according to the schema. For example, a particular Compute Engine VM instance could be represented by the following object, because the MonitoredResourceDescriptor for "gce_instance" has labels "project_id", "instance_id" and "zone": { "type": "gce_instance", "labels": { "project_id": "my-project", "instance_id": "12345678901234", "zone": "us-central1-a" }} 
 */
export interface MonitoredResourceArgs {
    /**
     * Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels "project_id", "instance_id", and "zone".
     */
    labels: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance. For a list of types, see Monitoring resource types (https://cloud.google.com/monitoring/api/resources) and Logging resource types (https://cloud.google.com/logging/docs/api/v2/resource-list).
     */
    type: pulumi.Input<string>;
}

/**
 * A condition type that allows alert policies to be defined using Monitoring Query Language (https://cloud.google.com/monitoring/mql).
 */
export interface MonitoringQueryLanguageConditionArgs {
    /**
     * The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
     */
    duration?: pulumi.Input<string>;
    /**
     * A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
     */
    evaluationMissingData?: pulumi.Input<enums.monitoring.v3.MonitoringQueryLanguageConditionEvaluationMissingData>;
    /**
     * Monitoring Query Language (https://cloud.google.com/monitoring/mql) query that outputs a boolean stream.
     */
    query?: pulumi.Input<string>;
    /**
     * The number/percent of time series for which the comparison must hold in order for the condition to trigger. If unspecified, then the condition will trigger if the comparison is true for any of the time series that have been identified by filter and aggregations, or by the ratio, if denominator_filter and denominator_aggregations are specified.
     */
    trigger?: pulumi.Input<inputs.monitoring.v3.TriggerArgs>;
}

/**
 * Describes a change made to a configuration.
 */
export interface MutationRecordArgs {
    /**
     * When the change occurred.
     */
    mutateTime?: pulumi.Input<string>;
    /**
     * The email address of the user making the change.
     */
    mutatedBy?: pulumi.Input<string>;
}

/**
 * Control over the rate of notifications sent to this alert policy's notification channels.
 */
export interface NotificationRateLimitArgs {
    /**
     * Not more than one notification per period.
     */
    period?: pulumi.Input<string>;
}

/**
 * A PerformanceThreshold is used when each window is good when that window has a sufficiently high performance.
 */
export interface PerformanceThresholdArgs {
    /**
     * BasicSli to evaluate to judge window quality.
     */
    basicSliPerformance?: pulumi.Input<inputs.monitoring.v3.BasicSliArgs>;
    /**
     * RequestBasedSli to evaluate to judge window quality.
     */
    performance?: pulumi.Input<inputs.monitoring.v3.RequestBasedSliArgs>;
    /**
     * If window performance >= threshold, the window is counted as good.
     */
    threshold?: pulumi.Input<number>;
}

/**
 * Information involved in sending ICMP pings alongside public HTTP/TCP checks. For HTTP, the pings are performed for each part of the redirect chain.
 */
export interface PingConfigArgs {
    /**
     * Number of ICMP pings. A maximum of 3 ICMP pings is currently supported.
     */
    pingsCount?: pulumi.Input<number>;
}

/**
 * Service Level Indicators for which atomic units of service are counted directly.
 */
export interface RequestBasedSliArgs {
    /**
     * distribution_cut is used when good_service is a count of values aggregated in a Distribution that fall into a good range. The total_service is the total count of all values aggregated in the Distribution.
     */
    distributionCut?: pulumi.Input<inputs.monitoring.v3.DistributionCutArgs>;
    /**
     * good_total_ratio is used when the ratio of good_service to total_service is computed from two TimeSeries.
     */
    goodTotalRatio?: pulumi.Input<inputs.monitoring.v3.TimeSeriesRatioArgs>;
}

/**
 * The resource submessage for group checks. It can be used instead of a monitored resource, when multiple resources are being monitored.
 */
export interface ResourceGroupArgs {
    /**
     * The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].
     */
    groupId?: pulumi.Input<string>;
    /**
     * The resource type of the group members.
     */
    resourceType?: pulumi.Input<enums.monitoring.v3.ResourceGroupResourceType>;
}

/**
 * A status to accept. Either a status code class like "2xx", or an integer status code like "200".
 */
export interface ResponseStatusCodeArgs {
    /**
     * A class of status codes to accept.
     */
    statusClass?: pulumi.Input<enums.monitoring.v3.ResponseStatusCodeStatusClass>;
    /**
     * A status code to accept.
     */
    statusValue?: pulumi.Input<number>;
}

/**
 * A Service-Level Indicator (SLI) describes the "performance" of a service. For some services, the SLI is well-defined. In such cases, the SLI can be described easily by referencing the well-known SLI and providing the needed parameters. Alternatively, a "custom" SLI can be defined with a query to the underlying metric store. An SLI is defined to be good_service / total_service over any queried time interval. The value of performance always falls into the range 0 <= performance <= 1. A custom SLI describes how to compute this ratio, whether this is by dividing values from a pair of time series, cutting a Distribution into good and bad counts, or counting time windows in which the service complies with a criterion. For separation of concerns, a single Service-Level Indicator measures performance for only one aspect of service quality, such as fraction of successful queries or fast-enough queries.
 */
export interface ServiceLevelIndicatorArgs {
    /**
     * Basic SLI on a well-known service type.
     */
    basicSli?: pulumi.Input<inputs.monitoring.v3.BasicSliArgs>;
    /**
     * Request-based SLIs
     */
    requestBased?: pulumi.Input<inputs.monitoring.v3.RequestBasedSliArgs>;
    /**
     * Windows-based SLIs
     */
    windowsBased?: pulumi.Input<inputs.monitoring.v3.WindowsBasedSliArgs>;
}

/**
 * The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
 */
export interface StatusArgs {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code?: pulumi.Input<number>;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message?: pulumi.Input<string>;
}

/**
 * Information required for a TCP Uptime check request.
 */
export interface TcpCheckArgs {
    /**
     * Contains information needed to add pings to a TCP check.
     */
    pingConfig?: pulumi.Input<inputs.monitoring.v3.PingConfigArgs>;
    /**
     * The TCP port on the server against which to run the check. Will be combined with host (specified within the monitored_resource) to construct the full URL. Required.
     */
    port?: pulumi.Input<number>;
}

/**
 * Configuration for how to query telemetry on a Service.
 */
export interface TelemetryArgs {
    /**
     * The full name of the resource that defines this service. Formatted as described in https://cloud.google.com/apis/design/resource_names.
     */
    resourceName?: pulumi.Input<string>;
}

/**
 * A TimeSeriesRatio specifies two TimeSeries to use for computing the good_service / total_service ratio. The specified TimeSeries must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE. The TimeSeriesRatio must specify exactly two of good, bad, and total, and the relationship good_service + bad_service = total_service will be assumed.
 */
export interface TimeSeriesRatioArgs {
    /**
     * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying bad service, either demanded service that was not provided or demanded service that was of inadequate quality. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
     */
    badServiceFilter?: pulumi.Input<string>;
    /**
     * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying good service provided. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
     */
    goodServiceFilter?: pulumi.Input<string>;
    /**
     * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying total demanded service. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
     */
    totalServiceFilter?: pulumi.Input<string>;
}

/**
 * Specifies how many time series must fail a predicate to trigger a condition. If not specified, then a {count: 1} trigger is used.
 */
export interface TriggerArgs {
    /**
     * The absolute number of time series that must fail the predicate for the condition to be triggered.
     */
    count?: pulumi.Input<number>;
    /**
     * The percentage of time series that must fail the predicate for the condition to be triggered.
     */
    percent?: pulumi.Input<number>;
}

/**
 * A WindowsBasedSli defines good_service as the count of time windows for which the provided service was of good quality. Criteria for determining if service was good are embedded in the window_criterion.
 */
export interface WindowsBasedSliArgs {
    /**
     * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries with ValueType = BOOL. The window is good if any true values appear in the window.
     */
    goodBadMetricFilter?: pulumi.Input<string>;
    /**
     * A window is good if its performance is high enough.
     */
    goodTotalRatioThreshold?: pulumi.Input<inputs.monitoring.v3.PerformanceThresholdArgs>;
    /**
     * A window is good if the metric's value is in a good range, averaged across returned streams.
     */
    metricMeanInRange?: pulumi.Input<inputs.monitoring.v3.MetricRangeArgs>;
    /**
     * A window is good if the metric's value is in a good range, summed across returned streams.
     */
    metricSumInRange?: pulumi.Input<inputs.monitoring.v3.MetricRangeArgs>;
    /**
     * Duration over which window quality is evaluated. Must be an integer fraction of a day and at least 60s.
     */
    windowPeriod?: pulumi.Input<string>;
}

