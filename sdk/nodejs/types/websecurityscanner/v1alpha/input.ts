// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Scan authentication configuration.
 */
export interface AuthenticationArgs {
    /**
     * Authentication using a custom account.
     */
    customAccount?: pulumi.Input<inputs.websecurityscanner.v1alpha.CustomAccountArgs>;
    /**
     * Authentication using a Google account.
     */
    googleAccount?: pulumi.Input<inputs.websecurityscanner.v1alpha.GoogleAccountArgs>;
}

/**
 * Describes authentication configuration that uses a custom account.
 */
export interface CustomAccountArgs {
    /**
     * The login form URL of the website.
     */
    loginUrl: pulumi.Input<string>;
    /**
     * Input only. The password of the custom account. The credential is stored encrypted and not returned in any response nor included in audit logs.
     */
    password: pulumi.Input<string>;
    /**
     * The user name of the custom account.
     */
    username: pulumi.Input<string>;
}

/**
 * Describes authentication configuration that uses a Google account.
 */
export interface GoogleAccountArgs {
    /**
     * Input only. The password of the Google account. The credential is stored encrypted and not returned in any response nor included in audit logs.
     */
    password: pulumi.Input<string>;
    /**
     * The user name of the Google account.
     */
    username: pulumi.Input<string>;
}

/**
 * A ScanRun is a output-only resource representing an actual run of the scan.
 */
export interface ScanRunArgs {
    /**
     * The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The execution state of the ScanRun.
     */
    executionState?: pulumi.Input<enums.websecurityscanner.v1alpha.ScanRunExecutionState>;
    /**
     * Whether the scan run has found any vulnerabilities.
     */
    hasVulnerabilities?: pulumi.Input<boolean>;
    /**
     * The resource name of the ScanRun. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. The ScanRun IDs are generated by the system.
     */
    name?: pulumi.Input<string>;
    /**
     * The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished, the value is 100.
     */
    progressPercent?: pulumi.Input<number>;
    /**
     * The result state of the ScanRun. This field is only available after the execution state reaches "FINISHED".
     */
    resultState?: pulumi.Input<enums.websecurityscanner.v1alpha.ScanRunResultState>;
    /**
     * The time at which the ScanRun started.
     */
    startTime?: pulumi.Input<string>;
    /**
     * The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now.
     */
    urlsCrawledCount?: pulumi.Input<string>;
    /**
     * The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
     */
    urlsTestedCount?: pulumi.Input<string>;
}

/**
 * Scan schedule configuration.
 */
export interface ScheduleArgs {
    /**
     * The duration of time between executions in days.
     */
    intervalDurationDays: pulumi.Input<number>;
    /**
     * A timestamp indicates when the next run will be scheduled. The value is refreshed by the server after each run. If unspecified, it will default to current server time, which means the scan will be scheduled to start immediately.
     */
    scheduleTime?: pulumi.Input<string>;
}

