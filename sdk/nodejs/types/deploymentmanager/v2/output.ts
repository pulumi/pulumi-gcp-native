// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
 */
export interface AuditConfigResponse {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs: outputs.deploymentmanager.v2.AuditLogConfigResponse[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service: string;
}

/**
 * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
 */
export interface AuditLogConfigResponse {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers: string[];
    /**
     * The log type that this config enables.
     */
    logType: string;
}

/**
 * Associates `members`, or principals, with a `role`.
 */
export interface BindingResponse {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition: outputs.deploymentmanager.v2.ExprResponse;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. 
     */
    members: string[];
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role: string;
}

export interface ConfigFileResponse {
    /**
     * The contents of the file.
     */
    content: string;
}

/**
 * Label object for Deployments
 */
export interface DeploymentLabelEntryResponse {
    /**
     * Key of the label
     */
    key: string;
    /**
     * Value of the label
     */
    value: string;
}

/**
 * Label object for DeploymentUpdate
 */
export interface DeploymentUpdateLabelEntryResponse {
    /**
     * Key of the label
     */
    key: string;
    /**
     * Value of the label
     */
    value: string;
}

export interface DeploymentUpdateResponse {
    /**
     * An optional user-provided description of the deployment after the current update has been applied.
     */
    description: string;
    /**
     * Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
     */
    labels: outputs.deploymentmanager.v2.DeploymentUpdateLabelEntryResponse[];
    /**
     * URL of the manifest representing the update configuration of this deployment.
     */
    manifest: string;
}

/**
 * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
 */
export interface ExprResponse {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description: string;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression: string;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location: string;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title: string;
}

export interface ImportFileResponse {
    /**
     * The contents of the file.
     */
    content: string;
    /**
     * The name of the file.
     */
    name: string;
}

export interface OperationErrorErrorsItemResponse {
    /**
     * The error type identifier for this error.
     */
    code: string;
    /**
     * Indicates the field in the request that caused the error. This property is optional.
     */
    location: string;
    /**
     * An optional, human-readable error message.
     */
    message: string;
}

/**
 * [Output Only] If errors are generated during processing of the operation, this field will be populated.
 */
export interface OperationErrorResponse {
    /**
     * The array of errors encountered while processing this operation.
     */
    errors: outputs.deploymentmanager.v2.OperationErrorErrorsItemResponse[];
}

/**
 * Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zonalOperations` resource. For more information, read Global, Regional, and Zonal Resources.
 */
export interface OperationResponse {
    /**
     * The value of `requestId` if you provided it in the request. Not present otherwise.
     */
    clientOperationId: string;
    /**
     * [Deprecated] This field is deprecated.
     *
     * @deprecated [Deprecated] This field is deprecated.
     */
    creationTimestamp: string;
    /**
     * A textual description of the operation, which is set when the operation is created.
     */
    description: string;
    /**
     * The time that this operation was completed. This value is in RFC3339 text format.
     */
    endTime: string;
    /**
     * If errors are generated during processing of the operation, this field will be populated.
     */
    error: outputs.deploymentmanager.v2.OperationErrorResponse;
    /**
     * If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.
     */
    httpErrorMessage: string;
    /**
     * If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.
     */
    httpErrorStatusCode: number;
    /**
     * The time that this operation was requested. This value is in RFC3339 text format.
     */
    insertTime: string;
    /**
     * Type of the resource. Always `compute#operation` for Operation resources.
     */
    kind: string;
    /**
     * Name of the operation.
     */
    name: string;
    /**
     * An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.
     */
    operationGroupId: string;
    /**
     * The type of operation, such as `insert`, `update`, or `delete`, and so on.
     */
    operationType: string;
    /**
     * An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
     */
    progress: number;
    /**
     * The URL of the region where the operation resides. Only applicable when performing regional operations.
     */
    region: string;
    /**
     * Server-defined URL for the resource.
     */
    selfLink: string;
    /**
     * The time that this operation was started by the server. This value is in RFC3339 text format.
     */
    startTime: string;
    /**
     * The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.
     */
    status: string;
    /**
     * An optional textual description of the current status of the operation.
     */
    statusMessage: string;
    /**
     * The unique target ID, which identifies a specific incarnation of the target resource.
     */
    targetId: string;
    /**
     * The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
     */
    targetLink: string;
    /**
     * User who requested the operation, for example: `user@example.com`.
     */
    user: string;
    /**
     * If warning messages are generated during processing of the operation, this field will be populated.
     */
    warnings: outputs.deploymentmanager.v2.OperationWarningsItemResponse[];
    /**
     * The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
     */
    zone: string;
}

export interface OperationWarningsItemDataItemResponse {
    /**
     * A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
     */
    key: string;
    /**
     * A warning data value corresponding to the key.
     */
    value: string;
}

export interface OperationWarningsItemResponse {
    /**
     * A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
     */
    code: string;
    /**
     * Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } 
     */
    data: outputs.deploymentmanager.v2.OperationWarningsItemDataItemResponse[];
    /**
     * A human-readable description of the warning code.
     */
    message: string;
}

export interface TargetConfigurationResponse {
    /**
     * The configuration to use for this deployment.
     */
    config: outputs.deploymentmanager.v2.ConfigFileResponse;
    /**
     * Specifies any files to import for this configuration. This can be used to import templates or other files. For example, you might import a text file in order to use the file in a template.
     */
    imports: outputs.deploymentmanager.v2.ImportFileResponse[];
}

