// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
 */
export interface ActingUserResponse {
    /**
     * The email address of the user when the user performed the action.
     */
    email: string;
    /**
     * A profile image URL for the user. May not be present if the user has changed their email address or deleted their account.
     */
    imageUrl: string;
}

/**
 * Represents a DNS certificate challenge.
 */
export interface CertDnsChallengeResponse {
    /**
     * The domain name upon which the DNS challenge must be satisfied.
     */
    domainName: string;
    /**
     * The value that must be present as a TXT record on the domain name to satisfy the challenge.
     */
    token: string;
}

/**
 * Represents an HTTP certificate challenge.
 */
export interface CertHttpChallengeResponse {
    /**
     * The URL path on which to serve the specified token to satisfy the certificate challenge.
     */
    path: string;
    /**
     * The token to serve at the specified URL path to satisfy the certificate challenge.
     */
    token: string;
}

/**
 * A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
 */
export interface CloudRunRewriteResponse {
    /**
     * Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
     */
    region: string;
    /**
     * User-defined ID of the Cloud Run service.
     */
    serviceId: string;
}

/**
 * The current certificate provisioning status information for a domain.
 */
export interface DomainProvisioningResponse {
    /**
     * The TXT records (for the certificate challenge) that were found at the last DNS fetch.
     */
    certChallengeDiscoveredTxt: string[];
    /**
     * The DNS challenge for generating a certificate.
     */
    certChallengeDns: outputs.firebasehosting.v1beta1.CertDnsChallengeResponse;
    /**
     * The HTTP challenge for generating a certificate.
     */
    certChallengeHttp: outputs.firebasehosting.v1beta1.CertHttpChallengeResponse;
    /**
     * The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
     */
    certStatus: string;
    /**
     * The IPs found at the last DNS fetch.
     */
    discoveredIps: string[];
    /**
     * The time at which the last DNS fetch occurred.
     */
    dnsFetchTime: string;
    /**
     * The DNS record match status as of the last DNS fetch.
     */
    dnsStatus: string;
    /**
     * The list of IPs to which the domain is expected to resolve.
     */
    expectedIps: string[];
}

/**
 * Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
 */
export interface DomainRedirectResponse {
    /**
     * The domain name to redirect to.
     */
    domainName: string;
    /**
     * The redirect status code.
     */
    type: string;
}

/**
 * A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
 */
export interface HeaderResponse {
    /**
     * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
     */
    glob: string;
    /**
     * The additional headers to add to the response.
     */
    headers: {[key: string]: string};
    /**
     * The user-supplied RE2 regular expression to match against the request URL path.
     */
    regex: string;
}

/**
 * If provided, i18n rewrites are enabled.
 */
export interface I18nConfigResponse {
    /**
     * The user-supplied path where country and language specific content will be looked for within the public directory.
     */
    root: string;
}

/**
 * A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
 */
export interface RedirectResponse {
    /**
     * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
     */
    glob: string;
    /**
     * The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
     */
    location: string;
    /**
     * The user-supplied RE2 regular expression to match against the request URL path.
     */
    regex: string;
    /**
     * The status HTTP code to return in the response. It must be a valid 3xx status code.
     */
    statusCode: number;
}

/**
 *  A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
 */
export interface ReleaseResponse {
    /**
     * The deploy description when the release was created. The value can be up to 512 characters.
     */
    message: string;
    /**
     * The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
     */
    name: string;
    /**
     * The time at which the version is set to be public.
     */
    releaseTime: string;
    /**
     * Identifies the user who created the release.
     */
    releaseUser: outputs.firebasehosting.v1beta1.ActingUserResponse;
    /**
     * Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
     */
    type: string;
    /**
     * The configuration and content that was released.
     */
    version: outputs.firebasehosting.v1beta1.VersionResponse;
}

/**
 * A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
 */
export interface RewriteResponse {
    /**
     * The request will be forwarded to Firebase Dynamic Links.
     */
    dynamicLinks: boolean;
    /**
     * The function to proxy requests to. Must match the exported function name exactly.
     */
    function: string;
    /**
     * Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.
     */
    functionRegion: string;
    /**
     * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
     */
    glob: string;
    /**
     * The URL path to rewrite the request to.
     */
    path: string;
    /**
     * The user-supplied RE2 regular expression to match against the request URL path.
     */
    regex: string;
    /**
     * The request will be forwarded to Cloud Run.
     */
    run: outputs.firebasehosting.v1beta1.CloudRunRewriteResponse;
}

/**
 * The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
 */
export interface ServingConfigResponse {
    /**
     * How to handle well known App Association files.
     */
    appAssociation: string;
    /**
     * Defines whether to drop the file extension from uploaded files.
     */
    cleanUrls: boolean;
    /**
     * An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
     */
    headers: outputs.firebasehosting.v1beta1.HeaderResponse[];
    /**
     * Optional. Defines i18n rewrite behavior.
     */
    i18n: outputs.firebasehosting.v1beta1.I18nConfigResponse;
    /**
     * An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
     */
    redirects: outputs.firebasehosting.v1beta1.RedirectResponse[];
    /**
     * An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
     */
    rewrites: outputs.firebasehosting.v1beta1.RewriteResponse[];
    /**
     * Defines how to handle a trailing slash in the URL path.
     */
    trailingSlashBehavior: string;
}

/**
 * A `Version` is a configuration and a collection of static files which determine how a site is displayed.
 */
export interface VersionResponse {
    /**
     * The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
     */
    config: outputs.firebasehosting.v1beta1.ServingConfigResponse;
    /**
     * The time at which the version was created.
     */
    createTime: string;
    /**
     * Identifies the user who created the version.
     */
    createUser: outputs.firebasehosting.v1beta1.ActingUserResponse;
    /**
     * The time at which the version was `DELETED`.
     */
    deleteTime: string;
    /**
     * Identifies the user who `DELETED` the version.
     */
    deleteUser: outputs.firebasehosting.v1beta1.ActingUserResponse;
    /**
     * The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
     */
    fileCount: string;
    /**
     * The time at which the version was `FINALIZED`.
     */
    finalizeTime: string;
    /**
     * Identifies the user who `FINALIZED` the version.
     */
    finalizeUser: outputs.firebasehosting.v1beta1.ActingUserResponse;
    /**
     * The labels used for extra metadata and/or filtering.
     */
    labels: {[key: string]: string};
    /**
     * The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
     */
    name: string;
    /**
     * The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
     */
    status: string;
    /**
     * The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
     */
    versionBytes: string;
}

