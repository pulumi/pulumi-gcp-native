// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * AVRO file format configuration.
 */
export interface AvroFileFormatResponse {
}

/**
 * Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
 */
export interface BackfillAllStrategyResponse {
    /**
     * MySQL data source objects to avoid backfilling.
     */
    mysqlExcludedObjects: outputs.datastream.v1alpha1.MysqlRdbmsResponse;
    /**
     * Oracle data source objects to avoid backfilling.
     */
    oracleExcludedObjects: outputs.datastream.v1alpha1.OracleRdbmsResponse;
}

/**
 * Backfill strategy to disable automatic backfill for the Stream's objects.
 */
export interface BackfillNoneStrategyResponse {
}

/**
 * The configuration of the stream destination.
 */
export interface DestinationConfigResponse {
    /**
     * Destination connection profile identifier.
     */
    destinationConnectionProfileName: string;
    /**
     * GCS destination configuration.
     */
    gcsDestinationConfig: outputs.datastream.v1alpha1.GcsDestinationConfigResponse;
}

/**
 * Configuration to drop large object values.
 */
export interface DropLargeObjectsResponse {
}

/**
 * Represent a user-facing Error.
 */
export interface ErrorResponse {
    /**
     * Additional information about the error.
     */
    details: {[key: string]: string};
    /**
     * The time when the error occurred.
     */
    errorTime: string;
    /**
     * A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.
     */
    errorUuid: string;
    /**
     * A message containing more information about the error that occurred.
     */
    message: string;
    /**
     * A title that explains the reason for the error.
     */
    reason: string;
}

/**
 * Forward SSH Tunnel connectivity.
 */
export interface ForwardSshTunnelConnectivityResponse {
    /**
     * Hostname for the SSH tunnel.
     */
    hostname: string;
    /**
     * Input only. SSH password.
     */
    password: string;
    /**
     * Port for the SSH tunnel, default value is 22.
     */
    port: number;
    /**
     * Input only. SSH private key.
     */
    privateKey: string;
    /**
     * Username for the SSH tunnel.
     */
    username: string;
}

/**
 * Google Cloud Storage destination configuration
 */
export interface GcsDestinationConfigResponse {
    /**
     * AVRO file format configuration.
     */
    avroFileFormat: outputs.datastream.v1alpha1.AvroFileFormatResponse;
    /**
     * The maximum duration for which new events are added before a file is closed and a new file is created.
     */
    fileRotationInterval: string;
    /**
     * The maximum file size to be saved in the bucket.
     */
    fileRotationMb: number;
    /**
     * File format that data should be written in. Deprecated field (b/169501737) - use file_format instead.
     *
     * @deprecated File format that data should be written in. Deprecated field (b/169501737) - use file_format instead.
     */
    gcsFileFormat: string;
    /**
     * JSON file format configuration.
     */
    jsonFileFormat: outputs.datastream.v1alpha1.JsonFileFormatResponse;
    /**
     * Path inside the Cloud Storage bucket to write data to.
     */
    path: string;
}

/**
 * Cloud Storage bucket profile.
 */
export interface GcsProfileResponse {
    /**
     * The full project and resource path for Cloud Storage bucket including the name.
     */
    bucketName: string;
    /**
     * The root path inside the Cloud Storage bucket.
     */
    rootPath: string;
}

/**
 * JSON file format configuration.
 */
export interface JsonFileFormatResponse {
    /**
     * Compression of the loaded JSON file.
     */
    compression: string;
    /**
     * The schema file format along JSON data files.
     */
    schemaFileFormat: string;
}

/**
 * MySQL Column.
 */
export interface MysqlColumnResponse {
    /**
     * Column collation.
     */
    collation: string;
    /**
     * Column name.
     */
    columnName: string;
    /**
     * The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
     */
    dataType: string;
    /**
     * Column length.
     */
    length: number;
    /**
     * Whether or not the column can accept a null value.
     */
    nullable: boolean;
    /**
     * The ordinal position of the column in the table.
     */
    ordinalPosition: number;
    /**
     * Whether or not the column represents a primary key.
     */
    primaryKey: boolean;
}

/**
 * MySQL database.
 */
export interface MysqlDatabaseResponse {
    /**
     * Database name.
     */
    databaseName: string;
    /**
     * Tables in the database.
     */
    mysqlTables: outputs.datastream.v1alpha1.MysqlTableResponse[];
}

/**
 * MySQL database profile.
 */
export interface MysqlProfileResponse {
    /**
     * Hostname for the MySQL connection.
     */
    hostname: string;
    /**
     * Input only. Password for the MySQL connection.
     */
    password: string;
    /**
     * Port for the MySQL connection, default value is 3306.
     */
    port: number;
    /**
     * SSL configuration for the MySQL connection.
     */
    sslConfig: outputs.datastream.v1alpha1.MysqlSslConfigResponse;
    /**
     * Username for the MySQL connection.
     */
    username: string;
}

/**
 * MySQL database structure
 */
export interface MysqlRdbmsResponse {
    /**
     * Mysql databases on the server
     */
    mysqlDatabases: outputs.datastream.v1alpha1.MysqlDatabaseResponse[];
}

/**
 * MySQL source configuration
 */
export interface MysqlSourceConfigResponse {
    /**
     * MySQL objects to retrieve from the source.
     */
    allowlist: outputs.datastream.v1alpha1.MysqlRdbmsResponse;
    /**
     * MySQL objects to exclude from the stream.
     */
    rejectlist: outputs.datastream.v1alpha1.MysqlRdbmsResponse;
}

/**
 * MySQL SSL configuration information.
 */
export interface MysqlSslConfigResponse {
    /**
     * Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
     */
    caCertificate: string;
    /**
     * Indicates whether the ca_certificate field is set.
     */
    caCertificateSet: boolean;
    /**
     * Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
     */
    clientCertificate: string;
    /**
     * Indicates whether the client_certificate field is set.
     */
    clientCertificateSet: boolean;
    /**
     * Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
     */
    clientKey: string;
    /**
     * Indicates whether the client_key field is set.
     */
    clientKeySet: boolean;
}

/**
 * MySQL table.
 */
export interface MysqlTableResponse {
    /**
     * MySQL columns in the database. When unspecified as part of include/exclude lists, includes/excludes everything.
     */
    mysqlColumns: outputs.datastream.v1alpha1.MysqlColumnResponse[];
    /**
     * Table name.
     */
    tableName: string;
}

/**
 * No connectivity settings.
 */
export interface NoConnectivitySettingsResponse {
}

/**
 * Oracle Column.
 */
export interface OracleColumnResponse {
    /**
     * Column name.
     */
    columnName: string;
    /**
     * The Oracle data type.
     */
    dataType: string;
    /**
     * Column encoding.
     */
    encoding: string;
    /**
     * Column length.
     */
    length: number;
    /**
     * Whether or not the column can accept a null value.
     */
    nullable: boolean;
    /**
     * The ordinal position of the column in the table.
     */
    ordinalPosition: number;
    /**
     * Column precision.
     */
    precision: number;
    /**
     * Whether or not the column represents a primary key.
     */
    primaryKey: boolean;
    /**
     * Column scale.
     */
    scale: number;
}

/**
 * Oracle database profile.
 */
export interface OracleProfileResponse {
    /**
     * Connection string attributes
     */
    connectionAttributes: {[key: string]: string};
    /**
     * Database for the Oracle connection.
     */
    databaseService: string;
    /**
     * Hostname for the Oracle connection.
     */
    hostname: string;
    /**
     * Password for the Oracle connection.
     */
    password: string;
    /**
     * Port for the Oracle connection, default value is 1521.
     */
    port: number;
    /**
     * Username for the Oracle connection.
     */
    username: string;
}

/**
 * Oracle database structure.
 */
export interface OracleRdbmsResponse {
    /**
     * Oracle schemas/databases in the database server.
     */
    oracleSchemas: outputs.datastream.v1alpha1.OracleSchemaResponse[];
}

/**
 * Oracle schema.
 */
export interface OracleSchemaResponse {
    /**
     * Tables in the schema.
     */
    oracleTables: outputs.datastream.v1alpha1.OracleTableResponse[];
    /**
     * Schema name.
     */
    schemaName: string;
}

/**
 * Oracle data source configuration
 */
export interface OracleSourceConfigResponse {
    /**
     * Oracle objects to include in the stream.
     */
    allowlist: outputs.datastream.v1alpha1.OracleRdbmsResponse;
    /**
     * Drop large object values.
     */
    dropLargeObjects: outputs.datastream.v1alpha1.DropLargeObjectsResponse;
    /**
     * Oracle objects to exclude from the stream.
     */
    rejectlist: outputs.datastream.v1alpha1.OracleRdbmsResponse;
}

/**
 * Oracle table.
 */
export interface OracleTableResponse {
    /**
     * Oracle columns in the schema. When unspecified as part of inclue/exclude lists, includes/excludes everything.
     */
    oracleColumns: outputs.datastream.v1alpha1.OracleColumnResponse[];
    /**
     * Table name.
     */
    tableName: string;
}

/**
 * Private Connectivity
 */
export interface PrivateConnectivityResponse {
    privateConnectionName: string;
}

/**
 * The configuration of the stream source.
 */
export interface SourceConfigResponse {
    /**
     * MySQL data source configuration
     */
    mysqlSourceConfig: outputs.datastream.v1alpha1.MysqlSourceConfigResponse;
    /**
     * Oracle data source configuration
     */
    oracleSourceConfig: outputs.datastream.v1alpha1.OracleSourceConfigResponse;
    /**
     * Source connection profile identifier.
     */
    sourceConnectionProfileName: string;
}

/**
 * Static IP address connectivity.
 */
export interface StaticServiceIpConnectivityResponse {
}

/**
 * The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
 */
export interface VpcPeeringConfigResponse {
    /**
     * A free subnet for peering. (CIDR of /29)
     */
    subnet: string;
    /**
     * fully qualified name of the VPC Datastream will peer to.
     */
    vpcName: string;
}

