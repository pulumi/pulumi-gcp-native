// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../../types/input";
import * as outputs from "../../../types/output";
import * as enums from "../../../types/enums";
import * as utilities from "../../../utilities";

/**
 * AVRO file format configuration.
 */
export interface AvroFileFormatResponse {
}

/**
 * Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
 */
export interface BackfillAllStrategyResponse {
    /**
     * MySQL data source objects to avoid backfilling.
     */
    mysqlExcludedObjects: outputs.datastream.v1.MysqlRdbmsResponse;
    /**
     * Oracle data source objects to avoid backfilling.
     */
    oracleExcludedObjects: outputs.datastream.v1.OracleRdbmsResponse;
    /**
     * PostgreSQL data source objects to avoid backfilling.
     */
    postgresqlExcludedObjects: outputs.datastream.v1.PostgresqlRdbmsResponse;
}

/**
 * Backfill strategy to disable automatic backfill for the Stream's objects.
 */
export interface BackfillNoneStrategyResponse {
}

export interface BigQueryDestinationConfigResponse {
    /**
     * The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
     */
    dataFreshness: string;
    /**
     * Single destination dataset.
     */
    singleTargetDataset: outputs.datastream.v1.SingleTargetDatasetResponse;
    /**
     * Source hierarchy datasets.
     */
    sourceHierarchyDatasets: outputs.datastream.v1.SourceHierarchyDatasetsResponse;
}

/**
 * BigQuery warehouse profile.
 */
export interface BigQueryProfileResponse {
}

/**
 * Dataset template used for dynamic dataset creation.
 */
export interface DatasetTemplateResponse {
    /**
     * If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.
     */
    datasetIdPrefix: string;
    /**
     * Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
     */
    kmsKeyName: string;
    /**
     * The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
     */
    location: string;
}

/**
 * The configuration of the stream destination.
 */
export interface DestinationConfigResponse {
    /**
     * BigQuery destination configuration.
     */
    bigqueryDestinationConfig: outputs.datastream.v1.BigQueryDestinationConfigResponse;
    /**
     * Destination connection profile resource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
     */
    destinationConnectionProfile: string;
    /**
     * A configuration for how data should be loaded to Cloud Storage.
     */
    gcsDestinationConfig: outputs.datastream.v1.GcsDestinationConfigResponse;
}

/**
 * Configuration to drop large object values.
 */
export interface DropLargeObjectsResponse {
}

/**
 * Represent a user-facing Error.
 */
export interface ErrorResponse {
    /**
     * Additional information about the error.
     */
    details: {[key: string]: string};
    /**
     * The time when the error occurred.
     */
    errorTime: string;
    /**
     * A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.
     */
    errorUuid: string;
    /**
     * A message containing more information about the error that occurred.
     */
    message: string;
    /**
     * A title that explains the reason for the error.
     */
    reason: string;
}

/**
 * Forward SSH Tunnel connectivity.
 */
export interface ForwardSshTunnelConnectivityResponse {
    /**
     * Hostname for the SSH tunnel.
     */
    hostname: string;
    /**
     * Input only. SSH password.
     */
    password: string;
    /**
     * Port for the SSH tunnel, default value is 22.
     */
    port: number;
    /**
     * Input only. SSH private key.
     */
    privateKey: string;
    /**
     * Username for the SSH tunnel.
     */
    username: string;
}

/**
 * Google Cloud Storage destination configuration
 */
export interface GcsDestinationConfigResponse {
    /**
     * AVRO file format configuration.
     */
    avroFileFormat: outputs.datastream.v1.AvroFileFormatResponse;
    /**
     * The maximum duration for which new events are added before a file is closed and a new file is created.
     */
    fileRotationInterval: string;
    /**
     * The maximum file size to be saved in the bucket.
     */
    fileRotationMb: number;
    /**
     * JSON file format configuration.
     */
    jsonFileFormat: outputs.datastream.v1.JsonFileFormatResponse;
    /**
     * Path inside the Cloud Storage bucket to write data to.
     */
    path: string;
}

/**
 * Cloud Storage bucket profile.
 */
export interface GcsProfileResponse {
    /**
     * The Cloud Storage bucket name.
     */
    bucket: string;
    /**
     * The root path inside the Cloud Storage bucket.
     */
    rootPath: string;
}

/**
 * JSON file format configuration.
 */
export interface JsonFileFormatResponse {
    /**
     * Compression of the loaded JSON file.
     */
    compression: string;
    /**
     * The schema file format along JSON data files.
     */
    schemaFileFormat: string;
}

/**
 * MySQL Column.
 */
export interface MysqlColumnResponse {
    /**
     * Column collation.
     */
    collation: string;
    /**
     * Column name.
     */
    column: string;
    /**
     * The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
     */
    dataType: string;
    /**
     * Column length.
     */
    length: number;
    /**
     * Whether or not the column can accept a null value.
     */
    nullable: boolean;
    /**
     * The ordinal position of the column in the table.
     */
    ordinalPosition: number;
    /**
     * Whether or not the column represents a primary key.
     */
    primaryKey: boolean;
}

/**
 * MySQL database.
 */
export interface MysqlDatabaseResponse {
    /**
     * Database name.
     */
    database: string;
    /**
     * Tables in the database.
     */
    mysqlTables: outputs.datastream.v1.MysqlTableResponse[];
}

/**
 * MySQL database profile.
 */
export interface MysqlProfileResponse {
    /**
     * Hostname for the MySQL connection.
     */
    hostname: string;
    /**
     * Input only. Password for the MySQL connection.
     */
    password: string;
    /**
     * Port for the MySQL connection, default value is 3306.
     */
    port: number;
    /**
     * SSL configuration for the MySQL connection.
     */
    sslConfig: outputs.datastream.v1.MysqlSslConfigResponse;
    /**
     * Username for the MySQL connection.
     */
    username: string;
}

/**
 * MySQL database structure
 */
export interface MysqlRdbmsResponse {
    /**
     * Mysql databases on the server
     */
    mysqlDatabases: outputs.datastream.v1.MysqlDatabaseResponse[];
}

/**
 * MySQL source configuration
 */
export interface MysqlSourceConfigResponse {
    /**
     * MySQL objects to exclude from the stream.
     */
    excludeObjects: outputs.datastream.v1.MysqlRdbmsResponse;
    /**
     * MySQL objects to retrieve from the source.
     */
    includeObjects: outputs.datastream.v1.MysqlRdbmsResponse;
    /**
     * Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
     */
    maxConcurrentCdcTasks: number;
}

/**
 * MySQL SSL configuration information.
 */
export interface MysqlSslConfigResponse {
    /**
     * Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
     */
    caCertificate: string;
    /**
     * Indicates whether the ca_certificate field is set.
     */
    caCertificateSet: boolean;
    /**
     * Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
     */
    clientCertificate: string;
    /**
     * Indicates whether the client_certificate field is set.
     */
    clientCertificateSet: boolean;
    /**
     * Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
     */
    clientKey: string;
    /**
     * Indicates whether the client_key field is set.
     */
    clientKeySet: boolean;
}

/**
 * MySQL table.
 */
export interface MysqlTableResponse {
    /**
     * MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.
     */
    mysqlColumns: outputs.datastream.v1.MysqlColumnResponse[];
    /**
     * Table name.
     */
    table: string;
}

/**
 * Oracle Column.
 */
export interface OracleColumnResponse {
    /**
     * Column name.
     */
    column: string;
    /**
     * The Oracle data type.
     */
    dataType: string;
    /**
     * Column encoding.
     */
    encoding: string;
    /**
     * Column length.
     */
    length: number;
    /**
     * Whether or not the column can accept a null value.
     */
    nullable: boolean;
    /**
     * The ordinal position of the column in the table.
     */
    ordinalPosition: number;
    /**
     * Column precision.
     */
    precision: number;
    /**
     * Whether or not the column represents a primary key.
     */
    primaryKey: boolean;
    /**
     * Column scale.
     */
    scale: number;
}

/**
 * Oracle database profile.
 */
export interface OracleProfileResponse {
    /**
     * Connection string attributes
     */
    connectionAttributes: {[key: string]: string};
    /**
     * Database for the Oracle connection.
     */
    databaseService: string;
    /**
     * Hostname for the Oracle connection.
     */
    hostname: string;
    /**
     * Password for the Oracle connection.
     */
    password: string;
    /**
     * Port for the Oracle connection, default value is 1521.
     */
    port: number;
    /**
     * Username for the Oracle connection.
     */
    username: string;
}

/**
 * Oracle database structure.
 */
export interface OracleRdbmsResponse {
    /**
     * Oracle schemas/databases in the database server.
     */
    oracleSchemas: outputs.datastream.v1.OracleSchemaResponse[];
}

/**
 * Oracle schema.
 */
export interface OracleSchemaResponse {
    /**
     * Tables in the schema.
     */
    oracleTables: outputs.datastream.v1.OracleTableResponse[];
    /**
     * Schema name.
     */
    schema: string;
}

/**
 * Oracle data source configuration
 */
export interface OracleSourceConfigResponse {
    /**
     * Drop large object values.
     */
    dropLargeObjects: outputs.datastream.v1.DropLargeObjectsResponse;
    /**
     * Oracle objects to exclude from the stream.
     */
    excludeObjects: outputs.datastream.v1.OracleRdbmsResponse;
    /**
     * Oracle objects to include in the stream.
     */
    includeObjects: outputs.datastream.v1.OracleRdbmsResponse;
    /**
     * Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
     */
    maxConcurrentCdcTasks: number;
    /**
     * Stream large object values. NOTE: This feature is currently experimental.
     */
    streamLargeObjects: outputs.datastream.v1.StreamLargeObjectsResponse;
}

/**
 * Oracle table.
 */
export interface OracleTableResponse {
    /**
     * Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
     */
    oracleColumns: outputs.datastream.v1.OracleColumnResponse[];
    /**
     * Table name.
     */
    table: string;
}

/**
 * PostgreSQL Column.
 */
export interface PostgresqlColumnResponse {
    /**
     * Column name.
     */
    column: string;
    /**
     * The PostgreSQL data type.
     */
    dataType: string;
    /**
     * Column length.
     */
    length: number;
    /**
     * Whether or not the column can accept a null value.
     */
    nullable: boolean;
    /**
     * The ordinal position of the column in the table.
     */
    ordinalPosition: number;
    /**
     * Column precision.
     */
    precision: number;
    /**
     * Whether or not the column represents a primary key.
     */
    primaryKey: boolean;
    /**
     * Column scale.
     */
    scale: number;
}

/**
 * PostgreSQL database profile.
 */
export interface PostgresqlProfileResponse {
    /**
     * Database for the PostgreSQL connection.
     */
    database: string;
    /**
     * Hostname for the PostgreSQL connection.
     */
    hostname: string;
    /**
     * Password for the PostgreSQL connection.
     */
    password: string;
    /**
     * Port for the PostgreSQL connection, default value is 5432.
     */
    port: number;
    /**
     * Username for the PostgreSQL connection.
     */
    username: string;
}

/**
 * PostgreSQL database structure.
 */
export interface PostgresqlRdbmsResponse {
    /**
     * PostgreSQL schemas in the database server.
     */
    postgresqlSchemas: outputs.datastream.v1.PostgresqlSchemaResponse[];
}

/**
 * PostgreSQL schema.
 */
export interface PostgresqlSchemaResponse {
    /**
     * Tables in the schema.
     */
    postgresqlTables: outputs.datastream.v1.PostgresqlTableResponse[];
    /**
     * Schema name.
     */
    schema: string;
}

/**
 * PostgreSQL data source configuration
 */
export interface PostgresqlSourceConfigResponse {
    /**
     * PostgreSQL objects to exclude from the stream.
     */
    excludeObjects: outputs.datastream.v1.PostgresqlRdbmsResponse;
    /**
     * PostgreSQL objects to include in the stream.
     */
    includeObjects: outputs.datastream.v1.PostgresqlRdbmsResponse;
    /**
     * The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
     */
    publication: string;
    /**
     * Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
     */
    replicationSlot: string;
}

/**
 * PostgreSQL table.
 */
export interface PostgresqlTableResponse {
    /**
     * PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
     */
    postgresqlColumns: outputs.datastream.v1.PostgresqlColumnResponse[];
    /**
     * Table name.
     */
    table: string;
}

/**
 * Private Connectivity
 */
export interface PrivateConnectivityResponse {
    /**
     * A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
     */
    privateConnection: string;
}

/**
 * A single target dataset to which all data will be streamed.
 */
export interface SingleTargetDatasetResponse {
    datasetId: string;
}

/**
 * The configuration of the stream source.
 */
export interface SourceConfigResponse {
    /**
     * MySQL data source configuration.
     */
    mysqlSourceConfig: outputs.datastream.v1.MysqlSourceConfigResponse;
    /**
     * Oracle data source configuration.
     */
    oracleSourceConfig: outputs.datastream.v1.OracleSourceConfigResponse;
    /**
     * PostgreSQL data source configuration.
     */
    postgresqlSourceConfig: outputs.datastream.v1.PostgresqlSourceConfigResponse;
    /**
     * Source connection profile resoource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
     */
    sourceConnectionProfile: string;
}

/**
 * Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
 */
export interface SourceHierarchyDatasetsResponse {
    datasetTemplate: outputs.datastream.v1.DatasetTemplateResponse;
}

/**
 * Static IP address connectivity.
 */
export interface StaticServiceIpConnectivityResponse {
}

/**
 * Configuration to stream large object values.
 */
export interface StreamLargeObjectsResponse {
}

/**
 * The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
 */
export interface VpcPeeringConfigResponse {
    /**
     * A free subnet for peering. (CIDR of /29)
     */
    subnet: string;
    /**
     * Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
     */
    vpc: string;
}

