// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a Redis cluster based on the specified properties. The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation is completed the Redis cluster will be fully functional. The completed longrunning.Operation will contain the new cluster object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:redis/v1:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
     */
    public readonly authorizationMode!: pulumi.Output<string>;
    /**
     * Required. The logical name of the Redis cluster in the customer project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the customer project / location
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The timestamp associated with the cluster creation request.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.
     */
    public /*out*/ readonly discoveryEndpoints!: pulumi.Output<outputs.redis.v1.DiscoveryEndpointResponse[]>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
     */
    public readonly pscConfigs!: pulumi.Output<outputs.redis.v1.PscConfigResponse[]>;
    /**
     * PSC connections for discovery of the cluster topology and accessing the cluster.
     */
    public /*out*/ readonly pscConnections!: pulumi.Output<outputs.redis.v1.PscConnectionResponse[]>;
    /**
     * Optional. The number of replica nodes per shard.
     */
    public readonly replicaCount!: pulumi.Output<number>;
    /**
     * Idempotent request UUID.
     */
    public readonly requestId!: pulumi.Output<string | undefined>;
    /**
     * Number of shards for the Redis cluster.
     */
    public readonly shardCount!: pulumi.Output<number>;
    /**
     * Redis memory size in GB for the entire cluster.
     */
    public /*out*/ readonly sizeGb!: pulumi.Output<number>;
    /**
     * The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Additional information about the current state of the cluster.
     */
    public /*out*/ readonly stateInfo!: pulumi.Output<outputs.redis.v1.StateInfoResponse>;
    /**
     * Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
     */
    public readonly transitEncryptionMode!: pulumi.Output<string>;
    /**
     * System assigned, unique identifier for the cluster.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.pscConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pscConfigs'");
            }
            if ((!args || args.shardCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardCount'");
            }
            resourceInputs["authorizationMode"] = args ? args.authorizationMode : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["pscConfigs"] = args ? args.pscConfigs : undefined;
            resourceInputs["replicaCount"] = args ? args.replicaCount : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["transitEncryptionMode"] = args ? args.transitEncryptionMode : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["discoveryEndpoints"] = undefined /*out*/;
            resourceInputs["pscConnections"] = undefined /*out*/;
            resourceInputs["sizeGb"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateInfo"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        } else {
            resourceInputs["authorizationMode"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["discoveryEndpoints"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["pscConfigs"] = undefined /*out*/;
            resourceInputs["pscConnections"] = undefined /*out*/;
            resourceInputs["replicaCount"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["shardCount"] = undefined /*out*/;
            resourceInputs["sizeGb"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateInfo"] = undefined /*out*/;
            resourceInputs["transitEncryptionMode"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["clusterId", "location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
     */
    authorizationMode?: pulumi.Input<enums.redis.v1.ClusterAuthorizationMode>;
    /**
     * Required. The logical name of the Redis cluster in the customer project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the customer project / location
     */
    clusterId: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
     */
    pscConfigs: pulumi.Input<pulumi.Input<inputs.redis.v1.PscConfigArgs>[]>;
    /**
     * Optional. The number of replica nodes per shard.
     */
    replicaCount?: pulumi.Input<number>;
    /**
     * Idempotent request UUID.
     */
    requestId?: pulumi.Input<string>;
    /**
     * Number of shards for the Redis cluster.
     */
    shardCount: pulumi.Input<number>;
    /**
     * Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
     */
    transitEncryptionMode?: pulumi.Input<enums.redis.v1.ClusterTransitEncryptionMode>;
}
