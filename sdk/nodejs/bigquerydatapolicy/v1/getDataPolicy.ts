// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets the data policy specified by its resource name.
 */
export function getDataPolicy(args: GetDataPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetDataPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:bigquerydatapolicy/v1:getDataPolicy", {
        "dataPolicyId": args.dataPolicyId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetDataPolicyArgs {
    dataPolicyId: string;
    location: string;
    project?: string;
}

export interface GetDataPolicyResult {
    /**
     * The data masking policy that specifies the data masking rule to use.
     */
    readonly dataMaskingPolicy: outputs.bigquerydatapolicy.v1.DataMaskingPolicyResponse;
    /**
     * User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
     */
    readonly dataPolicyId: string;
    /**
     * Type of data policy.
     */
    readonly dataPolicyType: string;
    /**
     * Resource name of this data policy, in the format of `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
     */
    readonly name: string;
    /**
     * Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
     */
    readonly policyTag: string;
}
/**
 * Gets the data policy specified by its resource name.
 */
export function getDataPolicyOutput(args: GetDataPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataPolicyResult> {
    return pulumi.output(args).apply((a: any) => getDataPolicy(a, opts))
}

export interface GetDataPolicyOutputArgs {
    dataPolicyId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
