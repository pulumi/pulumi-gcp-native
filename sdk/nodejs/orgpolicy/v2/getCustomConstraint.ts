// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets a CustomConstraint. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the CustomConstraint does not exist.
 */
export function getCustomConstraint(args: GetCustomConstraintArgs, opts?: pulumi.InvokeOptions): Promise<GetCustomConstraintResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:orgpolicy/v2:getCustomConstraint", {
        "customConstraintId": args.customConstraintId,
        "organizationId": args.organizationId,
    }, opts);
}

export interface GetCustomConstraintArgs {
    customConstraintId: string;
    organizationId: string;
}

export interface GetCustomConstraintResult {
    /**
     * Allow or deny type.
     */
    readonly actionType: string;
    /**
     * Org policy condition/expression. For example: `resource.instanceName.matches("[production|test]_.*_(\d)+")'` or, `resource.management.auto_upgrade == true`
     */
    readonly condition: string;
    /**
     * Detailed information about this custom policy constraint.
     */
    readonly description: string;
    /**
     * One line display name for the UI.
     */
    readonly displayName: string;
    /**
     * All the operations being applied for this constraint.
     */
    readonly methodTypes: string[];
    /**
     * Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example : "organizations/123/customConstraints/custom.createOnlyE2TypeVms"
     */
    readonly name: string;
    /**
     * Immutable. The Resource Instance type on which this policy applies to. Format will be of the form : "/" Example: * `compute.googleapis.com/Instance`.
     */
    readonly resourceTypes: string[];
}

export function getCustomConstraintOutput(args: GetCustomConstraintOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCustomConstraintResult> {
    return pulumi.output(args).apply(a => getCustomConstraint(a, opts))
}

export interface GetCustomConstraintOutputArgs {
    customConstraintId: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
}
