// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views.
 */
export class BucketView extends pulumi.CustomResource {
    /**
     * Get an existing BucketView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): BucketView {
        return new BucketView(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:logging/v2:BucketView';

    /**
     * Returns true if the given object is an instance of BucketView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketView.__pulumiType;
    }

    /**
     * The creation timestamp of the view.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Describes this view.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
     */
    public readonly filter!: pulumi.Output<string>;
    /**
     * The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The last update timestamp of the view.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a BucketView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketViewArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.bucketsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketsId'");
            }
            if ((!args || args.locationsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationsId'");
            }
            if ((!args || args.projectsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectsId'");
            }
            if ((!args || args.viewsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'viewsId'");
            }
            inputs["bucketsId"] = args ? args.bucketsId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["filter"] = args ? args.filter : undefined;
            inputs["locationsId"] = args ? args.locationsId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["projectsId"] = args ? args.projectsId : undefined;
            inputs["viewsId"] = args ? args.viewsId : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        } else {
            inputs["createTime"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["filter"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(BucketView.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a BucketView resource.
 */
export interface BucketViewArgs {
    readonly bucketsId: pulumi.Input<string>;
    /**
     * Describes this view.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: originating project/folder/organization/billing account. resource type log id Example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
     */
    readonly filter?: pulumi.Input<string>;
    readonly locationsId: pulumi.Input<string>;
    /**
     * The resource name of the view. For example "projects/my-project-id/locations/my-location/buckets/my-bucket-id/views/my-view
     */
    readonly name?: pulumi.Input<string>;
    readonly projectsId: pulumi.Input<string>;
    readonly viewsId: pulumi.Input<string>;
}
