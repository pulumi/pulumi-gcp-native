// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { BillingAccountBucketArgs } from "./billingAccountBucket";
export type BillingAccountBucket = import("./billingAccountBucket").BillingAccountBucket;
export const BillingAccountBucket: typeof import("./billingAccountBucket").BillingAccountBucket = null as any;
utilities.lazyLoad(exports, ["BillingAccountBucket"], () => require("./billingAccountBucket"));

export { BillingAccountBucketViewArgs } from "./billingAccountBucketView";
export type BillingAccountBucketView = import("./billingAccountBucketView").BillingAccountBucketView;
export const BillingAccountBucketView: typeof import("./billingAccountBucketView").BillingAccountBucketView = null as any;
utilities.lazyLoad(exports, ["BillingAccountBucketView"], () => require("./billingAccountBucketView"));

export { BillingAccountExclusionArgs } from "./billingAccountExclusion";
export type BillingAccountExclusion = import("./billingAccountExclusion").BillingAccountExclusion;
export const BillingAccountExclusion: typeof import("./billingAccountExclusion").BillingAccountExclusion = null as any;
utilities.lazyLoad(exports, ["BillingAccountExclusion"], () => require("./billingAccountExclusion"));

export { BillingAccountSinkArgs } from "./billingAccountSink";
export type BillingAccountSink = import("./billingAccountSink").BillingAccountSink;
export const BillingAccountSink: typeof import("./billingAccountSink").BillingAccountSink = null as any;
utilities.lazyLoad(exports, ["BillingAccountSink"], () => require("./billingAccountSink"));

export { BucketArgs } from "./bucket";
export type Bucket = import("./bucket").Bucket;
export const Bucket: typeof import("./bucket").Bucket = null as any;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));

export { BucketViewArgs } from "./bucketView";
export type BucketView = import("./bucketView").BucketView;
export const BucketView: typeof import("./bucketView").BucketView = null as any;
utilities.lazyLoad(exports, ["BucketView"], () => require("./bucketView"));

export { ExclusionArgs } from "./exclusion";
export type Exclusion = import("./exclusion").Exclusion;
export const Exclusion: typeof import("./exclusion").Exclusion = null as any;
utilities.lazyLoad(exports, ["Exclusion"], () => require("./exclusion"));

export { FolderBucketArgs } from "./folderBucket";
export type FolderBucket = import("./folderBucket").FolderBucket;
export const FolderBucket: typeof import("./folderBucket").FolderBucket = null as any;
utilities.lazyLoad(exports, ["FolderBucket"], () => require("./folderBucket"));

export { FolderBucketViewArgs } from "./folderBucketView";
export type FolderBucketView = import("./folderBucketView").FolderBucketView;
export const FolderBucketView: typeof import("./folderBucketView").FolderBucketView = null as any;
utilities.lazyLoad(exports, ["FolderBucketView"], () => require("./folderBucketView"));

export { FolderExclusionArgs } from "./folderExclusion";
export type FolderExclusion = import("./folderExclusion").FolderExclusion;
export const FolderExclusion: typeof import("./folderExclusion").FolderExclusion = null as any;
utilities.lazyLoad(exports, ["FolderExclusion"], () => require("./folderExclusion"));

export { FolderSinkArgs } from "./folderSink";
export type FolderSink = import("./folderSink").FolderSink;
export const FolderSink: typeof import("./folderSink").FolderSink = null as any;
utilities.lazyLoad(exports, ["FolderSink"], () => require("./folderSink"));

export { GetBillingAccountBucketArgs, GetBillingAccountBucketResult, GetBillingAccountBucketOutputArgs } from "./getBillingAccountBucket";
export const getBillingAccountBucket: typeof import("./getBillingAccountBucket").getBillingAccountBucket = null as any;
export const getBillingAccountBucketOutput: typeof import("./getBillingAccountBucket").getBillingAccountBucketOutput = null as any;
utilities.lazyLoad(exports, ["getBillingAccountBucket","getBillingAccountBucketOutput"], () => require("./getBillingAccountBucket"));

export { GetBillingAccountBucketViewArgs, GetBillingAccountBucketViewResult, GetBillingAccountBucketViewOutputArgs } from "./getBillingAccountBucketView";
export const getBillingAccountBucketView: typeof import("./getBillingAccountBucketView").getBillingAccountBucketView = null as any;
export const getBillingAccountBucketViewOutput: typeof import("./getBillingAccountBucketView").getBillingAccountBucketViewOutput = null as any;
utilities.lazyLoad(exports, ["getBillingAccountBucketView","getBillingAccountBucketViewOutput"], () => require("./getBillingAccountBucketView"));

export { GetBillingAccountExclusionArgs, GetBillingAccountExclusionResult, GetBillingAccountExclusionOutputArgs } from "./getBillingAccountExclusion";
export const getBillingAccountExclusion: typeof import("./getBillingAccountExclusion").getBillingAccountExclusion = null as any;
export const getBillingAccountExclusionOutput: typeof import("./getBillingAccountExclusion").getBillingAccountExclusionOutput = null as any;
utilities.lazyLoad(exports, ["getBillingAccountExclusion","getBillingAccountExclusionOutput"], () => require("./getBillingAccountExclusion"));

export { GetBillingAccountSinkArgs, GetBillingAccountSinkResult, GetBillingAccountSinkOutputArgs } from "./getBillingAccountSink";
export const getBillingAccountSink: typeof import("./getBillingAccountSink").getBillingAccountSink = null as any;
export const getBillingAccountSinkOutput: typeof import("./getBillingAccountSink").getBillingAccountSinkOutput = null as any;
utilities.lazyLoad(exports, ["getBillingAccountSink","getBillingAccountSinkOutput"], () => require("./getBillingAccountSink"));

export { GetBucketArgs, GetBucketResult, GetBucketOutputArgs } from "./getBucket";
export const getBucket: typeof import("./getBucket").getBucket = null as any;
export const getBucketOutput: typeof import("./getBucket").getBucketOutput = null as any;
utilities.lazyLoad(exports, ["getBucket","getBucketOutput"], () => require("./getBucket"));

export { GetBucketViewArgs, GetBucketViewResult, GetBucketViewOutputArgs } from "./getBucketView";
export const getBucketView: typeof import("./getBucketView").getBucketView = null as any;
export const getBucketViewOutput: typeof import("./getBucketView").getBucketViewOutput = null as any;
utilities.lazyLoad(exports, ["getBucketView","getBucketViewOutput"], () => require("./getBucketView"));

export { GetExclusionArgs, GetExclusionResult, GetExclusionOutputArgs } from "./getExclusion";
export const getExclusion: typeof import("./getExclusion").getExclusion = null as any;
export const getExclusionOutput: typeof import("./getExclusion").getExclusionOutput = null as any;
utilities.lazyLoad(exports, ["getExclusion","getExclusionOutput"], () => require("./getExclusion"));

export { GetFolderBucketArgs, GetFolderBucketResult, GetFolderBucketOutputArgs } from "./getFolderBucket";
export const getFolderBucket: typeof import("./getFolderBucket").getFolderBucket = null as any;
export const getFolderBucketOutput: typeof import("./getFolderBucket").getFolderBucketOutput = null as any;
utilities.lazyLoad(exports, ["getFolderBucket","getFolderBucketOutput"], () => require("./getFolderBucket"));

export { GetFolderBucketViewArgs, GetFolderBucketViewResult, GetFolderBucketViewOutputArgs } from "./getFolderBucketView";
export const getFolderBucketView: typeof import("./getFolderBucketView").getFolderBucketView = null as any;
export const getFolderBucketViewOutput: typeof import("./getFolderBucketView").getFolderBucketViewOutput = null as any;
utilities.lazyLoad(exports, ["getFolderBucketView","getFolderBucketViewOutput"], () => require("./getFolderBucketView"));

export { GetFolderExclusionArgs, GetFolderExclusionResult, GetFolderExclusionOutputArgs } from "./getFolderExclusion";
export const getFolderExclusion: typeof import("./getFolderExclusion").getFolderExclusion = null as any;
export const getFolderExclusionOutput: typeof import("./getFolderExclusion").getFolderExclusionOutput = null as any;
utilities.lazyLoad(exports, ["getFolderExclusion","getFolderExclusionOutput"], () => require("./getFolderExclusion"));

export { GetFolderSinkArgs, GetFolderSinkResult, GetFolderSinkOutputArgs } from "./getFolderSink";
export const getFolderSink: typeof import("./getFolderSink").getFolderSink = null as any;
export const getFolderSinkOutput: typeof import("./getFolderSink").getFolderSinkOutput = null as any;
utilities.lazyLoad(exports, ["getFolderSink","getFolderSinkOutput"], () => require("./getFolderSink"));

export { GetMetricArgs, GetMetricResult, GetMetricOutputArgs } from "./getMetric";
export const getMetric: typeof import("./getMetric").getMetric = null as any;
export const getMetricOutput: typeof import("./getMetric").getMetricOutput = null as any;
utilities.lazyLoad(exports, ["getMetric","getMetricOutput"], () => require("./getMetric"));

export { GetOrganizationBucketArgs, GetOrganizationBucketResult, GetOrganizationBucketOutputArgs } from "./getOrganizationBucket";
export const getOrganizationBucket: typeof import("./getOrganizationBucket").getOrganizationBucket = null as any;
export const getOrganizationBucketOutput: typeof import("./getOrganizationBucket").getOrganizationBucketOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationBucket","getOrganizationBucketOutput"], () => require("./getOrganizationBucket"));

export { GetOrganizationBucketViewArgs, GetOrganizationBucketViewResult, GetOrganizationBucketViewOutputArgs } from "./getOrganizationBucketView";
export const getOrganizationBucketView: typeof import("./getOrganizationBucketView").getOrganizationBucketView = null as any;
export const getOrganizationBucketViewOutput: typeof import("./getOrganizationBucketView").getOrganizationBucketViewOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationBucketView","getOrganizationBucketViewOutput"], () => require("./getOrganizationBucketView"));

export { GetOrganizationExclusionArgs, GetOrganizationExclusionResult, GetOrganizationExclusionOutputArgs } from "./getOrganizationExclusion";
export const getOrganizationExclusion: typeof import("./getOrganizationExclusion").getOrganizationExclusion = null as any;
export const getOrganizationExclusionOutput: typeof import("./getOrganizationExclusion").getOrganizationExclusionOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationExclusion","getOrganizationExclusionOutput"], () => require("./getOrganizationExclusion"));

export { GetOrganizationSinkArgs, GetOrganizationSinkResult, GetOrganizationSinkOutputArgs } from "./getOrganizationSink";
export const getOrganizationSink: typeof import("./getOrganizationSink").getOrganizationSink = null as any;
export const getOrganizationSinkOutput: typeof import("./getOrganizationSink").getOrganizationSinkOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationSink","getOrganizationSinkOutput"], () => require("./getOrganizationSink"));

export { GetSinkArgs, GetSinkResult, GetSinkOutputArgs } from "./getSink";
export const getSink: typeof import("./getSink").getSink = null as any;
export const getSinkOutput: typeof import("./getSink").getSinkOutput = null as any;
utilities.lazyLoad(exports, ["getSink","getSinkOutput"], () => require("./getSink"));

export { MetricArgs } from "./metric";
export type Metric = import("./metric").Metric;
export const Metric: typeof import("./metric").Metric = null as any;
utilities.lazyLoad(exports, ["Metric"], () => require("./metric"));

export { OrganizationBucketArgs } from "./organizationBucket";
export type OrganizationBucket = import("./organizationBucket").OrganizationBucket;
export const OrganizationBucket: typeof import("./organizationBucket").OrganizationBucket = null as any;
utilities.lazyLoad(exports, ["OrganizationBucket"], () => require("./organizationBucket"));

export { OrganizationBucketViewArgs } from "./organizationBucketView";
export type OrganizationBucketView = import("./organizationBucketView").OrganizationBucketView;
export const OrganizationBucketView: typeof import("./organizationBucketView").OrganizationBucketView = null as any;
utilities.lazyLoad(exports, ["OrganizationBucketView"], () => require("./organizationBucketView"));

export { OrganizationExclusionArgs } from "./organizationExclusion";
export type OrganizationExclusion = import("./organizationExclusion").OrganizationExclusion;
export const OrganizationExclusion: typeof import("./organizationExclusion").OrganizationExclusion = null as any;
utilities.lazyLoad(exports, ["OrganizationExclusion"], () => require("./organizationExclusion"));

export { OrganizationSinkArgs } from "./organizationSink";
export type OrganizationSink = import("./organizationSink").OrganizationSink;
export const OrganizationSink: typeof import("./organizationSink").OrganizationSink = null as any;
utilities.lazyLoad(exports, ["OrganizationSink"], () => require("./organizationSink"));

export { SinkArgs } from "./sink";
export type Sink = import("./sink").Sink;
export const Sink: typeof import("./sink").Sink = null as any;
utilities.lazyLoad(exports, ["Sink"], () => require("./sink"));


// Export enums:
export * from "../../types/enums/logging/v2";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:logging/v2:BillingAccountBucket":
                return new BillingAccountBucket(name, <any>undefined, { urn })
            case "google-native:logging/v2:BillingAccountBucketView":
                return new BillingAccountBucketView(name, <any>undefined, { urn })
            case "google-native:logging/v2:BillingAccountExclusion":
                return new BillingAccountExclusion(name, <any>undefined, { urn })
            case "google-native:logging/v2:BillingAccountSink":
                return new BillingAccountSink(name, <any>undefined, { urn })
            case "google-native:logging/v2:Bucket":
                return new Bucket(name, <any>undefined, { urn })
            case "google-native:logging/v2:BucketView":
                return new BucketView(name, <any>undefined, { urn })
            case "google-native:logging/v2:Exclusion":
                return new Exclusion(name, <any>undefined, { urn })
            case "google-native:logging/v2:FolderBucket":
                return new FolderBucket(name, <any>undefined, { urn })
            case "google-native:logging/v2:FolderBucketView":
                return new FolderBucketView(name, <any>undefined, { urn })
            case "google-native:logging/v2:FolderExclusion":
                return new FolderExclusion(name, <any>undefined, { urn })
            case "google-native:logging/v2:FolderSink":
                return new FolderSink(name, <any>undefined, { urn })
            case "google-native:logging/v2:Metric":
                return new Metric(name, <any>undefined, { urn })
            case "google-native:logging/v2:OrganizationBucket":
                return new OrganizationBucket(name, <any>undefined, { urn })
            case "google-native:logging/v2:OrganizationBucketView":
                return new OrganizationBucketView(name, <any>undefined, { urn })
            case "google-native:logging/v2:OrganizationExclusion":
                return new OrganizationExclusion(name, <any>undefined, { urn })
            case "google-native:logging/v2:OrganizationSink":
                return new OrganizationSink(name, <any>undefined, { urn })
            case "google-native:logging/v2:Sink":
                return new Sink(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "logging/v2", _module)
