// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets the resource representation for a node group in a cluster.
 */
export function getNodeGroup(args: GetNodeGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetNodeGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:dataproc/v1:getNodeGroup", {
        "clusterId": args.clusterId,
        "nodeGroupId": args.nodeGroupId,
        "project": args.project,
        "regionId": args.regionId,
    }, opts);
}

export interface GetNodeGroupArgs {
    clusterId: string;
    nodeGroupId: string;
    project?: string;
    regionId: string;
}

export interface GetNodeGroupResult {
    /**
     * Optional. Node group labels. Label keys must consist of from 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty. If specified, they must consist of from 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). The node group must have no more than 32 labelsn.
     */
    readonly labels: {[key: string]: string};
    /**
     * The Node group resource name (https://aip.dev/122).
     */
    readonly name: string;
    /**
     * Optional. The node group instance group configuration.
     */
    readonly nodeGroupConfig: outputs.dataproc.v1.InstanceGroupConfigResponse;
    /**
     * Node group roles.
     */
    readonly roles: string[];
}
/**
 * Gets the resource representation for a node group in a cluster.
 */
export function getNodeGroupOutput(args: GetNodeGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodeGroupResult> {
    return pulumi.output(args).apply((a: any) => getNodeGroup(a, opts))
}

export interface GetNodeGroupOutputArgs {
    clusterId: pulumi.Input<string>;
    nodeGroupId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    regionId: pulumi.Input<string>;
}
