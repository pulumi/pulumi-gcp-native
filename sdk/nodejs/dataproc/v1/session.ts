// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Create an interactive session asynchronously.
 */
export class Session extends pulumi.CustomResource {
    /**
     * Get an existing Session resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Session {
        return new Session(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:dataproc/v1:Session';

    /**
     * Returns true if the given object is an instance of Session.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Session {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Session.__pulumiType;
    }

    /**
     * The time when the session was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The email address of the user who created the session.
     */
    public /*out*/ readonly creator!: pulumi.Output<string>;
    /**
     * Optional. Environment configuration for the session execution.
     */
    public readonly environmentConfig!: pulumi.Output<outputs.dataproc.v1.EnvironmentConfigResponse>;
    /**
     * Optional. Jupyter session config.
     */
    public readonly jupyterSession!: pulumi.Output<outputs.dataproc.v1.JupyterConfigResponse>;
    /**
     * Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the session.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Optional. A unique ID used to identify the request. If the service receives two CreateSessionRequests (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateSessionRequest)s with the same ID, the second request is ignored, and the first Session is created and stored in the backend.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The value must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
     */
    public readonly requestId!: pulumi.Output<string | undefined>;
    /**
     * Optional. Runtime configuration for the session execution.
     */
    public readonly runtimeConfig!: pulumi.Output<outputs.dataproc.v1.RuntimeConfigResponse>;
    /**
     * Runtime information about session execution.
     */
    public /*out*/ readonly runtimeInfo!: pulumi.Output<outputs.dataproc.v1.RuntimeInfoResponse>;
    /**
     * Required. The ID to use for the session, which becomes the final component of the session's resource name.This value must be 4-63 characters. Valid characters are /a-z-/.
     */
    public readonly sessionId!: pulumi.Output<string>;
    /**
     * Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
     */
    public readonly sessionTemplate!: pulumi.Output<string>;
    /**
     * A state of the session.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Historical state information for the session.
     */
    public /*out*/ readonly stateHistory!: pulumi.Output<outputs.dataproc.v1.SessionStateHistoryResponse[]>;
    /**
     * Session state details, such as the failure description if the state is FAILED.
     */
    public /*out*/ readonly stateMessage!: pulumi.Output<string>;
    /**
     * The time when the session entered the current state.
     */
    public /*out*/ readonly stateTime!: pulumi.Output<string>;
    /**
     * Optional. The email address of the user who owns the session.
     */
    public readonly user!: pulumi.Output<string>;
    /**
     * A session UUID (Unique Universal Identifier). The service generates this value when it creates the session.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Session resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SessionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.sessionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sessionId'");
            }
            resourceInputs["environmentConfig"] = args ? args.environmentConfig : undefined;
            resourceInputs["jupyterSession"] = args ? args.jupyterSession : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["runtimeConfig"] = args ? args.runtimeConfig : undefined;
            resourceInputs["sessionId"] = args ? args.sessionId : undefined;
            resourceInputs["sessionTemplate"] = args ? args.sessionTemplate : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["runtimeInfo"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateHistory"] = undefined /*out*/;
            resourceInputs["stateMessage"] = undefined /*out*/;
            resourceInputs["stateTime"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["environmentConfig"] = undefined /*out*/;
            resourceInputs["jupyterSession"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["runtimeConfig"] = undefined /*out*/;
            resourceInputs["runtimeInfo"] = undefined /*out*/;
            resourceInputs["sessionId"] = undefined /*out*/;
            resourceInputs["sessionTemplate"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateHistory"] = undefined /*out*/;
            resourceInputs["stateMessage"] = undefined /*out*/;
            resourceInputs["stateTime"] = undefined /*out*/;
            resourceInputs["user"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project", "sessionId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Session.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Session resource.
 */
export interface SessionArgs {
    /**
     * Optional. Environment configuration for the session execution.
     */
    environmentConfig?: pulumi.Input<inputs.dataproc.v1.EnvironmentConfigArgs>;
    /**
     * Optional. Jupyter session config.
     */
    jupyterSession?: pulumi.Input<inputs.dataproc.v1.JupyterConfigArgs>;
    /**
     * Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    /**
     * The resource name of the session.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Optional. A unique ID used to identify the request. If the service receives two CreateSessionRequests (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateSessionRequest)s with the same ID, the second request is ignored, and the first Session is created and stored in the backend.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The value must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
     */
    requestId?: pulumi.Input<string>;
    /**
     * Optional. Runtime configuration for the session execution.
     */
    runtimeConfig?: pulumi.Input<inputs.dataproc.v1.RuntimeConfigArgs>;
    /**
     * Required. The ID to use for the session, which becomes the final component of the session's resource name.This value must be 4-63 characters. Valid characters are /a-z-/.
     */
    sessionId: pulumi.Input<string>;
    /**
     * Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
     */
    sessionTemplate?: pulumi.Input<string>;
    /**
     * Optional. The email address of the user who owns the session.
     */
    user?: pulumi.Input<string>;
}
