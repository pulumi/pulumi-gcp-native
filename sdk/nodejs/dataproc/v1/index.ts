// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AutoscalingPolicyArgs } from "./autoscalingPolicy";
export type AutoscalingPolicy = import("./autoscalingPolicy").AutoscalingPolicy;
export const AutoscalingPolicy: typeof import("./autoscalingPolicy").AutoscalingPolicy = null as any;
utilities.lazyLoad(exports, ["AutoscalingPolicy"], () => require("./autoscalingPolicy"));

export { AutoscalingPolicyIamBindingArgs } from "./autoscalingPolicyIamBinding";
export type AutoscalingPolicyIamBinding = import("./autoscalingPolicyIamBinding").AutoscalingPolicyIamBinding;
export const AutoscalingPolicyIamBinding: typeof import("./autoscalingPolicyIamBinding").AutoscalingPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["AutoscalingPolicyIamBinding"], () => require("./autoscalingPolicyIamBinding"));

export { AutoscalingPolicyIamMemberArgs } from "./autoscalingPolicyIamMember";
export type AutoscalingPolicyIamMember = import("./autoscalingPolicyIamMember").AutoscalingPolicyIamMember;
export const AutoscalingPolicyIamMember: typeof import("./autoscalingPolicyIamMember").AutoscalingPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["AutoscalingPolicyIamMember"], () => require("./autoscalingPolicyIamMember"));

export { AutoscalingPolicyIamPolicyArgs } from "./autoscalingPolicyIamPolicy";
export type AutoscalingPolicyIamPolicy = import("./autoscalingPolicyIamPolicy").AutoscalingPolicyIamPolicy;
export const AutoscalingPolicyIamPolicy: typeof import("./autoscalingPolicyIamPolicy").AutoscalingPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["AutoscalingPolicyIamPolicy"], () => require("./autoscalingPolicyIamPolicy"));

export { BatchArgs } from "./batch";
export type Batch = import("./batch").Batch;
export const Batch: typeof import("./batch").Batch = null as any;
utilities.lazyLoad(exports, ["Batch"], () => require("./batch"));

export { ClusterArgs } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { GetAutoscalingPolicyArgs, GetAutoscalingPolicyResult, GetAutoscalingPolicyOutputArgs } from "./getAutoscalingPolicy";
export const getAutoscalingPolicy: typeof import("./getAutoscalingPolicy").getAutoscalingPolicy = null as any;
export const getAutoscalingPolicyOutput: typeof import("./getAutoscalingPolicy").getAutoscalingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingPolicy","getAutoscalingPolicyOutput"], () => require("./getAutoscalingPolicy"));

export { GetAutoscalingPolicyIamPolicyArgs, GetAutoscalingPolicyIamPolicyResult, GetAutoscalingPolicyIamPolicyOutputArgs } from "./getAutoscalingPolicyIamPolicy";
export const getAutoscalingPolicyIamPolicy: typeof import("./getAutoscalingPolicyIamPolicy").getAutoscalingPolicyIamPolicy = null as any;
export const getAutoscalingPolicyIamPolicyOutput: typeof import("./getAutoscalingPolicyIamPolicy").getAutoscalingPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingPolicyIamPolicy","getAutoscalingPolicyIamPolicyOutput"], () => require("./getAutoscalingPolicyIamPolicy"));

export { GetBatchArgs, GetBatchResult, GetBatchOutputArgs } from "./getBatch";
export const getBatch: typeof import("./getBatch").getBatch = null as any;
export const getBatchOutput: typeof import("./getBatch").getBatchOutput = null as any;
utilities.lazyLoad(exports, ["getBatch","getBatchOutput"], () => require("./getBatch"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetJobArgs, GetJobResult, GetJobOutputArgs } from "./getJob";
export const getJob: typeof import("./getJob").getJob = null as any;
export const getJobOutput: typeof import("./getJob").getJobOutput = null as any;
utilities.lazyLoad(exports, ["getJob","getJobOutput"], () => require("./getJob"));

export { GetRegionAutoscalingPolicyIamPolicyArgs, GetRegionAutoscalingPolicyIamPolicyResult, GetRegionAutoscalingPolicyIamPolicyOutputArgs } from "./getRegionAutoscalingPolicyIamPolicy";
export const getRegionAutoscalingPolicyIamPolicy: typeof import("./getRegionAutoscalingPolicyIamPolicy").getRegionAutoscalingPolicyIamPolicy = null as any;
export const getRegionAutoscalingPolicyIamPolicyOutput: typeof import("./getRegionAutoscalingPolicyIamPolicy").getRegionAutoscalingPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRegionAutoscalingPolicyIamPolicy","getRegionAutoscalingPolicyIamPolicyOutput"], () => require("./getRegionAutoscalingPolicyIamPolicy"));

export { GetRegionClusterIamPolicyArgs, GetRegionClusterIamPolicyResult, GetRegionClusterIamPolicyOutputArgs } from "./getRegionClusterIamPolicy";
export const getRegionClusterIamPolicy: typeof import("./getRegionClusterIamPolicy").getRegionClusterIamPolicy = null as any;
export const getRegionClusterIamPolicyOutput: typeof import("./getRegionClusterIamPolicy").getRegionClusterIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRegionClusterIamPolicy","getRegionClusterIamPolicyOutput"], () => require("./getRegionClusterIamPolicy"));

export { GetRegionJobIamPolicyArgs, GetRegionJobIamPolicyResult, GetRegionJobIamPolicyOutputArgs } from "./getRegionJobIamPolicy";
export const getRegionJobIamPolicy: typeof import("./getRegionJobIamPolicy").getRegionJobIamPolicy = null as any;
export const getRegionJobIamPolicyOutput: typeof import("./getRegionJobIamPolicy").getRegionJobIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRegionJobIamPolicy","getRegionJobIamPolicyOutput"], () => require("./getRegionJobIamPolicy"));

export { GetRegionOperationIamPolicyArgs, GetRegionOperationIamPolicyResult, GetRegionOperationIamPolicyOutputArgs } from "./getRegionOperationIamPolicy";
export const getRegionOperationIamPolicy: typeof import("./getRegionOperationIamPolicy").getRegionOperationIamPolicy = null as any;
export const getRegionOperationIamPolicyOutput: typeof import("./getRegionOperationIamPolicy").getRegionOperationIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRegionOperationIamPolicy","getRegionOperationIamPolicyOutput"], () => require("./getRegionOperationIamPolicy"));

export { GetRegionWorkflowTemplateIamPolicyArgs, GetRegionWorkflowTemplateIamPolicyResult, GetRegionWorkflowTemplateIamPolicyOutputArgs } from "./getRegionWorkflowTemplateIamPolicy";
export const getRegionWorkflowTemplateIamPolicy: typeof import("./getRegionWorkflowTemplateIamPolicy").getRegionWorkflowTemplateIamPolicy = null as any;
export const getRegionWorkflowTemplateIamPolicyOutput: typeof import("./getRegionWorkflowTemplateIamPolicy").getRegionWorkflowTemplateIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRegionWorkflowTemplateIamPolicy","getRegionWorkflowTemplateIamPolicyOutput"], () => require("./getRegionWorkflowTemplateIamPolicy"));

export { GetWorkflowTemplateArgs, GetWorkflowTemplateResult, GetWorkflowTemplateOutputArgs } from "./getWorkflowTemplate";
export const getWorkflowTemplate: typeof import("./getWorkflowTemplate").getWorkflowTemplate = null as any;
export const getWorkflowTemplateOutput: typeof import("./getWorkflowTemplate").getWorkflowTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowTemplate","getWorkflowTemplateOutput"], () => require("./getWorkflowTemplate"));

export { GetWorkflowTemplateIamPolicyArgs, GetWorkflowTemplateIamPolicyResult, GetWorkflowTemplateIamPolicyOutputArgs } from "./getWorkflowTemplateIamPolicy";
export const getWorkflowTemplateIamPolicy: typeof import("./getWorkflowTemplateIamPolicy").getWorkflowTemplateIamPolicy = null as any;
export const getWorkflowTemplateIamPolicyOutput: typeof import("./getWorkflowTemplateIamPolicy").getWorkflowTemplateIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowTemplateIamPolicy","getWorkflowTemplateIamPolicyOutput"], () => require("./getWorkflowTemplateIamPolicy"));

export { JobArgs } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { RegionAutoscalingPolicyIamBindingArgs } from "./regionAutoscalingPolicyIamBinding";
export type RegionAutoscalingPolicyIamBinding = import("./regionAutoscalingPolicyIamBinding").RegionAutoscalingPolicyIamBinding;
export const RegionAutoscalingPolicyIamBinding: typeof import("./regionAutoscalingPolicyIamBinding").RegionAutoscalingPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["RegionAutoscalingPolicyIamBinding"], () => require("./regionAutoscalingPolicyIamBinding"));

export { RegionAutoscalingPolicyIamMemberArgs } from "./regionAutoscalingPolicyIamMember";
export type RegionAutoscalingPolicyIamMember = import("./regionAutoscalingPolicyIamMember").RegionAutoscalingPolicyIamMember;
export const RegionAutoscalingPolicyIamMember: typeof import("./regionAutoscalingPolicyIamMember").RegionAutoscalingPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["RegionAutoscalingPolicyIamMember"], () => require("./regionAutoscalingPolicyIamMember"));

export { RegionAutoscalingPolicyIamPolicyArgs } from "./regionAutoscalingPolicyIamPolicy";
export type RegionAutoscalingPolicyIamPolicy = import("./regionAutoscalingPolicyIamPolicy").RegionAutoscalingPolicyIamPolicy;
export const RegionAutoscalingPolicyIamPolicy: typeof import("./regionAutoscalingPolicyIamPolicy").RegionAutoscalingPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["RegionAutoscalingPolicyIamPolicy"], () => require("./regionAutoscalingPolicyIamPolicy"));

export { RegionClusterIamBindingArgs } from "./regionClusterIamBinding";
export type RegionClusterIamBinding = import("./regionClusterIamBinding").RegionClusterIamBinding;
export const RegionClusterIamBinding: typeof import("./regionClusterIamBinding").RegionClusterIamBinding = null as any;
utilities.lazyLoad(exports, ["RegionClusterIamBinding"], () => require("./regionClusterIamBinding"));

export { RegionClusterIamMemberArgs } from "./regionClusterIamMember";
export type RegionClusterIamMember = import("./regionClusterIamMember").RegionClusterIamMember;
export const RegionClusterIamMember: typeof import("./regionClusterIamMember").RegionClusterIamMember = null as any;
utilities.lazyLoad(exports, ["RegionClusterIamMember"], () => require("./regionClusterIamMember"));

export { RegionClusterIamPolicyArgs } from "./regionClusterIamPolicy";
export type RegionClusterIamPolicy = import("./regionClusterIamPolicy").RegionClusterIamPolicy;
export const RegionClusterIamPolicy: typeof import("./regionClusterIamPolicy").RegionClusterIamPolicy = null as any;
utilities.lazyLoad(exports, ["RegionClusterIamPolicy"], () => require("./regionClusterIamPolicy"));

export { RegionJobIamBindingArgs } from "./regionJobIamBinding";
export type RegionJobIamBinding = import("./regionJobIamBinding").RegionJobIamBinding;
export const RegionJobIamBinding: typeof import("./regionJobIamBinding").RegionJobIamBinding = null as any;
utilities.lazyLoad(exports, ["RegionJobIamBinding"], () => require("./regionJobIamBinding"));

export { RegionJobIamMemberArgs } from "./regionJobIamMember";
export type RegionJobIamMember = import("./regionJobIamMember").RegionJobIamMember;
export const RegionJobIamMember: typeof import("./regionJobIamMember").RegionJobIamMember = null as any;
utilities.lazyLoad(exports, ["RegionJobIamMember"], () => require("./regionJobIamMember"));

export { RegionJobIamPolicyArgs } from "./regionJobIamPolicy";
export type RegionJobIamPolicy = import("./regionJobIamPolicy").RegionJobIamPolicy;
export const RegionJobIamPolicy: typeof import("./regionJobIamPolicy").RegionJobIamPolicy = null as any;
utilities.lazyLoad(exports, ["RegionJobIamPolicy"], () => require("./regionJobIamPolicy"));

export { RegionOperationIamBindingArgs } from "./regionOperationIamBinding";
export type RegionOperationIamBinding = import("./regionOperationIamBinding").RegionOperationIamBinding;
export const RegionOperationIamBinding: typeof import("./regionOperationIamBinding").RegionOperationIamBinding = null as any;
utilities.lazyLoad(exports, ["RegionOperationIamBinding"], () => require("./regionOperationIamBinding"));

export { RegionOperationIamMemberArgs } from "./regionOperationIamMember";
export type RegionOperationIamMember = import("./regionOperationIamMember").RegionOperationIamMember;
export const RegionOperationIamMember: typeof import("./regionOperationIamMember").RegionOperationIamMember = null as any;
utilities.lazyLoad(exports, ["RegionOperationIamMember"], () => require("./regionOperationIamMember"));

export { RegionOperationIamPolicyArgs } from "./regionOperationIamPolicy";
export type RegionOperationIamPolicy = import("./regionOperationIamPolicy").RegionOperationIamPolicy;
export const RegionOperationIamPolicy: typeof import("./regionOperationIamPolicy").RegionOperationIamPolicy = null as any;
utilities.lazyLoad(exports, ["RegionOperationIamPolicy"], () => require("./regionOperationIamPolicy"));

export { RegionWorkflowTemplateIamBindingArgs } from "./regionWorkflowTemplateIamBinding";
export type RegionWorkflowTemplateIamBinding = import("./regionWorkflowTemplateIamBinding").RegionWorkflowTemplateIamBinding;
export const RegionWorkflowTemplateIamBinding: typeof import("./regionWorkflowTemplateIamBinding").RegionWorkflowTemplateIamBinding = null as any;
utilities.lazyLoad(exports, ["RegionWorkflowTemplateIamBinding"], () => require("./regionWorkflowTemplateIamBinding"));

export { RegionWorkflowTemplateIamMemberArgs } from "./regionWorkflowTemplateIamMember";
export type RegionWorkflowTemplateIamMember = import("./regionWorkflowTemplateIamMember").RegionWorkflowTemplateIamMember;
export const RegionWorkflowTemplateIamMember: typeof import("./regionWorkflowTemplateIamMember").RegionWorkflowTemplateIamMember = null as any;
utilities.lazyLoad(exports, ["RegionWorkflowTemplateIamMember"], () => require("./regionWorkflowTemplateIamMember"));

export { RegionWorkflowTemplateIamPolicyArgs } from "./regionWorkflowTemplateIamPolicy";
export type RegionWorkflowTemplateIamPolicy = import("./regionWorkflowTemplateIamPolicy").RegionWorkflowTemplateIamPolicy;
export const RegionWorkflowTemplateIamPolicy: typeof import("./regionWorkflowTemplateIamPolicy").RegionWorkflowTemplateIamPolicy = null as any;
utilities.lazyLoad(exports, ["RegionWorkflowTemplateIamPolicy"], () => require("./regionWorkflowTemplateIamPolicy"));

export { WorkflowTemplateArgs } from "./workflowTemplate";
export type WorkflowTemplate = import("./workflowTemplate").WorkflowTemplate;
export const WorkflowTemplate: typeof import("./workflowTemplate").WorkflowTemplate = null as any;
utilities.lazyLoad(exports, ["WorkflowTemplate"], () => require("./workflowTemplate"));

export { WorkflowTemplateIamBindingArgs } from "./workflowTemplateIamBinding";
export type WorkflowTemplateIamBinding = import("./workflowTemplateIamBinding").WorkflowTemplateIamBinding;
export const WorkflowTemplateIamBinding: typeof import("./workflowTemplateIamBinding").WorkflowTemplateIamBinding = null as any;
utilities.lazyLoad(exports, ["WorkflowTemplateIamBinding"], () => require("./workflowTemplateIamBinding"));

export { WorkflowTemplateIamMemberArgs } from "./workflowTemplateIamMember";
export type WorkflowTemplateIamMember = import("./workflowTemplateIamMember").WorkflowTemplateIamMember;
export const WorkflowTemplateIamMember: typeof import("./workflowTemplateIamMember").WorkflowTemplateIamMember = null as any;
utilities.lazyLoad(exports, ["WorkflowTemplateIamMember"], () => require("./workflowTemplateIamMember"));

export { WorkflowTemplateIamPolicyArgs } from "./workflowTemplateIamPolicy";
export type WorkflowTemplateIamPolicy = import("./workflowTemplateIamPolicy").WorkflowTemplateIamPolicy;
export const WorkflowTemplateIamPolicy: typeof import("./workflowTemplateIamPolicy").WorkflowTemplateIamPolicy = null as any;
utilities.lazyLoad(exports, ["WorkflowTemplateIamPolicy"], () => require("./workflowTemplateIamPolicy"));


// Export enums:
export * from "../../types/enums/dataproc/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:dataproc/v1:AutoscalingPolicy":
                return new AutoscalingPolicy(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:AutoscalingPolicyIamBinding":
                return new AutoscalingPolicyIamBinding(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:AutoscalingPolicyIamMember":
                return new AutoscalingPolicyIamMember(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:AutoscalingPolicyIamPolicy":
                return new AutoscalingPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:Batch":
                return new Batch(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:Job":
                return new Job(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionAutoscalingPolicyIamBinding":
                return new RegionAutoscalingPolicyIamBinding(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionAutoscalingPolicyIamMember":
                return new RegionAutoscalingPolicyIamMember(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionAutoscalingPolicyIamPolicy":
                return new RegionAutoscalingPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionClusterIamBinding":
                return new RegionClusterIamBinding(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionClusterIamMember":
                return new RegionClusterIamMember(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionClusterIamPolicy":
                return new RegionClusterIamPolicy(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionJobIamBinding":
                return new RegionJobIamBinding(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionJobIamMember":
                return new RegionJobIamMember(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionJobIamPolicy":
                return new RegionJobIamPolicy(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionOperationIamBinding":
                return new RegionOperationIamBinding(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionOperationIamMember":
                return new RegionOperationIamMember(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionOperationIamPolicy":
                return new RegionOperationIamPolicy(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionWorkflowTemplateIamBinding":
                return new RegionWorkflowTemplateIamBinding(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionWorkflowTemplateIamMember":
                return new RegionWorkflowTemplateIamMember(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:RegionWorkflowTemplateIamPolicy":
                return new RegionWorkflowTemplateIamPolicy(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:WorkflowTemplate":
                return new WorkflowTemplate(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:WorkflowTemplateIamBinding":
                return new WorkflowTemplateIamBinding(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:WorkflowTemplateIamMember":
                return new WorkflowTemplateIamMember(name, <any>undefined, { urn })
            case "google-native:dataproc/v1:WorkflowTemplateIamPolicy":
                return new WorkflowTemplateIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "dataproc/v1", _module)
