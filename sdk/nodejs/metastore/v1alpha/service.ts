// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a metastore service in a project and location.
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:metastore/v1alpha:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }


    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.locationsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationsId'");
            }
            if ((!args || args.projectsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectsId'");
            }
            if ((!args || args.servicesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicesId'");
            }
            inputs["artifactGcsUri"] = args ? args.artifactGcsUri : undefined;
            inputs["createTime"] = args ? args.createTime : undefined;
            inputs["endpointUri"] = args ? args.endpointUri : undefined;
            inputs["hiveMetastoreConfig"] = args ? args.hiveMetastoreConfig : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["locationsId"] = args ? args.locationsId : undefined;
            inputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            inputs["metadataIntegration"] = args ? args.metadataIntegration : undefined;
            inputs["metadataManagementActivity"] = args ? args.metadataManagementActivity : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["projectsId"] = args ? args.projectsId : undefined;
            inputs["releaseChannel"] = args ? args.releaseChannel : undefined;
            inputs["servicesId"] = args ? args.servicesId : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["stateMessage"] = args ? args.stateMessage : undefined;
            inputs["tier"] = args ? args.tier : undefined;
            inputs["uid"] = args ? args.uid : undefined;
            inputs["updateTime"] = args ? args.updateTime : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Service.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
     */
    readonly artifactGcsUri?: pulumi.Input<string>;
    /**
     * Output only. The time when the metastore service was created.
     */
    readonly createTime?: pulumi.Input<string>;
    /**
     * Output only. The URI of the endpoint used to access the metastore service.
     */
    readonly endpointUri?: pulumi.Input<string>;
    /**
     * Configuration information specific to running Hive metastore software as the metastore service.
     */
    readonly hiveMetastoreConfig?: pulumi.Input<inputs.metastore.v1alpha.HiveMetastoreConfig>;
    /**
     * User-defined labels for the metastore service.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly locationsId: pulumi.Input<string>;
    /**
     * The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time.
     */
    readonly maintenanceWindow?: pulumi.Input<inputs.metastore.v1alpha.MaintenanceWindow>;
    /**
     * The setting that defines how metastore metadata should be integrated with external services and systems.
     */
    readonly metadataIntegration?: pulumi.Input<inputs.metastore.v1alpha.MetadataIntegration>;
    /**
     * Output only. The metadata management activities of the metastore service.
     */
    readonly metadataManagementActivity?: pulumi.Input<inputs.metastore.v1alpha.MetadataManagementActivity>;
    /**
     * Immutable. The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
     */
    readonly network?: pulumi.Input<string>;
    /**
     * The TCP port at which the metastore service is reached. Default: 9083.
     */
    readonly port?: pulumi.Input<number>;
    readonly projectsId: pulumi.Input<string>;
    /**
     * Immutable. The release channel of the service. If unspecified, defaults to STABLE.
     */
    readonly releaseChannel?: pulumi.Input<string>;
    readonly servicesId: pulumi.Input<string>;
    /**
     * Output only. The current state of the metastore service.
     */
    readonly state?: pulumi.Input<string>;
    /**
     * Output only. Additional information about the current state of the metastore service, if available.
     */
    readonly stateMessage?: pulumi.Input<string>;
    /**
     * The tier of the service.
     */
    readonly tier?: pulumi.Input<string>;
    /**
     * Output only. The globally unique resource identifier of the metastore service.
     */
    readonly uid?: pulumi.Input<string>;
    /**
     * Output only. The time when the metastore service was last updated.
     */
    readonly updateTime?: pulumi.Input<string>;
}
