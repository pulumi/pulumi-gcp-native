// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new MetadataImport in a given project and location.
 */
export class ServiceMetadataImport extends pulumi.CustomResource {
    /**
     * Get an existing ServiceMetadataImport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ServiceMetadataImport {
        return new ServiceMetadataImport(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp-native:metastore/v1alpha:ServiceMetadataImport';

    /**
     * Returns true if the given object is an instance of ServiceMetadataImport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceMetadataImport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceMetadataImport.__pulumiType;
    }

    /**
     * The time when the metadata import was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Immutable. A database dump from a pre-existing metastore's database.
     */
    public readonly databaseDump!: pulumi.Output<outputs.metastore.v1alpha.DatabaseDumpResponse>;
    /**
     * The description of the metadata import.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The current state of the metadata import.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The time when the metadata import was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a ServiceMetadataImport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceMetadataImportArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.locationsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationsId'");
            }
            if ((!args || args.metadataImportsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadataImportsId'");
            }
            if ((!args || args.projectsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectsId'");
            }
            if ((!args || args.servicesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicesId'");
            }
            inputs["databaseDump"] = args ? args.databaseDump : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["locationsId"] = args ? args.locationsId : undefined;
            inputs["metadataImportsId"] = args ? args.metadataImportsId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["projectsId"] = args ? args.projectsId : undefined;
            inputs["servicesId"] = args ? args.servicesId : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        } else {
            inputs["createTime"] = undefined /*out*/;
            inputs["databaseDump"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ServiceMetadataImport.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a ServiceMetadataImport resource.
 */
export interface ServiceMetadataImportArgs {
    /**
     * Immutable. A database dump from a pre-existing metastore's database.
     */
    readonly databaseDump?: pulumi.Input<inputs.metastore.v1alpha.DatabaseDump>;
    /**
     * The description of the metadata import.
     */
    readonly description?: pulumi.Input<string>;
    readonly locationsId: pulumi.Input<string>;
    readonly metadataImportsId: pulumi.Input<string>;
    /**
     * Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
     */
    readonly name?: pulumi.Input<string>;
    readonly projectsId: pulumi.Input<string>;
    readonly servicesId: pulumi.Input<string>;
}
