// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { BackupArgs } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;

export { FederationArgs } from "./federation";
export type Federation = import("./federation").Federation;
export const Federation: typeof import("./federation").Federation = null as any;

export { FederationIamBindingArgs } from "./federationIamBinding";
export type FederationIamBinding = import("./federationIamBinding").FederationIamBinding;
export const FederationIamBinding: typeof import("./federationIamBinding").FederationIamBinding = null as any;

export { FederationIamMemberArgs } from "./federationIamMember";
export type FederationIamMember = import("./federationIamMember").FederationIamMember;
export const FederationIamMember: typeof import("./federationIamMember").FederationIamMember = null as any;

export { FederationIamPolicyArgs } from "./federationIamPolicy";
export type FederationIamPolicy = import("./federationIamPolicy").FederationIamPolicy;
export const FederationIamPolicy: typeof import("./federationIamPolicy").FederationIamPolicy = null as any;

export { GetBackupArgs, GetBackupResult, GetBackupOutputArgs } from "./getBackup";
export const getBackup: typeof import("./getBackup").getBackup = null as any;
export const getBackupOutput: typeof import("./getBackup").getBackupOutput = null as any;

export { GetFederationArgs, GetFederationResult, GetFederationOutputArgs } from "./getFederation";
export const getFederation: typeof import("./getFederation").getFederation = null as any;
export const getFederationOutput: typeof import("./getFederation").getFederationOutput = null as any;

export { GetFederationIamPolicyArgs, GetFederationIamPolicyResult, GetFederationIamPolicyOutputArgs } from "./getFederationIamPolicy";
export const getFederationIamPolicy: typeof import("./getFederationIamPolicy").getFederationIamPolicy = null as any;
export const getFederationIamPolicyOutput: typeof import("./getFederationIamPolicy").getFederationIamPolicyOutput = null as any;

export { GetMetadataImportArgs, GetMetadataImportResult, GetMetadataImportOutputArgs } from "./getMetadataImport";
export const getMetadataImport: typeof import("./getMetadataImport").getMetadataImport = null as any;
export const getMetadataImportOutput: typeof import("./getMetadataImport").getMetadataImportOutput = null as any;

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;

export { GetServiceBackupIamPolicyArgs, GetServiceBackupIamPolicyResult, GetServiceBackupIamPolicyOutputArgs } from "./getServiceBackupIamPolicy";
export const getServiceBackupIamPolicy: typeof import("./getServiceBackupIamPolicy").getServiceBackupIamPolicy = null as any;
export const getServiceBackupIamPolicyOutput: typeof import("./getServiceBackupIamPolicy").getServiceBackupIamPolicyOutput = null as any;

export { GetServiceDatabaseIamPolicyArgs, GetServiceDatabaseIamPolicyResult, GetServiceDatabaseIamPolicyOutputArgs } from "./getServiceDatabaseIamPolicy";
export const getServiceDatabaseIamPolicy: typeof import("./getServiceDatabaseIamPolicy").getServiceDatabaseIamPolicy = null as any;
export const getServiceDatabaseIamPolicyOutput: typeof import("./getServiceDatabaseIamPolicy").getServiceDatabaseIamPolicyOutput = null as any;

export { GetServiceDatabaseTableIamPolicyArgs, GetServiceDatabaseTableIamPolicyResult, GetServiceDatabaseTableIamPolicyOutputArgs } from "./getServiceDatabaseTableIamPolicy";
export const getServiceDatabaseTableIamPolicy: typeof import("./getServiceDatabaseTableIamPolicy").getServiceDatabaseTableIamPolicy = null as any;
export const getServiceDatabaseTableIamPolicyOutput: typeof import("./getServiceDatabaseTableIamPolicy").getServiceDatabaseTableIamPolicyOutput = null as any;

export { GetServiceIamPolicyArgs, GetServiceIamPolicyResult, GetServiceIamPolicyOutputArgs } from "./getServiceIamPolicy";
export const getServiceIamPolicy: typeof import("./getServiceIamPolicy").getServiceIamPolicy = null as any;
export const getServiceIamPolicyOutput: typeof import("./getServiceIamPolicy").getServiceIamPolicyOutput = null as any;

export { MetadataImportArgs } from "./metadataImport";
export type MetadataImport = import("./metadataImport").MetadataImport;
export const MetadataImport: typeof import("./metadataImport").MetadataImport = null as any;

export { ServiceArgs } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;

export { ServiceBackupIamBindingArgs } from "./serviceBackupIamBinding";
export type ServiceBackupIamBinding = import("./serviceBackupIamBinding").ServiceBackupIamBinding;
export const ServiceBackupIamBinding: typeof import("./serviceBackupIamBinding").ServiceBackupIamBinding = null as any;

export { ServiceBackupIamMemberArgs } from "./serviceBackupIamMember";
export type ServiceBackupIamMember = import("./serviceBackupIamMember").ServiceBackupIamMember;
export const ServiceBackupIamMember: typeof import("./serviceBackupIamMember").ServiceBackupIamMember = null as any;

export { ServiceBackupIamPolicyArgs } from "./serviceBackupIamPolicy";
export type ServiceBackupIamPolicy = import("./serviceBackupIamPolicy").ServiceBackupIamPolicy;
export const ServiceBackupIamPolicy: typeof import("./serviceBackupIamPolicy").ServiceBackupIamPolicy = null as any;

export { ServiceDatabaseIamBindingArgs } from "./serviceDatabaseIamBinding";
export type ServiceDatabaseIamBinding = import("./serviceDatabaseIamBinding").ServiceDatabaseIamBinding;
export const ServiceDatabaseIamBinding: typeof import("./serviceDatabaseIamBinding").ServiceDatabaseIamBinding = null as any;

export { ServiceDatabaseIamMemberArgs } from "./serviceDatabaseIamMember";
export type ServiceDatabaseIamMember = import("./serviceDatabaseIamMember").ServiceDatabaseIamMember;
export const ServiceDatabaseIamMember: typeof import("./serviceDatabaseIamMember").ServiceDatabaseIamMember = null as any;

export { ServiceDatabaseIamPolicyArgs } from "./serviceDatabaseIamPolicy";
export type ServiceDatabaseIamPolicy = import("./serviceDatabaseIamPolicy").ServiceDatabaseIamPolicy;
export const ServiceDatabaseIamPolicy: typeof import("./serviceDatabaseIamPolicy").ServiceDatabaseIamPolicy = null as any;

export { ServiceDatabaseTableIamBindingArgs } from "./serviceDatabaseTableIamBinding";
export type ServiceDatabaseTableIamBinding = import("./serviceDatabaseTableIamBinding").ServiceDatabaseTableIamBinding;
export const ServiceDatabaseTableIamBinding: typeof import("./serviceDatabaseTableIamBinding").ServiceDatabaseTableIamBinding = null as any;

export { ServiceDatabaseTableIamMemberArgs } from "./serviceDatabaseTableIamMember";
export type ServiceDatabaseTableIamMember = import("./serviceDatabaseTableIamMember").ServiceDatabaseTableIamMember;
export const ServiceDatabaseTableIamMember: typeof import("./serviceDatabaseTableIamMember").ServiceDatabaseTableIamMember = null as any;

export { ServiceDatabaseTableIamPolicyArgs } from "./serviceDatabaseTableIamPolicy";
export type ServiceDatabaseTableIamPolicy = import("./serviceDatabaseTableIamPolicy").ServiceDatabaseTableIamPolicy;
export const ServiceDatabaseTableIamPolicy: typeof import("./serviceDatabaseTableIamPolicy").ServiceDatabaseTableIamPolicy = null as any;

export { ServiceIamBindingArgs } from "./serviceIamBinding";
export type ServiceIamBinding = import("./serviceIamBinding").ServiceIamBinding;
export const ServiceIamBinding: typeof import("./serviceIamBinding").ServiceIamBinding = null as any;

export { ServiceIamMemberArgs } from "./serviceIamMember";
export type ServiceIamMember = import("./serviceIamMember").ServiceIamMember;
export const ServiceIamMember: typeof import("./serviceIamMember").ServiceIamMember = null as any;

export { ServiceIamPolicyArgs } from "./serviceIamPolicy";
export type ServiceIamPolicy = import("./serviceIamPolicy").ServiceIamPolicy;
export const ServiceIamPolicy: typeof import("./serviceIamPolicy").ServiceIamPolicy = null as any;

utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));
utilities.lazyLoad(exports, ["Federation"], () => require("./federation"));
utilities.lazyLoad(exports, ["FederationIamBinding"], () => require("./federationIamBinding"));
utilities.lazyLoad(exports, ["FederationIamMember"], () => require("./federationIamMember"));
utilities.lazyLoad(exports, ["FederationIamPolicy"], () => require("./federationIamPolicy"));
utilities.lazyLoad(exports, ["getBackup","getBackupOutput"], () => require("./getBackup"));
utilities.lazyLoad(exports, ["getFederation","getFederationOutput"], () => require("./getFederation"));
utilities.lazyLoad(exports, ["getFederationIamPolicy","getFederationIamPolicyOutput"], () => require("./getFederationIamPolicy"));
utilities.lazyLoad(exports, ["getMetadataImport","getMetadataImportOutput"], () => require("./getMetadataImport"));
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));
utilities.lazyLoad(exports, ["getServiceBackupIamPolicy","getServiceBackupIamPolicyOutput"], () => require("./getServiceBackupIamPolicy"));
utilities.lazyLoad(exports, ["getServiceDatabaseIamPolicy","getServiceDatabaseIamPolicyOutput"], () => require("./getServiceDatabaseIamPolicy"));
utilities.lazyLoad(exports, ["getServiceDatabaseTableIamPolicy","getServiceDatabaseTableIamPolicyOutput"], () => require("./getServiceDatabaseTableIamPolicy"));
utilities.lazyLoad(exports, ["getServiceIamPolicy","getServiceIamPolicyOutput"], () => require("./getServiceIamPolicy"));
utilities.lazyLoad(exports, ["MetadataImport"], () => require("./metadataImport"));
utilities.lazyLoad(exports, ["Service"], () => require("./service"));
utilities.lazyLoad(exports, ["ServiceBackupIamBinding"], () => require("./serviceBackupIamBinding"));
utilities.lazyLoad(exports, ["ServiceBackupIamMember"], () => require("./serviceBackupIamMember"));
utilities.lazyLoad(exports, ["ServiceBackupIamPolicy"], () => require("./serviceBackupIamPolicy"));
utilities.lazyLoad(exports, ["ServiceDatabaseIamBinding"], () => require("./serviceDatabaseIamBinding"));
utilities.lazyLoad(exports, ["ServiceDatabaseIamMember"], () => require("./serviceDatabaseIamMember"));
utilities.lazyLoad(exports, ["ServiceDatabaseIamPolicy"], () => require("./serviceDatabaseIamPolicy"));
utilities.lazyLoad(exports, ["ServiceDatabaseTableIamBinding"], () => require("./serviceDatabaseTableIamBinding"));
utilities.lazyLoad(exports, ["ServiceDatabaseTableIamMember"], () => require("./serviceDatabaseTableIamMember"));
utilities.lazyLoad(exports, ["ServiceDatabaseTableIamPolicy"], () => require("./serviceDatabaseTableIamPolicy"));
utilities.lazyLoad(exports, ["ServiceIamBinding"], () => require("./serviceIamBinding"));
utilities.lazyLoad(exports, ["ServiceIamMember"], () => require("./serviceIamMember"));
utilities.lazyLoad(exports, ["ServiceIamPolicy"], () => require("./serviceIamPolicy"));

// Export enums:
export * from "../../types/enums/metastore/v1alpha";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:metastore/v1alpha:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:Federation":
                return new Federation(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:FederationIamBinding":
                return new FederationIamBinding(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:FederationIamMember":
                return new FederationIamMember(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:FederationIamPolicy":
                return new FederationIamPolicy(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:MetadataImport":
                return new MetadataImport(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:Service":
                return new Service(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceBackupIamBinding":
                return new ServiceBackupIamBinding(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceBackupIamMember":
                return new ServiceBackupIamMember(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceBackupIamPolicy":
                return new ServiceBackupIamPolicy(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceDatabaseIamBinding":
                return new ServiceDatabaseIamBinding(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceDatabaseIamMember":
                return new ServiceDatabaseIamMember(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceDatabaseIamPolicy":
                return new ServiceDatabaseIamPolicy(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceDatabaseTableIamBinding":
                return new ServiceDatabaseTableIamBinding(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceDatabaseTableIamMember":
                return new ServiceDatabaseTableIamMember(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceDatabaseTableIamPolicy":
                return new ServiceDatabaseTableIamPolicy(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceIamBinding":
                return new ServiceIamBinding(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceIamMember":
                return new ServiceIamMember(name, <any>undefined, { urn })
            case "google-native:metastore/v1alpha:ServiceIamPolicy":
                return new ServiceIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "metastore/v1alpha", _module)
