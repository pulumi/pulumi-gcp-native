// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets details of a single Instance.
 */
export function getInstance(args: GetInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:notebooks/v2:getInstance", {
        "instanceId": args.instanceId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetInstanceArgs {
    instanceId: string;
    location: string;
    project?: string;
}

export interface GetInstanceResult {
    /**
     * Instance creation time.
     */
    readonly createTime: string;
    /**
     * Email address of entity that sent original CreateInstance request.
     */
    readonly creator: string;
    /**
     * Optional. If true, the notebook instance will not register with the proxy.
     */
    readonly disableProxyAccess: boolean;
    /**
     * Optional. Compute Engine setup for the notebook. Uses notebook-defined fields.
     */
    readonly gceSetup: outputs.notebooks.v2.GceSetupResponse;
    /**
     * Additional information about instance health. Example: healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status": "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }
     */
    readonly healthInfo: {[key: string]: string};
    /**
     * Instance health_state.
     */
    readonly healthState: string;
    /**
     * Optional. Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.
     */
    readonly instanceOwners: string[];
    /**
     * Optional. Labels to apply to this instance. These can be later modified by the UpdateInstance method.
     */
    readonly labels: {[key: string]: string};
    /**
     * The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
     */
    readonly name: string;
    /**
     * The proxy endpoint that is used to access the Jupyter notebook.
     */
    readonly proxyUri: string;
    /**
     * The state of this instance.
     */
    readonly state: string;
    /**
     * Instance update time.
     */
    readonly updateTime: string;
    /**
     * The upgrade history of this instance.
     */
    readonly upgradeHistory: outputs.notebooks.v2.UpgradeHistoryEntryResponse[];
}
/**
 * Gets details of a single Instance.
 */
export function getInstanceOutput(args: GetInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstanceResult> {
    return pulumi.output(args).apply((a: any) => getInstance(a, opts))
}

export interface GetInstanceOutputArgs {
    instanceId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
