// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { EnvironmentArgs } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;

export { ExecutionArgs } from "./execution";
export type Execution = import("./execution").Execution;
export const Execution: typeof import("./execution").Execution = null as any;

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;

export { GetExecutionArgs, GetExecutionResult, GetExecutionOutputArgs } from "./getExecution";
export const getExecution: typeof import("./getExecution").getExecution = null as any;
export const getExecutionOutput: typeof import("./getExecution").getExecutionOutput = null as any;

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;

export { GetInstanceIamPolicyArgs, GetInstanceIamPolicyResult, GetInstanceIamPolicyOutputArgs } from "./getInstanceIamPolicy";
export const getInstanceIamPolicy: typeof import("./getInstanceIamPolicy").getInstanceIamPolicy = null as any;
export const getInstanceIamPolicyOutput: typeof import("./getInstanceIamPolicy").getInstanceIamPolicyOutput = null as any;

export { GetRuntimeArgs, GetRuntimeResult, GetRuntimeOutputArgs } from "./getRuntime";
export const getRuntime: typeof import("./getRuntime").getRuntime = null as any;
export const getRuntimeOutput: typeof import("./getRuntime").getRuntimeOutput = null as any;

export { GetRuntimeIamPolicyArgs, GetRuntimeIamPolicyResult, GetRuntimeIamPolicyOutputArgs } from "./getRuntimeIamPolicy";
export const getRuntimeIamPolicy: typeof import("./getRuntimeIamPolicy").getRuntimeIamPolicy = null as any;
export const getRuntimeIamPolicyOutput: typeof import("./getRuntimeIamPolicy").getRuntimeIamPolicyOutput = null as any;

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;

export { InstanceArgs } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;

export { InstanceIamBindingArgs } from "./instanceIamBinding";
export type InstanceIamBinding = import("./instanceIamBinding").InstanceIamBinding;
export const InstanceIamBinding: typeof import("./instanceIamBinding").InstanceIamBinding = null as any;

export { InstanceIamMemberArgs } from "./instanceIamMember";
export type InstanceIamMember = import("./instanceIamMember").InstanceIamMember;
export const InstanceIamMember: typeof import("./instanceIamMember").InstanceIamMember = null as any;

export { InstanceIamPolicyArgs } from "./instanceIamPolicy";
export type InstanceIamPolicy = import("./instanceIamPolicy").InstanceIamPolicy;
export const InstanceIamPolicy: typeof import("./instanceIamPolicy").InstanceIamPolicy = null as any;

export { RuntimeArgs } from "./runtime";
export type Runtime = import("./runtime").Runtime;
export const Runtime: typeof import("./runtime").Runtime = null as any;

export { RuntimeIamBindingArgs } from "./runtimeIamBinding";
export type RuntimeIamBinding = import("./runtimeIamBinding").RuntimeIamBinding;
export const RuntimeIamBinding: typeof import("./runtimeIamBinding").RuntimeIamBinding = null as any;

export { RuntimeIamMemberArgs } from "./runtimeIamMember";
export type RuntimeIamMember = import("./runtimeIamMember").RuntimeIamMember;
export const RuntimeIamMember: typeof import("./runtimeIamMember").RuntimeIamMember = null as any;

export { RuntimeIamPolicyArgs } from "./runtimeIamPolicy";
export type RuntimeIamPolicy = import("./runtimeIamPolicy").RuntimeIamPolicy;
export const RuntimeIamPolicy: typeof import("./runtimeIamPolicy").RuntimeIamPolicy = null as any;

export { ScheduleArgs } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;

utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));
utilities.lazyLoad(exports, ["Execution"], () => require("./execution"));
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));
utilities.lazyLoad(exports, ["getExecution","getExecutionOutput"], () => require("./getExecution"));
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));
utilities.lazyLoad(exports, ["getInstanceIamPolicy","getInstanceIamPolicyOutput"], () => require("./getInstanceIamPolicy"));
utilities.lazyLoad(exports, ["getRuntime","getRuntimeOutput"], () => require("./getRuntime"));
utilities.lazyLoad(exports, ["getRuntimeIamPolicy","getRuntimeIamPolicyOutput"], () => require("./getRuntimeIamPolicy"));
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
utilities.lazyLoad(exports, ["InstanceIamBinding"], () => require("./instanceIamBinding"));
utilities.lazyLoad(exports, ["InstanceIamMember"], () => require("./instanceIamMember"));
utilities.lazyLoad(exports, ["InstanceIamPolicy"], () => require("./instanceIamPolicy"));
utilities.lazyLoad(exports, ["Runtime"], () => require("./runtime"));
utilities.lazyLoad(exports, ["RuntimeIamBinding"], () => require("./runtimeIamBinding"));
utilities.lazyLoad(exports, ["RuntimeIamMember"], () => require("./runtimeIamMember"));
utilities.lazyLoad(exports, ["RuntimeIamPolicy"], () => require("./runtimeIamPolicy"));
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

// Export enums:
export * from "../../types/enums/notebooks/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:notebooks/v1:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "google-native:notebooks/v1:Execution":
                return new Execution(name, <any>undefined, { urn })
            case "google-native:notebooks/v1:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "google-native:notebooks/v1:InstanceIamBinding":
                return new InstanceIamBinding(name, <any>undefined, { urn })
            case "google-native:notebooks/v1:InstanceIamMember":
                return new InstanceIamMember(name, <any>undefined, { urn })
            case "google-native:notebooks/v1:InstanceIamPolicy":
                return new InstanceIamPolicy(name, <any>undefined, { urn })
            case "google-native:notebooks/v1:Runtime":
                return new Runtime(name, <any>undefined, { urn })
            case "google-native:notebooks/v1:RuntimeIamBinding":
                return new RuntimeIamBinding(name, <any>undefined, { urn })
            case "google-native:notebooks/v1:RuntimeIamMember":
                return new RuntimeIamMember(name, <any>undefined, { urn })
            case "google-native:notebooks/v1:RuntimeIamPolicy":
                return new RuntimeIamPolicy(name, <any>undefined, { urn })
            case "google-native:notebooks/v1:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "notebooks/v1", _module)
