// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AccessLevelArgs } from "./accessLevel";
export type AccessLevel = import("./accessLevel").AccessLevel;
export const AccessLevel: typeof import("./accessLevel").AccessLevel = null as any;
utilities.lazyLoad(exports, ["AccessLevel"], () => require("./accessLevel"));

export { AccessPolicyArgs } from "./accessPolicy";
export type AccessPolicy = import("./accessPolicy").AccessPolicy;
export const AccessPolicy: typeof import("./accessPolicy").AccessPolicy = null as any;
utilities.lazyLoad(exports, ["AccessPolicy"], () => require("./accessPolicy"));

export { AccessPolicyIamBindingArgs } from "./accessPolicyIamBinding";
export type AccessPolicyIamBinding = import("./accessPolicyIamBinding").AccessPolicyIamBinding;
export const AccessPolicyIamBinding: typeof import("./accessPolicyIamBinding").AccessPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["AccessPolicyIamBinding"], () => require("./accessPolicyIamBinding"));

export { AccessPolicyIamMemberArgs } from "./accessPolicyIamMember";
export type AccessPolicyIamMember = import("./accessPolicyIamMember").AccessPolicyIamMember;
export const AccessPolicyIamMember: typeof import("./accessPolicyIamMember").AccessPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["AccessPolicyIamMember"], () => require("./accessPolicyIamMember"));

export { AccessPolicyIamPolicyArgs } from "./accessPolicyIamPolicy";
export type AccessPolicyIamPolicy = import("./accessPolicyIamPolicy").AccessPolicyIamPolicy;
export const AccessPolicyIamPolicy: typeof import("./accessPolicyIamPolicy").AccessPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["AccessPolicyIamPolicy"], () => require("./accessPolicyIamPolicy"));

export { AuthorizedOrgsDescArgs } from "./authorizedOrgsDesc";
export type AuthorizedOrgsDesc = import("./authorizedOrgsDesc").AuthorizedOrgsDesc;
export const AuthorizedOrgsDesc: typeof import("./authorizedOrgsDesc").AuthorizedOrgsDesc = null as any;
utilities.lazyLoad(exports, ["AuthorizedOrgsDesc"], () => require("./authorizedOrgsDesc"));

export { GcpUserAccessBindingArgs } from "./gcpUserAccessBinding";
export type GcpUserAccessBinding = import("./gcpUserAccessBinding").GcpUserAccessBinding;
export const GcpUserAccessBinding: typeof import("./gcpUserAccessBinding").GcpUserAccessBinding = null as any;
utilities.lazyLoad(exports, ["GcpUserAccessBinding"], () => require("./gcpUserAccessBinding"));

export { GetAccessLevelArgs, GetAccessLevelResult, GetAccessLevelOutputArgs } from "./getAccessLevel";
export const getAccessLevel: typeof import("./getAccessLevel").getAccessLevel = null as any;
export const getAccessLevelOutput: typeof import("./getAccessLevel").getAccessLevelOutput = null as any;
utilities.lazyLoad(exports, ["getAccessLevel","getAccessLevelOutput"], () => require("./getAccessLevel"));

export { GetAccessPolicyArgs, GetAccessPolicyResult, GetAccessPolicyOutputArgs } from "./getAccessPolicy";
export const getAccessPolicy: typeof import("./getAccessPolicy").getAccessPolicy = null as any;
export const getAccessPolicyOutput: typeof import("./getAccessPolicy").getAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicy","getAccessPolicyOutput"], () => require("./getAccessPolicy"));

export { GetAccessPolicyIamPolicyArgs, GetAccessPolicyIamPolicyResult, GetAccessPolicyIamPolicyOutputArgs } from "./getAccessPolicyIamPolicy";
export const getAccessPolicyIamPolicy: typeof import("./getAccessPolicyIamPolicy").getAccessPolicyIamPolicy = null as any;
export const getAccessPolicyIamPolicyOutput: typeof import("./getAccessPolicyIamPolicy").getAccessPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicyIamPolicy","getAccessPolicyIamPolicyOutput"], () => require("./getAccessPolicyIamPolicy"));

export { GetAuthorizedOrgsDescArgs, GetAuthorizedOrgsDescResult, GetAuthorizedOrgsDescOutputArgs } from "./getAuthorizedOrgsDesc";
export const getAuthorizedOrgsDesc: typeof import("./getAuthorizedOrgsDesc").getAuthorizedOrgsDesc = null as any;
export const getAuthorizedOrgsDescOutput: typeof import("./getAuthorizedOrgsDesc").getAuthorizedOrgsDescOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizedOrgsDesc","getAuthorizedOrgsDescOutput"], () => require("./getAuthorizedOrgsDesc"));

export { GetGcpUserAccessBindingArgs, GetGcpUserAccessBindingResult, GetGcpUserAccessBindingOutputArgs } from "./getGcpUserAccessBinding";
export const getGcpUserAccessBinding: typeof import("./getGcpUserAccessBinding").getGcpUserAccessBinding = null as any;
export const getGcpUserAccessBindingOutput: typeof import("./getGcpUserAccessBinding").getGcpUserAccessBindingOutput = null as any;
utilities.lazyLoad(exports, ["getGcpUserAccessBinding","getGcpUserAccessBindingOutput"], () => require("./getGcpUserAccessBinding"));

export { GetServicePerimeterArgs, GetServicePerimeterResult, GetServicePerimeterOutputArgs } from "./getServicePerimeter";
export const getServicePerimeter: typeof import("./getServicePerimeter").getServicePerimeter = null as any;
export const getServicePerimeterOutput: typeof import("./getServicePerimeter").getServicePerimeterOutput = null as any;
utilities.lazyLoad(exports, ["getServicePerimeter","getServicePerimeterOutput"], () => require("./getServicePerimeter"));

export { ServicePerimeterArgs } from "./servicePerimeter";
export type ServicePerimeter = import("./servicePerimeter").ServicePerimeter;
export const ServicePerimeter: typeof import("./servicePerimeter").ServicePerimeter = null as any;
utilities.lazyLoad(exports, ["ServicePerimeter"], () => require("./servicePerimeter"));


// Export enums:
export * from "../../types/enums/accesscontextmanager/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:accesscontextmanager/v1:AccessLevel":
                return new AccessLevel(name, <any>undefined, { urn })
            case "google-native:accesscontextmanager/v1:AccessPolicy":
                return new AccessPolicy(name, <any>undefined, { urn })
            case "google-native:accesscontextmanager/v1:AccessPolicyIamBinding":
                return new AccessPolicyIamBinding(name, <any>undefined, { urn })
            case "google-native:accesscontextmanager/v1:AccessPolicyIamMember":
                return new AccessPolicyIamMember(name, <any>undefined, { urn })
            case "google-native:accesscontextmanager/v1:AccessPolicyIamPolicy":
                return new AccessPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-native:accesscontextmanager/v1:AuthorizedOrgsDesc":
                return new AuthorizedOrgsDesc(name, <any>undefined, { urn })
            case "google-native:accesscontextmanager/v1:GcpUserAccessBinding":
                return new GcpUserAccessBinding(name, <any>undefined, { urn })
            case "google-native:accesscontextmanager/v1:ServicePerimeter":
                return new ServicePerimeter(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "accesscontextmanager/v1", _module)
