// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets an authorized orgs desc based on the resource name.
 */
export function getAuthorizedOrgsDesc(args: GetAuthorizedOrgsDescArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthorizedOrgsDescResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:accesscontextmanager/v1:getAuthorizedOrgsDesc", {
        "accessPolicyId": args.accessPolicyId,
        "authorizedOrgsDescId": args.authorizedOrgsDescId,
    }, opts);
}

export interface GetAuthorizedOrgsDescArgs {
    accessPolicyId: string;
    authorizedOrgsDescId: string;
}

export interface GetAuthorizedOrgsDescResult {
    /**
     * The asset type of this authorized orgs desc. Valid values are `ASSET_TYPE_DEVICE`, and `ASSET_TYPE_CREDENTIAL_STRENGTH`.
     */
    readonly assetType: string;
    /**
     * The direction of the authorization relationship between this organization and the organizations listed in the `orgs` field. The valid values for this field include the following: `AUTHORIZATION_DIRECTION_FROM`: Allows this organization to evaluate traffic in the organizations listed in the `orgs` field. `AUTHORIZATION_DIRECTION_TO`: Allows the organizations listed in the `orgs` field to evaluate the traffic in this organization. For the authorization relationship to take effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if organization A authorized organization B and C to evaluate its traffic, by specifying `AUTHORIZATION_DIRECTION_TO` as the authorization direction, organizations B and C must specify `AUTHORIZATION_DIRECTION_FROM` as the authorization direction in their `AuthorizedOrgsDesc` resource.
     */
    readonly authorizationDirection: string;
    /**
     * A granular control type for authorization levels. Valid value is `AUTHORIZATION_TYPE_TRUST`.
     */
    readonly authorizationType: string;
    /**
     * Resource name for the `AuthorizedOrgsDesc`. Format: `accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}`. The `authorized_orgs_desc` component must begin with a letter, followed by alphanumeric characters or `_`. After you create an `AuthorizedOrgsDesc`, you cannot change its `name`.
     */
    readonly name: string;
    /**
     * The list of organization ids in this AuthorizedOrgsDesc. Format: `organizations/` Example: `organizations/123456`
     */
    readonly orgs: string[];
}
/**
 * Gets an authorized orgs desc based on the resource name.
 */
export function getAuthorizedOrgsDescOutput(args: GetAuthorizedOrgsDescOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthorizedOrgsDescResult> {
    return pulumi.output(args).apply((a: any) => getAuthorizedOrgsDesc(a, opts))
}

export interface GetAuthorizedOrgsDescOutputArgs {
    accessPolicyId: pulumi.Input<string>;
    authorizedOrgsDescId: pulumi.Input<string>;
}
