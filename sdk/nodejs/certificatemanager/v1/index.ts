// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { CertificateArgs } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificateIssuanceConfigArgs } from "./certificateIssuanceConfig";
export type CertificateIssuanceConfig = import("./certificateIssuanceConfig").CertificateIssuanceConfig;
export const CertificateIssuanceConfig: typeof import("./certificateIssuanceConfig").CertificateIssuanceConfig = null as any;
utilities.lazyLoad(exports, ["CertificateIssuanceConfig"], () => require("./certificateIssuanceConfig"));

export { CertificateMapArgs } from "./certificateMap";
export type CertificateMap = import("./certificateMap").CertificateMap;
export const CertificateMap: typeof import("./certificateMap").CertificateMap = null as any;
utilities.lazyLoad(exports, ["CertificateMap"], () => require("./certificateMap"));

export { CertificateMapEntryArgs } from "./certificateMapEntry";
export type CertificateMapEntry = import("./certificateMapEntry").CertificateMapEntry;
export const CertificateMapEntry: typeof import("./certificateMapEntry").CertificateMapEntry = null as any;
utilities.lazyLoad(exports, ["CertificateMapEntry"], () => require("./certificateMapEntry"));

export { DnsAuthorizationArgs } from "./dnsAuthorization";
export type DnsAuthorization = import("./dnsAuthorization").DnsAuthorization;
export const DnsAuthorization: typeof import("./dnsAuthorization").DnsAuthorization = null as any;
utilities.lazyLoad(exports, ["DnsAuthorization"], () => require("./dnsAuthorization"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCertificateIssuanceConfigArgs, GetCertificateIssuanceConfigResult, GetCertificateIssuanceConfigOutputArgs } from "./getCertificateIssuanceConfig";
export const getCertificateIssuanceConfig: typeof import("./getCertificateIssuanceConfig").getCertificateIssuanceConfig = null as any;
export const getCertificateIssuanceConfigOutput: typeof import("./getCertificateIssuanceConfig").getCertificateIssuanceConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateIssuanceConfig","getCertificateIssuanceConfigOutput"], () => require("./getCertificateIssuanceConfig"));

export { GetCertificateMapArgs, GetCertificateMapResult, GetCertificateMapOutputArgs } from "./getCertificateMap";
export const getCertificateMap: typeof import("./getCertificateMap").getCertificateMap = null as any;
export const getCertificateMapOutput: typeof import("./getCertificateMap").getCertificateMapOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateMap","getCertificateMapOutput"], () => require("./getCertificateMap"));

export { GetCertificateMapEntryArgs, GetCertificateMapEntryResult, GetCertificateMapEntryOutputArgs } from "./getCertificateMapEntry";
export const getCertificateMapEntry: typeof import("./getCertificateMapEntry").getCertificateMapEntry = null as any;
export const getCertificateMapEntryOutput: typeof import("./getCertificateMapEntry").getCertificateMapEntryOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateMapEntry","getCertificateMapEntryOutput"], () => require("./getCertificateMapEntry"));

export { GetDnsAuthorizationArgs, GetDnsAuthorizationResult, GetDnsAuthorizationOutputArgs } from "./getDnsAuthorization";
export const getDnsAuthorization: typeof import("./getDnsAuthorization").getDnsAuthorization = null as any;
export const getDnsAuthorizationOutput: typeof import("./getDnsAuthorization").getDnsAuthorizationOutput = null as any;
utilities.lazyLoad(exports, ["getDnsAuthorization","getDnsAuthorizationOutput"], () => require("./getDnsAuthorization"));

export { GetTrustConfigArgs, GetTrustConfigResult, GetTrustConfigOutputArgs } from "./getTrustConfig";
export const getTrustConfig: typeof import("./getTrustConfig").getTrustConfig = null as any;
export const getTrustConfigOutput: typeof import("./getTrustConfig").getTrustConfigOutput = null as any;
utilities.lazyLoad(exports, ["getTrustConfig","getTrustConfigOutput"], () => require("./getTrustConfig"));

export { TrustConfigArgs } from "./trustConfig";
export type TrustConfig = import("./trustConfig").TrustConfig;
export const TrustConfig: typeof import("./trustConfig").TrustConfig = null as any;
utilities.lazyLoad(exports, ["TrustConfig"], () => require("./trustConfig"));


// Export enums:
export * from "../../types/enums/certificatemanager/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:certificatemanager/v1:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "google-native:certificatemanager/v1:CertificateIssuanceConfig":
                return new CertificateIssuanceConfig(name, <any>undefined, { urn })
            case "google-native:certificatemanager/v1:CertificateMap":
                return new CertificateMap(name, <any>undefined, { urn })
            case "google-native:certificatemanager/v1:CertificateMapEntry":
                return new CertificateMapEntry(name, <any>undefined, { urn })
            case "google-native:certificatemanager/v1:DnsAuthorization":
                return new DnsAuthorization(name, <any>undefined, { urn })
            case "google-native:certificatemanager/v1:TrustConfig":
                return new TrustConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "certificatemanager/v1", _module)
