// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new CertificateIssuanceConfig in a given project and location.
 */
export class CertificateIssuanceConfig extends pulumi.CustomResource {
    /**
     * Get an existing CertificateIssuanceConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CertificateIssuanceConfig {
        return new CertificateIssuanceConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:certificatemanager/v1:CertificateIssuanceConfig';

    /**
     * Returns true if the given object is an instance of CertificateIssuanceConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateIssuanceConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateIssuanceConfig.__pulumiType;
    }

    /**
     * The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
     */
    public readonly certificateAuthorityConfig!: pulumi.Output<outputs.certificatemanager.v1.CertificateAuthorityConfigResponse>;
    /**
     * Required. A user-provided name of the certificate config.
     */
    public readonly certificateIssuanceConfigId!: pulumi.Output<string>;
    /**
     * The creation timestamp of a CertificateIssuanceConfig.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * One or more paragraphs of text description of a CertificateIssuanceConfig.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The key algorithm to use when generating the private key.
     */
    public readonly keyAlgorithm!: pulumi.Output<string>;
    /**
     * Set of labels associated with a CertificateIssuanceConfig.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Workload certificate lifetime requested.
     */
    public readonly lifetime!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*&#47;locations/*&#47;certificateIssuanceConfigs/*`.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
     */
    public readonly rotationWindowPercentage!: pulumi.Output<number>;
    /**
     * The last update timestamp of a CertificateIssuanceConfig.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CertificateIssuanceConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateIssuanceConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.certificateAuthorityConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthorityConfig'");
            }
            if ((!args || args.certificateIssuanceConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateIssuanceConfigId'");
            }
            if ((!args || args.keyAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyAlgorithm'");
            }
            if ((!args || args.lifetime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lifetime'");
            }
            if ((!args || args.rotationWindowPercentage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rotationWindowPercentage'");
            }
            resourceInputs["certificateAuthorityConfig"] = args ? args.certificateAuthorityConfig : undefined;
            resourceInputs["certificateIssuanceConfigId"] = args ? args.certificateIssuanceConfigId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["keyAlgorithm"] = args ? args.keyAlgorithm : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lifetime"] = args ? args.lifetime : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rotationWindowPercentage"] = args ? args.rotationWindowPercentage : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["certificateAuthorityConfig"] = undefined /*out*/;
            resourceInputs["certificateIssuanceConfigId"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["keyAlgorithm"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["lifetime"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["rotationWindowPercentage"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["certificateIssuanceConfigId", "location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CertificateIssuanceConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CertificateIssuanceConfig resource.
 */
export interface CertificateIssuanceConfigArgs {
    /**
     * The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
     */
    certificateAuthorityConfig: pulumi.Input<inputs.certificatemanager.v1.CertificateAuthorityConfigArgs>;
    /**
     * Required. A user-provided name of the certificate config.
     */
    certificateIssuanceConfigId: pulumi.Input<string>;
    /**
     * One or more paragraphs of text description of a CertificateIssuanceConfig.
     */
    description?: pulumi.Input<string>;
    /**
     * The key algorithm to use when generating the private key.
     */
    keyAlgorithm: pulumi.Input<enums.certificatemanager.v1.CertificateIssuanceConfigKeyAlgorithm>;
    /**
     * Set of labels associated with a CertificateIssuanceConfig.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Workload certificate lifetime requested.
     */
    lifetime: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*&#47;locations/*&#47;certificateIssuanceConfigs/*`.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
     */
    rotationWindowPercentage: pulumi.Input<number>;
}
