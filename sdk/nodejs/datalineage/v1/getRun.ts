// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets the details of the specified run.
 */
export function getRun(args: GetRunArgs, opts?: pulumi.InvokeOptions): Promise<GetRunResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:datalineage/v1:getRun", {
        "location": args.location,
        "processId": args.processId,
        "project": args.project,
        "runId": args.runId,
    }, opts);
}

export interface GetRunArgs {
    location: string;
    processId: string;
    project?: string;
    runId: string;
}

export interface GetRunResult {
    /**
     * Optional. The attributes of the run. Should only be used for the purpose of non-semantic management (classifying, describing or labeling the run). Up to 100 attributes are allowed.
     */
    readonly attributes: {[key: string]: any};
    /**
     * Optional. A human-readable name you can set to display in a user interface. Must be not longer than 1024 characters and only contain UTF-8 letters or numbers, spaces or characters like `_-:&.`
     */
    readonly displayName: string;
    /**
     * Optional. The timestamp of the end of the run.
     */
    readonly endTime: string;
    /**
     * Immutable. The resource name of the run. Format: `projects/{project}/locations/{location}/processes/{process}/runs/{run}`. Can be specified or auto-assigned. {run} must be not longer than 200 characters and only contain characters in a set: `a-zA-Z0-9_-:.`
     */
    readonly name: string;
    /**
     * The timestamp of the start of the run.
     */
    readonly startTime: string;
    /**
     * The state of the run.
     */
    readonly state: string;
}
/**
 * Gets the details of the specified run.
 */
export function getRunOutput(args: GetRunOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRunResult> {
    return pulumi.output(args).apply((a: any) => getRun(a, opts))
}

export interface GetRunOutputArgs {
    location: pulumi.Input<string>;
    processId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    runId: pulumi.Input<string>;
}
