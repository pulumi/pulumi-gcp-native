// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices.
 * Auto-naming is currently not supported for this resource.
 */
export class TestMatrix extends pulumi.CustomResource {
    /**
     * Get an existing TestMatrix resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TestMatrix {
        return new TestMatrix(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:testing/v1:TestMatrix';

    /**
     * Returns true if the given object is an instance of TestMatrix.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TestMatrix {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TestMatrix.__pulumiType;
    }

    /**
     * Information about the client which invoked the test.
     */
    public readonly clientInfo!: pulumi.Output<outputs.testing.v1.ClientInfoResponse>;
    /**
     * The devices the tests are being executed on.
     */
    public readonly environmentMatrix!: pulumi.Output<outputs.testing.v1.EnvironmentMatrixResponse>;
    /**
     * If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
     */
    public readonly failFast!: pulumi.Output<boolean>;
    /**
     * The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
     */
    public readonly flakyTestAttempts!: pulumi.Output<number>;
    /**
     * Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
     */
    public /*out*/ readonly invalidMatrixDetails!: pulumi.Output<string>;
    /**
     * Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
     */
    public /*out*/ readonly outcomeSummary!: pulumi.Output<string>;
    /**
     * The cloud project that owns the test matrix.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Where the results for the matrix are written.
     */
    public readonly resultStorage!: pulumi.Output<outputs.testing.v1.ResultStorageResponse>;
    /**
     * Indicates the current progress of the test matrix.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The list of test executions that the service creates for this matrix.
     */
    public /*out*/ readonly testExecutions!: pulumi.Output<outputs.testing.v1.TestExecutionResponse[]>;
    /**
     * Unique id set by the service.
     */
    public /*out*/ readonly testMatrixId!: pulumi.Output<string>;
    /**
     * How to run the test.
     */
    public readonly testSpecification!: pulumi.Output<outputs.testing.v1.TestSpecificationResponse>;
    /**
     * The time this test matrix was initially created.
     */
    public /*out*/ readonly timestamp!: pulumi.Output<string>;

    /**
     * Create a TestMatrix resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TestMatrixArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.environmentMatrix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentMatrix'");
            }
            if ((!args || args.resultStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resultStorage'");
            }
            if ((!args || args.testSpecification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'testSpecification'");
            }
            inputs["clientInfo"] = args ? args.clientInfo : undefined;
            inputs["environmentMatrix"] = args ? args.environmentMatrix : undefined;
            inputs["failFast"] = args ? args.failFast : undefined;
            inputs["flakyTestAttempts"] = args ? args.flakyTestAttempts : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["requestId"] = args ? args.requestId : undefined;
            inputs["resultStorage"] = args ? args.resultStorage : undefined;
            inputs["testSpecification"] = args ? args.testSpecification : undefined;
            inputs["invalidMatrixDetails"] = undefined /*out*/;
            inputs["outcomeSummary"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["testExecutions"] = undefined /*out*/;
            inputs["testMatrixId"] = undefined /*out*/;
            inputs["timestamp"] = undefined /*out*/;
        } else {
            inputs["clientInfo"] = undefined /*out*/;
            inputs["environmentMatrix"] = undefined /*out*/;
            inputs["failFast"] = undefined /*out*/;
            inputs["flakyTestAttempts"] = undefined /*out*/;
            inputs["invalidMatrixDetails"] = undefined /*out*/;
            inputs["outcomeSummary"] = undefined /*out*/;
            inputs["project"] = undefined /*out*/;
            inputs["resultStorage"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["testExecutions"] = undefined /*out*/;
            inputs["testMatrixId"] = undefined /*out*/;
            inputs["testSpecification"] = undefined /*out*/;
            inputs["timestamp"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(TestMatrix.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a TestMatrix resource.
 */
export interface TestMatrixArgs {
    /**
     * Information about the client which invoked the test.
     */
    clientInfo?: pulumi.Input<inputs.testing.v1.ClientInfoArgs>;
    /**
     * The devices the tests are being executed on.
     */
    environmentMatrix: pulumi.Input<inputs.testing.v1.EnvironmentMatrixArgs>;
    /**
     * If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
     */
    failFast?: pulumi.Input<boolean>;
    /**
     * The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
     */
    flakyTestAttempts?: pulumi.Input<number>;
    /**
     * The cloud project that owns the test matrix.
     */
    project?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    /**
     * Where the results for the matrix are written.
     */
    resultStorage: pulumi.Input<inputs.testing.v1.ResultStorageArgs>;
    /**
     * How to run the test.
     */
    testSpecification: pulumi.Input<inputs.testing.v1.TestSpecificationArgs>;
}
