// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a platform policy, and returns a copy of it. Returns `NOT_FOUND` if the project or platform doesn't exist, `INVALID_ARGUMENT` if the request is malformed, `ALREADY_EXISTS` if the policy already exists, and `INVALID_ARGUMENT` if the policy contains a platform-specific policy that does not match the platform value specified in the URL.
 * Auto-naming is currently not supported for this resource.
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:binaryauthorization/v1:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Optional. A description comment about the policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Optional. GKE platform-specific policy.
     */
    public readonly gkePolicy!: pulumi.Output<outputs.binaryauthorization.v1.GkePolicyResponse>;
    /**
     * The relative resource name of the Binary Authorization platform policy, in the form of `projects/*&#47;platforms/*&#47;policies/*`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly platformId!: pulumi.Output<string>;
    /**
     * Required. The platform policy ID.
     */
    public readonly policyId!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Time when the policy was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.platformId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platformId'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gkePolicy"] = args ? args.gkePolicy : undefined;
            resourceInputs["platformId"] = args ? args.platformId : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["gkePolicy"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["platformId"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["platformId", "policyId", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Optional. A description comment about the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. GKE platform-specific policy.
     */
    gkePolicy?: pulumi.Input<inputs.binaryauthorization.v1.GkePolicyArgs>;
    platformId: pulumi.Input<string>;
    /**
     * Required. The platform policy ID.
     */
    policyId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
