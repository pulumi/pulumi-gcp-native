// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new Instance in a given location.
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:memcache/v1:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }


    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            inputs["authorizedNetwork"] = args ? args.authorizedNetwork : undefined;
            inputs["createTime"] = args ? args.createTime : undefined;
            inputs["discoveryEndpoint"] = args ? args.discoveryEndpoint : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["instanceId"] = args ? args.instanceId : undefined;
            inputs["instanceMessages"] = args ? args.instanceMessages : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["memcacheFullVersion"] = args ? args.memcacheFullVersion : undefined;
            inputs["memcacheNodes"] = args ? args.memcacheNodes : undefined;
            inputs["memcacheVersion"] = args ? args.memcacheVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nodeConfig"] = args ? args.nodeConfig : undefined;
            inputs["nodeCount"] = args ? args.nodeCount : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["updateTime"] = args ? args.updateTime : undefined;
            inputs["zones"] = args ? args.zones : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Instance.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
     */
    readonly authorizedNetwork?: pulumi.Input<string>;
    /**
     * Output only. The time the instance was created.
     */
    readonly createTime?: pulumi.Input<string>;
    /**
     * Output only. Endpoint for the Discovery API.
     */
    readonly discoveryEndpoint?: pulumi.Input<string>;
    /**
     * User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Required. The logical name of the Memcached instance in the user project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-40 characters. * Must end with a number or a letter. * Must be unique within the user project / location. If any of the above are not met, the API raises an invalid argument error.
     */
    readonly instanceId?: pulumi.Input<string>;
    /**
     * List of messages that describe the current state of the Memcached instance.
     */
    readonly instanceMessages?: pulumi.Input<pulumi.Input<inputs.memcache.v1.InstanceMessage>[]>;
    /**
     * Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be "memcached-1.5.16".
     */
    readonly memcacheFullVersion?: pulumi.Input<string>;
    /**
     * Output only. List of Memcached nodes. Refer to Node message for more details.
     */
    readonly memcacheNodes?: pulumi.Input<pulumi.Input<inputs.memcache.v1.Node>[]>;
    /**
     * The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
     */
    readonly memcacheVersion?: pulumi.Input<string>;
    /**
     * Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Required. Configuration for Memcached nodes.
     */
    readonly nodeConfig?: pulumi.Input<inputs.memcache.v1.NodeConfig>;
    /**
     * Required. Number of nodes in the Memcached instance.
     */
    readonly nodeCount?: pulumi.Input<number>;
    /**
     * Optional: User defined parameters to apply to the memcached process on each node.
     */
    readonly parameters?: pulumi.Input<inputs.memcache.v1.MemcacheParameters>;
    /**
     * Required. The resource name of the instance location using the form: `projects/{project_id}/locations/{location_id}` where `location_id` refers to a GCP region
     */
    readonly parent: pulumi.Input<string>;
    /**
     * Output only. The state of this Memcached instance.
     */
    readonly state?: pulumi.Input<string>;
    /**
     * Output only. The time the instance was updated.
     */
    readonly updateTime?: pulumi.Input<string>;
    /**
     * Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
     */
    readonly zones?: pulumi.Input<pulumi.Input<string>[]>;
}
