// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Creates a backup.
 */
export class Backup extends pulumi.CustomResource {
    /**
     * Get an existing Backup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Backup {
        return new Backup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:file/v1:Backup';

    /**
     * Returns true if the given object is an instance of Backup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backup.__pulumiType;
    }


    /**
     * Create a Backup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.backupsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupsId'");
            }
            if ((!args || args.locationsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationsId'");
            }
            if ((!args || args.projectsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectsId'");
            }
            inputs["backupsId"] = args ? args.backupsId : undefined;
            inputs["capacityGb"] = args ? args.capacityGb : undefined;
            inputs["createTime"] = args ? args.createTime : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["downloadBytes"] = args ? args.downloadBytes : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["locationsId"] = args ? args.locationsId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["projectsId"] = args ? args.projectsId : undefined;
            inputs["sourceFileShare"] = args ? args.sourceFileShare : undefined;
            inputs["sourceInstance"] = args ? args.sourceInstance : undefined;
            inputs["sourceInstanceTier"] = args ? args.sourceInstanceTier : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["storageBytes"] = args ? args.storageBytes : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Backup.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Backup resource.
 */
export interface BackupArgs {
    readonly backupsId: pulumi.Input<string>;
    /**
     * Output only. Capacity of the source file share when the backup was created.
     */
    readonly capacityGb?: pulumi.Input<string>;
    /**
     * Output only. The time when the backup was created.
     */
    readonly createTime?: pulumi.Input<string>;
    /**
     * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Output only. Amount of bytes that will be downloaded if the backup is restored. This may be different than storage bytes, since sequential backups of the same disk will share storage.
     */
    readonly downloadBytes?: pulumi.Input<string>;
    /**
     * Resource labels to represent user provided metadata.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly locationsId: pulumi.Input<string>;
    /**
     * Output only. The resource name of the backup, in the format projects/{project_number}/locations/{location_id}/backups/{backup_id}.
     */
    readonly name?: pulumi.Input<string>;
    readonly projectsId: pulumi.Input<string>;
    /**
     * Name of the file share in the source Cloud Filestore instance that the backup is created from.
     */
    readonly sourceFileShare?: pulumi.Input<string>;
    /**
     * The resource name of the source Cloud Filestore instance, in the format projects/{project_number}/locations/{location_id}/instances/{instance_id}, used to create this backup.
     */
    readonly sourceInstance?: pulumi.Input<string>;
    /**
     * Output only. The service tier of the source Cloud Filestore instance that this backup is created from.
     */
    readonly sourceInstanceTier?: pulumi.Input<string>;
    /**
     * Output only. The backup state.
     */
    readonly state?: pulumi.Input<string>;
    /**
     * Output only. The size of the storage used by the backup. As backups share storage, this number is expected to change with backup creation/deletion.
     */
    readonly storageBytes?: pulumi.Input<string>;
}
