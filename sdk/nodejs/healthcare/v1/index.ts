// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AttributeDefinitionArgs } from "./attributeDefinition";
export type AttributeDefinition = import("./attributeDefinition").AttributeDefinition;
export const AttributeDefinition: typeof import("./attributeDefinition").AttributeDefinition = null as any;
utilities.lazyLoad(exports, ["AttributeDefinition"], () => require("./attributeDefinition"));

export { ConsentArgs } from "./consent";
export type Consent = import("./consent").Consent;
export const Consent: typeof import("./consent").Consent = null as any;
utilities.lazyLoad(exports, ["Consent"], () => require("./consent"));

export { ConsentArtifactArgs } from "./consentArtifact";
export type ConsentArtifact = import("./consentArtifact").ConsentArtifact;
export const ConsentArtifact: typeof import("./consentArtifact").ConsentArtifact = null as any;
utilities.lazyLoad(exports, ["ConsentArtifact"], () => require("./consentArtifact"));

export { ConsentStoreArgs } from "./consentStore";
export type ConsentStore = import("./consentStore").ConsentStore;
export const ConsentStore: typeof import("./consentStore").ConsentStore = null as any;
utilities.lazyLoad(exports, ["ConsentStore"], () => require("./consentStore"));

export { DatasetArgs } from "./dataset";
export type Dataset = import("./dataset").Dataset;
export const Dataset: typeof import("./dataset").Dataset = null as any;
utilities.lazyLoad(exports, ["Dataset"], () => require("./dataset"));

export { DatasetConsentStoreIamBindingArgs } from "./datasetConsentStoreIamBinding";
export type DatasetConsentStoreIamBinding = import("./datasetConsentStoreIamBinding").DatasetConsentStoreIamBinding;
export const DatasetConsentStoreIamBinding: typeof import("./datasetConsentStoreIamBinding").DatasetConsentStoreIamBinding = null as any;
utilities.lazyLoad(exports, ["DatasetConsentStoreIamBinding"], () => require("./datasetConsentStoreIamBinding"));

export { DatasetConsentStoreIamMemberArgs } from "./datasetConsentStoreIamMember";
export type DatasetConsentStoreIamMember = import("./datasetConsentStoreIamMember").DatasetConsentStoreIamMember;
export const DatasetConsentStoreIamMember: typeof import("./datasetConsentStoreIamMember").DatasetConsentStoreIamMember = null as any;
utilities.lazyLoad(exports, ["DatasetConsentStoreIamMember"], () => require("./datasetConsentStoreIamMember"));

export { DatasetConsentStoreIamPolicyArgs } from "./datasetConsentStoreIamPolicy";
export type DatasetConsentStoreIamPolicy = import("./datasetConsentStoreIamPolicy").DatasetConsentStoreIamPolicy;
export const DatasetConsentStoreIamPolicy: typeof import("./datasetConsentStoreIamPolicy").DatasetConsentStoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["DatasetConsentStoreIamPolicy"], () => require("./datasetConsentStoreIamPolicy"));

export { DatasetDicomStoreIamBindingArgs } from "./datasetDicomStoreIamBinding";
export type DatasetDicomStoreIamBinding = import("./datasetDicomStoreIamBinding").DatasetDicomStoreIamBinding;
export const DatasetDicomStoreIamBinding: typeof import("./datasetDicomStoreIamBinding").DatasetDicomStoreIamBinding = null as any;
utilities.lazyLoad(exports, ["DatasetDicomStoreIamBinding"], () => require("./datasetDicomStoreIamBinding"));

export { DatasetDicomStoreIamMemberArgs } from "./datasetDicomStoreIamMember";
export type DatasetDicomStoreIamMember = import("./datasetDicomStoreIamMember").DatasetDicomStoreIamMember;
export const DatasetDicomStoreIamMember: typeof import("./datasetDicomStoreIamMember").DatasetDicomStoreIamMember = null as any;
utilities.lazyLoad(exports, ["DatasetDicomStoreIamMember"], () => require("./datasetDicomStoreIamMember"));

export { DatasetDicomStoreIamPolicyArgs } from "./datasetDicomStoreIamPolicy";
export type DatasetDicomStoreIamPolicy = import("./datasetDicomStoreIamPolicy").DatasetDicomStoreIamPolicy;
export const DatasetDicomStoreIamPolicy: typeof import("./datasetDicomStoreIamPolicy").DatasetDicomStoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["DatasetDicomStoreIamPolicy"], () => require("./datasetDicomStoreIamPolicy"));

export { DatasetFhirStoreIamBindingArgs } from "./datasetFhirStoreIamBinding";
export type DatasetFhirStoreIamBinding = import("./datasetFhirStoreIamBinding").DatasetFhirStoreIamBinding;
export const DatasetFhirStoreIamBinding: typeof import("./datasetFhirStoreIamBinding").DatasetFhirStoreIamBinding = null as any;
utilities.lazyLoad(exports, ["DatasetFhirStoreIamBinding"], () => require("./datasetFhirStoreIamBinding"));

export { DatasetFhirStoreIamMemberArgs } from "./datasetFhirStoreIamMember";
export type DatasetFhirStoreIamMember = import("./datasetFhirStoreIamMember").DatasetFhirStoreIamMember;
export const DatasetFhirStoreIamMember: typeof import("./datasetFhirStoreIamMember").DatasetFhirStoreIamMember = null as any;
utilities.lazyLoad(exports, ["DatasetFhirStoreIamMember"], () => require("./datasetFhirStoreIamMember"));

export { DatasetFhirStoreIamPolicyArgs } from "./datasetFhirStoreIamPolicy";
export type DatasetFhirStoreIamPolicy = import("./datasetFhirStoreIamPolicy").DatasetFhirStoreIamPolicy;
export const DatasetFhirStoreIamPolicy: typeof import("./datasetFhirStoreIamPolicy").DatasetFhirStoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["DatasetFhirStoreIamPolicy"], () => require("./datasetFhirStoreIamPolicy"));

export { DatasetHl7V2StoreIamBindingArgs } from "./datasetHl7V2StoreIamBinding";
export type DatasetHl7V2StoreIamBinding = import("./datasetHl7V2StoreIamBinding").DatasetHl7V2StoreIamBinding;
export const DatasetHl7V2StoreIamBinding: typeof import("./datasetHl7V2StoreIamBinding").DatasetHl7V2StoreIamBinding = null as any;
utilities.lazyLoad(exports, ["DatasetHl7V2StoreIamBinding"], () => require("./datasetHl7V2StoreIamBinding"));

export { DatasetHl7V2StoreIamMemberArgs } from "./datasetHl7V2StoreIamMember";
export type DatasetHl7V2StoreIamMember = import("./datasetHl7V2StoreIamMember").DatasetHl7V2StoreIamMember;
export const DatasetHl7V2StoreIamMember: typeof import("./datasetHl7V2StoreIamMember").DatasetHl7V2StoreIamMember = null as any;
utilities.lazyLoad(exports, ["DatasetHl7V2StoreIamMember"], () => require("./datasetHl7V2StoreIamMember"));

export { DatasetHl7V2StoreIamPolicyArgs } from "./datasetHl7V2StoreIamPolicy";
export type DatasetHl7V2StoreIamPolicy = import("./datasetHl7V2StoreIamPolicy").DatasetHl7V2StoreIamPolicy;
export const DatasetHl7V2StoreIamPolicy: typeof import("./datasetHl7V2StoreIamPolicy").DatasetHl7V2StoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["DatasetHl7V2StoreIamPolicy"], () => require("./datasetHl7V2StoreIamPolicy"));

export { DatasetIamBindingArgs } from "./datasetIamBinding";
export type DatasetIamBinding = import("./datasetIamBinding").DatasetIamBinding;
export const DatasetIamBinding: typeof import("./datasetIamBinding").DatasetIamBinding = null as any;
utilities.lazyLoad(exports, ["DatasetIamBinding"], () => require("./datasetIamBinding"));

export { DatasetIamMemberArgs } from "./datasetIamMember";
export type DatasetIamMember = import("./datasetIamMember").DatasetIamMember;
export const DatasetIamMember: typeof import("./datasetIamMember").DatasetIamMember = null as any;
utilities.lazyLoad(exports, ["DatasetIamMember"], () => require("./datasetIamMember"));

export { DatasetIamPolicyArgs } from "./datasetIamPolicy";
export type DatasetIamPolicy = import("./datasetIamPolicy").DatasetIamPolicy;
export const DatasetIamPolicy: typeof import("./datasetIamPolicy").DatasetIamPolicy = null as any;
utilities.lazyLoad(exports, ["DatasetIamPolicy"], () => require("./datasetIamPolicy"));

export { DicomStoreArgs } from "./dicomStore";
export type DicomStore = import("./dicomStore").DicomStore;
export const DicomStore: typeof import("./dicomStore").DicomStore = null as any;
utilities.lazyLoad(exports, ["DicomStore"], () => require("./dicomStore"));

export { FhirStoreArgs } from "./fhirStore";
export type FhirStore = import("./fhirStore").FhirStore;
export const FhirStore: typeof import("./fhirStore").FhirStore = null as any;
utilities.lazyLoad(exports, ["FhirStore"], () => require("./fhirStore"));

export { GetAttributeDefinitionArgs, GetAttributeDefinitionResult, GetAttributeDefinitionOutputArgs } from "./getAttributeDefinition";
export const getAttributeDefinition: typeof import("./getAttributeDefinition").getAttributeDefinition = null as any;
export const getAttributeDefinitionOutput: typeof import("./getAttributeDefinition").getAttributeDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getAttributeDefinition","getAttributeDefinitionOutput"], () => require("./getAttributeDefinition"));

export { GetConsentArgs, GetConsentResult, GetConsentOutputArgs } from "./getConsent";
export const getConsent: typeof import("./getConsent").getConsent = null as any;
export const getConsentOutput: typeof import("./getConsent").getConsentOutput = null as any;
utilities.lazyLoad(exports, ["getConsent","getConsentOutput"], () => require("./getConsent"));

export { GetConsentArtifactArgs, GetConsentArtifactResult, GetConsentArtifactOutputArgs } from "./getConsentArtifact";
export const getConsentArtifact: typeof import("./getConsentArtifact").getConsentArtifact = null as any;
export const getConsentArtifactOutput: typeof import("./getConsentArtifact").getConsentArtifactOutput = null as any;
utilities.lazyLoad(exports, ["getConsentArtifact","getConsentArtifactOutput"], () => require("./getConsentArtifact"));

export { GetConsentStoreArgs, GetConsentStoreResult, GetConsentStoreOutputArgs } from "./getConsentStore";
export const getConsentStore: typeof import("./getConsentStore").getConsentStore = null as any;
export const getConsentStoreOutput: typeof import("./getConsentStore").getConsentStoreOutput = null as any;
utilities.lazyLoad(exports, ["getConsentStore","getConsentStoreOutput"], () => require("./getConsentStore"));

export { GetDatasetArgs, GetDatasetResult, GetDatasetOutputArgs } from "./getDataset";
export const getDataset: typeof import("./getDataset").getDataset = null as any;
export const getDatasetOutput: typeof import("./getDataset").getDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getDataset","getDatasetOutput"], () => require("./getDataset"));

export { GetDatasetConsentStoreIamPolicyArgs, GetDatasetConsentStoreIamPolicyResult, GetDatasetConsentStoreIamPolicyOutputArgs } from "./getDatasetConsentStoreIamPolicy";
export const getDatasetConsentStoreIamPolicy: typeof import("./getDatasetConsentStoreIamPolicy").getDatasetConsentStoreIamPolicy = null as any;
export const getDatasetConsentStoreIamPolicyOutput: typeof import("./getDatasetConsentStoreIamPolicy").getDatasetConsentStoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatasetConsentStoreIamPolicy","getDatasetConsentStoreIamPolicyOutput"], () => require("./getDatasetConsentStoreIamPolicy"));

export { GetDatasetDicomStoreIamPolicyArgs, GetDatasetDicomStoreIamPolicyResult, GetDatasetDicomStoreIamPolicyOutputArgs } from "./getDatasetDicomStoreIamPolicy";
export const getDatasetDicomStoreIamPolicy: typeof import("./getDatasetDicomStoreIamPolicy").getDatasetDicomStoreIamPolicy = null as any;
export const getDatasetDicomStoreIamPolicyOutput: typeof import("./getDatasetDicomStoreIamPolicy").getDatasetDicomStoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatasetDicomStoreIamPolicy","getDatasetDicomStoreIamPolicyOutput"], () => require("./getDatasetDicomStoreIamPolicy"));

export { GetDatasetFhirStoreIamPolicyArgs, GetDatasetFhirStoreIamPolicyResult, GetDatasetFhirStoreIamPolicyOutputArgs } from "./getDatasetFhirStoreIamPolicy";
export const getDatasetFhirStoreIamPolicy: typeof import("./getDatasetFhirStoreIamPolicy").getDatasetFhirStoreIamPolicy = null as any;
export const getDatasetFhirStoreIamPolicyOutput: typeof import("./getDatasetFhirStoreIamPolicy").getDatasetFhirStoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatasetFhirStoreIamPolicy","getDatasetFhirStoreIamPolicyOutput"], () => require("./getDatasetFhirStoreIamPolicy"));

export { GetDatasetHl7V2StoreIamPolicyArgs, GetDatasetHl7V2StoreIamPolicyResult, GetDatasetHl7V2StoreIamPolicyOutputArgs } from "./getDatasetHl7V2StoreIamPolicy";
export const getDatasetHl7V2StoreIamPolicy: typeof import("./getDatasetHl7V2StoreIamPolicy").getDatasetHl7V2StoreIamPolicy = null as any;
export const getDatasetHl7V2StoreIamPolicyOutput: typeof import("./getDatasetHl7V2StoreIamPolicy").getDatasetHl7V2StoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatasetHl7V2StoreIamPolicy","getDatasetHl7V2StoreIamPolicyOutput"], () => require("./getDatasetHl7V2StoreIamPolicy"));

export { GetDatasetIamPolicyArgs, GetDatasetIamPolicyResult, GetDatasetIamPolicyOutputArgs } from "./getDatasetIamPolicy";
export const getDatasetIamPolicy: typeof import("./getDatasetIamPolicy").getDatasetIamPolicy = null as any;
export const getDatasetIamPolicyOutput: typeof import("./getDatasetIamPolicy").getDatasetIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatasetIamPolicy","getDatasetIamPolicyOutput"], () => require("./getDatasetIamPolicy"));

export { GetDicomStoreArgs, GetDicomStoreResult, GetDicomStoreOutputArgs } from "./getDicomStore";
export const getDicomStore: typeof import("./getDicomStore").getDicomStore = null as any;
export const getDicomStoreOutput: typeof import("./getDicomStore").getDicomStoreOutput = null as any;
utilities.lazyLoad(exports, ["getDicomStore","getDicomStoreOutput"], () => require("./getDicomStore"));

export { GetFhirArgs, GetFhirResult, GetFhirOutputArgs } from "./getFhir";
export const getFhir: typeof import("./getFhir").getFhir = null as any;
export const getFhirOutput: typeof import("./getFhir").getFhirOutput = null as any;
utilities.lazyLoad(exports, ["getFhir","getFhirOutput"], () => require("./getFhir"));

export { GetFhirStoreArgs, GetFhirStoreResult, GetFhirStoreOutputArgs } from "./getFhirStore";
export const getFhirStore: typeof import("./getFhirStore").getFhirStore = null as any;
export const getFhirStoreOutput: typeof import("./getFhirStore").getFhirStoreOutput = null as any;
utilities.lazyLoad(exports, ["getFhirStore","getFhirStoreOutput"], () => require("./getFhirStore"));

export { GetHl7V2StoreArgs, GetHl7V2StoreResult, GetHl7V2StoreOutputArgs } from "./getHl7V2Store";
export const getHl7V2Store: typeof import("./getHl7V2Store").getHl7V2Store = null as any;
export const getHl7V2StoreOutput: typeof import("./getHl7V2Store").getHl7V2StoreOutput = null as any;
utilities.lazyLoad(exports, ["getHl7V2Store","getHl7V2StoreOutput"], () => require("./getHl7V2Store"));

export { GetMessageArgs, GetMessageResult, GetMessageOutputArgs } from "./getMessage";
export const getMessage: typeof import("./getMessage").getMessage = null as any;
export const getMessageOutput: typeof import("./getMessage").getMessageOutput = null as any;
utilities.lazyLoad(exports, ["getMessage","getMessageOutput"], () => require("./getMessage"));

export { GetUserDataMappingArgs, GetUserDataMappingResult, GetUserDataMappingOutputArgs } from "./getUserDataMapping";
export const getUserDataMapping: typeof import("./getUserDataMapping").getUserDataMapping = null as any;
export const getUserDataMappingOutput: typeof import("./getUserDataMapping").getUserDataMappingOutput = null as any;
utilities.lazyLoad(exports, ["getUserDataMapping","getUserDataMappingOutput"], () => require("./getUserDataMapping"));

export { Hl7V2StoreArgs } from "./hl7V2Store";
export type Hl7V2Store = import("./hl7V2Store").Hl7V2Store;
export const Hl7V2Store: typeof import("./hl7V2Store").Hl7V2Store = null as any;
utilities.lazyLoad(exports, ["Hl7V2Store"], () => require("./hl7V2Store"));

export { MessageArgs } from "./message";
export type Message = import("./message").Message;
export const Message: typeof import("./message").Message = null as any;
utilities.lazyLoad(exports, ["Message"], () => require("./message"));

export { UserDataMappingArgs } from "./userDataMapping";
export type UserDataMapping = import("./userDataMapping").UserDataMapping;
export const UserDataMapping: typeof import("./userDataMapping").UserDataMapping = null as any;
utilities.lazyLoad(exports, ["UserDataMapping"], () => require("./userDataMapping"));


// Export enums:
export * from "../../types/enums/healthcare/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:healthcare/v1:AttributeDefinition":
                return new AttributeDefinition(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:Consent":
                return new Consent(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:ConsentArtifact":
                return new ConsentArtifact(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:ConsentStore":
                return new ConsentStore(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:Dataset":
                return new Dataset(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetConsentStoreIamBinding":
                return new DatasetConsentStoreIamBinding(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetConsentStoreIamMember":
                return new DatasetConsentStoreIamMember(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetConsentStoreIamPolicy":
                return new DatasetConsentStoreIamPolicy(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetDicomStoreIamBinding":
                return new DatasetDicomStoreIamBinding(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetDicomStoreIamMember":
                return new DatasetDicomStoreIamMember(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetDicomStoreIamPolicy":
                return new DatasetDicomStoreIamPolicy(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetFhirStoreIamBinding":
                return new DatasetFhirStoreIamBinding(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetFhirStoreIamMember":
                return new DatasetFhirStoreIamMember(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetFhirStoreIamPolicy":
                return new DatasetFhirStoreIamPolicy(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetHl7V2StoreIamBinding":
                return new DatasetHl7V2StoreIamBinding(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetHl7V2StoreIamMember":
                return new DatasetHl7V2StoreIamMember(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetHl7V2StoreIamPolicy":
                return new DatasetHl7V2StoreIamPolicy(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetIamBinding":
                return new DatasetIamBinding(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetIamMember":
                return new DatasetIamMember(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DatasetIamPolicy":
                return new DatasetIamPolicy(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:DicomStore":
                return new DicomStore(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:FhirStore":
                return new FhirStore(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:Hl7V2Store":
                return new Hl7V2Store(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:Message":
                return new Message(name, <any>undefined, { urn })
            case "google-native:healthcare/v1:UserDataMapping":
                return new UserDataMapping(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "healthcare/v1", _module)
