// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a subnetwork in the specified project using the data included in the request.
 */
export class Subnetwork extends pulumi.CustomResource {
    /**
     * Get an existing Subnetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Subnetwork {
        return new Subnetwork(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:compute/beta:Subnetwork';

    /**
     * Returns true if the given object is an instance of Subnetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnetwork.__pulumiType;
    }

    /**
     * Whether this subnetwork can conflict with static routes. Setting this to true allows this subnetwork's primary and secondary ranges to conflict with routes that have already been configured on the corresponding network. Static routes will take precedence over the subnetwork route if the route prefix length is at least as large as the subnetwork prefix length.
     *
     * Also, packets destined to IPs within subnetwork may contain private/sensitive data and are prevented from leaving the virtual network. Setting this field to true will disable this feature.
     *
     * The default value is false and applies to all existing subnetworks and automatically created subnetworks.
     *
     * This field cannot be set to true at resource creation time.
     */
    public readonly allowSubnetCidrRoutesOverlap!: pulumi.Output<boolean>;
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    public readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging. This field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     */
    public readonly enableFlowLogs!: pulumi.Output<boolean>;
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet.
     *
     * To see the latest fingerprint, make a get() request to retrieve a Subnetwork.
     */
    public readonly fingerprint!: pulumi.Output<string>;
    /**
     * [Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork.
     */
    public readonly gatewayAddress!: pulumi.Output<string>;
    /**
     * The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 100.64.0.0/10. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The range can be expanded after creation using expandIpCidrRange.
     */
    public readonly ipCidrRange!: pulumi.Output<string>;
    /**
     * [Output Only] The range of internal IPv6 addresses that are owned by this subnetwork.
     */
    public readonly ipv6CidrRange!: pulumi.Output<string>;
    /**
     * [Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * This field denotes the VPC flow logging options for this subnetwork. If logging is enabled, logs are exported to Cloud Logging.
     */
    public readonly logConfig!: pulumi.Output<outputs.compute.beta.SubnetworkLogConfigResponse>;
    /**
     * The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. Only networks that are in the distributed mode can have subnetworks. This field can be set only at resource creation time.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess.
     */
    public readonly privateIpGoogleAccess!: pulumi.Output<boolean>;
    /**
     * The private IPv6 google access type for the VMs in this subnet. This is an expanded field of enablePrivateV6Access. If both fields are set, privateIpv6GoogleAccess will take priority.
     *
     * This field can be both set at resource creation time and updated using patch.
     */
    public readonly privateIpv6GoogleAccess!: pulumi.Output<string>;
    /**
     * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     */
    public readonly purpose!: pulumi.Output<string>;
    /**
     * URL of the region where the Subnetwork resides. This field can be set only at resource creation time.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request.
     */
    public readonly secondaryIpRanges!: pulumi.Output<outputs.compute.beta.SubnetworkSecondaryRangeResponse[]>;
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    public readonly selfLink!: pulumi.Output<string>;
    /**
     * [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY CREATING: Subnetwork is provisioning DELETING: Subnetwork is being deleted UPDATING: Subnetwork is being updated
     */
    public readonly state!: pulumi.Output<string>;

    /**
     * Create a Subnetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetworkArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.subnetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetwork'");
            }
            inputs["allowSubnetCidrRoutesOverlap"] = args ? args.allowSubnetCidrRoutesOverlap : undefined;
            inputs["creationTimestamp"] = args ? args.creationTimestamp : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["enableFlowLogs"] = args ? args.enableFlowLogs : undefined;
            inputs["fingerprint"] = args ? args.fingerprint : undefined;
            inputs["gatewayAddress"] = args ? args.gatewayAddress : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["ipCidrRange"] = args ? args.ipCidrRange : undefined;
            inputs["ipv6CidrRange"] = args ? args.ipv6CidrRange : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["logConfig"] = args ? args.logConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["privateIpGoogleAccess"] = args ? args.privateIpGoogleAccess : undefined;
            inputs["privateIpv6GoogleAccess"] = args ? args.privateIpv6GoogleAccess : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["purpose"] = args ? args.purpose : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["requestId"] = args ? args.requestId : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["secondaryIpRanges"] = args ? args.secondaryIpRanges : undefined;
            inputs["selfLink"] = args ? args.selfLink : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["subnetwork"] = args ? args.subnetwork : undefined;
        } else {
            inputs["allowSubnetCidrRoutesOverlap"] = undefined /*out*/;
            inputs["creationTimestamp"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["enableFlowLogs"] = undefined /*out*/;
            inputs["fingerprint"] = undefined /*out*/;
            inputs["gatewayAddress"] = undefined /*out*/;
            inputs["ipCidrRange"] = undefined /*out*/;
            inputs["ipv6CidrRange"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["logConfig"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["network"] = undefined /*out*/;
            inputs["privateIpGoogleAccess"] = undefined /*out*/;
            inputs["privateIpv6GoogleAccess"] = undefined /*out*/;
            inputs["purpose"] = undefined /*out*/;
            inputs["region"] = undefined /*out*/;
            inputs["role"] = undefined /*out*/;
            inputs["secondaryIpRanges"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Subnetwork.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Subnetwork resource.
 */
export interface SubnetworkArgs {
    /**
     * Whether this subnetwork can conflict with static routes. Setting this to true allows this subnetwork's primary and secondary ranges to conflict with routes that have already been configured on the corresponding network. Static routes will take precedence over the subnetwork route if the route prefix length is at least as large as the subnetwork prefix length.
     *
     * Also, packets destined to IPs within subnetwork may contain private/sensitive data and are prevented from leaving the virtual network. Setting this field to true will disable this feature.
     *
     * The default value is false and applies to all existing subnetworks and automatically created subnetworks.
     *
     * This field cannot be set to true at resource creation time.
     */
    readonly allowSubnetCidrRoutesOverlap?: pulumi.Input<boolean>;
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    readonly creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging. This field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     */
    readonly enableFlowLogs?: pulumi.Input<boolean>;
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet.
     *
     * To see the latest fingerprint, make a get() request to retrieve a Subnetwork.
     */
    readonly fingerprint?: pulumi.Input<string>;
    /**
     * [Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork.
     */
    readonly gatewayAddress?: pulumi.Input<string>;
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    readonly id?: pulumi.Input<string>;
    /**
     * The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 100.64.0.0/10. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The range can be expanded after creation using expandIpCidrRange.
     */
    readonly ipCidrRange?: pulumi.Input<string>;
    /**
     * [Output Only] The range of internal IPv6 addresses that are owned by this subnetwork.
     */
    readonly ipv6CidrRange?: pulumi.Input<string>;
    /**
     * [Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources.
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * This field denotes the VPC flow logging options for this subnetwork. If logging is enabled, logs are exported to Cloud Logging.
     */
    readonly logConfig?: pulumi.Input<inputs.compute.beta.SubnetworkLogConfigArgs>;
    /**
     * The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. Only networks that are in the distributed mode can have subnetworks. This field can be set only at resource creation time.
     */
    readonly network?: pulumi.Input<string>;
    /**
     * Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess.
     */
    readonly privateIpGoogleAccess?: pulumi.Input<boolean>;
    /**
     * The private IPv6 google access type for the VMs in this subnet. This is an expanded field of enablePrivateV6Access. If both fields are set, privateIpv6GoogleAccess will take priority.
     *
     * This field can be both set at resource creation time and updated using patch.
     */
    readonly privateIpv6GoogleAccess?: pulumi.Input<string>;
    readonly project: pulumi.Input<string>;
    /**
     * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     */
    readonly purpose?: pulumi.Input<string>;
    /**
     * URL of the region where the Subnetwork resides. This field can be set only at resource creation time.
     */
    readonly region: pulumi.Input<string>;
    readonly requestId?: pulumi.Input<string>;
    /**
     * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
     */
    readonly role?: pulumi.Input<string>;
    /**
     * An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request.
     */
    readonly secondaryIpRanges?: pulumi.Input<pulumi.Input<inputs.compute.beta.SubnetworkSecondaryRangeArgs>[]>;
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    readonly selfLink?: pulumi.Input<string>;
    /**
     * [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY CREATING: Subnetwork is provisioning DELETING: Subnetwork is being deleted UPDATING: Subnetwork is being updated
     */
    readonly state?: pulumi.Input<string>;
    readonly subnetwork: pulumi.Input<string>;
}
