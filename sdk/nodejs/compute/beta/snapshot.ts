// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a snapshot in the specified project using the data included in the request.
 */
export class Snapshot extends pulumi.CustomResource {
    /**
     * Get an existing Snapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Snapshot {
        return new Snapshot(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:compute/beta:Snapshot';

    /**
     * Returns true if the given object is an instance of Snapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshot.__pulumiType;
    }

    /**
     * [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk.
     */
    public readonly autoCreated!: pulumi.Output<boolean>;
    /**
     * Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value.
     */
    public readonly chainName!: pulumi.Output<string>;
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    public readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * [Output Only] Size of the source disk, specified in GB.
     */
    public readonly diskSizeGb!: pulumi.Output<string>;
    /**
     * [Output Only] Number of bytes downloaded to restore a snapshot to a disk.
     */
    public readonly downloadBytes!: pulumi.Output<string>;
    /**
     * [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
     */
    public readonly guestFlush!: pulumi.Output<boolean>;
    /**
     * [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.
     *
     * To see the latest fingerprint, make a get() request to retrieve a snapshot.
     */
    public readonly labelFingerprint!: pulumi.Output<string>;
    /**
     * Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * [Output Only] Integer license codes indicating which licenses are attached to this snapshot.
     */
    public readonly licenseCodes!: pulumi.Output<string[]>;
    /**
     * [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
     */
    public readonly licenses!: pulumi.Output<string[]>;
    /**
     * An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API.
     */
    public readonly locationHint!: pulumi.Output<string>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * [Output Only] Reserved for future use.
     */
    public readonly satisfiesPzs!: pulumi.Output<boolean>;
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    public readonly selfLink!: pulumi.Output<string>;
    /**
     * Encrypts the snapshot using a customer-supplied encryption key.
     *
     * After you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request.
     *
     * Customer-supplied encryption keys do not protect access to metadata of the snapshot.
     *
     * If you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot later.
     */
    public readonly snapshotEncryptionKey!: pulumi.Output<outputs.compute.beta.CustomerEncryptionKeyResponse>;
    /**
     * The source disk used to create this snapshot.
     */
    public readonly sourceDisk!: pulumi.Output<string>;
    /**
     * The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
     */
    public readonly sourceDiskEncryptionKey!: pulumi.Output<outputs.compute.beta.CustomerEncryptionKeyResponse>;
    /**
     * [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
     */
    public readonly sourceDiskId!: pulumi.Output<string>;
    /**
     * [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.
     */
    public readonly storageBytes!: pulumi.Output<string>;
    /**
     * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
     */
    public readonly storageBytesStatus!: pulumi.Output<string>;
    /**
     * Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
     */
    public readonly storageLocations!: pulumi.Output<string[]>;

    /**
     * Create a Snapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            inputs["autoCreated"] = args ? args.autoCreated : undefined;
            inputs["chainName"] = args ? args.chainName : undefined;
            inputs["creationTimestamp"] = args ? args.creationTimestamp : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            inputs["downloadBytes"] = args ? args.downloadBytes : undefined;
            inputs["guestFlush"] = args ? args.guestFlush : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["labelFingerprint"] = args ? args.labelFingerprint : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["licenseCodes"] = args ? args.licenseCodes : undefined;
            inputs["licenses"] = args ? args.licenses : undefined;
            inputs["locationHint"] = args ? args.locationHint : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["requestId"] = args ? args.requestId : undefined;
            inputs["satisfiesPzs"] = args ? args.satisfiesPzs : undefined;
            inputs["selfLink"] = args ? args.selfLink : undefined;
            inputs["snapshotEncryptionKey"] = args ? args.snapshotEncryptionKey : undefined;
            inputs["sourceDisk"] = args ? args.sourceDisk : undefined;
            inputs["sourceDiskEncryptionKey"] = args ? args.sourceDiskEncryptionKey : undefined;
            inputs["sourceDiskId"] = args ? args.sourceDiskId : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["storageBytes"] = args ? args.storageBytes : undefined;
            inputs["storageBytesStatus"] = args ? args.storageBytesStatus : undefined;
            inputs["storageLocations"] = args ? args.storageLocations : undefined;
        } else {
            inputs["autoCreated"] = undefined /*out*/;
            inputs["chainName"] = undefined /*out*/;
            inputs["creationTimestamp"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["diskSizeGb"] = undefined /*out*/;
            inputs["downloadBytes"] = undefined /*out*/;
            inputs["guestFlush"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["labelFingerprint"] = undefined /*out*/;
            inputs["labels"] = undefined /*out*/;
            inputs["licenseCodes"] = undefined /*out*/;
            inputs["licenses"] = undefined /*out*/;
            inputs["locationHint"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["satisfiesPzs"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
            inputs["snapshotEncryptionKey"] = undefined /*out*/;
            inputs["sourceDisk"] = undefined /*out*/;
            inputs["sourceDiskEncryptionKey"] = undefined /*out*/;
            inputs["sourceDiskId"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["storageBytes"] = undefined /*out*/;
            inputs["storageBytesStatus"] = undefined /*out*/;
            inputs["storageLocations"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Snapshot.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Snapshot resource.
 */
export interface SnapshotArgs {
    /**
     * [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk.
     */
    readonly autoCreated?: pulumi.Input<boolean>;
    /**
     * Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value.
     */
    readonly chainName?: pulumi.Input<string>;
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    readonly creationTimestamp?: pulumi.Input<string>;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * [Output Only] Size of the source disk, specified in GB.
     */
    readonly diskSizeGb?: pulumi.Input<string>;
    /**
     * [Output Only] Number of bytes downloaded to restore a snapshot to a disk.
     */
    readonly downloadBytes?: pulumi.Input<string>;
    /**
     * [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process. Currently only supported on Windows instances using the Volume Shadow Copy Service (VSS).
     */
    readonly guestFlush?: pulumi.Input<boolean>;
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    readonly id?: pulumi.Input<string>;
    /**
     * [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources.
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.
     *
     * To see the latest fingerprint, make a get() request to retrieve a snapshot.
     */
    readonly labelFingerprint?: pulumi.Input<string>;
    /**
     * Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * [Output Only] Integer license codes indicating which licenses are attached to this snapshot.
     */
    readonly licenseCodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
     */
    readonly licenses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API.
     */
    readonly locationHint?: pulumi.Input<string>;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    readonly name?: pulumi.Input<string>;
    readonly project: pulumi.Input<string>;
    readonly requestId?: pulumi.Input<string>;
    /**
     * [Output Only] Reserved for future use.
     */
    readonly satisfiesPzs?: pulumi.Input<boolean>;
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    readonly selfLink?: pulumi.Input<string>;
    /**
     * Encrypts the snapshot using a customer-supplied encryption key.
     *
     * After you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request.
     *
     * Customer-supplied encryption keys do not protect access to metadata of the snapshot.
     *
     * If you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot later.
     */
    readonly snapshotEncryptionKey?: pulumi.Input<inputs.compute.beta.CustomerEncryptionKeyArgs>;
    /**
     * The source disk used to create this snapshot.
     */
    readonly sourceDisk?: pulumi.Input<string>;
    /**
     * The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
     */
    readonly sourceDiskEncryptionKey?: pulumi.Input<inputs.compute.beta.CustomerEncryptionKeyArgs>;
    /**
     * [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
     */
    readonly sourceDiskId?: pulumi.Input<string>;
    /**
     * [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.
     */
    readonly storageBytes?: pulumi.Input<string>;
    /**
     * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
     */
    readonly storageBytesStatus?: pulumi.Input<string>;
    /**
     * Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
     */
    readonly storageLocations?: pulumi.Input<pulumi.Input<string>[]>;
}
