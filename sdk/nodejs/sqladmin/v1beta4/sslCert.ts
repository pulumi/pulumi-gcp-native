// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted.
 */
export class SslCert extends pulumi.CustomResource {
    /**
     * Get an existing SslCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SslCert {
        return new SslCert(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:sqladmin/v1beta4:SslCert';

    /**
     * Returns true if the given object is an instance of SslCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslCert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslCert.__pulumiType;
    }

    /**
     * PEM representation.
     */
    public /*out*/ readonly cert!: pulumi.Output<string>;
    /**
     * Serial number, as extracted from the certificate.
     */
    public /*out*/ readonly certSerialNumber!: pulumi.Output<string>;
    /**
     * User supplied name. Constrained to [a-zA-Z.-_ ]+.
     */
    public readonly commonName!: pulumi.Output<string>;
    /**
     * The time when the certificate was created in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The time when the certificate expires in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*.
     */
    public /*out*/ readonly expirationTime!: pulumi.Output<string>;
    /**
     * Name of the database instance.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * This is always *sql#sslCert*.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * The URI of this resource.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Sha1 Fingerprint.
     */
    public readonly sha1Fingerprint!: pulumi.Output<string>;

    /**
     * Create a SslCert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslCertArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.sha1Fingerprint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sha1Fingerprint'");
            }
            inputs["commonName"] = args ? args.commonName : undefined;
            inputs["instance"] = args ? args.instance : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["sha1Fingerprint"] = args ? args.sha1Fingerprint : undefined;
            inputs["cert"] = undefined /*out*/;
            inputs["certSerialNumber"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["expirationTime"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
        } else {
            inputs["cert"] = undefined /*out*/;
            inputs["certSerialNumber"] = undefined /*out*/;
            inputs["commonName"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["expirationTime"] = undefined /*out*/;
            inputs["instance"] = undefined /*out*/;
            inputs["kind"] = undefined /*out*/;
            inputs["selfLink"] = undefined /*out*/;
            inputs["sha1Fingerprint"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SslCert.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a SslCert resource.
 */
export interface SslCertArgs {
    /**
     * User supplied name. Must be a distinct name from the other certificates for this instance.
     */
    readonly commonName?: pulumi.Input<string>;
    readonly instance: pulumi.Input<string>;
    readonly project: pulumi.Input<string>;
    readonly sha1Fingerprint: pulumi.Input<string>;
}
