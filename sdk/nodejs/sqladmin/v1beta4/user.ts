// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new user in a Cloud SQL instance.
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:sqladmin/v1beta4:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Dual password status for the user.
     */
    public readonly dualPasswordType!: pulumi.Output<string>;
    /**
     * This field is deprecated and will be removed from a future version of the API.
     *
     * @deprecated This field is deprecated and will be removed from a future version of the API.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
     */
    public readonly host!: pulumi.Output<string>;
    public readonly instance!: pulumi.Output<string>;
    /**
     * This is always `sql#user`.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password for the user.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * User level password validation policy.
     */
    public readonly passwordPolicy!: pulumi.Output<outputs.sqladmin.v1beta4.UserPasswordValidationPolicyResponse>;
    public readonly project!: pulumi.Output<string>;
    public readonly sqlserverUserDetails!: pulumi.Output<outputs.sqladmin.v1beta4.SqlServerUserDetailsResponse>;
    /**
     * The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            resourceInputs["dualPasswordType"] = args ? args.dualPasswordType : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["passwordPolicy"] = args ? args.passwordPolicy : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sqlserverUserDetails"] = args ? args.sqlserverUserDetails : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        } else {
            resourceInputs["dualPasswordType"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["instance"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["passwordPolicy"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["sqlserverUserDetails"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Dual password status for the user.
     */
    dualPasswordType?: pulumi.Input<enums.sqladmin.v1beta4.UserDualPasswordType>;
    /**
     * This field is deprecated and will be removed from a future version of the API.
     *
     * @deprecated This field is deprecated and will be removed from a future version of the API.
     */
    etag?: pulumi.Input<string>;
    /**
     * Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
     */
    host?: pulumi.Input<string>;
    /**
     * The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for *update* because it is already specified on the URL.
     */
    instance: pulumi.Input<string>;
    /**
     * This is always `sql#user`.
     */
    kind?: pulumi.Input<string>;
    /**
     * The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the user.
     */
    password?: pulumi.Input<string>;
    /**
     * User level password validation policy.
     */
    passwordPolicy?: pulumi.Input<inputs.sqladmin.v1beta4.UserPasswordValidationPolicyArgs>;
    /**
     * The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for *update* because it is already specified on the URL.
     */
    project?: pulumi.Input<string>;
    sqlserverUserDetails?: pulumi.Input<inputs.sqladmin.v1beta4.SqlServerUserDetailsArgs>;
    /**
     * The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
     */
    type?: pulumi.Input<enums.sqladmin.v1beta4.UserType>;
}
