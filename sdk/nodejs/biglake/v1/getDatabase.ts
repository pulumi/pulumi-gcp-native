// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets the database specified by the resource name.
 */
export function getDatabase(args: GetDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:biglake/v1:getDatabase", {
        "catalogId": args.catalogId,
        "databaseId": args.databaseId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetDatabaseArgs {
    catalogId: string;
    databaseId: string;
    location: string;
    project?: string;
}

export interface GetDatabaseResult {
    /**
     * The creation time of the database.
     */
    readonly createTime: string;
    /**
     * The deletion time of the database. Only set after the database is deleted.
     */
    readonly deleteTime: string;
    /**
     * The time when this database is considered expired. Only set after the database is deleted.
     */
    readonly expireTime: string;
    /**
     * Options of a Hive database.
     */
    readonly hiveOptions: outputs.biglake.v1.HiveDatabaseOptionsResponse;
    /**
     * The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
     */
    readonly name: string;
    /**
     * The database type.
     */
    readonly type: string;
    /**
     * The last modification time of the database.
     */
    readonly updateTime: string;
}
/**
 * Gets the database specified by the resource name.
 */
export function getDatabaseOutput(args: GetDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getDatabase(a, opts))
}

export interface GetDatabaseOutputArgs {
    catalogId: pulumi.Input<string>;
    databaseId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
