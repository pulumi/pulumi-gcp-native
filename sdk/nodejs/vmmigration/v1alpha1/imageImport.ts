// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new ImageImport in a given project.
 * Auto-naming is currently not supported for this resource.
 */
export class ImageImport extends pulumi.CustomResource {
    /**
     * Get an existing ImageImport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ImageImport {
        return new ImageImport(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:vmmigration/v1alpha1:ImageImport';

    /**
     * Returns true if the given object is an instance of ImageImport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageImport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageImport.__pulumiType;
    }

    /**
     * Immutable. The path to the Cloud Storage file from which the image should be imported.
     */
    public readonly cloudStorageUri!: pulumi.Output<string>;
    /**
     * The time the image import was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Immutable. Target details for importing a disk image, will be used by ImageImportJob.
     */
    public readonly diskImageTargetDefaults!: pulumi.Output<outputs.vmmigration.v1alpha1.DiskImageTargetDetailsResponse>;
    /**
     * Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
     */
    public readonly encryption!: pulumi.Output<outputs.vmmigration.v1alpha1.EncryptionResponse>;
    /**
     * Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
     */
    public readonly imageImportId!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource path of the ImageImport.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.
     */
    public /*out*/ readonly recentImageImportJobs!: pulumi.Output<outputs.vmmigration.v1alpha1.ImageImportJobResponse[]>;
    /**
     * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    public readonly requestId!: pulumi.Output<string | undefined>;

    /**
     * Create a ImageImport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageImportArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.imageImportId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageImportId'");
            }
            resourceInputs["cloudStorageUri"] = args ? args.cloudStorageUri : undefined;
            resourceInputs["diskImageTargetDefaults"] = args ? args.diskImageTargetDefaults : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["imageImportId"] = args ? args.imageImportId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["recentImageImportJobs"] = undefined /*out*/;
        } else {
            resourceInputs["cloudStorageUri"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["diskImageTargetDefaults"] = undefined /*out*/;
            resourceInputs["encryption"] = undefined /*out*/;
            resourceInputs["imageImportId"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["recentImageImportJobs"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["imageImportId", "location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ImageImport.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ImageImport resource.
 */
export interface ImageImportArgs {
    /**
     * Immutable. The path to the Cloud Storage file from which the image should be imported.
     */
    cloudStorageUri?: pulumi.Input<string>;
    /**
     * Immutable. Target details for importing a disk image, will be used by ImageImportJob.
     */
    diskImageTargetDefaults?: pulumi.Input<inputs.vmmigration.v1alpha1.DiskImageTargetDetailsArgs>;
    /**
     * Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
     */
    encryption?: pulumi.Input<inputs.vmmigration.v1alpha1.EncryptionArgs>;
    /**
     * Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen.
     */
    imageImportId: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    requestId?: pulumi.Input<string>;
}
