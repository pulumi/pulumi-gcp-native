// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets details of a single ImageImport.
 */
export function getImageImport(args: GetImageImportArgs, opts?: pulumi.InvokeOptions): Promise<GetImageImportResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:vmmigration/v1alpha1:getImageImport", {
        "imageImportId": args.imageImportId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetImageImportArgs {
    imageImportId: string;
    location: string;
    project?: string;
}

export interface GetImageImportResult {
    /**
     * Immutable. The path to the Cloud Storage file from which the image should be imported.
     */
    readonly cloudStorageUri: string;
    /**
     * The time the image import was created.
     */
    readonly createTime: string;
    /**
     * Immutable. Target details for importing a disk image, will be used by ImageImportJob.
     */
    readonly diskImageTargetDefaults: outputs.vmmigration.v1alpha1.DiskImageTargetDetailsResponse;
    /**
     * Immutable. The encryption details used by the image import process during the image adaptation for Compute Engine.
     */
    readonly encryption: outputs.vmmigration.v1alpha1.EncryptionResponse;
    /**
     * The resource path of the ImageImport.
     */
    readonly name: string;
    /**
     * The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.
     */
    readonly recentImageImportJobs: outputs.vmmigration.v1alpha1.ImageImportJobResponse[];
}
/**
 * Gets details of a single ImageImport.
 */
export function getImageImportOutput(args: GetImageImportOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetImageImportResult> {
    return pulumi.output(args).apply((a: any) => getImageImport(a, opts))
}

export interface GetImageImportOutputArgs {
    imageImportId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
