// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ApplicationArgs } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationIamBindingArgs } from "./applicationIamBinding";
export type ApplicationIamBinding = import("./applicationIamBinding").ApplicationIamBinding;
export const ApplicationIamBinding: typeof import("./applicationIamBinding").ApplicationIamBinding = null as any;
utilities.lazyLoad(exports, ["ApplicationIamBinding"], () => require("./applicationIamBinding"));

export { ApplicationIamMemberArgs } from "./applicationIamMember";
export type ApplicationIamMember = import("./applicationIamMember").ApplicationIamMember;
export const ApplicationIamMember: typeof import("./applicationIamMember").ApplicationIamMember = null as any;
utilities.lazyLoad(exports, ["ApplicationIamMember"], () => require("./applicationIamMember"));

export { ApplicationIamPolicyArgs } from "./applicationIamPolicy";
export type ApplicationIamPolicy = import("./applicationIamPolicy").ApplicationIamPolicy;
export const ApplicationIamPolicy: typeof import("./applicationIamPolicy").ApplicationIamPolicy = null as any;
utilities.lazyLoad(exports, ["ApplicationIamPolicy"], () => require("./applicationIamPolicy"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetApplicationIamPolicyArgs, GetApplicationIamPolicyResult, GetApplicationIamPolicyOutputArgs } from "./getApplicationIamPolicy";
export const getApplicationIamPolicy: typeof import("./getApplicationIamPolicy").getApplicationIamPolicy = null as any;
export const getApplicationIamPolicyOutput: typeof import("./getApplicationIamPolicy").getApplicationIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationIamPolicy","getApplicationIamPolicyOutput"], () => require("./getApplicationIamPolicy"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServiceProjectAttachmentArgs, GetServiceProjectAttachmentResult, GetServiceProjectAttachmentOutputArgs } from "./getServiceProjectAttachment";
export const getServiceProjectAttachment: typeof import("./getServiceProjectAttachment").getServiceProjectAttachment = null as any;
export const getServiceProjectAttachmentOutput: typeof import("./getServiceProjectAttachment").getServiceProjectAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getServiceProjectAttachment","getServiceProjectAttachmentOutput"], () => require("./getServiceProjectAttachment"));

export { GetWorkloadArgs, GetWorkloadResult, GetWorkloadOutputArgs } from "./getWorkload";
export const getWorkload: typeof import("./getWorkload").getWorkload = null as any;
export const getWorkloadOutput: typeof import("./getWorkload").getWorkloadOutput = null as any;
utilities.lazyLoad(exports, ["getWorkload","getWorkloadOutput"], () => require("./getWorkload"));

export { ServiceArgs } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceProjectAttachmentArgs } from "./serviceProjectAttachment";
export type ServiceProjectAttachment = import("./serviceProjectAttachment").ServiceProjectAttachment;
export const ServiceProjectAttachment: typeof import("./serviceProjectAttachment").ServiceProjectAttachment = null as any;
utilities.lazyLoad(exports, ["ServiceProjectAttachment"], () => require("./serviceProjectAttachment"));

export { WorkloadArgs } from "./workload";
export type Workload = import("./workload").Workload;
export const Workload: typeof import("./workload").Workload = null as any;
utilities.lazyLoad(exports, ["Workload"], () => require("./workload"));


// Export enums:
export * from "../../types/enums/apphub/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:apphub/v1:Application":
                return new Application(name, <any>undefined, { urn })
            case "google-native:apphub/v1:ApplicationIamBinding":
                return new ApplicationIamBinding(name, <any>undefined, { urn })
            case "google-native:apphub/v1:ApplicationIamMember":
                return new ApplicationIamMember(name, <any>undefined, { urn })
            case "google-native:apphub/v1:ApplicationIamPolicy":
                return new ApplicationIamPolicy(name, <any>undefined, { urn })
            case "google-native:apphub/v1:Service":
                return new Service(name, <any>undefined, { urn })
            case "google-native:apphub/v1:ServiceProjectAttachment":
                return new ServiceProjectAttachment(name, <any>undefined, { urn })
            case "google-native:apphub/v1:Workload":
                return new Workload(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "apphub/v1", _module)
