// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a Workload in an Application.
 */
export class Workload extends pulumi.CustomResource {
    /**
     * Get an existing Workload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Workload {
        return new Workload(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:apphub/v1alpha:Workload';

    /**
     * Returns true if the given object is an instance of Workload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workload {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workload.__pulumiType;
    }

    public readonly applicationId!: pulumi.Output<string>;
    /**
     * Optional. Consumer provided attributes.
     */
    public readonly attributes!: pulumi.Output<outputs.apphub.v1alpha.AttributesResponse>;
    /**
     * Create time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. User-defined description of a Workload. Can have a maximum length of 2048 characters.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Immutable. The resource name of the original discovered workload.
     */
    public readonly discoveredWorkload!: pulumi.Output<string>;
    /**
     * Optional. User-defined name for the Workload. Can have a maximum length of 63 characters.
     */
    public readonly displayName!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Identifier. The resource name of the Workload. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    public readonly requestId!: pulumi.Output<string | undefined>;
    /**
     * Workload state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Update time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Required. The Workload identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
     */
    public readonly workloadId!: pulumi.Output<string>;
    /**
     * Properties of an underlying compute resource represented by the Workload. These are immutable.
     */
    public /*out*/ readonly workloadProperties!: pulumi.Output<outputs.apphub.v1alpha.WorkloadPropertiesResponse>;
    /**
     * Reference of an underlying compute resource represented by the Workload. These are immutable.
     */
    public /*out*/ readonly workloadReference!: pulumi.Output<outputs.apphub.v1alpha.WorkloadReferenceResponse>;

    /**
     * Create a Workload resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkloadArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.discoveredWorkload === undefined) && !opts.urn) {
                throw new Error("Missing required property 'discoveredWorkload'");
            }
            if ((!args || args.workloadId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workloadId'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["discoveredWorkload"] = args ? args.discoveredWorkload : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["workloadId"] = args ? args.workloadId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["workloadProperties"] = undefined /*out*/;
            resourceInputs["workloadReference"] = undefined /*out*/;
        } else {
            resourceInputs["applicationId"] = undefined /*out*/;
            resourceInputs["attributes"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["discoveredWorkload"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["workloadId"] = undefined /*out*/;
            resourceInputs["workloadProperties"] = undefined /*out*/;
            resourceInputs["workloadReference"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["applicationId", "location", "project", "workloadId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Workload.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Workload resource.
 */
export interface WorkloadArgs {
    applicationId: pulumi.Input<string>;
    /**
     * Optional. Consumer provided attributes.
     */
    attributes?: pulumi.Input<inputs.apphub.v1alpha.AttributesArgs>;
    /**
     * Optional. User-defined description of a Workload. Can have a maximum length of 2048 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Immutable. The resource name of the original discovered workload.
     */
    discoveredWorkload: pulumi.Input<string>;
    /**
     * Optional. User-defined name for the Workload. Can have a maximum length of 63 characters.
     */
    displayName?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * Identifier. The resource name of the Workload. Format: "projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    requestId?: pulumi.Input<string>;
    /**
     * Required. The Workload identifier. Must contain only lowercase letters, numbers or hyphens, with the first character a letter, the last a letter or a number, and a 63 character maximum.
     */
    workloadId: pulumi.Input<string>;
}
