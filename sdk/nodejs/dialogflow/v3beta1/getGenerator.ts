// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Retrieves the specified generator.
 */
export function getGenerator(args: GetGeneratorArgs, opts?: pulumi.InvokeOptions): Promise<GetGeneratorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:dialogflow/v3beta1:getGenerator", {
        "agentId": args.agentId,
        "generatorId": args.generatorId,
        "languageCode": args.languageCode,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetGeneratorArgs {
    agentId: string;
    generatorId: string;
    languageCode?: string;
    location: string;
    project?: string;
}

export interface GetGeneratorResult {
    /**
     * The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
     */
    readonly displayName: string;
    /**
     * The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
     */
    readonly name: string;
    /**
     * Optional. List of custom placeholders in the prompt text.
     */
    readonly placeholders: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1GeneratorPlaceholderResponse[];
    /**
     * Prompt for the LLM model.
     */
    readonly promptText: outputs.dialogflow.v3beta1.GoogleCloudDialogflowCxV3beta1PhraseResponse;
}
/**
 * Retrieves the specified generator.
 */
export function getGeneratorOutput(args: GetGeneratorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGeneratorResult> {
    return pulumi.output(args).apply((a: any) => getGenerator(a, opts))
}

export interface GetGeneratorOutputArgs {
    agentId: pulumi.Input<string>;
    generatorId: pulumi.Input<string>;
    languageCode?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
