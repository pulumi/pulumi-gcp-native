// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetImportDataFileArgs, GetImportDataFileResult, GetImportDataFileOutputArgs } from "./getImportDataFile";
export const getImportDataFile: typeof import("./getImportDataFile").getImportDataFile = null as any;
export const getImportDataFileOutput: typeof import("./getImportDataFile").getImportDataFileOutput = null as any;
utilities.lazyLoad(exports, ["getImportDataFile","getImportDataFileOutput"], () => require("./getImportDataFile"));

export { GetImportJobArgs, GetImportJobResult, GetImportJobOutputArgs } from "./getImportJob";
export const getImportJob: typeof import("./getImportJob").getImportJob = null as any;
export const getImportJobOutput: typeof import("./getImportJob").getImportJobOutput = null as any;
utilities.lazyLoad(exports, ["getImportJob","getImportJobOutput"], () => require("./getImportJob"));

export { GetPreferenceSetArgs, GetPreferenceSetResult, GetPreferenceSetOutputArgs } from "./getPreferenceSet";
export const getPreferenceSet: typeof import("./getPreferenceSet").getPreferenceSet = null as any;
export const getPreferenceSetOutput: typeof import("./getPreferenceSet").getPreferenceSetOutput = null as any;
utilities.lazyLoad(exports, ["getPreferenceSet","getPreferenceSetOutput"], () => require("./getPreferenceSet"));

export { GetReportArgs, GetReportResult, GetReportOutputArgs } from "./getReport";
export const getReport: typeof import("./getReport").getReport = null as any;
export const getReportOutput: typeof import("./getReport").getReportOutput = null as any;
utilities.lazyLoad(exports, ["getReport","getReportOutput"], () => require("./getReport"));

export { GetReportConfigArgs, GetReportConfigResult, GetReportConfigOutputArgs } from "./getReportConfig";
export const getReportConfig: typeof import("./getReportConfig").getReportConfig = null as any;
export const getReportConfigOutput: typeof import("./getReportConfig").getReportConfigOutput = null as any;
utilities.lazyLoad(exports, ["getReportConfig","getReportConfigOutput"], () => require("./getReportConfig"));

export { GetSourceArgs, GetSourceResult, GetSourceOutputArgs } from "./getSource";
export const getSource: typeof import("./getSource").getSource = null as any;
export const getSourceOutput: typeof import("./getSource").getSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSource","getSourceOutput"], () => require("./getSource"));

export { GroupArgs } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { ImportDataFileArgs } from "./importDataFile";
export type ImportDataFile = import("./importDataFile").ImportDataFile;
export const ImportDataFile: typeof import("./importDataFile").ImportDataFile = null as any;
utilities.lazyLoad(exports, ["ImportDataFile"], () => require("./importDataFile"));

export { ImportJobArgs } from "./importJob";
export type ImportJob = import("./importJob").ImportJob;
export const ImportJob: typeof import("./importJob").ImportJob = null as any;
utilities.lazyLoad(exports, ["ImportJob"], () => require("./importJob"));

export { PreferenceSetArgs } from "./preferenceSet";
export type PreferenceSet = import("./preferenceSet").PreferenceSet;
export const PreferenceSet: typeof import("./preferenceSet").PreferenceSet = null as any;
utilities.lazyLoad(exports, ["PreferenceSet"], () => require("./preferenceSet"));

export { ReportArgs } from "./report";
export type Report = import("./report").Report;
export const Report: typeof import("./report").Report = null as any;
utilities.lazyLoad(exports, ["Report"], () => require("./report"));

export { ReportConfigArgs } from "./reportConfig";
export type ReportConfig = import("./reportConfig").ReportConfig;
export const ReportConfig: typeof import("./reportConfig").ReportConfig = null as any;
utilities.lazyLoad(exports, ["ReportConfig"], () => require("./reportConfig"));

export { SourceArgs } from "./source";
export type Source = import("./source").Source;
export const Source: typeof import("./source").Source = null as any;
utilities.lazyLoad(exports, ["Source"], () => require("./source"));


// Export enums:
export * from "../../types/enums/migrationcenter/v1alpha1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:migrationcenter/v1alpha1:Group":
                return new Group(name, <any>undefined, { urn })
            case "google-native:migrationcenter/v1alpha1:ImportDataFile":
                return new ImportDataFile(name, <any>undefined, { urn })
            case "google-native:migrationcenter/v1alpha1:ImportJob":
                return new ImportJob(name, <any>undefined, { urn })
            case "google-native:migrationcenter/v1alpha1:PreferenceSet":
                return new PreferenceSet(name, <any>undefined, { urn })
            case "google-native:migrationcenter/v1alpha1:Report":
                return new Report(name, <any>undefined, { urn })
            case "google-native:migrationcenter/v1alpha1:ReportConfig":
                return new ReportConfig(name, <any>undefined, { urn })
            case "google-native:migrationcenter/v1alpha1:Source":
                return new Source(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "migrationcenter/v1alpha1", _module)
