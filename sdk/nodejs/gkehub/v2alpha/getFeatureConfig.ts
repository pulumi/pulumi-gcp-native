// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * ========= FeatureConfig Services ========= Gets details of a featureConfig.
 */
export function getFeatureConfig(args: GetFeatureConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetFeatureConfigResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:gkehub/v2alpha:getFeatureConfig", {
        "featureConfigId": args.featureConfigId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetFeatureConfigArgs {
    featureConfigId: string;
    location: string;
    project?: string;
}

export interface GetFeatureConfigResult {
    /**
     * When the FeatureConfig resource was created.
     */
    readonly createTime: string;
    /**
     * When the FeatureConfig resource was deleted.
     */
    readonly deleteTime: string;
    /**
     * GCP labels for this FeatureConfig.
     */
    readonly labels: {[key: string]: string};
    /**
     * Resource name of this FeatureConfig, in the format: `projects/{project}/locations/global/FeatureConfigs/{feature_type}/{feature_config}`
     */
    readonly name: string;
    /**
     * Input only. Immutable. User input of feature spec. Note that this field is immutable. Must create a new FeatureConfig if a new feature spec is needed.
     */
    readonly spec: outputs.gkehub.v2alpha.FeatureSpecResponse;
    /**
     * Lifecycle information of the FeatureConfig.
     */
    readonly state: outputs.gkehub.v2alpha.FeatureConfigStateResponse;
    /**
     * Google-generated UUID for this resource. This is unique across all FeatureConfig resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.
     */
    readonly uniqueId: string;
    /**
     * When the FeatureConfig resource was last updated.
     */
    readonly updateTime: string;
}

export function getFeatureConfigOutput(args: GetFeatureConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFeatureConfigResult> {
    return pulumi.output(args).apply(a => getFeatureConfig(a, opts))
}

export interface GetFeatureConfigOutputArgs {
    featureConfigId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
