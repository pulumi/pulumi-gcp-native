// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Adds a new Feature.
 */
export class Feature extends pulumi.CustomResource {
    /**
     * Get an existing Feature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Feature {
        return new Feature(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:gkehub/v1beta:Feature';

    /**
     * Returns true if the given object is an instance of Feature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Feature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Feature.__pulumiType;
    }


    /**
     * Create a Feature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            inputs["createTime"] = args ? args.createTime : undefined;
            inputs["deleteTime"] = args ? args.deleteTime : undefined;
            inputs["featureId"] = args ? args.featureId : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["membershipSpecs"] = args ? args.membershipSpecs : undefined;
            inputs["membershipStates"] = args ? args.membershipStates : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["requestId"] = args ? args.requestId : undefined;
            inputs["resourceState"] = args ? args.resourceState : undefined;
            inputs["spec"] = args ? args.spec : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["updateTime"] = args ? args.updateTime : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Feature.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Feature resource.
 */
export interface FeatureArgs {
    /**
     * Output only. When the Feature resource was created.
     */
    readonly createTime?: pulumi.Input<string>;
    /**
     * Output only. When the Feature resource was deleted.
     */
    readonly deleteTime?: pulumi.Input<string>;
    /**
     * The ID of the feature to create.
     */
    readonly featureId?: pulumi.Input<string>;
    /**
     * GCP labels for this Feature.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: projects/{p}/locations/{l}/memberships/{m} Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
     */
    readonly membershipSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: projects/{p}/locations/{l}/memberships/{m} Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
     */
    readonly membershipStates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output only. The full, unique name of this Feature resource in the format `projects/*&#47;locations/global/features/*`.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The parent (project and location) where the Feature will be created. Specified in the format `projects/*&#47;locations/global`.
     */
    readonly parent: pulumi.Input<string>;
    /**
     * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    readonly requestId?: pulumi.Input<string>;
    /**
     * Output only. State of the Feature resource itself.
     */
    readonly resourceState?: pulumi.Input<inputs.gkehub.v1beta.FeatureResourceState>;
    /**
     * Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.
     */
    readonly spec?: pulumi.Input<inputs.gkehub.v1beta.CommonFeatureSpec>;
    /**
     * Output only. The Hub-wide Feature state.
     */
    readonly state?: pulumi.Input<inputs.gkehub.v1beta.CommonFeatureState>;
    /**
     * Output only. When the Feature resource was last updated.
     */
    readonly updateTime?: pulumi.Input<string>;
}
