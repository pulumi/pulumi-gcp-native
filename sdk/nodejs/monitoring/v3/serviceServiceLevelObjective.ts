// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a ServiceLevelObjective for the given Service.
 */
export class ServiceServiceLevelObjective extends pulumi.CustomResource {
    /**
     * Get an existing ServiceServiceLevelObjective resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ServiceServiceLevelObjective {
        return new ServiceServiceLevelObjective(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:monitoring/v3:ServiceServiceLevelObjective';

    /**
     * Returns true if the given object is an instance of ServiceServiceLevelObjective.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceServiceLevelObjective {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceServiceLevelObjective.__pulumiType;
    }


    /**
     * Create a ServiceServiceLevelObjective resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceServiceLevelObjectiveArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.serviceLevelObjectivesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceLevelObjectivesId'");
            }
            if ((!args || args.servicesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicesId'");
            }
            if ((!args || args.v3Id === undefined) && !opts.urn) {
                throw new Error("Missing required property 'v3Id'");
            }
            if ((!args || args.v3Id1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'v3Id1'");
            }
            inputs["calendarPeriod"] = args ? args.calendarPeriod : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["goal"] = args ? args.goal : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["rollingPeriod"] = args ? args.rollingPeriod : undefined;
            inputs["serviceLevelIndicator"] = args ? args.serviceLevelIndicator : undefined;
            inputs["serviceLevelObjectivesId"] = args ? args.serviceLevelObjectivesId : undefined;
            inputs["servicesId"] = args ? args.servicesId : undefined;
            inputs["v3Id"] = args ? args.v3Id : undefined;
            inputs["v3Id1"] = args ? args.v3Id1 : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ServiceServiceLevelObjective.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a ServiceServiceLevelObjective resource.
 */
export interface ServiceServiceLevelObjectiveArgs {
    /**
     * A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
     */
    readonly calendarPeriod?: pulumi.Input<string>;
    /**
     * Name used for UI elements listing this SLO.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.
     */
    readonly goal?: pulumi.Input<number>;
    /**
     * Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
     */
    readonly name?: pulumi.Input<string>;
    /**
     * A rolling time period, semantically "in the past ". Must be an integer multiple of 1 day no larger than 30 days.
     */
    readonly rollingPeriod?: pulumi.Input<string>;
    /**
     * The definition of good service, used to measure and calculate the quality of the Service's performance with respect to a single aspect of service quality.
     */
    readonly serviceLevelIndicator?: pulumi.Input<inputs.monitoring.v3.ServiceLevelIndicator>;
    readonly serviceLevelObjectivesId: pulumi.Input<string>;
    readonly servicesId: pulumi.Input<string>;
    readonly v3Id: pulumi.Input<string>;
    readonly v3Id1: pulumi.Input<string>;
}
