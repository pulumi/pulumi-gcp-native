// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a Snooze that will prevent alerts, which match the provided criteria, from being opened. The Snooze applies for a specific time interval.
 * Note - this resource's API doesn't support deletion. When deleted, the resource will persist
 * on Google Cloud even though it will be deleted from Pulumi state.
 */
export class Snooze extends pulumi.CustomResource {
    /**
     * Get an existing Snooze resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Snooze {
        return new Snooze(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:monitoring/v3:Snooze';

    /**
     * Returns true if the given object is an instance of Snooze.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snooze {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snooze.__pulumiType;
    }

    /**
     * This defines the criteria for applying the Snooze. See Criteria for more information.
     */
    public readonly criteria!: pulumi.Output<outputs.monitoring.v3.CriteriaResponse>;
    /**
     * A display name for the Snooze. This can be, at most, 512 unicode characters.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The Snooze will be active from interval.start_time through interval.end_time. interval.start_time cannot be in the past. There is a 15 second clock skew to account for the time it takes for a request to reach the API from the UI.
     */
    public readonly interval!: pulumi.Output<outputs.monitoring.v3.TimeIntervalResponse>;
    /**
     * The name of the Snooze. The format is: projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by the system.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a Snooze resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnoozeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.criteria === undefined) && !opts.urn) {
                throw new Error("Missing required property 'criteria'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            resourceInputs["criteria"] = args ? args.criteria : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        } else {
            resourceInputs["criteria"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["interval"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Snooze.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Snooze resource.
 */
export interface SnoozeArgs {
    /**
     * This defines the criteria for applying the Snooze. See Criteria for more information.
     */
    criteria: pulumi.Input<inputs.monitoring.v3.CriteriaArgs>;
    /**
     * A display name for the Snooze. This can be, at most, 512 unicode characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * The Snooze will be active from interval.start_time through interval.end_time. interval.start_time cannot be in the past. There is a 15 second clock skew to account for the time it takes for a request to reach the API from the UI.
     */
    interval: pulumi.Input<inputs.monitoring.v3.TimeIntervalArgs>;
    /**
     * The name of the Snooze. The format is: projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by the system.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
