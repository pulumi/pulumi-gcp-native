// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Stackdriver Monitoring Agent only: Creates a new time series.This method is only for use by the Stackdriver Monitoring Agent. Use projects.timeSeries.create instead.
 */
export class CollectdTimeSeries extends pulumi.CustomResource {
    /**
     * Get an existing CollectdTimeSeries resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CollectdTimeSeries {
        return new CollectdTimeSeries(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:monitoring/v3:CollectdTimeSeries';

    /**
     * Returns true if the given object is an instance of CollectdTimeSeries.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CollectdTimeSeries {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CollectdTimeSeries.__pulumiType;
    }


    /**
     * Create a CollectdTimeSeries resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CollectdTimeSeriesArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.projectsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectsId'");
            }
            inputs["collectdPayloads"] = args ? args.collectdPayloads : undefined;
            inputs["collectdVersion"] = args ? args.collectdVersion : undefined;
            inputs["projectsId"] = args ? args.projectsId : undefined;
            inputs["resource"] = args ? args.resource : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CollectdTimeSeries.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a CollectdTimeSeries resource.
 */
export interface CollectdTimeSeriesArgs {
    /**
     * The collectd payloads representing the time series data. You must not include more than a single point for each time series, so no two payloads can have the same values for all of the fields plugin, plugin_instance, type, and type_instance.
     */
    readonly collectdPayloads?: pulumi.Input<pulumi.Input<inputs.monitoring.v3.CollectdPayload>[]>;
    /**
     * The version of collectd that collected the data. Example: "5.3.0-192.el6".
     */
    readonly collectdVersion?: pulumi.Input<string>;
    readonly projectsId: pulumi.Input<string>;
    /**
     * The monitored resource associated with the time series.
     */
    readonly resource?: pulumi.Input<inputs.monitoring.v3.MonitoredResource>;
}
