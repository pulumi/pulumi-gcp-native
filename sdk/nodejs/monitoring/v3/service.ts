// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a Service.
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp-native:monitoring/v3:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Type used for App Engine services.
     */
    public readonly appEngine!: pulumi.Output<outputs.monitoring.v3.AppEngineResponse>;
    /**
     * Type used for Cloud Endpoints services.
     */
    public readonly cloudEndpoints!: pulumi.Output<outputs.monitoring.v3.CloudEndpointsResponse>;
    /**
     * Type used for Istio services that live in a Kubernetes cluster.
     */
    public readonly clusterIstio!: pulumi.Output<outputs.monitoring.v3.ClusterIstioResponse>;
    /**
     * Custom service type.
     */
    public readonly custom!: pulumi.Output<outputs.monitoring.v3.CustomResponse>;
    /**
     * Name used for UI elements listing this Service.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Type used for canonical services scoped to an Istio mesh. Metrics for Istio are documented here (https://istio.io/latest/docs/reference/config/metrics/)
     */
    public readonly istioCanonicalService!: pulumi.Output<outputs.monitoring.v3.IstioCanonicalServiceResponse>;
    /**
     * Type used for Istio services scoped to an Istio mesh.
     */
    public readonly meshIstio!: pulumi.Output<outputs.monitoring.v3.MeshIstioResponse>;
    /**
     * Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID] 
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configuration for how to query telemetry on a Service.
     */
    public readonly telemetry!: pulumi.Output<outputs.monitoring.v3.TelemetryResponse>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.servicesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicesId'");
            }
            if ((!args || args.v3Id === undefined) && !opts.urn) {
                throw new Error("Missing required property 'v3Id'");
            }
            if ((!args || args.v3Id1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'v3Id1'");
            }
            inputs["appEngine"] = args ? args.appEngine : undefined;
            inputs["cloudEndpoints"] = args ? args.cloudEndpoints : undefined;
            inputs["clusterIstio"] = args ? args.clusterIstio : undefined;
            inputs["custom"] = args ? args.custom : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["istioCanonicalService"] = args ? args.istioCanonicalService : undefined;
            inputs["meshIstio"] = args ? args.meshIstio : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["servicesId"] = args ? args.servicesId : undefined;
            inputs["telemetry"] = args ? args.telemetry : undefined;
            inputs["v3Id"] = args ? args.v3Id : undefined;
            inputs["v3Id1"] = args ? args.v3Id1 : undefined;
        } else {
            inputs["appEngine"] = undefined /*out*/;
            inputs["cloudEndpoints"] = undefined /*out*/;
            inputs["clusterIstio"] = undefined /*out*/;
            inputs["custom"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["istioCanonicalService"] = undefined /*out*/;
            inputs["meshIstio"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["telemetry"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Service.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Type used for App Engine services.
     */
    readonly appEngine?: pulumi.Input<inputs.monitoring.v3.AppEngine>;
    /**
     * Type used for Cloud Endpoints services.
     */
    readonly cloudEndpoints?: pulumi.Input<inputs.monitoring.v3.CloudEndpoints>;
    /**
     * Type used for Istio services that live in a Kubernetes cluster.
     */
    readonly clusterIstio?: pulumi.Input<inputs.monitoring.v3.ClusterIstio>;
    /**
     * Custom service type.
     */
    readonly custom?: pulumi.Input<inputs.monitoring.v3.Custom>;
    /**
     * Name used for UI elements listing this Service.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Type used for canonical services scoped to an Istio mesh. Metrics for Istio are documented here (https://istio.io/latest/docs/reference/config/metrics/)
     */
    readonly istioCanonicalService?: pulumi.Input<inputs.monitoring.v3.IstioCanonicalService>;
    /**
     * Type used for Istio services scoped to an Istio mesh.
     */
    readonly meshIstio?: pulumi.Input<inputs.monitoring.v3.MeshIstio>;
    /**
     * Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID] 
     */
    readonly name?: pulumi.Input<string>;
    readonly servicesId: pulumi.Input<string>;
    /**
     * Configuration for how to query telemetry on a Service.
     */
    readonly telemetry?: pulumi.Input<inputs.monitoring.v3.Telemetry>;
    readonly v3Id: pulumi.Input<string>;
    readonly v3Id1: pulumi.Input<string>;
}
