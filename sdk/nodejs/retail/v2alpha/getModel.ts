// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets a model.
 */
export function getModel(args: GetModelArgs, opts?: pulumi.InvokeOptions): Promise<GetModelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:retail/v2alpha:getModel", {
        "catalogId": args.catalogId,
        "location": args.location,
        "modelId": args.modelId,
        "project": args.project,
    }, opts);
}

export interface GetModelArgs {
    catalogId: string;
    location: string;
    modelId: string;
    project?: string;
}

export interface GetModelResult {
    /**
     * Timestamp the Recommendation Model was created at.
     */
    readonly createTime: string;
    /**
     * The state of data requirements for this model: `DATA_OK` and `DATA_ERROR`. Recommendation model cannot be trained if the data is in `DATA_ERROR` state. Recommendation model can have `DATA_ERROR` state even if serving state is `ACTIVE`: models were trained successfully before, but cannot be refreshed because model no longer has sufficient data for training.
     */
    readonly dataState: string;
    /**
     * The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.
     */
    readonly displayName: string;
    /**
     * Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.
     */
    readonly filteringOption: string;
    /**
     * The timestamp when the latest successful tune finished.
     */
    readonly lastTuneTime: string;
    /**
     * Optional. Additional model features config.
     */
    readonly modelFeaturesConfig: outputs.retail.v2alpha.GoogleCloudRetailV2alphaModelModelFeaturesConfigResponse;
    /**
     * The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.
     */
    readonly name: string;
    /**
     * Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
     */
    readonly optimizationObjective: string;
    /**
     * Optional. The page optimization config.
     */
    readonly pageOptimizationConfig: outputs.retail.v2alpha.GoogleCloudRetailV2alphaModelPageOptimizationConfigResponse;
    /**
     * Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.
     */
    readonly periodicTuningState: string;
    /**
     * The list of valid serving configs associated with the PageOptimizationConfig.
     */
    readonly servingConfigLists: outputs.retail.v2alpha.GoogleCloudRetailV2alphaModelServingConfigListResponse[];
    /**
     * The serving state of the model: `ACTIVE`, `NOT_ACTIVE`.
     */
    readonly servingState: string;
    /**
     * Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.
     */
    readonly trainingState: string;
    /**
     * The tune operation associated with the model. Can be used to determine if there is an ongoing tune for this recommendation. Empty field implies no tune is goig on.
     */
    readonly tuningOperation: string;
    /**
     * The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
     */
    readonly type: string;
    /**
     * Timestamp the Recommendation Model was last updated. E.g. if a Recommendation Model was paused - this would be the time the pause was initiated.
     */
    readonly updateTime: string;
}
/**
 * Gets a model.
 */
export function getModelOutput(args: GetModelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetModelResult> {
    return pulumi.output(args).apply((a: any) => getModel(a, opts))
}

export interface GetModelOutputArgs {
    catalogId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    modelId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
