// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Retrieves the details of a single Restore.
 */
export function getRestore(args: GetRestoreArgs, opts?: pulumi.InvokeOptions): Promise<GetRestoreResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:gkebackup/v1:getRestore", {
        "location": args.location,
        "project": args.project,
        "restoreId": args.restoreId,
        "restorePlanId": args.restorePlanId,
    }, opts);
}

export interface GetRestoreArgs {
    location: string;
    project?: string;
    restoreId: string;
    restorePlanId: string;
}

export interface GetRestoreResult {
    /**
     * Immutable. A reference to the Backup used as the source from which this Restore will restore. Note that this Backup must be a sub-resource of the RestorePlan's backup_plan. Format: `projects/*&#47;locations/*&#47;backupPlans/*&#47;backups/*`.
     */
    readonly backup: string;
    /**
     * The target cluster into which this Restore will restore data. Valid formats: - `projects/*&#47;locations/*&#47;clusters/*` - `projects/*&#47;zones/*&#47;clusters/*` Inherited from parent RestorePlan's cluster value.
     */
    readonly cluster: string;
    /**
     * Timestamp of when the restore operation completed.
     */
    readonly completeTime: string;
    /**
     * The timestamp when this Restore resource was created.
     */
    readonly createTime: string;
    /**
     * User specified descriptive string for this Restore.
     */
    readonly description: string;
    /**
     * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform restore updates in order to avoid race conditions: An `etag` is returned in the response to `GetRestore`, and systems are expected to put that etag in the request to `UpdateRestore` or `DeleteRestore` to ensure that their change will be applied to the same version of the resource.
     */
    readonly etag: string;
    /**
     * A set of custom labels supplied by user.
     */
    readonly labels: {[key: string]: string};
    /**
     * The full name of the Restore resource. Format: `projects/*&#47;locations/*&#47;restorePlans/*&#47;restores/*`
     */
    readonly name: string;
    /**
     * Number of resources excluded during the restore execution.
     */
    readonly resourcesExcludedCount: number;
    /**
     * Number of resources that failed to be restored during the restore execution.
     */
    readonly resourcesFailedCount: number;
    /**
     * Number of resources restored during the restore execution.
     */
    readonly resourcesRestoredCount: number;
    /**
     * Configuration of the Restore. Inherited from parent RestorePlan's restore_config.
     */
    readonly restoreConfig: outputs.gkebackup.v1.RestoreConfigResponse;
    /**
     * The current state of the Restore.
     */
    readonly state: string;
    /**
     * Human-readable description of why the Restore is in its current state.
     */
    readonly stateReason: string;
    /**
     * Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
     */
    readonly uid: string;
    /**
     * The timestamp when this Restore resource was last updated.
     */
    readonly updateTime: string;
    /**
     * Number of volumes restored during the restore execution.
     */
    readonly volumesRestoredCount: number;
}

export function getRestoreOutput(args: GetRestoreOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRestoreResult> {
    return pulumi.output(args).apply(a => getRestore(a, opts))
}

export interface GetRestoreOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    restoreId: pulumi.Input<string>;
    restorePlanId: pulumi.Input<string>;
}
