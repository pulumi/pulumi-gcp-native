// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new Restore for the given RestorePlan.
 * Auto-naming is currently not supported for this resource.
 */
export class Restore extends pulumi.CustomResource {
    /**
     * Get an existing Restore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Restore {
        return new Restore(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:gkebackup/v1:Restore';

    /**
     * Returns true if the given object is an instance of Restore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Restore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Restore.__pulumiType;
    }

    /**
     * Immutable. A reference to the Backup used as the source from which this Restore will restore. Note that this Backup must be a sub-resource of the RestorePlan's backup_plan. Format: projects/*&#47;locations/*&#47;backupPlans/*&#47;backups/*.
     */
    public readonly backup!: pulumi.Output<string>;
    /**
     * The target cluster into which this Restore will restore data. Valid formats: - projects/*&#47;locations/*&#47;clusters/* - projects/*&#47;zones/*&#47;clusters/* Inherited from parent RestorePlan's cluster value.
     */
    public /*out*/ readonly cluster!: pulumi.Output<string>;
    /**
     * Timestamp of when the restore operation completed.
     */
    public /*out*/ readonly completeTime!: pulumi.Output<string>;
    /**
     * The timestamp when this Restore resource was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * User specified descriptive string for this Restore.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform restore updates in order to avoid race conditions: An `etag` is returned in the response to `GetRestore`, and systems are expected to put that etag in the request to `UpdateRestore` or `DeleteRestore` to ensure that their change will be applied to the same version of the resource.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * A set of custom labels supplied by user.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The full name of the Restore resource. Format: projects/*&#47;locations/*&#47;restorePlans/*&#47;restores/*
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Number of resources excluded during the restore execution.
     */
    public /*out*/ readonly resourcesExcludedCount!: pulumi.Output<number>;
    /**
     * Number of resources that failed to be restored during the restore execution.
     */
    public /*out*/ readonly resourcesFailedCount!: pulumi.Output<number>;
    /**
     * Number of resources restored during the restore execution.
     */
    public /*out*/ readonly resourcesRestoredCount!: pulumi.Output<number>;
    /**
     * Configuration of the Restore. Inherited from parent RestorePlan's restore_config.
     */
    public /*out*/ readonly restoreConfig!: pulumi.Output<outputs.gkebackup.v1.RestoreConfigResponse>;
    /**
     * The current state of the Restore.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Human-readable description of why the Restore is in its current state.
     */
    public /*out*/ readonly stateReason!: pulumi.Output<string>;
    /**
     * Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The timestamp when this Restore resource was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Number of volumes restored during the restore execution.
     */
    public /*out*/ readonly volumesRestoredCount!: pulumi.Output<number>;

    /**
     * Create a Restore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RestoreArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.backup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backup'");
            }
            if ((!args || args.restoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restoreId'");
            }
            if ((!args || args.restorePlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restorePlanId'");
            }
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["restoreId"] = args ? args.restoreId : undefined;
            resourceInputs["restorePlanId"] = args ? args.restorePlanId : undefined;
            resourceInputs["cluster"] = undefined /*out*/;
            resourceInputs["completeTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resourcesExcludedCount"] = undefined /*out*/;
            resourceInputs["resourcesFailedCount"] = undefined /*out*/;
            resourceInputs["resourcesRestoredCount"] = undefined /*out*/;
            resourceInputs["restoreConfig"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["volumesRestoredCount"] = undefined /*out*/;
        } else {
            resourceInputs["backup"] = undefined /*out*/;
            resourceInputs["cluster"] = undefined /*out*/;
            resourceInputs["completeTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resourcesExcludedCount"] = undefined /*out*/;
            resourceInputs["resourcesFailedCount"] = undefined /*out*/;
            resourceInputs["resourcesRestoredCount"] = undefined /*out*/;
            resourceInputs["restoreConfig"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["volumesRestoredCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Restore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Restore resource.
 */
export interface RestoreArgs {
    /**
     * Immutable. A reference to the Backup used as the source from which this Restore will restore. Note that this Backup must be a sub-resource of the RestorePlan's backup_plan. Format: projects/*&#47;locations/*&#47;backupPlans/*&#47;backups/*.
     */
    backup: pulumi.Input<string>;
    /**
     * User specified descriptive string for this Restore.
     */
    description?: pulumi.Input<string>;
    /**
     * A set of custom labels supplied by user.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Required. The client-provided short name for the Restore resource. This name must: - be between 1 and 63 characters long (inclusive) - consist of only lower-case ASCII letters, numbers, and dashes - start with a lower-case letter - end with a lower-case letter or number - be unique within the set of Restores in this RestorePlan.
     */
    restoreId: pulumi.Input<string>;
    restorePlanId: pulumi.Input<string>;
}
