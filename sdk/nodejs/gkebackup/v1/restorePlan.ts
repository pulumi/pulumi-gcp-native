// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new RestorePlan in a given location.
 * Auto-naming is currently not supported for this resource.
 */
export class RestorePlan extends pulumi.CustomResource {
    /**
     * Get an existing RestorePlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RestorePlan {
        return new RestorePlan(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:gkebackup/v1:RestorePlan';

    /**
     * Returns true if the given object is an instance of RestorePlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RestorePlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RestorePlan.__pulumiType;
    }

    /**
     * Immutable. A reference to the BackupPlan from which Backups may be used as the source for Restores created via this RestorePlan. Format: `projects/*&#47;locations/*&#47;backupPlans/*`.
     */
    public readonly backupPlan!: pulumi.Output<string>;
    /**
     * Immutable. The target cluster into which Restores created via this RestorePlan will restore data. NOTE: the cluster's region must be the same as the RestorePlan. Valid formats: - `projects/*&#47;locations/*&#47;clusters/*` - `projects/*&#47;zones/*&#47;clusters/*`
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * The timestamp when this RestorePlan resource was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. User specified descriptive string for this RestorePlan.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform restore updates in order to avoid race conditions: An `etag` is returned in the response to `GetRestorePlan`, and systems are expected to put that etag in the request to `UpdateRestorePlan` or `DeleteRestorePlan` to ensure that their change will be applied to the same version of the resource.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Optional. A set of custom labels supplied by user.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly location!: pulumi.Output<string>;
    /**
     * The full name of the RestorePlan resource. Format: `projects/*&#47;locations/*&#47;restorePlans/*`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Configuration of Restores created via this RestorePlan.
     */
    public readonly restoreConfig!: pulumi.Output<outputs.gkebackup.v1.RestoreConfigResponse>;
    /**
     * Required. The client-provided short name for the RestorePlan resource. This name must: - be between 1 and 63 characters long (inclusive) - consist of only lower-case ASCII letters, numbers, and dashes - start with a lower-case letter - end with a lower-case letter or number - be unique within the set of RestorePlans in this location
     */
    public readonly restorePlanId!: pulumi.Output<string>;
    /**
     * State of the RestorePlan. This State field reflects the various stages a RestorePlan can be in during the Create operation.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Human-readable description of why RestorePlan is in the current `state`
     */
    public /*out*/ readonly stateReason!: pulumi.Output<string>;
    /**
     * Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The timestamp when this RestorePlan resource was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a RestorePlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RestorePlanArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.backupPlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupPlan'");
            }
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.restoreConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restoreConfig'");
            }
            if ((!args || args.restorePlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restorePlanId'");
            }
            resourceInputs["backupPlan"] = args ? args.backupPlan : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["restoreConfig"] = args ? args.restoreConfig : undefined;
            resourceInputs["restorePlanId"] = args ? args.restorePlanId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["backupPlan"] = undefined /*out*/;
            resourceInputs["cluster"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["restoreConfig"] = undefined /*out*/;
            resourceInputs["restorePlanId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project", "restorePlanId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(RestorePlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RestorePlan resource.
 */
export interface RestorePlanArgs {
    /**
     * Immutable. A reference to the BackupPlan from which Backups may be used as the source for Restores created via this RestorePlan. Format: `projects/*&#47;locations/*&#47;backupPlans/*`.
     */
    backupPlan: pulumi.Input<string>;
    /**
     * Immutable. The target cluster into which Restores created via this RestorePlan will restore data. NOTE: the cluster's region must be the same as the RestorePlan. Valid formats: - `projects/*&#47;locations/*&#47;clusters/*` - `projects/*&#47;zones/*&#47;clusters/*`
     */
    cluster: pulumi.Input<string>;
    /**
     * Optional. User specified descriptive string for this RestorePlan.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. A set of custom labels supplied by user.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Configuration of Restores created via this RestorePlan.
     */
    restoreConfig: pulumi.Input<inputs.gkebackup.v1.RestoreConfigArgs>;
    /**
     * Required. The client-provided short name for the RestorePlan resource. This name must: - be between 1 and 63 characters long (inclusive) - consist of only lower-case ASCII letters, numbers, and dashes - start with a lower-case letter - end with a lower-case letter or number - be unique within the set of RestorePlans in this location
     */
    restorePlanId: pulumi.Input<string>;
}
