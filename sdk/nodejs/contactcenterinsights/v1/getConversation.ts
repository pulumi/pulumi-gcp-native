// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets a conversation.
 */
export function getConversation(args: GetConversationArgs, opts?: pulumi.InvokeOptions): Promise<GetConversationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:contactcenterinsights/v1:getConversation", {
        "conversationId": args.conversationId,
        "location": args.location,
        "project": args.project,
        "view": args.view,
    }, opts);
}

export interface GetConversationArgs {
    conversationId: string;
    location: string;
    project?: string;
    view?: string;
}

export interface GetConversationResult {
    /**
     * An opaque, user-specified string representing the human agent who handled the conversation.
     */
    readonly agentId: string;
    /**
     * Call-specific metadata.
     */
    readonly callMetadata: outputs.contactcenterinsights.v1.GoogleCloudContactcenterinsightsV1ConversationCallMetadataResponse;
    /**
     * The time at which the conversation was created.
     */
    readonly createTime: string;
    /**
     * The source of the audio and transcription for the conversation.
     */
    readonly dataSource: outputs.contactcenterinsights.v1.GoogleCloudContactcenterinsightsV1ConversationDataSourceResponse;
    /**
     * All the matched Dialogflow intents in the call. The key corresponds to a Dialogflow intent, format: projects/{project}/agent/{agent}/intents/{intent}
     */
    readonly dialogflowIntents: {[key: string]: outputs.contactcenterinsights.v1.GoogleCloudContactcenterinsightsV1DialogflowIntentResponse};
    /**
     * The duration of the conversation.
     */
    readonly duration: string;
    /**
     * The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.
     */
    readonly expireTime: string;
    /**
     * A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.
     */
    readonly labels: {[key: string]: string};
    /**
     * A user-specified language code for the conversation.
     */
    readonly languageCode: string;
    /**
     * The conversation's latest analysis, if one exists.
     */
    readonly latestAnalysis: outputs.contactcenterinsights.v1.GoogleCloudContactcenterinsightsV1AnalysisResponse;
    /**
     * Latest summary of the conversation.
     */
    readonly latestSummary: outputs.contactcenterinsights.v1.GoogleCloudContactcenterinsightsV1ConversationSummarizationSuggestionDataResponse;
    /**
     * Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
     */
    readonly medium: string;
    /**
     * Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}
     */
    readonly name: string;
    /**
     * Obfuscated user ID which the customer sent to us.
     */
    readonly obfuscatedUserId: string;
    /**
     * The annotations that were generated during the customer and agent interaction.
     */
    readonly runtimeAnnotations: outputs.contactcenterinsights.v1.GoogleCloudContactcenterinsightsV1RuntimeAnnotationResponse[];
    /**
     * The time at which the conversation started.
     */
    readonly startTime: string;
    /**
     * The conversation transcript.
     */
    readonly transcript: outputs.contactcenterinsights.v1.GoogleCloudContactcenterinsightsV1ConversationTranscriptResponse;
    /**
     * Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.
     */
    readonly ttl: string;
    /**
     * The number of turns in the conversation.
     */
    readonly turnCount: number;
    /**
     * The most recent time at which the conversation was updated.
     */
    readonly updateTime: string;
}
/**
 * Gets a conversation.
 */
export function getConversationOutput(args: GetConversationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConversationResult> {
    return pulumi.output(args).apply((a: any) => getConversation(a, opts))
}

export interface GetConversationOutputArgs {
    conversationId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}
