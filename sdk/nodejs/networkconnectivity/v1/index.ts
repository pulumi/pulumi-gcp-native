// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetHubArgs, GetHubResult, GetHubOutputArgs } from "./getHub";
export const getHub: typeof import("./getHub").getHub = null as any;
export const getHubOutput: typeof import("./getHub").getHubOutput = null as any;
utilities.lazyLoad(exports, ["getHub","getHubOutput"], () => require("./getHub"));

export { GetHubGroupIamPolicyArgs, GetHubGroupIamPolicyResult, GetHubGroupIamPolicyOutputArgs } from "./getHubGroupIamPolicy";
export const getHubGroupIamPolicy: typeof import("./getHubGroupIamPolicy").getHubGroupIamPolicy = null as any;
export const getHubGroupIamPolicyOutput: typeof import("./getHubGroupIamPolicy").getHubGroupIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHubGroupIamPolicy","getHubGroupIamPolicyOutput"], () => require("./getHubGroupIamPolicy"));

export { GetHubIamPolicyArgs, GetHubIamPolicyResult, GetHubIamPolicyOutputArgs } from "./getHubIamPolicy";
export const getHubIamPolicy: typeof import("./getHubIamPolicy").getHubIamPolicy = null as any;
export const getHubIamPolicyOutput: typeof import("./getHubIamPolicy").getHubIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHubIamPolicy","getHubIamPolicyOutput"], () => require("./getHubIamPolicy"));

export { GetInternalRangeArgs, GetInternalRangeResult, GetInternalRangeOutputArgs } from "./getInternalRange";
export const getInternalRange: typeof import("./getInternalRange").getInternalRange = null as any;
export const getInternalRangeOutput: typeof import("./getInternalRange").getInternalRangeOutput = null as any;
utilities.lazyLoad(exports, ["getInternalRange","getInternalRangeOutput"], () => require("./getInternalRange"));

export { GetPolicyBasedRouteArgs, GetPolicyBasedRouteResult, GetPolicyBasedRouteOutputArgs } from "./getPolicyBasedRoute";
export const getPolicyBasedRoute: typeof import("./getPolicyBasedRoute").getPolicyBasedRoute = null as any;
export const getPolicyBasedRouteOutput: typeof import("./getPolicyBasedRoute").getPolicyBasedRouteOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyBasedRoute","getPolicyBasedRouteOutput"], () => require("./getPolicyBasedRoute"));

export { GetPolicyBasedRouteIamPolicyArgs, GetPolicyBasedRouteIamPolicyResult, GetPolicyBasedRouteIamPolicyOutputArgs } from "./getPolicyBasedRouteIamPolicy";
export const getPolicyBasedRouteIamPolicy: typeof import("./getPolicyBasedRouteIamPolicy").getPolicyBasedRouteIamPolicy = null as any;
export const getPolicyBasedRouteIamPolicyOutput: typeof import("./getPolicyBasedRouteIamPolicy").getPolicyBasedRouteIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyBasedRouteIamPolicy","getPolicyBasedRouteIamPolicyOutput"], () => require("./getPolicyBasedRouteIamPolicy"));

export { GetServiceClassIamPolicyArgs, GetServiceClassIamPolicyResult, GetServiceClassIamPolicyOutputArgs } from "./getServiceClassIamPolicy";
export const getServiceClassIamPolicy: typeof import("./getServiceClassIamPolicy").getServiceClassIamPolicy = null as any;
export const getServiceClassIamPolicyOutput: typeof import("./getServiceClassIamPolicy").getServiceClassIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceClassIamPolicy","getServiceClassIamPolicyOutput"], () => require("./getServiceClassIamPolicy"));

export { GetServiceConnectionMapArgs, GetServiceConnectionMapResult, GetServiceConnectionMapOutputArgs } from "./getServiceConnectionMap";
export const getServiceConnectionMap: typeof import("./getServiceConnectionMap").getServiceConnectionMap = null as any;
export const getServiceConnectionMapOutput: typeof import("./getServiceConnectionMap").getServiceConnectionMapOutput = null as any;
utilities.lazyLoad(exports, ["getServiceConnectionMap","getServiceConnectionMapOutput"], () => require("./getServiceConnectionMap"));

export { GetServiceConnectionMapIamPolicyArgs, GetServiceConnectionMapIamPolicyResult, GetServiceConnectionMapIamPolicyOutputArgs } from "./getServiceConnectionMapIamPolicy";
export const getServiceConnectionMapIamPolicy: typeof import("./getServiceConnectionMapIamPolicy").getServiceConnectionMapIamPolicy = null as any;
export const getServiceConnectionMapIamPolicyOutput: typeof import("./getServiceConnectionMapIamPolicy").getServiceConnectionMapIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceConnectionMapIamPolicy","getServiceConnectionMapIamPolicyOutput"], () => require("./getServiceConnectionMapIamPolicy"));

export { GetServiceConnectionPolicyArgs, GetServiceConnectionPolicyResult, GetServiceConnectionPolicyOutputArgs } from "./getServiceConnectionPolicy";
export const getServiceConnectionPolicy: typeof import("./getServiceConnectionPolicy").getServiceConnectionPolicy = null as any;
export const getServiceConnectionPolicyOutput: typeof import("./getServiceConnectionPolicy").getServiceConnectionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceConnectionPolicy","getServiceConnectionPolicyOutput"], () => require("./getServiceConnectionPolicy"));

export { GetServiceConnectionPolicyIamPolicyArgs, GetServiceConnectionPolicyIamPolicyResult, GetServiceConnectionPolicyIamPolicyOutputArgs } from "./getServiceConnectionPolicyIamPolicy";
export const getServiceConnectionPolicyIamPolicy: typeof import("./getServiceConnectionPolicyIamPolicy").getServiceConnectionPolicyIamPolicy = null as any;
export const getServiceConnectionPolicyIamPolicyOutput: typeof import("./getServiceConnectionPolicyIamPolicy").getServiceConnectionPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceConnectionPolicyIamPolicy","getServiceConnectionPolicyIamPolicyOutput"], () => require("./getServiceConnectionPolicyIamPolicy"));

export { GetServiceConnectionTokenArgs, GetServiceConnectionTokenResult, GetServiceConnectionTokenOutputArgs } from "./getServiceConnectionToken";
export const getServiceConnectionToken: typeof import("./getServiceConnectionToken").getServiceConnectionToken = null as any;
export const getServiceConnectionTokenOutput: typeof import("./getServiceConnectionToken").getServiceConnectionTokenOutput = null as any;
utilities.lazyLoad(exports, ["getServiceConnectionToken","getServiceConnectionTokenOutput"], () => require("./getServiceConnectionToken"));

export { GetSpokeArgs, GetSpokeResult, GetSpokeOutputArgs } from "./getSpoke";
export const getSpoke: typeof import("./getSpoke").getSpoke = null as any;
export const getSpokeOutput: typeof import("./getSpoke").getSpokeOutput = null as any;
utilities.lazyLoad(exports, ["getSpoke","getSpokeOutput"], () => require("./getSpoke"));

export { GetSpokeIamPolicyArgs, GetSpokeIamPolicyResult, GetSpokeIamPolicyOutputArgs } from "./getSpokeIamPolicy";
export const getSpokeIamPolicy: typeof import("./getSpokeIamPolicy").getSpokeIamPolicy = null as any;
export const getSpokeIamPolicyOutput: typeof import("./getSpokeIamPolicy").getSpokeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSpokeIamPolicy","getSpokeIamPolicyOutput"], () => require("./getSpokeIamPolicy"));

export { HubArgs } from "./hub";
export type Hub = import("./hub").Hub;
export const Hub: typeof import("./hub").Hub = null as any;
utilities.lazyLoad(exports, ["Hub"], () => require("./hub"));

export { HubGroupIamBindingArgs } from "./hubGroupIamBinding";
export type HubGroupIamBinding = import("./hubGroupIamBinding").HubGroupIamBinding;
export const HubGroupIamBinding: typeof import("./hubGroupIamBinding").HubGroupIamBinding = null as any;
utilities.lazyLoad(exports, ["HubGroupIamBinding"], () => require("./hubGroupIamBinding"));

export { HubGroupIamMemberArgs } from "./hubGroupIamMember";
export type HubGroupIamMember = import("./hubGroupIamMember").HubGroupIamMember;
export const HubGroupIamMember: typeof import("./hubGroupIamMember").HubGroupIamMember = null as any;
utilities.lazyLoad(exports, ["HubGroupIamMember"], () => require("./hubGroupIamMember"));

export { HubGroupIamPolicyArgs } from "./hubGroupIamPolicy";
export type HubGroupIamPolicy = import("./hubGroupIamPolicy").HubGroupIamPolicy;
export const HubGroupIamPolicy: typeof import("./hubGroupIamPolicy").HubGroupIamPolicy = null as any;
utilities.lazyLoad(exports, ["HubGroupIamPolicy"], () => require("./hubGroupIamPolicy"));

export { HubIamBindingArgs } from "./hubIamBinding";
export type HubIamBinding = import("./hubIamBinding").HubIamBinding;
export const HubIamBinding: typeof import("./hubIamBinding").HubIamBinding = null as any;
utilities.lazyLoad(exports, ["HubIamBinding"], () => require("./hubIamBinding"));

export { HubIamMemberArgs } from "./hubIamMember";
export type HubIamMember = import("./hubIamMember").HubIamMember;
export const HubIamMember: typeof import("./hubIamMember").HubIamMember = null as any;
utilities.lazyLoad(exports, ["HubIamMember"], () => require("./hubIamMember"));

export { HubIamPolicyArgs } from "./hubIamPolicy";
export type HubIamPolicy = import("./hubIamPolicy").HubIamPolicy;
export const HubIamPolicy: typeof import("./hubIamPolicy").HubIamPolicy = null as any;
utilities.lazyLoad(exports, ["HubIamPolicy"], () => require("./hubIamPolicy"));

export { InternalRangeArgs } from "./internalRange";
export type InternalRange = import("./internalRange").InternalRange;
export const InternalRange: typeof import("./internalRange").InternalRange = null as any;
utilities.lazyLoad(exports, ["InternalRange"], () => require("./internalRange"));

export { PolicyBasedRouteArgs } from "./policyBasedRoute";
export type PolicyBasedRoute = import("./policyBasedRoute").PolicyBasedRoute;
export const PolicyBasedRoute: typeof import("./policyBasedRoute").PolicyBasedRoute = null as any;
utilities.lazyLoad(exports, ["PolicyBasedRoute"], () => require("./policyBasedRoute"));

export { PolicyBasedRouteIamBindingArgs } from "./policyBasedRouteIamBinding";
export type PolicyBasedRouteIamBinding = import("./policyBasedRouteIamBinding").PolicyBasedRouteIamBinding;
export const PolicyBasedRouteIamBinding: typeof import("./policyBasedRouteIamBinding").PolicyBasedRouteIamBinding = null as any;
utilities.lazyLoad(exports, ["PolicyBasedRouteIamBinding"], () => require("./policyBasedRouteIamBinding"));

export { PolicyBasedRouteIamMemberArgs } from "./policyBasedRouteIamMember";
export type PolicyBasedRouteIamMember = import("./policyBasedRouteIamMember").PolicyBasedRouteIamMember;
export const PolicyBasedRouteIamMember: typeof import("./policyBasedRouteIamMember").PolicyBasedRouteIamMember = null as any;
utilities.lazyLoad(exports, ["PolicyBasedRouteIamMember"], () => require("./policyBasedRouteIamMember"));

export { PolicyBasedRouteIamPolicyArgs } from "./policyBasedRouteIamPolicy";
export type PolicyBasedRouteIamPolicy = import("./policyBasedRouteIamPolicy").PolicyBasedRouteIamPolicy;
export const PolicyBasedRouteIamPolicy: typeof import("./policyBasedRouteIamPolicy").PolicyBasedRouteIamPolicy = null as any;
utilities.lazyLoad(exports, ["PolicyBasedRouteIamPolicy"], () => require("./policyBasedRouteIamPolicy"));

export { ServiceClassIamBindingArgs } from "./serviceClassIamBinding";
export type ServiceClassIamBinding = import("./serviceClassIamBinding").ServiceClassIamBinding;
export const ServiceClassIamBinding: typeof import("./serviceClassIamBinding").ServiceClassIamBinding = null as any;
utilities.lazyLoad(exports, ["ServiceClassIamBinding"], () => require("./serviceClassIamBinding"));

export { ServiceClassIamMemberArgs } from "./serviceClassIamMember";
export type ServiceClassIamMember = import("./serviceClassIamMember").ServiceClassIamMember;
export const ServiceClassIamMember: typeof import("./serviceClassIamMember").ServiceClassIamMember = null as any;
utilities.lazyLoad(exports, ["ServiceClassIamMember"], () => require("./serviceClassIamMember"));

export { ServiceClassIamPolicyArgs } from "./serviceClassIamPolicy";
export type ServiceClassIamPolicy = import("./serviceClassIamPolicy").ServiceClassIamPolicy;
export const ServiceClassIamPolicy: typeof import("./serviceClassIamPolicy").ServiceClassIamPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceClassIamPolicy"], () => require("./serviceClassIamPolicy"));

export { ServiceConnectionMapArgs } from "./serviceConnectionMap";
export type ServiceConnectionMap = import("./serviceConnectionMap").ServiceConnectionMap;
export const ServiceConnectionMap: typeof import("./serviceConnectionMap").ServiceConnectionMap = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionMap"], () => require("./serviceConnectionMap"));

export { ServiceConnectionMapIamBindingArgs } from "./serviceConnectionMapIamBinding";
export type ServiceConnectionMapIamBinding = import("./serviceConnectionMapIamBinding").ServiceConnectionMapIamBinding;
export const ServiceConnectionMapIamBinding: typeof import("./serviceConnectionMapIamBinding").ServiceConnectionMapIamBinding = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionMapIamBinding"], () => require("./serviceConnectionMapIamBinding"));

export { ServiceConnectionMapIamMemberArgs } from "./serviceConnectionMapIamMember";
export type ServiceConnectionMapIamMember = import("./serviceConnectionMapIamMember").ServiceConnectionMapIamMember;
export const ServiceConnectionMapIamMember: typeof import("./serviceConnectionMapIamMember").ServiceConnectionMapIamMember = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionMapIamMember"], () => require("./serviceConnectionMapIamMember"));

export { ServiceConnectionMapIamPolicyArgs } from "./serviceConnectionMapIamPolicy";
export type ServiceConnectionMapIamPolicy = import("./serviceConnectionMapIamPolicy").ServiceConnectionMapIamPolicy;
export const ServiceConnectionMapIamPolicy: typeof import("./serviceConnectionMapIamPolicy").ServiceConnectionMapIamPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionMapIamPolicy"], () => require("./serviceConnectionMapIamPolicy"));

export { ServiceConnectionPolicyArgs } from "./serviceConnectionPolicy";
export type ServiceConnectionPolicy = import("./serviceConnectionPolicy").ServiceConnectionPolicy;
export const ServiceConnectionPolicy: typeof import("./serviceConnectionPolicy").ServiceConnectionPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionPolicy"], () => require("./serviceConnectionPolicy"));

export { ServiceConnectionPolicyIamBindingArgs } from "./serviceConnectionPolicyIamBinding";
export type ServiceConnectionPolicyIamBinding = import("./serviceConnectionPolicyIamBinding").ServiceConnectionPolicyIamBinding;
export const ServiceConnectionPolicyIamBinding: typeof import("./serviceConnectionPolicyIamBinding").ServiceConnectionPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionPolicyIamBinding"], () => require("./serviceConnectionPolicyIamBinding"));

export { ServiceConnectionPolicyIamMemberArgs } from "./serviceConnectionPolicyIamMember";
export type ServiceConnectionPolicyIamMember = import("./serviceConnectionPolicyIamMember").ServiceConnectionPolicyIamMember;
export const ServiceConnectionPolicyIamMember: typeof import("./serviceConnectionPolicyIamMember").ServiceConnectionPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionPolicyIamMember"], () => require("./serviceConnectionPolicyIamMember"));

export { ServiceConnectionPolicyIamPolicyArgs } from "./serviceConnectionPolicyIamPolicy";
export type ServiceConnectionPolicyIamPolicy = import("./serviceConnectionPolicyIamPolicy").ServiceConnectionPolicyIamPolicy;
export const ServiceConnectionPolicyIamPolicy: typeof import("./serviceConnectionPolicyIamPolicy").ServiceConnectionPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionPolicyIamPolicy"], () => require("./serviceConnectionPolicyIamPolicy"));

export { ServiceConnectionTokenArgs } from "./serviceConnectionToken";
export type ServiceConnectionToken = import("./serviceConnectionToken").ServiceConnectionToken;
export const ServiceConnectionToken: typeof import("./serviceConnectionToken").ServiceConnectionToken = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionToken"], () => require("./serviceConnectionToken"));

export { SpokeArgs } from "./spoke";
export type Spoke = import("./spoke").Spoke;
export const Spoke: typeof import("./spoke").Spoke = null as any;
utilities.lazyLoad(exports, ["Spoke"], () => require("./spoke"));

export { SpokeIamBindingArgs } from "./spokeIamBinding";
export type SpokeIamBinding = import("./spokeIamBinding").SpokeIamBinding;
export const SpokeIamBinding: typeof import("./spokeIamBinding").SpokeIamBinding = null as any;
utilities.lazyLoad(exports, ["SpokeIamBinding"], () => require("./spokeIamBinding"));

export { SpokeIamMemberArgs } from "./spokeIamMember";
export type SpokeIamMember = import("./spokeIamMember").SpokeIamMember;
export const SpokeIamMember: typeof import("./spokeIamMember").SpokeIamMember = null as any;
utilities.lazyLoad(exports, ["SpokeIamMember"], () => require("./spokeIamMember"));

export { SpokeIamPolicyArgs } from "./spokeIamPolicy";
export type SpokeIamPolicy = import("./spokeIamPolicy").SpokeIamPolicy;
export const SpokeIamPolicy: typeof import("./spokeIamPolicy").SpokeIamPolicy = null as any;
utilities.lazyLoad(exports, ["SpokeIamPolicy"], () => require("./spokeIamPolicy"));


// Export enums:
export * from "../../types/enums/networkconnectivity/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:networkconnectivity/v1:Hub":
                return new Hub(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:HubGroupIamBinding":
                return new HubGroupIamBinding(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:HubGroupIamMember":
                return new HubGroupIamMember(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:HubGroupIamPolicy":
                return new HubGroupIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:HubIamBinding":
                return new HubIamBinding(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:HubIamMember":
                return new HubIamMember(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:HubIamPolicy":
                return new HubIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:InternalRange":
                return new InternalRange(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:PolicyBasedRoute":
                return new PolicyBasedRoute(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:PolicyBasedRouteIamBinding":
                return new PolicyBasedRouteIamBinding(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:PolicyBasedRouteIamMember":
                return new PolicyBasedRouteIamMember(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:PolicyBasedRouteIamPolicy":
                return new PolicyBasedRouteIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceClassIamBinding":
                return new ServiceClassIamBinding(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceClassIamMember":
                return new ServiceClassIamMember(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceClassIamPolicy":
                return new ServiceClassIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceConnectionMap":
                return new ServiceConnectionMap(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceConnectionMapIamBinding":
                return new ServiceConnectionMapIamBinding(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceConnectionMapIamMember":
                return new ServiceConnectionMapIamMember(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceConnectionMapIamPolicy":
                return new ServiceConnectionMapIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceConnectionPolicy":
                return new ServiceConnectionPolicy(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceConnectionPolicyIamBinding":
                return new ServiceConnectionPolicyIamBinding(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceConnectionPolicyIamMember":
                return new ServiceConnectionPolicyIamMember(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceConnectionPolicyIamPolicy":
                return new ServiceConnectionPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:ServiceConnectionToken":
                return new ServiceConnectionToken(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:Spoke":
                return new Spoke(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:SpokeIamBinding":
                return new SpokeIamBinding(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:SpokeIamMember":
                return new SpokeIamMember(name, <any>undefined, { urn })
            case "google-native:networkconnectivity/v1:SpokeIamPolicy":
                return new SpokeIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "networkconnectivity/v1", _module)
