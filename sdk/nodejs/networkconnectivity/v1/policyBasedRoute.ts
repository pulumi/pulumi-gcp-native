// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new policy-based route in a given project and location.
 * Auto-naming is currently not supported for this resource.
 */
export class PolicyBasedRoute extends pulumi.CustomResource {
    /**
     * Get an existing PolicyBasedRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PolicyBasedRoute {
        return new PolicyBasedRoute(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:networkconnectivity/v1:PolicyBasedRoute';

    /**
     * Returns true if the given object is an instance of PolicyBasedRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyBasedRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyBasedRoute.__pulumiType;
    }

    /**
     * Time when the policy-based route was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. An optional description of this resource. Provide this field when you create the resource.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The filter to match L4 traffic.
     */
    public readonly filter!: pulumi.Output<outputs.networkconnectivity.v1.FilterResponse>;
    /**
     * Optional. The interconnect attachments that this policy-based route applies to.
     */
    public readonly interconnectAttachment!: pulumi.Output<outputs.networkconnectivity.v1.InterconnectAttachmentResponse>;
    /**
     * Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * User-defined labels.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
     */
    public readonly nextHopIlbIp!: pulumi.Output<string>;
    /**
     * Optional. Other routes that will be referenced to determine the next hop of the packet.
     */
    public readonly nextHopOtherRoutes!: pulumi.Output<string>;
    /**
     * Required. Unique id for the policy-based route to create.
     */
    public readonly policyBasedRouteId!: pulumi.Output<string>;
    /**
     * Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
     */
    public readonly priority!: pulumi.Output<number>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    public readonly requestId!: pulumi.Output<string | undefined>;
    /**
     * Server-defined fully-qualified URL for this resource.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Time when the policy-based route was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Optional. VM instances to which this policy-based route applies to.
     */
    public readonly virtualMachine!: pulumi.Output<outputs.networkconnectivity.v1.VirtualMachineResponse>;
    /**
     * If potential misconfigurations are detected for this route, this field will be populated with warning messages.
     */
    public /*out*/ readonly warnings!: pulumi.Output<outputs.networkconnectivity.v1.WarningsResponse[]>;

    /**
     * Create a PolicyBasedRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyBasedRouteArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.policyBasedRouteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyBasedRouteId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["interconnectAttachment"] = args ? args.interconnectAttachment : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["nextHopIlbIp"] = args ? args.nextHopIlbIp : undefined;
            resourceInputs["nextHopOtherRoutes"] = args ? args.nextHopOtherRoutes : undefined;
            resourceInputs["policyBasedRouteId"] = args ? args.policyBasedRouteId : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["virtualMachine"] = args ? args.virtualMachine : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["warnings"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["filter"] = undefined /*out*/;
            resourceInputs["interconnectAttachment"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["network"] = undefined /*out*/;
            resourceInputs["nextHopIlbIp"] = undefined /*out*/;
            resourceInputs["nextHopOtherRoutes"] = undefined /*out*/;
            resourceInputs["policyBasedRouteId"] = undefined /*out*/;
            resourceInputs["priority"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["virtualMachine"] = undefined /*out*/;
            resourceInputs["warnings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["policyBasedRouteId", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(PolicyBasedRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PolicyBasedRoute resource.
 */
export interface PolicyBasedRouteArgs {
    /**
     * Optional. An optional description of this resource. Provide this field when you create the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The filter to match L4 traffic.
     */
    filter: pulumi.Input<inputs.networkconnectivity.v1.FilterArgs>;
    /**
     * Optional. The interconnect attachments that this policy-based route applies to.
     */
    interconnectAttachment?: pulumi.Input<inputs.networkconnectivity.v1.InterconnectAttachmentArgs>;
    /**
     * User-defined labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
     */
    name?: pulumi.Input<string>;
    /**
     * Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
     */
    network: pulumi.Input<string>;
    /**
     * Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
     */
    nextHopIlbIp?: pulumi.Input<string>;
    /**
     * Optional. Other routes that will be referenced to determine the next hop of the packet.
     */
    nextHopOtherRoutes?: pulumi.Input<enums.networkconnectivity.v1.PolicyBasedRouteNextHopOtherRoutes>;
    /**
     * Required. Unique id for the policy-based route to create.
     */
    policyBasedRouteId: pulumi.Input<string>;
    /**
     * Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
     */
    priority?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    /**
     * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    requestId?: pulumi.Input<string>;
    /**
     * Optional. VM instances to which this policy-based route applies to.
     */
    virtualMachine?: pulumi.Input<inputs.networkconnectivity.v1.VirtualMachineArgs>;
}
