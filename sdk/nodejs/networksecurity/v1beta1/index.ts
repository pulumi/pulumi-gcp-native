// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AddressGroupIamBindingArgs } from "./addressGroupIamBinding";
export type AddressGroupIamBinding = import("./addressGroupIamBinding").AddressGroupIamBinding;
export const AddressGroupIamBinding: typeof import("./addressGroupIamBinding").AddressGroupIamBinding = null as any;
utilities.lazyLoad(exports, ["AddressGroupIamBinding"], () => require("./addressGroupIamBinding"));

export { AddressGroupIamMemberArgs } from "./addressGroupIamMember";
export type AddressGroupIamMember = import("./addressGroupIamMember").AddressGroupIamMember;
export const AddressGroupIamMember: typeof import("./addressGroupIamMember").AddressGroupIamMember = null as any;
utilities.lazyLoad(exports, ["AddressGroupIamMember"], () => require("./addressGroupIamMember"));

export { AddressGroupIamPolicyArgs } from "./addressGroupIamPolicy";
export type AddressGroupIamPolicy = import("./addressGroupIamPolicy").AddressGroupIamPolicy;
export const AddressGroupIamPolicy: typeof import("./addressGroupIamPolicy").AddressGroupIamPolicy = null as any;
utilities.lazyLoad(exports, ["AddressGroupIamPolicy"], () => require("./addressGroupIamPolicy"));

export { AuthorizationPolicyArgs } from "./authorizationPolicy";
export type AuthorizationPolicy = import("./authorizationPolicy").AuthorizationPolicy;
export const AuthorizationPolicy: typeof import("./authorizationPolicy").AuthorizationPolicy = null as any;
utilities.lazyLoad(exports, ["AuthorizationPolicy"], () => require("./authorizationPolicy"));

export { AuthorizationPolicyIamBindingArgs } from "./authorizationPolicyIamBinding";
export type AuthorizationPolicyIamBinding = import("./authorizationPolicyIamBinding").AuthorizationPolicyIamBinding;
export const AuthorizationPolicyIamBinding: typeof import("./authorizationPolicyIamBinding").AuthorizationPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["AuthorizationPolicyIamBinding"], () => require("./authorizationPolicyIamBinding"));

export { AuthorizationPolicyIamMemberArgs } from "./authorizationPolicyIamMember";
export type AuthorizationPolicyIamMember = import("./authorizationPolicyIamMember").AuthorizationPolicyIamMember;
export const AuthorizationPolicyIamMember: typeof import("./authorizationPolicyIamMember").AuthorizationPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["AuthorizationPolicyIamMember"], () => require("./authorizationPolicyIamMember"));

export { AuthorizationPolicyIamPolicyArgs } from "./authorizationPolicyIamPolicy";
export type AuthorizationPolicyIamPolicy = import("./authorizationPolicyIamPolicy").AuthorizationPolicyIamPolicy;
export const AuthorizationPolicyIamPolicy: typeof import("./authorizationPolicyIamPolicy").AuthorizationPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["AuthorizationPolicyIamPolicy"], () => require("./authorizationPolicyIamPolicy"));

export { ClientTlsPolicyArgs } from "./clientTlsPolicy";
export type ClientTlsPolicy = import("./clientTlsPolicy").ClientTlsPolicy;
export const ClientTlsPolicy: typeof import("./clientTlsPolicy").ClientTlsPolicy = null as any;
utilities.lazyLoad(exports, ["ClientTlsPolicy"], () => require("./clientTlsPolicy"));

export { ClientTlsPolicyIamBindingArgs } from "./clientTlsPolicyIamBinding";
export type ClientTlsPolicyIamBinding = import("./clientTlsPolicyIamBinding").ClientTlsPolicyIamBinding;
export const ClientTlsPolicyIamBinding: typeof import("./clientTlsPolicyIamBinding").ClientTlsPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["ClientTlsPolicyIamBinding"], () => require("./clientTlsPolicyIamBinding"));

export { ClientTlsPolicyIamMemberArgs } from "./clientTlsPolicyIamMember";
export type ClientTlsPolicyIamMember = import("./clientTlsPolicyIamMember").ClientTlsPolicyIamMember;
export const ClientTlsPolicyIamMember: typeof import("./clientTlsPolicyIamMember").ClientTlsPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["ClientTlsPolicyIamMember"], () => require("./clientTlsPolicyIamMember"));

export { ClientTlsPolicyIamPolicyArgs } from "./clientTlsPolicyIamPolicy";
export type ClientTlsPolicyIamPolicy = import("./clientTlsPolicyIamPolicy").ClientTlsPolicyIamPolicy;
export const ClientTlsPolicyIamPolicy: typeof import("./clientTlsPolicyIamPolicy").ClientTlsPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["ClientTlsPolicyIamPolicy"], () => require("./clientTlsPolicyIamPolicy"));

export { GetAddressGroupIamPolicyArgs, GetAddressGroupIamPolicyResult, GetAddressGroupIamPolicyOutputArgs } from "./getAddressGroupIamPolicy";
export const getAddressGroupIamPolicy: typeof import("./getAddressGroupIamPolicy").getAddressGroupIamPolicy = null as any;
export const getAddressGroupIamPolicyOutput: typeof import("./getAddressGroupIamPolicy").getAddressGroupIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAddressGroupIamPolicy","getAddressGroupIamPolicyOutput"], () => require("./getAddressGroupIamPolicy"));

export { GetAuthorizationPolicyArgs, GetAuthorizationPolicyResult, GetAuthorizationPolicyOutputArgs } from "./getAuthorizationPolicy";
export const getAuthorizationPolicy: typeof import("./getAuthorizationPolicy").getAuthorizationPolicy = null as any;
export const getAuthorizationPolicyOutput: typeof import("./getAuthorizationPolicy").getAuthorizationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationPolicy","getAuthorizationPolicyOutput"], () => require("./getAuthorizationPolicy"));

export { GetAuthorizationPolicyIamPolicyArgs, GetAuthorizationPolicyIamPolicyResult, GetAuthorizationPolicyIamPolicyOutputArgs } from "./getAuthorizationPolicyIamPolicy";
export const getAuthorizationPolicyIamPolicy: typeof import("./getAuthorizationPolicyIamPolicy").getAuthorizationPolicyIamPolicy = null as any;
export const getAuthorizationPolicyIamPolicyOutput: typeof import("./getAuthorizationPolicyIamPolicy").getAuthorizationPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationPolicyIamPolicy","getAuthorizationPolicyIamPolicyOutput"], () => require("./getAuthorizationPolicyIamPolicy"));

export { GetClientTlsPolicyArgs, GetClientTlsPolicyResult, GetClientTlsPolicyOutputArgs } from "./getClientTlsPolicy";
export const getClientTlsPolicy: typeof import("./getClientTlsPolicy").getClientTlsPolicy = null as any;
export const getClientTlsPolicyOutput: typeof import("./getClientTlsPolicy").getClientTlsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getClientTlsPolicy","getClientTlsPolicyOutput"], () => require("./getClientTlsPolicy"));

export { GetClientTlsPolicyIamPolicyArgs, GetClientTlsPolicyIamPolicyResult, GetClientTlsPolicyIamPolicyOutputArgs } from "./getClientTlsPolicyIamPolicy";
export const getClientTlsPolicyIamPolicy: typeof import("./getClientTlsPolicyIamPolicy").getClientTlsPolicyIamPolicy = null as any;
export const getClientTlsPolicyIamPolicyOutput: typeof import("./getClientTlsPolicyIamPolicy").getClientTlsPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getClientTlsPolicyIamPolicy","getClientTlsPolicyIamPolicyOutput"], () => require("./getClientTlsPolicyIamPolicy"));

export { GetServerTlsPolicyArgs, GetServerTlsPolicyResult, GetServerTlsPolicyOutputArgs } from "./getServerTlsPolicy";
export const getServerTlsPolicy: typeof import("./getServerTlsPolicy").getServerTlsPolicy = null as any;
export const getServerTlsPolicyOutput: typeof import("./getServerTlsPolicy").getServerTlsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServerTlsPolicy","getServerTlsPolicyOutput"], () => require("./getServerTlsPolicy"));

export { GetServerTlsPolicyIamPolicyArgs, GetServerTlsPolicyIamPolicyResult, GetServerTlsPolicyIamPolicyOutputArgs } from "./getServerTlsPolicyIamPolicy";
export const getServerTlsPolicyIamPolicy: typeof import("./getServerTlsPolicyIamPolicy").getServerTlsPolicyIamPolicy = null as any;
export const getServerTlsPolicyIamPolicyOutput: typeof import("./getServerTlsPolicyIamPolicy").getServerTlsPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServerTlsPolicyIamPolicy","getServerTlsPolicyIamPolicyOutput"], () => require("./getServerTlsPolicyIamPolicy"));

export { ServerTlsPolicyArgs } from "./serverTlsPolicy";
export type ServerTlsPolicy = import("./serverTlsPolicy").ServerTlsPolicy;
export const ServerTlsPolicy: typeof import("./serverTlsPolicy").ServerTlsPolicy = null as any;
utilities.lazyLoad(exports, ["ServerTlsPolicy"], () => require("./serverTlsPolicy"));

export { ServerTlsPolicyIamBindingArgs } from "./serverTlsPolicyIamBinding";
export type ServerTlsPolicyIamBinding = import("./serverTlsPolicyIamBinding").ServerTlsPolicyIamBinding;
export const ServerTlsPolicyIamBinding: typeof import("./serverTlsPolicyIamBinding").ServerTlsPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["ServerTlsPolicyIamBinding"], () => require("./serverTlsPolicyIamBinding"));

export { ServerTlsPolicyIamMemberArgs } from "./serverTlsPolicyIamMember";
export type ServerTlsPolicyIamMember = import("./serverTlsPolicyIamMember").ServerTlsPolicyIamMember;
export const ServerTlsPolicyIamMember: typeof import("./serverTlsPolicyIamMember").ServerTlsPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["ServerTlsPolicyIamMember"], () => require("./serverTlsPolicyIamMember"));

export { ServerTlsPolicyIamPolicyArgs } from "./serverTlsPolicyIamPolicy";
export type ServerTlsPolicyIamPolicy = import("./serverTlsPolicyIamPolicy").ServerTlsPolicyIamPolicy;
export const ServerTlsPolicyIamPolicy: typeof import("./serverTlsPolicyIamPolicy").ServerTlsPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["ServerTlsPolicyIamPolicy"], () => require("./serverTlsPolicyIamPolicy"));


// Export enums:
export * from "../../types/enums/networksecurity/v1beta1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:networksecurity/v1beta1:AddressGroupIamBinding":
                return new AddressGroupIamBinding(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:AddressGroupIamMember":
                return new AddressGroupIamMember(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:AddressGroupIamPolicy":
                return new AddressGroupIamPolicy(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:AuthorizationPolicy":
                return new AuthorizationPolicy(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:AuthorizationPolicyIamBinding":
                return new AuthorizationPolicyIamBinding(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:AuthorizationPolicyIamMember":
                return new AuthorizationPolicyIamMember(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:AuthorizationPolicyIamPolicy":
                return new AuthorizationPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:ClientTlsPolicy":
                return new ClientTlsPolicy(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:ClientTlsPolicyIamBinding":
                return new ClientTlsPolicyIamBinding(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:ClientTlsPolicyIamMember":
                return new ClientTlsPolicyIamMember(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:ClientTlsPolicyIamPolicy":
                return new ClientTlsPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:ServerTlsPolicy":
                return new ServerTlsPolicy(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:ServerTlsPolicyIamBinding":
                return new ServerTlsPolicyIamBinding(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:ServerTlsPolicyIamMember":
                return new ServerTlsPolicyIamMember(name, <any>undefined, { urn })
            case "google-native:networksecurity/v1beta1:ServerTlsPolicyIamPolicy":
                return new ServerTlsPolicyIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "networksecurity/v1beta1", _module)
