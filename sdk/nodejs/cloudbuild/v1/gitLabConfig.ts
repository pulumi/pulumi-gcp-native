// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new `GitLabConfig`. This API is experimental
 */
export class GitLabConfig extends pulumi.CustomResource {
    /**
     * Get an existing GitLabConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GitLabConfig {
        return new GitLabConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:cloudbuild/v1:GitLabConfig';

    /**
     * Returns true if the given object is an instance of GitLabConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitLabConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitLabConfig.__pulumiType;
    }

    /**
     * Connected GitLab.com or GitLabEnterprise repositories for this config.
     */
    public readonly connectedRepositories!: pulumi.Output<outputs.cloudbuild.v1.GitLabRepositoryIdResponse[]>;
    /**
     * Time when the config was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. GitLabEnterprise config.
     */
    public readonly enterpriseConfig!: pulumi.Output<outputs.cloudbuild.v1.GitLabEnterpriseConfigResponse>;
    /**
     * Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
     */
    public readonly gitlabConfigId!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name for the config.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Secret Manager secrets needed by the config.
     */
    public readonly secrets!: pulumi.Output<outputs.cloudbuild.v1.GitLabSecretsResponse>;
    /**
     * Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * UUID included in webhook requests. The UUID is used to look up the corresponding config.
     */
    public /*out*/ readonly webhookKey!: pulumi.Output<string>;

    /**
     * Create a GitLabConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitLabConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.secrets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secrets'");
            }
            resourceInputs["connectedRepositories"] = args ? args.connectedRepositories : undefined;
            resourceInputs["enterpriseConfig"] = args ? args.enterpriseConfig : undefined;
            resourceInputs["gitlabConfigId"] = args ? args.gitlabConfigId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["webhookKey"] = undefined /*out*/;
        } else {
            resourceInputs["connectedRepositories"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["enterpriseConfig"] = undefined /*out*/;
            resourceInputs["gitlabConfigId"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["secrets"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
            resourceInputs["webhookKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(GitLabConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a GitLabConfig resource.
 */
export interface GitLabConfigArgs {
    /**
     * Connected GitLab.com or GitLabEnterprise repositories for this config.
     */
    connectedRepositories?: pulumi.Input<pulumi.Input<inputs.cloudbuild.v1.GitLabRepositoryIdArgs>[]>;
    /**
     * Optional. GitLabEnterprise config.
     */
    enterpriseConfig?: pulumi.Input<inputs.cloudbuild.v1.GitLabEnterpriseConfigArgs>;
    /**
     * Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
     */
    gitlabConfigId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * The resource name for the config.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Secret Manager secrets needed by the config.
     */
    secrets: pulumi.Input<inputs.cloudbuild.v1.GitLabSecretsArgs>;
    /**
     * Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
     */
    username?: pulumi.Input<string>;
}
