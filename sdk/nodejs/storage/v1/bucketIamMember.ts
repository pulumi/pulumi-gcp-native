// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Updates an IAM policy for the specified bucket.
 */
export class BucketIamMember extends pulumi.CustomResource {
    /**
     * Get an existing BucketIamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): BucketIamMember {
        return new BucketIamMember(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:storage/v1:BucketIamMember';

    /**
     * Returns true if the given object is an instance of BucketIamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketIamMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketIamMember.__pulumiType;
    }

    /**
     * An IAM Condition for a given binding. See https://cloud.google.com/iam/docs/conditions-overview for additional details.
     */
    public readonly condition!: pulumi.Output<outputs.iam.v1.Condition | undefined>;
    /**
     * The etag of the resource's IAM policy.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * A collection of identifiers for members who may assume the provided role. Recognized identifiers are as follows:  
     * - allUsers — A special identifier that represents anyone on the internet; with or without a Google account.  
     * - allAuthenticatedUsers — A special identifier that represents anyone who is authenticated with a Google account or a service account.  
     * - user:emailid — An email address that represents a specific account. For example, user:alice@gmail.com or user:joe@example.com.  
     * - serviceAccount:emailid — An email address that represents a service account. For example,  serviceAccount:my-other-app@appspot.gserviceaccount.com .  
     * - group:emailid — An email address that represents a Google group. For example, group:admins@example.com.  
     * - domain:domain — A Google Apps domain name that represents all the users of that domain. For example, domain:google.com or domain:example.com.  
     * - projectOwner:projectid — Owners of the given project. For example, projectOwner:my-example-project  
     * - projectEditor:projectid — Editors of the given project. For example, projectEditor:my-example-project  
     * - projectViewer:projectid — Viewers of the given project. For example, projectViewer:my-example-project
     */
    public readonly member!: pulumi.Output<string>;
    /**
     * The name of the resource to manage IAM policies for.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project in which the resource belongs. If it is not provided, a default will be supplied.
     */
    public /*out*/ readonly project!: pulumi.Output<string>;
    /**
     * The role to which members belong. Two types of roles are supported: new IAM roles, which grant permissions that do not map directly to those provided by ACLs, and legacy IAM roles, which do map directly to ACL permissions. All roles are of the format roles/storage.specificRole.
     * The new IAM roles are:  
     * - roles/storage.admin — Full control of Google Cloud Storage resources.  
     * - roles/storage.objectViewer — Read-Only access to Google Cloud Storage objects.  
     * - roles/storage.objectCreator — Access to create objects in Google Cloud Storage.  
     * - roles/storage.objectAdmin — Full control of Google Cloud Storage objects.   The legacy IAM roles are:  
     * - roles/storage.legacyObjectReader — Read-only access to objects without listing. Equivalent to an ACL entry on an object with the READER role.  
     * - roles/storage.legacyObjectOwner — Read/write access to existing objects without listing. Equivalent to an ACL entry on an object with the OWNER role.  
     * - roles/storage.legacyBucketReader — Read access to buckets with object listing. Equivalent to an ACL entry on a bucket with the READER role.  
     * - roles/storage.legacyBucketWriter — Read access to buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the WRITER role.  
     * - roles/storage.legacyBucketOwner — Read and write access to existing buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the OWNER role.
     */
    public readonly role!: pulumi.Output<string>;

    /**
     * Create a BucketIamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketIamMemberArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.member === undefined) && !opts.urn) {
                throw new Error("Missing required property 'member'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["member"] = args ? args.member : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
        } else {
            resourceInputs["condition"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["member"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketIamMember.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a BucketIamMember resource.
 */
export interface BucketIamMemberArgs {
    /**
     * An IAM Condition for a given binding.
     */
    condition?: pulumi.Input<inputs.iam.v1.ConditionArgs>;
    /**
     * Identity that will be granted the privilege in role. The entry can have one of the following values:
     *
     *  * user:{emailid}: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
     *  * serviceAccount:{emailid}: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
     *  * group:{emailid}: An email address that represents a Google group. For example, admins@example.com.
     *  * domain:{domain}: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
     */
    member: pulumi.Input<string>;
    /**
     * The name of the resource to manage IAM policies for.
     */
    name: pulumi.Input<string>;
    /**
     * The role that should be applied.
     */
    role: pulumi.Input<string>;
}
