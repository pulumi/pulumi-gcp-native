// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Returns metadata of the specified managed folder.
 */
export function getManagedFolder(args: GetManagedFolderArgs, opts?: pulumi.InvokeOptions): Promise<GetManagedFolderResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:storage/v1:getManagedFolder", {
        "bucket": args.bucket,
        "ifMetagenerationMatch": args.ifMetagenerationMatch,
        "ifMetagenerationNotMatch": args.ifMetagenerationNotMatch,
        "managedFolder": args.managedFolder,
    }, opts);
}

export interface GetManagedFolderArgs {
    bucket: string;
    ifMetagenerationMatch?: string;
    ifMetagenerationNotMatch?: string;
    managedFolder: string;
}

export interface GetManagedFolderResult {
    /**
     * The name of the bucket containing this managed folder.
     */
    readonly bucket: string;
    /**
     * The creation time of the managed folder in RFC 3339 format.
     */
    readonly createTime: string;
    /**
     * The kind of item this is. For managed folders, this is always storage#managedFolder.
     */
    readonly kind: string;
    /**
     * The version of the metadata for this managed folder. Used for preconditions and for detecting changes in metadata.
     */
    readonly metageneration: string;
    /**
     * The name of the managed folder. Required if not specified by URL parameter.
     */
    readonly name: string;
    /**
     * The link to this managed folder.
     */
    readonly selfLink: string;
    /**
     * The last update time of the managed folder metadata in RFC 3339 format.
     */
    readonly updateTime: string;
}
/**
 * Returns metadata of the specified managed folder.
 */
export function getManagedFolderOutput(args: GetManagedFolderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagedFolderResult> {
    return pulumi.output(args).apply((a: any) => getManagedFolder(a, opts))
}

export interface GetManagedFolderOutputArgs {
    bucket: pulumi.Input<string>;
    ifMetagenerationMatch?: pulumi.Input<string>;
    ifMetagenerationNotMatch?: pulumi.Input<string>;
    managedFolder: pulumi.Input<string>;
}
