// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new ServiceLbPolicy in a given project and location.
 */
export class ServiceLbPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ServiceLbPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ServiceLbPolicy {
        return new ServiceLbPolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:networkservices/v1beta1:ServiceLbPolicy';

    /**
     * Returns true if the given object is an instance of ServiceLbPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceLbPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceLbPolicy.__pulumiType;
    }

    /**
     * Optional. Configuration to automatically move traffic away for unhealthy IG/NEG for the associated Backend Service.
     */
    public readonly autoCapacityDrain!: pulumi.Output<outputs.networkservices.v1beta1.ServiceLbPolicyAutoCapacityDrainResponse>;
    /**
     * The timestamp when this resource was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Optional. Configuration related to health based failover.
     */
    public readonly failoverConfig!: pulumi.Output<outputs.networkservices.v1beta1.ServiceLbPolicyFailoverConfigResponse>;
    /**
     * Optional. Set of label tags associated with the ServiceLbPolicy resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
     */
    public readonly loadBalancingAlgorithm!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Required. Short name of the ServiceLbPolicy resource to be created. E.g. for resource name `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`. the id is value of {service_lb_policy_name}
     */
    public readonly serviceLbPolicyId!: pulumi.Output<string>;
    /**
     * The timestamp when this resource was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a ServiceLbPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceLbPolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.serviceLbPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceLbPolicyId'");
            }
            resourceInputs["autoCapacityDrain"] = args ? args.autoCapacityDrain : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["failoverConfig"] = args ? args.failoverConfig : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loadBalancingAlgorithm"] = args ? args.loadBalancingAlgorithm : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceLbPolicyId"] = args ? args.serviceLbPolicyId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["autoCapacityDrain"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["failoverConfig"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["loadBalancingAlgorithm"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["serviceLbPolicyId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project", "serviceLbPolicyId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ServiceLbPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ServiceLbPolicy resource.
 */
export interface ServiceLbPolicyArgs {
    /**
     * Optional. Configuration to automatically move traffic away for unhealthy IG/NEG for the associated Backend Service.
     */
    autoCapacityDrain?: pulumi.Input<inputs.networkservices.v1beta1.ServiceLbPolicyAutoCapacityDrainArgs>;
    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. Configuration related to health based failover.
     */
    failoverConfig?: pulumi.Input<inputs.networkservices.v1beta1.ServiceLbPolicyFailoverConfigArgs>;
    /**
     * Optional. Set of label tags associated with the ServiceLbPolicy resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
     */
    loadBalancingAlgorithm?: pulumi.Input<enums.networkservices.v1beta1.ServiceLbPolicyLoadBalancingAlgorithm>;
    location?: pulumi.Input<string>;
    /**
     * Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Required. Short name of the ServiceLbPolicy resource to be created. E.g. for resource name `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`. the id is value of {service_lb_policy_name}
     */
    serviceLbPolicyId: pulumi.Input<string>;
}
