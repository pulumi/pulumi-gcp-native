// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { EndpointPolicyArgs } from "./endpointPolicy";
export type EndpointPolicy = import("./endpointPolicy").EndpointPolicy;
export const EndpointPolicy: typeof import("./endpointPolicy").EndpointPolicy = null as any;
utilities.lazyLoad(exports, ["EndpointPolicy"], () => require("./endpointPolicy"));

export { EndpointPolicyIamBindingArgs } from "./endpointPolicyIamBinding";
export type EndpointPolicyIamBinding = import("./endpointPolicyIamBinding").EndpointPolicyIamBinding;
export const EndpointPolicyIamBinding: typeof import("./endpointPolicyIamBinding").EndpointPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["EndpointPolicyIamBinding"], () => require("./endpointPolicyIamBinding"));

export { EndpointPolicyIamMemberArgs } from "./endpointPolicyIamMember";
export type EndpointPolicyIamMember = import("./endpointPolicyIamMember").EndpointPolicyIamMember;
export const EndpointPolicyIamMember: typeof import("./endpointPolicyIamMember").EndpointPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["EndpointPolicyIamMember"], () => require("./endpointPolicyIamMember"));

export { EndpointPolicyIamPolicyArgs } from "./endpointPolicyIamPolicy";
export type EndpointPolicyIamPolicy = import("./endpointPolicyIamPolicy").EndpointPolicyIamPolicy;
export const EndpointPolicyIamPolicy: typeof import("./endpointPolicyIamPolicy").EndpointPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["EndpointPolicyIamPolicy"], () => require("./endpointPolicyIamPolicy"));

export { GatewayArgs } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GatewayIamBindingArgs } from "./gatewayIamBinding";
export type GatewayIamBinding = import("./gatewayIamBinding").GatewayIamBinding;
export const GatewayIamBinding: typeof import("./gatewayIamBinding").GatewayIamBinding = null as any;
utilities.lazyLoad(exports, ["GatewayIamBinding"], () => require("./gatewayIamBinding"));

export { GatewayIamMemberArgs } from "./gatewayIamMember";
export type GatewayIamMember = import("./gatewayIamMember").GatewayIamMember;
export const GatewayIamMember: typeof import("./gatewayIamMember").GatewayIamMember = null as any;
utilities.lazyLoad(exports, ["GatewayIamMember"], () => require("./gatewayIamMember"));

export { GatewayIamPolicyArgs } from "./gatewayIamPolicy";
export type GatewayIamPolicy = import("./gatewayIamPolicy").GatewayIamPolicy;
export const GatewayIamPolicy: typeof import("./gatewayIamPolicy").GatewayIamPolicy = null as any;
utilities.lazyLoad(exports, ["GatewayIamPolicy"], () => require("./gatewayIamPolicy"));

export { GetEndpointPolicyArgs, GetEndpointPolicyResult, GetEndpointPolicyOutputArgs } from "./getEndpointPolicy";
export const getEndpointPolicy: typeof import("./getEndpointPolicy").getEndpointPolicy = null as any;
export const getEndpointPolicyOutput: typeof import("./getEndpointPolicy").getEndpointPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointPolicy","getEndpointPolicyOutput"], () => require("./getEndpointPolicy"));

export { GetEndpointPolicyIamPolicyArgs, GetEndpointPolicyIamPolicyResult, GetEndpointPolicyIamPolicyOutputArgs } from "./getEndpointPolicyIamPolicy";
export const getEndpointPolicyIamPolicy: typeof import("./getEndpointPolicyIamPolicy").getEndpointPolicyIamPolicy = null as any;
export const getEndpointPolicyIamPolicyOutput: typeof import("./getEndpointPolicyIamPolicy").getEndpointPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointPolicyIamPolicy","getEndpointPolicyIamPolicyOutput"], () => require("./getEndpointPolicyIamPolicy"));

export { GetGatewayArgs, GetGatewayResult, GetGatewayOutputArgs } from "./getGateway";
export const getGateway: typeof import("./getGateway").getGateway = null as any;
export const getGatewayOutput: typeof import("./getGateway").getGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getGateway","getGatewayOutput"], () => require("./getGateway"));

export { GetGatewayIamPolicyArgs, GetGatewayIamPolicyResult, GetGatewayIamPolicyOutputArgs } from "./getGatewayIamPolicy";
export const getGatewayIamPolicy: typeof import("./getGatewayIamPolicy").getGatewayIamPolicy = null as any;
export const getGatewayIamPolicyOutput: typeof import("./getGatewayIamPolicy").getGatewayIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayIamPolicy","getGatewayIamPolicyOutput"], () => require("./getGatewayIamPolicy"));

export { GetGrpcRouteArgs, GetGrpcRouteResult, GetGrpcRouteOutputArgs } from "./getGrpcRoute";
export const getGrpcRoute: typeof import("./getGrpcRoute").getGrpcRoute = null as any;
export const getGrpcRouteOutput: typeof import("./getGrpcRoute").getGrpcRouteOutput = null as any;
utilities.lazyLoad(exports, ["getGrpcRoute","getGrpcRouteOutput"], () => require("./getGrpcRoute"));

export { GetHttpRouteArgs, GetHttpRouteResult, GetHttpRouteOutputArgs } from "./getHttpRoute";
export const getHttpRoute: typeof import("./getHttpRoute").getHttpRoute = null as any;
export const getHttpRouteOutput: typeof import("./getHttpRoute").getHttpRouteOutput = null as any;
utilities.lazyLoad(exports, ["getHttpRoute","getHttpRouteOutput"], () => require("./getHttpRoute"));

export { GetLbRouteExtensionArgs, GetLbRouteExtensionResult, GetLbRouteExtensionOutputArgs } from "./getLbRouteExtension";
export const getLbRouteExtension: typeof import("./getLbRouteExtension").getLbRouteExtension = null as any;
export const getLbRouteExtensionOutput: typeof import("./getLbRouteExtension").getLbRouteExtensionOutput = null as any;
utilities.lazyLoad(exports, ["getLbRouteExtension","getLbRouteExtensionOutput"], () => require("./getLbRouteExtension"));

export { GetLbTrafficExtensionArgs, GetLbTrafficExtensionResult, GetLbTrafficExtensionOutputArgs } from "./getLbTrafficExtension";
export const getLbTrafficExtension: typeof import("./getLbTrafficExtension").getLbTrafficExtension = null as any;
export const getLbTrafficExtensionOutput: typeof import("./getLbTrafficExtension").getLbTrafficExtensionOutput = null as any;
utilities.lazyLoad(exports, ["getLbTrafficExtension","getLbTrafficExtensionOutput"], () => require("./getLbTrafficExtension"));

export { GetMeshArgs, GetMeshResult, GetMeshOutputArgs } from "./getMesh";
export const getMesh: typeof import("./getMesh").getMesh = null as any;
export const getMeshOutput: typeof import("./getMesh").getMeshOutput = null as any;
utilities.lazyLoad(exports, ["getMesh","getMeshOutput"], () => require("./getMesh"));

export { GetMeshIamPolicyArgs, GetMeshIamPolicyResult, GetMeshIamPolicyOutputArgs } from "./getMeshIamPolicy";
export const getMeshIamPolicy: typeof import("./getMeshIamPolicy").getMeshIamPolicy = null as any;
export const getMeshIamPolicyOutput: typeof import("./getMeshIamPolicy").getMeshIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMeshIamPolicy","getMeshIamPolicyOutput"], () => require("./getMeshIamPolicy"));

export { GetServiceBindingArgs, GetServiceBindingResult, GetServiceBindingOutputArgs } from "./getServiceBinding";
export const getServiceBinding: typeof import("./getServiceBinding").getServiceBinding = null as any;
export const getServiceBindingOutput: typeof import("./getServiceBinding").getServiceBindingOutput = null as any;
utilities.lazyLoad(exports, ["getServiceBinding","getServiceBindingOutput"], () => require("./getServiceBinding"));

export { GetServiceBindingIamPolicyArgs, GetServiceBindingIamPolicyResult, GetServiceBindingIamPolicyOutputArgs } from "./getServiceBindingIamPolicy";
export const getServiceBindingIamPolicy: typeof import("./getServiceBindingIamPolicy").getServiceBindingIamPolicy = null as any;
export const getServiceBindingIamPolicyOutput: typeof import("./getServiceBindingIamPolicy").getServiceBindingIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceBindingIamPolicy","getServiceBindingIamPolicyOutput"], () => require("./getServiceBindingIamPolicy"));

export { GetServiceLbPolicyArgs, GetServiceLbPolicyResult, GetServiceLbPolicyOutputArgs } from "./getServiceLbPolicy";
export const getServiceLbPolicy: typeof import("./getServiceLbPolicy").getServiceLbPolicy = null as any;
export const getServiceLbPolicyOutput: typeof import("./getServiceLbPolicy").getServiceLbPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLbPolicy","getServiceLbPolicyOutput"], () => require("./getServiceLbPolicy"));

export { GetServiceLbPolicyIamPolicyArgs, GetServiceLbPolicyIamPolicyResult, GetServiceLbPolicyIamPolicyOutputArgs } from "./getServiceLbPolicyIamPolicy";
export const getServiceLbPolicyIamPolicy: typeof import("./getServiceLbPolicyIamPolicy").getServiceLbPolicyIamPolicy = null as any;
export const getServiceLbPolicyIamPolicyOutput: typeof import("./getServiceLbPolicyIamPolicy").getServiceLbPolicyIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLbPolicyIamPolicy","getServiceLbPolicyIamPolicyOutput"], () => require("./getServiceLbPolicyIamPolicy"));

export { GetTcpRouteArgs, GetTcpRouteResult, GetTcpRouteOutputArgs } from "./getTcpRoute";
export const getTcpRoute: typeof import("./getTcpRoute").getTcpRoute = null as any;
export const getTcpRouteOutput: typeof import("./getTcpRoute").getTcpRouteOutput = null as any;
utilities.lazyLoad(exports, ["getTcpRoute","getTcpRouteOutput"], () => require("./getTcpRoute"));

export { GetTlsRouteArgs, GetTlsRouteResult, GetTlsRouteOutputArgs } from "./getTlsRoute";
export const getTlsRoute: typeof import("./getTlsRoute").getTlsRoute = null as any;
export const getTlsRouteOutput: typeof import("./getTlsRoute").getTlsRouteOutput = null as any;
utilities.lazyLoad(exports, ["getTlsRoute","getTlsRouteOutput"], () => require("./getTlsRoute"));

export { GrpcRouteArgs } from "./grpcRoute";
export type GrpcRoute = import("./grpcRoute").GrpcRoute;
export const GrpcRoute: typeof import("./grpcRoute").GrpcRoute = null as any;
utilities.lazyLoad(exports, ["GrpcRoute"], () => require("./grpcRoute"));

export { HttpRouteArgs } from "./httpRoute";
export type HttpRoute = import("./httpRoute").HttpRoute;
export const HttpRoute: typeof import("./httpRoute").HttpRoute = null as any;
utilities.lazyLoad(exports, ["HttpRoute"], () => require("./httpRoute"));

export { LbRouteExtensionArgs } from "./lbRouteExtension";
export type LbRouteExtension = import("./lbRouteExtension").LbRouteExtension;
export const LbRouteExtension: typeof import("./lbRouteExtension").LbRouteExtension = null as any;
utilities.lazyLoad(exports, ["LbRouteExtension"], () => require("./lbRouteExtension"));

export { LbTrafficExtensionArgs } from "./lbTrafficExtension";
export type LbTrafficExtension = import("./lbTrafficExtension").LbTrafficExtension;
export const LbTrafficExtension: typeof import("./lbTrafficExtension").LbTrafficExtension = null as any;
utilities.lazyLoad(exports, ["LbTrafficExtension"], () => require("./lbTrafficExtension"));

export { MeshArgs } from "./mesh";
export type Mesh = import("./mesh").Mesh;
export const Mesh: typeof import("./mesh").Mesh = null as any;
utilities.lazyLoad(exports, ["Mesh"], () => require("./mesh"));

export { MeshIamBindingArgs } from "./meshIamBinding";
export type MeshIamBinding = import("./meshIamBinding").MeshIamBinding;
export const MeshIamBinding: typeof import("./meshIamBinding").MeshIamBinding = null as any;
utilities.lazyLoad(exports, ["MeshIamBinding"], () => require("./meshIamBinding"));

export { MeshIamMemberArgs } from "./meshIamMember";
export type MeshIamMember = import("./meshIamMember").MeshIamMember;
export const MeshIamMember: typeof import("./meshIamMember").MeshIamMember = null as any;
utilities.lazyLoad(exports, ["MeshIamMember"], () => require("./meshIamMember"));

export { MeshIamPolicyArgs } from "./meshIamPolicy";
export type MeshIamPolicy = import("./meshIamPolicy").MeshIamPolicy;
export const MeshIamPolicy: typeof import("./meshIamPolicy").MeshIamPolicy = null as any;
utilities.lazyLoad(exports, ["MeshIamPolicy"], () => require("./meshIamPolicy"));

export { ServiceBindingArgs } from "./serviceBinding";
export type ServiceBinding = import("./serviceBinding").ServiceBinding;
export const ServiceBinding: typeof import("./serviceBinding").ServiceBinding = null as any;
utilities.lazyLoad(exports, ["ServiceBinding"], () => require("./serviceBinding"));

export { ServiceBindingIamBindingArgs } from "./serviceBindingIamBinding";
export type ServiceBindingIamBinding = import("./serviceBindingIamBinding").ServiceBindingIamBinding;
export const ServiceBindingIamBinding: typeof import("./serviceBindingIamBinding").ServiceBindingIamBinding = null as any;
utilities.lazyLoad(exports, ["ServiceBindingIamBinding"], () => require("./serviceBindingIamBinding"));

export { ServiceBindingIamMemberArgs } from "./serviceBindingIamMember";
export type ServiceBindingIamMember = import("./serviceBindingIamMember").ServiceBindingIamMember;
export const ServiceBindingIamMember: typeof import("./serviceBindingIamMember").ServiceBindingIamMember = null as any;
utilities.lazyLoad(exports, ["ServiceBindingIamMember"], () => require("./serviceBindingIamMember"));

export { ServiceBindingIamPolicyArgs } from "./serviceBindingIamPolicy";
export type ServiceBindingIamPolicy = import("./serviceBindingIamPolicy").ServiceBindingIamPolicy;
export const ServiceBindingIamPolicy: typeof import("./serviceBindingIamPolicy").ServiceBindingIamPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceBindingIamPolicy"], () => require("./serviceBindingIamPolicy"));

export { ServiceLbPolicyArgs } from "./serviceLbPolicy";
export type ServiceLbPolicy = import("./serviceLbPolicy").ServiceLbPolicy;
export const ServiceLbPolicy: typeof import("./serviceLbPolicy").ServiceLbPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceLbPolicy"], () => require("./serviceLbPolicy"));

export { ServiceLbPolicyIamBindingArgs } from "./serviceLbPolicyIamBinding";
export type ServiceLbPolicyIamBinding = import("./serviceLbPolicyIamBinding").ServiceLbPolicyIamBinding;
export const ServiceLbPolicyIamBinding: typeof import("./serviceLbPolicyIamBinding").ServiceLbPolicyIamBinding = null as any;
utilities.lazyLoad(exports, ["ServiceLbPolicyIamBinding"], () => require("./serviceLbPolicyIamBinding"));

export { ServiceLbPolicyIamMemberArgs } from "./serviceLbPolicyIamMember";
export type ServiceLbPolicyIamMember = import("./serviceLbPolicyIamMember").ServiceLbPolicyIamMember;
export const ServiceLbPolicyIamMember: typeof import("./serviceLbPolicyIamMember").ServiceLbPolicyIamMember = null as any;
utilities.lazyLoad(exports, ["ServiceLbPolicyIamMember"], () => require("./serviceLbPolicyIamMember"));

export { ServiceLbPolicyIamPolicyArgs } from "./serviceLbPolicyIamPolicy";
export type ServiceLbPolicyIamPolicy = import("./serviceLbPolicyIamPolicy").ServiceLbPolicyIamPolicy;
export const ServiceLbPolicyIamPolicy: typeof import("./serviceLbPolicyIamPolicy").ServiceLbPolicyIamPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceLbPolicyIamPolicy"], () => require("./serviceLbPolicyIamPolicy"));

export { TcpRouteArgs } from "./tcpRoute";
export type TcpRoute = import("./tcpRoute").TcpRoute;
export const TcpRoute: typeof import("./tcpRoute").TcpRoute = null as any;
utilities.lazyLoad(exports, ["TcpRoute"], () => require("./tcpRoute"));

export { TlsRouteArgs } from "./tlsRoute";
export type TlsRoute = import("./tlsRoute").TlsRoute;
export const TlsRoute: typeof import("./tlsRoute").TlsRoute = null as any;
utilities.lazyLoad(exports, ["TlsRoute"], () => require("./tlsRoute"));


// Export enums:
export * from "../../types/enums/networkservices/v1beta1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:networkservices/v1beta1:EndpointPolicy":
                return new EndpointPolicy(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:EndpointPolicyIamBinding":
                return new EndpointPolicyIamBinding(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:EndpointPolicyIamMember":
                return new EndpointPolicyIamMember(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:EndpointPolicyIamPolicy":
                return new EndpointPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:GatewayIamBinding":
                return new GatewayIamBinding(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:GatewayIamMember":
                return new GatewayIamMember(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:GatewayIamPolicy":
                return new GatewayIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:GrpcRoute":
                return new GrpcRoute(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:HttpRoute":
                return new HttpRoute(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:LbRouteExtension":
                return new LbRouteExtension(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:LbTrafficExtension":
                return new LbTrafficExtension(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:Mesh":
                return new Mesh(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:MeshIamBinding":
                return new MeshIamBinding(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:MeshIamMember":
                return new MeshIamMember(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:MeshIamPolicy":
                return new MeshIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:ServiceBinding":
                return new ServiceBinding(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:ServiceBindingIamBinding":
                return new ServiceBindingIamBinding(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:ServiceBindingIamMember":
                return new ServiceBindingIamMember(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:ServiceBindingIamPolicy":
                return new ServiceBindingIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:ServiceLbPolicy":
                return new ServiceLbPolicy(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:ServiceLbPolicyIamBinding":
                return new ServiceLbPolicyIamBinding(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:ServiceLbPolicyIamMember":
                return new ServiceLbPolicyIamMember(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:ServiceLbPolicyIamPolicy":
                return new ServiceLbPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:TcpRoute":
                return new TcpRoute(name, <any>undefined, { urn })
            case "google-native:networkservices/v1beta1:TlsRoute":
                return new TlsRoute(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "networkservices/v1beta1", _module)
