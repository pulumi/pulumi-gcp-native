// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new Feature in a given EntityType.
 */
export class FeatureStoreFeature extends pulumi.CustomResource {
    /**
     * Get an existing FeatureStoreFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): FeatureStoreFeature {
        return new FeatureStoreFeature(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:aiplatform/v1beta1:FeatureStoreFeature';

    /**
     * Returns true if the given object is an instance of FeatureStoreFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FeatureStoreFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FeatureStoreFeature.__pulumiType;
    }

    /**
     * Only applicable for Vertex AI Feature Store (Legacy). Timestamp when this EntityType was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the Feature.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Optional. Only applicable for Vertex AI Feature Store (Legacy). If not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If set to true, all types of data monitoring are disabled despite the config on EntityType.
     */
    public readonly disableMonitoring!: pulumi.Output<boolean>;
    public readonly entityTypeId!: pulumi.Output<string>;
    /**
     * Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Required. The ID to use for the Feature, which will become the final component of the Feature's resource name. This value may be up to 128 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within an EntityType/FeatureGroup.
     */
    public readonly featureId!: pulumi.Output<string>;
    public readonly featurestoreId!: pulumi.Output<string>;
    /**
     * Optional. The labels with user-defined metadata to organize your Features. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one Feature (System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Optional. Only applicable for Vertex AI Feature Store (Legacy). Deprecated: The custom monitoring configuration for this Feature, if not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If this is populated with FeaturestoreMonitoringConfig.disabled = true, snapshot analysis monitoring is disabled; if FeaturestoreMonitoringConfig.monitoring_interval specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring config is same as the EntityType's this Feature belongs to.
     *
     * @deprecated Optional. Only applicable for Vertex AI Feature Store (Legacy). Deprecated: The custom monitoring configuration for this Feature, if not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If this is populated with FeaturestoreMonitoringConfig.disabled = true, snapshot analysis monitoring is disabled; if FeaturestoreMonitoringConfig.monitoring_interval specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring config is same as the EntityType's this Feature belongs to.
     */
    public readonly monitoringConfig!: pulumi.Output<outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigResponse>;
    /**
     * Only applicable for Vertex AI Feature Store (Legacy). A list of historical SnapshotAnalysis stats requested by user, sorted by FeatureStatsAnomaly.start_time descending.
     */
    public /*out*/ readonly monitoringStats!: pulumi.Output<outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1FeatureStatsAnomalyResponse[]>;
    /**
     * Only applicable for Vertex AI Feature Store (Legacy). The list of historical stats and anomalies with specified objectives.
     */
    public /*out*/ readonly monitoringStatsAnomalies!: pulumi.Output<outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1FeatureMonitoringStatsAnomalyResponse[]>;
    /**
     * Immutable. Name of the Feature. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}` `projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}` The last part feature is assigned by the client. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Only applicable for Vertex AI Feature Store (Legacy). Timestamp when this EntityType was most recently updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Immutable. Only applicable for Vertex AI Feature Store (Legacy). Type of Feature value.
     */
    public readonly valueType!: pulumi.Output<string>;
    /**
     * Only applicable for Vertex AI Feature Store. The name of the BigQuery Table/View columnn hosting data for this version. If no value is provided, will use feature_id.
     */
    public readonly versionColumnName!: pulumi.Output<string>;

    /**
     * Create a FeatureStoreFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureStoreFeatureArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.entityTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityTypeId'");
            }
            if ((!args || args.featureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureId'");
            }
            if ((!args || args.featurestoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featurestoreId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableMonitoring"] = args ? args.disableMonitoring : undefined;
            resourceInputs["entityTypeId"] = args ? args.entityTypeId : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["featureId"] = args ? args.featureId : undefined;
            resourceInputs["featurestoreId"] = args ? args.featurestoreId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["monitoringConfig"] = args ? args.monitoringConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["valueType"] = args ? args.valueType : undefined;
            resourceInputs["versionColumnName"] = args ? args.versionColumnName : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["monitoringStats"] = undefined /*out*/;
            resourceInputs["monitoringStatsAnomalies"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["disableMonitoring"] = undefined /*out*/;
            resourceInputs["entityTypeId"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["featureId"] = undefined /*out*/;
            resourceInputs["featurestoreId"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["monitoringConfig"] = undefined /*out*/;
            resourceInputs["monitoringStats"] = undefined /*out*/;
            resourceInputs["monitoringStatsAnomalies"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["valueType"] = undefined /*out*/;
            resourceInputs["versionColumnName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["entityTypeId", "featureId", "featurestoreId", "location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(FeatureStoreFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a FeatureStoreFeature resource.
 */
export interface FeatureStoreFeatureArgs {
    /**
     * Description of the Feature.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. Only applicable for Vertex AI Feature Store (Legacy). If not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If set to true, all types of data monitoring are disabled despite the config on EntityType.
     */
    disableMonitoring?: pulumi.Input<boolean>;
    entityTypeId: pulumi.Input<string>;
    /**
     * Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    etag?: pulumi.Input<string>;
    /**
     * Required. The ID to use for the Feature, which will become the final component of the Feature's resource name. This value may be up to 128 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within an EntityType/FeatureGroup.
     */
    featureId: pulumi.Input<string>;
    featurestoreId: pulumi.Input<string>;
    /**
     * Optional. The labels with user-defined metadata to organize your Features. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one Feature (System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    /**
     * Optional. Only applicable for Vertex AI Feature Store (Legacy). Deprecated: The custom monitoring configuration for this Feature, if not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If this is populated with FeaturestoreMonitoringConfig.disabled = true, snapshot analysis monitoring is disabled; if FeaturestoreMonitoringConfig.monitoring_interval specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring config is same as the EntityType's this Feature belongs to.
     *
     * @deprecated Optional. Only applicable for Vertex AI Feature Store (Legacy). Deprecated: The custom monitoring configuration for this Feature, if not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If this is populated with FeaturestoreMonitoringConfig.disabled = true, snapshot analysis monitoring is disabled; if FeaturestoreMonitoringConfig.monitoring_interval specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring config is same as the EntityType's this Feature belongs to.
     */
    monitoringConfig?: pulumi.Input<inputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigArgs>;
    /**
     * Immutable. Name of the Feature. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}` `projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}` The last part feature is assigned by the client. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Immutable. Only applicable for Vertex AI Feature Store (Legacy). Type of Feature value.
     */
    valueType?: pulumi.Input<enums.aiplatform.v1beta1.FeatureStoreFeatureValueType>;
    /**
     * Only applicable for Vertex AI Feature Store. The name of the BigQuery Table/View columnn hosting data for this version. If no value is provided, will use feature_id.
     */
    versionColumnName?: pulumi.Input<string>;
}
