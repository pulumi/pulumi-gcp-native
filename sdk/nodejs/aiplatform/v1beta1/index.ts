// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ArtifactArgs } from "./artifact";
export type Artifact = import("./artifact").Artifact;
export const Artifact: typeof import("./artifact").Artifact = null as any;
utilities.lazyLoad(exports, ["Artifact"], () => require("./artifact"));

export { BatchPredictionJobArgs } from "./batchPredictionJob";
export type BatchPredictionJob = import("./batchPredictionJob").BatchPredictionJob;
export const BatchPredictionJob: typeof import("./batchPredictionJob").BatchPredictionJob = null as any;
utilities.lazyLoad(exports, ["BatchPredictionJob"], () => require("./batchPredictionJob"));

export { ContextArgs } from "./context";
export type Context = import("./context").Context;
export const Context: typeof import("./context").Context = null as any;
utilities.lazyLoad(exports, ["Context"], () => require("./context"));

export { CustomJobArgs } from "./customJob";
export type CustomJob = import("./customJob").CustomJob;
export const CustomJob: typeof import("./customJob").CustomJob = null as any;
utilities.lazyLoad(exports, ["CustomJob"], () => require("./customJob"));

export { DataLabelingJobArgs } from "./dataLabelingJob";
export type DataLabelingJob = import("./dataLabelingJob").DataLabelingJob;
export const DataLabelingJob: typeof import("./dataLabelingJob").DataLabelingJob = null as any;
utilities.lazyLoad(exports, ["DataLabelingJob"], () => require("./dataLabelingJob"));

export { DatasetArgs } from "./dataset";
export type Dataset = import("./dataset").Dataset;
export const Dataset: typeof import("./dataset").Dataset = null as any;
utilities.lazyLoad(exports, ["Dataset"], () => require("./dataset"));

export { DatasetVersionArgs } from "./datasetVersion";
export type DatasetVersion = import("./datasetVersion").DatasetVersion;
export const DatasetVersion: typeof import("./datasetVersion").DatasetVersion = null as any;
utilities.lazyLoad(exports, ["DatasetVersion"], () => require("./datasetVersion"));

export { DeploymentResourcePoolArgs } from "./deploymentResourcePool";
export type DeploymentResourcePool = import("./deploymentResourcePool").DeploymentResourcePool;
export const DeploymentResourcePool: typeof import("./deploymentResourcePool").DeploymentResourcePool = null as any;
utilities.lazyLoad(exports, ["DeploymentResourcePool"], () => require("./deploymentResourcePool"));

export { EndpointArgs } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { EndpointIamBindingArgs } from "./endpointIamBinding";
export type EndpointIamBinding = import("./endpointIamBinding").EndpointIamBinding;
export const EndpointIamBinding: typeof import("./endpointIamBinding").EndpointIamBinding = null as any;
utilities.lazyLoad(exports, ["EndpointIamBinding"], () => require("./endpointIamBinding"));

export { EndpointIamMemberArgs } from "./endpointIamMember";
export type EndpointIamMember = import("./endpointIamMember").EndpointIamMember;
export const EndpointIamMember: typeof import("./endpointIamMember").EndpointIamMember = null as any;
utilities.lazyLoad(exports, ["EndpointIamMember"], () => require("./endpointIamMember"));

export { EndpointIamPolicyArgs } from "./endpointIamPolicy";
export type EndpointIamPolicy = import("./endpointIamPolicy").EndpointIamPolicy;
export const EndpointIamPolicy: typeof import("./endpointIamPolicy").EndpointIamPolicy = null as any;
utilities.lazyLoad(exports, ["EndpointIamPolicy"], () => require("./endpointIamPolicy"));

export { EntityTypeArgs } from "./entityType";
export type EntityType = import("./entityType").EntityType;
export const EntityType: typeof import("./entityType").EntityType = null as any;
utilities.lazyLoad(exports, ["EntityType"], () => require("./entityType"));

export { ExecutionArgs } from "./execution";
export type Execution = import("./execution").Execution;
export const Execution: typeof import("./execution").Execution = null as any;
utilities.lazyLoad(exports, ["Execution"], () => require("./execution"));

export { ExperimentArgs } from "./experiment";
export type Experiment = import("./experiment").Experiment;
export const Experiment: typeof import("./experiment").Experiment = null as any;
utilities.lazyLoad(exports, ["Experiment"], () => require("./experiment"));

export { FeatureGroupArgs } from "./featureGroup";
export type FeatureGroup = import("./featureGroup").FeatureGroup;
export const FeatureGroup: typeof import("./featureGroup").FeatureGroup = null as any;
utilities.lazyLoad(exports, ["FeatureGroup"], () => require("./featureGroup"));

export { FeatureGroupFeatureArgs } from "./featureGroupFeature";
export type FeatureGroupFeature = import("./featureGroupFeature").FeatureGroupFeature;
export const FeatureGroupFeature: typeof import("./featureGroupFeature").FeatureGroupFeature = null as any;
utilities.lazyLoad(exports, ["FeatureGroupFeature"], () => require("./featureGroupFeature"));

export { FeatureOnlineStoreArgs } from "./featureOnlineStore";
export type FeatureOnlineStore = import("./featureOnlineStore").FeatureOnlineStore;
export const FeatureOnlineStore: typeof import("./featureOnlineStore").FeatureOnlineStore = null as any;
utilities.lazyLoad(exports, ["FeatureOnlineStore"], () => require("./featureOnlineStore"));

export { FeatureStoreFeatureArgs } from "./featureStoreFeature";
export type FeatureStoreFeature = import("./featureStoreFeature").FeatureStoreFeature;
export const FeatureStoreFeature: typeof import("./featureStoreFeature").FeatureStoreFeature = null as any;
utilities.lazyLoad(exports, ["FeatureStoreFeature"], () => require("./featureStoreFeature"));

export { FeatureViewArgs } from "./featureView";
export type FeatureView = import("./featureView").FeatureView;
export const FeatureView: typeof import("./featureView").FeatureView = null as any;
utilities.lazyLoad(exports, ["FeatureView"], () => require("./featureView"));

export { FeaturestoreArgs } from "./featurestore";
export type Featurestore = import("./featurestore").Featurestore;
export const Featurestore: typeof import("./featurestore").Featurestore = null as any;
utilities.lazyLoad(exports, ["Featurestore"], () => require("./featurestore"));

export { FeaturestoreEntityTypeIamBindingArgs } from "./featurestoreEntityTypeIamBinding";
export type FeaturestoreEntityTypeIamBinding = import("./featurestoreEntityTypeIamBinding").FeaturestoreEntityTypeIamBinding;
export const FeaturestoreEntityTypeIamBinding: typeof import("./featurestoreEntityTypeIamBinding").FeaturestoreEntityTypeIamBinding = null as any;
utilities.lazyLoad(exports, ["FeaturestoreEntityTypeIamBinding"], () => require("./featurestoreEntityTypeIamBinding"));

export { FeaturestoreEntityTypeIamMemberArgs } from "./featurestoreEntityTypeIamMember";
export type FeaturestoreEntityTypeIamMember = import("./featurestoreEntityTypeIamMember").FeaturestoreEntityTypeIamMember;
export const FeaturestoreEntityTypeIamMember: typeof import("./featurestoreEntityTypeIamMember").FeaturestoreEntityTypeIamMember = null as any;
utilities.lazyLoad(exports, ["FeaturestoreEntityTypeIamMember"], () => require("./featurestoreEntityTypeIamMember"));

export { FeaturestoreEntityTypeIamPolicyArgs } from "./featurestoreEntityTypeIamPolicy";
export type FeaturestoreEntityTypeIamPolicy = import("./featurestoreEntityTypeIamPolicy").FeaturestoreEntityTypeIamPolicy;
export const FeaturestoreEntityTypeIamPolicy: typeof import("./featurestoreEntityTypeIamPolicy").FeaturestoreEntityTypeIamPolicy = null as any;
utilities.lazyLoad(exports, ["FeaturestoreEntityTypeIamPolicy"], () => require("./featurestoreEntityTypeIamPolicy"));

export { FeaturestoreIamBindingArgs } from "./featurestoreIamBinding";
export type FeaturestoreIamBinding = import("./featurestoreIamBinding").FeaturestoreIamBinding;
export const FeaturestoreIamBinding: typeof import("./featurestoreIamBinding").FeaturestoreIamBinding = null as any;
utilities.lazyLoad(exports, ["FeaturestoreIamBinding"], () => require("./featurestoreIamBinding"));

export { FeaturestoreIamMemberArgs } from "./featurestoreIamMember";
export type FeaturestoreIamMember = import("./featurestoreIamMember").FeaturestoreIamMember;
export const FeaturestoreIamMember: typeof import("./featurestoreIamMember").FeaturestoreIamMember = null as any;
utilities.lazyLoad(exports, ["FeaturestoreIamMember"], () => require("./featurestoreIamMember"));

export { FeaturestoreIamPolicyArgs } from "./featurestoreIamPolicy";
export type FeaturestoreIamPolicy = import("./featurestoreIamPolicy").FeaturestoreIamPolicy;
export const FeaturestoreIamPolicy: typeof import("./featurestoreIamPolicy").FeaturestoreIamPolicy = null as any;
utilities.lazyLoad(exports, ["FeaturestoreIamPolicy"], () => require("./featurestoreIamPolicy"));

export { GetArtifactArgs, GetArtifactResult, GetArtifactOutputArgs } from "./getArtifact";
export const getArtifact: typeof import("./getArtifact").getArtifact = null as any;
export const getArtifactOutput: typeof import("./getArtifact").getArtifactOutput = null as any;
utilities.lazyLoad(exports, ["getArtifact","getArtifactOutput"], () => require("./getArtifact"));

export { GetBatchPredictionJobArgs, GetBatchPredictionJobResult, GetBatchPredictionJobOutputArgs } from "./getBatchPredictionJob";
export const getBatchPredictionJob: typeof import("./getBatchPredictionJob").getBatchPredictionJob = null as any;
export const getBatchPredictionJobOutput: typeof import("./getBatchPredictionJob").getBatchPredictionJobOutput = null as any;
utilities.lazyLoad(exports, ["getBatchPredictionJob","getBatchPredictionJobOutput"], () => require("./getBatchPredictionJob"));

export { GetContextArgs, GetContextResult, GetContextOutputArgs } from "./getContext";
export const getContext: typeof import("./getContext").getContext = null as any;
export const getContextOutput: typeof import("./getContext").getContextOutput = null as any;
utilities.lazyLoad(exports, ["getContext","getContextOutput"], () => require("./getContext"));

export { GetCustomJobArgs, GetCustomJobResult, GetCustomJobOutputArgs } from "./getCustomJob";
export const getCustomJob: typeof import("./getCustomJob").getCustomJob = null as any;
export const getCustomJobOutput: typeof import("./getCustomJob").getCustomJobOutput = null as any;
utilities.lazyLoad(exports, ["getCustomJob","getCustomJobOutput"], () => require("./getCustomJob"));

export { GetDataLabelingJobArgs, GetDataLabelingJobResult, GetDataLabelingJobOutputArgs } from "./getDataLabelingJob";
export const getDataLabelingJob: typeof import("./getDataLabelingJob").getDataLabelingJob = null as any;
export const getDataLabelingJobOutput: typeof import("./getDataLabelingJob").getDataLabelingJobOutput = null as any;
utilities.lazyLoad(exports, ["getDataLabelingJob","getDataLabelingJobOutput"], () => require("./getDataLabelingJob"));

export { GetDatasetArgs, GetDatasetResult, GetDatasetOutputArgs } from "./getDataset";
export const getDataset: typeof import("./getDataset").getDataset = null as any;
export const getDatasetOutput: typeof import("./getDataset").getDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getDataset","getDatasetOutput"], () => require("./getDataset"));

export { GetDatasetVersionArgs, GetDatasetVersionResult, GetDatasetVersionOutputArgs } from "./getDatasetVersion";
export const getDatasetVersion: typeof import("./getDatasetVersion").getDatasetVersion = null as any;
export const getDatasetVersionOutput: typeof import("./getDatasetVersion").getDatasetVersionOutput = null as any;
utilities.lazyLoad(exports, ["getDatasetVersion","getDatasetVersionOutput"], () => require("./getDatasetVersion"));

export { GetDeploymentResourcePoolArgs, GetDeploymentResourcePoolResult, GetDeploymentResourcePoolOutputArgs } from "./getDeploymentResourcePool";
export const getDeploymentResourcePool: typeof import("./getDeploymentResourcePool").getDeploymentResourcePool = null as any;
export const getDeploymentResourcePoolOutput: typeof import("./getDeploymentResourcePool").getDeploymentResourcePoolOutput = null as any;
utilities.lazyLoad(exports, ["getDeploymentResourcePool","getDeploymentResourcePoolOutput"], () => require("./getDeploymentResourcePool"));

export { GetEndpointArgs, GetEndpointResult, GetEndpointOutputArgs } from "./getEndpoint";
export const getEndpoint: typeof import("./getEndpoint").getEndpoint = null as any;
export const getEndpointOutput: typeof import("./getEndpoint").getEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEndpoint","getEndpointOutput"], () => require("./getEndpoint"));

export { GetEndpointIamPolicyArgs, GetEndpointIamPolicyResult, GetEndpointIamPolicyOutputArgs } from "./getEndpointIamPolicy";
export const getEndpointIamPolicy: typeof import("./getEndpointIamPolicy").getEndpointIamPolicy = null as any;
export const getEndpointIamPolicyOutput: typeof import("./getEndpointIamPolicy").getEndpointIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointIamPolicy","getEndpointIamPolicyOutput"], () => require("./getEndpointIamPolicy"));

export { GetEntityTypeArgs, GetEntityTypeResult, GetEntityTypeOutputArgs } from "./getEntityType";
export const getEntityType: typeof import("./getEntityType").getEntityType = null as any;
export const getEntityTypeOutput: typeof import("./getEntityType").getEntityTypeOutput = null as any;
utilities.lazyLoad(exports, ["getEntityType","getEntityTypeOutput"], () => require("./getEntityType"));

export { GetExecutionArgs, GetExecutionResult, GetExecutionOutputArgs } from "./getExecution";
export const getExecution: typeof import("./getExecution").getExecution = null as any;
export const getExecutionOutput: typeof import("./getExecution").getExecutionOutput = null as any;
utilities.lazyLoad(exports, ["getExecution","getExecutionOutput"], () => require("./getExecution"));

export { GetExperimentArgs, GetExperimentResult, GetExperimentOutputArgs } from "./getExperiment";
export const getExperiment: typeof import("./getExperiment").getExperiment = null as any;
export const getExperimentOutput: typeof import("./getExperiment").getExperimentOutput = null as any;
utilities.lazyLoad(exports, ["getExperiment","getExperimentOutput"], () => require("./getExperiment"));

export { GetFeatureGroupArgs, GetFeatureGroupResult, GetFeatureGroupOutputArgs } from "./getFeatureGroup";
export const getFeatureGroup: typeof import("./getFeatureGroup").getFeatureGroup = null as any;
export const getFeatureGroupOutput: typeof import("./getFeatureGroup").getFeatureGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureGroup","getFeatureGroupOutput"], () => require("./getFeatureGroup"));

export { GetFeatureGroupFeatureArgs, GetFeatureGroupFeatureResult, GetFeatureGroupFeatureOutputArgs } from "./getFeatureGroupFeature";
export const getFeatureGroupFeature: typeof import("./getFeatureGroupFeature").getFeatureGroupFeature = null as any;
export const getFeatureGroupFeatureOutput: typeof import("./getFeatureGroupFeature").getFeatureGroupFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureGroupFeature","getFeatureGroupFeatureOutput"], () => require("./getFeatureGroupFeature"));

export { GetFeatureOnlineStoreArgs, GetFeatureOnlineStoreResult, GetFeatureOnlineStoreOutputArgs } from "./getFeatureOnlineStore";
export const getFeatureOnlineStore: typeof import("./getFeatureOnlineStore").getFeatureOnlineStore = null as any;
export const getFeatureOnlineStoreOutput: typeof import("./getFeatureOnlineStore").getFeatureOnlineStoreOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureOnlineStore","getFeatureOnlineStoreOutput"], () => require("./getFeatureOnlineStore"));

export { GetFeatureStoreFeatureArgs, GetFeatureStoreFeatureResult, GetFeatureStoreFeatureOutputArgs } from "./getFeatureStoreFeature";
export const getFeatureStoreFeature: typeof import("./getFeatureStoreFeature").getFeatureStoreFeature = null as any;
export const getFeatureStoreFeatureOutput: typeof import("./getFeatureStoreFeature").getFeatureStoreFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureStoreFeature","getFeatureStoreFeatureOutput"], () => require("./getFeatureStoreFeature"));

export { GetFeatureViewArgs, GetFeatureViewResult, GetFeatureViewOutputArgs } from "./getFeatureView";
export const getFeatureView: typeof import("./getFeatureView").getFeatureView = null as any;
export const getFeatureViewOutput: typeof import("./getFeatureView").getFeatureViewOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureView","getFeatureViewOutput"], () => require("./getFeatureView"));

export { GetFeaturestoreArgs, GetFeaturestoreResult, GetFeaturestoreOutputArgs } from "./getFeaturestore";
export const getFeaturestore: typeof import("./getFeaturestore").getFeaturestore = null as any;
export const getFeaturestoreOutput: typeof import("./getFeaturestore").getFeaturestoreOutput = null as any;
utilities.lazyLoad(exports, ["getFeaturestore","getFeaturestoreOutput"], () => require("./getFeaturestore"));

export { GetFeaturestoreEntityTypeIamPolicyArgs, GetFeaturestoreEntityTypeIamPolicyResult, GetFeaturestoreEntityTypeIamPolicyOutputArgs } from "./getFeaturestoreEntityTypeIamPolicy";
export const getFeaturestoreEntityTypeIamPolicy: typeof import("./getFeaturestoreEntityTypeIamPolicy").getFeaturestoreEntityTypeIamPolicy = null as any;
export const getFeaturestoreEntityTypeIamPolicyOutput: typeof import("./getFeaturestoreEntityTypeIamPolicy").getFeaturestoreEntityTypeIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFeaturestoreEntityTypeIamPolicy","getFeaturestoreEntityTypeIamPolicyOutput"], () => require("./getFeaturestoreEntityTypeIamPolicy"));

export { GetFeaturestoreIamPolicyArgs, GetFeaturestoreIamPolicyResult, GetFeaturestoreIamPolicyOutputArgs } from "./getFeaturestoreIamPolicy";
export const getFeaturestoreIamPolicy: typeof import("./getFeaturestoreIamPolicy").getFeaturestoreIamPolicy = null as any;
export const getFeaturestoreIamPolicyOutput: typeof import("./getFeaturestoreIamPolicy").getFeaturestoreIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFeaturestoreIamPolicy","getFeaturestoreIamPolicyOutput"], () => require("./getFeaturestoreIamPolicy"));

export { GetHyperparameterTuningJobArgs, GetHyperparameterTuningJobResult, GetHyperparameterTuningJobOutputArgs } from "./getHyperparameterTuningJob";
export const getHyperparameterTuningJob: typeof import("./getHyperparameterTuningJob").getHyperparameterTuningJob = null as any;
export const getHyperparameterTuningJobOutput: typeof import("./getHyperparameterTuningJob").getHyperparameterTuningJobOutput = null as any;
utilities.lazyLoad(exports, ["getHyperparameterTuningJob","getHyperparameterTuningJobOutput"], () => require("./getHyperparameterTuningJob"));

export { GetIndexArgs, GetIndexResult, GetIndexOutputArgs } from "./getIndex";
export const getIndex: typeof import("./getIndex").getIndex = null as any;
export const getIndexOutput: typeof import("./getIndex").getIndexOutput = null as any;
utilities.lazyLoad(exports, ["getIndex","getIndexOutput"], () => require("./getIndex"));

export { GetIndexEndpointArgs, GetIndexEndpointResult, GetIndexEndpointOutputArgs } from "./getIndexEndpoint";
export const getIndexEndpoint: typeof import("./getIndexEndpoint").getIndexEndpoint = null as any;
export const getIndexEndpointOutput: typeof import("./getIndexEndpoint").getIndexEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getIndexEndpoint","getIndexEndpointOutput"], () => require("./getIndexEndpoint"));

export { GetMetadataSchemaArgs, GetMetadataSchemaResult, GetMetadataSchemaOutputArgs } from "./getMetadataSchema";
export const getMetadataSchema: typeof import("./getMetadataSchema").getMetadataSchema = null as any;
export const getMetadataSchemaOutput: typeof import("./getMetadataSchema").getMetadataSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getMetadataSchema","getMetadataSchemaOutput"], () => require("./getMetadataSchema"));

export { GetMetadataStoreArgs, GetMetadataStoreResult, GetMetadataStoreOutputArgs } from "./getMetadataStore";
export const getMetadataStore: typeof import("./getMetadataStore").getMetadataStore = null as any;
export const getMetadataStoreOutput: typeof import("./getMetadataStore").getMetadataStoreOutput = null as any;
utilities.lazyLoad(exports, ["getMetadataStore","getMetadataStoreOutput"], () => require("./getMetadataStore"));

export { GetModelDeploymentMonitoringJobArgs, GetModelDeploymentMonitoringJobResult, GetModelDeploymentMonitoringJobOutputArgs } from "./getModelDeploymentMonitoringJob";
export const getModelDeploymentMonitoringJob: typeof import("./getModelDeploymentMonitoringJob").getModelDeploymentMonitoringJob = null as any;
export const getModelDeploymentMonitoringJobOutput: typeof import("./getModelDeploymentMonitoringJob").getModelDeploymentMonitoringJobOutput = null as any;
utilities.lazyLoad(exports, ["getModelDeploymentMonitoringJob","getModelDeploymentMonitoringJobOutput"], () => require("./getModelDeploymentMonitoringJob"));

export { GetModelIamPolicyArgs, GetModelIamPolicyResult, GetModelIamPolicyOutputArgs } from "./getModelIamPolicy";
export const getModelIamPolicy: typeof import("./getModelIamPolicy").getModelIamPolicy = null as any;
export const getModelIamPolicyOutput: typeof import("./getModelIamPolicy").getModelIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getModelIamPolicy","getModelIamPolicyOutput"], () => require("./getModelIamPolicy"));

export { GetNasJobArgs, GetNasJobResult, GetNasJobOutputArgs } from "./getNasJob";
export const getNasJob: typeof import("./getNasJob").getNasJob = null as any;
export const getNasJobOutput: typeof import("./getNasJob").getNasJobOutput = null as any;
utilities.lazyLoad(exports, ["getNasJob","getNasJobOutput"], () => require("./getNasJob"));

export { GetNotebookRuntimeTemplateArgs, GetNotebookRuntimeTemplateResult, GetNotebookRuntimeTemplateOutputArgs } from "./getNotebookRuntimeTemplate";
export const getNotebookRuntimeTemplate: typeof import("./getNotebookRuntimeTemplate").getNotebookRuntimeTemplate = null as any;
export const getNotebookRuntimeTemplateOutput: typeof import("./getNotebookRuntimeTemplate").getNotebookRuntimeTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getNotebookRuntimeTemplate","getNotebookRuntimeTemplateOutput"], () => require("./getNotebookRuntimeTemplate"));

export { GetNotebookRuntimeTemplateIamPolicyArgs, GetNotebookRuntimeTemplateIamPolicyResult, GetNotebookRuntimeTemplateIamPolicyOutputArgs } from "./getNotebookRuntimeTemplateIamPolicy";
export const getNotebookRuntimeTemplateIamPolicy: typeof import("./getNotebookRuntimeTemplateIamPolicy").getNotebookRuntimeTemplateIamPolicy = null as any;
export const getNotebookRuntimeTemplateIamPolicyOutput: typeof import("./getNotebookRuntimeTemplateIamPolicy").getNotebookRuntimeTemplateIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNotebookRuntimeTemplateIamPolicy","getNotebookRuntimeTemplateIamPolicyOutput"], () => require("./getNotebookRuntimeTemplateIamPolicy"));

export { GetPersistentResourceArgs, GetPersistentResourceResult, GetPersistentResourceOutputArgs } from "./getPersistentResource";
export const getPersistentResource: typeof import("./getPersistentResource").getPersistentResource = null as any;
export const getPersistentResourceOutput: typeof import("./getPersistentResource").getPersistentResourceOutput = null as any;
utilities.lazyLoad(exports, ["getPersistentResource","getPersistentResourceOutput"], () => require("./getPersistentResource"));

export { GetPipelineJobArgs, GetPipelineJobResult, GetPipelineJobOutputArgs } from "./getPipelineJob";
export const getPipelineJob: typeof import("./getPipelineJob").getPipelineJob = null as any;
export const getPipelineJobOutput: typeof import("./getPipelineJob").getPipelineJobOutput = null as any;
utilities.lazyLoad(exports, ["getPipelineJob","getPipelineJobOutput"], () => require("./getPipelineJob"));

export { GetRunArgs, GetRunResult, GetRunOutputArgs } from "./getRun";
export const getRun: typeof import("./getRun").getRun = null as any;
export const getRunOutput: typeof import("./getRun").getRunOutput = null as any;
utilities.lazyLoad(exports, ["getRun","getRunOutput"], () => require("./getRun"));

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));

export { GetSpecialistPoolArgs, GetSpecialistPoolResult, GetSpecialistPoolOutputArgs } from "./getSpecialistPool";
export const getSpecialistPool: typeof import("./getSpecialistPool").getSpecialistPool = null as any;
export const getSpecialistPoolOutput: typeof import("./getSpecialistPool").getSpecialistPoolOutput = null as any;
utilities.lazyLoad(exports, ["getSpecialistPool","getSpecialistPoolOutput"], () => require("./getSpecialistPool"));

export { GetStudyArgs, GetStudyResult, GetStudyOutputArgs } from "./getStudy";
export const getStudy: typeof import("./getStudy").getStudy = null as any;
export const getStudyOutput: typeof import("./getStudy").getStudyOutput = null as any;
utilities.lazyLoad(exports, ["getStudy","getStudyOutput"], () => require("./getStudy"));

export { GetTensorboardArgs, GetTensorboardResult, GetTensorboardOutputArgs } from "./getTensorboard";
export const getTensorboard: typeof import("./getTensorboard").getTensorboard = null as any;
export const getTensorboardOutput: typeof import("./getTensorboard").getTensorboardOutput = null as any;
utilities.lazyLoad(exports, ["getTensorboard","getTensorboardOutput"], () => require("./getTensorboard"));

export { GetTimeSeriesArgs, GetTimeSeriesResult, GetTimeSeriesOutputArgs } from "./getTimeSeries";
export const getTimeSeries: typeof import("./getTimeSeries").getTimeSeries = null as any;
export const getTimeSeriesOutput: typeof import("./getTimeSeries").getTimeSeriesOutput = null as any;
utilities.lazyLoad(exports, ["getTimeSeries","getTimeSeriesOutput"], () => require("./getTimeSeries"));

export { GetTrainingPipelineArgs, GetTrainingPipelineResult, GetTrainingPipelineOutputArgs } from "./getTrainingPipeline";
export const getTrainingPipeline: typeof import("./getTrainingPipeline").getTrainingPipeline = null as any;
export const getTrainingPipelineOutput: typeof import("./getTrainingPipeline").getTrainingPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getTrainingPipeline","getTrainingPipelineOutput"], () => require("./getTrainingPipeline"));

export { GetTrialArgs, GetTrialResult, GetTrialOutputArgs } from "./getTrial";
export const getTrial: typeof import("./getTrial").getTrial = null as any;
export const getTrialOutput: typeof import("./getTrial").getTrialOutput = null as any;
utilities.lazyLoad(exports, ["getTrial","getTrialOutput"], () => require("./getTrial"));

export { HyperparameterTuningJobArgs } from "./hyperparameterTuningJob";
export type HyperparameterTuningJob = import("./hyperparameterTuningJob").HyperparameterTuningJob;
export const HyperparameterTuningJob: typeof import("./hyperparameterTuningJob").HyperparameterTuningJob = null as any;
utilities.lazyLoad(exports, ["HyperparameterTuningJob"], () => require("./hyperparameterTuningJob"));

export { IndexEndpointArgs } from "./indexEndpoint";
export type IndexEndpoint = import("./indexEndpoint").IndexEndpoint;
export const IndexEndpoint: typeof import("./indexEndpoint").IndexEndpoint = null as any;
utilities.lazyLoad(exports, ["IndexEndpoint"], () => require("./indexEndpoint"));

export { IndexArgs } from "./index_";
export type Index = import("./index_").Index;
export const Index: typeof import("./index_").Index = null as any;
utilities.lazyLoad(exports, ["Index"], () => require("./index_"));

export { MetadataSchemaArgs } from "./metadataSchema";
export type MetadataSchema = import("./metadataSchema").MetadataSchema;
export const MetadataSchema: typeof import("./metadataSchema").MetadataSchema = null as any;
utilities.lazyLoad(exports, ["MetadataSchema"], () => require("./metadataSchema"));

export { MetadataStoreArgs } from "./metadataStore";
export type MetadataStore = import("./metadataStore").MetadataStore;
export const MetadataStore: typeof import("./metadataStore").MetadataStore = null as any;
utilities.lazyLoad(exports, ["MetadataStore"], () => require("./metadataStore"));

export { ModelDeploymentMonitoringJobArgs } from "./modelDeploymentMonitoringJob";
export type ModelDeploymentMonitoringJob = import("./modelDeploymentMonitoringJob").ModelDeploymentMonitoringJob;
export const ModelDeploymentMonitoringJob: typeof import("./modelDeploymentMonitoringJob").ModelDeploymentMonitoringJob = null as any;
utilities.lazyLoad(exports, ["ModelDeploymentMonitoringJob"], () => require("./modelDeploymentMonitoringJob"));

export { ModelIamBindingArgs } from "./modelIamBinding";
export type ModelIamBinding = import("./modelIamBinding").ModelIamBinding;
export const ModelIamBinding: typeof import("./modelIamBinding").ModelIamBinding = null as any;
utilities.lazyLoad(exports, ["ModelIamBinding"], () => require("./modelIamBinding"));

export { ModelIamMemberArgs } from "./modelIamMember";
export type ModelIamMember = import("./modelIamMember").ModelIamMember;
export const ModelIamMember: typeof import("./modelIamMember").ModelIamMember = null as any;
utilities.lazyLoad(exports, ["ModelIamMember"], () => require("./modelIamMember"));

export { ModelIamPolicyArgs } from "./modelIamPolicy";
export type ModelIamPolicy = import("./modelIamPolicy").ModelIamPolicy;
export const ModelIamPolicy: typeof import("./modelIamPolicy").ModelIamPolicy = null as any;
utilities.lazyLoad(exports, ["ModelIamPolicy"], () => require("./modelIamPolicy"));

export { NasJobArgs } from "./nasJob";
export type NasJob = import("./nasJob").NasJob;
export const NasJob: typeof import("./nasJob").NasJob = null as any;
utilities.lazyLoad(exports, ["NasJob"], () => require("./nasJob"));

export { NotebookRuntimeTemplateArgs } from "./notebookRuntimeTemplate";
export type NotebookRuntimeTemplate = import("./notebookRuntimeTemplate").NotebookRuntimeTemplate;
export const NotebookRuntimeTemplate: typeof import("./notebookRuntimeTemplate").NotebookRuntimeTemplate = null as any;
utilities.lazyLoad(exports, ["NotebookRuntimeTemplate"], () => require("./notebookRuntimeTemplate"));

export { NotebookRuntimeTemplateIamBindingArgs } from "./notebookRuntimeTemplateIamBinding";
export type NotebookRuntimeTemplateIamBinding = import("./notebookRuntimeTemplateIamBinding").NotebookRuntimeTemplateIamBinding;
export const NotebookRuntimeTemplateIamBinding: typeof import("./notebookRuntimeTemplateIamBinding").NotebookRuntimeTemplateIamBinding = null as any;
utilities.lazyLoad(exports, ["NotebookRuntimeTemplateIamBinding"], () => require("./notebookRuntimeTemplateIamBinding"));

export { NotebookRuntimeTemplateIamMemberArgs } from "./notebookRuntimeTemplateIamMember";
export type NotebookRuntimeTemplateIamMember = import("./notebookRuntimeTemplateIamMember").NotebookRuntimeTemplateIamMember;
export const NotebookRuntimeTemplateIamMember: typeof import("./notebookRuntimeTemplateIamMember").NotebookRuntimeTemplateIamMember = null as any;
utilities.lazyLoad(exports, ["NotebookRuntimeTemplateIamMember"], () => require("./notebookRuntimeTemplateIamMember"));

export { NotebookRuntimeTemplateIamPolicyArgs } from "./notebookRuntimeTemplateIamPolicy";
export type NotebookRuntimeTemplateIamPolicy = import("./notebookRuntimeTemplateIamPolicy").NotebookRuntimeTemplateIamPolicy;
export const NotebookRuntimeTemplateIamPolicy: typeof import("./notebookRuntimeTemplateIamPolicy").NotebookRuntimeTemplateIamPolicy = null as any;
utilities.lazyLoad(exports, ["NotebookRuntimeTemplateIamPolicy"], () => require("./notebookRuntimeTemplateIamPolicy"));

export { PersistentResourceArgs } from "./persistentResource";
export type PersistentResource = import("./persistentResource").PersistentResource;
export const PersistentResource: typeof import("./persistentResource").PersistentResource = null as any;
utilities.lazyLoad(exports, ["PersistentResource"], () => require("./persistentResource"));

export { PipelineJobArgs } from "./pipelineJob";
export type PipelineJob = import("./pipelineJob").PipelineJob;
export const PipelineJob: typeof import("./pipelineJob").PipelineJob = null as any;
utilities.lazyLoad(exports, ["PipelineJob"], () => require("./pipelineJob"));

export { RunArgs } from "./run";
export type Run = import("./run").Run;
export const Run: typeof import("./run").Run = null as any;
utilities.lazyLoad(exports, ["Run"], () => require("./run"));

export { ScheduleArgs } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { SpecialistPoolArgs } from "./specialistPool";
export type SpecialistPool = import("./specialistPool").SpecialistPool;
export const SpecialistPool: typeof import("./specialistPool").SpecialistPool = null as any;
utilities.lazyLoad(exports, ["SpecialistPool"], () => require("./specialistPool"));

export { StudyArgs } from "./study";
export type Study = import("./study").Study;
export const Study: typeof import("./study").Study = null as any;
utilities.lazyLoad(exports, ["Study"], () => require("./study"));

export { TensorboardArgs } from "./tensorboard";
export type Tensorboard = import("./tensorboard").Tensorboard;
export const Tensorboard: typeof import("./tensorboard").Tensorboard = null as any;
utilities.lazyLoad(exports, ["Tensorboard"], () => require("./tensorboard"));

export { TimeSeriesArgs } from "./timeSeries";
export type TimeSeries = import("./timeSeries").TimeSeries;
export const TimeSeries: typeof import("./timeSeries").TimeSeries = null as any;
utilities.lazyLoad(exports, ["TimeSeries"], () => require("./timeSeries"));

export { TrainingPipelineArgs } from "./trainingPipeline";
export type TrainingPipeline = import("./trainingPipeline").TrainingPipeline;
export const TrainingPipeline: typeof import("./trainingPipeline").TrainingPipeline = null as any;
utilities.lazyLoad(exports, ["TrainingPipeline"], () => require("./trainingPipeline"));

export { TrialArgs } from "./trial";
export type Trial = import("./trial").Trial;
export const Trial: typeof import("./trial").Trial = null as any;
utilities.lazyLoad(exports, ["Trial"], () => require("./trial"));


// Export enums:
export * from "../../types/enums/aiplatform/v1beta1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:aiplatform/v1beta1:Artifact":
                return new Artifact(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:BatchPredictionJob":
                return new BatchPredictionJob(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Context":
                return new Context(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:CustomJob":
                return new CustomJob(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:DataLabelingJob":
                return new DataLabelingJob(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Dataset":
                return new Dataset(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:DatasetVersion":
                return new DatasetVersion(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:DeploymentResourcePool":
                return new DeploymentResourcePool(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:EndpointIamBinding":
                return new EndpointIamBinding(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:EndpointIamMember":
                return new EndpointIamMember(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:EndpointIamPolicy":
                return new EndpointIamPolicy(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:EntityType":
                return new EntityType(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Execution":
                return new Execution(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Experiment":
                return new Experiment(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeatureGroup":
                return new FeatureGroup(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeatureGroupFeature":
                return new FeatureGroupFeature(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeatureOnlineStore":
                return new FeatureOnlineStore(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeatureStoreFeature":
                return new FeatureStoreFeature(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeatureView":
                return new FeatureView(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Featurestore":
                return new Featurestore(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeaturestoreEntityTypeIamBinding":
                return new FeaturestoreEntityTypeIamBinding(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeaturestoreEntityTypeIamMember":
                return new FeaturestoreEntityTypeIamMember(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeaturestoreEntityTypeIamPolicy":
                return new FeaturestoreEntityTypeIamPolicy(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeaturestoreIamBinding":
                return new FeaturestoreIamBinding(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeaturestoreIamMember":
                return new FeaturestoreIamMember(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:FeaturestoreIamPolicy":
                return new FeaturestoreIamPolicy(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:HyperparameterTuningJob":
                return new HyperparameterTuningJob(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Index":
                return new Index(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:IndexEndpoint":
                return new IndexEndpoint(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:MetadataSchema":
                return new MetadataSchema(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:MetadataStore":
                return new MetadataStore(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:ModelDeploymentMonitoringJob":
                return new ModelDeploymentMonitoringJob(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:ModelIamBinding":
                return new ModelIamBinding(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:ModelIamMember":
                return new ModelIamMember(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:ModelIamPolicy":
                return new ModelIamPolicy(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:NasJob":
                return new NasJob(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:NotebookRuntimeTemplate":
                return new NotebookRuntimeTemplate(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:NotebookRuntimeTemplateIamBinding":
                return new NotebookRuntimeTemplateIamBinding(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:NotebookRuntimeTemplateIamMember":
                return new NotebookRuntimeTemplateIamMember(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:NotebookRuntimeTemplateIamPolicy":
                return new NotebookRuntimeTemplateIamPolicy(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:PersistentResource":
                return new PersistentResource(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:PipelineJob":
                return new PipelineJob(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Run":
                return new Run(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:SpecialistPool":
                return new SpecialistPool(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Study":
                return new Study(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Tensorboard":
                return new Tensorboard(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:TimeSeries":
                return new TimeSeries(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:TrainingPipeline":
                return new TrainingPipeline(name, <any>undefined, { urn })
            case "google-native:aiplatform/v1beta1:Trial":
                return new Trial(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "aiplatform/v1beta1", _module)
