// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets a NotebookRuntimeTemplate.
 */
export function getNotebookRuntimeTemplate(args: GetNotebookRuntimeTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetNotebookRuntimeTemplateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:aiplatform/v1beta1:getNotebookRuntimeTemplate", {
        "location": args.location,
        "notebookRuntimeTemplateId": args.notebookRuntimeTemplateId,
        "project": args.project,
    }, opts);
}

export interface GetNotebookRuntimeTemplateArgs {
    location: string;
    notebookRuntimeTemplateId: string;
    project?: string;
}

export interface GetNotebookRuntimeTemplateResult {
    /**
     * Timestamp when this NotebookRuntimeTemplate was created.
     */
    readonly createTime: string;
    /**
     * Optional. The specification of persistent disk attached to the runtime as data disk storage.
     */
    readonly dataPersistentDiskSpec: outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1PersistentDiskSpecResponse;
    /**
     * The description of the NotebookRuntimeTemplate.
     */
    readonly description: string;
    /**
     * The display name of the NotebookRuntimeTemplate. The name can be up to 128 characters long and can consist of any UTF-8 characters.
     */
    readonly displayName: string;
    /**
     * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    readonly etag: string;
    /**
     * EUC configuration of the NotebookRuntimeTemplate.
     */
    readonly eucConfig: outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1NotebookEucConfigResponse;
    /**
     * The idle shutdown configuration of NotebookRuntimeTemplate. This config will only be set when idle shutdown is enabled.
     */
    readonly idleShutdownConfig: outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1NotebookIdleShutdownConfigResponse;
    /**
     * The default template to use if not specified.
     */
    readonly isDefault: boolean;
    /**
     * The labels with user-defined metadata to organize the NotebookRuntimeTemplates. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
     */
    readonly labels: {[key: string]: string};
    /**
     * Optional. Immutable. The specification of a single machine for the template.
     */
    readonly machineSpec: outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1MachineSpecResponse;
    /**
     * The resource name of the NotebookRuntimeTemplate.
     */
    readonly name: string;
    /**
     * Optional. Network spec.
     */
    readonly networkSpec: outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1NetworkSpecResponse;
    /**
     * Optional. Immutable. The type of the notebook runtime template.
     */
    readonly notebookRuntimeType: string;
    /**
     * The service account that the runtime workload runs as. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
     */
    readonly serviceAccount: string;
    /**
     * Timestamp when this NotebookRuntimeTemplate was most recently updated.
     */
    readonly updateTime: string;
}
/**
 * Gets a NotebookRuntimeTemplate.
 */
export function getNotebookRuntimeTemplateOutput(args: GetNotebookRuntimeTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNotebookRuntimeTemplateResult> {
    return pulumi.output(args).apply((a: any) => getNotebookRuntimeTemplate(a, opts))
}

export interface GetNotebookRuntimeTemplateOutputArgs {
    location: pulumi.Input<string>;
    notebookRuntimeTemplateId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
