// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets a reasoning engine.
 */
export function getReasoningEngine(args: GetReasoningEngineArgs, opts?: pulumi.InvokeOptions): Promise<GetReasoningEngineResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:aiplatform/v1beta1:getReasoningEngine", {
        "location": args.location,
        "project": args.project,
        "reasoningEngineId": args.reasoningEngineId,
    }, opts);
}

export interface GetReasoningEngineArgs {
    location: string;
    project?: string;
    reasoningEngineId: string;
}

export interface GetReasoningEngineResult {
    /**
     * Timestamp when this ReasoningEngine was created.
     */
    readonly createTime: string;
    /**
     * Optional. The description of the ReasoningEngine.
     */
    readonly description: string;
    /**
     * The display name of the ReasoningEngine.
     */
    readonly displayName: string;
    /**
     * Optional. Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    readonly etag: string;
    /**
     * Identifier. The resource name of the ReasoningEngine.
     */
    readonly name: string;
    /**
     * Configurations of the ReasoningEngine
     */
    readonly spec: outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1ReasoningEngineSpecResponse;
    /**
     * Timestamp when this ReasoningEngine was most recently updated.
     */
    readonly updateTime: string;
}
/**
 * Gets a reasoning engine.
 */
export function getReasoningEngineOutput(args: GetReasoningEngineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetReasoningEngineResult> {
    return pulumi.output(args).apply((a: any) => getReasoningEngine(a, opts))
}

export interface GetReasoningEngineOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    reasoningEngineId: pulumi.Input<string>;
}
