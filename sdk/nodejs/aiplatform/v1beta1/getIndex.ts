// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets an Index.
 */
export function getIndex(args: GetIndexArgs, opts?: pulumi.InvokeOptions): Promise<GetIndexResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:aiplatform/v1beta1:getIndex", {
        "indexId": args.indexId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetIndexArgs {
    indexId: string;
    location: string;
    project?: string;
}

export interface GetIndexResult {
    /**
     * Timestamp when this Index was created.
     */
    readonly createTime: string;
    /**
     * The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had been undeployed first.
     */
    readonly deployedIndexes: outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1DeployedIndexRefResponse[];
    /**
     * The description of the Index.
     */
    readonly description: string;
    /**
     * The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.
     */
    readonly displayName: string;
    /**
     * Immutable. Customer-managed encryption key spec for an Index. If set, this Index and all sub-resources of this Index will be secured by this key.
     */
    readonly encryptionSpec: outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1EncryptionSpecResponse;
    /**
     * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    readonly etag: string;
    /**
     * Stats of the index resource.
     */
    readonly indexStats: outputs.aiplatform.v1beta1.GoogleCloudAiplatformV1beta1IndexStatsResponse;
    /**
     * Immutable. The update method to use with this Index. If not set, BATCH_UPDATE will be used by default.
     */
    readonly indexUpdateMethod: string;
    /**
     * The labels with user-defined metadata to organize your Indexes. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
     */
    readonly labels: {[key: string]: string};
    /**
     * An additional information about the Index; the schema of the metadata can be found in metadata_schema.
     */
    readonly metadata: any;
    /**
     * Immutable. Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific to it. Unset if the Index does not have any additional information. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
     */
    readonly metadataSchemaUri: string;
    /**
     * The resource name of the Index.
     */
    readonly name: string;
    /**
     * Timestamp when this Index was most recently updated. This also includes any update to the contents of the Index. Note that Operations working on this Index may have their Operations.metadata.generic_metadata.update_time a little after the value of this timestamp, yet that does not mean their results are not already reflected in the Index. Result of any successfully completed Operation on the Index is reflected in it.
     */
    readonly updateTime: string;
}
/**
 * Gets an Index.
 */
export function getIndexOutput(args: GetIndexOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIndexResult> {
    return pulumi.output(args).apply((a: any) => getIndex(a, opts))
}

export interface GetIndexOutputArgs {
    indexId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
