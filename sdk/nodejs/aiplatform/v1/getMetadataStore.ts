// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Retrieves a specific MetadataStore.
 */
export function getMetadataStore(args: GetMetadataStoreArgs, opts?: pulumi.InvokeOptions): Promise<GetMetadataStoreResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:aiplatform/v1:getMetadataStore", {
        "location": args.location,
        "metadataStoreId": args.metadataStoreId,
        "project": args.project,
    }, opts);
}

export interface GetMetadataStoreArgs {
    location: string;
    metadataStoreId: string;
    project?: string;
}

export interface GetMetadataStoreResult {
    /**
     * Timestamp when this MetadataStore was created.
     */
    readonly createTime: string;
    /**
     * Description of the MetadataStore.
     */
    readonly description: string;
    /**
     * Customer-managed encryption key spec for a Metadata Store. If set, this Metadata Store and all sub-resources of this Metadata Store are secured using this key.
     */
    readonly encryptionSpec: outputs.aiplatform.v1.GoogleCloudAiplatformV1EncryptionSpecResponse;
    /**
     * The resource name of the MetadataStore instance.
     */
    readonly name: string;
    /**
     * State information of the MetadataStore.
     */
    readonly state: outputs.aiplatform.v1.GoogleCloudAiplatformV1MetadataStoreMetadataStoreStateResponse;
    /**
     * Timestamp when this MetadataStore was last updated.
     */
    readonly updateTime: string;
}
/**
 * Retrieves a specific MetadataStore.
 */
export function getMetadataStoreOutput(args: GetMetadataStoreOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetadataStoreResult> {
    return pulumi.output(args).apply((a: any) => getMetadataStore(a, opts))
}

export interface GetMetadataStoreOutputArgs {
    location: pulumi.Input<string>;
    metadataStoreId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
