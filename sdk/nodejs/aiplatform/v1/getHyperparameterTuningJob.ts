// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets a HyperparameterTuningJob
 */
export function getHyperparameterTuningJob(args: GetHyperparameterTuningJobArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperparameterTuningJobResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:aiplatform/v1:getHyperparameterTuningJob", {
        "hyperparameterTuningJobId": args.hyperparameterTuningJobId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetHyperparameterTuningJobArgs {
    hyperparameterTuningJobId: string;
    location: string;
    project?: string;
}

export interface GetHyperparameterTuningJobResult {
    /**
     * Time when the HyperparameterTuningJob was created.
     */
    readonly createTime: string;
    /**
     * The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.
     */
    readonly displayName: string;
    /**
     * Customer-managed encryption key options for a HyperparameterTuningJob. If this is set, then all resources created by the HyperparameterTuningJob will be encrypted with the provided encryption key.
     */
    readonly encryptionSpec: outputs.aiplatform.v1.GoogleCloudAiplatformV1EncryptionSpecResponse;
    /**
     * Time when the HyperparameterTuningJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
     */
    readonly endTime: string;
    /**
     * Only populated when job's state is JOB_STATE_FAILED or JOB_STATE_CANCELLED.
     */
    readonly error: outputs.aiplatform.v1.GoogleRpcStatusResponse;
    /**
     * The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
     */
    readonly labels: {[key: string]: string};
    /**
     * The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.
     */
    readonly maxFailedTrialCount: number;
    /**
     * The desired total number of Trials.
     */
    readonly maxTrialCount: number;
    /**
     * Resource name of the HyperparameterTuningJob.
     */
    readonly name: string;
    /**
     * The desired number of Trials to run in parallel.
     */
    readonly parallelTrialCount: number;
    /**
     * Time when the HyperparameterTuningJob for the first time entered the `JOB_STATE_RUNNING` state.
     */
    readonly startTime: string;
    /**
     * The detailed state of the job.
     */
    readonly state: string;
    /**
     * Study configuration of the HyperparameterTuningJob.
     */
    readonly studySpec: outputs.aiplatform.v1.GoogleCloudAiplatformV1StudySpecResponse;
    /**
     * The spec of a trial job. The same spec applies to the CustomJobs created in all the trials.
     */
    readonly trialJobSpec: outputs.aiplatform.v1.GoogleCloudAiplatformV1CustomJobSpecResponse;
    /**
     * Trials of the HyperparameterTuningJob.
     */
    readonly trials: outputs.aiplatform.v1.GoogleCloudAiplatformV1TrialResponse[];
    /**
     * Time when the HyperparameterTuningJob was most recently updated.
     */
    readonly updateTime: string;
}
/**
 * Gets a HyperparameterTuningJob
 */
export function getHyperparameterTuningJobOutput(args: GetHyperparameterTuningJobOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperparameterTuningJobResult> {
    return pulumi.output(args).apply((a: any) => getHyperparameterTuningJob(a, opts))
}

export interface GetHyperparameterTuningJobOutputArgs {
    hyperparameterTuningJobId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
