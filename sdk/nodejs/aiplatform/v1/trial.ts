// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Adds a user provided Trial to a Study.
 * Auto-naming is currently not supported for this resource.
 */
export class Trial extends pulumi.CustomResource {
    /**
     * Get an existing Trial resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Trial {
        return new Trial(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:aiplatform/v1:Trial';

    /**
     * Returns true if the given object is an instance of Trial.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Trial {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trial.__pulumiType;
    }

    /**
     * The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.
     */
    public /*out*/ readonly clientId!: pulumi.Output<string>;
    /**
     * The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.
     */
    public /*out*/ readonly customJob!: pulumi.Output<string>;
    /**
     * Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.
     */
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    /**
     * The final measurement containing the objective value.
     */
    public /*out*/ readonly finalMeasurement!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1MeasurementResponse>;
    /**
     * A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.
     */
    public /*out*/ readonly infeasibleReason!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.
     */
    public /*out*/ readonly measurements!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1MeasurementResponse[]>;
    /**
     * Resource name of the Trial assigned by the service.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The parameters of the Trial.
     */
    public /*out*/ readonly parameters!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1TrialParameterResponse[]>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Time when the Trial was started.
     */
    public /*out*/ readonly startTime!: pulumi.Output<string>;
    /**
     * The detailed state of the Trial.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly studyId!: pulumi.Output<string>;
    /**
     * URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.
     */
    public /*out*/ readonly webAccessUris!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Trial resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrialArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.studyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studyId'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["studyId"] = args ? args.studyId : undefined;
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["customJob"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["finalMeasurement"] = undefined /*out*/;
            resourceInputs["infeasibleReason"] = undefined /*out*/;
            resourceInputs["measurements"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["webAccessUris"] = undefined /*out*/;
        } else {
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["customJob"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["finalMeasurement"] = undefined /*out*/;
            resourceInputs["infeasibleReason"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["measurements"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["studyId"] = undefined /*out*/;
            resourceInputs["webAccessUris"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project", "studyId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Trial.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Trial resource.
 */
export interface TrialArgs {
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    studyId: pulumi.Input<string>;
}
