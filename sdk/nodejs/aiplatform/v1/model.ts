// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Uploads a Model artifact into Vertex AI.
 */
export class Model extends pulumi.CustomResource {
    /**
     * Get an existing Model resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Model {
        return new Model(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:aiplatform/v1:Model';

    /**
     * Returns true if the given object is an instance of Model.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Model {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Model.__pulumiType;
    }

    /**
     * Immutable. The path to the directory containing the Model artifact and any of its supporting files. Not required for AutoML Models.
     */
    public readonly artifactUri!: pulumi.Output<string>;
    /**
     * Optional. User input field to specify the base model source. Currently it only supports specifing the Model Garden models and Genie models.
     */
    public readonly baseModelSource!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1ModelBaseModelSourceResponse>;
    /**
     * Input only. The specification of the container that is to be used when deploying this Model. The specification is ingested upon ModelService.UploadModel, and all binaries it contains are copied and stored internally by Vertex AI. Not required for AutoML Models.
     */
    public readonly containerSpec!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1ModelContainerSpecResponse>;
    /**
     * Timestamp when this Model was uploaded into Vertex AI.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Stats of data used for training or evaluating the Model. Only populated when the Model is trained by a TrainingPipeline with data_input_config.
     */
    public readonly dataStats!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1ModelDataStatsResponse>;
    /**
     * The pointers to DeployedModels created from this Model. Note that Model could have been deployed to Endpoints in different Locations.
     */
    public /*out*/ readonly deployedModels!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1DeployedModelRefResponse[]>;
    /**
     * The description of the Model.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The display name of the Model. The name can be up to 128 characters long and can consist of any UTF-8 characters.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Customer-managed encryption key spec for a Model. If set, this Model and all sub-resources of this Model will be secured by this key.
     */
    public readonly encryptionSpec!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1EncryptionSpecResponse>;
    /**
     * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * The default explanation specification for this Model. The Model can be used for requesting explanation after being deployed if it is populated. The Model can be used for batch explanation if it is populated. All fields of the explanation_spec can be overridden by explanation_spec of DeployModelRequest.deployed_model, or explanation_spec of BatchPredictionJob. If the default explanation specification is not set for this Model, this Model can still be used for requesting explanation by setting explanation_spec of DeployModelRequest.deployed_model and for batch explanation by setting explanation_spec of BatchPredictionJob.
     */
    public readonly explanationSpec!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1ExplanationSpecResponse>;
    /**
     * The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Immutable. An additional information about the Model; the schema of the metadata can be found in metadata_schema. Unset if the Model does not have any additional information.
     */
    public readonly metadata!: pulumi.Output<any>;
    /**
     * The resource name of the Artifact that was created in MetadataStore when creating the Model. The Artifact resource name pattern is `projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}`.
     */
    public /*out*/ readonly metadataArtifact!: pulumi.Output<string>;
    /**
     * Immutable. Points to a YAML file stored on Google Cloud Storage describing additional information about the Model, that is specific to it. Unset if the Model does not have any additional information. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI, if no additional metadata is needed, this field is set to an empty string. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
     */
    public readonly metadataSchemaUri!: pulumi.Output<string>;
    /**
     * Source of a model. It can either be automl training pipeline, custom training pipeline, BigQuery ML, or saved and tuned from Genie or Model Garden.
     */
    public /*out*/ readonly modelSourceInfo!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1ModelSourceInfoResponse>;
    /**
     * The resource name of the Model.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If this Model is a copy of another Model, this contains info about the original.
     */
    public /*out*/ readonly originalModelInfo!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1ModelOriginalModelInfoResponse>;
    /**
     * Optional. This field is populated if the model is produced by a pipeline job.
     */
    public readonly pipelineJob!: pulumi.Output<string>;
    /**
     * The schemata that describe formats of the Model's predictions and explanations as given and returned via PredictionService.Predict and PredictionService.Explain.
     */
    public readonly predictSchemata!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1PredictSchemataResponse>;
    public readonly project!: pulumi.Output<string>;
    /**
     * When this Model is deployed, its prediction resources are described by the `prediction_resources` field of the Endpoint.deployed_models object. Because not all Models support all resource configuration types, the configuration types this Model supports are listed here. If no configuration types are listed, the Model cannot be deployed to an Endpoint and does not support online predictions (PredictionService.Predict or PredictionService.Explain). Such a Model can serve predictions by using a BatchPredictionJob, if it has at least one entry each in supported_input_storage_formats and supported_output_storage_formats.
     */
    public /*out*/ readonly supportedDeploymentResourcesTypes!: pulumi.Output<string[]>;
    /**
     * The formats in which this Model may be exported. If empty, this Model is not available for export.
     */
    public /*out*/ readonly supportedExportFormats!: pulumi.Output<outputs.aiplatform.v1.GoogleCloudAiplatformV1ModelExportFormatResponse[]>;
    /**
     * The formats this Model supports in BatchPredictionJob.input_config. If PredictSchemata.instance_schema_uri exists, the instances should be given as per that schema. The possible formats are: * `jsonl` The JSON Lines format, where each instance is a single line. Uses GcsSource. * `csv` The CSV format, where each instance is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsSource. * `tf-record` The TFRecord format, where each instance is a single record in tfrecord syntax. Uses GcsSource. * `tf-record-gzip` Similar to `tf-record`, but the file is gzipped. Uses GcsSource. * `bigquery` Each instance is a single row in BigQuery. Uses BigQuerySource. * `file-list` Each line of the file is the location of an instance to process, uses `gcs_source` field of the InputConfig object. If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain.
     */
    public /*out*/ readonly supportedInputStorageFormats!: pulumi.Output<string[]>;
    /**
     * The formats this Model supports in BatchPredictionJob.output_config. If both PredictSchemata.instance_schema_uri and PredictSchemata.prediction_schema_uri exist, the predictions are returned together with their instances. In other words, the prediction has the original instance data first, followed by the actual prediction content (as per the schema). The possible formats are: * `jsonl` The JSON Lines format, where each prediction is a single line. Uses GcsDestination. * `csv` The CSV format, where each prediction is a single comma-separated line. The first line in the file is the header, containing comma-separated field names. Uses GcsDestination. * `bigquery` Each prediction is a single row in a BigQuery table, uses BigQueryDestination . If this Model doesn't support any of these formats it means it cannot be used with a BatchPredictionJob. However, if it has supported_deployment_resources_types, it could serve online predictions by using PredictionService.Predict or PredictionService.Explain.
     */
    public /*out*/ readonly supportedOutputStorageFormats!: pulumi.Output<string[]>;
    /**
     * The resource name of the TrainingPipeline that uploaded this Model, if any.
     */
    public /*out*/ readonly trainingPipeline!: pulumi.Output<string>;
    /**
     * Timestamp when this Model was most recently updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * User provided version aliases so that a model version can be referenced via alias (i.e. `projects/{project}/locations/{location}/models/{model_id}@{version_alias}` instead of auto-generated version id (i.e. `projects/{project}/locations/{location}/models/{model_id}@{version_id})`. The format is a-z{0,126}[a-z0-9] to distinguish from version_id. A default version alias will be created for the first version of the model, and there must be exactly one default version alias for a model.
     */
    public readonly versionAliases!: pulumi.Output<string[]>;
    /**
     * Timestamp when this version was created.
     */
    public /*out*/ readonly versionCreateTime!: pulumi.Output<string>;
    /**
     * The description of this version.
     */
    public readonly versionDescription!: pulumi.Output<string>;
    /**
     * Immutable. The version ID of the model. A new version is committed when a new model version is uploaded or trained under an existing model id. It is an auto-incrementing decimal number in string representation.
     */
    public /*out*/ readonly versionId!: pulumi.Output<string>;
    /**
     * Timestamp when this version was most recently updated.
     */
    public /*out*/ readonly versionUpdateTime!: pulumi.Output<string>;

    /**
     * Create a Model resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModelArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["artifactUri"] = args ? args.artifactUri : undefined;
            resourceInputs["baseModelSource"] = args ? args.baseModelSource : undefined;
            resourceInputs["containerSpec"] = args ? args.containerSpec : undefined;
            resourceInputs["dataStats"] = args ? args.dataStats : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["encryptionSpec"] = args ? args.encryptionSpec : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["explanationSpec"] = args ? args.explanationSpec : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataSchemaUri"] = args ? args.metadataSchemaUri : undefined;
            resourceInputs["modelId"] = args ? args.modelId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentModel"] = args ? args.parentModel : undefined;
            resourceInputs["pipelineJob"] = args ? args.pipelineJob : undefined;
            resourceInputs["predictSchemata"] = args ? args.predictSchemata : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["versionAliases"] = args ? args.versionAliases : undefined;
            resourceInputs["versionDescription"] = args ? args.versionDescription : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deployedModels"] = undefined /*out*/;
            resourceInputs["metadataArtifact"] = undefined /*out*/;
            resourceInputs["modelSourceInfo"] = undefined /*out*/;
            resourceInputs["originalModelInfo"] = undefined /*out*/;
            resourceInputs["supportedDeploymentResourcesTypes"] = undefined /*out*/;
            resourceInputs["supportedExportFormats"] = undefined /*out*/;
            resourceInputs["supportedInputStorageFormats"] = undefined /*out*/;
            resourceInputs["supportedOutputStorageFormats"] = undefined /*out*/;
            resourceInputs["trainingPipeline"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["versionCreateTime"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
            resourceInputs["versionUpdateTime"] = undefined /*out*/;
        } else {
            resourceInputs["artifactUri"] = undefined /*out*/;
            resourceInputs["baseModelSource"] = undefined /*out*/;
            resourceInputs["containerSpec"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dataStats"] = undefined /*out*/;
            resourceInputs["deployedModels"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["encryptionSpec"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["explanationSpec"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["metadataArtifact"] = undefined /*out*/;
            resourceInputs["metadataSchemaUri"] = undefined /*out*/;
            resourceInputs["modelSourceInfo"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["originalModelInfo"] = undefined /*out*/;
            resourceInputs["pipelineJob"] = undefined /*out*/;
            resourceInputs["predictSchemata"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["supportedDeploymentResourcesTypes"] = undefined /*out*/;
            resourceInputs["supportedExportFormats"] = undefined /*out*/;
            resourceInputs["supportedInputStorageFormats"] = undefined /*out*/;
            resourceInputs["supportedOutputStorageFormats"] = undefined /*out*/;
            resourceInputs["trainingPipeline"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["versionAliases"] = undefined /*out*/;
            resourceInputs["versionCreateTime"] = undefined /*out*/;
            resourceInputs["versionDescription"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
            resourceInputs["versionUpdateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Model.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Model resource.
 */
export interface ModelArgs {
    /**
     * Immutable. The path to the directory containing the Model artifact and any of its supporting files. Not required for AutoML Models.
     */
    artifactUri?: pulumi.Input<string>;
    /**
     * Optional. User input field to specify the base model source. Currently it only supports specifing the Model Garden models and Genie models.
     */
    baseModelSource?: pulumi.Input<inputs.aiplatform.v1.GoogleCloudAiplatformV1ModelBaseModelSourceArgs>;
    /**
     * Input only. The specification of the container that is to be used when deploying this Model. The specification is ingested upon ModelService.UploadModel, and all binaries it contains are copied and stored internally by Vertex AI. Not required for AutoML Models.
     */
    containerSpec?: pulumi.Input<inputs.aiplatform.v1.GoogleCloudAiplatformV1ModelContainerSpecArgs>;
    /**
     * Stats of data used for training or evaluating the Model. Only populated when the Model is trained by a TrainingPipeline with data_input_config.
     */
    dataStats?: pulumi.Input<inputs.aiplatform.v1.GoogleCloudAiplatformV1ModelDataStatsArgs>;
    /**
     * The description of the Model.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the Model. The name can be up to 128 characters long and can consist of any UTF-8 characters.
     */
    displayName: pulumi.Input<string>;
    /**
     * Customer-managed encryption key spec for a Model. If set, this Model and all sub-resources of this Model will be secured by this key.
     */
    encryptionSpec?: pulumi.Input<inputs.aiplatform.v1.GoogleCloudAiplatformV1EncryptionSpecArgs>;
    /**
     * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    etag?: pulumi.Input<string>;
    /**
     * The default explanation specification for this Model. The Model can be used for requesting explanation after being deployed if it is populated. The Model can be used for batch explanation if it is populated. All fields of the explanation_spec can be overridden by explanation_spec of DeployModelRequest.deployed_model, or explanation_spec of BatchPredictionJob. If the default explanation specification is not set for this Model, this Model can still be used for requesting explanation by setting explanation_spec of DeployModelRequest.deployed_model and for batch explanation by setting explanation_spec of BatchPredictionJob.
     */
    explanationSpec?: pulumi.Input<inputs.aiplatform.v1.GoogleCloudAiplatformV1ExplanationSpecArgs>;
    /**
     * The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    /**
     * Immutable. An additional information about the Model; the schema of the metadata can be found in metadata_schema. Unset if the Model does not have any additional information.
     */
    metadata?: any;
    /**
     * Immutable. Points to a YAML file stored on Google Cloud Storage describing additional information about the Model, that is specific to it. Unset if the Model does not have any additional information. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI, if no additional metadata is needed, this field is set to an empty string. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
     */
    metadataSchemaUri?: pulumi.Input<string>;
    /**
     * Optional. The ID to use for the uploaded Model, which will become the final component of the model resource name. This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`. The first character cannot be a number or hyphen.
     */
    modelId?: pulumi.Input<string>;
    /**
     * The resource name of the Model.
     */
    name?: pulumi.Input<string>;
    /**
     * Optional. The resource name of the model into which to upload the version. Only specify this field when uploading a new version.
     */
    parentModel?: pulumi.Input<string>;
    /**
     * Optional. This field is populated if the model is produced by a pipeline job.
     */
    pipelineJob?: pulumi.Input<string>;
    /**
     * The schemata that describe formats of the Model's predictions and explanations as given and returned via PredictionService.Predict and PredictionService.Explain.
     */
    predictSchemata?: pulumi.Input<inputs.aiplatform.v1.GoogleCloudAiplatformV1PredictSchemataArgs>;
    project?: pulumi.Input<string>;
    /**
     * Optional. The user-provided custom service account to use to do the model upload. If empty, [Vertex AI Service Agent](https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) will be used to access resources needed to upload the model. This account must belong to the target project where the model is uploaded to, i.e., the project specified in the `parent` field of this request and have necessary read permissions (to Google Cloud Storage, Artifact Registry, etc.).
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * User provided version aliases so that a model version can be referenced via alias (i.e. `projects/{project}/locations/{location}/models/{model_id}@{version_alias}` instead of auto-generated version id (i.e. `projects/{project}/locations/{location}/models/{model_id}@{version_id})`. The format is a-z{0,126}[a-z0-9] to distinguish from version_id. A default version alias will be created for the first version of the model, and there must be exactly one default version alias for a model.
     */
    versionAliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of this version.
     */
    versionDescription?: pulumi.Input<string>;
}
