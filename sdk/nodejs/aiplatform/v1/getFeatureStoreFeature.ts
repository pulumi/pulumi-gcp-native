// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets details of a single Feature.
 */
export function getFeatureStoreFeature(args: GetFeatureStoreFeatureArgs, opts?: pulumi.InvokeOptions): Promise<GetFeatureStoreFeatureResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:aiplatform/v1:getFeatureStoreFeature", {
        "entityTypeId": args.entityTypeId,
        "featureId": args.featureId,
        "featurestoreId": args.featurestoreId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetFeatureStoreFeatureArgs {
    entityTypeId: string;
    featureId: string;
    featurestoreId: string;
    location: string;
    project?: string;
}

export interface GetFeatureStoreFeatureResult {
    /**
     * Only applicable for Vertex AI Feature Store (Legacy). Timestamp when this EntityType was created.
     */
    readonly createTime: string;
    /**
     * Description of the Feature.
     */
    readonly description: string;
    /**
     * Optional. Only applicable for Vertex AI Feature Store (Legacy). If not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If set to true, all types of data monitoring are disabled despite the config on EntityType.
     */
    readonly disableMonitoring: boolean;
    /**
     * Used to perform a consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    readonly etag: string;
    /**
     * Optional. The labels with user-defined metadata to organize your Features. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one Feature (System labels are excluded)." System reserved label keys are prefixed with "aiplatform.googleapis.com/" and are immutable.
     */
    readonly labels: {[key: string]: string};
    /**
     * Only applicable for Vertex AI Feature Store (Legacy). The list of historical stats and anomalies with specified objectives.
     */
    readonly monitoringStatsAnomalies: outputs.aiplatform.v1.GoogleCloudAiplatformV1FeatureMonitoringStatsAnomalyResponse[];
    /**
     * Immutable. Name of the Feature. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}` `projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}` The last part feature is assigned by the client. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.
     */
    readonly name: string;
    /**
     * Only applicable for Vertex AI Feature Store (Legacy). Timestamp when this EntityType was most recently updated.
     */
    readonly updateTime: string;
    /**
     * Immutable. Only applicable for Vertex AI Feature Store (Legacy). Type of Feature value.
     */
    readonly valueType: string;
    /**
     * Only applicable for Vertex AI Feature Store. The name of the BigQuery Table/View columnn hosting data for this version. If no value is provided, will use feature_id.
     */
    readonly versionColumnName: string;
}
/**
 * Gets details of a single Feature.
 */
export function getFeatureStoreFeatureOutput(args: GetFeatureStoreFeatureOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFeatureStoreFeatureResult> {
    return pulumi.output(args).apply((a: any) => getFeatureStoreFeature(a, opts))
}

export interface GetFeatureStoreFeatureOutputArgs {
    entityTypeId: pulumi.Input<string>;
    featureId: pulumi.Input<string>;
    featurestoreId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
