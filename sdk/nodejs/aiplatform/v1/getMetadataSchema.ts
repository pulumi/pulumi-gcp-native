// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Retrieves a specific MetadataSchema.
 */
export function getMetadataSchema(args: GetMetadataSchemaArgs, opts?: pulumi.InvokeOptions): Promise<GetMetadataSchemaResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:aiplatform/v1:getMetadataSchema", {
        "location": args.location,
        "metadataSchemaId": args.metadataSchemaId,
        "metadataStoreId": args.metadataStoreId,
        "project": args.project,
    }, opts);
}

export interface GetMetadataSchemaArgs {
    location: string;
    metadataSchemaId: string;
    metadataStoreId: string;
    project?: string;
}

export interface GetMetadataSchemaResult {
    /**
     * Timestamp when this MetadataSchema was created.
     */
    readonly createTime: string;
    /**
     * Description of the Metadata Schema
     */
    readonly description: string;
    /**
     * The resource name of the MetadataSchema.
     */
    readonly name: string;
    /**
     * The raw YAML string representation of the MetadataSchema. The combination of [MetadataSchema.version] and the schema name given by `title` in [MetadataSchema.schema] must be unique within a MetadataStore. The schema is defined as an OpenAPI 3.0.2 [MetadataSchema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#schemaObject)
     */
    readonly schema: string;
    /**
     * The type of the MetadataSchema. This is a property that identifies which metadata types will use the MetadataSchema.
     */
    readonly schemaType: string;
    /**
     * The version of the MetadataSchema. The version's format must match the following regular expression: `^[0-9]+.+.+$`, which would allow to order/compare different versions. Example: 1.0.0, 1.0.1, etc.
     */
    readonly schemaVersion: string;
}
/**
 * Retrieves a specific MetadataSchema.
 */
export function getMetadataSchemaOutput(args: GetMetadataSchemaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetadataSchemaResult> {
    return pulumi.output(args).apply((a: any) => getMetadataSchema(a, opts))
}

export interface GetMetadataSchemaOutputArgs {
    location: pulumi.Input<string>;
    metadataSchemaId: pulumi.Input<string>;
    metadataStoreId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
