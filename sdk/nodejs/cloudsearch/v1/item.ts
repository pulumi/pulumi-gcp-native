// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
 * Auto-naming is currently not supported for this resource.
 */
export class Item extends pulumi.CustomResource {
    /**
     * Get an existing Item resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Item {
        return new Item(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:cloudsearch/v1:Item';

    /**
     * Returns true if the given object is an instance of Item.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Item {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Item.__pulumiType;
    }

    /**
     * Access control list for this item.
     */
    public /*out*/ readonly acl!: pulumi.Output<outputs.cloudsearch.v1.ItemAclResponse>;
    /**
     * Item content to be indexed and made text searchable.
     */
    public /*out*/ readonly content!: pulumi.Output<outputs.cloudsearch.v1.ItemContentResponse>;
    public readonly datasourceId!: pulumi.Output<string>;
    public readonly itemId!: pulumi.Output<string>;
    /**
     * The type for this item.
     */
    public /*out*/ readonly itemType!: pulumi.Output<string>;
    /**
     * The metadata information.
     */
    public /*out*/ readonly metadata!: pulumi.Output<outputs.cloudsearch.v1.ItemMetadataResponse>;
    /**
     * The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Additional state connector can store for this item. The maximum length is 10000 bytes.
     */
    public /*out*/ readonly payload!: pulumi.Output<string>;
    /**
     * Queue this item belongs to. The maximum length is 100 characters.
     */
    public /*out*/ readonly queue!: pulumi.Output<string>;
    /**
     * Status of the item. Output only field.
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.cloudsearch.v1.ItemStatusResponse>;
    /**
     * The structured data for the item that should conform to a registered object definition in the schema for the data source.
     */
    public /*out*/ readonly structuredData!: pulumi.Output<outputs.cloudsearch.v1.ItemStructuredDataResponse>;
    /**
     * The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a Item resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ItemArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.datasourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasourceId'");
            }
            if ((!args || args.itemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'itemId'");
            }
            resourceInputs["connectorName"] = args ? args.connectorName : undefined;
            resourceInputs["datasourceId"] = args ? args.datasourceId : undefined;
            resourceInputs["debugOptions"] = args ? args.debugOptions : undefined;
            resourceInputs["itemId"] = args ? args.itemId : undefined;
            resourceInputs["acl"] = undefined /*out*/;
            resourceInputs["content"] = undefined /*out*/;
            resourceInputs["itemType"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["payload"] = undefined /*out*/;
            resourceInputs["queue"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["structuredData"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        } else {
            resourceInputs["acl"] = undefined /*out*/;
            resourceInputs["content"] = undefined /*out*/;
            resourceInputs["datasourceId"] = undefined /*out*/;
            resourceInputs["itemId"] = undefined /*out*/;
            resourceInputs["itemType"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["payload"] = undefined /*out*/;
            resourceInputs["queue"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["structuredData"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["datasourceId", "itemId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Item.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Item resource.
 */
export interface ItemArgs {
    /**
     * The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
     */
    connectorName?: pulumi.Input<string>;
    datasourceId: pulumi.Input<string>;
    /**
     * Common debug options.
     */
    debugOptions?: pulumi.Input<inputs.cloudsearch.v1.DebugOptionsArgs>;
    itemId: pulumi.Input<string>;
}
