// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets details of a single VMware node pool.
 */
export function getVmwareNodePool(args: GetVmwareNodePoolArgs, opts?: pulumi.InvokeOptions): Promise<GetVmwareNodePoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:gkeonprem/v1:getVmwareNodePool", {
        "location": args.location,
        "project": args.project,
        "view": args.view,
        "vmwareClusterId": args.vmwareClusterId,
        "vmwareNodePoolId": args.vmwareNodePoolId,
    }, opts);
}

export interface GetVmwareNodePoolArgs {
    location: string;
    project?: string;
    view?: string;
    vmwareClusterId: string;
    vmwareNodePoolId: string;
}

export interface GetVmwareNodePoolResult {
    /**
     * Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    readonly annotations: {[key: string]: string};
    /**
     * The node configuration of the node pool.
     */
    readonly config: outputs.gkeonprem.v1.VmwareNodeConfigResponse;
    /**
     * The time at which this node pool was created.
     */
    readonly createTime: string;
    /**
     * The time at which this node pool was deleted. If the resource is not deleted, this must be empty
     */
    readonly deleteTime: string;
    /**
     * The display name for the node pool.
     */
    readonly displayName: string;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
     */
    readonly etag: string;
    /**
     * Immutable. The resource name of this node pool.
     */
    readonly name: string;
    /**
     * Node pool autoscaling config for the node pool.
     */
    readonly nodePoolAutoscaling: outputs.gkeonprem.v1.VmwareNodePoolAutoscalingConfigResponse;
    /**
     * Anthos version for the node pool. Defaults to the user cluster version.
     */
    readonly onPremVersion: string;
    /**
     * If set, there are currently changes in flight to the node pool.
     */
    readonly reconciling: boolean;
    /**
     * The current state of the node pool.
     */
    readonly state: string;
    /**
     * ResourceStatus representing the detailed VMware node pool state.
     */
    readonly status: outputs.gkeonprem.v1.ResourceStatusResponse;
    /**
     * The unique identifier of the node pool.
     */
    readonly uid: string;
    /**
     * The time at which this node pool was last updated.
     */
    readonly updateTime: string;
}
/**
 * Gets details of a single VMware node pool.
 */
export function getVmwareNodePoolOutput(args: GetVmwareNodePoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVmwareNodePoolResult> {
    return pulumi.output(args).apply((a: any) => getVmwareNodePool(a, opts))
}

export interface GetVmwareNodePoolOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    view?: pulumi.Input<string>;
    vmwareClusterId: pulumi.Input<string>;
    vmwareNodePoolId: pulumi.Input<string>;
}
