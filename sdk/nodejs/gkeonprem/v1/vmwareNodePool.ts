// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new VMware node pool in a given project, location and VMWare cluster.
 */
export class VmwareNodePool extends pulumi.CustomResource {
    /**
     * Get an existing VmwareNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VmwareNodePool {
        return new VmwareNodePool(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:gkeonprem/v1:VmwareNodePool';

    /**
     * Returns true if the given object is an instance of VmwareNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmwareNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmwareNodePool.__pulumiType;
    }

    /**
     * Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The node configuration of the node pool.
     */
    public readonly config!: pulumi.Output<outputs.gkeonprem.v1.VmwareNodeConfigResponse>;
    /**
     * The time at which this node pool was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The time at which this node pool was deleted. If the resource is not deleted, this must be empty
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * The display name for the node pool.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
     */
    public readonly etag!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Immutable. The resource name of this node pool.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Node pool autoscaling config for the node pool.
     */
    public readonly nodePoolAutoscaling!: pulumi.Output<outputs.gkeonprem.v1.VmwareNodePoolAutoscalingConfigResponse>;
    /**
     * Anthos version for the node pool. Defaults to the user cluster version.
     */
    public readonly onPremVersion!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * If set, there are currently changes in flight to the node pool.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * The current state of the node pool.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * ResourceStatus representing the detailed VMware node pool state.
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.gkeonprem.v1.ResourceStatusResponse>;
    /**
     * The unique identifier of the node pool.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The time at which this node pool was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    public readonly vmwareClusterId!: pulumi.Output<string>;
    /**
     * The ID to use for the node pool, which will become the final component of the node pool's resource name. This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format. The value must not be permitted to be a UUID (or UUID-like: anything matching /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/i).
     */
    public readonly vmwareNodePoolId!: pulumi.Output<string | undefined>;

    /**
     * Create a VmwareNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmwareNodePoolArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.vmwareClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmwareClusterId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodePoolAutoscaling"] = args ? args.nodePoolAutoscaling : undefined;
            resourceInputs["onPremVersion"] = args ? args.onPremVersion : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["vmwareClusterId"] = args ? args.vmwareClusterId : undefined;
            resourceInputs["vmwareNodePoolId"] = args ? args.vmwareNodePoolId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["annotations"] = undefined /*out*/;
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["nodePoolAutoscaling"] = undefined /*out*/;
            resourceInputs["onPremVersion"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["vmwareClusterId"] = undefined /*out*/;
            resourceInputs["vmwareNodePoolId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project", "vmwareClusterId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(VmwareNodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VmwareNodePool resource.
 */
export interface VmwareNodePoolArgs {
    /**
     * Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The node configuration of the node pool.
     */
    config: pulumi.Input<inputs.gkeonprem.v1.VmwareNodeConfigArgs>;
    /**
     * The display name for the node pool.
     */
    displayName?: pulumi.Input<string>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
     */
    etag?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * Immutable. The resource name of this node pool.
     */
    name?: pulumi.Input<string>;
    /**
     * Node pool autoscaling config for the node pool.
     */
    nodePoolAutoscaling?: pulumi.Input<inputs.gkeonprem.v1.VmwareNodePoolAutoscalingConfigArgs>;
    /**
     * Anthos version for the node pool. Defaults to the user cluster version.
     */
    onPremVersion?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    vmwareClusterId: pulumi.Input<string>;
    /**
     * The ID to use for the node pool, which will become the final component of the node pool's resource name. This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format. The value must not be permitted to be a UUID (or UUID-like: anything matching /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/i).
     */
    vmwareNodePoolId?: pulumi.Input<string>;
}
