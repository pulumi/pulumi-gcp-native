// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new VMware user cluster in a given project and location.
 */
export class VmwareCluster extends pulumi.CustomResource {
    /**
     * Get an existing VmwareCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VmwareCluster {
        return new VmwareCluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:gkeonprem/v1:VmwareCluster';

    /**
     * Returns true if the given object is an instance of VmwareCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmwareCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmwareCluster.__pulumiType;
    }

    /**
     * The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
     */
    public readonly adminClusterMembership!: pulumi.Output<string>;
    /**
     * The resource name of the VMware admin cluster hosting this user cluster.
     */
    public /*out*/ readonly adminClusterName!: pulumi.Output<string>;
    /**
     * Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
     */
    public readonly antiAffinityGroups!: pulumi.Output<outputs.gkeonprem.v1.VmwareAAGConfigResponse>;
    /**
     * RBAC policy that will be applied and managed by the Anthos On-Prem API.
     */
    public readonly authorization!: pulumi.Output<outputs.gkeonprem.v1.AuthorizationResponse>;
    /**
     * Configuration for auto repairing.
     */
    public readonly autoRepairConfig!: pulumi.Output<outputs.gkeonprem.v1.VmwareAutoRepairConfigResponse>;
    /**
     * VMware user cluster control plane nodes must have either 1 or 3 replicas.
     */
    public readonly controlPlaneNode!: pulumi.Output<outputs.gkeonprem.v1.VmwareControlPlaneNodeConfigResponse>;
    /**
     * The time at which VMware user cluster was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     */
    public readonly dataplaneV2!: pulumi.Output<outputs.gkeonprem.v1.VmwareDataplaneV2ConfigResponse>;
    /**
     * The time at which VMware user cluster was deleted.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * A human readable description of this VMware user cluster.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Disable bundled ingress.
     */
    public readonly disableBundledIngress!: pulumi.Output<boolean>;
    /**
     * Enable control plane V2. Default to false.
     */
    public readonly enableControlPlaneV2!: pulumi.Output<boolean>;
    /**
     * The DNS name of VMware user cluster's API server.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Fleet configuration for the cluster.
     */
    public /*out*/ readonly fleet!: pulumi.Output<outputs.gkeonprem.v1.FleetResponse>;
    /**
     * Load balancer configuration.
     */
    public readonly loadBalancer!: pulumi.Output<outputs.gkeonprem.v1.VmwareLoadBalancerConfigResponse>;
    /**
     * The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
     */
    public /*out*/ readonly localName!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Immutable. The VMware user cluster resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The VMware user cluster network configuration.
     */
    public readonly networkConfig!: pulumi.Output<outputs.gkeonprem.v1.VmwareNetworkConfigResponse>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    public readonly onPremVersion!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * If set, there are currently changes in flight to the VMware user cluster.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * The current state of VMware user cluster.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * ResourceStatus representing detailed cluster state.
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.gkeonprem.v1.ResourceStatusResponse>;
    /**
     * Storage configuration.
     */
    public readonly storage!: pulumi.Output<outputs.gkeonprem.v1.VmwareStorageConfigResponse>;
    /**
     * The unique identifier of the VMware user cluster.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The time at which VMware user cluster was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Specifies upgrade policy for the cluster.
     */
    public readonly upgradePolicy!: pulumi.Output<outputs.gkeonprem.v1.VmwareClusterUpgradePolicyResponse>;
    /**
     * ValidationCheck represents the result of the preflight check job.
     */
    public /*out*/ readonly validationCheck!: pulumi.Output<outputs.gkeonprem.v1.ValidationCheckResponse>;
    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
     */
    public readonly vcenter!: pulumi.Output<outputs.gkeonprem.v1.VmwareVCenterConfigResponse>;
    /**
     * Enable VM tracking.
     */
    public readonly vmTrackingEnabled!: pulumi.Output<boolean>;
    /**
     * User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
     */
    public readonly vmwareClusterId!: pulumi.Output<string | undefined>;

    /**
     * Create a VmwareCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmwareClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.adminClusterMembership === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminClusterMembership'");
            }
            if ((!args || args.onPremVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'onPremVersion'");
            }
            resourceInputs["adminClusterMembership"] = args ? args.adminClusterMembership : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["antiAffinityGroups"] = args ? args.antiAffinityGroups : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["autoRepairConfig"] = args ? args.autoRepairConfig : undefined;
            resourceInputs["controlPlaneNode"] = args ? args.controlPlaneNode : undefined;
            resourceInputs["dataplaneV2"] = args ? args.dataplaneV2 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableBundledIngress"] = args ? args.disableBundledIngress : undefined;
            resourceInputs["enableControlPlaneV2"] = args ? args.enableControlPlaneV2 : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["loadBalancer"] = args ? args.loadBalancer : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConfig"] = args ? args.networkConfig : undefined;
            resourceInputs["onPremVersion"] = args ? args.onPremVersion : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["upgradePolicy"] = args ? args.upgradePolicy : undefined;
            resourceInputs["vcenter"] = args ? args.vcenter : undefined;
            resourceInputs["vmTrackingEnabled"] = args ? args.vmTrackingEnabled : undefined;
            resourceInputs["vmwareClusterId"] = args ? args.vmwareClusterId : undefined;
            resourceInputs["adminClusterName"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["fleet"] = undefined /*out*/;
            resourceInputs["localName"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["validationCheck"] = undefined /*out*/;
        } else {
            resourceInputs["adminClusterMembership"] = undefined /*out*/;
            resourceInputs["adminClusterName"] = undefined /*out*/;
            resourceInputs["annotations"] = undefined /*out*/;
            resourceInputs["antiAffinityGroups"] = undefined /*out*/;
            resourceInputs["authorization"] = undefined /*out*/;
            resourceInputs["autoRepairConfig"] = undefined /*out*/;
            resourceInputs["controlPlaneNode"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dataplaneV2"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["disableBundledIngress"] = undefined /*out*/;
            resourceInputs["enableControlPlaneV2"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["fleet"] = undefined /*out*/;
            resourceInputs["loadBalancer"] = undefined /*out*/;
            resourceInputs["localName"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkConfig"] = undefined /*out*/;
            resourceInputs["onPremVersion"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storage"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["upgradePolicy"] = undefined /*out*/;
            resourceInputs["validationCheck"] = undefined /*out*/;
            resourceInputs["vcenter"] = undefined /*out*/;
            resourceInputs["vmTrackingEnabled"] = undefined /*out*/;
            resourceInputs["vmwareClusterId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(VmwareCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VmwareCluster resource.
 */
export interface VmwareClusterArgs {
    /**
     * The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
     */
    adminClusterMembership: pulumi.Input<string>;
    /**
     * Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
     */
    antiAffinityGroups?: pulumi.Input<inputs.gkeonprem.v1.VmwareAAGConfigArgs>;
    /**
     * RBAC policy that will be applied and managed by the Anthos On-Prem API.
     */
    authorization?: pulumi.Input<inputs.gkeonprem.v1.AuthorizationArgs>;
    /**
     * Configuration for auto repairing.
     */
    autoRepairConfig?: pulumi.Input<inputs.gkeonprem.v1.VmwareAutoRepairConfigArgs>;
    /**
     * VMware user cluster control plane nodes must have either 1 or 3 replicas.
     */
    controlPlaneNode?: pulumi.Input<inputs.gkeonprem.v1.VmwareControlPlaneNodeConfigArgs>;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     */
    dataplaneV2?: pulumi.Input<inputs.gkeonprem.v1.VmwareDataplaneV2ConfigArgs>;
    /**
     * A human readable description of this VMware user cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * Disable bundled ingress.
     */
    disableBundledIngress?: pulumi.Input<boolean>;
    /**
     * Enable control plane V2. Default to false.
     */
    enableControlPlaneV2?: pulumi.Input<boolean>;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
     */
    etag?: pulumi.Input<string>;
    /**
     * Load balancer configuration.
     */
    loadBalancer?: pulumi.Input<inputs.gkeonprem.v1.VmwareLoadBalancerConfigArgs>;
    location?: pulumi.Input<string>;
    /**
     * Immutable. The VMware user cluster resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The VMware user cluster network configuration.
     */
    networkConfig?: pulumi.Input<inputs.gkeonprem.v1.VmwareNetworkConfigArgs>;
    /**
     * The Anthos clusters on the VMware version for your user cluster.
     */
    onPremVersion: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Storage configuration.
     */
    storage?: pulumi.Input<inputs.gkeonprem.v1.VmwareStorageConfigArgs>;
    /**
     * Specifies upgrade policy for the cluster.
     */
    upgradePolicy?: pulumi.Input<inputs.gkeonprem.v1.VmwareClusterUpgradePolicyArgs>;
    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
     */
    vcenter?: pulumi.Input<inputs.gkeonprem.v1.VmwareVCenterConfigArgs>;
    /**
     * Enable VM tracking.
     */
    vmTrackingEnabled?: pulumi.Input<boolean>;
    /**
     * User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
     */
    vmwareClusterId?: pulumi.Input<string>;
}
