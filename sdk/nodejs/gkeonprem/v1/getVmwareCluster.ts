// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets details of a single VMware Cluster.
 */
export function getVmwareCluster(args: GetVmwareClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetVmwareClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:gkeonprem/v1:getVmwareCluster", {
        "location": args.location,
        "project": args.project,
        "vmwareClusterId": args.vmwareClusterId,
    }, opts);
}

export interface GetVmwareClusterArgs {
    location: string;
    project?: string;
    vmwareClusterId: string;
}

export interface GetVmwareClusterResult {
    /**
     * The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
     */
    readonly adminClusterMembership: string;
    /**
     * The resource name of the VMware admin cluster hosting this user cluster.
     */
    readonly adminClusterName: string;
    /**
     * Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
     */
    readonly annotations: {[key: string]: string};
    /**
     * AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
     */
    readonly antiAffinityGroups: outputs.gkeonprem.v1.VmwareAAGConfigResponse;
    /**
     * RBAC policy that will be applied and managed by the Anthos On-Prem API.
     */
    readonly authorization: outputs.gkeonprem.v1.AuthorizationResponse;
    /**
     * Configuration for auto repairing.
     */
    readonly autoRepairConfig: outputs.gkeonprem.v1.VmwareAutoRepairConfigResponse;
    /**
     * VMware user cluster control plane nodes must have either 1 or 3 replicas.
     */
    readonly controlPlaneNode: outputs.gkeonprem.v1.VmwareControlPlaneNodeConfigResponse;
    /**
     * The time at which VMware user cluster was created.
     */
    readonly createTime: string;
    /**
     * VmwareDataplaneV2Config specifies configuration for Dataplane V2.
     */
    readonly dataplaneV2: outputs.gkeonprem.v1.VmwareDataplaneV2ConfigResponse;
    /**
     * The time at which VMware user cluster was deleted.
     */
    readonly deleteTime: string;
    /**
     * A human readable description of this VMware user cluster.
     */
    readonly description: string;
    /**
     * Enable control plane V2. Default to false.
     */
    readonly enableControlPlaneV2: boolean;
    /**
     * The DNS name of VMware user cluster's API server.
     */
    readonly endpoint: string;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
     */
    readonly etag: string;
    /**
     * Fleet configuration for the cluster.
     */
    readonly fleet: outputs.gkeonprem.v1.FleetResponse;
    /**
     * Load balancer configuration.
     */
    readonly loadBalancer: outputs.gkeonprem.v1.VmwareLoadBalancerConfigResponse;
    /**
     * The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
     */
    readonly localName: string;
    /**
     * Immutable. The VMware user cluster resource name.
     */
    readonly name: string;
    /**
     * The VMware user cluster network configuration.
     */
    readonly networkConfig: outputs.gkeonprem.v1.VmwareNetworkConfigResponse;
    /**
     * The Anthos clusters on the VMware version for your user cluster. Defaults to the admin cluster version.
     */
    readonly onPremVersion: string;
    /**
     * If set, there are currently changes in flight to the VMware user cluster.
     */
    readonly reconciling: boolean;
    /**
     * The current state of VMware user cluster.
     */
    readonly state: string;
    /**
     * ResourceStatus representing detailed cluster state.
     */
    readonly status: outputs.gkeonprem.v1.ResourceStatusResponse;
    /**
     * Storage configuration.
     */
    readonly storage: outputs.gkeonprem.v1.VmwareStorageConfigResponse;
    /**
     * The unique identifier of the VMware user cluster.
     */
    readonly uid: string;
    /**
     * The time at which VMware user cluster was last updated.
     */
    readonly updateTime: string;
    /**
     * ValidationCheck represents the result of the preflight check job.
     */
    readonly validationCheck: outputs.gkeonprem.v1.ValidationCheckResponse;
    /**
     * VmwareVCenterConfig specifies vCenter config for the user cluster. Inherited from the admin cluster.
     */
    readonly vcenter: outputs.gkeonprem.v1.VmwareVCenterConfigResponse;
    /**
     * Enable VM tracking.
     */
    readonly vmTrackingEnabled: boolean;
}
/**
 * Gets details of a single VMware Cluster.
 */
export function getVmwareClusterOutput(args: GetVmwareClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVmwareClusterResult> {
    return pulumi.output(args).apply((a: any) => getVmwareCluster(a, opts))
}

export interface GetVmwareClusterOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    vmwareClusterId: pulumi.Input<string>;
}
