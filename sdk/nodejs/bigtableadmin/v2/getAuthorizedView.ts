// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets information from a specified AuthorizedView.
 */
export function getAuthorizedView(args: GetAuthorizedViewArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthorizedViewResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:bigtableadmin/v2:getAuthorizedView", {
        "authorizedViewId": args.authorizedViewId,
        "instanceId": args.instanceId,
        "project": args.project,
        "tableId": args.tableId,
        "view": args.view,
    }, opts);
}

export interface GetAuthorizedViewArgs {
    authorizedViewId: string;
    instanceId: string;
    project?: string;
    tableId: string;
    view?: string;
}

export interface GetAuthorizedViewResult {
    /**
     * Set to true to make the AuthorizedView protected against deletion. The parent Table and containing Instance cannot be deleted if an AuthorizedView has this bit set.
     */
    readonly deletionProtection: boolean;
    /**
     * The etag for this AuthorizedView. If this is provided on update, it must match the server's etag. The server returns ABORTED error on a mismatched etag.
     */
    readonly etag: string;
    /**
     * Identifier. The name of this AuthorizedView. Values are of the form `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`
     */
    readonly name: string;
    /**
     * An AuthorizedView permitting access to an explicit subset of a Table.
     */
    readonly subsetView: outputs.bigtableadmin.v2.GoogleBigtableAdminV2AuthorizedViewSubsetViewResponse;
}
/**
 * Gets information from a specified AuthorizedView.
 */
export function getAuthorizedViewOutput(args: GetAuthorizedViewOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthorizedViewResult> {
    return pulumi.output(args).apply((a: any) => getAuthorizedView(a, opts))
}

export interface GetAuthorizedViewOutputArgs {
    authorizedViewId: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    tableId: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}
