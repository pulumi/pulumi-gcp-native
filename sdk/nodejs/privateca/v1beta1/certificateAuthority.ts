// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a new CertificateAuthority in a given Project and Location.
 */
export class CertificateAuthority extends pulumi.CustomResource {
    /**
     * Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CertificateAuthority {
        return new CertificateAuthority(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:privateca/v1beta1:CertificateAuthority';

    /**
     * Returns true if the given object is an instance of CertificateAuthority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateAuthority {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateAuthority.__pulumiType;
    }


    /**
     * Create a CertificateAuthority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateAuthorityArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.certificateAuthoritiesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthoritiesId'");
            }
            if ((!args || args.locationsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationsId'");
            }
            if ((!args || args.projectsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectsId'");
            }
            inputs["accessUrls"] = args ? args.accessUrls : undefined;
            inputs["caCertificateDescriptions"] = args ? args.caCertificateDescriptions : undefined;
            inputs["certificateAuthoritiesId"] = args ? args.certificateAuthoritiesId : undefined;
            inputs["certificatePolicy"] = args ? args.certificatePolicy : undefined;
            inputs["config"] = args ? args.config : undefined;
            inputs["createTime"] = args ? args.createTime : undefined;
            inputs["deleteTime"] = args ? args.deleteTime : undefined;
            inputs["gcsBucket"] = args ? args.gcsBucket : undefined;
            inputs["issuingOptions"] = args ? args.issuingOptions : undefined;
            inputs["keySpec"] = args ? args.keySpec : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["lifetime"] = args ? args.lifetime : undefined;
            inputs["locationsId"] = args ? args.locationsId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pemCaCertificates"] = args ? args.pemCaCertificates : undefined;
            inputs["projectsId"] = args ? args.projectsId : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["subordinateConfig"] = args ? args.subordinateConfig : undefined;
            inputs["tier"] = args ? args.tier : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["updateTime"] = args ? args.updateTime : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CertificateAuthority.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a CertificateAuthority resource.
 */
export interface CertificateAuthorityArgs {
    /**
     * Output only. URLs for accessing content published by this CA, such as the CA certificate and CRLs.
     */
    readonly accessUrls?: pulumi.Input<inputs.privateca.v1beta1.AccessUrls>;
    /**
     * Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
     */
    readonly caCertificateDescriptions?: pulumi.Input<pulumi.Input<inputs.privateca.v1beta1.CertificateDescription>[]>;
    readonly certificateAuthoritiesId: pulumi.Input<string>;
    /**
     * Optional. The CertificateAuthorityPolicy to enforce when issuing Certificates from this CertificateAuthority.
     */
    readonly certificatePolicy?: pulumi.Input<inputs.privateca.v1beta1.CertificateAuthorityPolicy>;
    /**
     * Required. Immutable. The config used to create a self-signed X.509 certificate or CSR.
     */
    readonly config?: pulumi.Input<inputs.privateca.v1beta1.CertificateConfig>;
    /**
     * Output only. The time at which this CertificateAuthority was created.
     */
    readonly createTime?: pulumi.Input<string>;
    /**
     * Output only. The time at which this CertificateAuthority will be deleted, if scheduled for deletion.
     */
    readonly deleteTime?: pulumi.Input<string>;
    /**
     * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
     */
    readonly gcsBucket?: pulumi.Input<string>;
    /**
     * Optional. The IssuingOptions to follow when issuing Certificates from this CertificateAuthority.
     */
    readonly issuingOptions?: pulumi.Input<inputs.privateca.v1beta1.IssuingOptions>;
    /**
     * Required. Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
     */
    readonly keySpec?: pulumi.Input<inputs.privateca.v1beta1.KeyVersionSpec>;
    /**
     * Optional. Labels with user-defined metadata.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
     */
    readonly lifetime?: pulumi.Input<string>;
    readonly locationsId: pulumi.Input<string>;
    /**
     * Output only. The resource name for this CertificateAuthority in the format `projects/*&#47;locations/*&#47;certificateAuthorities/*`.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
     */
    readonly pemCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    readonly projectsId: pulumi.Input<string>;
    /**
     * Output only. The State for this CertificateAuthority.
     */
    readonly state?: pulumi.Input<string>;
    /**
     * Optional. If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which describes its issuers. This may be updated, but this CertificateAuthority must continue to validate.
     */
    readonly subordinateConfig?: pulumi.Input<inputs.privateca.v1beta1.SubordinateConfig>;
    /**
     * Required. Immutable. The Tier of this CertificateAuthority.
     */
    readonly tier?: pulumi.Input<string>;
    /**
     * Required. Immutable. The Type of this CertificateAuthority.
     */
    readonly type?: pulumi.Input<string>;
    /**
     * Output only. The time at which this CertificateAuthority was updated.
     */
    readonly updateTime?: pulumi.Input<string>;
}
