// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a new CertificateAuthority in a given Project and Location.
 */
export class CertificateAuthority extends pulumi.CustomResource {
    /**
     * Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CertificateAuthority {
        return new CertificateAuthority(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:privateca/v1beta1:CertificateAuthority';

    /**
     * Returns true if the given object is an instance of CertificateAuthority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateAuthority {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateAuthority.__pulumiType;
    }

    /**
     * URLs for accessing content published by this CA, such as the CA certificate and CRLs.
     */
    public /*out*/ readonly accessUrls!: pulumi.Output<outputs.privateca.v1beta1.AccessUrlsResponse>;
    /**
     * A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
     */
    public /*out*/ readonly caCertificateDescriptions!: pulumi.Output<outputs.privateca.v1beta1.CertificateDescriptionResponse[]>;
    /**
     * Optional. The CertificateAuthorityPolicy to enforce when issuing Certificates from this CertificateAuthority.
     */
    public readonly certificatePolicy!: pulumi.Output<outputs.privateca.v1beta1.CertificateAuthorityPolicyResponse>;
    /**
     * Required. Immutable. The config used to create a self-signed X.509 certificate or CSR.
     */
    public readonly config!: pulumi.Output<outputs.privateca.v1beta1.CertificateConfigResponse>;
    /**
     * The time at which this CertificateAuthority was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The time at which this CertificateAuthority will be deleted, if scheduled for deletion.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
     */
    public readonly gcsBucket!: pulumi.Output<string>;
    /**
     * Optional. The IssuingOptions to follow when issuing Certificates from this CertificateAuthority.
     */
    public readonly issuingOptions!: pulumi.Output<outputs.privateca.v1beta1.IssuingOptionsResponse>;
    /**
     * Required. Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
     */
    public readonly keySpec!: pulumi.Output<outputs.privateca.v1beta1.KeyVersionSpecResponse>;
    /**
     * Optional. Labels with user-defined metadata.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Required. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
     */
    public readonly lifetime!: pulumi.Output<string>;
    /**
     * The resource name for this CertificateAuthority in the format `projects/*&#47;locations/*&#47;certificateAuthorities/*`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
     */
    public /*out*/ readonly pemCaCertificates!: pulumi.Output<string[]>;
    /**
     * The State for this CertificateAuthority.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Optional. If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which describes its issuers. This may be updated, but this CertificateAuthority must continue to validate.
     */
    public readonly subordinateConfig!: pulumi.Output<outputs.privateca.v1beta1.SubordinateConfigResponse>;
    /**
     * Required. Immutable. The Tier of this CertificateAuthority.
     */
    public readonly tier!: pulumi.Output<string>;
    /**
     * Required. Immutable. The Type of this CertificateAuthority.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The time at which this CertificateAuthority was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CertificateAuthority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateAuthorityArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.certificateAuthorityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthorityId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            inputs["certificateAuthorityId"] = args ? args.certificateAuthorityId : undefined;
            inputs["certificatePolicy"] = args ? args.certificatePolicy : undefined;
            inputs["config"] = args ? args.config : undefined;
            inputs["gcsBucket"] = args ? args.gcsBucket : undefined;
            inputs["issuingOptions"] = args ? args.issuingOptions : undefined;
            inputs["keySpec"] = args ? args.keySpec : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["lifetime"] = args ? args.lifetime : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["requestId"] = args ? args.requestId : undefined;
            inputs["subordinateConfig"] = args ? args.subordinateConfig : undefined;
            inputs["tier"] = args ? args.tier : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["accessUrls"] = undefined /*out*/;
            inputs["caCertificateDescriptions"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["deleteTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["pemCaCertificates"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        } else {
            inputs["accessUrls"] = undefined /*out*/;
            inputs["caCertificateDescriptions"] = undefined /*out*/;
            inputs["certificatePolicy"] = undefined /*out*/;
            inputs["config"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["deleteTime"] = undefined /*out*/;
            inputs["gcsBucket"] = undefined /*out*/;
            inputs["issuingOptions"] = undefined /*out*/;
            inputs["keySpec"] = undefined /*out*/;
            inputs["labels"] = undefined /*out*/;
            inputs["lifetime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["pemCaCertificates"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["subordinateConfig"] = undefined /*out*/;
            inputs["tier"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CertificateAuthority.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a CertificateAuthority resource.
 */
export interface CertificateAuthorityArgs {
    readonly certificateAuthorityId: pulumi.Input<string>;
    /**
     * Optional. The CertificateAuthorityPolicy to enforce when issuing Certificates from this CertificateAuthority.
     */
    readonly certificatePolicy?: pulumi.Input<inputs.privateca.v1beta1.CertificateAuthorityPolicyArgs>;
    /**
     * Required. Immutable. The config used to create a self-signed X.509 certificate or CSR.
     */
    readonly config?: pulumi.Input<inputs.privateca.v1beta1.CertificateConfigArgs>;
    /**
     * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
     */
    readonly gcsBucket?: pulumi.Input<string>;
    /**
     * Optional. The IssuingOptions to follow when issuing Certificates from this CertificateAuthority.
     */
    readonly issuingOptions?: pulumi.Input<inputs.privateca.v1beta1.IssuingOptionsArgs>;
    /**
     * Required. Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
     */
    readonly keySpec?: pulumi.Input<inputs.privateca.v1beta1.KeyVersionSpecArgs>;
    /**
     * Optional. Labels with user-defined metadata.
     */
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
     */
    readonly lifetime?: pulumi.Input<string>;
    readonly location: pulumi.Input<string>;
    readonly project: pulumi.Input<string>;
    readonly requestId?: pulumi.Input<string>;
    /**
     * Optional. If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which describes its issuers. This may be updated, but this CertificateAuthority must continue to validate.
     */
    readonly subordinateConfig?: pulumi.Input<inputs.privateca.v1beta1.SubordinateConfigArgs>;
    /**
     * Required. Immutable. The Tier of this CertificateAuthority.
     */
    readonly tier?: pulumi.Input<string>;
    /**
     * Required. Immutable. The Type of this CertificateAuthority.
     */
    readonly type?: pulumi.Input<string>;
}
