// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a Serverless VPC Access connector, returns an operation.
 */
export class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Connector {
        return new Connector(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:vpcaccess/v1:Connector';

    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connector.__pulumiType;
    }


    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connectorsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorsId'");
            }
            if ((!args || args.locationsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationsId'");
            }
            if ((!args || args.projectsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectsId'");
            }
            inputs["connectedProjects"] = args ? args.connectedProjects : undefined;
            inputs["connectorsId"] = args ? args.connectorsId : undefined;
            inputs["ipCidrRange"] = args ? args.ipCidrRange : undefined;
            inputs["locationsId"] = args ? args.locationsId : undefined;
            inputs["maxThroughput"] = args ? args.maxThroughput : undefined;
            inputs["minThroughput"] = args ? args.minThroughput : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["projectsId"] = args ? args.projectsId : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["subnet"] = args ? args.subnet : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Connector.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Connector resource.
 */
export interface ConnectorArgs {
    /**
     * Output only. List of projects using the connector.
     */
    readonly connectedProjects?: pulumi.Input<pulumi.Input<string>[]>;
    readonly connectorsId: pulumi.Input<string>;
    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
     */
    readonly ipCidrRange?: pulumi.Input<string>;
    readonly locationsId: pulumi.Input<string>;
    /**
     * Maximum throughput of the connector in Mbps. Default is 200, max is 1000.
     */
    readonly maxThroughput?: pulumi.Input<number>;
    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200.
     */
    readonly minThroughput?: pulumi.Input<number>;
    /**
     * The resource name in the format `projects/*&#47;locations/*&#47;connectors/*`.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Name of a VPC network.
     */
    readonly network?: pulumi.Input<string>;
    readonly projectsId: pulumi.Input<string>;
    /**
     * Output only. State of the VPC access connector.
     */
    readonly state?: pulumi.Input<string>;
    /**
     * The subnet in which to house the VPC Access Connector.
     */
    readonly subnet?: pulumi.Input<inputs.vpcaccess.v1.Subnet>;
}
