// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets details of a logging server.
 */
export function getLoggingServer(args: GetLoggingServerArgs, opts?: pulumi.InvokeOptions): Promise<GetLoggingServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:vmwareengine/v1:getLoggingServer", {
        "location": args.location,
        "loggingServerId": args.loggingServerId,
        "privateCloudId": args.privateCloudId,
        "project": args.project,
    }, opts);
}

export interface GetLoggingServerArgs {
    location: string;
    loggingServerId: string;
    privateCloudId: string;
    project?: string;
}

export interface GetLoggingServerResult {
    /**
     * Creation time of this resource.
     */
    readonly createTime: string;
    /**
     * Fully-qualified domain name (FQDN) or IP Address of the logging server.
     */
    readonly hostname: string;
    /**
     * The resource name of this logging server. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`
     */
    readonly name: string;
    /**
     * Port number at which the logging server receives logs.
     */
    readonly port: number;
    /**
     * Protocol used by vCenter to send logs to a logging server.
     */
    readonly protocol: string;
    /**
     * The type of component that produces logs that will be forwarded to this logging server.
     */
    readonly sourceType: string;
    /**
     * System-generated unique identifier for the resource.
     */
    readonly uid: string;
    /**
     * Last update time of this resource.
     */
    readonly updateTime: string;
}
/**
 * Gets details of a logging server.
 */
export function getLoggingServerOutput(args: GetLoggingServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoggingServerResult> {
    return pulumi.output(args).apply((a: any) => getLoggingServer(a, opts))
}

export interface GetLoggingServerOutputArgs {
    location: pulumi.Input<string>;
    loggingServerId: pulumi.Input<string>;
    privateCloudId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
