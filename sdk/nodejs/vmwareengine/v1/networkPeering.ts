// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new network peering between the peer network and VMware Engine network provided in a `NetworkPeering` resource.
 * Auto-naming is currently not supported for this resource.
 */
export class NetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): NetworkPeering {
        return new NetworkPeering(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:vmwareengine/v1:NetworkPeering';

    /**
     * Returns true if the given object is an instance of NetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPeering.__pulumiType;
    }

    /**
     * Creation time of this resource.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. User-provided description for this network peering.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.
     */
    public readonly exchangeSubnetRoutes!: pulumi.Output<boolean>;
    /**
     * Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
     */
    public readonly exportCustomRoutes!: pulumi.Output<boolean>;
    /**
     * Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
     */
    public readonly exportCustomRoutesWithPublicIp!: pulumi.Output<boolean>;
    /**
     * Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
     */
    public readonly importCustomRoutes!: pulumi.Output<boolean>;
    /**
     * Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
     */
    public readonly importCustomRoutesWithPublicIp!: pulumi.Output<boolean>;
    /**
     * The resource name of the network peering. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/networkPeerings/my-peering`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Required. The user-provided identifier of the new `NetworkPeering`. This identifier must be unique among `NetworkPeering` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
     */
    public readonly networkPeeringId!: pulumi.Output<string>;
    /**
     * Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.
     */
    public readonly peerMtu!: pulumi.Output<number>;
    /**
     * The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.
     */
    public readonly peerNetwork!: pulumi.Output<string>;
    /**
     * The type of the network to peer with the VMware Engine network.
     */
    public readonly peerNetworkType!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    public readonly requestId!: pulumi.Output<string | undefined>;
    /**
     * State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer network. New values may be added to this enum when appropriate.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Output Only. Details about the current state of the network peering.
     */
    public /*out*/ readonly stateDetails!: pulumi.Output<string>;
    /**
     * System-generated unique identifier for the resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Last update time of this resource.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
     */
    public readonly vmwareEngineNetwork!: pulumi.Output<string>;

    /**
     * Create a NetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkPeeringArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.networkPeeringId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkPeeringId'");
            }
            if ((!args || args.peerNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetwork'");
            }
            if ((!args || args.peerNetworkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetworkType'");
            }
            if ((!args || args.vmwareEngineNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmwareEngineNetwork'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["exchangeSubnetRoutes"] = args ? args.exchangeSubnetRoutes : undefined;
            resourceInputs["exportCustomRoutes"] = args ? args.exportCustomRoutes : undefined;
            resourceInputs["exportCustomRoutesWithPublicIp"] = args ? args.exportCustomRoutesWithPublicIp : undefined;
            resourceInputs["importCustomRoutes"] = args ? args.importCustomRoutes : undefined;
            resourceInputs["importCustomRoutesWithPublicIp"] = args ? args.importCustomRoutesWithPublicIp : undefined;
            resourceInputs["networkPeeringId"] = args ? args.networkPeeringId : undefined;
            resourceInputs["peerMtu"] = args ? args.peerMtu : undefined;
            resourceInputs["peerNetwork"] = args ? args.peerNetwork : undefined;
            resourceInputs["peerNetworkType"] = args ? args.peerNetworkType : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["vmwareEngineNetwork"] = args ? args.vmwareEngineNetwork : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["exchangeSubnetRoutes"] = undefined /*out*/;
            resourceInputs["exportCustomRoutes"] = undefined /*out*/;
            resourceInputs["exportCustomRoutesWithPublicIp"] = undefined /*out*/;
            resourceInputs["importCustomRoutes"] = undefined /*out*/;
            resourceInputs["importCustomRoutesWithPublicIp"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkPeeringId"] = undefined /*out*/;
            resourceInputs["peerMtu"] = undefined /*out*/;
            resourceInputs["peerNetwork"] = undefined /*out*/;
            resourceInputs["peerNetworkType"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["vmwareEngineNetwork"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["networkPeeringId", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(NetworkPeering.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a NetworkPeering resource.
 */
export interface NetworkPeeringArgs {
    /**
     * Optional. User-provided description for this network peering.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.
     */
    exchangeSubnetRoutes?: pulumi.Input<boolean>;
    /**
     * Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
     */
    exportCustomRoutes?: pulumi.Input<boolean>;
    /**
     * Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
     */
    exportCustomRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
     */
    importCustomRoutes?: pulumi.Input<boolean>;
    /**
     * Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
     */
    importCustomRoutesWithPublicIp?: pulumi.Input<boolean>;
    /**
     * Required. The user-provided identifier of the new `NetworkPeering`. This identifier must be unique among `NetworkPeering` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
     */
    networkPeeringId: pulumi.Input<string>;
    /**
     * Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.
     */
    peerMtu?: pulumi.Input<number>;
    /**
     * The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.
     */
    peerNetwork: pulumi.Input<string>;
    /**
     * The type of the network to peer with the VMware Engine network.
     */
    peerNetworkType: pulumi.Input<enums.vmwareengine.v1.NetworkPeeringPeerNetworkType>;
    project?: pulumi.Input<string>;
    /**
     * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    requestId?: pulumi.Input<string>;
    /**
     * The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
     */
    vmwareEngineNetwork: pulumi.Input<string>;
}
