// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Create a new logging server for a given private cloud.
 * Auto-naming is currently not supported for this resource.
 */
export class LoggingServer extends pulumi.CustomResource {
    /**
     * Get an existing LoggingServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LoggingServer {
        return new LoggingServer(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:vmwareengine/v1:LoggingServer';

    /**
     * Returns true if the given object is an instance of LoggingServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoggingServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoggingServer.__pulumiType;
    }

    /**
     * Creation time of this resource.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Fully-qualified domain name (FQDN) or IP Address of the logging server.
     */
    public readonly hostname!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Required. The user-provided identifier of the `LoggingServer` to be created. This identifier must be unique among `LoggingServer` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
     */
    public readonly loggingServerId!: pulumi.Output<string>;
    /**
     * The resource name of this logging server. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Port number at which the logging server receives logs.
     */
    public readonly port!: pulumi.Output<number>;
    public readonly privateCloudId!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Protocol used by vCenter to send logs to a logging server.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    public readonly requestId!: pulumi.Output<string | undefined>;
    /**
     * The type of component that produces logs that will be forwarded to this logging server.
     */
    public readonly sourceType!: pulumi.Output<string>;
    /**
     * System-generated unique identifier for the resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Last update time of this resource.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a LoggingServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoggingServerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.loggingServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loggingServerId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.privateCloudId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateCloudId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["loggingServerId"] = args ? args.loggingServerId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["privateCloudId"] = args ? args.privateCloudId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["loggingServerId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["privateCloudId"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["protocol"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "loggingServerId", "privateCloudId", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(LoggingServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LoggingServer resource.
 */
export interface LoggingServerArgs {
    /**
     * Fully-qualified domain name (FQDN) or IP Address of the logging server.
     */
    hostname: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * Required. The user-provided identifier of the `LoggingServer` to be created. This identifier must be unique among `LoggingServer` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
     */
    loggingServerId: pulumi.Input<string>;
    /**
     * Port number at which the logging server receives logs.
     */
    port: pulumi.Input<number>;
    privateCloudId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Protocol used by vCenter to send logs to a logging server.
     */
    protocol: pulumi.Input<enums.vmwareengine.v1.LoggingServerProtocol>;
    /**
     * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    requestId?: pulumi.Input<string>;
    /**
     * The type of component that produces logs that will be forwarded to this logging server.
     */
    sourceType: pulumi.Input<enums.vmwareengine.v1.LoggingServerSourceType>;
}
