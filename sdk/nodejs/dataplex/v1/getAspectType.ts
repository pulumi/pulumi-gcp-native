// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Retrieves a AspectType resource.
 */
export function getAspectType(args: GetAspectTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetAspectTypeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:dataplex/v1:getAspectType", {
        "aspectTypeId": args.aspectTypeId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetAspectTypeArgs {
    aspectTypeId: string;
    location: string;
    project?: string;
}

export interface GetAspectTypeResult {
    /**
     * Immutable. Authorization defined for this type.
     */
    readonly authorization: outputs.dataplex.v1.GoogleCloudDataplexV1AspectTypeAuthorizationResponse;
    /**
     * The time when the AspectType was created.
     */
    readonly createTime: string;
    /**
     * Optional. Description of the AspectType.
     */
    readonly description: string;
    /**
     * Optional. User friendly display name.
     */
    readonly displayName: string;
    /**
     * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     */
    readonly etag: string;
    /**
     * Optional. User-defined labels for the AspectType.
     */
    readonly labels: {[key: string]: string};
    /**
     * MetadataTemplate of the aspect.
     */
    readonly metadataTemplate: outputs.dataplex.v1.GoogleCloudDataplexV1AspectTypeMetadataTemplateResponse;
    /**
     * The relative resource name of the AspectType, of the form: projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}.
     */
    readonly name: string;
    /**
     * Denotes the transfer status of the Aspect Type. It is unspecified for Aspect Types created from Dataplex API.
     */
    readonly transferStatus: string;
    /**
     * System generated globally unique ID for the AspectType. This ID will be different if the AspectType is deleted and re-created with the same name.
     */
    readonly uid: string;
    /**
     * The time when the AspectType was last updated.
     */
    readonly updateTime: string;
}
/**
 * Retrieves a AspectType resource.
 */
export function getAspectTypeOutput(args: GetAspectTypeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAspectTypeResult> {
    return pulumi.output(args).apply((a: any) => getAspectType(a, opts))
}

export interface GetAspectTypeOutputArgs {
    aspectTypeId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
