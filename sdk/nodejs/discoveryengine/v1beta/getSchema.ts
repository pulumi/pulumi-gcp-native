// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets a Schema.
 */
export function getSchema(args: GetSchemaArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:discoveryengine/v1beta:getSchema", {
        "collectionId": args.collectionId,
        "dataStoreId": args.dataStoreId,
        "location": args.location,
        "project": args.project,
        "schemaId": args.schemaId,
    }, opts);
}

export interface GetSchemaArgs {
    collectionId: string;
    dataStoreId: string;
    location: string;
    project?: string;
    schemaId: string;
}

export interface GetSchemaResult {
    /**
     * The JSON representation of the schema.
     */
    readonly jsonSchema: string;
    /**
     * Immutable. The full resource name of the schema, in the format of `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
     */
    readonly name: string;
    /**
     * The structured representation of the schema.
     */
    readonly structSchema: {[key: string]: any};
}
/**
 * Gets a Schema.
 */
export function getSchemaOutput(args: GetSchemaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaResult> {
    return pulumi.output(args).apply((a: any) => getSchema(a, opts))
}

export interface GetSchemaOutputArgs {
    collectionId: pulumi.Input<string>;
    dataStoreId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
}
