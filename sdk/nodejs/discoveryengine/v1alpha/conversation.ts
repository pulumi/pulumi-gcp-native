// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned.
 * Auto-naming is currently not supported for this resource.
 */
export class Conversation extends pulumi.CustomResource {
    /**
     * Get an existing Conversation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Conversation {
        return new Conversation(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:discoveryengine/v1alpha:Conversation';

    /**
     * Returns true if the given object is an instance of Conversation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Conversation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Conversation.__pulumiType;
    }

    public readonly collectionId!: pulumi.Output<string>;
    public readonly dataStoreId!: pulumi.Output<string>;
    /**
     * The time the conversation finished.
     */
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Conversation messages.
     */
    public readonly messages!: pulumi.Output<outputs.discoveryengine.v1alpha.GoogleCloudDiscoveryengineV1alphaConversationMessageResponse[]>;
    /**
     * Immutable. Fully qualified name `project/*&#47;locations/global/collections/{collection}/dataStore/*&#47;conversations/*`
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * The time the conversation started.
     */
    public /*out*/ readonly startTime!: pulumi.Output<string>;
    /**
     * The state of the Conversation.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * A unique identifier for tracking users.
     */
    public readonly userPseudoId!: pulumi.Output<string>;

    /**
     * Create a Conversation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConversationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.collectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectionId'");
            }
            if ((!args || args.dataStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataStoreId'");
            }
            resourceInputs["collectionId"] = args ? args.collectionId : undefined;
            resourceInputs["dataStoreId"] = args ? args.dataStoreId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["messages"] = args ? args.messages : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["userPseudoId"] = args ? args.userPseudoId : undefined;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
        } else {
            resourceInputs["collectionId"] = undefined /*out*/;
            resourceInputs["dataStoreId"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["messages"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["userPseudoId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["collectionId", "dataStoreId", "location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Conversation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Conversation resource.
 */
export interface ConversationArgs {
    collectionId: pulumi.Input<string>;
    dataStoreId: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * Conversation messages.
     */
    messages?: pulumi.Input<pulumi.Input<inputs.discoveryengine.v1alpha.GoogleCloudDiscoveryengineV1alphaConversationMessageArgs>[]>;
    /**
     * Immutable. Fully qualified name `project/*&#47;locations/global/collections/{collection}/dataStore/*&#47;conversations/*`
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The state of the Conversation.
     */
    state?: pulumi.Input<enums.discoveryengine.v1alpha.ConversationState>;
    /**
     * A unique identifier for tracking users.
     */
    userPseudoId?: pulumi.Input<string>;
}
