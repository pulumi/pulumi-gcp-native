// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * GetApiSpec returns a specified spec.
 */
export function getSpec(args: GetSpecArgs, opts?: pulumi.InvokeOptions): Promise<GetSpecResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:apigeeregistry/v1:getSpec", {
        "apiId": args.apiId,
        "location": args.location,
        "project": args.project,
        "specId": args.specId,
        "versionId": args.versionId,
    }, opts);
}

export interface GetSpecArgs {
    apiId: string;
    location: string;
    project?: string;
    specId: string;
    versionId: string;
}

export interface GetSpecResult {
    /**
     * Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
     */
    readonly annotations: {[key: string]: string};
    /**
     * Input only. The contents of the spec. Provided by API callers when specs are created or updated. To access the contents of a spec, use GetApiSpecContents.
     */
    readonly contents: string;
    /**
     * Creation timestamp; when the spec resource was created.
     */
    readonly createTime: string;
    /**
     * A detailed description.
     */
    readonly description: string;
    /**
     * A possibly-hierarchical name used to refer to the spec from other specs.
     */
    readonly filename: string;
    /**
     * A SHA-256 hash of the spec's contents. If the spec is gzipped, this is the hash of the uncompressed spec.
     */
    readonly hash: string;
    /**
     * Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "apigeeregistry.googleapis.com/" and cannot be changed.
     */
    readonly labels: {[key: string]: string};
    /**
     * A style (format) descriptor for this spec that is specified as a Media Type (https://en.wikipedia.org/wiki/Media_type). Possible values include "application/vnd.apigee.proto", "application/vnd.apigee.openapi", and "application/vnd.apigee.graphql", with possible suffixes representing compression types. These hypothetical names are defined in the vendor tree defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
     */
    readonly mimeType: string;
    /**
     * Resource name.
     */
    readonly name: string;
    /**
     * Revision creation timestamp; when the represented revision was created.
     */
    readonly revisionCreateTime: string;
    /**
     * Immutable. The revision ID of the spec. A new revision is committed whenever the spec contents are changed. The format is an 8-character hexadecimal string.
     */
    readonly revisionId: string;
    /**
     * Last update timestamp: when the represented revision was last modified.
     */
    readonly revisionUpdateTime: string;
    /**
     * The size of the spec file in bytes. If the spec is gzipped, this is the size of the uncompressed spec.
     */
    readonly sizeBytes: number;
    /**
     * The original source URI of the spec (if one exists). This is an external location that can be used for reference purposes but which may not be authoritative since this external resource may change after the spec is retrieved.
     */
    readonly sourceUri: string;
}

export function getSpecOutput(args: GetSpecOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSpecResult> {
    return pulumi.output(args).apply(a => getSpec(a, opts))
}

export interface GetSpecOutputArgs {
    apiId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    specId: pulumi.Input<string>;
    versionId: pulumi.Input<string>;
}
