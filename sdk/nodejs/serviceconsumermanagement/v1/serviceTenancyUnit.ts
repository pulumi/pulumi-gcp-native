// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Creates a tenancy unit with no tenant resources. If tenancy unit already exists, it will be returned, however, in this case, returned TenancyUnit does not have tenant_resources field set and ListTenancyUnits has to be used to get a complete TenancyUnit with all fields populated.
 */
export class ServiceTenancyUnit extends pulumi.CustomResource {
    /**
     * Get an existing ServiceTenancyUnit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ServiceTenancyUnit {
        return new ServiceTenancyUnit(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:serviceconsumermanagement/v1:ServiceTenancyUnit';

    /**
     * Returns true if the given object is an instance of ServiceTenancyUnit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceTenancyUnit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceTenancyUnit.__pulumiType;
    }


    /**
     * Create a ServiceTenancyUnit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceTenancyUnitArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.servicesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicesId'");
            }
            if ((!args || args.servicesId1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicesId1'");
            }
            if ((!args || args.servicesId2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicesId2'");
            }
            if ((!args || args.tenancyUnitsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenancyUnitsId'");
            }
            inputs["servicesId"] = args ? args.servicesId : undefined;
            inputs["servicesId1"] = args ? args.servicesId1 : undefined;
            inputs["servicesId2"] = args ? args.servicesId2 : undefined;
            inputs["tenancyUnitId"] = args ? args.tenancyUnitId : undefined;
            inputs["tenancyUnitsId"] = args ? args.tenancyUnitsId : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ServiceTenancyUnit.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a ServiceTenancyUnit resource.
 */
export interface ServiceTenancyUnitArgs {
    readonly servicesId: pulumi.Input<string>;
    readonly servicesId1: pulumi.Input<string>;
    readonly servicesId2: pulumi.Input<string>;
    /**
     * Optional. Optional service producer-provided identifier of the tenancy unit. Must be no longer than 40 characters and preferably URI friendly. If it isn't provided, a UID for the tenancy unit is automatically generated. The identifier must be unique across a managed service. If the tenancy unit already exists for the managed service and service consumer pair, calling `CreateTenancyUnit` returns the existing tenancy unit if the provided identifier is identical or empty, otherwise the call fails.
     */
    readonly tenancyUnitId?: pulumi.Input<string>;
    readonly tenancyUnitsId: pulumi.Input<string>;
}
