// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Creates a producer override. A producer override is applied by the owner or administrator of a service to increase or decrease the amount of quota a consumer of the service is allowed to use. To create multiple overrides at once, use ImportProducerOverrides instead. If an override with the specified dimensions already exists, this call will fail. To overwrite an existing override if one is already present ("upsert" semantics), use ImportProducerOverrides instead.
 */
export class ServiceConsumerQuotaMetricLimitProducerOverride extends pulumi.CustomResource {
    /**
     * Get an existing ServiceConsumerQuotaMetricLimitProducerOverride resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ServiceConsumerQuotaMetricLimitProducerOverride {
        return new ServiceConsumerQuotaMetricLimitProducerOverride(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-cloud:serviceconsumermanagement/v1beta1:ServiceConsumerQuotaMetricLimitProducerOverride';

    /**
     * Returns true if the given object is an instance of ServiceConsumerQuotaMetricLimitProducerOverride.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceConsumerQuotaMetricLimitProducerOverride {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceConsumerQuotaMetricLimitProducerOverride.__pulumiType;
    }


    /**
     * Create a ServiceConsumerQuotaMetricLimitProducerOverride resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceConsumerQuotaMetricLimitProducerOverrideArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.consumerQuotaMetricsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerQuotaMetricsId'");
            }
            if ((!args || args.limitsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'limitsId'");
            }
            if ((!args || args.producerOverridesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'producerOverridesId'");
            }
            if ((!args || args.servicesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicesId'");
            }
            if ((!args || args.servicesId1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicesId1'");
            }
            if ((!args || args.servicesId2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicesId2'");
            }
            inputs["adminOverrideAncestor"] = args ? args.adminOverrideAncestor : undefined;
            inputs["consumerQuotaMetricsId"] = args ? args.consumerQuotaMetricsId : undefined;
            inputs["dimensions"] = args ? args.dimensions : undefined;
            inputs["limitsId"] = args ? args.limitsId : undefined;
            inputs["metric"] = args ? args.metric : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["overrideValue"] = args ? args.overrideValue : undefined;
            inputs["producerOverridesId"] = args ? args.producerOverridesId : undefined;
            inputs["servicesId"] = args ? args.servicesId : undefined;
            inputs["servicesId1"] = args ? args.servicesId1 : undefined;
            inputs["servicesId2"] = args ? args.servicesId2 : undefined;
            inputs["unit"] = args ? args.unit : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ServiceConsumerQuotaMetricLimitProducerOverride.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a ServiceConsumerQuotaMetricLimitProducerOverride resource.
 */
export interface ServiceConsumerQuotaMetricLimitProducerOverrideArgs {
    /**
     * The resource name of the ancestor that requested the override. For example: "organizations/12345" or "folders/67890". Used by admin overrides only.
     */
    readonly adminOverrideAncestor?: pulumi.Input<string>;
    readonly consumerQuotaMetricsId: pulumi.Input<string>;
    /**
     *  If this map is nonempty, then this override applies only to specific values for dimensions defined in the limit unit. For example, an override on a limit with the unit 1/{project}/{region} could contain an entry with the key "region" and the value "us-east-1"; the override is only applied to quota consumed in that region. This map has the following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in {brackets} in the unit (besides {project} or {user}) is a defined key. * "project" is not a valid key; the project is already specified in the parent resource name. * "user" is not a valid key; the API does not support quota overrides that apply only to a specific user. * If "region" appears as a key, its value must be a valid Cloud region. * If "zone" appears as a key, its value must be a valid Cloud zone. * If any valid key other than "region" or "zone" appears in the map, then all valid keys other than "region" or "zone" must also appear in the map.
     */
    readonly dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly limitsId: pulumi.Input<string>;
    /**
     * The name of the metric to which this override applies. An example name would be: `compute.googleapis.com/cpus`
     */
    readonly metric?: pulumi.Input<string>;
    /**
     * The resource name of the producer override. An example name would be: `services/compute.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/producerOverrides/4a3f2c1d`
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).
     */
    readonly overrideValue?: pulumi.Input<string>;
    readonly producerOverridesId: pulumi.Input<string>;
    readonly servicesId: pulumi.Input<string>;
    readonly servicesId1: pulumi.Input<string>;
    readonly servicesId2: pulumi.Input<string>;
    /**
     * The limit unit of the limit to which this override applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.
     */
    readonly unit?: pulumi.Input<string>;
}
