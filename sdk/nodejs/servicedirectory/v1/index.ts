// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { EndpointArgs } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { GetEndpointArgs, GetEndpointResult, GetEndpointOutputArgs } from "./getEndpoint";
export const getEndpoint: typeof import("./getEndpoint").getEndpoint = null as any;
export const getEndpointOutput: typeof import("./getEndpoint").getEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEndpoint","getEndpointOutput"], () => require("./getEndpoint"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { GetNamespaceIamPolicyArgs, GetNamespaceIamPolicyResult, GetNamespaceIamPolicyOutputArgs } from "./getNamespaceIamPolicy";
export const getNamespaceIamPolicy: typeof import("./getNamespaceIamPolicy").getNamespaceIamPolicy = null as any;
export const getNamespaceIamPolicyOutput: typeof import("./getNamespaceIamPolicy").getNamespaceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNamespaceIamPolicy","getNamespaceIamPolicyOutput"], () => require("./getNamespaceIamPolicy"));

export { GetNamespaceServiceIamPolicyArgs, GetNamespaceServiceIamPolicyResult, GetNamespaceServiceIamPolicyOutputArgs } from "./getNamespaceServiceIamPolicy";
export const getNamespaceServiceIamPolicy: typeof import("./getNamespaceServiceIamPolicy").getNamespaceServiceIamPolicy = null as any;
export const getNamespaceServiceIamPolicyOutput: typeof import("./getNamespaceServiceIamPolicy").getNamespaceServiceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNamespaceServiceIamPolicy","getNamespaceServiceIamPolicyOutput"], () => require("./getNamespaceServiceIamPolicy"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { NamespaceArgs } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NamespaceIamBindingArgs } from "./namespaceIamBinding";
export type NamespaceIamBinding = import("./namespaceIamBinding").NamespaceIamBinding;
export const NamespaceIamBinding: typeof import("./namespaceIamBinding").NamespaceIamBinding = null as any;
utilities.lazyLoad(exports, ["NamespaceIamBinding"], () => require("./namespaceIamBinding"));

export { NamespaceIamMemberArgs } from "./namespaceIamMember";
export type NamespaceIamMember = import("./namespaceIamMember").NamespaceIamMember;
export const NamespaceIamMember: typeof import("./namespaceIamMember").NamespaceIamMember = null as any;
utilities.lazyLoad(exports, ["NamespaceIamMember"], () => require("./namespaceIamMember"));

export { NamespaceIamPolicyArgs } from "./namespaceIamPolicy";
export type NamespaceIamPolicy = import("./namespaceIamPolicy").NamespaceIamPolicy;
export const NamespaceIamPolicy: typeof import("./namespaceIamPolicy").NamespaceIamPolicy = null as any;
utilities.lazyLoad(exports, ["NamespaceIamPolicy"], () => require("./namespaceIamPolicy"));

export { NamespaceServiceIamBindingArgs } from "./namespaceServiceIamBinding";
export type NamespaceServiceIamBinding = import("./namespaceServiceIamBinding").NamespaceServiceIamBinding;
export const NamespaceServiceIamBinding: typeof import("./namespaceServiceIamBinding").NamespaceServiceIamBinding = null as any;
utilities.lazyLoad(exports, ["NamespaceServiceIamBinding"], () => require("./namespaceServiceIamBinding"));

export { NamespaceServiceIamMemberArgs } from "./namespaceServiceIamMember";
export type NamespaceServiceIamMember = import("./namespaceServiceIamMember").NamespaceServiceIamMember;
export const NamespaceServiceIamMember: typeof import("./namespaceServiceIamMember").NamespaceServiceIamMember = null as any;
utilities.lazyLoad(exports, ["NamespaceServiceIamMember"], () => require("./namespaceServiceIamMember"));

export { NamespaceServiceIamPolicyArgs } from "./namespaceServiceIamPolicy";
export type NamespaceServiceIamPolicy = import("./namespaceServiceIamPolicy").NamespaceServiceIamPolicy;
export const NamespaceServiceIamPolicy: typeof import("./namespaceServiceIamPolicy").NamespaceServiceIamPolicy = null as any;
utilities.lazyLoad(exports, ["NamespaceServiceIamPolicy"], () => require("./namespaceServiceIamPolicy"));

export { ServiceArgs } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:servicedirectory/v1:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "google-native:servicedirectory/v1:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "google-native:servicedirectory/v1:NamespaceIamBinding":
                return new NamespaceIamBinding(name, <any>undefined, { urn })
            case "google-native:servicedirectory/v1:NamespaceIamMember":
                return new NamespaceIamMember(name, <any>undefined, { urn })
            case "google-native:servicedirectory/v1:NamespaceIamPolicy":
                return new NamespaceIamPolicy(name, <any>undefined, { urn })
            case "google-native:servicedirectory/v1:NamespaceServiceIamBinding":
                return new NamespaceServiceIamBinding(name, <any>undefined, { urn })
            case "google-native:servicedirectory/v1:NamespaceServiceIamMember":
                return new NamespaceServiceIamMember(name, <any>undefined, { urn })
            case "google-native:servicedirectory/v1:NamespaceServiceIamPolicy":
                return new NamespaceServiceIamPolicy(name, <any>undefined, { urn })
            case "google-native:servicedirectory/v1:Service":
                return new Service(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "servicedirectory/v1", _module)
