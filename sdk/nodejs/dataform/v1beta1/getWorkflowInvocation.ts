// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Fetches a single WorkflowInvocation.
 */
export function getWorkflowInvocation(args: GetWorkflowInvocationArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkflowInvocationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:dataform/v1beta1:getWorkflowInvocation", {
        "location": args.location,
        "project": args.project,
        "repositoryId": args.repositoryId,
        "workflowInvocationId": args.workflowInvocationId,
    }, opts);
}

export interface GetWorkflowInvocationArgs {
    location: string;
    project?: string;
    repositoryId: string;
    workflowInvocationId: string;
}

export interface GetWorkflowInvocationResult {
    /**
     * Immutable. The name of the compilation result to compile. Must be in the format `projects/*&#47;locations/*&#47;repositories/*&#47;compilationResults/*`.
     */
    readonly compilationResult: string;
    /**
     * Immutable. If left unset, a default InvocationConfig will be used.
     */
    readonly invocationConfig: outputs.dataform.v1beta1.InvocationConfigResponse;
    /**
     * This workflow invocation's timing details.
     */
    readonly invocationTiming: outputs.dataform.v1beta1.IntervalResponse;
    /**
     * The workflow invocation's name.
     */
    readonly name: string;
    /**
     * This workflow invocation's current state.
     */
    readonly state: string;
    /**
     * Immutable. The name of the workflow config to invoke. Must be in the format `projects/*&#47;locations/*&#47;repositories/*&#47;workflowConfigs/*`.
     */
    readonly workflowConfig: string;
}
/**
 * Fetches a single WorkflowInvocation.
 */
export function getWorkflowInvocationOutput(args: GetWorkflowInvocationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkflowInvocationResult> {
    return pulumi.output(args).apply((a: any) => getWorkflowInvocation(a, opts))
}

export interface GetWorkflowInvocationOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    repositoryId: pulumi.Input<string>;
    workflowInvocationId: pulumi.Input<string>;
}
