// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { CollectionIamBindingArgs } from "./collectionIamBinding";
export type CollectionIamBinding = import("./collectionIamBinding").CollectionIamBinding;
export const CollectionIamBinding: typeof import("./collectionIamBinding").CollectionIamBinding = null as any;
utilities.lazyLoad(exports, ["CollectionIamBinding"], () => require("./collectionIamBinding"));

export { CollectionIamMemberArgs } from "./collectionIamMember";
export type CollectionIamMember = import("./collectionIamMember").CollectionIamMember;
export const CollectionIamMember: typeof import("./collectionIamMember").CollectionIamMember = null as any;
utilities.lazyLoad(exports, ["CollectionIamMember"], () => require("./collectionIamMember"));

export { CollectionIamPolicyArgs } from "./collectionIamPolicy";
export type CollectionIamPolicy = import("./collectionIamPolicy").CollectionIamPolicy;
export const CollectionIamPolicy: typeof import("./collectionIamPolicy").CollectionIamPolicy = null as any;
utilities.lazyLoad(exports, ["CollectionIamPolicy"], () => require("./collectionIamPolicy"));

export { CompilationResultArgs } from "./compilationResult";
export type CompilationResult = import("./compilationResult").CompilationResult;
export const CompilationResult: typeof import("./compilationResult").CompilationResult = null as any;
utilities.lazyLoad(exports, ["CompilationResult"], () => require("./compilationResult"));

export { GetCollectionIamPolicyArgs, GetCollectionIamPolicyResult, GetCollectionIamPolicyOutputArgs } from "./getCollectionIamPolicy";
export const getCollectionIamPolicy: typeof import("./getCollectionIamPolicy").getCollectionIamPolicy = null as any;
export const getCollectionIamPolicyOutput: typeof import("./getCollectionIamPolicy").getCollectionIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCollectionIamPolicy","getCollectionIamPolicyOutput"], () => require("./getCollectionIamPolicy"));

export { GetCompilationResultArgs, GetCompilationResultResult, GetCompilationResultOutputArgs } from "./getCompilationResult";
export const getCompilationResult: typeof import("./getCompilationResult").getCompilationResult = null as any;
export const getCompilationResultOutput: typeof import("./getCompilationResult").getCompilationResultOutput = null as any;
utilities.lazyLoad(exports, ["getCompilationResult","getCompilationResultOutput"], () => require("./getCompilationResult"));

export { GetReleaseConfigArgs, GetReleaseConfigResult, GetReleaseConfigOutputArgs } from "./getReleaseConfig";
export const getReleaseConfig: typeof import("./getReleaseConfig").getReleaseConfig = null as any;
export const getReleaseConfigOutput: typeof import("./getReleaseConfig").getReleaseConfigOutput = null as any;
utilities.lazyLoad(exports, ["getReleaseConfig","getReleaseConfigOutput"], () => require("./getReleaseConfig"));

export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));

export { GetRepositoryIamPolicyArgs, GetRepositoryIamPolicyResult, GetRepositoryIamPolicyOutputArgs } from "./getRepositoryIamPolicy";
export const getRepositoryIamPolicy: typeof import("./getRepositoryIamPolicy").getRepositoryIamPolicy = null as any;
export const getRepositoryIamPolicyOutput: typeof import("./getRepositoryIamPolicy").getRepositoryIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryIamPolicy","getRepositoryIamPolicyOutput"], () => require("./getRepositoryIamPolicy"));

export { GetRepositoryWorkspaceIamPolicyArgs, GetRepositoryWorkspaceIamPolicyResult, GetRepositoryWorkspaceIamPolicyOutputArgs } from "./getRepositoryWorkspaceIamPolicy";
export const getRepositoryWorkspaceIamPolicy: typeof import("./getRepositoryWorkspaceIamPolicy").getRepositoryWorkspaceIamPolicy = null as any;
export const getRepositoryWorkspaceIamPolicyOutput: typeof import("./getRepositoryWorkspaceIamPolicy").getRepositoryWorkspaceIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryWorkspaceIamPolicy","getRepositoryWorkspaceIamPolicyOutput"], () => require("./getRepositoryWorkspaceIamPolicy"));

export { GetWorkflowConfigArgs, GetWorkflowConfigResult, GetWorkflowConfigOutputArgs } from "./getWorkflowConfig";
export const getWorkflowConfig: typeof import("./getWorkflowConfig").getWorkflowConfig = null as any;
export const getWorkflowConfigOutput: typeof import("./getWorkflowConfig").getWorkflowConfigOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowConfig","getWorkflowConfigOutput"], () => require("./getWorkflowConfig"));

export { GetWorkflowInvocationArgs, GetWorkflowInvocationResult, GetWorkflowInvocationOutputArgs } from "./getWorkflowInvocation";
export const getWorkflowInvocation: typeof import("./getWorkflowInvocation").getWorkflowInvocation = null as any;
export const getWorkflowInvocationOutput: typeof import("./getWorkflowInvocation").getWorkflowInvocationOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowInvocation","getWorkflowInvocationOutput"], () => require("./getWorkflowInvocation"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { ReleaseConfigArgs } from "./releaseConfig";
export type ReleaseConfig = import("./releaseConfig").ReleaseConfig;
export const ReleaseConfig: typeof import("./releaseConfig").ReleaseConfig = null as any;
utilities.lazyLoad(exports, ["ReleaseConfig"], () => require("./releaseConfig"));

export { RepositoryArgs } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { RepositoryIamBindingArgs } from "./repositoryIamBinding";
export type RepositoryIamBinding = import("./repositoryIamBinding").RepositoryIamBinding;
export const RepositoryIamBinding: typeof import("./repositoryIamBinding").RepositoryIamBinding = null as any;
utilities.lazyLoad(exports, ["RepositoryIamBinding"], () => require("./repositoryIamBinding"));

export { RepositoryIamMemberArgs } from "./repositoryIamMember";
export type RepositoryIamMember = import("./repositoryIamMember").RepositoryIamMember;
export const RepositoryIamMember: typeof import("./repositoryIamMember").RepositoryIamMember = null as any;
utilities.lazyLoad(exports, ["RepositoryIamMember"], () => require("./repositoryIamMember"));

export { RepositoryIamPolicyArgs } from "./repositoryIamPolicy";
export type RepositoryIamPolicy = import("./repositoryIamPolicy").RepositoryIamPolicy;
export const RepositoryIamPolicy: typeof import("./repositoryIamPolicy").RepositoryIamPolicy = null as any;
utilities.lazyLoad(exports, ["RepositoryIamPolicy"], () => require("./repositoryIamPolicy"));

export { RepositoryWorkspaceIamBindingArgs } from "./repositoryWorkspaceIamBinding";
export type RepositoryWorkspaceIamBinding = import("./repositoryWorkspaceIamBinding").RepositoryWorkspaceIamBinding;
export const RepositoryWorkspaceIamBinding: typeof import("./repositoryWorkspaceIamBinding").RepositoryWorkspaceIamBinding = null as any;
utilities.lazyLoad(exports, ["RepositoryWorkspaceIamBinding"], () => require("./repositoryWorkspaceIamBinding"));

export { RepositoryWorkspaceIamMemberArgs } from "./repositoryWorkspaceIamMember";
export type RepositoryWorkspaceIamMember = import("./repositoryWorkspaceIamMember").RepositoryWorkspaceIamMember;
export const RepositoryWorkspaceIamMember: typeof import("./repositoryWorkspaceIamMember").RepositoryWorkspaceIamMember = null as any;
utilities.lazyLoad(exports, ["RepositoryWorkspaceIamMember"], () => require("./repositoryWorkspaceIamMember"));

export { RepositoryWorkspaceIamPolicyArgs } from "./repositoryWorkspaceIamPolicy";
export type RepositoryWorkspaceIamPolicy = import("./repositoryWorkspaceIamPolicy").RepositoryWorkspaceIamPolicy;
export const RepositoryWorkspaceIamPolicy: typeof import("./repositoryWorkspaceIamPolicy").RepositoryWorkspaceIamPolicy = null as any;
utilities.lazyLoad(exports, ["RepositoryWorkspaceIamPolicy"], () => require("./repositoryWorkspaceIamPolicy"));

export { WorkflowConfigArgs } from "./workflowConfig";
export type WorkflowConfig = import("./workflowConfig").WorkflowConfig;
export const WorkflowConfig: typeof import("./workflowConfig").WorkflowConfig = null as any;
utilities.lazyLoad(exports, ["WorkflowConfig"], () => require("./workflowConfig"));

export { WorkflowInvocationArgs } from "./workflowInvocation";
export type WorkflowInvocation = import("./workflowInvocation").WorkflowInvocation;
export const WorkflowInvocation: typeof import("./workflowInvocation").WorkflowInvocation = null as any;
utilities.lazyLoad(exports, ["WorkflowInvocation"], () => require("./workflowInvocation"));

export { WorkspaceArgs } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:dataform/v1beta1:CollectionIamBinding":
                return new CollectionIamBinding(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:CollectionIamMember":
                return new CollectionIamMember(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:CollectionIamPolicy":
                return new CollectionIamPolicy(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:CompilationResult":
                return new CompilationResult(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:ReleaseConfig":
                return new ReleaseConfig(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:RepositoryIamBinding":
                return new RepositoryIamBinding(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:RepositoryIamMember":
                return new RepositoryIamMember(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:RepositoryIamPolicy":
                return new RepositoryIamPolicy(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:RepositoryWorkspaceIamBinding":
                return new RepositoryWorkspaceIamBinding(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:RepositoryWorkspaceIamMember":
                return new RepositoryWorkspaceIamMember(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:RepositoryWorkspaceIamPolicy":
                return new RepositoryWorkspaceIamPolicy(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:WorkflowConfig":
                return new WorkflowConfig(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:WorkflowInvocation":
                return new WorkflowInvocation(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "dataform/v1beta1", _module)
