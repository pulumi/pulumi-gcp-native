// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { CompilationResultArgs } from "./compilationResult";
export type CompilationResult = import("./compilationResult").CompilationResult;
export const CompilationResult: typeof import("./compilationResult").CompilationResult = null as any;
utilities.lazyLoad(exports, ["CompilationResult"], () => require("./compilationResult"));

export { GetCompilationResultArgs, GetCompilationResultResult, GetCompilationResultOutputArgs } from "./getCompilationResult";
export const getCompilationResult: typeof import("./getCompilationResult").getCompilationResult = null as any;
export const getCompilationResultOutput: typeof import("./getCompilationResult").getCompilationResultOutput = null as any;
utilities.lazyLoad(exports, ["getCompilationResult","getCompilationResultOutput"], () => require("./getCompilationResult"));

export { GetReleaseConfigArgs, GetReleaseConfigResult, GetReleaseConfigOutputArgs } from "./getReleaseConfig";
export const getReleaseConfig: typeof import("./getReleaseConfig").getReleaseConfig = null as any;
export const getReleaseConfigOutput: typeof import("./getReleaseConfig").getReleaseConfigOutput = null as any;
utilities.lazyLoad(exports, ["getReleaseConfig","getReleaseConfigOutput"], () => require("./getReleaseConfig"));

export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));

export { GetWorkflowConfigArgs, GetWorkflowConfigResult, GetWorkflowConfigOutputArgs } from "./getWorkflowConfig";
export const getWorkflowConfig: typeof import("./getWorkflowConfig").getWorkflowConfig = null as any;
export const getWorkflowConfigOutput: typeof import("./getWorkflowConfig").getWorkflowConfigOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowConfig","getWorkflowConfigOutput"], () => require("./getWorkflowConfig"));

export { GetWorkflowInvocationArgs, GetWorkflowInvocationResult, GetWorkflowInvocationOutputArgs } from "./getWorkflowInvocation";
export const getWorkflowInvocation: typeof import("./getWorkflowInvocation").getWorkflowInvocation = null as any;
export const getWorkflowInvocationOutput: typeof import("./getWorkflowInvocation").getWorkflowInvocationOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowInvocation","getWorkflowInvocationOutput"], () => require("./getWorkflowInvocation"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { ReleaseConfigArgs } from "./releaseConfig";
export type ReleaseConfig = import("./releaseConfig").ReleaseConfig;
export const ReleaseConfig: typeof import("./releaseConfig").ReleaseConfig = null as any;
utilities.lazyLoad(exports, ["ReleaseConfig"], () => require("./releaseConfig"));

export { RepositoryArgs } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { WorkflowConfigArgs } from "./workflowConfig";
export type WorkflowConfig = import("./workflowConfig").WorkflowConfig;
export const WorkflowConfig: typeof import("./workflowConfig").WorkflowConfig = null as any;
utilities.lazyLoad(exports, ["WorkflowConfig"], () => require("./workflowConfig"));

export { WorkflowInvocationArgs } from "./workflowInvocation";
export type WorkflowInvocation = import("./workflowInvocation").WorkflowInvocation;
export const WorkflowInvocation: typeof import("./workflowInvocation").WorkflowInvocation = null as any;
utilities.lazyLoad(exports, ["WorkflowInvocation"], () => require("./workflowInvocation"));

export { WorkspaceArgs } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:dataform/v1beta1:CompilationResult":
                return new CompilationResult(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:ReleaseConfig":
                return new ReleaseConfig(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:WorkflowConfig":
                return new WorkflowConfig(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:WorkflowInvocation":
                return new WorkflowInvocation(name, <any>undefined, { urn })
            case "google-native:dataform/v1beta1:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "dataform/v1beta1", _module)
