// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new CompilationResult in a given project and location.
 * Auto-naming is currently not supported for this resource.
 * Note - this resource's API doesn't support deletion. When deleted, the resource will persist
 * on Google Cloud even though it will be deleted from Pulumi state.
 */
export class CompilationResult extends pulumi.CustomResource {
    /**
     * Get an existing CompilationResult resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CompilationResult {
        return new CompilationResult(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:dataform/v1beta1:CompilationResult';

    /**
     * Returns true if the given object is an instance of CompilationResult.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CompilationResult {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CompilationResult.__pulumiType;
    }

    /**
     * Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
     */
    public readonly codeCompilationConfig!: pulumi.Output<outputs.dataform.v1beta1.CodeCompilationConfigResponse>;
    /**
     * Errors encountered during project compilation.
     */
    public /*out*/ readonly compilationErrors!: pulumi.Output<outputs.dataform.v1beta1.CompilationErrorResponse[]>;
    /**
     * The version of `@dataform/core` that was used for compilation.
     */
    public /*out*/ readonly dataformCoreVersion!: pulumi.Output<string>;
    /**
     * Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
     */
    public readonly gitCommitish!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * The compilation result's name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*&#47;locations/*&#47;repositories/*&#47;releaseConfigs/*`.
     */
    public readonly releaseConfig!: pulumi.Output<string>;
    public readonly repositoryId!: pulumi.Output<string>;
    /**
     * The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.
     */
    public /*out*/ readonly resolvedGitCommitSha!: pulumi.Output<string>;
    /**
     * Immutable. The name of the workspace to compile. Must be in the format `projects/*&#47;locations/*&#47;repositories/*&#47;workspaces/*`.
     */
    public readonly workspace!: pulumi.Output<string>;

    /**
     * Create a CompilationResult resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CompilationResultArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.repositoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryId'");
            }
            resourceInputs["codeCompilationConfig"] = args ? args.codeCompilationConfig : undefined;
            resourceInputs["gitCommitish"] = args ? args.gitCommitish : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["releaseConfig"] = args ? args.releaseConfig : undefined;
            resourceInputs["repositoryId"] = args ? args.repositoryId : undefined;
            resourceInputs["workspace"] = args ? args.workspace : undefined;
            resourceInputs["compilationErrors"] = undefined /*out*/;
            resourceInputs["dataformCoreVersion"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resolvedGitCommitSha"] = undefined /*out*/;
        } else {
            resourceInputs["codeCompilationConfig"] = undefined /*out*/;
            resourceInputs["compilationErrors"] = undefined /*out*/;
            resourceInputs["dataformCoreVersion"] = undefined /*out*/;
            resourceInputs["gitCommitish"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["releaseConfig"] = undefined /*out*/;
            resourceInputs["repositoryId"] = undefined /*out*/;
            resourceInputs["resolvedGitCommitSha"] = undefined /*out*/;
            resourceInputs["workspace"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project", "repositoryId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CompilationResult.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CompilationResult resource.
 */
export interface CompilationResultArgs {
    /**
     * Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
     */
    codeCompilationConfig?: pulumi.Input<inputs.dataform.v1beta1.CodeCompilationConfigArgs>;
    /**
     * Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
     */
    gitCommitish?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*&#47;locations/*&#47;repositories/*&#47;releaseConfigs/*`.
     */
    releaseConfig?: pulumi.Input<string>;
    repositoryId: pulumi.Input<string>;
    /**
     * Immutable. The name of the workspace to compile. Must be in the format `projects/*&#47;locations/*&#47;repositories/*&#47;workspaces/*`.
     */
    workspace?: pulumi.Input<string>;
}
