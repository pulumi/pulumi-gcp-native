// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Get the specified version that has been created for the specified site. This can include versions that were created for the default `live` channel or for any active preview channels for the specified site.
 */
export function getVersion(args: GetVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetVersionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:firebasehosting/v1beta1:getVersion", {
        "project": args.project,
        "siteId": args.siteId,
        "versionId": args.versionId,
    }, opts);
}

export interface GetVersionArgs {
    project?: string;
    siteId: string;
    versionId: string;
}

export interface GetVersionResult {
    /**
     * The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
     */
    readonly config: outputs.firebasehosting.v1beta1.ServingConfigResponse;
    /**
     * The time at which the version was created.
     */
    readonly createTime: string;
    /**
     * Identifies the user who created the version.
     */
    readonly createUser: outputs.firebasehosting.v1beta1.ActingUserResponse;
    /**
     * The time at which the version was `DELETED`.
     */
    readonly deleteTime: string;
    /**
     * Identifies the user who `DELETED` the version.
     */
    readonly deleteUser: outputs.firebasehosting.v1beta1.ActingUserResponse;
    /**
     * The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
     */
    readonly fileCount: string;
    /**
     * The time at which the version was `FINALIZED`.
     */
    readonly finalizeTime: string;
    /**
     * Identifies the user who `FINALIZED` the version.
     */
    readonly finalizeUser: outputs.firebasehosting.v1beta1.ActingUserResponse;
    /**
     * The labels used for extra metadata and/or filtering.
     */
    readonly labels: {[key: string]: string};
    /**
     * The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
     */
    readonly name: string;
    /**
     * The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
     */
    readonly status: string;
    /**
     * The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
     */
    readonly versionBytes: string;
}
/**
 * Get the specified version that has been created for the specified site. This can include versions that were created for the default `live` channel or for any active preview channels for the specified site.
 */
export function getVersionOutput(args: GetVersionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVersionResult> {
    return pulumi.output(args).apply((a: any) => getVersion(a, opts))
}

export interface GetVersionOutputArgs {
    project?: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    versionId: pulumi.Input<string>;
}
