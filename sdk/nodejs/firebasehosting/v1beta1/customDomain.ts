// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a `CustomDomain`.
 * Auto-naming is currently not supported for this resource.
 */
export class CustomDomain extends pulumi.CustomResource {
    /**
     * Get an existing CustomDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CustomDomain {
        return new CustomDomain(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:firebasehosting/v1beta1:CustomDomain';

    /**
     * Returns true if the given object is an instance of CustomDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomDomain.__pulumiType;
    }

    /**
     * Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The SSL certificate Hosting has for this custom domain's domain name. For new custom domains, this often represents Hosting's intent to create a certificate, rather than an actual cert. Check the `state` field for more.
     */
    public /*out*/ readonly cert!: pulumi.Output<outputs.firebasehosting.v1beta1.CertificateResponse>;
    /**
     * A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
     */
    public readonly certPreference!: pulumi.Output<string>;
    /**
     * The custom domain's create time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Required. The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
     */
    public readonly customDomainId!: pulumi.Output<string>;
    /**
     * The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.
     */
    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    /**
     * The `HostState` of the domain name this `CustomDomain` refers to.
     */
    public /*out*/ readonly hostState!: pulumi.Output<string>;
    /**
     * A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.
     */
    public /*out*/ readonly issues!: pulumi.Output<outputs.firebasehosting.v1beta1.StatusResponse[]>;
    /**
     * Labels used for extra metadata and/or filtering.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The fully-qualified name of the `CustomDomain`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The `OwnershipState` of the domain name this `CustomDomain` refers to.
     */
    public /*out*/ readonly ownershipState!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
     */
    public readonly redirectTarget!: pulumi.Output<string>;
    /**
     * A set of updates you should make to the domain name's DNS records to let Hosting serve secure content on its behalf.
     */
    public /*out*/ readonly requiredDnsUpdates!: pulumi.Output<outputs.firebasehosting.v1beta1.DnsUpdatesResponse>;
    public readonly siteId!: pulumi.Output<string>;
    /**
     * The last time the `CustomDomain` was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CustomDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomDomainArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.customDomainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customDomainId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["certPreference"] = args ? args.certPreference : undefined;
            resourceInputs["customDomainId"] = args ? args.customDomainId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["redirectTarget"] = args ? args.redirectTarget : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["cert"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["hostState"] = undefined /*out*/;
            resourceInputs["issues"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["ownershipState"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["requiredDnsUpdates"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["annotations"] = undefined /*out*/;
            resourceInputs["cert"] = undefined /*out*/;
            resourceInputs["certPreference"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["customDomainId"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["hostState"] = undefined /*out*/;
            resourceInputs["issues"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["ownershipState"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["redirectTarget"] = undefined /*out*/;
            resourceInputs["requiredDnsUpdates"] = undefined /*out*/;
            resourceInputs["siteId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["customDomainId", "project", "siteId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CustomDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CustomDomain resource.
 */
export interface CustomDomainArgs {
    /**
     * Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
     */
    certPreference?: pulumi.Input<enums.firebasehosting.v1beta1.CustomDomainCertPreference>;
    /**
     * Required. The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
     */
    customDomainId: pulumi.Input<string>;
    /**
     * Labels used for extra metadata and/or filtering.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    project?: pulumi.Input<string>;
    /**
     * A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
     */
    redirectTarget?: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
}
