// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new version for the specified site.
 */
export class Version extends pulumi.CustomResource {
    /**
     * Get an existing Version resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Version {
        return new Version(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:firebasehosting/v1beta1:Version';

    /**
     * Returns true if the given object is an instance of Version.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Version {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Version.__pulumiType;
    }

    /**
     * The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
     */
    public readonly config!: pulumi.Output<outputs.firebasehosting.v1beta1.ServingConfigResponse>;
    /**
     * The time at which the version was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Identifies the user who created the version.
     */
    public /*out*/ readonly createUser!: pulumi.Output<outputs.firebasehosting.v1beta1.ActingUserResponse>;
    /**
     * The time at which the version was `DELETED`.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * Identifies the user who `DELETED` the version.
     */
    public /*out*/ readonly deleteUser!: pulumi.Output<outputs.firebasehosting.v1beta1.ActingUserResponse>;
    /**
     * The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
     */
    public /*out*/ readonly fileCount!: pulumi.Output<string>;
    /**
     * The time at which the version was `FINALIZED`.
     */
    public /*out*/ readonly finalizeTime!: pulumi.Output<string>;
    /**
     * Identifies the user who `FINALIZED` the version.
     */
    public /*out*/ readonly finalizeUser!: pulumi.Output<outputs.firebasehosting.v1beta1.ActingUserResponse>;
    /**
     * The labels used for extra metadata and/or filtering.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly siteId!: pulumi.Output<string>;
    /**
     * The self-reported size of the version. This value is used for a pre-emptive quota check for legacy version uploads.
     */
    public readonly sizeBytes!: pulumi.Output<string | undefined>;
    /**
     * The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
     */
    public /*out*/ readonly versionBytes!: pulumi.Output<string>;
    /**
     * A unique id for the new version. This is was only specified for legacy version creations, and should be blank.
     */
    public readonly versionId!: pulumi.Output<string | undefined>;

    /**
     * Create a Version resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VersionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["sizeBytes"] = args ? args.sizeBytes : undefined;
            resourceInputs["versionId"] = args ? args.versionId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["createUser"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["deleteUser"] = undefined /*out*/;
            resourceInputs["fileCount"] = undefined /*out*/;
            resourceInputs["finalizeTime"] = undefined /*out*/;
            resourceInputs["finalizeUser"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["versionBytes"] = undefined /*out*/;
        } else {
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["createUser"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["deleteUser"] = undefined /*out*/;
            resourceInputs["fileCount"] = undefined /*out*/;
            resourceInputs["finalizeTime"] = undefined /*out*/;
            resourceInputs["finalizeUser"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["siteId"] = undefined /*out*/;
            resourceInputs["sizeBytes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["versionBytes"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["project", "siteId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Version.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Version resource.
 */
export interface VersionArgs {
    /**
     * The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
     */
    config?: pulumi.Input<inputs.firebasehosting.v1beta1.ServingConfigArgs>;
    /**
     * The labels used for extra metadata and/or filtering.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    /**
     * The self-reported size of the version. This value is used for a pre-emptive quota check for legacy version uploads.
     */
    sizeBytes?: pulumi.Input<string>;
    /**
     * A unique id for the new version. This is was only specified for legacy version creations, and should be blank.
     */
    versionId?: pulumi.Input<string>;
}
