// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets the specified `CustomDomain`.
 */
export function getCustomDomain(args: GetCustomDomainArgs, opts?: pulumi.InvokeOptions): Promise<GetCustomDomainResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:firebasehosting/v1beta1:getCustomDomain", {
        "customDomainId": args.customDomainId,
        "project": args.project,
        "siteId": args.siteId,
    }, opts);
}

export interface GetCustomDomainArgs {
    customDomainId: string;
    project?: string;
    siteId: string;
}

export interface GetCustomDomainResult {
    /**
     * Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
     */
    readonly annotations: {[key: string]: string};
    /**
     * The SSL certificate Hosting has for this custom domain's domain name. For new custom domains, this often represents Hosting's intent to create a certificate, rather than an actual cert. Check the `state` field for more.
     */
    readonly cert: outputs.firebasehosting.v1beta1.CertificateResponse;
    /**
     * A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
     */
    readonly certPreference: string;
    /**
     * The custom domain's create time.
     */
    readonly createTime: string;
    /**
     * The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.
     */
    readonly deleteTime: string;
    /**
     * A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.
     */
    readonly etag: string;
    /**
     * The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.
     */
    readonly expireTime: string;
    /**
     * The `HostState` of the domain name this `CustomDomain` refers to.
     */
    readonly hostState: string;
    /**
     * A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.
     */
    readonly issues: outputs.firebasehosting.v1beta1.StatusResponse[];
    /**
     * Labels used for extra metadata and/or filtering.
     */
    readonly labels: {[key: string]: string};
    /**
     * The fully-qualified name of the `CustomDomain`.
     */
    readonly name: string;
    /**
     * The `OwnershipState` of the domain name this `CustomDomain` refers to.
     */
    readonly ownershipState: string;
    /**
     * A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.
     */
    readonly reconciling: boolean;
    /**
     * A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
     */
    readonly redirectTarget: string;
    /**
     * A set of updates you should make to the domain name's DNS records to let Hosting serve secure content on its behalf.
     */
    readonly requiredDnsUpdates: outputs.firebasehosting.v1beta1.DnsUpdatesResponse;
    /**
     * The last time the `CustomDomain` was updated.
     */
    readonly updateTime: string;
}
/**
 * Gets the specified `CustomDomain`.
 */
export function getCustomDomainOutput(args: GetCustomDomainOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCustomDomainResult> {
    return pulumi.output(args).apply((a: any) => getCustomDomain(a, opts))
}

export interface GetCustomDomainOutputArgs {
    customDomainId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
}
