// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets details of a single EventSubscription.
 */
export function getEventSubscription(args: GetEventSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetEventSubscriptionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:connectors/v1:getEventSubscription", {
        "connectionId": args.connectionId,
        "eventSubscriptionId": args.eventSubscriptionId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetEventSubscriptionArgs {
    connectionId: string;
    eventSubscriptionId: string;
    location: string;
    project?: string;
}

export interface GetEventSubscriptionResult {
    /**
     * Created time.
     */
    readonly createTime: string;
    /**
     * Optional. The destination to hit when we receive an event
     */
    readonly destinations: outputs.connectors.v1.EventSubscriptionDestinationResponse;
    /**
     * Optional. Event type id of the event of current EventSubscription.
     */
    readonly eventTypeId: string;
    /**
     * Optional. JMS is the source for the event listener.
     */
    readonly jms: outputs.connectors.v1.JMSResponse;
    /**
     * Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
     */
    readonly name: string;
    /**
     * Optional. Status indicates the status of the event subscription resource
     */
    readonly status: outputs.connectors.v1.EventSubscriptionStatusResponse;
    /**
     * Optional. name of the Subscriber for the current EventSubscription.
     */
    readonly subscriber: string;
    /**
     * Optional. Link for Subscriber of the current EventSubscription.
     */
    readonly subscriberLink: string;
    /**
     * Updated time.
     */
    readonly updateTime: string;
}
/**
 * Gets details of a single EventSubscription.
 */
export function getEventSubscriptionOutput(args: GetEventSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventSubscriptionResult> {
    return pulumi.output(args).apply((a: any) => getEventSubscription(a, opts))
}

export interface GetEventSubscriptionOutputArgs {
    connectionId: pulumi.Input<string>;
    eventSubscriptionId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
