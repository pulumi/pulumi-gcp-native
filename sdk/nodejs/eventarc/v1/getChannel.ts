// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Get a single Channel.
 */
export function getChannel(args: GetChannelArgs, opts?: pulumi.InvokeOptions): Promise<GetChannelResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:eventarc/v1:getChannel", {
        "channelId": args.channelId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetChannelArgs {
    channelId: string;
    location: string;
    project?: string;
}

export interface GetChannelResult {
    /**
     * The activation token for the channel. The token must be used by the provider to register the channel for publishing.
     */
    readonly activationToken: string;
    /**
     * The creation time.
     */
    readonly createTime: string;
    /**
     * The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.
     */
    readonly name: string;
    /**
     * The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
     */
    readonly provider: string;
    /**
     * The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{project}/topics/{topic_id}`.
     */
    readonly pubsubTopic: string;
    /**
     * The state of a Channel.
     */
    readonly state: string;
    /**
     * Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     */
    readonly uid: string;
    /**
     * The last-modified time.
     */
    readonly updateTime: string;
}

export function getChannelOutput(args: GetChannelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetChannelResult> {
    return pulumi.output(args).apply(a => getChannel(a, opts))
}

export interface GetChannelOutputArgs {
    channelId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
