// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create an OS Config guest policy.
 */
export class GuestPolicy extends pulumi.CustomResource {
    /**
     * Get an existing GuestPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GuestPolicy {
        return new GuestPolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:osconfig/v1beta:GuestPolicy';

    /**
     * Returns true if the given object is an instance of GuestPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GuestPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GuestPolicy.__pulumiType;
    }

    /**
     * Required. Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of multiple policies that conflict with each other. For more information, see how the service [handles assignment conflicts](/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
     */
    public readonly assignment!: pulumi.Output<outputs.osconfig.v1beta.AssignmentResponse>;
    /**
     * Time this guest policy was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the guest policy. Length of the description is limited to 1024 characters.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The etag for this guest policy. If this is provided on update, it must match the server's etag.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Required. Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.
     */
    public readonly packageRepositories!: pulumi.Output<outputs.osconfig.v1beta.PackageRepositoryResponse[]>;
    /**
     * The software packages to be managed by this policy.
     */
    public readonly packages!: pulumi.Output<outputs.osconfig.v1beta.PackageResponse[]>;
    /**
     * A list of Recipes to install on the VM instance.
     */
    public readonly recipes!: pulumi.Output<outputs.osconfig.v1beta.SoftwareRecipeResponse[]>;
    /**
     * Last time this guest policy was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a GuestPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GuestPolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.guestPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'guestPolicyId'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            inputs["assignment"] = args ? args.assignment : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["etag"] = args ? args.etag : undefined;
            inputs["guestPolicyId"] = args ? args.guestPolicyId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["packageRepositories"] = args ? args.packageRepositories : undefined;
            inputs["packages"] = args ? args.packages : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["recipes"] = args ? args.recipes : undefined;
            inputs["createTime"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        } else {
            inputs["assignment"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["etag"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["packageRepositories"] = undefined /*out*/;
            inputs["packages"] = undefined /*out*/;
            inputs["recipes"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(GuestPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a GuestPolicy resource.
 */
export interface GuestPolicyArgs {
    /**
     * Required. Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of multiple policies that conflict with each other. For more information, see how the service [handles assignment conflicts](/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
     */
    readonly assignment?: pulumi.Input<inputs.osconfig.v1beta.AssignmentArgs>;
    /**
     * Description of the guest policy. Length of the description is limited to 1024 characters.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The etag for this guest policy. If this is provided on update, it must match the server's etag.
     */
    readonly etag?: pulumi.Input<string>;
    readonly guestPolicyId: pulumi.Input<string>;
    /**
     * Required. Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.
     */
    readonly packageRepositories?: pulumi.Input<pulumi.Input<inputs.osconfig.v1beta.PackageRepositoryArgs>[]>;
    /**
     * The software packages to be managed by this policy.
     */
    readonly packages?: pulumi.Input<pulumi.Input<inputs.osconfig.v1beta.PackageArgs>[]>;
    readonly project: pulumi.Input<string>;
    /**
     * A list of Recipes to install on the VM instance.
     */
    readonly recipes?: pulumi.Input<pulumi.Input<inputs.osconfig.v1beta.SoftwareRecipeArgs>[]>;
}
