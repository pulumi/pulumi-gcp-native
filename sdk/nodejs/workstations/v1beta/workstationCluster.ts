// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new workstation cluster.
 */
export class WorkstationCluster extends pulumi.CustomResource {
    /**
     * Get an existing WorkstationCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WorkstationCluster {
        return new WorkstationCluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:workstations/v1beta:WorkstationCluster';

    /**
     * Returns true if the given object is an instance of WorkstationCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkstationCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkstationCluster.__pulumiType;
    }

    /**
     * Client-specified annotations.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * Status conditions describing the current resource state.
     */
    public /*out*/ readonly conditions!: pulumi.Output<outputs.workstations.v1beta.StatusResponse[]>;
    /**
     * The private IP address of the control plane for this cluster. Workstation VMs need access to this IP address to work with the service, so make sure that your firewall rules allow egress from the workstation VMs to this address.
     */
    public /*out*/ readonly controlPlaneIp!: pulumi.Output<string>;
    /**
     * Time when this resource was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the `conditions` field.
     */
    public /*out*/ readonly degraded!: pulumi.Output<boolean>;
    /**
     * Time when this resource was soft-deleted.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * Human-readable name for this resource.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Full name of this resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Immutable. Name of the Compute Engine network in which instances associated with this cluster will be created.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * Configuration for private cluster.
     */
    public readonly privateClusterConfig!: pulumi.Output<outputs.workstations.v1beta.PrivateClusterConfigResponse>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Indicates whether this resource is currently being updated to match its intended state.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * Immutable. Name of the Compute Engine subnetwork in which instances associated with this cluster will be created. Must be part of the subnetwork specified for this cluster.
     */
    public readonly subnetwork!: pulumi.Output<string>;
    /**
     * A system-assigned unique identified for this resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Time when this resource was most recently updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Required. ID to use for the workstation cluster.
     */
    public readonly workstationClusterId!: pulumi.Output<string>;

    /**
     * Create a WorkstationCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkstationClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.workstationClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workstationClusterId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["privateClusterConfig"] = args ? args.privateClusterConfig : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["subnetwork"] = args ? args.subnetwork : undefined;
            resourceInputs["workstationClusterId"] = args ? args.workstationClusterId : undefined;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["controlPlaneIp"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["degraded"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["annotations"] = undefined /*out*/;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["controlPlaneIp"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["degraded"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["network"] = undefined /*out*/;
            resourceInputs["privateClusterConfig"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["subnetwork"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["workstationClusterId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project", "workstationClusterId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(WorkstationCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a WorkstationCluster resource.
 */
export interface WorkstationClusterArgs {
    /**
     * Client-specified annotations.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Human-readable name for this resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    /**
     * Full name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Immutable. Name of the Compute Engine network in which instances associated with this cluster will be created.
     */
    network?: pulumi.Input<string>;
    /**
     * Configuration for private cluster.
     */
    privateClusterConfig?: pulumi.Input<inputs.workstations.v1beta.PrivateClusterConfigArgs>;
    project?: pulumi.Input<string>;
    /**
     * Immutable. Name of the Compute Engine subnetwork in which instances associated with this cluster will be created. Must be part of the subnetwork specified for this cluster.
     */
    subnetwork?: pulumi.Input<string>;
    /**
     * Required. ID to use for the workstation cluster.
     */
    workstationClusterId: pulumi.Input<string>;
}
