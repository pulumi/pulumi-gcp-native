// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Returns the requested workstation configuration.
 */
export function getWorkstationConfig(args: GetWorkstationConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkstationConfigResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:workstations/v1beta:getWorkstationConfig", {
        "location": args.location,
        "project": args.project,
        "workstationClusterId": args.workstationClusterId,
        "workstationConfigId": args.workstationConfigId,
    }, opts);
}

export interface GetWorkstationConfigArgs {
    location: string;
    project?: string;
    workstationClusterId: string;
    workstationConfigId: string;
}

export interface GetWorkstationConfigResult {
    /**
     * Client-specified annotations.
     */
    readonly annotations: {[key: string]: string};
    /**
     * Status conditions describing the current resource state.
     */
    readonly conditions: outputs.workstations.v1beta.StatusResponse[];
    /**
     * Container that will be run for each workstation using this configuration when that workstation is started.
     */
    readonly container: outputs.workstations.v1beta.ContainerResponse;
    /**
     * Time when this resource was created.
     */
    readonly createTime: string;
    /**
     * Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the `conditions` field.
     */
    readonly degraded: boolean;
    /**
     * Time when this resource was soft-deleted.
     */
    readonly deleteTime: string;
    /**
     * Human-readable name for this resource.
     */
    readonly displayName: string;
    /**
     * Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
     */
    readonly etag: string;
    /**
     * Runtime host for the workstation.
     */
    readonly host: outputs.workstations.v1beta.HostResponse;
    /**
     * How long to wait before automatically stopping an instance that hasn't received any user traffic. A value of 0 indicates that this instance should never time out due to idleness. Defaults to 20 minutes.
     */
    readonly idleTimeout: string;
    /**
     * Full name of this resource.
     */
    readonly name: string;
    /**
     * Directories to persist across workstation sessions.
     */
    readonly persistentDirectories: outputs.workstations.v1beta.PersistentDirectoryResponse[];
    /**
     * Indicates whether this resource is currently being updated to match its intended state.
     */
    readonly reconciling: boolean;
    /**
     * How long to wait before automatically stopping a workstation after it started. A value of 0 indicates that workstations using this config should never time out. Must be greater than 0 and less than 24 hours if encryption_key is set. Defaults to 12 hours.
     */
    readonly runningTimeout: string;
    /**
     * A system-assigned unique identified for this resource.
     */
    readonly uid: string;
    /**
     * Time when this resource was most recently updated.
     */
    readonly updateTime: string;
}

export function getWorkstationConfigOutput(args: GetWorkstationConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkstationConfigResult> {
    return pulumi.output(args).apply(a => getWorkstationConfig(a, opts))
}

export interface GetWorkstationConfigOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    workstationClusterId: pulumi.Input<string>;
    workstationConfigId: pulumi.Input<string>;
}
