// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Returns the requested workstation cluster.
 */
export function getWorkstationCluster(args: GetWorkstationClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkstationClusterResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:workstations/v1beta:getWorkstationCluster", {
        "location": args.location,
        "project": args.project,
        "workstationClusterId": args.workstationClusterId,
    }, opts);
}

export interface GetWorkstationClusterArgs {
    location: string;
    project?: string;
    workstationClusterId: string;
}

export interface GetWorkstationClusterResult {
    /**
     * Client-specified annotations.
     */
    readonly annotations: {[key: string]: string};
    /**
     * Status conditions describing the current resource state.
     */
    readonly conditions: outputs.workstations.v1beta.StatusResponse[];
    /**
     * Time when this resource was created.
     */
    readonly createTime: string;
    /**
     * Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the `conditions` field.
     */
    readonly degraded: boolean;
    /**
     * Time when this resource was soft-deleted.
     */
    readonly deleteTime: string;
    /**
     * Human-readable name for this resource.
     */
    readonly displayName: string;
    /**
     * Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
     */
    readonly etag: string;
    /**
     * Full name of this resource.
     */
    readonly name: string;
    /**
     * Name of the Compute Engine network in which instances associated with this cluster will be created.
     */
    readonly network: string;
    /**
     * Configuration for private cluster.
     */
    readonly privateClusterConfig: outputs.workstations.v1beta.PrivateClusterConfigResponse;
    /**
     * Indicates whether this resource is currently being updated to match its intended state.
     */
    readonly reconciling: boolean;
    /**
     * Name of the Compute Engine subnetwork in which instances associated with this cluster will be created. Must be part of the subnetwork specified for this cluster.
     */
    readonly subnetwork: string;
    /**
     * A system-assigned unique identified for this resource.
     */
    readonly uid: string;
    /**
     * Time when this resource was most recently updated.
     */
    readonly updateTime: string;
}

export function getWorkstationClusterOutput(args: GetWorkstationClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkstationClusterResult> {
    return pulumi.output(args).apply(a => getWorkstationCluster(a, opts))
}

export interface GetWorkstationClusterOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    workstationClusterId: pulumi.Input<string>;
}
