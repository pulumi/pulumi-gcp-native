// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new workstation configuration.
 */
export class WorkstationConfig extends pulumi.CustomResource {
    /**
     * Get an existing WorkstationConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WorkstationConfig {
        return new WorkstationConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:workstations/v1beta:WorkstationConfig';

    /**
     * Returns true if the given object is an instance of WorkstationConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkstationConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkstationConfig.__pulumiType;
    }

    /**
     * Client-specified annotations.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * Status conditions describing the current resource state.
     */
    public /*out*/ readonly conditions!: pulumi.Output<outputs.workstations.v1beta.StatusResponse[]>;
    /**
     * Container that will be run for each workstation using this configuration when that workstation is started.
     */
    public readonly container!: pulumi.Output<outputs.workstations.v1beta.ContainerResponse>;
    /**
     * Time when this resource was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the `conditions` field.
     */
    public /*out*/ readonly degraded!: pulumi.Output<boolean>;
    /**
     * Time when this resource was soft-deleted.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * Human-readable name for this resource.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Encrypts resources of this workstation configuration using a customer-managed encryption key. If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata. If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost. If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
     */
    public readonly encryptionKey!: pulumi.Output<outputs.workstations.v1beta.CustomerEncryptionKeyResponse>;
    /**
     * Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Runtime host for the workstation.
     */
    public readonly host!: pulumi.Output<outputs.workstations.v1beta.HostResponse>;
    /**
     * How long to wait before automatically stopping an instance that hasn't received any user traffic. A value of 0 indicates that this instance should never time out due to idleness. Defaults to 20 minutes.
     */
    public readonly idleTimeout!: pulumi.Output<string>;
    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Full name of this resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Directories to persist across workstation sessions.
     */
    public readonly persistentDirectories!: pulumi.Output<outputs.workstations.v1beta.PersistentDirectoryResponse[]>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Indicates whether this resource is currently being updated to match its intended state.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * How long to wait before automatically stopping a workstation after it started. A value of 0 indicates that workstations using this configuration should never time out. Must be greater than 0 and less than 24 hours if encryption_key is set. Defaults to 12 hours.
     */
    public readonly runningTimeout!: pulumi.Output<string>;
    /**
     * A system-assigned unique identified for this resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Time when this resource was most recently updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * If set, validate the request and preview the review, but do not actually apply it.
     */
    public readonly validateOnly!: pulumi.Output<boolean | undefined>;
    public readonly workstationClusterId!: pulumi.Output<string>;
    /**
     * Required. ID to use for the config.
     */
    public readonly workstationConfigId!: pulumi.Output<string>;

    /**
     * Create a WorkstationConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkstationConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.workstationClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workstationClusterId'");
            }
            if ((!args || args.workstationConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workstationConfigId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistentDirectories"] = args ? args.persistentDirectories : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["runningTimeout"] = args ? args.runningTimeout : undefined;
            resourceInputs["validateOnly"] = args ? args.validateOnly : undefined;
            resourceInputs["workstationClusterId"] = args ? args.workstationClusterId : undefined;
            resourceInputs["workstationConfigId"] = args ? args.workstationConfigId : undefined;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["degraded"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["annotations"] = undefined /*out*/;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["container"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["degraded"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["encryptionKey"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["idleTimeout"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["persistentDirectories"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["runningTimeout"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["validateOnly"] = undefined /*out*/;
            resourceInputs["workstationClusterId"] = undefined /*out*/;
            resourceInputs["workstationConfigId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "project", "workstationClusterId", "workstationConfigId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(WorkstationConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a WorkstationConfig resource.
 */
export interface WorkstationConfigArgs {
    /**
     * Client-specified annotations.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Container that will be run for each workstation using this configuration when that workstation is started.
     */
    container?: pulumi.Input<inputs.workstations.v1beta.ContainerArgs>;
    /**
     * Human-readable name for this resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Encrypts resources of this workstation configuration using a customer-managed encryption key. If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata. If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost. If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.
     */
    encryptionKey?: pulumi.Input<inputs.workstations.v1beta.CustomerEncryptionKeyArgs>;
    /**
     * Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
     */
    etag?: pulumi.Input<string>;
    /**
     * Runtime host for the workstation.
     */
    host?: pulumi.Input<inputs.workstations.v1beta.HostArgs>;
    /**
     * How long to wait before automatically stopping an instance that hasn't received any user traffic. A value of 0 indicates that this instance should never time out due to idleness. Defaults to 20 minutes.
     */
    idleTimeout?: pulumi.Input<string>;
    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    /**
     * Full name of this resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Directories to persist across workstation sessions.
     */
    persistentDirectories?: pulumi.Input<pulumi.Input<inputs.workstations.v1beta.PersistentDirectoryArgs>[]>;
    project?: pulumi.Input<string>;
    /**
     * How long to wait before automatically stopping a workstation after it started. A value of 0 indicates that workstations using this configuration should never time out. Must be greater than 0 and less than 24 hours if encryption_key is set. Defaults to 12 hours.
     */
    runningTimeout?: pulumi.Input<string>;
    /**
     * If set, validate the request and preview the review, but do not actually apply it.
     */
    validateOnly?: pulumi.Input<boolean>;
    workstationClusterId: pulumi.Input<string>;
    /**
     * Required. ID to use for the config.
     */
    workstationConfigId: pulumi.Input<string>;
}
