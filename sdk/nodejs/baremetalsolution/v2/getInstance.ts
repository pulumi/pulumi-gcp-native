// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Get details about a single server.
 */
export function getInstance(args: GetInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:baremetalsolution/v2:getInstance", {
        "instanceId": args.instanceId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetInstanceArgs {
    instanceId: string;
    location: string;
    project?: string;
}

export interface GetInstanceResult {
    /**
     * Create a time stamp.
     */
    readonly createTime: string;
    /**
     * True if you enable hyperthreading for the server, otherwise false. The default value is false.
     */
    readonly hyperthreadingEnabled: boolean;
    /**
     * True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.
     */
    readonly interactiveSerialConsoleEnabled: boolean;
    /**
     * Labels as key value pairs.
     */
    readonly labels: {[key: string]: string};
    /**
     * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
     */
    readonly logicalInterfaces: outputs.baremetalsolution.v2.GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse[];
    /**
     * Text field about info for logging in.
     */
    readonly loginInfo: string;
    /**
     * Immutable. List of LUNs associated with this server.
     */
    readonly luns: outputs.baremetalsolution.v2.LunResponse[];
    /**
     * Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
     */
    readonly machineType: string;
    /**
     * Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
     */
    readonly name: string;
    /**
     * Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
     */
    readonly networkTemplate: string;
    /**
     * List of networks associated with this server.
     */
    readonly networks: outputs.baremetalsolution.v2.NetworkResponse[];
    /**
     * The OS image currently installed on the server.
     */
    readonly osImage: string;
    /**
     * Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
     */
    readonly pod: string;
    /**
     * The state of the server.
     */
    readonly state: string;
    /**
     * Update a time stamp.
     */
    readonly updateTime: string;
    /**
     * Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
     */
    readonly volumes: outputs.baremetalsolution.v2.VolumeResponse[];
    /**
     * The workload profile for the instance.
     */
    readonly workloadProfile: string;
}
/**
 * Get details about a single server.
 */
export function getInstanceOutput(args: GetInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstanceResult> {
    return pulumi.output(args).apply((a: any) => getInstance(a, opts))
}

export interface GetInstanceOutputArgs {
    instanceId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
