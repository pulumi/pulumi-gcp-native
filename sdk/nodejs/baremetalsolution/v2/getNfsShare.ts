// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Get details of a single NFS share.
 */
export function getNfsShare(args: GetNfsShareArgs, opts?: pulumi.InvokeOptions): Promise<GetNfsShareResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:baremetalsolution/v2:getNfsShare", {
        "location": args.location,
        "nfsShareId": args.nfsShareId,
        "project": args.project,
    }, opts);
}

export interface GetNfsShareArgs {
    location: string;
    nfsShareId: string;
    project?: string;
}

export interface GetNfsShareResult {
    /**
     * List of allowed access points.
     */
    readonly allowedClients: outputs.baremetalsolution.v2.AllowedClientResponse[];
    /**
     * Labels as key value pairs.
     */
    readonly labels: {[key: string]: string};
    /**
     * Immutable. The name of the NFS share.
     */
    readonly name: string;
    /**
     * An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead.
     */
    readonly nfsShareId: string;
    /**
     * The requested size, in GiB.
     */
    readonly requestedSizeGib: string;
    /**
     * The state of the NFS share.
     */
    readonly state: string;
    /**
     * Immutable. The storage type of the underlying volume.
     */
    readonly storageType: string;
    /**
     * The underlying volume of the share. Created automatically during provisioning.
     */
    readonly volume: string;
}

export function getNfsShareOutput(args: GetNfsShareOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNfsShareResult> {
    return pulumi.output(args).apply(a => getNfsShare(a, opts))
}

export interface GetNfsShareOutputArgs {
    location: pulumi.Input<string>;
    nfsShareId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
