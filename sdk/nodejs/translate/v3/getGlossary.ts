// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets a glossary. Returns NOT_FOUND, if the glossary doesn't exist.
 */
export function getGlossary(args: GetGlossaryArgs, opts?: pulumi.InvokeOptions): Promise<GetGlossaryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:translate/v3:getGlossary", {
        "glossaryId": args.glossaryId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetGlossaryArgs {
    glossaryId: string;
    location: string;
    project?: string;
}

export interface GetGlossaryResult {
    /**
     * Optional. The display name of the glossary.
     */
    readonly displayName: string;
    /**
     * When the glossary creation was finished.
     */
    readonly endTime: string;
    /**
     * The number of entries defined in the glossary.
     */
    readonly entryCount: number;
    /**
     * Provides examples to build the glossary from. Total glossary must not exceed 10M Unicode codepoints.
     */
    readonly inputConfig: outputs.translate.v3.GlossaryInputConfigResponse;
    /**
     * Used with equivalent term set glossaries.
     */
    readonly languageCodesSet: outputs.translate.v3.LanguageCodesSetResponse;
    /**
     * Used with unidirectional glossaries.
     */
    readonly languagePair: outputs.translate.v3.LanguageCodePairResponse;
    /**
     * The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`.
     */
    readonly name: string;
    /**
     * When CreateGlossary was called.
     */
    readonly submitTime: string;
}
/**
 * Gets a glossary. Returns NOT_FOUND, if the glossary doesn't exist.
 */
export function getGlossaryOutput(args: GetGlossaryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGlossaryResult> {
    return pulumi.output(args).apply((a: any) => getGlossary(a, opts))
}

export interface GetGlossaryOutputArgs {
    glossaryId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
