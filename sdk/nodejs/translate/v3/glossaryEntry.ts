// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a glossary entry.
 */
export class GlossaryEntry extends pulumi.CustomResource {
    /**
     * Get an existing GlossaryEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GlossaryEntry {
        return new GlossaryEntry(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:translate/v3:GlossaryEntry';

    /**
     * Returns true if the given object is an instance of GlossaryEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlossaryEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlossaryEntry.__pulumiType;
    }

    /**
     * Describes the glossary entry.
     */
    public readonly description!: pulumi.Output<string>;
    public readonly glossaryId!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * The resource name of the entry. Format: "projects/*&#47;locations/*&#47;glossaries/*&#47;glossaryEntries/*"
     */
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Used for an unidirectional glossary.
     */
    public readonly termsPair!: pulumi.Output<outputs.translate.v3.GlossaryTermsPairResponse>;
    /**
     * Used for an equivalent term sets glossary.
     */
    public readonly termsSet!: pulumi.Output<outputs.translate.v3.GlossaryTermsSetResponse>;

    /**
     * Create a GlossaryEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlossaryEntryArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.glossaryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'glossaryId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["glossaryId"] = args ? args.glossaryId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["termsPair"] = args ? args.termsPair : undefined;
            resourceInputs["termsSet"] = args ? args.termsSet : undefined;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["glossaryId"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["termsPair"] = undefined /*out*/;
            resourceInputs["termsSet"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["glossaryId", "location", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(GlossaryEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a GlossaryEntry resource.
 */
export interface GlossaryEntryArgs {
    /**
     * Describes the glossary entry.
     */
    description?: pulumi.Input<string>;
    glossaryId: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * The resource name of the entry. Format: "projects/*&#47;locations/*&#47;glossaries/*&#47;glossaryEntries/*"
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Used for an unidirectional glossary.
     */
    termsPair?: pulumi.Input<inputs.translate.v3.GlossaryTermsPairArgs>;
    /**
     * Used for an equivalent term sets glossary.
     */
    termsSet?: pulumi.Input<inputs.translate.v3.GlossaryTermsSetArgs>;
}
