// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets a single glossary entry by the given id.
 */
export function getGlossaryEntry(args: GetGlossaryEntryArgs, opts?: pulumi.InvokeOptions): Promise<GetGlossaryEntryResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:translate/v3:getGlossaryEntry", {
        "glossaryEntryId": args.glossaryEntryId,
        "glossaryId": args.glossaryId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetGlossaryEntryArgs {
    glossaryEntryId: string;
    glossaryId: string;
    location: string;
    project?: string;
}

export interface GetGlossaryEntryResult {
    /**
     * Describes the glossary entry.
     */
    readonly description: string;
    /**
     * The resource name of the entry. Format: "projects/*&#47;locations/*&#47;glossaries/*&#47;glossaryEntries/*"
     */
    readonly name: string;
    /**
     * Used for an unidirectional glossary.
     */
    readonly termsPair: outputs.translate.v3.GlossaryTermsPairResponse;
    /**
     * Used for an equivalent term sets glossary.
     */
    readonly termsSet: outputs.translate.v3.GlossaryTermsSetResponse;
}

export function getGlossaryEntryOutput(args: GetGlossaryEntryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGlossaryEntryResult> {
    return pulumi.output(args).apply(a => getGlossaryEntry(a, opts))
}

export interface GetGlossaryEntryOutputArgs {
    glossaryEntryId: pulumi.Input<string>;
    glossaryId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
