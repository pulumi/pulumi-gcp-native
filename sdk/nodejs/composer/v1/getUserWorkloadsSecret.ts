// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets an existing user workloads Secret. Values of the "data" field in the response are cleared. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
 */
export function getUserWorkloadsSecret(args: GetUserWorkloadsSecretArgs, opts?: pulumi.InvokeOptions): Promise<GetUserWorkloadsSecretResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:composer/v1:getUserWorkloadsSecret", {
        "environmentId": args.environmentId,
        "location": args.location,
        "project": args.project,
        "userWorkloadsSecretId": args.userWorkloadsSecretId,
    }, opts);
}

export interface GetUserWorkloadsSecretArgs {
    environmentId: string;
    location: string;
    project?: string;
    userWorkloadsSecretId: string;
}

export interface GetUserWorkloadsSecretResult {
    /**
     * Optional. The "data" field of Kubernetes Secret, organized in key-value pairs, which can contain sensitive values such as a password, a token, or a key. The values for all keys have to be base64-encoded strings. For details see: https://kubernetes.io/docs/concepts/configuration/secret/
     */
    readonly data: {[key: string]: string};
    /**
     * Identifier. The resource name of the Secret, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
     */
    readonly name: string;
}
/**
 * Gets an existing user workloads Secret. Values of the "data" field in the response are cleared. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
 */
export function getUserWorkloadsSecretOutput(args: GetUserWorkloadsSecretOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserWorkloadsSecretResult> {
    return pulumi.output(args).apply((a: any) => getUserWorkloadsSecret(a, opts))
}

export interface GetUserWorkloadsSecretOutputArgs {
    environmentId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    userWorkloadsSecretId: pulumi.Input<string>;
}
