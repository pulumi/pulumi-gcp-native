// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new category on the portal.
 */
export class OrganizationSiteApicategory extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationSiteApicategory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): OrganizationSiteApicategory {
        return new OrganizationSiteApicategory(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:apigee/v1:OrganizationSiteApicategory';

    /**
     * Returns true if the given object is an instance of OrganizationSiteApicategory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationSiteApicategory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationSiteApicategory.__pulumiType;
    }

    /**
     * Details of category.
     */
    public /*out*/ readonly data!: pulumi.Output<outputs.apigee.v1.GoogleCloudApigeeV1ApiCategoryDataResponse>;
    /**
     * ID that can be used to find errors in the log files.
     */
    public /*out*/ readonly errorCode!: pulumi.Output<string>;
    /**
     * Description of the operation.
     */
    public /*out*/ readonly message!: pulumi.Output<string>;
    /**
     * ID that can be used to find request details in the log files.
     */
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    /**
     * Status of the operation.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a OrganizationSiteApicategory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationSiteApicategoryArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.apicategoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apicategoryId'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            inputs["apicategoryId"] = args ? args.apicategoryId : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["organizationId"] = args ? args.organizationId : undefined;
            inputs["siteId"] = args ? args.siteId : undefined;
            inputs["updateTime"] = args ? args.updateTime : undefined;
            inputs["data"] = undefined /*out*/;
            inputs["errorCode"] = undefined /*out*/;
            inputs["message"] = undefined /*out*/;
            inputs["requestId"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        } else {
            inputs["data"] = undefined /*out*/;
            inputs["errorCode"] = undefined /*out*/;
            inputs["message"] = undefined /*out*/;
            inputs["requestId"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(OrganizationSiteApicategory.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a OrganizationSiteApicategory resource.
 */
export interface OrganizationSiteApicategoryArgs {
    readonly apicategoryId: pulumi.Input<string>;
    /**
     * ID of the category (a UUID).
     */
    readonly id?: pulumi.Input<string>;
    /**
     * Name of the category.
     */
    readonly name?: pulumi.Input<string>;
    readonly organizationId: pulumi.Input<string>;
    /**
     * Name of the portal.
     */
    readonly siteId: pulumi.Input<string>;
    /**
     * Time the category was last modified in milliseconds since epoch.
     */
    readonly updateTime?: pulumi.Input<string>;
}
