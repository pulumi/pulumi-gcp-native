// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new certificate. The certificate will be registered to the trawler service and will be encrypted using cloud KMS and stored in Spanner Returns the certificate.
 * Auto-naming is currently not supported for this resource.
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:integrations/v1:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Status of the certificate
     */
    public readonly certificateStatus!: pulumi.Output<string>;
    /**
     * Immutable. Credential id that will be used to register with trawler INTERNAL_ONLY
     */
    public readonly credentialId!: pulumi.Output<string>;
    /**
     * Description of the certificate
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of the certificate
     */
    public readonly displayName!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Auto generated primary key
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly productId!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Input only. Raw client certificate which would be registered with trawler
     */
    public readonly rawCertificate!: pulumi.Output<outputs.integrations.v1.GoogleCloudIntegrationsV1alphaClientCertificateResponse>;
    /**
     * Immutable. Requestor ID to be used to register certificate with trawler
     */
    public readonly requestorId!: pulumi.Output<string>;
    /**
     * The timestamp after which certificate will expire
     */
    public /*out*/ readonly validEndTime!: pulumi.Output<string>;
    /**
     * The timestamp after which certificate will be valid
     */
    public /*out*/ readonly validStartTime!: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.productId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productId'");
            }
            resourceInputs["certificateStatus"] = args ? args.certificateStatus : undefined;
            resourceInputs["credentialId"] = args ? args.credentialId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rawCertificate"] = args ? args.rawCertificate : undefined;
            resourceInputs["requestorId"] = args ? args.requestorId : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["validEndTime"] = undefined /*out*/;
            resourceInputs["validStartTime"] = undefined /*out*/;
        } else {
            resourceInputs["certificateStatus"] = undefined /*out*/;
            resourceInputs["credentialId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["productId"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["rawCertificate"] = undefined /*out*/;
            resourceInputs["requestorId"] = undefined /*out*/;
            resourceInputs["validEndTime"] = undefined /*out*/;
            resourceInputs["validStartTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "productId", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Status of the certificate
     */
    certificateStatus?: pulumi.Input<enums.integrations.v1.CertificateCertificateStatus>;
    /**
     * Immutable. Credential id that will be used to register with trawler INTERNAL_ONLY
     */
    credentialId?: pulumi.Input<string>;
    /**
     * Description of the certificate
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the certificate
     */
    displayName?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Input only. Raw client certificate which would be registered with trawler
     */
    rawCertificate?: pulumi.Input<inputs.integrations.v1.GoogleCloudIntegrationsV1alphaClientCertificateArgs>;
    /**
     * Immutable. Requestor ID to be used to register certificate with trawler
     */
    requestorId?: pulumi.Input<string>;
}
