// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Gets a complete auth config. If the auth config doesn't exist, Code.NOT_FOUND exception will be thrown. Returns the decrypted auth config.
 */
export function getAuthConfig(args: GetAuthConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthConfigResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("google-native:integrations/v1alpha:getAuthConfig", {
        "authConfigId": args.authConfigId,
        "location": args.location,
        "productId": args.productId,
        "project": args.project,
    }, opts);
}

export interface GetAuthConfigArgs {
    authConfigId: string;
    location: string;
    productId: string;
    project?: string;
}

export interface GetAuthConfigResult {
    /**
     * Certificate id for client certificate
     */
    readonly certificateId: string;
    /**
     * The timestamp when the auth config is created.
     */
    readonly createTime: string;
    /**
     * The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
     */
    readonly creatorEmail: string;
    /**
     * Credential type of the encrypted credential.
     */
    readonly credentialType: string;
    /**
     * Raw auth credentials.
     */
    readonly decryptedCredential: outputs.integrations.v1alpha.GoogleCloudIntegrationsV1alphaCredentialResponse;
    /**
     * A description of the auth config.
     */
    readonly description: string;
    /**
     * The name of the auth config.
     */
    readonly displayName: string;
    /**
     * Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.
     */
    readonly encryptedCredential: string;
    /**
     * User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.
     */
    readonly expiryNotificationDuration: string[];
    /**
     * The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.
     */
    readonly lastModifierEmail: string;
    /**
     * Resource name of the SFDC instance projects/{project}/locations/{location}/authConfigs/{authConfig}.
     */
    readonly name: string;
    /**
     * User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.
     */
    readonly overrideValidTime: string;
    /**
     * The reason / details of the current status.
     */
    readonly reason: string;
    /**
     * The status of the auth config.
     */
    readonly state: string;
    /**
     * The timestamp when the auth config is modified.
     */
    readonly updateTime: string;
    /**
     * The time until the auth config is valid. Empty or max value is considered the auth config won't expire.
     */
    readonly validTime: string;
    /**
     * The visibility of the auth config.
     */
    readonly visibility: string;
}
/**
 * Gets a complete auth config. If the auth config doesn't exist, Code.NOT_FOUND exception will be thrown. Returns the decrypted auth config.
 */
export function getAuthConfigOutput(args: GetAuthConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthConfigResult> {
    return pulumi.output(args).apply((a: any) => getAuthConfig(a, opts))
}

export interface GetAuthConfigOutputArgs {
    authConfigId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
