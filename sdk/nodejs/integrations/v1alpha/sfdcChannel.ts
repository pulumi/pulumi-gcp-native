// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Creates an sfdc channel record. Store the sfdc channel in Spanner. Returns the sfdc channel.
 * Auto-naming is currently not supported for this resource.
 */
export class SfdcChannel extends pulumi.CustomResource {
    /**
     * Get an existing SfdcChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SfdcChannel {
        return new SfdcChannel(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:integrations/v1alpha:SfdcChannel';

    /**
     * Returns true if the given object is an instance of SfdcChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SfdcChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SfdcChannel.__pulumiType;
    }

    /**
     * The Channel topic defined by salesforce once an channel is opened
     */
    public readonly channelTopic!: pulumi.Output<string>;
    /**
     * Time when the channel is created
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Time when the channel was deleted. Empty if not deleted.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * The description for this channel
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Client level unique name/alias to easily reference a channel.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Indicated if a channel has any active integrations referencing it. Set to false when the channel is created, and set to true if there is any integration published with the channel configured in it.
     */
    public readonly isActive!: pulumi.Output<boolean>;
    /**
     * Last sfdc messsage replay id for channel
     */
    public readonly lastReplayId!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Resource name of the SFDC channel projects/{project}/locations/{location}/sfdcInstances/{sfdc_instance}/sfdcChannels/{sfdc_channel}.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly productId!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly sfdcInstanceId!: pulumi.Output<string>;
    /**
     * Time when the channel was last updated
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a SfdcChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SfdcChannelArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.productId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productId'");
            }
            if ((!args || args.sfdcInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sfdcInstanceId'");
            }
            resourceInputs["channelTopic"] = args ? args.channelTopic : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["lastReplayId"] = args ? args.lastReplayId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sfdcInstanceId"] = args ? args.sfdcInstanceId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["channelTopic"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["isActive"] = undefined /*out*/;
            resourceInputs["lastReplayId"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["productId"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["sfdcInstanceId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "productId", "project", "sfdcInstanceId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SfdcChannel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SfdcChannel resource.
 */
export interface SfdcChannelArgs {
    /**
     * The Channel topic defined by salesforce once an channel is opened
     */
    channelTopic?: pulumi.Input<string>;
    /**
     * The description for this channel
     */
    description?: pulumi.Input<string>;
    /**
     * Client level unique name/alias to easily reference a channel.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Indicated if a channel has any active integrations referencing it. Set to false when the channel is created, and set to true if there is any integration published with the channel configured in it.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Last sfdc messsage replay id for channel
     */
    lastReplayId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * Resource name of the SFDC channel projects/{project}/locations/{location}/sfdcInstances/{sfdc_instance}/sfdcChannels/{sfdc_channel}.
     */
    name?: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    sfdcInstanceId: pulumi.Input<string>;
}
