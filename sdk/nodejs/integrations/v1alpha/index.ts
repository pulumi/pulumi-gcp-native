// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AuthConfigArgs } from "./authConfig";
export type AuthConfig = import("./authConfig").AuthConfig;
export const AuthConfig: typeof import("./authConfig").AuthConfig = null as any;
utilities.lazyLoad(exports, ["AuthConfig"], () => require("./authConfig"));

export { CertificateArgs } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { GetAuthConfigArgs, GetAuthConfigResult, GetAuthConfigOutputArgs } from "./getAuthConfig";
export const getAuthConfig: typeof import("./getAuthConfig").getAuthConfig = null as any;
export const getAuthConfigOutput: typeof import("./getAuthConfig").getAuthConfigOutput = null as any;
utilities.lazyLoad(exports, ["getAuthConfig","getAuthConfigOutput"], () => require("./getAuthConfig"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetSfdcChannelArgs, GetSfdcChannelResult, GetSfdcChannelOutputArgs } from "./getSfdcChannel";
export const getSfdcChannel: typeof import("./getSfdcChannel").getSfdcChannel = null as any;
export const getSfdcChannelOutput: typeof import("./getSfdcChannel").getSfdcChannelOutput = null as any;
utilities.lazyLoad(exports, ["getSfdcChannel","getSfdcChannelOutput"], () => require("./getSfdcChannel"));

export { GetSfdcInstanceArgs, GetSfdcInstanceResult, GetSfdcInstanceOutputArgs } from "./getSfdcInstance";
export const getSfdcInstance: typeof import("./getSfdcInstance").getSfdcInstance = null as any;
export const getSfdcInstanceOutput: typeof import("./getSfdcInstance").getSfdcInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getSfdcInstance","getSfdcInstanceOutput"], () => require("./getSfdcInstance"));

export { GetTemplatesVersionArgs, GetTemplatesVersionResult, GetTemplatesVersionOutputArgs } from "./getTemplatesVersion";
export const getTemplatesVersion: typeof import("./getTemplatesVersion").getTemplatesVersion = null as any;
export const getTemplatesVersionOutput: typeof import("./getTemplatesVersion").getTemplatesVersionOutput = null as any;
utilities.lazyLoad(exports, ["getTemplatesVersion","getTemplatesVersionOutput"], () => require("./getTemplatesVersion"));

export { GetTestCaseArgs, GetTestCaseResult, GetTestCaseOutputArgs } from "./getTestCase";
export const getTestCase: typeof import("./getTestCase").getTestCase = null as any;
export const getTestCaseOutput: typeof import("./getTestCase").getTestCaseOutput = null as any;
utilities.lazyLoad(exports, ["getTestCase","getTestCaseOutput"], () => require("./getTestCase"));

export { GetVersionArgs, GetVersionResult, GetVersionOutputArgs } from "./getVersion";
export const getVersion: typeof import("./getVersion").getVersion = null as any;
export const getVersionOutput: typeof import("./getVersion").getVersionOutput = null as any;
utilities.lazyLoad(exports, ["getVersion","getVersionOutput"], () => require("./getVersion"));

export { SfdcChannelArgs } from "./sfdcChannel";
export type SfdcChannel = import("./sfdcChannel").SfdcChannel;
export const SfdcChannel: typeof import("./sfdcChannel").SfdcChannel = null as any;
utilities.lazyLoad(exports, ["SfdcChannel"], () => require("./sfdcChannel"));

export { SfdcInstanceArgs } from "./sfdcInstance";
export type SfdcInstance = import("./sfdcInstance").SfdcInstance;
export const SfdcInstance: typeof import("./sfdcInstance").SfdcInstance = null as any;
utilities.lazyLoad(exports, ["SfdcInstance"], () => require("./sfdcInstance"));

export { TemplatesVersionArgs } from "./templatesVersion";
export type TemplatesVersion = import("./templatesVersion").TemplatesVersion;
export const TemplatesVersion: typeof import("./templatesVersion").TemplatesVersion = null as any;
utilities.lazyLoad(exports, ["TemplatesVersion"], () => require("./templatesVersion"));

export { TestCaseArgs } from "./testCase";
export type TestCase = import("./testCase").TestCase;
export const TestCase: typeof import("./testCase").TestCase = null as any;
utilities.lazyLoad(exports, ["TestCase"], () => require("./testCase"));

export { VersionArgs } from "./version";
export type Version = import("./version").Version;
export const Version: typeof import("./version").Version = null as any;
utilities.lazyLoad(exports, ["Version"], () => require("./version"));


// Export enums:
export * from "../../types/enums/integrations/v1alpha";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:integrations/v1alpha:AuthConfig":
                return new AuthConfig(name, <any>undefined, { urn })
            case "google-native:integrations/v1alpha:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "google-native:integrations/v1alpha:SfdcChannel":
                return new SfdcChannel(name, <any>undefined, { urn })
            case "google-native:integrations/v1alpha:SfdcInstance":
                return new SfdcInstance(name, <any>undefined, { urn })
            case "google-native:integrations/v1alpha:TemplatesVersion":
                return new TemplatesVersion(name, <any>undefined, { urn })
            case "google-native:integrations/v1alpha:TestCase":
                return new TestCase(name, <any>undefined, { urn })
            case "google-native:integrations/v1alpha:Version":
                return new Version(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "integrations/v1alpha", _module)
