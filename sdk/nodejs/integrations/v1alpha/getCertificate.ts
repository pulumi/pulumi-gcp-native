// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Get a certificates in the specified project.
 */
export function getCertificate(args: GetCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-native:integrations/v1alpha:getCertificate", {
        "certificateId": args.certificateId,
        "location": args.location,
        "productId": args.productId,
        "project": args.project,
    }, opts);
}

export interface GetCertificateArgs {
    certificateId: string;
    location: string;
    productId: string;
    project?: string;
}

export interface GetCertificateResult {
    /**
     * Status of the certificate
     */
    readonly certificateStatus: string;
    /**
     * Immutable. Credential id that will be used to register with trawler INTERNAL_ONLY
     */
    readonly credentialId: string;
    /**
     * Description of the certificate
     */
    readonly description: string;
    /**
     * Name of the certificate
     */
    readonly displayName: string;
    /**
     * Auto generated primary key
     */
    readonly name: string;
    /**
     * Input only. Raw client certificate which would be registered with trawler
     */
    readonly rawCertificate: outputs.integrations.v1alpha.GoogleCloudIntegrationsV1alphaClientCertificateResponse;
    /**
     * Immutable. Requestor ID to be used to register certificate with trawler
     */
    readonly requestorId: string;
    /**
     * The timestamp after which certificate will expire
     */
    readonly validEndTime: string;
    /**
     * The timestamp after which certificate will be valid
     */
    readonly validStartTime: string;
}

export function getCertificateOutput(args: GetCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificateResult> {
    return pulumi.output(args).apply(a => getCertificate(a, opts))
}

export interface GetCertificateOutputArgs {
    certificateId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
