// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

/**
 * Creates a new ManagementServer in a given project and location.
 * Auto-naming is currently not supported for this resource.
 */
export class ManagementServer extends pulumi.CustomResource {
    /**
     * Get an existing ManagementServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ManagementServer {
        return new ManagementServer(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-native:backupdr/v1:ManagementServer';

    /**
     * Returns true if the given object is an instance of ManagementServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementServer.__pulumiType;
    }

    /**
     * The time when the instance was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. The description of the ManagementServer instance (2048 characters or less).
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Optional. Server specified ETag for the ManagementServer resource to prevent simultaneous updates from overwiting each other.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Optional. Resource labels to represent user provided metadata. Labels currently defined: 1. migrate_from_go= If set to true, the MS is created in migration ready mode.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly location!: pulumi.Output<string>;
    /**
     * Required. The name of the management server to create. The name must be unique for the specified project and location.
     */
    public readonly managementServerId!: pulumi.Output<string>;
    /**
     * The hostname or ip address of the exposed AGM endpoints, used by clients to connect to AGM/RD graphical user interface and APIs.
     */
    public /*out*/ readonly managementUri!: pulumi.Output<outputs.backupdr.v1.ManagementURIResponse>;
    /**
     * The resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * VPC networks to which the ManagementServer instance is connected. For this version, only a single network is supported.
     */
    public readonly networks!: pulumi.Output<outputs.backupdr.v1.NetworkConfigResponse[]>;
    /**
     * The OAuth 2.0 client id is required to make API calls to the BackupDR instance API of this ManagementServer. This is the value that should be provided in the ‘aud’ field of the OIDC ID Token (see openid specification https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
     */
    public /*out*/ readonly oauth2ClientId!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    /**
     * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    public readonly requestId!: pulumi.Output<string | undefined>;
    /**
     * The ManagementServer state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The type of the ManagementServer resource.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The time when the instance was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The hostnames of the exposed AGM endpoints for both types of user i.e. 1p and 3p, used to connect AGM/RM UI.
     */
    public /*out*/ readonly workforceIdentityBasedManagementUri!: pulumi.Output<outputs.backupdr.v1.WorkforceIdentityBasedManagementURIResponse>;
    /**
     * The OAuth client IDs for both types of user i.e. 1p and 3p.
     */
    public /*out*/ readonly workforceIdentityBasedOauth2ClientId!: pulumi.Output<outputs.backupdr.v1.WorkforceIdentityBasedOAuth2ClientIDResponse>;

    /**
     * Create a ManagementServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementServerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.managementServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementServerId'");
            }
            if ((!args || args.networks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managementServerId"] = args ? args.managementServerId : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["managementUri"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["oauth2ClientId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["workforceIdentityBasedManagementUri"] = undefined /*out*/;
            resourceInputs["workforceIdentityBasedOauth2ClientId"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["managementServerId"] = undefined /*out*/;
            resourceInputs["managementUri"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networks"] = undefined /*out*/;
            resourceInputs["oauth2ClientId"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["workforceIdentityBasedManagementUri"] = undefined /*out*/;
            resourceInputs["workforceIdentityBasedOauth2ClientId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["location", "managementServerId", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ManagementServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ManagementServer resource.
 */
export interface ManagementServerArgs {
    /**
     * Optional. The description of the ManagementServer instance (2048 characters or less).
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. Server specified ETag for the ManagementServer resource to prevent simultaneous updates from overwiting each other.
     */
    etag?: pulumi.Input<string>;
    /**
     * Optional. Resource labels to represent user provided metadata. Labels currently defined: 1. migrate_from_go= If set to true, the MS is created in migration ready mode.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    /**
     * Required. The name of the management server to create. The name must be unique for the specified project and location.
     */
    managementServerId: pulumi.Input<string>;
    /**
     * VPC networks to which the ManagementServer instance is connected. For this version, only a single network is supported.
     */
    networks: pulumi.Input<pulumi.Input<inputs.backupdr.v1.NetworkConfigArgs>[]>;
    project?: pulumi.Input<string>;
    /**
     * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    requestId?: pulumi.Input<string>;
    /**
     * The type of the ManagementServer resource.
     */
    type: pulumi.Input<enums.backupdr.v1.ManagementServerType>;
}
