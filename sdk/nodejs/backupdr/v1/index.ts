// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GetManagementServerArgs, GetManagementServerResult, GetManagementServerOutputArgs } from "./getManagementServer";
export const getManagementServer: typeof import("./getManagementServer").getManagementServer = null as any;
export const getManagementServerOutput: typeof import("./getManagementServer").getManagementServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementServer","getManagementServerOutput"], () => require("./getManagementServer"));

export { GetManagementServerIamPolicyArgs, GetManagementServerIamPolicyResult, GetManagementServerIamPolicyOutputArgs } from "./getManagementServerIamPolicy";
export const getManagementServerIamPolicy: typeof import("./getManagementServerIamPolicy").getManagementServerIamPolicy = null as any;
export const getManagementServerIamPolicyOutput: typeof import("./getManagementServerIamPolicy").getManagementServerIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getManagementServerIamPolicy","getManagementServerIamPolicyOutput"], () => require("./getManagementServerIamPolicy"));

export { ManagementServerArgs } from "./managementServer";
export type ManagementServer = import("./managementServer").ManagementServer;
export const ManagementServer: typeof import("./managementServer").ManagementServer = null as any;
utilities.lazyLoad(exports, ["ManagementServer"], () => require("./managementServer"));

export { ManagementServerIamBindingArgs } from "./managementServerIamBinding";
export type ManagementServerIamBinding = import("./managementServerIamBinding").ManagementServerIamBinding;
export const ManagementServerIamBinding: typeof import("./managementServerIamBinding").ManagementServerIamBinding = null as any;
utilities.lazyLoad(exports, ["ManagementServerIamBinding"], () => require("./managementServerIamBinding"));

export { ManagementServerIamMemberArgs } from "./managementServerIamMember";
export type ManagementServerIamMember = import("./managementServerIamMember").ManagementServerIamMember;
export const ManagementServerIamMember: typeof import("./managementServerIamMember").ManagementServerIamMember = null as any;
utilities.lazyLoad(exports, ["ManagementServerIamMember"], () => require("./managementServerIamMember"));

export { ManagementServerIamPolicyArgs } from "./managementServerIamPolicy";
export type ManagementServerIamPolicy = import("./managementServerIamPolicy").ManagementServerIamPolicy;
export const ManagementServerIamPolicy: typeof import("./managementServerIamPolicy").ManagementServerIamPolicy = null as any;
utilities.lazyLoad(exports, ["ManagementServerIamPolicy"], () => require("./managementServerIamPolicy"));


// Export enums:
export * from "../../types/enums/backupdr/v1";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-native:backupdr/v1:ManagementServer":
                return new ManagementServer(name, <any>undefined, { urn })
            case "google-native:backupdr/v1:ManagementServerIamBinding":
                return new ManagementServerIamBinding(name, <any>undefined, { urn })
            case "google-native:backupdr/v1:ManagementServerIamMember":
                return new ManagementServerIamMember(name, <any>undefined, { urn })
            case "google-native:backupdr/v1:ManagementServerIamPolicy":
                return new ManagementServerIamPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-native", "backupdr/v1", _module)
